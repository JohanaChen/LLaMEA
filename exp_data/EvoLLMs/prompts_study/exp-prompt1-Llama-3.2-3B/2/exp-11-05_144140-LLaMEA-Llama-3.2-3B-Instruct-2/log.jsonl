{"id": "0b5c6039-eeb6-4017-9ef1-40929ee54890", "solution": "import random\nimport numpy as np\n\nclass HyperElitist:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            self.population[np.argmin(func(self.population))] = np.random.uniform(-5.0, 5.0, self.dim)\n\n    def get_elitist(self):\n        return self.elitist\n\n# Example usage:\ndef func(x):\n    return np.sum(x**2)\n\nhyper_elitist = HyperElitist(100, 10)\nhyper_elitist(func)\nprint(hyper_elitist.get_elitist())", "name": "HyperElitist", "description": "Novel \"Hyper-Elitist\" algorithm combining Hyper-Elitism with a novel \"Bloom\" selection strategy", "configspace": "", "generation": 0, "fitness": 0.09098607137834272, "feedback": "The algorithm HyperElitist got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": null, "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.16990403043730817, 0.18818139055183436, 0.17795153461079805, 0.18017457807681747, 0.16287532105860114, 0.19010625151835103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.05260465455083596, 0.036843840851905174, 0.04096043386050385, 0.03732066520661048, 0.03666699986904953, 0.0528437448134802, 0.040302343567608645, 0.05884554168254286, 0.025902235419872688, 0.032508982847686774, 0.0481463786277756, 0.02745076428300286, 0.049408115583302936, 0.05702732174006231, 0.03768548859383769, 0.04087621372448791, 0.030227322079562913, 0.08798331813071913, 0.07375061450247145, 0.09047260094410525, 0.08285560283337712, 0.08032688292695478, 0.08639412375773481, 0.08241335164734209, 0.08620909750186001, 0.0793389073920785, 0.07973913569416458, 0.08043703106553202, 0.0915708257790595, 0.06743127653367942, 0.062276416502640486, 0.0640540044974256, 0.09472457566024695, 0.06036583728012834, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.14821575319421676, 0.10314027984234253, 0.0946340867246579, 0.1275794276408223, 0.12595553978877339, 0.13183421782633542, 0.11599925472713601, 0.0043507767599104685, 9.999999999998899e-05, 0.006205422871878197, 0.004364104263510082, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 9.999999999998899e-05, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.044669195072529644, 0.02707569422668732, 0.055770453722678415, 0.0521337003680461, 0.05008726726802559, 0.06308832861212665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.2208265573371131, 0.20448557896111874, 0.19484960452454814, 0.20643987412655185, 0.18497648379534326, 0.1938043364320281, 0.1998807079546645, 0.184482212031988, 0.20364032150703493, 0.04934077248524882, 0.04616408479657197, 0.047006267835178916, 0.04157605611782478, 0.04044270120146887, 0.046009660620107806, 0.07324841696418738, 0.04401319201888487, 0.04555179045768332, 0.13752828439073006, 0.1278473676140811, 0.13724857574060534, 0.13766266535167793, 0.14115194246620144, 0.12443197828736552, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.1717970366239282, 0.1667021098763396, 0.17604804298053955, 0.16779352461211916, 0.18111703207128071, 0.17696244973246633, 0.1620930202804024, 0.17379870215865434, 0.15574213095629696, 0.11057627144007143, 0.10469608473988923, 0.11843744095368924, 0.11298994061511125, 0.13610520396364734, 0.10981176495924938, 0.10635311944021086, 0.12374332139978683, 0.12291871152609313, 0.13974788276578898, 0.16233450221944246, 0.1583470274596206, 0.1612522460767779, 0.14844191300014664, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.13975188906562597, 0.1497862596280991, 0.1426064404081222, 0.14101597620439077, 0.15170978752917996, 0.15282202985716775, 0.1394025181707912, 0.14175390856222403, 0.16207881422481074, 0.26152827569018766, 0.16679477618376493, 0.16448841961953697, 0.15961912430669012, 0.15015918532306627, 0.14117040431330008, 0.16204650251394526, 0.1642709862525238, 0.17679361855480924, 0.15768378219198798, 0.14888823309102373, 0.1649048670958274, 0.14806617336470773, 0.19097390514716928, 0.16045377817904138, 0.1278155590966964, 0.1733004519960285, 0.2028812417861957, 0.17575139933950445, 0.19091530051424366, 0.17502992212052215, 0.18736797573694175, 0.21356697922939338, 0.18484700267336918, 0.1752269276064815, 0.18769669844884618, 0.1763125746754617, 0.05836377766803147, 0.055317793090979506, 0.06578904356368453, 0.05186305593955043, 0.05915291646927667, 0.05620195663857941, 0.0753762405863927, 0.0548653285745897, 0.06698978527217236]}, "mutation_prompt": null}
{"id": "06d80e9d-b80f-44e0-9534-4a12be2a4780", "solution": "import random\nimport numpy as np\n\nclass HyperElitist:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population using Bloom filter\n            bloom_filter = np.zeros(self.budget, dtype=bool)\n            for individual in selected:\n                np.random.seed(individual[0])\n                bloom_filter[int(np.random.uniform(0, self.budget))]=True\n            best_indices = np.where(bloom_filter)[0]\n            best = selected[best_indices[np.argmin(func(selected[best_indices]])]]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            self.population[np.argmin(func(self.population))] = np.random.uniform(-5.0, 5.0, self.dim)\n\n    def get_elitist(self):\n        return self.elitist\n\n# Example usage:\ndef func(x):\n    return np.sum(x**2)\n\nhyper_elitist = HyperElitist(100, 10)\nhyper_elitist(func)\nprint(hyper_elitist.get_elitist())\n", "name": "HyperElitist", "description": "Novel \"Hyper-Elitist\" with improved Bloom selection strategy", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError(\"closing parenthesis ']' does not match opening parenthesis '('\", ('<string>', 29, 79, '            best = selected[best_indices[np.argmin(func(selected[best_indices]])]]', 29, 79)).", "error": "SyntaxError(\"closing parenthesis ']' does not match opening parenthesis '('\", ('<string>', 29, 79, '            best = selected[best_indices[np.argmin(func(selected[best_indices]])]]', 29, 79))", "parent_id": "0b5c6039-eeb6-4017-9ef1-40929ee54890", "metadata": {}, "mutation_prompt": null}
{"id": "90bfb96f-add9-4338-984c-5ac825b892af", "solution": "import random\nimport numpy as np\n\nclass HyperElitist:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% mutation rate\n                mutation_factor = np.random.uniform(0.8, 1.2)\n                self.population[np.argmin(func(self.population))] = mutation_factor * worst\n\n    def get_elitist(self):\n        return self.elitist\n\n# Example usage:\ndef func(x):\n    return np.sum(x**2)\n\nhyper_elitist = HyperElitist(100, 10)\nhyper_elitist(func)\nprint(hyper_elitist.get_elitist())\n", "name": "HyperElitist", "description": "Novel \"Hyper-Elitist\" algorithm combining Hyper-Elitism with a novel \"Bloom\" selection strategy using Probabilistic Mutation.", "configspace": "", "generation": 2, "fitness": 0.09093744516846075, "feedback": "The algorithm HyperElitist got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "0b5c6039-eeb6-4017-9ef1-40929ee54890", "metadata": {"aucs": [0.17770638662463534, 0.1757416607564286, 0.17059779069832404, 0.17170101113807834, 0.18710970789333448, 0.17558382062281364, 0.17431260854578012, 0.16219489230442907, 0.1899837189725626, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04208826204245519, 0.05346884068882207, 0.03669844691127255, 0.041028703578300574, 0.03732066520661048, 0.039152308156773175, 0.0528437448134802, 0.06694269852317214, 0.058711088734964334, 0.025902235419872688, 0.032508982847686774, 0.04688851502480795, 0.02400955501086177, 0.049806356293352616, 0.05706092905469884, 0.03768548859383769, 0.03993904356541367, 0.029898291447754133, 0.0874740931510698, 0.07407236529673478, 0.09087431849796956, 0.09226215987570519, 0.08032688292695478, 0.08629220567675944, 0.08212418707263225, 0.08537088102615531, 0.07922280747322352, 0.07973913569416458, 0.08044086192116151, 0.10171882691615464, 0.06511376511403066, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.05698456229173443, 0.09992729358139563, 0.12181748543385129, 0.19308637766117165, 0.1481892667583825, 0.10472759822899336, 0.09462123076946372, 0.13006646326400784, 0.12813469109341935, 0.1368487698841222, 0.11600289336567926, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.0004670761302874027, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.006322760845760778, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05889340847661062, 0.06858859508378334, 0.045274884319672526, 0.0694435464679094, 0.02707569422668732, 0.055770453722678415, 0.05329203203272004, 0.05008726726802559, 0.06701035076908957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2208494740862339, 0.21017489673554557, 0.19396308691291142, 0.2057792550097688, 0.1896890160293081, 0.20746280581490306, 0.1998807079546645, 0.1830627134661822, 0.19635396835876473, 0.04796215455931285, 0.0446685802532627, 0.04389470762621894, 0.044755473957035274, 0.0403895640752171, 0.04585851057359247, 0.0738147574668746, 0.043993360971981255, 0.05229792848072812, 0.13752783092736576, 0.1274319223782675, 0.1414951965332677, 0.14122536296943566, 0.13887415196550446, 0.1301376463699584, 0.15034268976310372, 0.1487984890156565, 0.133103584521869, 0.17171277930411766, 0.17511097759279437, 0.1760473800192245, 0.16779352461211916, 0.1821570391867735, 0.17696486687679625, 0.16823225351069282, 0.17377774300845283, 0.15385516235548513, 0.1106046645370774, 0.1113741413985454, 0.11849032669552728, 0.10976624152522962, 0.13615506782476272, 0.1204686715042923, 0.10305483362042633, 0.12374124804543751, 0.12291863805432224, 0.1410630187122207, 0.14944254222425968, 0.1583470274596206, 0.1601583581414543, 0.15024514601945627, 0.16235469689939275, 0.15533346120938785, 0.14449633116073224, 0.18277724523822958, 0.14195011305864957, 0.15221371897065838, 0.1426064404081222, 0.14101597620439077, 0.14772856212182817, 0.15282202985716775, 0.1402623479731876, 0.14175390856222403, 0.16207881422481074, 0.2010479357160616, 0.16681034849939202, 0.16456609150096047, 0.1593307367891761, 0.15120377398541462, 0.1411982491807059, 0.16262387122421695, 0.16340398224564523, 0.1766398090223229, 0.15878385237828319, 0.15831818642841577, 0.13195206191153463, 0.14780187872384254, 0.1892431521103637, 0.16066257290117647, 0.16855914701115304, 0.17338389085481576, 0.20278503049010976, 0.17575278190643862, 0.19090732212242512, 0.17585034123885257, 0.1750882315250768, 0.21357420310237862, 0.1839273686273647, 0.17594512205278, 0.18933528979092384, 0.20491329762080313, 0.058412488552163855, 0.05532026078645891, 0.06585155299632517, 0.051617081104294416, 0.05933356708217219, 0.05647655316663436, 0.07545091101390666, 0.056284051447234695, 0.059640761136065756]}, "mutation_prompt": null}
{"id": "e03e224d-5a14-4d9a-93a7-61cbee3ba89f", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                self.population[np.argmin(func(self.population))] = np.random.uniform(-5.0, 5.0, self.dim)\n\n    def get_elitist(self):\n        return self.elitist\n\n# Example usage:\ndef func(x):\n    return np.sum(x**2)\n\nhyper_elitist_bloom = HyperElitistBloom(100, 10)\nhyper_elitist_bloom(func)\nprint(hyper_elitist_bloom.get_elitist())", "name": "HyperElitistBloom", "description": "Novel \"Hyper-Elitist Bloom\" algorithm combining Hyper-Elitism with a novel \"Bloom\" selection strategy and incorporating probabilistic mutation.", "configspace": "", "generation": 3, "fitness": 0.09142731087929537, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "0b5c6039-eeb6-4017-9ef1-40929ee54890", "metadata": {"aucs": [0.17619146991055046, 0.17588180636944817, 0.17067221269119004, 0.17405043048995594, 0.18632782706777584, 0.17435191965844465, 0.1779891634444264, 0.16280868114953972, 0.18604692386618493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041702083932415035, 0.05082442981835289, 0.036652389620399295, 0.04108658669236542, 0.03732066520661048, 0.03948978223329991, 0.05089717883332612, 0.06702432684758475, 0.05771187903389441, 0.02589920518126232, 0.032508982847686774, 0.04774151833247253, 0.027803019802558393, 0.04926774209271334, 0.05707903161479755, 0.03768548859383769, 0.040252763444739825, 0.029898291447754133, 0.08746944629118047, 0.07415994758806954, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639818702713542, 0.08222559889516068, 0.08620909750186001, 0.0793648789508905, 0.07686950661142278, 0.08001952703606696, 0.10181261169199773, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19310588557670094, 0.14931228304392974, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12893179130867682, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019597111055594918, 0.008081236604151831, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 9.999999999998899e-05, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057687362590849944, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.032530568194916176, 0.055770453722678415, 0.05461378384404303, 0.05008726726802559, 0.06832232724995735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.21842986074470305, 0.2148718875432113, 0.19458047550619217, 0.20552393699472304, 0.18497192004303142, 0.20708947437364678, 0.1998542924261899, 0.18665696390401842, 0.2036643500811599, 0.05301058507656142, 0.04250646008327186, 0.04401887178405428, 0.04287359191880258, 0.040324039656776556, 0.04585851057359247, 0.07290174993808063, 0.04445664260356719, 0.05229792848072812, 0.13752783092736576, 0.12753656416197268, 0.13679986860039284, 0.1412797182171618, 0.14141561326953656, 0.1293990714529084, 0.15033943576444508, 0.14844614372939335, 0.1338453581186947, 0.17182146956931754, 0.16252091877975183, 0.176041049678049, 0.16779352461211916, 0.16171586834108043, 0.17613640029891287, 0.16619544989630775, 0.17377774300845283, 0.15366829057614728, 0.11057505330758033, 0.1038321451183496, 0.11849032669552728, 0.11091592239390446, 0.12153277784861971, 0.12400129686052874, 0.1047405734700314, 0.11323942081793159, 0.12337296644464746, 0.1410630187122207, 0.16235260979738686, 0.1583470274596206, 0.16027749315924245, 0.1505684484338119, 0.16240038178756644, 0.15533346120938785, 0.17353975696504131, 0.18256782180359366, 0.14195011305864957, 0.1503126975308442, 0.1412581604582399, 0.14101597620439077, 0.15434944619953805, 0.15282202985716775, 0.14096434603863706, 0.1414790833945282, 0.16278730174174383, 0.1837255047154398, 0.1668699675911084, 0.1665082122319942, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1633192167273252, 0.1765185856589866, 0.16009056033027214, 0.15831919899882319, 0.16055871367035235, 0.1500863923094481, 0.19422151583785474, 0.16008983488914275, 0.1685593242271518, 0.1732568905176819, 0.20294847155931384, 0.17376814318153722, 0.18584660120927554, 0.17574314822112613, 0.18685159313886857, 0.2139434982725127, 0.18363894329042185, 0.17594512205278, 0.18832532218492992, 0.20506156430526956, 0.058359333021251625, 0.05532204167722554, 0.06585155299632517, 0.0517501847812597, 0.059351952303917876, 0.055551673918359135, 0.07564496775325091, 0.0551322760967865, 0.06864867502669714]}, "mutation_prompt": null}
{"id": "cfef0615-9533-4b04-a267-66ccdd1b9312", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    self.population[np.argmin(func(self.population))] = np.random.uniform(-5.0, 5.0, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Novel \"Hyper-Elitist Bloom\" algorithm combining Hyper-Elitism with a novel \"Bloom\" selection strategy and incorporating probabilistic mutation.", "configspace": "", "generation": 4, "fitness": 0.0914646718315133, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e03e224d-5a14-4d9a-93a7-61cbee3ba89f", "metadata": {"aucs": [0.1777139996739341, 0.1757518724338848, 0.1702290253063824, 0.17150387971053227, 0.18632782706777584, 0.17689166565701397, 0.1743353021736619, 0.16264921022156031, 0.1726728634138146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03961359559397282, 0.04857959329460715, 0.035023236531656954, 0.041028703578300574, 0.03732066520661048, 0.039447964923875256, 0.052621205149312456, 0.06702432684758475, 0.058711088734964334, 0.023960838131045437, 0.03227476153610509, 0.0481463786277756, 0.02745076428300286, 0.04953327465652724, 0.057033632906557385, 0.03768548859383769, 0.038265018673064644, 0.03013852058583366, 0.08747025405680375, 0.07356227687560601, 0.0831518560866169, 0.08946832865033572, 0.08032688292695478, 0.08639412375773481, 0.08205411175707156, 0.08620909750186001, 0.07934004826516561, 0.0797090366479648, 0.08043703106553202, 0.10171882691615464, 0.06743127653367942, 0.06013563800813648, 0.06158434847481842, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19265088620594473, 0.1480974018305644, 0.10374331398460923, 0.09685346092514469, 0.13123694841517808, 0.12761708571568176, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004377280289894592, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.07075715808195004, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05566241856120846, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03158966795683449, 0.055770453722678415, 0.043597966269439015, 0.05008726726802559, 0.06631052944920335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207543104494325, 0.21634566932266763, 0.19480431428609268, 0.2055799784281095, 0.18972199855681238, 0.2066147416391213, 0.19987913881451724, 0.1991588581374547, 0.20380217125227995, 0.050099595290790444, 0.04697164201300785, 0.04677023275795689, 0.04090651169206316, 0.04044574604984119, 0.046009660620107806, 0.07414561056419611, 0.04397954287797856, 0.05229792848072812, 0.13747837757302173, 0.1273756949102195, 0.14194645050514942, 0.14128226620339335, 0.14115194246620144, 0.13013755749087796, 0.13970520264583397, 0.14861128584406724, 0.13379503197491027, 0.17181922987011733, 0.1849479374032592, 0.1760473800192245, 0.15776610984100603, 0.16165498403356682, 0.17602253396780065, 0.16713606988565877, 0.17377774300845283, 0.15374588471824369, 0.11533631681384582, 0.10554883439065799, 0.11849309699487043, 0.11238502534357864, 0.1362789459093081, 0.11804067154305808, 0.10509430431367528, 0.12368355580369339, 0.1229185550255375, 0.1403523995509286, 0.1623865850465821, 0.1583470274596206, 0.1601583581414543, 0.14539126806225544, 0.1623394643820184, 0.15533346120938785, 0.1741717867648298, 0.18277724523822958, 0.13689764972153984, 0.14924294881494893, 0.1426064404081222, 0.14101597620439077, 0.1569252268257102, 0.15278421981377122, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.19606553071902355, 0.1666967312017107, 0.16456609150096047, 0.1596427042756502, 0.14995001973124744, 0.14140528837434252, 0.16221578452916652, 0.16412875106863578, 0.17650083581544018, 0.15915517232229792, 0.15833462142207844, 0.16490574476026154, 0.150279242450582, 0.1880954091428777, 0.16045374486843178, 0.1685583306969023, 0.17346102770876937, 0.2028812417861957, 0.1752009464819928, 0.19094915976158955, 0.17590314992652634, 0.1869184577956856, 0.21389492295027102, 0.18383253695497537, 0.17275891375245134, 0.1893474871049381, 0.20568880668582523, 0.05773334291605714, 0.055317793090979506, 0.06585155299632517, 0.051862156040781704, 0.05934830659822565, 0.05546710601447735, 0.07533341710911123, 0.055337318058702456, 0.06072943737915504]}, "mutation_prompt": null}
{"id": "c75f8908-d448-4d16-8e85-13f1db45e7b2", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.lr = 0.1  # initial learning rate\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    self.population[np.argmin(func(self.population))] = np.random.uniform(-5.0, 5.0, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            self.population = new_population\n            # Update learning rate based on convergence\n            convergence = 1 - np.mean(func(self.population))\n            if convergence > 0.99:\n                self.lr *= 0.9\n            elif convergence < 0.01:\n                self.lr *= 1.1\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine HyperElitistBloom by incorporating adaptive learning rate and using a more efficient Bloom selection strategy.", "configspace": "", "generation": 5, "fitness": 0.0906169877091722, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cfef0615-9533-4b04-a267-66ccdd1b9312", "metadata": {"aucs": [0.17791181310551074, 0.17589523966888176, 0.17032452547421184, 0.17079677629403633, 0.17036057536453975, 0.17436774802278343, 0.17856999940812623, 0.16331058679060917, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.05273196577025663, 0.03706110992249345, 0.0397733606449614, 0.03730499245900887, 0.03948978223329991, 0.05275846700300957, 0.06701442576092065, 0.058711088734964334, 0.025999085923574028, 0.032508982847686774, 0.047237345711185985, 0.027803019802558393, 0.04926774209271334, 0.05717503396748247, 0.03768548859383769, 0.040659122327942, 0.02991222685057604, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08884980469733383, 0.07865661766151877, 0.072407996088797, 0.08222559889516068, 0.08620951017423428, 0.07734336040842738, 0.0653793099269484, 0.08001952703606696, 0.10167293466287575, 0.06783755759972065, 0.062276416502640486, 0.061028077191266905, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.11562747077189162, 0.19308637766117165, 0.10723518912123331, 0.10471519865355927, 0.09685346092514469, 0.1246903468600361, 0.13044685688686186, 0.1368487698841222, 0.11602699766434466, 9.999999999998899e-05, 0.004560104586776803, 0.006205422871878197, 0.004364977034488571, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.007159387613177359, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05375613339342178, 0.06535045920481664, 0.04532943956456725, 0.06941906045599022, 0.03165693341080966, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22088967438376195, 0.2078034786086922, 0.19495588911784612, 0.2057703145568669, 0.19356518511408471, 0.2071780757703836, 0.1998969363979728, 0.18678487840399327, 0.20375589585287823, 0.04956654986625131, 0.04635106613562112, 0.04690048271096292, 0.040682864764730264, 0.04044839648056664, 0.0360249635600961, 0.07338302702472954, 0.041293419521848174, 0.05229792848072812, 0.13752783092736576, 0.12717589603074175, 0.13790216405164013, 0.13824479483079943, 0.1411541180596103, 0.1300407470891829, 0.15034268976310372, 0.14861072408494802, 0.13347958988648823, 0.1708201853855129, 0.17994793568954026, 0.17489536994808919, 0.16717348522264452, 0.18217378332594514, 0.17614965791254344, 0.16591420191343298, 0.17377774300845283, 0.15200500931437944, 0.11500037189619783, 0.10708763014745915, 0.11849032669552728, 0.11146470531318664, 0.13650512287714356, 0.11676917384452845, 0.10628682615994733, 0.1237427242099084, 0.12339831718622096, 0.13880189243123386, 0.1623131899991176, 0.15835182675294057, 0.16011312328722127, 0.14585823406647103, 0.16236042742370171, 0.15533346120938785, 0.17359009491151678, 0.18277478810053482, 0.13689764972153984, 0.14773387457600906, 0.14006577975982915, 0.14101597620439077, 0.14726529894561358, 0.15282202985716775, 0.14096434603863706, 0.14174525075107614, 0.16317474918726405, 0.20069756940754513, 0.16679761926065406, 0.16656824759046085, 0.15943315666671043, 0.15121743733614568, 0.13530080517025433, 0.1614749618959691, 0.1631487800598881, 0.17676809198258525, 0.16025081799724938, 0.15833462142207844, 0.16466527300678713, 0.15048669267034165, 0.1855014828048922, 0.16045374486843178, 0.16091606773222722, 0.1779071500109186, 0.11171107404521263, 0.17484800825497038, 0.19094915976158955, 0.17664739937850626, 0.18670843751148491, 0.21353659045992868, 0.18439742284965677, 0.17594512205278, 0.18833968599703488, 0.20568880668582523, 0.05833366491394698, 0.055317793090979506, 0.06585155299632517, 0.05158347866238455, 0.05934830659822565, 0.055933964908894684, 0.05487301800350508, 0.055186128534406964, 0.06742473192834308]}, "mutation_prompt": null}
{"id": "559255a0-9507-460b-afc4-4a6f70672594", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    self.population[np.argmin(func(self.population))] = np.random.uniform(-5.0, 5.0, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection with a more efficient approach\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for i in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in sorted(selected, key=lambda x: func(x), reverse=True):\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Novel \"Hyper-Elitist Bloom\" algorithm combining Hyper-Elitism with a novel \"Bloom\" selection strategy and incorporating probabilistic mutation, with refinement to use a more efficient Bloom selection strategy.", "configspace": "", "generation": 6, "fitness": 0.09089739036337949, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cfef0615-9533-4b04-a267-66ccdd1b9312", "metadata": {"aucs": [0.17807105223531305, 0.17356953125540076, 0.16984313458316425, 0.16978186677373508, 0.18816809643435195, 0.18093796213064917, 0.17852787839610207, 0.16024219881598345, 0.19008555847561814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042072042754083716, 0.049803807723614923, 0.037228604782548746, 0.04100164522081573, 0.03732066520661048, 0.03829133748844615, 0.05299418997481209, 0.0403157511590434, 0.04254537699721672, 0.026066491590485796, 0.027678467139138574, 0.04688851502480795, 0.027803019802558393, 0.0493624512773122, 0.05771521973439708, 0.03115616602570337, 0.0399806941625509, 0.02998759664279227, 0.08746944629118047, 0.07415994758806954, 0.09120479389792113, 0.0888839421899873, 0.08032688292695478, 0.07455734967866223, 0.08212418707263225, 0.08571719118494114, 0.07943079500233707, 0.06526998782470872, 0.08043703106553202, 0.10171882691615464, 0.06796986198957133, 0.062276416502640486, 0.06230183161343794, 0.09472457566024695, 0.06090165926718416, 0.09821690698750918, 0.1246310931138418, 0.19308637766117165, 0.1481850439168273, 0.10364220353130782, 0.09470711266913823, 0.12748174535078283, 0.12753484201340304, 0.1364045443192342, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.0042075348643063615, 0.0042839219491020986, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.025157232330730417, 9.999999999998899e-05, 0.010809369510698108, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05468480320782387, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.054782067011964086, 0.05295698494644707, 0.05008726726802559, 0.07048989925701266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.2205134209406988, 0.19730315040519586, 0.19495588911784612, 0.20551828808175698, 0.19156782059012445, 0.20724700933075846, 0.1998807079546645, 0.18060293530970817, 0.20408032060320924, 0.04839533897166859, 0.047120687447940734, 0.04401887178405428, 0.04316834883154719, 0.03519621059563505, 0.046009660620107806, 0.07372867216961354, 0.04347028622224969, 0.05229792848072812, 0.137090463653059, 0.12333260235687304, 0.13747175513207655, 0.13990371955733372, 0.13858288888894454, 0.12987982981560142, 0.15034268976310372, 0.1488446003845525, 0.1338453581186947, 0.1717121580380495, 0.17182192881780445, 0.1760473800192245, 0.1689462664589546, 0.1821475315351614, 0.17005089343545532, 0.16594219360911588, 0.16439361781061146, 0.15385358430291052, 0.11455952611911957, 0.1047164972305733, 0.11849032669552728, 0.11234304780385951, 0.13611485366418652, 0.11968285909940135, 0.10623884374430759, 0.12371617260903989, 0.09768436781085366, 0.14035052248229418, 0.1624415740393399, 0.1583470274596206, 0.1601583581414543, 0.15051477648176514, 0.16219882481673142, 0.15340969722203446, 0.17794302382424154, 0.18251580772641363, 0.14195011305864957, 0.14775112950904, 0.139184939538469, 0.14285255308458022, 0.15150758448823431, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.14594593489043017, 0.24518998885269494, 0.16626576472009313, 0.1664230139736157, 0.15852868947200682, 0.15121371449380383, 0.1379446098909477, 0.16444625684852077, 0.1634028490223587, 0.17618549302850384, 0.15774122775197974, 0.15832057460437354, 0.1580421290054448, 0.15032589984034117, 0.18886734367950586, 0.16045374486843178, 0.1685588165628804, 0.17419926233012628, 0.2028812417861957, 0.17573864002605077, 0.18535490357207907, 0.17598717234228767, 0.18683568409856555, 0.2135404523711899, 0.1841594850780287, 0.17588918966966938, 0.18934084856668754, 0.20568880668582523, 0.057742530215113774, 0.05535278380141573, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.052497531481517035, 0.07532529613519179, 0.055041744632991496, 0.060275072914417804]}, "mutation_prompt": null}
{"id": "bd93c196-1e4c-4cfd-a63b-2d8bde920e1f", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    self.population[np.argmin(func(self.population))] = np.random.uniform(-5.0, 5.0, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Replace the worst individual with the new best individual if the best individual is not the same as the worst individual\n            if best!= worst:\n                self.population[self.budget - 1] = best\n            else:\n                # If the best individual is the same as the worst individual, replace the worst individual with a new random individual\n                self.population[self.budget - 1] = np.random.uniform(-5.0, 5.0, self.dim)\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Novel \"Hyper-Elitist Bloom\" algorithm combining Hyper-Elitism with a novel \"Bloom\" selection strategy and incorporating probabilistic mutation and a more efficient elitist replacement strategy.", "configspace": "", "generation": 7, "fitness": 0.09133356022215161, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cfef0615-9533-4b04-a267-66ccdd1b9312", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.1723651178325163, 0.18694048726873735, 0.17686084355306575, 0.1788109022789215, 0.1657597018001712, 0.19860815516328334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04207051605100587, 0.047175856896154666, 0.036843840851905174, 0.03991250771603294, 0.03787154589960395, 0.03948978223329991, 0.05089717883332612, 0.06786330167715748, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.03784318004313414, 0.027803019802558393, 0.027587638924667535, 0.0571765954176362, 0.03768548859383769, 0.03992308285267243, 0.029830713814824605, 0.08746701020135184, 0.07356227687560601, 0.0900832873535099, 0.08897054890786771, 0.08032688292695478, 0.08645425756567549, 0.08222478068514616, 0.07874277503392257, 0.07937458871668857, 0.0797090366479648, 0.08070416037402606, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.0610854940585861, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12038862018964158, 0.19302622637228872, 0.1481850439168273, 0.10471519865355927, 0.09536389977091553, 0.12469632583643575, 0.12598301143858393, 0.1368487698841222, 0.11599879438801142, 0.0043507767599104685, 9.999999999998899e-05, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.01900488333945327, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.030159438583772458, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.06227316634219093, 0.05008726726802559, 0.06243222843374374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22083874301252848, 0.21181717796742283, 0.19495588911784612, 0.20577235642073988, 0.1895937061626215, 0.20723448200526806, 0.19959099984771855, 0.18705593468670545, 0.20424563066713186, 0.051923761720477524, 0.0456197100381911, 0.04401887178405428, 0.04318500683936777, 0.040445373142449004, 0.046009660620107806, 0.07466664914463239, 0.04395876629650286, 0.05229792848072812, 0.13752783092736576, 0.12734985408101274, 0.14194181433420527, 0.14118948206094994, 0.14115194246620144, 0.12379980802453427, 0.15034211898882077, 0.14861619065631115, 0.13198084109916286, 0.17226002886972458, 0.16822832798606946, 0.1760473800192245, 0.16779345406006485, 0.18152323409980287, 0.17695863189317917, 0.1654952181098419, 0.17377774300845283, 0.15352962243598833, 0.11534400272016332, 0.10445666734083514, 0.11843238543815582, 0.1123182076723217, 0.13605863176761557, 0.11671762004502761, 0.10628682615994733, 0.12368777073108927, 0.1218945462271378, 0.13990689469519368, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.14836542581229473, 0.16235004945616127, 0.15533346120938785, 0.1736281502411493, 0.18277724523822958, 0.1421010709373144, 0.14878527688851118, 0.14127099752922512, 0.14101597620439077, 0.15332198235016914, 0.15282202985716775, 0.14096434603863706, 0.1411578444666709, 0.16207881422481074, 0.22412821999029986, 0.16614882615371918, 0.16454100061642296, 0.1596427042756502, 0.15120231260257588, 0.14118060336643334, 0.16139484817187333, 0.16289193926754508, 0.17650644009227268, 0.15879372935481073, 0.15738870636473168, 0.13332909511650892, 0.1505067085407672, 0.1887768641469384, 0.16087708813688173, 0.1685586408947236, 0.16237866806138213, 0.20281944926909345, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.21342970408509887, 0.18382439475410084, 0.17595638416306159, 0.18933372406083648, 0.20568880668582523, 0.05811295496710189, 0.05535865121753647, 0.06585155299632517, 0.05158111314302383, 0.059008649737566365, 0.054969628252219405, 0.07532830772919019, 0.056342461990710246, 0.06115939995249664]}, "mutation_prompt": null}
{"id": "8ddb4095-81cb-4a97-a975-d91acf745e11", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    self.population[np.argmin(func(self.population))] = np.random.uniform(-5.0, 5.0, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection with adaptive weighting\n            weights = np.array([func(individual) / np.sum(func(selected)) for individual in selected])\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# Refinement: In the Bloom selection strategy, use the relative fitness of each individual as the weight, rather than the absolute fitness.\n# This will allow the algorithm to adapt to the changing fitness landscape and improve the overall performance.", "name": "HyperElitistBloom", "description": "Novel \"Hyper-Elitist Bloom\" algorithm combining Hyper-Elitism with a novel \"Bloom\" selection strategy and incorporating probabilistic mutation, with a refinement in the Bloom selection strategy to use a more adaptive weighting scheme.", "configspace": "", "generation": 8, "fitness": 0.09099133322959106, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cfef0615-9533-4b04-a267-66ccdd1b9312", "metadata": {"aucs": [0.17755557195749028, 0.17595602536859456, 0.1709784307450456, 0.17289169039125885, 0.18818826348349893, 0.17842640191349635, 0.17851203657606052, 0.16611749048214064, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042070099180141374, 0.04953190343213665, 0.03685872870754758, 0.04127033748155573, 0.03602281522475803, 0.039152308156773175, 0.05419760517922623, 0.06694269852317214, 0.058722521728323596, 0.025979934130904825, 0.032178477553612694, 0.0481463786277756, 0.02400955501086177, 0.049142915277753496, 0.05702674525995721, 0.03768548859383769, 0.04136036259979703, 0.030375049273934196, 0.08736288564334205, 0.07288000491995206, 0.09148246206274069, 0.08920141112768121, 0.08032688292695478, 0.08548992380708353, 0.08225163812134328, 0.08620909750186001, 0.0793482166065056, 0.07973913569416458, 0.07273669586938247, 0.10171882691615464, 0.06811232437051518, 0.062276416502640486, 0.06130150772388787, 0.07048648617844444, 0.060373681425901715, 0.09992729358139563, 0.12468092783177631, 0.19308637766117165, 0.1481850439168273, 0.10272796239914483, 0.09643669506305397, 0.13123694841517808, 0.12872323244309447, 0.1314137456658454, 0.11599925472713601, 9.999999999998899e-05, 0.004560104586776803, 0.006205422871878197, 0.004398339408987706, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.01900488333945327, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055428706393117144, 0.05396100390757219, 0.05008726726802559, 0.06038333880829083, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.2208231302766489, 0.1938760692751792, 0.1944069795717589, 0.17722958304747283, 0.19147430398617615, 0.20723328315992184, 0.19276989119624455, 0.1802240539379616, 0.20436652350532136, 0.052964790126793004, 0.0468817441341971, 0.04478609851078785, 0.043563652337138214, 0.04037744361846185, 0.046009660620107806, 0.073263588849099, 0.044060204999756714, 0.05141908283059893, 0.13752342279754082, 0.1273795545501043, 0.13721756068776303, 0.14128390546215575, 0.14115019716885513, 0.13013755749087796, 0.15034938955262478, 0.1469365030030565, 0.13347998194749866, 0.17195316280273398, 0.17272830276335605, 0.1760473800192245, 0.16717348522264452, 0.16059143649900232, 0.17696567073657332, 0.16604597955675726, 0.17377774300845283, 0.15344797086251005, 0.11534321591796037, 0.10995852998553424, 0.11765442139862048, 0.11103121839496943, 0.13611034412023515, 0.12004420509538993, 0.10628682615994733, 0.1237427242099084, 0.12291194765723523, 0.1410630187122207, 0.1634911948835881, 0.1583380269291782, 0.16009042263191586, 0.14888130708200475, 0.16236042742370171, 0.15533346120938785, 0.14447598767831404, 0.18277724523822958, 0.13925280608724966, 0.14687420394158923, 0.1426064404081222, 0.13867913747222793, 0.14731853819357932, 0.15321827167194202, 0.13697870895265896, 0.14164044590726022, 0.16207881422481074, 0.20410533628797567, 0.16674991656981675, 0.16656824490244904, 0.15954263801269353, 0.15097032101407548, 0.14129821754794847, 0.1613155350285671, 0.1633741963193459, 0.17679942597442655, 0.1588111160067991, 0.15832057460437354, 0.16242626978622554, 0.15045981355121663, 0.19883270021721522, 0.16057374996381457, 0.16091286284373585, 0.17330334458826002, 0.2028812417861957, 0.17576228462204113, 0.1912907776021755, 0.1752082974592879, 0.18685247590074783, 0.21430651858213212, 0.1837562000429246, 0.17621453782301655, 0.17441465665089528, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06572572037600677, 0.05186305593955043, 0.05934830659822565, 0.05616546301081293, 0.07533025227300783, 0.05596833442423599, 0.0636545238651155]}, "mutation_prompt": null}
{"id": "23a391c2-e00f-4c44-9ecb-11b5447408c1", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Use a weighted mutation strategy based on the fitness values\n                    weights = np.array([func(individual) for individual in selected])\n                    weights /= np.sum(weights)\n                    mutation_index = np.random.choice(len(selected), p=weights)\n                    self.population[np.argmin(func(self.population))] = np.random.uniform(-5.0, 5.0, self.dim) if mutation_index == len(selected) - 1 else self.population[mutation_index]\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Novel \"Hyper-Elitist Bloom\" algorithm with improved probabilistic mutation strategy", "configspace": "", "generation": 9, "fitness": 0.09100634003708787, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cfef0615-9533-4b04-a267-66ccdd1b9312", "metadata": {"aucs": [0.17767482871927054, 0.1758081158395216, 0.15548475896016511, 0.16640976599917645, 0.1881832130824599, 0.1772860301424256, 0.17810067156920217, 0.16550644242572454, 0.1900623290192207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04229115891346158, 0.0509706065856923, 0.03754630201568221, 0.04110263633974409, 0.03732066520661048, 0.03948978223329991, 0.05275846700300957, 0.06702432684758475, 0.0586027417072259, 0.02598971179772036, 0.03198793081749518, 0.0451595065033733, 0.02400955501086177, 0.04926774209271334, 0.05707231553870662, 0.03768548859383769, 0.03992308285267243, 0.030373273161371284, 0.0875297806540768, 0.07355427576268325, 0.09051058709186366, 0.08324008414065542, 0.08032688292695478, 0.08637962242314956, 0.08221350559956697, 0.08620924997954493, 0.07501447221994273, 0.07973913569416458, 0.08043703106553202, 0.10172491100700731, 0.06743127653367942, 0.05367843239843029, 0.06130150772388787, 0.09472457566024695, 0.058877135767583244, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.14862813519345852, 0.10218954154268178, 0.09685346092514469, 0.13123694841517808, 0.1294701475443497, 0.13688818741304842, 0.11599925472713601, 9.999999999998899e-05, 0.004560104586776803, 0.0042075348643063615, 0.0004709895227391625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017162093656277078, 0.008148577147152003, 0.06999333209809033, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 9.999999999998899e-05, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06451390914684185, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.220817768892008, 0.2097523300884896, 0.19361399343647168, 0.2058935087142818, 0.1947598385798779, 0.20735774945238294, 0.19988110225396571, 0.19347383885903602, 0.20408032060320924, 0.04703922833264018, 0.04657153902056366, 0.04408845320557486, 0.042739343486107306, 0.04044270120146887, 0.046009660620107806, 0.07308910552971715, 0.04431978181623597, 0.04555179045768332, 0.13752866173359357, 0.12778278735945792, 0.14193717816326135, 0.1412797182171618, 0.14115194246620144, 0.12962169526678902, 0.15034057724634275, 0.1485838180875806, 0.1338453581186947, 0.17158519542063422, 0.17193605678895552, 0.1760473800192245, 0.16801411931793064, 0.1813416020241978, 0.17004860491921814, 0.164141584424641, 0.17377774300845283, 0.15276624764557223, 0.11540413852358855, 0.10463964233516876, 0.11849032669552728, 0.11235487752776496, 0.13851949500540928, 0.11754949417773519, 0.10639235173809625, 0.12371617260903989, 0.12291271809283555, 0.1410630187122207, 0.1623970555977492, 0.1583470274596206, 0.16012971647138508, 0.1515147212559692, 0.16231081001629244, 0.15497992153121742, 0.14312145082734018, 0.1827901567031942, 0.14195011305864957, 0.14746193646519146, 0.1426064404081222, 0.14101597620439077, 0.15140741413912384, 0.15401655396219227, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.16932467761931969, 0.16679477618376493, 0.166569897309503, 0.1596427042756502, 0.1512026564779997, 0.14120810483276147, 0.16215845658698946, 0.1539883723549429, 0.17650083581544018, 0.15776091351455923, 0.15833462142207844, 0.164980589096971, 0.14912770943579312, 0.18887174806199003, 0.16046663829416463, 0.15259538159859054, 0.17334877781304425, 0.20298158359124274, 0.1757397014909311, 0.19086916339539295, 0.17575925179569007, 0.17853131355260066, 0.21352238087621178, 0.18403881380352427, 0.17248606489648832, 0.19017466593617072, 0.20568880668582523, 0.058347034246204355, 0.05353194455221455, 0.06585155299632517, 0.05216479247617334, 0.058983412239766775, 0.0533550031798079, 0.07552659644908921, 0.05508610172886452, 0.055307877642063574]}, "mutation_prompt": null}
{"id": "d925acce-405e-4a5d-ab3c-6d6746424b63", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    self.population[np.argmin(func(self.population))] = np.random.uniform(-5.0, 5.0, self.dim)\n                    # Apply a new \"Bloom\" selection strategy: use a weighted selection\n                    weights = np.array([func(individual) for individual in self.population])\n                    weights /= np.sum(weights)\n                    new_population = []\n                    for _ in range(self.budget):\n                        r = random.random()\n                        cumulative_weight = 0\n                        for individual in self.population:\n                            cumulative_weight += weights[individual]\n                            if cumulative_weight >= r:\n                                new_population.append(individual)\n                                break\n                    self.population = new_population\n            else:\n                # Apply a new \"Bloom\" selection strategy: use a weighted selection\n                weights = np.array([func(individual) for individual in selected])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n                self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# ```", "name": "HyperElitistBloom", "description": "Novel \"Hyper-Elitist Bloom\" algorithm with probabilistic mutation and weighted Bloom selection", "configspace": "", "generation": 10, "fitness": 0.09132071083329685, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cfef0615-9533-4b04-a267-66ccdd1b9312", "metadata": {"aucs": [0.1777139996739341, 0.17582573523236733, 0.170257377687277, 0.17443481219385082, 0.18818139055183436, 0.1754574469896183, 0.1784868333114169, 0.16319366683053305, 0.19321463538380257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206185514619809, 0.04870004242647319, 0.03618932539327069, 0.04131700621457057, 0.03729891412765485, 0.03770877940726347, 0.053419790331892036, 0.06704972842425927, 0.058711088734964334, 0.024134857358332762, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04934728707071412, 0.05702674525995721, 0.03696417075239278, 0.03455906459891844, 0.029898291447754133, 0.08747411549105821, 0.0741770523943478, 0.09091176111363075, 0.09240604576555544, 0.08032688292695478, 0.0863887231794428, 0.08222559889516068, 0.08611991067989877, 0.0793055210268947, 0.07973913569416458, 0.08016829119168101, 0.10171882691615464, 0.06783755759972065, 0.06013563800813648, 0.061341860097460676, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.116587308311774, 0.19302622637228872, 0.1481850439168273, 0.10103413073249579, 0.09685346092514469, 0.13123694841517808, 0.12696422100610816, 0.1368487698841222, 0.11599925472713601, 9.999999999998899e-05, 0.004560104586776803, 0.006205422871878197, 0.004399184026063763, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06535045920481664, 0.045274884319672526, 0.06302308617508767, 0.02707569422668732, 0.055770453722678415, 0.04228951996056918, 0.05008726726802559, 0.06465988891382346, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22096096404767318, 0.20388190420704688, 0.19469774154062303, 0.2055899091508676, 0.19229964061837357, 0.2075828295640918, 0.1998807079546645, 0.20132251325473294, 0.20408032060320924, 0.05073018699092757, 0.04250646008327186, 0.04483116438333268, 0.04552693583810541, 0.0384718642621501, 0.046009660620107806, 0.06205682951972846, 0.04414343006325505, 0.05229792848072812, 0.13780835926031265, 0.1270685174117181, 0.14195108667609324, 0.14106301975521696, 0.14083658473898286, 0.12607598176862156, 0.15032762326119153, 0.1486116544535615, 0.1338453581186947, 0.16936401087549036, 0.17819585184350506, 0.1760473800192245, 0.16763508923187131, 0.16165610412274833, 0.17688612166450424, 0.1660240279073223, 0.16626522548393008, 0.1537693350145226, 0.11534321591796037, 0.10540990117286764, 0.11849032669552728, 0.11183210417573375, 0.13619235978037247, 0.11676919299387534, 0.10290554825051912, 0.12374404817580031, 0.12319233549504682, 0.1412443164369701, 0.1625264787516828, 0.1583470274596206, 0.1601583581414543, 0.14745114223074618, 0.16249822465879427, 0.15533346120938785, 0.17351951805471566, 0.18277050154755747, 0.14195011305864957, 0.1480769332137959, 0.1426064404081222, 0.13910811893329356, 0.1503804106220552, 0.15283613071280122, 0.14096434603863706, 0.14114319382385088, 0.16207881422481074, 0.19499852488517755, 0.166930138172097, 0.16657154820419107, 0.15710270392164527, 0.15120783096631107, 0.14248411918415627, 0.1608468761454751, 0.16316738272191256, 0.17650083581544018, 0.15943291947876803, 0.15830641076816487, 0.16050779395916304, 0.1499213246119827, 0.18888564830057053, 0.16038414936856793, 0.16850357497242707, 0.1730403172851236, 0.2014352239702416, 0.1757516014551327, 0.19094915976158955, 0.17589919693093803, 0.1868240412425043, 0.21384664741545512, 0.18382439475410084, 0.17387743955149038, 0.18933089491159916, 0.19229599878872328, 0.058418096962727706, 0.055322684542269074, 0.06572572037600677, 0.05186305593955043, 0.059349682548912264, 0.05274057809916899, 0.07542599367342195, 0.05521001251769342, 0.06462351931368371]}, "mutation_prompt": null}
{"id": "6fd5fe91-8287-4715-b469-b9a3149774a7", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = np.random.normal(best, 1.0, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# ", "name": "HyperElitistBloom", "description": "Novel \"Hyper-Elitist Bloom\" algorithm combining Hyper-Elitism with a novel \"Bloom\" selection strategy and incorporating probabilistic mutation with a more effective mutation strategy.", "configspace": "", "generation": 11, "fitness": 0.0914719010852013, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cfef0615-9533-4b04-a267-66ccdd1b9312", "metadata": {"aucs": [0.17756239283817776, 0.17582243066164172, 0.170239231570262, 0.1754398149532468, 0.1884389411574915, 0.17626986227627728, 0.17805683460959865, 0.16300450449400417, 0.19643927297188735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04000469092483272, 0.051475126438706664, 0.03683348131663011, 0.041264746805961816, 0.03732066520661048, 0.03948978223329991, 0.055622357339326856, 0.06702432684758475, 0.058711088734964334, 0.024134857358332762, 0.032508982847686774, 0.04813999901158783, 0.027803019802558393, 0.04926774209271334, 0.027363441000796462, 0.03768548859383769, 0.03992308285267243, 0.029897663827185728, 0.08764349919155479, 0.07406651565669564, 0.09093218908394851, 0.09122741267558032, 0.08024150907148175, 0.08784529355587056, 0.08283329776836967, 0.08564975204083736, 0.07936494129829696, 0.07973913569416458, 0.07290969766472921, 0.10171882691615464, 0.06803822745495869, 0.062276416502640486, 0.059249347606868064, 0.09472457566024695, 0.06095981113288529, 0.09992729358139563, 0.12553619411724048, 0.19265088620594473, 0.1481850439168273, 0.10574668768044015, 0.09597725170615634, 0.13239164352594235, 0.12446725750713306, 0.1368487698841222, 0.10645801694739199, 9.999999999998899e-05, 0.004560104586776803, 0.006205422871878197, 0.0006796944022051665, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.01900488333945327, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05582976930745931, 0.06854306564582546, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055428706393117144, 0.050097967796839504, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.22081342984085262, 0.2021194051682741, 0.1939652317431223, 0.17769075865956363, 0.19115132575337046, 0.20724700933075846, 0.19989955529891135, 0.187405814880081, 0.20440560071940495, 0.0547625589182158, 0.04556070242352184, 0.04399309142624075, 0.04736551619245488, 0.04016307870994007, 0.046009660620107806, 0.06906133888133026, 0.04221951636403487, 0.05229792848072812, 0.1373491482346102, 0.12561706849025633, 0.1376252485841002, 0.13990371955733372, 0.14115194246620144, 0.13013755749087796, 0.1370803910895967, 0.14862071910582653, 0.13395364144918076, 0.1706965742590979, 0.17805918661417586, 0.17591230290313875, 0.16761425420377052, 0.18215356445277608, 0.1771382854807978, 0.16633392151038262, 0.17377774300845283, 0.15374183123539364, 0.11534321591796037, 0.10685068652547125, 0.11848757982194513, 0.1126453936488091, 0.1359778567869827, 0.11676792969343475, 0.10514160804565564, 0.1237427242099084, 0.12294752315011559, 0.14101365000576482, 0.16291697389958915, 0.15802737224080265, 0.1601583581414543, 0.14557525849437003, 0.16236042742370171, 0.15533346120938785, 0.17355051801211507, 0.18277174741603308, 0.13847856688657323, 0.1474911510633925, 0.1426064404081222, 0.14101597620439077, 0.14989118289132197, 0.15248125926001244, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.25289555637005046, 0.16621144349080874, 0.16189113428018953, 0.15943315666671043, 0.15121134098606348, 0.14115766410384245, 0.16103433707492498, 0.1634028490223587, 0.1734124663044646, 0.15816420995008806, 0.15833462142207844, 0.16490440506200044, 0.15027811932747248, 0.18956792193278704, 0.16008983488914275, 0.16856607547519287, 0.1734715473150954, 0.20283541640962766, 0.16828766101796666, 0.19091607213517703, 0.17410807692993746, 0.18685436935849087, 0.2138582184038279, 0.18382881213169644, 0.17625959340179853, 0.18933528979092384, 0.20568880668582523, 0.058340403287629905, 0.055317793090979506, 0.0660247527567237, 0.049681133869572514, 0.05934732155710931, 0.055938465983287444, 0.07532529613519179, 0.05644932983840267, 0.07020703316088506]}, "mutation_prompt": null}
{"id": "8362ecf9-6dfe-4988-9272-83520fe8f3a2", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = np.random.normal(best, 0.1 * np.mean(np.abs(self.population[np.argmin(func(self.population))])) + 1.0, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# \n# Refining the mutation strategy by introducing a more effective mutation strategy:\n# The mutation probability is now based on the mean absolute deviation from the best individual.", "name": "HyperElitistBloom", "description": "Novel \"Hyper-Elitist Bloom\" algorithm combining Hyper-Elitism with a novel \"Bloom\" selection strategy and incorporating probabilistic mutation with a more effective mutation strategy.", "configspace": "", "generation": 12, "fitness": 0.09126659939452217, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "6fd5fe91-8287-4715-b469-b9a3149774a7", "metadata": {"aucs": [0.17777534099088754, 0.17573741653254382, 0.170257377687277, 0.16877538808258163, 0.18797089319216587, 0.1759017678923257, 0.179249418822645, 0.16629231006097778, 0.16748759331119578, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040008165317394706, 0.047400974584196565, 0.03681264595519462, 0.03538239182902525, 0.03729891412765485, 0.03959218842782808, 0.05662175873318498, 0.0670544328366961, 0.058711088734964334, 0.020814869518133716, 0.032508982847686774, 0.04745631067285394, 0.023341777713681733, 0.027412087400748186, 0.05702674525995721, 0.03772463724745845, 0.03821147307613426, 0.029789629708442567, 0.08332696025092012, 0.0741770523943478, 0.09087431849796956, 0.09087447736280008, 0.07873343790520682, 0.08724348976157636, 0.08222559889516068, 0.08620191301472768, 0.0793806303207657, 0.07973913569416458, 0.08043953034032725, 0.10171882691615464, 0.06766063929871147, 0.062276416502640486, 0.061063504192884976, 0.09472457566024695, 0.061028138297436585, 0.09546948654744081, 0.12181748543385129, 0.19308637766117165, 0.1481748168008029, 0.1021028822797061, 0.09462690807364671, 0.12541728613361336, 0.12596956981233265, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004193773153198133, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05812916856095396, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.04799109494143394, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.2208602512447203, 0.19230823011156983, 0.1944069795717589, 0.2059442428326046, 0.1912289004242015, 0.20724700933075846, 0.1978530039868921, 0.1801602327204992, 0.20411391812328605, 0.05110566728963206, 0.04546308884246042, 0.04472984491796883, 0.044840442170263506, 0.04086834748903967, 0.0360249635600961, 0.07389998066291426, 0.04221951636403487, 0.05229792848072812, 0.13754515938028766, 0.12452687276543073, 0.13787777081672936, 0.1412797182171618, 0.14115194246620144, 0.12883119462519577, 0.15003100610148745, 0.14861619065631115, 0.1338453581186947, 0.17100728114128416, 0.16490153817306696, 0.1760473800192245, 0.1671789095393058, 0.1821496595795835, 0.17005243865893316, 0.16592281993379077, 0.17378163644888533, 0.15205277551606, 0.11534321591796037, 0.10940863896225494, 0.11849032669552728, 0.11235487752776496, 0.12152845624071651, 0.11540240688066972, 0.1047405734700314, 0.1237427242099084, 0.12291797557753326, 0.1410630187122207, 0.16233450221944246, 0.15835857972711243, 0.16024869318381263, 0.14597628961657705, 0.15992251617976672, 0.15533346120938785, 0.17379310954122107, 0.18277724523822958, 0.14195011305864957, 0.14718754211334273, 0.1426064404081222, 0.14101597620439077, 0.14872401473739683, 0.15282202985716775, 0.14096434603863706, 0.1414790833945282, 0.16207881422481074, 0.2596669965640215, 0.1666967312017107, 0.16656824490244904, 0.15958812633133224, 0.15152875983404068, 0.14148670243138295, 0.16086265105931818, 0.1633991036156751, 0.17682255172986638, 0.15687070831092875, 0.15807755044912863, 0.16435421325087007, 0.150330135465925, 0.1901210803441813, 0.16045374486843178, 0.16855947523118198, 0.17338193045093309, 0.2029370109631934, 0.17574166574649774, 0.19094915976158955, 0.1742620451796434, 0.18683568409856555, 0.21412962979865546, 0.18453816002831713, 0.17285336546090602, 0.17810817191433148, 0.20568880668582523, 0.058432380648452464, 0.05319930272931539, 0.0658538686878688, 0.05186305593955043, 0.05934830659822565, 0.0569322481859843, 0.07532283527740746, 0.05574833817305913, 0.06298515610022803]}, "mutation_prompt": null}
{"id": "c3cdbcff-b796-4a86-a053-06d67d53b75b", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# ```", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy", "configspace": "", "generation": 13, "fitness": 0.09156366102494926, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "6fd5fe91-8287-4715-b469-b9a3149774a7", "metadata": {"aucs": [0.17778967790586175, 0.16875996929289283, 0.170257377687277, 0.17232244213444736, 0.18608911085916613, 0.18053354701416413, 0.18035786597807713, 0.16033839635905356, 0.1900820210086459, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04211053629435979, 0.05414728776584177, 0.03669239780074218, 0.04096043386050385, 0.0372777717620254, 0.038297694794045656, 0.05275846700300957, 0.06703937922089132, 0.058711088734964334, 0.025934719063371303, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.049682965382933486, 0.05732064327932618, 0.03768548859383769, 0.039933102210912175, 0.029898291447754133, 0.08746748470215648, 0.07416905128142504, 0.09155163563657986, 0.0893233009119061, 0.08032688292695478, 0.08624652240632036, 0.08239413141228502, 0.08621242348894087, 0.07511132724747072, 0.07973913569416458, 0.08048541653111474, 0.10171882691615464, 0.062311795368885425, 0.06229188895485982, 0.06050624721238962, 0.09472457566024695, 0.060869907721937344, 0.09992729358139563, 0.12553619411724048, 0.19308799805690346, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13124565476960137, 0.12743758424404428, 0.1368487698841222, 0.11611035284257465, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.0042852733364235895, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.054867126371396124, 0.052197778952424057, 0.035064393738538646, 0.06726048217505798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22089670307060738, 0.19848045480547793, 0.19495588911784612, 0.2055799784281095, 0.19700000291512365, 0.20724700933075846, 0.19987913881451724, 0.18804436662224966, 0.20216722828630518, 0.05075546545385534, 0.0426619459529296, 0.04417153216081293, 0.043528823345390766, 0.04039554381801169, 0.0360249635600961, 0.07398906756258006, 0.044000318322941157, 0.05229792848072812, 0.13752783092736576, 0.12737952084898296, 0.13727500842698248, 0.14118939879717873, 0.13886130926063034, 0.1299562862355278, 0.15034374726029887, 0.14842789616917273, 0.1338453581186947, 0.17191633743955026, 0.16777052418310268, 0.17604975509854814, 0.16778657615794823, 0.18217088231713063, 0.17698237727640387, 0.1660573783624355, 0.17377774300845283, 0.15355314911668616, 0.1153464818161507, 0.10556409534603806, 0.11104202713684663, 0.11240240911093746, 0.1364050013667134, 0.11677741248843942, 0.10628656686077576, 0.12375754707201325, 0.12213384490277845, 0.14117921289980873, 0.16218030235070602, 0.1583470274596206, 0.1601355605781457, 0.1525360992807897, 0.16236042742370171, 0.1550444247638858, 0.17359825270671403, 0.15384279319850125, 0.14195011305864957, 0.14824284380751074, 0.1426064404081222, 0.14101597620439077, 0.1466982019990528, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16282897747803404, 0.2491901661485153, 0.1670870502112335, 0.16536348873817408, 0.159583407772648, 0.15120231260257588, 0.14169394252407197, 0.16139484817187333, 0.1634028490223587, 0.1763160822704487, 0.15882379265603375, 0.15833462142207844, 0.16440100017525128, 0.15035261699462044, 0.18962513020610616, 0.16008983488914275, 0.16850387486680551, 0.17318901888617255, 0.20140440006501292, 0.1758109799285097, 0.19094915976158955, 0.1758496635667527, 0.18683568409856555, 0.21393898184432325, 0.18553563255177064, 0.17657866327449667, 0.18030163292270296, 0.20568880668582523, 0.05833813816442579, 0.05531586956543155, 0.05616012955903826, 0.05186305593955043, 0.05934830659822565, 0.05591111898196055, 0.07532168913913251, 0.05511425627251809, 0.05916902980382133]}, "mutation_prompt": null}
{"id": "ca11549f-54ee-4ba4-ad2a-abd4a942076c", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# ```", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3cdbcff-b796-4a86-a053-06d67d53b75b", "metadata": {"aucs": [0.17778967790586175, 0.16875996929289283, 0.170257377687277, 0.17232244213444736, 0.18608911085916613, 0.18053354701416413, 0.18035786597807713, 0.16033839635905356, 0.1900820210086459, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04211053629435979, 0.05414728776584177, 0.03669239780074218, 0.04096043386050385, 0.0372777717620254, 0.038297694794045656, 0.05275846700300957, 0.06703937922089132, 0.058711088734964334, 0.025934719063371303, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.049682965382933486, 0.05732064327932618, 0.03768548859383769, 0.039933102210912175, 0.029898291447754133, 0.08746748470215648, 0.07416905128142504, 0.09155163563657986, 0.0893233009119061, 0.08032688292695478, 0.08624652240632036, 0.08239413141228502, 0.08621242348894087, 0.07511132724747072, 0.07973913569416458, 0.08048541653111474, 0.10171882691615464, 0.062311795368885425, 0.06229188895485982, 0.06050624721238962, 0.09472457566024695, 0.060869907721937344, 0.09992729358139563, 0.12553619411724048, 0.19308799805690346, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13124565476960137, 0.12743758424404428, 0.1368487698841222, 0.11611035284257465, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.0042852733364235895, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.054867126371396124, 0.052197778952424057, 0.035064393738538646, 0.06726048217505798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22089670307060738, 0.19848045480547793, 0.19495588911784612, 0.2055799784281095, 0.19700000291512365, 0.20724700933075846, 0.19987913881451724, 0.18804436662224966, 0.20216722828630518, 0.05075546545385534, 0.0426619459529296, 0.04417153216081293, 0.043528823345390766, 0.04039554381801169, 0.0360249635600961, 0.07398906756258006, 0.044000318322941157, 0.05229792848072812, 0.13752783092736576, 0.12737952084898296, 0.13727500842698248, 0.14118939879717873, 0.13886130926063034, 0.1299562862355278, 0.15034374726029887, 0.14842789616917273, 0.1338453581186947, 0.17191633743955026, 0.16777052418310268, 0.17604975509854814, 0.16778657615794823, 0.18217088231713063, 0.17698237727640387, 0.1660573783624355, 0.17377774300845283, 0.15355314911668616, 0.1153464818161507, 0.10556409534603806, 0.11104202713684663, 0.11240240911093746, 0.1364050013667134, 0.11677741248843942, 0.10628656686077576, 0.12375754707201325, 0.12213384490277845, 0.14117921289980873, 0.16218030235070602, 0.1583470274596206, 0.1601355605781457, 0.1525360992807897, 0.16236042742370171, 0.1550444247638858, 0.17359825270671403, 0.15384279319850125, 0.14195011305864957, 0.14824284380751074, 0.1426064404081222, 0.14101597620439077, 0.1466982019990528, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16282897747803404, 0.2491901661485153, 0.1670870502112335, 0.16536348873817408, 0.159583407772648, 0.15120231260257588, 0.14169394252407197, 0.16139484817187333, 0.1634028490223587, 0.1763160822704487, 0.15882379265603375, 0.15833462142207844, 0.16440100017525128, 0.15035261699462044, 0.18962513020610616, 0.16008983488914275, 0.16850387486680551, 0.17318901888617255, 0.20140440006501292, 0.1758109799285097, 0.19094915976158955, 0.1758496635667527, 0.18683568409856555, 0.21393898184432325, 0.18553563255177064, 0.17657866327449667, 0.18030163292270296, 0.20568880668582523, 0.05833813816442579, 0.05531586956543155, 0.05616012955903826, 0.05186305593955043, 0.05934830659822565, 0.05591111898196055, 0.07532168913913251, 0.05511425627251809, 0.05916902980382133]}, "mutation_prompt": null}
{"id": "be666059-13b2-497f-8432-e2e24d5a1a85", "solution": "import random\nimport numpy as np\n\nclass RefineHyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.05, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection with a smaller weight decay\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            weights *= 0.99\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# ```", "name": "RefineHyperElitistBloom", "description": "Refine HyperElitistBloom by introducing a new mutation strategy and improving Bloom selection strategy", "configspace": "", "generation": 15, "fitness": 0.09097849419906723, "feedback": "The algorithm RefineHyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c3cdbcff-b796-4a86-a053-06d67d53b75b", "metadata": {"aucs": [0.17610353147712687, 0.17361829591010391, 0.1706864390605599, 0.17150387971053227, 0.18818186754108324, 0.17653642249622759, 0.17856999940812623, 0.16459084534120338, 0.1905980752947295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04213119545083155, 0.05103945788217823, 0.037055679486737936, 0.04084426201690461, 0.03754655017156816, 0.03948978223329991, 0.05167375492651083, 0.06702432684758475, 0.058585977795054145, 0.025979934130904825, 0.030108846729871352, 0.0481463786277756, 0.027803019802558393, 0.027794613177657856, 0.05681987186478343, 0.03696417075239278, 0.034354091263231745, 0.029884147029098362, 0.08745456883831726, 0.07375861561539421, 0.09021265820281965, 0.08073651238079915, 0.08032688292695478, 0.08639668741161499, 0.08256456484766062, 0.08620909750186001, 0.07933598872133485, 0.07973913569416458, 0.08096423967491995, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.058408452775092545, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.14813209921127768, 0.10380296601134265, 0.09685346092514469, 0.12900059085407234, 0.12566820841738702, 0.13183421782633542, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004278966862256706, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.01900488333945327, 9.999999999998899e-05, 0.017993280776203546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059156702142937334, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03165693341080966, 0.054782067011964086, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22108540552080935, 0.2073990238995872, 0.18182563691940146, 0.20555813851730098, 0.19025082949245453, 0.19398270362012304, 0.19957432847673207, 0.1909014601091269, 0.20381763873570558, 0.05498792548732512, 0.03854948643958611, 0.04448492044716845, 0.04537991971407318, 0.040694654025901, 0.046009660620107806, 0.06245860511131085, 0.043993360971981255, 0.05229792848072812, 0.13119170458783902, 0.12482467336155056, 0.1372168098523947, 0.141198029429625, 0.14212459476294603, 0.12477425743573278, 0.15002698634522638, 0.14861619065631115, 0.12964949659588854, 0.17182146956931754, 0.17338088425806653, 0.17601511871910902, 0.16779352461211916, 0.1821496595795835, 0.17698797238682928, 0.16698529734403977, 0.17377704171265018, 0.15375156491832354, 0.11534765730084162, 0.11113730761845142, 0.11848518643378247, 0.11236834081939107, 0.13611237143406107, 0.1167705857070509, 0.10628682615994733, 0.12371617260903989, 0.12166087266022918, 0.1412084184312269, 0.16238317556880377, 0.1580073770970667, 0.1601583581414543, 0.1503235436997773, 0.15514854376218612, 0.15533346120938785, 0.17524249570871675, 0.18277724523822958, 0.14195011305864957, 0.14807134909741382, 0.14172560018676317, 0.14101597620439077, 0.14871471806614167, 0.15278421981377122, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.19262051141320735, 0.16675353184104336, 0.16537286801250317, 0.15969718924132226, 0.15184828240787707, 0.14144600484995662, 0.1613804808864283, 0.16417786114775823, 0.176516151098965, 0.15901501338619928, 0.15807755044912863, 0.16490498282695387, 0.15033086157637665, 0.1885953771479406, 0.1583592766352474, 0.16855993993253082, 0.1733775335791985, 0.20243156038900878, 0.1756547146747769, 0.18513800247170042, 0.17531267920325333, 0.18686253259253804, 0.19303515553569317, 0.18382439475410084, 0.17593538942186338, 0.1894145555945117, 0.19229320226649282, 0.05842514884601402, 0.055267328749041944, 0.06585155299632517, 0.048359686146736025, 0.05933018473293139, 0.05546710601447735, 0.0753963111589192, 0.055916437376089756, 0.06839421174179405]}, "mutation_prompt": null}
{"id": "165c7e51-9518-4baa-a4d7-1847d00e39d4", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                if random.random() < 0.1:\n                    # Use a more effective Gaussian mutation with a larger standard deviation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.2, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# ```", "name": "HyperElitistBloom", "description": "Refine HyperElitistBloom by introducing a new mutation strategy and improving Bloom selection.", "configspace": "", "generation": 16, "fitness": 0.09064167558250515, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c3cdbcff-b796-4a86-a053-06d67d53b75b", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.1567209656188332, 0.17891918697040343, 0.18818139055183436, 0.1747221287070515, 0.1799912668106366, 0.1632081836334771, 0.1888274419471856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.05049223486910481, 0.036825551487969066, 0.040209388344827346, 0.03732066520661048, 0.03948978223329991, 0.05613070337703285, 0.06715504333739175, 0.058156178969007266, 0.025979934130904825, 0.028234179171121476, 0.03784318004313414, 0.027803019802558393, 0.04926774209271334, 0.0296377297643432, 0.03768548859383769, 0.03994866211242476, 0.029898291447754133, 0.08753192451468728, 0.07215059817789427, 0.09107382245719542, 0.08350326033402466, 0.08032688292695478, 0.08640630589093312, 0.08210127177453264, 0.08620909750186001, 0.07936666815944593, 0.06318309035269154, 0.08043703106553202, 0.10171882691615464, 0.06789067609081323, 0.06212833035468435, 0.062786738108918, 0.09472457566024695, 0.06096998643173557, 0.09992729358139563, 0.1246737771694556, 0.19308637766117165, 0.1481850439168273, 0.10477383385316297, 0.0930486437868907, 0.13123694841517808, 0.12579589427165594, 0.13160011939730265, 0.1160561168937948, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004232090614542772, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.025157232330730417, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03165693341080966, 0.055770453722678415, 0.054349126717447516, 0.05008726726802559, 0.06737774845561306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1735344574510327, 0.2025293514821419, 0.19495588911784612, 0.2055799784281095, 0.1975699270026796, 0.20724700933075846, 0.19992303891257712, 0.18748543510272442, 0.20441954182253208, 0.05080073067061652, 0.04357152139321874, 0.04489907204706067, 0.04235677125764592, 0.04068219302065934, 0.045866591659866396, 0.07349742784769964, 0.044690822779932415, 0.04555179045768332, 0.13715718318942494, 0.12719164711221342, 0.13267395662887516, 0.1411947125499683, 0.14115194246620144, 0.1295721813928734, 0.15034394248194471, 0.14862067884821373, 0.133758718615121, 0.1716108492070969, 0.16791986961722227, 0.1760473800192245, 0.1677794292953666, 0.1816550951847914, 0.1769644640004372, 0.1636251448945899, 0.1737770916224356, 0.15361335087741368, 0.11534321591796037, 0.10519771511848408, 0.11843744095368924, 0.11209313277959321, 0.13610603218022022, 0.11671785869365014, 0.10359535535574216, 0.1237427242099084, 0.12291797557753326, 0.1410630187122207, 0.1623386623863129, 0.1583470274596206, 0.16018309603656256, 0.14766181081505658, 0.16234509906098316, 0.15533346120938785, 0.17355151355563359, 0.18205849859032597, 0.14195011305864957, 0.15278880575113962, 0.14228311253266146, 0.14101597620439077, 0.15264044226001405, 0.1442432209549097, 0.1394025181707912, 0.14114319382385088, 0.16207881422481074, 0.19342641272736572, 0.16712552776922507, 0.16657141521439822, 0.1596427042756502, 0.13247123229053936, 0.1404966926596748, 0.16806208983964466, 0.1634134443563685, 0.17676091107270164, 0.16116953397097566, 0.15833462142207844, 0.16050587077015877, 0.14915726105129756, 0.18883691614434206, 0.16045374486843178, 0.16855947523118198, 0.1739178195902965, 0.1948954817460834, 0.1757397014909311, 0.19094915976158955, 0.1758236282141894, 0.18729452828651072, 0.19317613983539006, 0.17846856684081502, 0.1759438562993224, 0.18933339961373108, 0.20569158045071378, 0.058422894899010536, 0.05529619933896268, 0.06584714954231208, 0.05186305593955043, 0.05934463161685022, 0.05548497980486444, 0.0753193946691868, 0.05510183023006665, 0.06588520687036359]}, "mutation_prompt": null}
{"id": "fcbadf18-4c1d-41b9-9db3-61670bc4ecc6", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1, self.dim)\n                    # Introduce a new mutation strategy: use a uniform mutation\n                    if random.random() < 0.1:\n                        mutation = np.random.uniform(-0.1, 0.1, self.dim)\n                        self.population[np.argmin(func(self.population))] += mutation\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# ```", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy", "configspace": "", "generation": 17, "fitness": 0.09122632390136255, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c3cdbcff-b796-4a86-a053-06d67d53b75b", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17414960547000735, 0.18819095883761838, 0.1771053416381756, 0.1746125706299705, 0.1624188880569183, 0.19151988752959292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04207556726031636, 0.05318666210110501, 0.03606279367859078, 0.04143630865260639, 0.03732066520661048, 0.03948978223329991, 0.05275846700300957, 0.06697666419183423, 0.05876935167891495, 0.024004030889553496, 0.032508982847686774, 0.04757858297972961, 0.027598886402573797, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.03013752112304935, 0.08615688419950074, 0.07415994758806954, 0.08071691201900522, 0.08843351731898641, 0.08032688292695478, 0.08639039709690677, 0.08222750035262072, 0.08620909750186001, 0.0793585039285768, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06456018942886899, 0.062276416502640486, 0.06032814546141274, 0.09472457566024695, 0.060851351547256516, 0.08543464779147658, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10475332951955918, 0.09685346092514469, 0.13023459194771803, 0.1261954341033128, 0.13163564137531214, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004208694721539508, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06854306564582546, 0.045782573879524335, 0.06941906045599022, 0.03258759184138249, 0.05451156022792836, 0.05533077434152034, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22088972108395122, 0.2130353478848469, 0.18344693861085826, 0.20556255534823809, 0.19225011032098616, 0.20724700933075846, 0.1998807079546645, 0.2022534680839051, 0.20435026807248546, 0.051002438949682594, 0.038421011099631475, 0.03454513023236905, 0.045049944844261725, 0.04044888585747053, 0.046009660620107806, 0.0733623902301781, 0.044010163496607135, 0.0470398816854779, 0.1370941010055503, 0.12577723878026115, 0.13720611960124973, 0.13962525965726635, 0.14115194246620144, 0.12872131730494407, 0.1503422343098002, 0.1486068991584205, 0.1338453581186947, 0.17182146956931754, 0.16129663597638932, 0.1760473800192245, 0.16763508923187131, 0.18212634697274677, 0.17615334902593294, 0.16641728329378092, 0.17377774300845283, 0.1537466021850563, 0.11534321591796037, 0.10322549675400838, 0.11843220831085366, 0.11161191397385539, 0.12147375285211437, 0.11676919299387534, 0.10628682615994733, 0.12375854901359584, 0.122928516543654, 0.1410630187122207, 0.16268203905904355, 0.1583470274596206, 0.1573982958225788, 0.14787652340292967, 0.16000597574200637, 0.15430793788199848, 0.17153600763324417, 0.14951514543380018, 0.14195011305864957, 0.14695998881688754, 0.14228311253266146, 0.14101597620439077, 0.14784826230610837, 0.15248125926001244, 0.13961679524412707, 0.14175390856222403, 0.16207881422481074, 0.22285468415358134, 0.16679477618376493, 0.166497867164058, 0.15970873369144556, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17335236912632868, 0.15773866457363095, 0.15830641076816487, 0.16253949945431923, 0.15031521216159327, 0.18892567392674375, 0.16045374486843178, 0.16850212817188426, 0.17355673252995452, 0.2028812417861957, 0.1757397014909311, 0.17924195312743418, 0.17578631238353448, 0.18683568409856555, 0.21354870373674883, 0.17784989270896256, 0.1759500192021265, 0.18933528979092384, 0.20589767954405647, 0.05804525397090021, 0.055425401141649844, 0.06585155299632517, 0.05186305593955043, 0.05885492277899451, 0.05508039222413541, 0.0753336109072148, 0.056541731148011753, 0.061941709873250095]}, "mutation_prompt": null}
{"id": "3162825c-e945-43a8-8e67-007c492da3f2", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    if random.random() < 0.5:  # 50% chance of Gaussian mutation\n                        self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1, self.dim)\n                    else:\n                        self.population[np.argmin(func(self.population))] = best + np.random.uniform(-0.1, 0.1, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# ```", "name": "HyperElitistBloom", "description": "Refine HyperElitistBloom by introducing a new mutation strategy and improving Bloom selection.", "configspace": "", "generation": 18, "fitness": 0.09126532082118212, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c3cdbcff-b796-4a86-a053-06d67d53b75b", "metadata": {"aucs": [0.17619375684806693, 0.17578811482102485, 0.17090826400772896, 0.16836959161912224, 0.18771343322671707, 0.17679045495509238, 0.17856730983779512, 0.16237784143141376, 0.19112683151618026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.049026300049459515, 0.03695517390356873, 0.04080333613499387, 0.03687871844794244, 0.03674548935522526, 0.05194018259992772, 0.06702152036686271, 0.058711088734964334, 0.022695311625382075, 0.03246112400006618, 0.03471540214593516, 0.02712960174753476, 0.02781304585364519, 0.05709618698521968, 0.036554750498998145, 0.03992308285267243, 0.02322759617092962, 0.08746944629118047, 0.07440153033294605, 0.09199096957442121, 0.08854632732683387, 0.08032688292695478, 0.08639412375773481, 0.08261131670306165, 0.08573452653644165, 0.07936965632091308, 0.07973913569416458, 0.07582373564381073, 0.10171882691615464, 0.06283713081667297, 0.06207922502713714, 0.0615850112308004, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12075939604628749, 0.19304256705683642, 0.10644025923635214, 0.1021028822797061, 0.09677325632965317, 0.13123694841517808, 0.12675012842970812, 0.13570633828321066, 0.11599879438801142, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004280093018357967, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05666755805271673, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.032530568194916176, 0.055770453722678415, 0.04228951996056918, 0.05008726726802559, 0.06038333880829083, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.1983227860205694, 0.19400426024787676, 0.20590166860647263, 0.1885840688456788, 0.2072532995256703, 0.1998807079546645, 0.18560911293740656, 0.20408032060320924, 0.05145460637420185, 0.04722152764224452, 0.04516425320205941, 0.040677441059823294, 0.0410309538992959, 0.046009660620107806, 0.07346184089676133, 0.04492414294873015, 0.05229792848072812, 0.13752783092736576, 0.12741439134038735, 0.14035315137681847, 0.1412797182171618, 0.1419791763198971, 0.13013755749087796, 0.15034268976310372, 0.1484302617130384, 0.13344285737153627, 0.169352375467558, 0.16670845894867747, 0.1728267584393507, 0.16940791741638517, 0.1821689759740509, 0.1699737618562831, 0.164141584424641, 0.17376475848957618, 0.15498393139157252, 0.11447041863705709, 0.10414211000705054, 0.11849032669552728, 0.11235567532727342, 0.13660668787405061, 0.11524262520465489, 0.10495221015335843, 0.12376544479661111, 0.12292943019789615, 0.138858158041255, 0.16348100856009096, 0.1583470274596206, 0.16350322502541403, 0.14810364736051596, 0.1623869430611823, 0.15533346120938785, 0.1751000831506101, 0.18277724523822958, 0.14195011305864957, 0.14632638914639517, 0.1426064404081222, 0.13724058100429903, 0.15205755839272772, 0.14568785143978458, 0.1394025181707912, 0.14175390856222403, 0.16207881422481074, 0.2668340101042922, 0.1663697383910494, 0.1665105251389628, 0.15528959573954493, 0.15120231260257588, 0.13985720226134213, 0.16185187090635267, 0.1633030487223308, 0.17647642716186507, 0.16067503883361256, 0.15833462142207844, 0.1652072450505404, 0.15008478619550858, 0.1900697842887621, 0.14755148998027634, 0.16855947523118198, 0.17364002148610613, 0.202881575373563, 0.17565703464321736, 0.19095012531662614, 0.1753553616053365, 0.18662144285806959, 0.2135764439936576, 0.1840985784108633, 0.17594512205278, 0.18935019836373967, 0.20569107783505458, 0.058694610107166034, 0.04938481984138565, 0.06596209651265184, 0.05186305593955043, 0.05933018473293139, 0.05546734317063351, 0.0758309769740455, 0.054941742128369886, 0.06131368878902799]}, "mutation_prompt": null}
{"id": "6485eff5-f4bc-4c9b-abd4-6277664ff53d", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1  # initial learning rate\n        self.adaptation_rate = 0.05  # adaptation rate for learning rate\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            # Update learning rate based on adaptation rate\n            if _ % int(self.budget * self.adaptation_rate) == 0:\n                self.learning_rate *= 0.9\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# ```", "name": "HyperElitistBloom", "description": "Refine Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving Bloom selection strategy with adaptive learning rate.", "configspace": "", "generation": 19, "fitness": 0.09111152650919564, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c3cdbcff-b796-4a86-a053-06d67d53b75b", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.16946711310272478, 0.17232693717763015, 0.18818139055183436, 0.17489733308822575, 0.17892608174056657, 0.16326046976410202, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04217924226134806, 0.05480777712439777, 0.036843840851905174, 0.04104876480978692, 0.0372777717620254, 0.03829133748844615, 0.05269333712159585, 0.06755209052911537, 0.058711088734964334, 0.02086931947077242, 0.032508982847686774, 0.0481463786277756, 0.027598886402573797, 0.04917682032637838, 0.02757892527640471, 0.03696417075239278, 0.03821147307613426, 0.030468314421464693, 0.08746944629118047, 0.07363920417484937, 0.09048196373930095, 0.08904420432341653, 0.08032688292695478, 0.08637962242314956, 0.08220638379288958, 0.08620909750186001, 0.07953848147052467, 0.07973913569416458, 0.08011502657840597, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06058515477361848, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09677325632965317, 0.12850882769884298, 0.12578954267465725, 0.1368487698841222, 0.1135869029704345, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.0043877253877335765, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.010809369510698108, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06854306564582546, 0.045274884319672526, 0.06941906045599022, 0.032530568194916176, 0.055118856097282176, 0.04805067501373761, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22083144650028042, 0.21518393675949987, 0.19527875595042388, 0.20571168757361624, 0.19111683337031404, 0.2044708444222323, 0.1998807079546645, 0.1789588935782609, 0.19795924340342153, 0.05052687883975682, 0.045882201617244545, 0.04427266086359938, 0.04731395836271024, 0.039897042138782535, 0.046009660620107806, 0.07350071466394914, 0.04410513300854113, 0.05229792848072812, 0.13752907348282495, 0.1273778297486502, 0.1372168098523947, 0.1412797182171618, 0.1354971174398204, 0.1299562862355278, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956931754, 0.18372559650788267, 0.1760491922971883, 0.16777687374261985, 0.18215011067313702, 0.17695458899821026, 0.1643769417018076, 0.17377774300845283, 0.15374518366615864, 0.11035707597601885, 0.10711851253428051, 0.11848942889509084, 0.10648324101089146, 0.13605996642622575, 0.11971803551238192, 0.10593163421079155, 0.12371831849114934, 0.12368281230047573, 0.14035052248229418, 0.16326758897647575, 0.15722621474089338, 0.16333411314036517, 0.14686699723624608, 0.16237689162888613, 0.15533346120938785, 0.1737379769705547, 0.1827745918279976, 0.14195011305864957, 0.14698036692032945, 0.1426064404081222, 0.14101597620439077, 0.152990238754659, 0.14472837911690384, 0.1402623479731876, 0.14143266963436674, 0.16207881422481074, 0.1872334247194869, 0.16679338921467002, 0.16657141521439822, 0.1596427042756502, 0.15163999584756038, 0.1376285304792334, 0.16067124853769232, 0.16333831618623573, 0.17650083581544018, 0.16009140067685856, 0.15833462142207844, 0.1649326365577315, 0.150330135465925, 0.146077202264574, 0.16035429433314508, 0.16095426219506304, 0.17475422564318266, 0.2030109032225128, 0.17428430283350227, 0.18605873297537667, 0.17543880015481206, 0.18842436795144124, 0.21344850450761854, 0.18396345449245532, 0.17572543766269189, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055316900087574505, 0.06584714954231208, 0.05211515913497389, 0.05934830659822565, 0.0565576580391175, 0.07532529613519179, 0.05524400131191942, 0.0660033789913308]}, "mutation_prompt": null}
{"id": "0c8299c4-26c0-477d-be5d-2da798c594dd", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.elitist_replacement_threshold = 0.1\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            # Adaptive elitist replacement\n            if len(self.population) < self.budget * (1 - self.elitist_replacement_threshold):\n                self.elitist = self.population[np.argmin(func(self.population))]\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# ```", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive elitist replacement.", "configspace": "", "generation": 20, "fitness": 0.09135209235650743, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c3cdbcff-b796-4a86-a053-06d67d53b75b", "metadata": {"aucs": [0.17771015113270838, 0.17579672928350376, 0.16998598431962764, 0.17156522030144972, 0.1675728057905571, 0.17620862934860893, 0.17856999940812623, 0.16159186569292683, 0.1887222278127032, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04209081096121248, 0.05109062100941608, 0.036610440413893275, 0.03553940462633487, 0.03773034621217175, 0.03957139334143689, 0.0528437448134802, 0.0673296044044791, 0.05871825963071098, 0.02596330142534442, 0.03234623503892686, 0.0481463786277756, 0.02365729949130624, 0.04926774209271334, 0.05844591306044422, 0.03696417075239278, 0.03821147307613426, 0.029953029639587347, 0.08759259643795636, 0.07416050128751817, 0.09145991022930244, 0.08828457887899877, 0.08032688292695478, 0.08639406582822062, 0.08205411175707156, 0.08620909750186001, 0.07952633004809306, 0.07964440716651155, 0.08016468442475522, 0.10169521645329083, 0.06743127653367942, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.060869907721937344, 0.09992729358139563, 0.12469244527985024, 0.19308637766117165, 0.14820538969717323, 0.10471519865355927, 0.096781698879563, 0.13123694841517808, 0.11565162030723619, 0.1368487698841222, 0.10634691883195335, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.00436407610960754, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.002367286420350001, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05408471693152228, 0.05013935060814767, 0.06512782668167805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.2207836288174465, 0.212082243685762, 0.1944069795717589, 0.2055799784281095, 0.18985309343297097, 0.20472841989728285, 0.1998807079546645, 0.18841191779392508, 0.20408032060320924, 0.050603926758043816, 0.04250646008327186, 0.04483560556758237, 0.047228489352149294, 0.03847244148095974, 0.046009660620107806, 0.06903606852502542, 0.044293356411921225, 0.05229792848072812, 0.1374403859463842, 0.1273795545501043, 0.13987562748349447, 0.1412797182171618, 0.13940732063216787, 0.13013755749087796, 0.15036912005463177, 0.1485929717967247, 0.13325415927603712, 0.17183290189671807, 0.17198727030934935, 0.1760473800192245, 0.16779352461211916, 0.16063976610688824, 0.17699292957240975, 0.16674700511183105, 0.17377774300845283, 0.15390971328594205, 0.11540774704225665, 0.10885616448343827, 0.11766915487058227, 0.11420386920138703, 0.13623200272404679, 0.11676184640145215, 0.10628682615994733, 0.12369087320480354, 0.12292146708335516, 0.1410630187122207, 0.16347059106184803, 0.15833436404674617, 0.16320786067012016, 0.14681215745468856, 0.16228423476457976, 0.15533346120938785, 0.17355151355563359, 0.18259904381713143, 0.14195011305864957, 0.1471286214934031, 0.1426064404081222, 0.14101597620439077, 0.14478761762711279, 0.15278421981377122, 0.14096434603863706, 0.13710947906731363, 0.16207881422481074, 0.21023741282903918, 0.16679477618376493, 0.16649087670775353, 0.15853072474349916, 0.15120231260257588, 0.14119738465072407, 0.15804364036171537, 0.1630468621622858, 0.17650083581544018, 0.15850496997333718, 0.15833462142207844, 0.16490498282695387, 0.15037052539928897, 0.19156866989399324, 0.16045374486843178, 0.1685072723658868, 0.17340768932189077, 0.20243156038900878, 0.16832974630987196, 0.1910772881524656, 0.17724455429708919, 0.18683931318988378, 0.21328908155133697, 0.18332866235086798, 0.17594973280694326, 0.18931345092958796, 0.20568351444019095, 0.05096092140456532, 0.05532964700504639, 0.06576506873368015, 0.05000699505472128, 0.05881508563347981, 0.055933964908894684, 0.07533256944541245, 0.05517334902972526, 0.06395342068381193]}, "mutation_prompt": null}
{"id": "fd0ac4fe-38d1-4758-acf5-0a48a05b9e47", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# ```", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3cdbcff-b796-4a86-a053-06d67d53b75b", "metadata": {"aucs": [0.17778967790586175, 0.16875996929289283, 0.170257377687277, 0.17232244213444736, 0.18608911085916613, 0.18053354701416413, 0.18035786597807713, 0.16033839635905356, 0.1900820210086459, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04211053629435979, 0.05414728776584177, 0.03669239780074218, 0.04096043386050385, 0.0372777717620254, 0.038297694794045656, 0.05275846700300957, 0.06703937922089132, 0.058711088734964334, 0.025934719063371303, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.049682965382933486, 0.05732064327932618, 0.03768548859383769, 0.039933102210912175, 0.029898291447754133, 0.08746748470215648, 0.07416905128142504, 0.09155163563657986, 0.0893233009119061, 0.08032688292695478, 0.08624652240632036, 0.08239413141228502, 0.08621242348894087, 0.07511132724747072, 0.07973913569416458, 0.08048541653111474, 0.10171882691615464, 0.062311795368885425, 0.06229188895485982, 0.06050624721238962, 0.09472457566024695, 0.060869907721937344, 0.09992729358139563, 0.12553619411724048, 0.19308799805690346, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13124565476960137, 0.12743758424404428, 0.1368487698841222, 0.11611035284257465, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.0042852733364235895, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.054867126371396124, 0.052197778952424057, 0.035064393738538646, 0.06726048217505798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22089670307060738, 0.19848045480547793, 0.19495588911784612, 0.2055799784281095, 0.19700000291512365, 0.20724700933075846, 0.19987913881451724, 0.18804436662224966, 0.20216722828630518, 0.05075546545385534, 0.0426619459529296, 0.04417153216081293, 0.043528823345390766, 0.04039554381801169, 0.0360249635600961, 0.07398906756258006, 0.044000318322941157, 0.05229792848072812, 0.13752783092736576, 0.12737952084898296, 0.13727500842698248, 0.14118939879717873, 0.13886130926063034, 0.1299562862355278, 0.15034374726029887, 0.14842789616917273, 0.1338453581186947, 0.17191633743955026, 0.16777052418310268, 0.17604975509854814, 0.16778657615794823, 0.18217088231713063, 0.17698237727640387, 0.1660573783624355, 0.17377774300845283, 0.15355314911668616, 0.1153464818161507, 0.10556409534603806, 0.11104202713684663, 0.11240240911093746, 0.1364050013667134, 0.11677741248843942, 0.10628656686077576, 0.12375754707201325, 0.12213384490277845, 0.14117921289980873, 0.16218030235070602, 0.1583470274596206, 0.1601355605781457, 0.1525360992807897, 0.16236042742370171, 0.1550444247638858, 0.17359825270671403, 0.15384279319850125, 0.14195011305864957, 0.14824284380751074, 0.1426064404081222, 0.14101597620439077, 0.1466982019990528, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16282897747803404, 0.2491901661485153, 0.1670870502112335, 0.16536348873817408, 0.159583407772648, 0.15120231260257588, 0.14169394252407197, 0.16139484817187333, 0.1634028490223587, 0.1763160822704487, 0.15882379265603375, 0.15833462142207844, 0.16440100017525128, 0.15035261699462044, 0.18962513020610616, 0.16008983488914275, 0.16850387486680551, 0.17318901888617255, 0.20140440006501292, 0.1758109799285097, 0.19094915976158955, 0.1758496635667527, 0.18683568409856555, 0.21393898184432325, 0.18553563255177064, 0.17657866327449667, 0.18030163292270296, 0.20568880668582523, 0.05833813816442579, 0.05531586956543155, 0.05616012955903826, 0.05186305593955043, 0.05934830659822565, 0.05591111898196055, 0.07532168913913251, 0.05511425627251809, 0.05916902980382133]}, "mutation_prompt": null}
{"id": "2131c69d-7061-4165-b911-d16c5c58cdbf", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# ```", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy using a more efficient ranking-based selection.", "configspace": "", "generation": 22, "fitness": 0.09092608943149914, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c3cdbcff-b796-4a86-a053-06d67d53b75b", "metadata": {"aucs": [0.17752140094306668, 0.17577065834117767, 0.15699276926546935, 0.17151642694239178, 0.18632782706777584, 0.1755550892618185, 0.17942801375116246, 0.16413078317865892, 0.18926884770443952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04207802218690815, 0.05305198026528324, 0.03374573797386804, 0.04197139532054994, 0.03743951906559728, 0.03948978223329991, 0.05285126042322297, 0.06728902585107133, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.03715311208821226, 0.027803019802558393, 0.04935033303726055, 0.05702674525995721, 0.03768548859383769, 0.03995737513350994, 0.029898291447754133, 0.0874862442750306, 0.07187210317291626, 0.08071691201900522, 0.08822863271431869, 0.08032957891704229, 0.08642326091760932, 0.07987841865381629, 0.08620909750186001, 0.07945577523221492, 0.0630842602991536, 0.08044589932274737, 0.10171882691615464, 0.06431725022910595, 0.06207922502713714, 0.05992350960857562, 0.09333637870097666, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.10670755181890124, 0.1047921015756701, 0.09685346092514469, 0.128508377281369, 0.11658630330194886, 0.1368487698841222, 0.11641157721700313, 0.0043507767599104685, 9.999999999998899e-05, 0.006205422871878197, 0.00421666227595574, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.025157232330730417, 9.999999999998899e-05, 0.010809369510698108, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05484574691950439, 0.06858859508378334, 0.045274884319672526, 0.044669195072529644, 0.03258759184138249, 0.055770453722678415, 0.05518776317722929, 0.05008726726802559, 0.06206724671489283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22072203456984696, 0.2146996103717187, 0.19361399343647168, 0.2066556108637838, 0.19215239666674966, 0.20735989085610462, 0.1998807079546645, 0.17996166748765896, 0.2040956909712318, 0.049119883923525065, 0.044494879267080845, 0.04431243406298069, 0.04450550038524492, 0.029788251777305375, 0.0360249635600961, 0.07358856777850054, 0.04399778186850001, 0.05229792848072812, 0.13752457453596112, 0.12734599444112804, 0.1372168098523947, 0.13962079349062684, 0.14115161234639295, 0.12869515672531107, 0.15045020623171823, 0.14694196957441963, 0.13382381883464733, 0.17207433517642512, 0.17252693282867837, 0.17608109669569438, 0.16778648112937478, 0.18215126752142485, 0.17715814749894776, 0.16505376797053362, 0.17377774300845283, 0.15399723809464483, 0.1103637892540219, 0.10523981968146368, 0.11261857964891131, 0.11237543922567561, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.12375401447961176, 0.1229185550255375, 0.1410630187122207, 0.1631871677973109, 0.1583318164826284, 0.1601583581414543, 0.14949803830165243, 0.16231500827407253, 0.15533346120938785, 0.17614613479550711, 0.18277724523822958, 0.14195011305864957, 0.14735837580152966, 0.1426064404081222, 0.14101597620439077, 0.14677103680013948, 0.15278421981377122, 0.13961679524412707, 0.14175390856222403, 0.16207881422481074, 0.27151342541037027, 0.15923591802125503, 0.16657141521439822, 0.15964817786909336, 0.15160800387030882, 0.14127956033772027, 0.1595853448279031, 0.163275219786864, 0.17700370239795538, 0.15183898938571094, 0.15830641076816487, 0.16490434712751834, 0.15040391901530015, 0.1955188884034983, 0.14746087949465148, 0.16875835382190385, 0.1733789992683964, 0.2028812417861957, 0.17428430283350227, 0.19091607213517703, 0.17597009886904458, 0.17582748449034258, 0.21340563501268606, 0.18382439475410084, 0.1752268843304743, 0.18954950340130894, 0.20568818275497436, 0.060052860987171885, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05898281771587788, 0.05601670581384477, 0.07474350802742269, 0.05355550514178664, 0.06075169744668252]}, "mutation_prompt": null}
{"id": "a505cb66-e035-411d-826f-e26e79246b9c", "solution": "import random\nimport numpy as np\n\nclass RefineHyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection with a decay factor\n            weights = np.array([func(individual) / np.sum(func(self.population)) for individual in selected])\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# ```", "name": "RefineHyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy using a weighted selection with a decay factor.", "configspace": "", "generation": 23, "fitness": 0.09085155690290575, "feedback": "The algorithm RefineHyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c3cdbcff-b796-4a86-a053-06d67d53b75b", "metadata": {"aucs": [0.17893434232019423, 0.17574644202879663, 0.17031875689598253, 0.17178081117287292, 0.18818139055183436, 0.17740848143035237, 0.1785953009557898, 0.16318776367919763, 0.19135404113841692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04000469092483272, 0.05062644539128691, 0.036843840851905174, 0.04129258371868871, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06727859136590919, 0.05771138949210941, 0.023023309783779533, 0.032508982847686774, 0.04801647149274302, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03718017946013663, 0.04053163281143912, 0.030106456673096527, 0.08360896803865436, 0.0721509228868803, 0.09088594517109871, 0.08460476591980381, 0.08032688292695478, 0.08643141944271282, 0.08222478068514616, 0.08546971995079689, 0.07934795163002795, 0.07750585945050281, 0.08153207985971689, 0.09136464603211936, 0.06783755759972065, 0.062276416502640486, 0.06232927820481837, 0.056507410890133, 0.060869907721937344, 0.09992729358139563, 0.12551356758130827, 0.19310320018256555, 0.14722159839578275, 0.10189830804532807, 0.09685346092514469, 0.12929930727602024, 0.12595553978877339, 0.13688845642410574, 0.1159805481505014, 0.0043507767599104685, 9.999999999998899e-05, 0.006205422871878197, 0.0043553202459204465, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.017162093656277078, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04917272913118942, 0.06858859508378334, 0.029624612367701086, 0.044669195072529644, 0.03258759184138249, 0.055428706393117144, 0.05295698494644707, 0.05008726726802559, 0.06667461684213816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19192668618530062, 0.1982631331750574, 0.19495588911784612, 0.20547022936627868, 0.19036376443048264, 0.20729890806735796, 0.19949604691278533, 0.18005463988864978, 0.20386123930322253, 0.05362756094401444, 0.04681393980187365, 0.034835868954785854, 0.04053148881988522, 0.03847244148095974, 0.046009660620107806, 0.0732085319600374, 0.04222133553373009, 0.05229792848072812, 0.13752783092736576, 0.12819374613632684, 0.13716626135499355, 0.14128027034040624, 0.14115194246620144, 0.13013755749087796, 0.1503129712287975, 0.14859724413278275, 0.13363579024712158, 0.16809170822033104, 0.16914907803759704, 0.1760473800192245, 0.16779352461211916, 0.18226345092084806, 0.17696175525490054, 0.16591313548350284, 0.17377782057697388, 0.15374840640183263, 0.11534321591796037, 0.10417699165533434, 0.11843401202500714, 0.1123738480417984, 0.13610704409503183, 0.116985234291197, 0.10350583453654438, 0.1237462985885941, 0.1229263833073968, 0.1410630187122207, 0.1635469519888405, 0.1583470274596206, 0.1601172048227525, 0.15011486214023628, 0.15992308683477863, 0.1531225328815632, 0.17369522383074132, 0.18277724523822958, 0.14195011305864957, 0.14968587444366, 0.1426064404081222, 0.1410472561025936, 0.15029046311368588, 0.14472837911690384, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18952859526882826, 0.16668914199777796, 0.16656824490244904, 0.15950918041173134, 0.15138948903853255, 0.14120731713055812, 0.16139484817187333, 0.16295510580304218, 0.17654910703347249, 0.16503992187085803, 0.1574246768738392, 0.16467373099233917, 0.1503298689446121, 0.19601550050665795, 0.16045374486843178, 0.16856010438270863, 0.17476274082686816, 0.20287814605139265, 0.1757397014909311, 0.1851393409035893, 0.1758255198196319, 0.18690013675189854, 0.21352976210052343, 0.18386461158447986, 0.175923143886752, 0.18933671919052963, 0.20568880668582523, 0.058056647048274734, 0.055342399771299844, 0.06585155299632517, 0.05186305593955043, 0.059355323452197295, 0.05550152868071223, 0.07532283527740746, 0.05577581566295853, 0.06229618405991255]}, "mutation_prompt": null}
{"id": "8cfdc26b-ecb2-4051-bb6d-ebece20b4670", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# ```", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3cdbcff-b796-4a86-a053-06d67d53b75b", "metadata": {"aucs": [0.17778967790586175, 0.16875996929289283, 0.170257377687277, 0.17232244213444736, 0.18608911085916613, 0.18053354701416413, 0.18035786597807713, 0.16033839635905356, 0.1900820210086459, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04211053629435979, 0.05414728776584177, 0.03669239780074218, 0.04096043386050385, 0.0372777717620254, 0.038297694794045656, 0.05275846700300957, 0.06703937922089132, 0.058711088734964334, 0.025934719063371303, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.049682965382933486, 0.05732064327932618, 0.03768548859383769, 0.039933102210912175, 0.029898291447754133, 0.08746748470215648, 0.07416905128142504, 0.09155163563657986, 0.0893233009119061, 0.08032688292695478, 0.08624652240632036, 0.08239413141228502, 0.08621242348894087, 0.07511132724747072, 0.07973913569416458, 0.08048541653111474, 0.10171882691615464, 0.062311795368885425, 0.06229188895485982, 0.06050624721238962, 0.09472457566024695, 0.060869907721937344, 0.09992729358139563, 0.12553619411724048, 0.19308799805690346, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13124565476960137, 0.12743758424404428, 0.1368487698841222, 0.11611035284257465, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.0042852733364235895, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.054867126371396124, 0.052197778952424057, 0.035064393738538646, 0.06726048217505798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22089670307060738, 0.19848045480547793, 0.19495588911784612, 0.2055799784281095, 0.19700000291512365, 0.20724700933075846, 0.19987913881451724, 0.18804436662224966, 0.20216722828630518, 0.05075546545385534, 0.0426619459529296, 0.04417153216081293, 0.043528823345390766, 0.04039554381801169, 0.0360249635600961, 0.07398906756258006, 0.044000318322941157, 0.05229792848072812, 0.13752783092736576, 0.12737952084898296, 0.13727500842698248, 0.14118939879717873, 0.13886130926063034, 0.1299562862355278, 0.15034374726029887, 0.14842789616917273, 0.1338453581186947, 0.17191633743955026, 0.16777052418310268, 0.17604975509854814, 0.16778657615794823, 0.18217088231713063, 0.17698237727640387, 0.1660573783624355, 0.17377774300845283, 0.15355314911668616, 0.1153464818161507, 0.10556409534603806, 0.11104202713684663, 0.11240240911093746, 0.1364050013667134, 0.11677741248843942, 0.10628656686077576, 0.12375754707201325, 0.12213384490277845, 0.14117921289980873, 0.16218030235070602, 0.1583470274596206, 0.1601355605781457, 0.1525360992807897, 0.16236042742370171, 0.1550444247638858, 0.17359825270671403, 0.15384279319850125, 0.14195011305864957, 0.14824284380751074, 0.1426064404081222, 0.14101597620439077, 0.1466982019990528, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16282897747803404, 0.2491901661485153, 0.1670870502112335, 0.16536348873817408, 0.159583407772648, 0.15120231260257588, 0.14169394252407197, 0.16139484817187333, 0.1634028490223587, 0.1763160822704487, 0.15882379265603375, 0.15833462142207844, 0.16440100017525128, 0.15035261699462044, 0.18962513020610616, 0.16008983488914275, 0.16850387486680551, 0.17318901888617255, 0.20140440006501292, 0.1758109799285097, 0.19094915976158955, 0.1758496635667527, 0.18683568409856555, 0.21393898184432325, 0.18553563255177064, 0.17657866327449667, 0.18030163292270296, 0.20568880668582523, 0.05833813816442579, 0.05531586956543155, 0.05616012955903826, 0.05186305593955043, 0.05934830659822565, 0.05591111898196055, 0.07532168913913251, 0.05511425627251809, 0.05916902980382133]}, "mutation_prompt": null}
{"id": "7e435f1a-b542-42d1-8bb6-df392d85a2d1", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.weights = None\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            if self.weights is None:\n                self.weights = np.array([1.0] * self.budget)\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            # Update the weights for the next iteration\n            for i, individual in enumerate(selected):\n                self.weights[i] = func(individual) / np.sum(func(selected))\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive weights.", "configspace": "", "generation": 25, "fitness": 0.09130030438770718, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c3cdbcff-b796-4a86-a053-06d67d53b75b", "metadata": {"aucs": [0.17755407829400027, 0.17565956558040108, 0.170716333207086, 0.166834277975764, 0.18818139055183436, 0.1792764773683586, 0.17170567313881402, 0.15413621838550184, 0.1947844731050471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04089120707252092, 0.05108468905263486, 0.036843840851905174, 0.04100164522081573, 0.03597283393163053, 0.03948978223329991, 0.055711715412557705, 0.06702432684758475, 0.05871214942382852, 0.025979934130904825, 0.032508982847686774, 0.04745631067285394, 0.027803019802558393, 0.04917033362196399, 0.05702674525995721, 0.03717492788150434, 0.03992308285267243, 0.03055543238931091, 0.08781745214649872, 0.07353866492377914, 0.09175835158236756, 0.08899052233223192, 0.08032688292695478, 0.07268103941122717, 0.08227159294631492, 0.08576477000569305, 0.07934972073768709, 0.07973913569416458, 0.07314594371434269, 0.10171882691615464, 0.06276491157574837, 0.06227510184226048, 0.06058515477361848, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10460103122755104, 0.09312166973137026, 0.12475405623928759, 0.12457361077295859, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004279473632502251, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05303088809625611, 0.04799109494143394, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22070314094276522, 0.2152462511964387, 0.19447470943250666, 0.2055799784281095, 0.19223277213799106, 0.20724700933075846, 0.19949604691278533, 0.1815376054210981, 0.20408032060320924, 0.05557244562446961, 0.04452261509683053, 0.04424372964096823, 0.04466895679212479, 0.04076507163900367, 0.046009660620107806, 0.0629802004938097, 0.04479632217854013, 0.05229792848072812, 0.13752783092736576, 0.1273795545501043, 0.13663711776118437, 0.14118096478146125, 0.1407588785585091, 0.1286708113526671, 0.13970411268341798, 0.148407877234367, 0.13036250309787867, 0.1718489721761891, 0.16133418022791957, 0.1760473800192245, 0.16779345406006485, 0.1821401957956349, 0.16285925537945478, 0.1661673166132317, 0.17378099747093367, 0.1539380907668415, 0.11109532754426632, 0.10420441450137019, 0.11843238543815582, 0.11215520940335788, 0.1365008428013158, 0.11839348527586624, 0.1042370309014039, 0.1237427242099084, 0.12291873360523098, 0.14134202348770486, 0.1618556130505201, 0.1583470274596206, 0.15920861553488252, 0.1494366273984391, 0.16236042742370171, 0.15076568063433038, 0.17658116118767342, 0.184198602406345, 0.14003904958339486, 0.1495819939729396, 0.1426064404081222, 0.13724058100429903, 0.15114594784277868, 0.1537072920579794, 0.14096434603863706, 0.14131920697940292, 0.16207881422481074, 0.23606360461602693, 0.16680719261251375, 0.16656824490244904, 0.15964066900415785, 0.15090364644036713, 0.12996066612527324, 0.1613812843339134, 0.16393975838948827, 0.17650083581544018, 0.1611443866439295, 0.15825503211628345, 0.1605072402350627, 0.1509533611548688, 0.1817745223627304, 0.15824238288767922, 0.16850465920322144, 0.17392270077063332, 0.2029232138883703, 0.16917676104189217, 0.18513956138496146, 0.17581113380275526, 0.18683568409856555, 0.21379534447676474, 0.18379427638199664, 0.17619137834271115, 0.1898590909726069, 0.20568880668582523, 0.05828465307864372, 0.05530264414521535, 0.06573656441158615, 0.05196941447740211, 0.05933022958614642, 0.055933964908894684, 0.07529728639327182, 0.05397186509340757, 0.05323738017934754]}, "mutation_prompt": null}
{"id": "9c8fa8cf-048c-42e4-a183-b2e66f21ffb1", "solution": "import random\nimport numpy as np\n\nclass RefineHyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1, self.dim)\n                    # Adapt the mutation probability based on the mutation rate\n                    self.population[np.argmin(func(self.population))] += np.random.normal(0, 0.01 * (1 - func(self.population[np.argmin(func(self.population))])), self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# ```", "name": "RefineHyperElitistBloom", "description": "Refine HyperElitistBloom by introducing a new mutation strategy and improving Bloom selection with adaptive weights.", "configspace": "", "generation": 26, "fitness": 0.09117329529927408, "feedback": "The algorithm RefineHyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c3cdbcff-b796-4a86-a053-06d67d53b75b", "metadata": {"aucs": [0.17770712271462852, 0.17578811482102485, 0.17061220555052237, 0.17150387971053227, 0.18816895908540598, 0.17710545381234455, 0.1740668104964621, 0.16303091367997635, 0.1900522842776048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042060423189432594, 0.0466411574546044, 0.036843840851905174, 0.04118951088389766, 0.03766075422809678, 0.03962441949640383, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.02601635016558068, 0.032508982847686774, 0.04816191455268093, 0.027803019802558393, 0.04926774209271334, 0.05718105524375772, 0.03096864576247227, 0.03821147307613426, 0.022126898979338283, 0.08323454594142499, 0.07416850240044093, 0.09087431849796956, 0.08930036181419798, 0.08032688292695478, 0.0864254971817221, 0.08211046105420539, 0.08617362182679933, 0.079418072199539, 0.07966558062472284, 0.08043703106553202, 0.10196616360475985, 0.06743127653367942, 0.062276416502640486, 0.06212494780119193, 0.09472457566024695, 0.05943352761339338, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10485695254730076, 0.09685346092514469, 0.13020231475513555, 0.12765962356487326, 0.1368487698841222, 0.1112819135947033, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.000680567173183988, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06973747535513053, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 9.999999999998899e-05, 0.017993280776203546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052991673160639796, 0.059534311121465344, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055428706393117144, 0.05360575528525202, 0.05008726726802559, 0.06309834297876715, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22083721194463346, 0.19387835433003298, 0.1941629029825589, 0.20557430136281962, 0.19114611643472923, 0.20753415369446937, 0.1978672220548937, 0.18155436032266647, 0.20375748713045572, 0.0498076974078675, 0.0426329265907478, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.04424921319544006, 0.05229792848072812, 0.1374261204003263, 0.1273795545501043, 0.13764674961239598, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.15047715828812158, 0.13373929082065084, 0.17182146956931754, 0.16065977306226775, 0.17293578992992786, 0.15776610984100603, 0.18216074595364207, 0.17013222253777893, 0.16584157557366574, 0.17377774300845283, 0.1537290445077082, 0.11447359230812781, 0.10505197874958738, 0.11109491287868445, 0.1123738480417984, 0.13610718795093013, 0.11857630693741228, 0.10628682615994733, 0.12367622151883151, 0.09768661331340822, 0.14107158386181962, 0.1623367987068154, 0.1583470274596206, 0.15869661652028877, 0.14483935452668806, 0.16229776406110918, 0.14829910046894978, 0.1789508915963739, 0.18277724523822958, 0.14195011305864957, 0.1476197012937428, 0.14228311253266146, 0.14101597620439077, 0.15092170635294788, 0.15282202985716775, 0.13697870895265896, 0.14175390856222403, 0.16207881422481074, 0.2236817246969125, 0.16679477618376493, 0.16461259049394772, 0.1596427042756502, 0.1509031865887891, 0.1353176890159471, 0.16072029112176422, 0.16334613761311612, 0.17685854575693571, 0.1677500235152033, 0.15833462142207844, 0.16489870276034713, 0.15036433194172605, 0.18878179086644986, 0.160388513753716, 0.1685588165628804, 0.17497375793335146, 0.2028224565123633, 0.1691822674340161, 0.18607067239974362, 0.17585034123885257, 0.18691442189312002, 0.21363090373042937, 0.18640560789251703, 0.17600792697853573, 0.18931351833037224, 0.20568818275497436, 0.058344077551123696, 0.05357640728525093, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055968662755347065, 0.0758485729563827, 0.05511669288913523, 0.06898155271940087]}, "mutation_prompt": null}
{"id": "e7d8862e-3d57-442f-823f-755f5802322c", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# ```", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3cdbcff-b796-4a86-a053-06d67d53b75b", "metadata": {"aucs": [0.17778967790586175, 0.16875996929289283, 0.170257377687277, 0.17232244213444736, 0.18608911085916613, 0.18053354701416413, 0.18035786597807713, 0.16033839635905356, 0.1900820210086459, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04211053629435979, 0.05414728776584177, 0.03669239780074218, 0.04096043386050385, 0.0372777717620254, 0.038297694794045656, 0.05275846700300957, 0.06703937922089132, 0.058711088734964334, 0.025934719063371303, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.049682965382933486, 0.05732064327932618, 0.03768548859383769, 0.039933102210912175, 0.029898291447754133, 0.08746748470215648, 0.07416905128142504, 0.09155163563657986, 0.0893233009119061, 0.08032688292695478, 0.08624652240632036, 0.08239413141228502, 0.08621242348894087, 0.07511132724747072, 0.07973913569416458, 0.08048541653111474, 0.10171882691615464, 0.062311795368885425, 0.06229188895485982, 0.06050624721238962, 0.09472457566024695, 0.060869907721937344, 0.09992729358139563, 0.12553619411724048, 0.19308799805690346, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13124565476960137, 0.12743758424404428, 0.1368487698841222, 0.11611035284257465, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.0042852733364235895, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.054867126371396124, 0.052197778952424057, 0.035064393738538646, 0.06726048217505798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22089670307060738, 0.19848045480547793, 0.19495588911784612, 0.2055799784281095, 0.19700000291512365, 0.20724700933075846, 0.19987913881451724, 0.18804436662224966, 0.20216722828630518, 0.05075546545385534, 0.0426619459529296, 0.04417153216081293, 0.043528823345390766, 0.04039554381801169, 0.0360249635600961, 0.07398906756258006, 0.044000318322941157, 0.05229792848072812, 0.13752783092736576, 0.12737952084898296, 0.13727500842698248, 0.14118939879717873, 0.13886130926063034, 0.1299562862355278, 0.15034374726029887, 0.14842789616917273, 0.1338453581186947, 0.17191633743955026, 0.16777052418310268, 0.17604975509854814, 0.16778657615794823, 0.18217088231713063, 0.17698237727640387, 0.1660573783624355, 0.17377774300845283, 0.15355314911668616, 0.1153464818161507, 0.10556409534603806, 0.11104202713684663, 0.11240240911093746, 0.1364050013667134, 0.11677741248843942, 0.10628656686077576, 0.12375754707201325, 0.12213384490277845, 0.14117921289980873, 0.16218030235070602, 0.1583470274596206, 0.1601355605781457, 0.1525360992807897, 0.16236042742370171, 0.1550444247638858, 0.17359825270671403, 0.15384279319850125, 0.14195011305864957, 0.14824284380751074, 0.1426064404081222, 0.14101597620439077, 0.1466982019990528, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16282897747803404, 0.2491901661485153, 0.1670870502112335, 0.16536348873817408, 0.159583407772648, 0.15120231260257588, 0.14169394252407197, 0.16139484817187333, 0.1634028490223587, 0.1763160822704487, 0.15882379265603375, 0.15833462142207844, 0.16440100017525128, 0.15035261699462044, 0.18962513020610616, 0.16008983488914275, 0.16850387486680551, 0.17318901888617255, 0.20140440006501292, 0.1758109799285097, 0.19094915976158955, 0.1758496635667527, 0.18683568409856555, 0.21393898184432325, 0.18553563255177064, 0.17657866327449667, 0.18030163292270296, 0.20568880668582523, 0.05833813816442579, 0.05531586956543155, 0.05616012955903826, 0.05186305593955043, 0.05934830659822565, 0.05591111898196055, 0.07532168913913251, 0.05511425627251809, 0.05916902980382133]}, "mutation_prompt": null}
{"id": "273490e8-1b5b-4c4b-aabb-c86ea602a520", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1, self.dim)\n                else:\n                    # Introduce a new mutation strategy: use a Laplace mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.laplace(loc=0, scale=0.1, size=self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine HyperElitistBloom by introducing a novel mutation strategy and improving Bloom selection.", "configspace": "", "generation": 28, "fitness": 0.09151854533096496, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c3cdbcff-b796-4a86-a053-06d67d53b75b", "metadata": {"aucs": [0.17755223531550002, 0.17568865187784088, 0.170257377687277, 0.17855127567577944, 0.18818307063081585, 0.1804834373666261, 0.17856999940812623, 0.15997135519801964, 0.19600682365780042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04169501284466082, 0.05281333008342026, 0.03628991421889438, 0.03986693675744213, 0.03731730824551327, 0.039152308156773175, 0.0528437448134802, 0.06695747264652396, 0.042531761609246654, 0.025979934130904825, 0.03246112400006618, 0.0481463786277756, 0.02712960174753476, 0.04926319660480316, 0.058352664355799555, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08343544160004746, 0.07356256101297054, 0.08376055281142869, 0.0883112325412061, 0.08032688292695478, 0.08638215633177548, 0.08222010981131667, 0.08439158560695337, 0.07999356810357572, 0.07975951554698713, 0.08044018588781487, 0.10171882691615464, 0.06766494137001378, 0.06227510184226048, 0.05895014734610049, 0.09333637870097666, 0.061028138297436585, 0.09992729358139563, 0.12075939604628749, 0.19316852177190946, 0.1481850439168273, 0.10472862070943378, 0.09537675572610993, 0.1313641137216326, 0.12625130693733877, 0.13183421782633542, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.017162093656277078, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.007159387613177359, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05050418732837658, 0.06535045920481664, 0.032021491107493194, 0.06941906045599022, 0.03123997910134224, 0.055770453722678415, 0.0521337003680461, 0.048016435938758706, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.2209205942396124, 0.19490662901421874, 0.19495588911784612, 0.2055799784281095, 0.19104318856205116, 0.20647538609577565, 0.19707809716776337, 0.20551764577605391, 0.20467939786168232, 0.05063278792743009, 0.04249946984901731, 0.04401887178405428, 0.044720639633360815, 0.04038893738673521, 0.046009660620107806, 0.07290150126832906, 0.043993360971981255, 0.0470398816854779, 0.13754047691305116, 0.12491403790833955, 0.12961119599929005, 0.1412797182171618, 0.13683922311325847, 0.12875721046984268, 0.15004269146100246, 0.14982665620352842, 0.13039592126932875, 0.1718484283399735, 0.16851144997949163, 0.1760473800192245, 0.16884134946472729, 0.1821496595795835, 0.1769289974029502, 0.16591313548350284, 0.17377774300845283, 0.15203576391552542, 0.11534321591796037, 0.10542537671081664, 0.11768285129815392, 0.1123182076723217, 0.13667992355796799, 0.11799596640605037, 0.1036542404055737, 0.1237427242099084, 0.09792601064069018, 0.14101365000576482, 0.16233842533714993, 0.1583470274596206, 0.1629627216269477, 0.14964706000094463, 0.16242318234112296, 0.15533346120938785, 0.17353414634541897, 0.18277724523822958, 0.13689764972153984, 0.14966016897854684, 0.1426064404081222, 0.14101597620439077, 0.14684402121692186, 0.15319226070280145, 0.14096434603863706, 0.1414790833945282, 0.16207881422481074, 0.27395449841595587, 0.16679477618376493, 0.16643697708862237, 0.1597231740118219, 0.15120231260257588, 0.1411250594873471, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.1566327781714697, 0.15739646621992565, 0.16490434386087305, 0.150330135465925, 0.18759268739893975, 0.16045325997140758, 0.15287789888826553, 0.17399684602877097, 0.20271863298965032, 0.1757397014909311, 0.19096183060681216, 0.17585460728932434, 0.18683568409856555, 0.21348473845059723, 0.18361505011334145, 0.17594936498177827, 0.1877600670954629, 0.20568915230619766, 0.059758172881375526, 0.055449783864747415, 0.06534156568181348, 0.05187052314258889, 0.059151973277758785, 0.05678030809385759, 0.07532529613519179, 0.0549882362787002, 0.061785990288785286]}, "mutation_prompt": null}
{"id": "6a4cc313-5bc3-431f-bb6f-26b8527b6321", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# ```", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3cdbcff-b796-4a86-a053-06d67d53b75b", "metadata": {"aucs": [0.17778967790586175, 0.16875996929289283, 0.170257377687277, 0.17232244213444736, 0.18608911085916613, 0.18053354701416413, 0.18035786597807713, 0.16033839635905356, 0.1900820210086459, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04211053629435979, 0.05414728776584177, 0.03669239780074218, 0.04096043386050385, 0.0372777717620254, 0.038297694794045656, 0.05275846700300957, 0.06703937922089132, 0.058711088734964334, 0.025934719063371303, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.049682965382933486, 0.05732064327932618, 0.03768548859383769, 0.039933102210912175, 0.029898291447754133, 0.08746748470215648, 0.07416905128142504, 0.09155163563657986, 0.0893233009119061, 0.08032688292695478, 0.08624652240632036, 0.08239413141228502, 0.08621242348894087, 0.07511132724747072, 0.07973913569416458, 0.08048541653111474, 0.10171882691615464, 0.062311795368885425, 0.06229188895485982, 0.06050624721238962, 0.09472457566024695, 0.060869907721937344, 0.09992729358139563, 0.12553619411724048, 0.19308799805690346, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13124565476960137, 0.12743758424404428, 0.1368487698841222, 0.11611035284257465, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.0042852733364235895, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.054867126371396124, 0.052197778952424057, 0.035064393738538646, 0.06726048217505798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22089670307060738, 0.19848045480547793, 0.19495588911784612, 0.2055799784281095, 0.19700000291512365, 0.20724700933075846, 0.19987913881451724, 0.18804436662224966, 0.20216722828630518, 0.05075546545385534, 0.0426619459529296, 0.04417153216081293, 0.043528823345390766, 0.04039554381801169, 0.0360249635600961, 0.07398906756258006, 0.044000318322941157, 0.05229792848072812, 0.13752783092736576, 0.12737952084898296, 0.13727500842698248, 0.14118939879717873, 0.13886130926063034, 0.1299562862355278, 0.15034374726029887, 0.14842789616917273, 0.1338453581186947, 0.17191633743955026, 0.16777052418310268, 0.17604975509854814, 0.16778657615794823, 0.18217088231713063, 0.17698237727640387, 0.1660573783624355, 0.17377774300845283, 0.15355314911668616, 0.1153464818161507, 0.10556409534603806, 0.11104202713684663, 0.11240240911093746, 0.1364050013667134, 0.11677741248843942, 0.10628656686077576, 0.12375754707201325, 0.12213384490277845, 0.14117921289980873, 0.16218030235070602, 0.1583470274596206, 0.1601355605781457, 0.1525360992807897, 0.16236042742370171, 0.1550444247638858, 0.17359825270671403, 0.15384279319850125, 0.14195011305864957, 0.14824284380751074, 0.1426064404081222, 0.14101597620439077, 0.1466982019990528, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16282897747803404, 0.2491901661485153, 0.1670870502112335, 0.16536348873817408, 0.159583407772648, 0.15120231260257588, 0.14169394252407197, 0.16139484817187333, 0.1634028490223587, 0.1763160822704487, 0.15882379265603375, 0.15833462142207844, 0.16440100017525128, 0.15035261699462044, 0.18962513020610616, 0.16008983488914275, 0.16850387486680551, 0.17318901888617255, 0.20140440006501292, 0.1758109799285097, 0.19094915976158955, 0.1758496635667527, 0.18683568409856555, 0.21393898184432325, 0.18553563255177064, 0.17657866327449667, 0.18030163292270296, 0.20568880668582523, 0.05833813816442579, 0.05531586956543155, 0.05616012955903826, 0.05186305593955043, 0.05934830659822565, 0.05591111898196055, 0.07532168913913251, 0.05511425627251809, 0.05916902980382133]}, "mutation_prompt": null}
{"id": "20f94aa8-14fb-4d33-a7c0-37a9a8823a69", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation with a different standard deviation\n                if random.random() < 0.1:\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.05, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection with a different set of weights\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection with a different ranking function\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine HyperElitistBloom by introducing a new mutation strategy and improving Bloom selection", "configspace": "", "generation": 30, "fitness": 0.09121122506443699, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c3cdbcff-b796-4a86-a053-06d67d53b75b", "metadata": {"aucs": [0.17769664538642338, 0.17584481647573758, 0.1704834089619418, 0.1791400263024483, 0.18818139055183436, 0.17842752342039636, 0.17855474689065154, 0.15706482576460967, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0423222323648883, 0.04777391567395084, 0.03677830821114403, 0.041028703578300574, 0.03732066520661048, 0.039152308156773175, 0.05275846700300957, 0.06697765554091961, 0.05872856841698215, 0.02627474087112036, 0.032344334621631554, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05727867829591793, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.0873504871568841, 0.0741770523943478, 0.09072024943832802, 0.08841830294871156, 0.07758745776023879, 0.08640433588034302, 0.08222966937767084, 0.08620909750186001, 0.07936673550809192, 0.07973913569416458, 0.08043703106553202, 0.10172556509216735, 0.05666440133601447, 0.06058472670551984, 0.060101817907718735, 0.09472457566024695, 0.060869907721937344, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10401662377279264, 0.09561036963423852, 0.1292349872494165, 0.1267019295110584, 0.1368487698841222, 0.11602105102755644, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004230795535026255, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.007159387613177359, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05347681781517222, 0.059534311121465344, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055428706393117144, 0.05490832587028249, 0.05008726726802559, 0.0647726625190086, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082340051850247, 0.2132507290917619, 0.19495588911784612, 0.2055799784281095, 0.19455212811503786, 0.20735099955670178, 0.1998555628607268, 0.17950433441023939, 0.19653778602658, 0.05185658767375312, 0.04293614147011737, 0.04269010421837993, 0.045171649360915445, 0.04046913297757815, 0.046009660620107806, 0.073274580444469, 0.043993360971981255, 0.0470398816854779, 0.1374261204003263, 0.12455270564507281, 0.1411034220456735, 0.13968889657688488, 0.14115194246620144, 0.1299562862355278, 0.15034268976310372, 0.14861619065631115, 0.13363579024712158, 0.1719232065651053, 0.17319362916633996, 0.1760473800192245, 0.16779352461211916, 0.18211638731486135, 0.1769644640004372, 0.16580330122626874, 0.17377774300845283, 0.15321974733280053, 0.1153464078400428, 0.10273933854800166, 0.11849032669552728, 0.1123738480417984, 0.12186961070261282, 0.12270069050184518, 0.10554739552969516, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16116234519234407, 0.1583380269291782, 0.15426382342090272, 0.15090748190009906, 0.1623572407938354, 0.1481525150118529, 0.17636394442787218, 0.18277724523822958, 0.14195011305864957, 0.14836921094365607, 0.1426064404081222, 0.14101597620439077, 0.1497384077586259, 0.152973388501224, 0.13961679524412707, 0.14143266963436674, 0.16207881422481074, 0.1915516017390141, 0.16679477618376493, 0.16448555299431578, 0.1584761467991812, 0.13440590440163125, 0.1419681802650843, 0.16511399607580257, 0.1634028490223587, 0.17669878746333068, 0.15834007429685082, 0.14888823309102373, 0.16050834781209056, 0.1501181496648626, 0.19293261750619117, 0.16045396838184534, 0.16855947523118198, 0.17339552251250678, 0.2014371224013829, 0.16918240510030735, 0.19096435947135715, 0.17612130638522905, 0.18787622909360102, 0.2135749380374129, 0.18385356667164232, 0.17572094379808934, 0.18933339961373108, 0.20568880668582523, 0.05863900281186418, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05915378238590674, 0.05335307237569009, 0.05363283900630322, 0.055041683671911756, 0.06290094886653919]}, "mutation_prompt": null}
{"id": "70d5fd2d-3035-40ba-8f17-10b42a5475f8", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# ```", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3cdbcff-b796-4a86-a053-06d67d53b75b", "metadata": {"aucs": [0.17778967790586175, 0.16875996929289283, 0.170257377687277, 0.17232244213444736, 0.18608911085916613, 0.18053354701416413, 0.18035786597807713, 0.16033839635905356, 0.1900820210086459, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04211053629435979, 0.05414728776584177, 0.03669239780074218, 0.04096043386050385, 0.0372777717620254, 0.038297694794045656, 0.05275846700300957, 0.06703937922089132, 0.058711088734964334, 0.025934719063371303, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.049682965382933486, 0.05732064327932618, 0.03768548859383769, 0.039933102210912175, 0.029898291447754133, 0.08746748470215648, 0.07416905128142504, 0.09155163563657986, 0.0893233009119061, 0.08032688292695478, 0.08624652240632036, 0.08239413141228502, 0.08621242348894087, 0.07511132724747072, 0.07973913569416458, 0.08048541653111474, 0.10171882691615464, 0.062311795368885425, 0.06229188895485982, 0.06050624721238962, 0.09472457566024695, 0.060869907721937344, 0.09992729358139563, 0.12553619411724048, 0.19308799805690346, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13124565476960137, 0.12743758424404428, 0.1368487698841222, 0.11611035284257465, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.0042852733364235895, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.054867126371396124, 0.052197778952424057, 0.035064393738538646, 0.06726048217505798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22089670307060738, 0.19848045480547793, 0.19495588911784612, 0.2055799784281095, 0.19700000291512365, 0.20724700933075846, 0.19987913881451724, 0.18804436662224966, 0.20216722828630518, 0.05075546545385534, 0.0426619459529296, 0.04417153216081293, 0.043528823345390766, 0.04039554381801169, 0.0360249635600961, 0.07398906756258006, 0.044000318322941157, 0.05229792848072812, 0.13752783092736576, 0.12737952084898296, 0.13727500842698248, 0.14118939879717873, 0.13886130926063034, 0.1299562862355278, 0.15034374726029887, 0.14842789616917273, 0.1338453581186947, 0.17191633743955026, 0.16777052418310268, 0.17604975509854814, 0.16778657615794823, 0.18217088231713063, 0.17698237727640387, 0.1660573783624355, 0.17377774300845283, 0.15355314911668616, 0.1153464818161507, 0.10556409534603806, 0.11104202713684663, 0.11240240911093746, 0.1364050013667134, 0.11677741248843942, 0.10628656686077576, 0.12375754707201325, 0.12213384490277845, 0.14117921289980873, 0.16218030235070602, 0.1583470274596206, 0.1601355605781457, 0.1525360992807897, 0.16236042742370171, 0.1550444247638858, 0.17359825270671403, 0.15384279319850125, 0.14195011305864957, 0.14824284380751074, 0.1426064404081222, 0.14101597620439077, 0.1466982019990528, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16282897747803404, 0.2491901661485153, 0.1670870502112335, 0.16536348873817408, 0.159583407772648, 0.15120231260257588, 0.14169394252407197, 0.16139484817187333, 0.1634028490223587, 0.1763160822704487, 0.15882379265603375, 0.15833462142207844, 0.16440100017525128, 0.15035261699462044, 0.18962513020610616, 0.16008983488914275, 0.16850387486680551, 0.17318901888617255, 0.20140440006501292, 0.1758109799285097, 0.19094915976158955, 0.1758496635667527, 0.18683568409856555, 0.21393898184432325, 0.18553563255177064, 0.17657866327449667, 0.18030163292270296, 0.20568880668582523, 0.05833813816442579, 0.05531586956543155, 0.05616012955903826, 0.05186305593955043, 0.05934830659822565, 0.05591111898196055, 0.07532168913913251, 0.05511425627251809, 0.05916902980382133]}, "mutation_prompt": null}
{"id": "73c2cfe6-e6f8-47ac-acec-1107bb30583c", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.05, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            # Introduce a new strategy to update the elitist\n            if self.elitist is not None and np.linalg.norm(best - self.elitist) < 1e-6:\n                self.elitist = best\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# ```", "name": "HyperElitistBloom", "description": "Refine HyperElitistBloom by introducing a new mutation strategy and improving Bloom selection", "configspace": "", "generation": 32, "fitness": 0.09124105671196546, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c3cdbcff-b796-4a86-a053-06d67d53b75b", "metadata": {"aucs": [0.17770583033620058, 0.17578811482102485, 0.170257377687277, 0.17337572388128974, 0.18818139055183436, 0.17596277418435513, 0.17856999940812623, 0.16311020280923894, 0.17295242337005, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04202834328737659, 0.04189856213130205, 0.036610440413893275, 0.041028703578300574, 0.03731730824551327, 0.039513224794955004, 0.0528437448134802, 0.06700056272265753, 0.042284000200372596, 0.02662480823975133, 0.032508982847686774, 0.03784318004313414, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992873072161507, 0.029898291447754133, 0.08806115616190913, 0.07416850240044093, 0.09007348382833824, 0.0888508265491248, 0.08032688292695478, 0.08639386840231766, 0.08285726438453622, 0.08618080631393155, 0.07934750925794798, 0.07973913569416458, 0.08043703106553202, 0.10165761364209647, 0.06431725022910595, 0.062276416502640486, 0.06224966128935561, 0.09478339000182878, 0.06042398914582958, 0.09734671166992925, 0.12553619411724048, 0.19308637766117165, 0.14716249752989863, 0.10471519865355927, 0.09685346092514469, 0.12173415675877586, 0.1260855025950457, 0.13684888670050277, 0.10634691883195335, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004378096753067995, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.01885987821187518, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06535045920481664, 0.045274884319672526, 0.06941906045599022, 0.03213393888227367, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06607238283381922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22061475391207763, 0.19046972109297633, 0.19396308691291142, 0.2055799784281095, 0.19246538205933517, 0.2064797107683628, 0.19989033290985525, 0.18411704507091908, 0.20517311911451175, 0.05724952328502053, 0.04471082724645825, 0.04401887178405428, 0.0418684421216734, 0.040394150707412146, 0.0360249635600961, 0.06525704193423176, 0.043993360971981255, 0.05229792848072812, 0.13752783092736576, 0.1273795545501043, 0.1383194194366053, 0.13960432998050787, 0.13820988231726694, 0.12886797731968058, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17172852443079933, 0.16816893311607817, 0.17290949834321578, 0.16785934515259027, 0.18207088584300157, 0.17695732229522743, 0.16443838694716628, 0.17377424363149496, 0.15349324760970917, 0.11445721488614768, 0.10484204877232062, 0.11752914023967864, 0.11520093726804503, 0.13624854836716682, 0.12215562639304367, 0.10628682615994733, 0.1237427242099084, 0.12183290656329826, 0.14116957738740876, 0.16336141297701345, 0.1583470274596206, 0.160132755767183, 0.14721192616749035, 0.1626257245011289, 0.15364005991898844, 0.17355151355563359, 0.18205513877989854, 0.14195011305864957, 0.14875764295648874, 0.1426064404081222, 0.14225823501872836, 0.1492703316197641, 0.14519555524450845, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.23778081973164988, 0.1663697383910494, 0.16642618428556488, 0.15943315666671043, 0.15120231260257588, 0.1371928360414415, 0.16186822716173666, 0.16327640929538279, 0.17669779730059254, 0.15777701588933613, 0.15833462142207844, 0.16490481132844848, 0.14966736248937673, 0.1897403536487131, 0.15842577101969146, 0.16860027479937234, 0.17331520554942326, 0.20143517518248877, 0.17571731911548616, 0.19094915976158955, 0.17586260753642413, 0.18680987598606213, 0.213493530098133, 0.18382439475410084, 0.1724740937391427, 0.18939229054766094, 0.20568880668582523, 0.05861338443269615, 0.05529560871374084, 0.06585155299632517, 0.05186344726562442, 0.058812996493536995, 0.05249174504767129, 0.07532529613519179, 0.054027341308678145, 0.06279117614941332]}, "mutation_prompt": null}
{"id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate.", "configspace": "", "generation": 33, "fitness": 0.09179226194219334, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c3cdbcff-b796-4a86-a053-06d67d53b75b", "metadata": {"aucs": [0.17771015113270838, 0.1758053463981647, 0.17023645315003377, 0.17154306835689526, 0.18818139055183436, 0.17681990283591242, 0.17856111370070904, 0.16726779740051967, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04207556726031636, 0.04697087702470093, 0.036306714756563996, 0.041862171512963675, 0.03732066520661048, 0.039490777858887105, 0.0528437448134802, 0.06702432684758475, 0.05885000000036089, 0.02596330142534442, 0.032508982847686774, 0.047173722684426544, 0.02731774542678833, 0.04926774209271334, 0.05725483866555392, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.07405764095380296, 0.09090334998711569, 0.07463630204253424, 0.08032688292695478, 0.08639423096144161, 0.08233601937196522, 0.08493853211980973, 0.07927340735718225, 0.07973913569416458, 0.07581526644545722, 0.1017585080336425, 0.06766063929871147, 0.06227708511775232, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12181748543385129, 0.19308637766117165, 0.1481850439168273, 0.10222627129652573, 0.09421732086256707, 0.13123694841517808, 0.12601643877407465, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.0042239259828087405, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459806781505305, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03165693341080966, 0.055770453722678415, 0.05346788063423047, 0.05008726726802559, 0.06987013637261374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.21859353475154375, 0.19697475593165203, 0.1949444965852123, 0.2055799784281095, 0.19167657865037413, 0.20718086299128324, 0.19987913881451724, 0.19879510998330396, 0.20404478989785102, 0.051897922943738406, 0.043921194689327425, 0.04490768288943725, 0.04318053323128679, 0.04045314892761709, 0.046009660620107806, 0.07343783986403629, 0.043805414698616874, 0.05229792848072812, 0.13747837757302173, 0.12460034705241907, 0.1372168098523947, 0.1412797182171618, 0.14115194246620144, 0.12992946471676436, 0.1503424401666703, 0.14353112579929161, 0.12965056993449908, 0.17182383204663798, 0.17036139881629275, 0.1760538438252235, 0.15979132974852162, 0.18214892876424693, 0.176969753445117, 0.16603027692076744, 0.17377774300845283, 0.15364446062397308, 0.11536427207939615, 0.11081632811356412, 0.11851549116698612, 0.1123738480417984, 0.13594672465400925, 0.11671700147935338, 0.10663139043683145, 0.12375838164870023, 0.12291248234139363, 0.1410630187122207, 0.16228521858325162, 0.1583470274596206, 0.162033792745384, 0.14625083391827198, 0.16235648153942261, 0.1548862989057046, 0.1735582960702362, 0.18240255185499854, 0.14195011305864957, 0.14857179162659284, 0.1426064404081222, 0.14101597620439077, 0.15466412946090735, 0.15279227744556179, 0.13961679524412707, 0.13912440536758108, 0.16289374022253233, 0.2457134074930989, 0.16679477618376493, 0.16656824490244904, 0.15964066900415785, 0.15122820773463586, 0.14162835660026363, 0.16225510223660766, 0.16321187645926005, 0.17711856011791827, 0.15829656523808822, 0.15832686156688447, 0.1649475208436475, 0.150330135465925, 0.189356778686262, 0.16045374486843178, 0.16850387486680551, 0.17346200285136326, 0.20287929456730158, 0.17574460147619064, 0.18605873297537667, 0.17584328457004061, 0.18758199336949177, 0.2136811059433117, 0.18595080263409614, 0.1767342551952824, 0.1893326418660214, 0.20568880668582523, 0.058358589503175406, 0.05358905471133257, 0.05616012955903826, 0.05186305593955043, 0.05934830659822565, 0.05593203410477676, 0.07518762782838762, 0.05517383263887443, 0.06060784636763872]}, "mutation_prompt": null}
{"id": "7ef0fb77-1b16-4d96-9d28-373ab5918917", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.ranking_weights = np.array([1 / np.arange(1, self.budget + 1) for _ in range(self.budget)])\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Use a more efficient ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                new_population = [selected[r - 1] for r in ranks[:self.budget]]\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and using a more efficient ranking-based selection.", "configspace": "", "generation": 34, "fitness": 0.0907490033300369, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17618972244885045, 0.175817270415786, 0.1705753546390073, 0.17163006321081975, 0.18632740222203714, 0.1795362800427216, 0.17851667395563253, 0.16372994052170275, 0.17526840231629814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206185514619809, 0.047785779587513955, 0.03682130384106497, 0.041028703578300574, 0.037568729933967204, 0.03948978223329991, 0.05275846700300957, 0.06695747264652396, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.04757858297972961, 0.027803019802558393, 0.027587638924667535, 0.05672096824601558, 0.03696417075239278, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.07356227687560601, 0.0837283063313351, 0.088959449762686, 0.08032688292695478, 0.08550783976844267, 0.08278912199463118, 0.07915881134216085, 0.07936956917944371, 0.07973913569416458, 0.07242122803234685, 0.10177102043552477, 0.06783755759972065, 0.062276416502640486, 0.061897746275891063, 0.09472457566024695, 0.06097783057750894, 0.09992729358139563, 0.12181748543385129, 0.19308637766117165, 0.14734824137114266, 0.10472450780508058, 0.0946340867246579, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11610330014338155, 0.0043507767599104685, 0.004560104586776803, 0.003689195106263865, 0.004364779957170883, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0549510342606343, 0.059534311121465344, 0.04490689360873623, 0.06941906045599022, 0.03123997910134224, 0.0557836724069144, 0.05987111754955732, 0.05008726726802559, 0.06462499525789589, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.1946137874404501, 0.19550012250760518, 0.20558263493432616, 0.18967965721703395, 0.2070648477095639, 0.19959099984771855, 0.18860774461083496, 0.20407830396865267, 0.05001390496924141, 0.04380994617037792, 0.04493997339745004, 0.04339521697495252, 0.040741945429209725, 0.046009660620107806, 0.07509826572922806, 0.043838529826289996, 0.05229792848072812, 0.13764311927164508, 0.1277295535795221, 0.1361356309337125, 0.14118939879717873, 0.14115194246620144, 0.12848240582630477, 0.1507748110339393, 0.14861619065631115, 0.1338453581186947, 0.17158174465383658, 0.1706774771821945, 0.1759673272609873, 0.16717348522264452, 0.18230651117389984, 0.16743109011258717, 0.16357032592841747, 0.17377774300845283, 0.152552906095055, 0.115346239864077, 0.10485005317886664, 0.11848536356108474, 0.1123738480417984, 0.1360886454013709, 0.1070521628789215, 0.10628682615994733, 0.12368777073108927, 0.12142958587266528, 0.14069612916446295, 0.1623322255214198, 0.1583470274596206, 0.1642420825536769, 0.14990153263361083, 0.16201936961000374, 0.15533346120938785, 0.17364092817310972, 0.18277724523822958, 0.14195011305864957, 0.14950761202161067, 0.14763415592085039, 0.14101597620439077, 0.14624091433570607, 0.15282202985716775, 0.14096434603863706, 0.13254135966578995, 0.1442237507076406, 0.2034342457995829, 0.1663697383910494, 0.16657141521439822, 0.15963735696456494, 0.1509746437006777, 0.1373297163142002, 0.16139484817187333, 0.15137626500786994, 0.17653102399632026, 0.16013214870042325, 0.15833462142207844, 0.1649044291028534, 0.14909015729017283, 0.1408227398002826, 0.16045374486843178, 0.16855947523118198, 0.16458064858560828, 0.2029381326227866, 0.17406912675194086, 0.19090730982234294, 0.17550580291774387, 0.18683568409856555, 0.2135749380374129, 0.18383420327725752, 0.17594440673919165, 0.1883293729383504, 0.20568880668582523, 0.05838582037926554, 0.055317793090979506, 0.06572572037600677, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.05492059438007035, 0.05219403942939993, 0.06201175198322795]}, "mutation_prompt": null}
{"id": "d604db51-2de4-4918-82ee-f96f27abffa7", "solution": "import random\nimport numpy as np\nfrom collections import deque\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.dq = deque(maxlen=budget)\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.dq.append(best)\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                if random.random() < 0.1:\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Use a more efficient data structure for population management\n            self.population = np.array(new_population)\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n                self.population = np.array(new_population)\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and using a more efficient data structure for population management.", "configspace": "", "generation": 35, "fitness": 0.09141448847452696, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17751566351489767, 0.17557756982858552, 0.17073023550899002, 0.17650593608989074, 0.18818139055183436, 0.1752531634221175, 0.17856380327103993, 0.15546682302321901, 0.1959262719800915, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042158925269052294, 0.053932328696223, 0.037631083252593456, 0.04093120075618828, 0.03729555716655775, 0.03948978223329991, 0.05315843521778263, 0.06699007005715774, 0.058711088734964334, 0.02657301272990298, 0.03254955927789538, 0.04801647149274302, 0.027803019802558393, 0.05054388049749081, 0.027676723199592357, 0.028139322084460572, 0.04041179266592665, 0.02319206468627122, 0.0878380210774733, 0.07419322199783651, 0.09119101760605153, 0.08916714305594542, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07936692603081863, 0.0653793099269484, 0.08043703106553202, 0.10171882691615464, 0.06743127653367942, 0.06227510184226048, 0.06012520998439452, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12075939604628749, 0.1926566762692743, 0.14816672348220328, 0.10471519865355927, 0.0946340867246579, 0.12834786763439499, 0.11938514165260461, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004394792017268778, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.010809369510698108, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.059534311121465344, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06658601648547069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22085485711163733, 0.21530068388885215, 0.19480431428609268, 0.20557745386033588, 0.19157842250773616, 0.20724700933075846, 0.1998807079546645, 0.19695369747004565, 0.20408032060320924, 0.04996612314009685, 0.04690840875926805, 0.04403822260816537, 0.04337692709467578, 0.04044574604984119, 0.046009660620107806, 0.07396024587626748, 0.043584181177994785, 0.05229792848072812, 0.13752783092736576, 0.1273795545501043, 0.14381328200525045, 0.1412797182171618, 0.14115194246620144, 0.1301519804447907, 0.15034268976310372, 0.14913608560260183, 0.1331047560877674, 0.17205963074408515, 0.17145691550623543, 0.1728747503805751, 0.16779352461211916, 0.18224831674974806, 0.17004985751168855, 0.16659415700228075, 0.17375935638983575, 0.15419534771085142, 0.1144516873049295, 0.10442775732909904, 0.11109491287868445, 0.11152731103590974, 0.13611100165611822, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.12303220936259773, 0.14119021937712883, 0.16235203557765032, 0.143986152955921, 0.1601583581414543, 0.15113103773456937, 0.16235755165476673, 0.15533346120938785, 0.1777399329558832, 0.18206209530436246, 0.14195011305864957, 0.14779583080890102, 0.14172560018676317, 0.14101597620439077, 0.1521750124417589, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.20517655919065303, 0.1666967312017107, 0.16657141521439822, 0.15961663336208787, 0.15120175211565168, 0.14127431209746277, 0.1615656143938129, 0.1634028490223587, 0.17642346313620305, 0.1584159183361593, 0.15829047554056197, 0.16504731151689989, 0.14917591065179492, 0.18156988019648168, 0.16039969857600245, 0.16856107443914647, 0.1731987560165057, 0.20371451191897627, 0.17573313363392684, 0.19094915976158955, 0.17551778981042787, 0.18656567154660497, 0.21461291833931384, 0.18336835515298922, 0.17523872929388107, 0.18735642538493036, 0.20491329762080313, 0.05777536105010417, 0.0553178427612987, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.05419174158669249, 0.07532251537989965, 0.053994151194439066, 0.0630472203580148]}, "mutation_prompt": null}
{"id": "b16351bc-1f54-4ba3-b356-2ae40ed59ddc", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.mutation_std_dev = 0.1\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, self.mutation_std_dev * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n                else:\n                    # Introduce a new mutation strategy: use a Laplace mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.laplace(0, self.mutation_std_dev * self.learning_rate, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine Hyper-Elitist Bloom by introducing a novel mutation strategy and adaptive learning rate.", "configspace": "", "generation": 36, "fitness": 0.09108435246233472, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1709404397982207, 0.17586165395721765, 0.1703264653087846, 0.17364162857747778, 0.188176746656332, 0.17664813134708146, 0.17856359227370922, 0.1634180800314613, 0.18864082181950448, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0423007799343712, 0.05116847794216961, 0.036843840851905174, 0.04131023891787755, 0.03730499245900887, 0.03681487475805045, 0.05269333712159585, 0.06696335570610246, 0.058585977795054145, 0.023362280232276156, 0.03214691262241309, 0.04801647149274302, 0.027803019802558393, 0.04926774209271334, 0.0571051387776621, 0.03768548859383769, 0.03821147307613426, 0.02992443717967941, 0.08746944629118047, 0.07417672768536177, 0.09093846509606951, 0.08822863271431869, 0.08032688292695478, 0.08812276209792891, 0.08277167740490676, 0.08576994228209855, 0.07936533876301344, 0.0653793099269484, 0.08080637935892732, 0.10179185085861753, 0.06783755759972065, 0.062276416502640486, 0.061332456423763504, 0.09333637870097666, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10375357913913519, 0.09470711266913823, 0.13123694841517808, 0.1263422544683075, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.00427812224518076, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.007159387613177359, 0.035362057023575866, 9.999999999998899e-05, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03165693341080966, 0.055770453722678415, 0.052197778952424057, 0.05008726726802559, 0.056646821045485685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.20935125119086695, 0.18344693861085826, 0.20666000077606272, 0.19238251527345018, 0.20731519371821816, 0.19957432847673207, 0.1840857267635324, 0.20437631838008607, 0.051560748631830244, 0.04250646008327186, 0.04401887178405428, 0.04348650479898952, 0.04037744361846185, 0.04578022755974054, 0.07391412205996184, 0.045006933096807034, 0.05229792848072812, 0.13752783092736576, 0.1271728505906785, 0.1372168098523947, 0.1412797182171618, 0.13579728340817143, 0.13006799384382817, 0.15029716006799154, 0.14869504541976564, 0.13039592126932875, 0.17163341590868553, 0.162895810966886, 0.17289651835242525, 0.16763508923187131, 0.18215682579426007, 0.17705072556759294, 0.1666313868358904, 0.17374823802935624, 0.15355931153629832, 0.11539133736984708, 0.10813535200706159, 0.1184566008727388, 0.11237107925978707, 0.1363311741327392, 0.12259001971329675, 0.10514160804565564, 0.1237427242099084, 0.12291778458993718, 0.14063346722273362, 0.16233625434003984, 0.1583470274596206, 0.1516228985061756, 0.14594911861937432, 0.16242469013133343, 0.15533346120938785, 0.17358311674115579, 0.1837295553466508, 0.14195011305864957, 0.15240601457510672, 0.1426064404081222, 0.14101597620439077, 0.15357115081714823, 0.14568785143978458, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.19683094496811704, 0.16679477618376493, 0.16529817526450552, 0.15956583161525528, 0.15120231260257588, 0.13769666320597884, 0.1643277946177666, 0.16336352725000447, 0.17673571172354074, 0.15561609305306123, 0.1574246768738392, 0.16491223241568098, 0.14909015729017283, 0.18921609653290183, 0.16008979847143778, 0.12783102318389516, 0.17352370495772662, 0.20287702458622792, 0.17582173982334348, 0.17622123951118573, 0.17426353025110453, 0.18683568409856555, 0.2135749380374129, 0.18401133230594047, 0.17594512205278, 0.1893774530441661, 0.20463289769638215, 0.05842025911568671, 0.05410115323874176, 0.06570357825135775, 0.050960557548230256, 0.059151973277758785, 0.056126516959575934, 0.07532529613519179, 0.05597327014125353, 0.06243769995297155]}, "mutation_prompt": null}
{"id": "72c0981e-eb80-45fd-ba54-5203270a7286", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.ranking_based_selection = False\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n                elif self.ranking_based_selection:\n                    # Apply ranking-based selection\n                    ranks = np.argsort(func(self.population)) + 1\n                    weights = np.array([1 / rank for rank in ranks])\n                    weights /= np.sum(weights)\n                    new_population = []\n                    for _ in range(self.budget):\n                        r = random.random()\n                        cumulative_weight = 0\n                        for individual in selected:\n                            cumulative_weight += weights[individual]\n                            if cumulative_weight >= r:\n                                new_population.append(individual)\n                                break\n                    self.population = new_population\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# Refine the strategy by introducing a new mutation strategy: use a Gaussian mutation with a probability of 0.1.\n# Introduce ranking-based selection with a probability of 0.01.", "name": "HyperElitistBloom", "description": "Refine Hyper-Elitist Bloom by introducing a new mutation strategy and improving Bloom selection with adaptive learning rate and ranking-based selection.", "configspace": "", "generation": 37, "fitness": 0.09113694338080079, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1771731387403046, 0.155309034865733, 0.17114363340575778, 0.17155948659853038, 0.18815971865100767, 0.17467171079489763, 0.17930201354454256, 0.1620007967879723, 0.1900623290192207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.0526863451491526, 0.036843840851905174, 0.04100164522081573, 0.037729658693662405, 0.03829133748844615, 0.05046570065418765, 0.06687998946750462, 0.058711088734964334, 0.025979934130904825, 0.028222293664824094, 0.0481463786277756, 0.027803019802558393, 0.04934109881727089, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029763828138413717, 0.0876740025766547, 0.07420170610999577, 0.09087431849796956, 0.0828738334379826, 0.08032409580585897, 0.0863887231794428, 0.08222559889516068, 0.08620909750186001, 0.07940823809032915, 0.07973913569416458, 0.08040301547323414, 0.10171882691615464, 0.06838075385170339, 0.062276416502640486, 0.06058515477361848, 0.09472457566024695, 0.06096998643173557, 0.09992729358139563, 0.12553619411724048, 0.19310984657790686, 0.1481850439168273, 0.10471519865355927, 0.09533873804254311, 0.13123694841517808, 0.12884563461975573, 0.13653502471633705, 0.11360503570707037, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019597111055594918, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.053746886058863685, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2210974342171831, 0.20363201020780697, 0.19422701469587744, 0.20566375646396817, 0.19076423209735482, 0.2072576553634311, 0.1998807079546645, 0.18481137265845604, 0.19328405428617035, 0.054554296271171365, 0.03331827262267284, 0.04457890511795537, 0.04486025188574694, 0.04044574604984119, 0.046009660620107806, 0.07381176854783755, 0.04418272114204047, 0.04616519580518197, 0.1375002923822214, 0.12797101517476162, 0.13630062549107536, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034454640598027, 0.1486200507293881, 0.1333674196438287, 0.17182146956931754, 0.1610181394732304, 0.1760473800192245, 0.16779352461211916, 0.18218750247923077, 0.17702173692956147, 0.16559842795949986, 0.17377774300845283, 0.1520576437241783, 0.11532206499015807, 0.10465373994632154, 0.11261857964891131, 0.1123738480417984, 0.13624890778613896, 0.11670057257645172, 0.10628682615994733, 0.11668177246485067, 0.1229185550255375, 0.1411022546707531, 0.1633472371139757, 0.1583470274596206, 0.1601583581414543, 0.14660603129047756, 0.15826724753232413, 0.15533346120938785, 0.17356905255287802, 0.18277724523822958, 0.13975188906562597, 0.14896358936631438, 0.14228311253266146, 0.14101597620439077, 0.148513290188948, 0.15278421981377122, 0.1356311581581473, 0.14114319382385088, 0.16207881422481074, 0.1805643178798476, 0.16668914199777796, 0.1665105251389628, 0.15975075675009576, 0.1496983109744746, 0.14120541703286327, 0.16139484817187333, 0.1632959186350379, 0.17664891801469096, 0.15769693997176149, 0.15833462142207844, 0.1649490783881742, 0.15011964826505342, 0.18886734367950586, 0.16045374486843178, 0.16852305806990608, 0.17364275099028748, 0.2028812417861957, 0.17583071767994296, 0.19094915976158955, 0.17483049982874888, 0.1758060531819694, 0.2135749380374129, 0.1838404335499556, 0.1760411020565048, 0.18934158086242658, 0.20572419959934163, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05095941835664142, 0.05934463161685022, 0.055933964908894684, 0.07533819326373925, 0.05494255067347331, 0.06282889559984506]}, "mutation_prompt": null}
{"id": "2150a806-8286-47b2-b117-aa8d875a9f10", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.ranking_weights = np.ones(self.budget)\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Use a more efficient ranking-based selection\n            ranks = np.argsort(func(self.population)) + 1\n            self.ranking_weights = np.array([1 / rank for rank in ranks])\n            self.ranking_weights /= np.sum(self.ranking_weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += self.ranking_weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and using a more efficient ranking-based selection.", "configspace": "", "generation": 38, "fitness": 0.09094296258671751, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1777139996739341, 0.17573883917371236, 0.16998598431962764, 0.17361168022088747, 0.18767266460020815, 0.17811880275305958, 0.17856730983779512, 0.16475719816673995, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04210033271268698, 0.046936988843797045, 0.03678922233925008, 0.04178092441892567, 0.037757026933779136, 0.039406586542902744, 0.05047067335028865, 0.0670802675090385, 0.058711088734964334, 0.023513765166006895, 0.032508982847686774, 0.04813999901158783, 0.02712960174753476, 0.02754806376744401, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.03021934655531533, 0.08746944629118047, 0.07255832026684006, 0.09087431849796956, 0.08841658738218261, 0.08032688292695478, 0.08639065245232413, 0.08222010981131667, 0.0791871025300892, 0.07966949027994508, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06785280692927065, 0.062276416502640486, 0.06046305934542029, 0.09472457566024695, 0.06096998643173557, 0.09992729358139563, 0.12075939604628749, 0.19308637766117165, 0.1481850439168273, 0.10438849683543594, 0.09643669506305397, 0.13038756675371932, 0.12296011395542372, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004222293056461934, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.017162093656277078, 0.002367286420350001, 0.06957272857429797, 9.999999999998899e-05, 0.007159387613177359, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06854306564582546, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.02639484875546838, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22084688977510558, 0.20876893814998698, 0.19396308691291142, 0.2055799784281095, 0.19449038950296693, 0.19398270362012304, 0.1998807079546645, 0.18303313685921885, 0.20408858380181238, 0.05288024893229448, 0.04426784903076619, 0.04440308883801225, 0.046932459668848736, 0.04044574604984119, 0.034150235526036354, 0.07444962536118205, 0.0444605317116511, 0.05229792848072812, 0.13755236404509363, 0.1273795545501043, 0.14364865576813046, 0.13990371955733372, 0.14112606255690985, 0.13013755749087796, 0.15034268976310372, 0.1486312996146415, 0.1338453581186947, 0.17202464936626816, 0.16080474778224196, 0.1760473800192245, 0.16779352461211916, 0.18215734718251175, 0.17698839467896632, 0.16633737750694622, 0.17377774300845283, 0.15375971657307286, 0.11469971625714037, 0.10346704800714268, 0.11849090901550918, 0.11160998123653987, 0.1364038073610191, 0.11684109811843502, 0.10628682615994733, 0.12374803969480053, 0.122918350210525, 0.14119719225385108, 0.14859808652050566, 0.13777520933426401, 0.1601583581414543, 0.14875302335503615, 0.1583408329445487, 0.15076568063433038, 0.17036087690002188, 0.18277724523822958, 0.14197479888270448, 0.14780144764455871, 0.1426064404081222, 0.14101597620439077, 0.1511631321141762, 0.1454521361170893, 0.1394025181707912, 0.14143266963436674, 0.16207881422481074, 0.1857096521909377, 0.16669251339349744, 0.16536051471754598, 0.15986165275640596, 0.15120231260257588, 0.14142115125738275, 0.1614569752294428, 0.16336719977337233, 0.17653339472100582, 0.15915431525371626, 0.15833462142207844, 0.1649768201978037, 0.1503362692655008, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1754702594681572, 0.2028812417861957, 0.17518954258554365, 0.19094915976158955, 0.1751003203233369, 0.18655170612318195, 0.21357811218019418, 0.17803780063620311, 0.17594512205278, 0.18866927625135177, 0.20568880668582523, 0.05839597186148071, 0.055430661420101, 0.06585155299632517, 0.05186305593955043, 0.05898159573513162, 0.05542286633419935, 0.07531827872098928, 0.055039173437189115, 0.06068913588584002]}, "mutation_prompt": null}
{"id": "554e7e8f-dfe7-4a26-823f-b72f70089a2b", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.ranking_based_selection = False\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                if random.random() < 0.1:\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Use a more efficient ranking-based selection\n            if self.ranking_based_selection:\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def set_ranking_based_selection(self, enabled):\n        self.ranking_based_selection = enabled\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and using a more efficient ranking-based selection.", "configspace": "", "generation": 39, "fitness": 0.09170054086522572, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1777139996739341, 0.17578945288768355, 0.1712753900071572, 0.17797180753409214, 0.1882177210631233, 0.1779409859638803, 0.1784475041743111, 0.1653702940671301, 0.1897535167129265, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046931130670559984, 0.03669239780074218, 0.041105223305471394, 0.03729891412765485, 0.03948978223329991, 0.052621205149312456, 0.06688944459601531, 0.058037218373365396, 0.025902235419872688, 0.028222293664824094, 0.0481463786277756, 0.027803019802558393, 0.049086147619614495, 0.05735363404803262, 0.03096864576247227, 0.03455906459891844, 0.030190571807165, 0.08782452727498946, 0.07406925268882825, 0.09213763485025284, 0.08944395435122554, 0.08032409580585897, 0.08639127656417733, 0.0826925500706589, 0.08439716000847952, 0.07490388521034841, 0.07937716250748295, 0.07412617634325691, 0.10171882691615464, 0.06766063929871147, 0.062276416502640486, 0.06300140758658412, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1483795455822421, 0.10269050284626957, 0.09633527123219032, 0.1313051268511023, 0.12651266655257876, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008148577147152003, 0.06966758278144392, 9.999999999998899e-05, 0.007159387613177359, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.059534311121465344, 0.045274884319672526, 0.06941906045599022, 0.03213393888227367, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.07009677815145476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.22081730009380585, 0.1866973730667546, 0.19495588911784612, 0.20558020191724335, 0.18936202981852313, 0.20724700933075846, 0.1978863555414888, 0.18878127876621442, 0.20408032060320924, 0.0570140951204241, 0.047170483931394336, 0.043904190300989465, 0.04536471030053768, 0.04048553125970178, 0.046009660620107806, 0.07327384961308214, 0.0431455070441612, 0.05229792848072812, 0.13752659305554915, 0.12483043269592908, 0.13897120707276522, 0.14127896780837768, 0.14134849706505115, 0.1301103107362327, 0.15034268976310372, 0.14861619065631115, 0.13309893344525425, 0.17159692199423648, 0.16568800438028353, 0.1760473800192245, 0.16779661122024225, 0.18226544887702478, 0.17698274049676532, 0.16576986369859936, 0.17377774300845283, 0.15378400487905275, 0.11047066383120707, 0.10485977075932662, 0.1184866820215088, 0.11427884048931869, 0.1363254005361063, 0.1112105735808212, 0.10628682615994733, 0.1237464060854192, 0.12287317566471523, 0.14088222982634124, 0.16274284171342845, 0.1583380269291782, 0.1601583581414543, 0.15320683677774583, 0.16236098659102094, 0.15076568063433038, 0.17353975696504131, 0.18277724523822958, 0.14195011305864957, 0.1489863279727438, 0.13974245188436796, 0.14101597620439077, 0.15281200354693536, 0.15413288026293337, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.2700749207063313, 0.16856178946230138, 0.16649574587483262, 0.15958812633133224, 0.15146896036194046, 0.1411966535145892, 0.1613804808864283, 0.1633192167273252, 0.17662905154137842, 0.15837078657362436, 0.15741691701864524, 0.16490261438250486, 0.150330135465925, 0.18851244019877056, 0.16045374486843178, 0.16855838929561362, 0.17338196174388798, 0.20292530876891346, 0.1757384417549993, 0.19094915976158955, 0.17585034123885257, 0.17561452013838263, 0.2135749380374129, 0.18393684702391033, 0.17594512205278, 0.1893356088497229, 0.20568880668582523, 0.058344077551123696, 0.05521903328008071, 0.06570357825135775, 0.05186305593955043, 0.05934463161685022, 0.05593203410477676, 0.075345243399074, 0.05494250812712198, 0.06228366743106306]}, "mutation_prompt": null}
{"id": "89cdb2cf-a81f-4ff2-9fdf-b47d7fb9cb90", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.ranking_weights = np.array([1 / (i + 1) for i in range(self.budget)])\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use ranking-based selection with adaptive weights\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = self.ranking_weights * np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine HyperElitistBloom by introducing a new mutation strategy and improving Bloom selection with adaptive learning rate and using a more efficient ranking-based selection.", "configspace": "", "generation": 40, "fitness": 0.09121203653613057, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1775914091664148, 0.16877902850264404, 0.17024321785543528, 0.17214601196771584, 0.18822803290392487, 0.1751006465070727, 0.17860690519883615, 0.16255059841288677, 0.18998967530282407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.05269750559056374, 0.036674108436806296, 0.04152940268629157, 0.03738024183990185, 0.03948978223329991, 0.05275846700300957, 0.06716763482741828, 0.058711088734964334, 0.025979934130904825, 0.03266181764975429, 0.04799115299610435, 0.02712960174753476, 0.049299564157000764, 0.05722037937760671, 0.03696417075239278, 0.02866259701936469, 0.030016624010514303, 0.0875855926381397, 0.07181270960080532, 0.09087431849796956, 0.08499886866007889, 0.08032688292695478, 0.08639386840231766, 0.08231303793536004, 0.08620909750186001, 0.07934108563356168, 0.07973913569416458, 0.0807129084603746, 0.10171882691615464, 0.06456018942886899, 0.062276416502640486, 0.06068433558302988, 0.09333637870097666, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09679055952945548, 0.13123694841517808, 0.12621976139028557, 0.13570633828321066, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.003689195106263865, 0.0005223140870530552, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055859892441784575, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.054782067011964086, 0.05349610410076233, 0.04799109494143394, 0.0665115536458698, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.2208611739424362, 0.1993110826370783, 0.19495588911784612, 0.2055799784281095, 0.18982082119757782, 0.20728225431550107, 0.1998807079546645, 0.18104628235471953, 0.20405629202908426, 0.050882331461740926, 0.04250451998349125, 0.03464564798614134, 0.04318367576560178, 0.04039198851080206, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.137598473449129, 0.12734174039398205, 0.13751386131249566, 0.14128700867612243, 0.14115211062481847, 0.12825559732660863, 0.15023196363986902, 0.14861619065631115, 0.1295731602097674, 0.1719780018814705, 0.1810759863908955, 0.1760473800192245, 0.16779345406006485, 0.1619390040339762, 0.17696443329484846, 0.16591313548350284, 0.17377774300845283, 0.15375431676573226, 0.11023592513062208, 0.10482102743361776, 0.11849014956822501, 0.1123738480417984, 0.13650610210167202, 0.11482862584516462, 0.10624356434282944, 0.12375222523322771, 0.122262993360017, 0.1410630187122207, 0.16119904647529892, 0.1583470274596206, 0.1521851607942315, 0.1464311693001772, 0.16239917946880777, 0.14620899362048334, 0.17366418701593633, 0.18277478810053482, 0.13689764972153984, 0.14963030338393712, 0.1426064404081222, 0.14177563087502898, 0.14888344426225764, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18129091545492393, 0.16679102604569307, 0.16460942018199853, 0.15963340595931663, 0.15120019167551668, 0.14120021364197433, 0.16174656058120562, 0.1634028490223587, 0.17657291712792866, 0.15867425311793415, 0.15833462142207844, 0.16491350117124426, 0.15027811932747248, 0.19030945430571855, 0.16045374486843178, 0.16855947523118198, 0.1760753320068248, 0.20289527812268937, 0.16910709365819676, 0.19094915976158955, 0.17584692407196323, 0.18683568409856555, 0.2135774807017724, 0.18647905927864772, 0.17594512205278, 0.18869545496147266, 0.20527668356878703, 0.057818104087145494, 0.05542900665611128, 0.06585436667964173, 0.051863938717901514, 0.05934368475916485, 0.05580389301070121, 0.07535718995064511, 0.05498884110368052, 0.06455689952667143]}, "mutation_prompt": null}
{"id": "4ba3640f-e3a2-4e54-b44a-9de6eb076b4b", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.mutation_rate = 0.02\n        self.selection_rate = 0.01\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < self.mutation_rate:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                if random.random() < 0.1:\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.05 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.95  # Reduce the learning rate more aggressively\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < self.selection_rate:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm with a new mutation strategy and improved Bloom selection strategy using a more adaptive learning rate.", "configspace": "", "generation": 41, "fitness": 0.09053105482289238, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17807009653336558, 0.17578811482102485, 0.17064524694192773, 0.17150922657709178, 0.18819032039215167, 0.17835216516383867, 0.1787743960653121, 0.1635981380369621, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04186565371122053, 0.050686506453696545, 0.03677126038427925, 0.041028703578300574, 0.03730677775186253, 0.03948978223329991, 0.05089717883332612, 0.06695747264652396, 0.05827728744210359, 0.023477270113819948, 0.03251155051488219, 0.0369341471265443, 0.027803019802558393, 0.04926774209271334, 0.0570153721923361, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08859467537339982, 0.0706672765235602, 0.0833178741286682, 0.08359372309497626, 0.07873825762502562, 0.07236356335908056, 0.08222559889516068, 0.07757855805486524, 0.07935862862338983, 0.0797090366479648, 0.08093367513289451, 0.0906416127174845, 0.06743127653367942, 0.062276416502640486, 0.06453602213493537, 0.09472457566024695, 0.060869907721937344, 0.09992729358139563, 0.1246737771694556, 0.19308637766117165, 0.14813209921127768, 0.1021028822797061, 0.09643669506305397, 0.1313795551475574, 0.12609991573797708, 0.1368487698841222, 0.11604441996491277, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004343580068565056, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.017162093656277078, 0.008081236604151831, 0.025157232330730417, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0498200603805653, 0.06530492976685875, 0.04513743476793097, 0.06941906045599022, 0.03123997910134224, 0.04946819924085921, 0.05402419492236854, 0.035064393738538646, 0.06697585805480777, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22019814828194317, 0.19460500177352424, 0.18344693861085826, 0.2055799784281095, 0.18923737252212391, 0.2065753610006531, 0.1998807079546645, 0.17612842034300935, 0.19277446712802015, 0.05038739359295541, 0.04355311493333014, 0.04398774103901271, 0.04671528505402589, 0.04056664286997491, 0.045048314669234424, 0.0749480140752321, 0.04442336000950364, 0.04555179045768332, 0.13752457453596112, 0.1273803010360638, 0.1372168098523947, 0.1412797182171618, 0.13888144047393902, 0.13013755749087796, 0.1415491007132128, 0.1331600559868502, 0.12999712692668286, 0.17182146956931754, 0.16166929046926592, 0.1760473800192245, 0.16779345406006485, 0.18215448496472275, 0.17708932960083879, 0.1659338785290454, 0.17377774300845283, 0.15378088453540184, 0.11058308572919828, 0.11205976106211002, 0.11261857964891131, 0.11207508956435197, 0.1390305155408369, 0.10946173079210364, 0.10628682615994733, 0.1237427242099084, 0.12319975884963952, 0.14106912900186852, 0.16288182137906193, 0.15802737224080265, 0.16011312328722127, 0.14772905082117527, 0.16234323075496182, 0.15540444748931914, 0.17476203674062396, 0.15384467475052443, 0.14195011305864957, 0.1471278223575151, 0.1426064404081222, 0.13724058100429903, 0.15749267741721884, 0.15282202985716775, 0.13701390094233834, 0.14175390856222403, 0.16207881422481074, 0.19469900819191632, 0.1665361867943469, 0.1665728587267309, 0.15966901575577064, 0.1511988499365543, 0.1412059253827216, 0.16139484817187333, 0.1634782597137735, 0.17680897275238017, 0.1586413471071053, 0.15833462142207844, 0.1624345636673581, 0.15079299977487504, 0.19332930404303839, 0.15849501139721356, 0.16855947523118198, 0.17337594411667867, 0.20287814605139265, 0.17436179411409425, 0.1851659311217453, 0.17419382628556324, 0.18683568409856555, 0.2134975785052704, 0.1838560416030376, 0.17607571862415483, 0.18936093210752236, 0.20568880668582523, 0.05809490875356749, 0.05529384168308005, 0.06585155299632517, 0.05188887998597058, 0.05934830659822565, 0.055933964908894684, 0.0753182469675836, 0.05542983677313007, 0.06762812978928501]}, "mutation_prompt": null}
{"id": "bf756ff6-31bf-470f-9c69-c9cc62e5421c", "solution": "import random\nimport numpy as np\n\nclass RefinedHyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.adaptive_learning_rate = 0.1\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n            # Update the adaptive learning rate\n            if np.linalg.norm(best - self.elitist) < 1e-6:\n                self.adaptive_learning_rate *= 0.99\n            elif np.linalg.norm(best - self.elitist) > 1e-6:\n                self.adaptive_learning_rate *= 1.01\n\n    def get_elitist(self):\n        return self.elitist", "name": "RefinedHyperElitistBloom", "description": "Refine HyperElitistBloom by introducing a new mutation strategy and improving Bloom selection with adaptive learning rate and using a more efficient ranking-based selection.", "configspace": "", "generation": 42, "fitness": 0.09066495384067466, "feedback": "The algorithm RefinedHyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1777139996739341, 0.17557756982858552, 0.17033915616129303, 0.17079023452316056, 0.18793168681032646, 0.17231844385225814, 0.1785507992358102, 0.16234407651309213, 0.19829257120837773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.052486421506741876, 0.036843840851905174, 0.040815277885333345, 0.037723517090921255, 0.03958673114369338, 0.0528437448134802, 0.06702432684758475, 0.05827728744210359, 0.025979934130904825, 0.028222293664824094, 0.0481463786277756, 0.023612870675681408, 0.049357221446527544, 0.027256879918719612, 0.03768548859383769, 0.040689719811902614, 0.030201285408751444, 0.08746748470215648, 0.0741770523943478, 0.09087431849796956, 0.08380590086451012, 0.08032688292695478, 0.07358329709491829, 0.08220638379288958, 0.08564167440930848, 0.07934418383484876, 0.06435340295572423, 0.07581526644545722, 0.10178302676706841, 0.06800172181621744, 0.062276416502640486, 0.06150521441873391, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.14824242983936042, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12593976950752328, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004252783732902943, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.032530568194916176, 0.05442638801360322, 0.052197778952424057, 0.035101879729971586, 0.06530361194856082, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.21829028352875335, 0.1989660971765136, 0.19495588911784612, 0.2055799784281095, 0.19084887943426532, 0.1940064881436001, 0.1998807079546645, 0.20443146433069048, 0.20408032060320924, 0.053511324168932894, 0.04250646008327186, 0.04404109053906746, 0.0438571119982315, 0.04044574604984119, 0.034150235526036354, 0.06919525136481275, 0.038580914305185066, 0.0516303794389289, 0.1374261204003263, 0.1273795545501043, 0.14167177096964656, 0.14122536296943566, 0.139014211434476, 0.13013755749087796, 0.13970291783384692, 0.14866330474347034, 0.13345349101519155, 0.17195171664252962, 0.1815144034115641, 0.16814906059237933, 0.16779352461211916, 0.16079046076594172, 0.17706328297320484, 0.16587223592018796, 0.17377774300845283, 0.1533089016732272, 0.11059490765450486, 0.10543477344082097, 0.11843238543815582, 0.11235062042738386, 0.13191434938173574, 0.11114658858207382, 0.10517691711276422, 0.12368777073108927, 0.12292261143070315, 0.14114660087965425, 0.1624161970035951, 0.1583470274596206, 0.16137306553948527, 0.15210719522477933, 0.1623475574736507, 0.15076568063433038, 0.1746606692984939, 0.15384279319850125, 0.14195011305864957, 0.1496853203683799, 0.14127099752922512, 0.14145389477922932, 0.14694591461756223, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.14594593489043017, 0.17978380592272936, 0.1666379820213031, 0.16649087670775353, 0.15962073738989457, 0.15122759505703776, 0.1411966535145892, 0.1636513437173981, 0.16333831618623573, 0.1766054548496644, 0.163167588838789, 0.1488911944633473, 0.16490498282695387, 0.13755148361249536, 0.1893722545633778, 0.1580617227240051, 0.16841721546281263, 0.17399257507394572, 0.2029037421720027, 0.1691822674340161, 0.19094915976158955, 0.17585393227391555, 0.18680987598606213, 0.2136911516952983, 0.1838401386678462, 0.175945679060299, 0.18804694613645256, 0.20568818275497436, 0.05835357800105867, 0.05532404174719452, 0.06584872454913471, 0.049700028238381155, 0.05934830659822565, 0.056025612416836346, 0.07532513434003052, 0.055800653682917645, 0.06709506873454596]}, "mutation_prompt": null}
{"id": "82546832-cc5d-41e4-a194-78bfe80a6833", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.ranking_based_selection = False\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Use a more efficient ranking-based selection\n            if random.random() < 0.01 and not self.ranking_based_selection:\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n                self.ranking_based_selection = True\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and using a more efficient ranking-based selection.", "configspace": "", "generation": 43, "fitness": 0.09104787405921204, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17663974129272497, 0.1757522649314629, 0.153437273940227, 0.1750840393450973, 0.18825311337302342, 0.17741841268719438, 0.1784868333114169, 0.16075428235572986, 0.18928789581612093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04223381204810739, 0.05308518261210793, 0.03618932539327069, 0.041028703578300574, 0.03729891412765485, 0.03948978223329991, 0.0528437448134802, 0.06702429704511137, 0.05819990663090979, 0.025979934130904825, 0.028222293664824094, 0.04799115299610435, 0.027803019802558393, 0.050620526453070136, 0.027769656168817325, 0.03768548859383769, 0.04062172540310116, 0.021595867154240667, 0.08746944629118047, 0.07326310808188607, 0.09087431849796956, 0.08106257861679989, 0.08046896451487495, 0.08670435847785718, 0.08222559889516068, 0.08620909750186001, 0.07939583481092727, 0.0797090366479648, 0.08049975384331043, 0.10171882691615464, 0.06747113410587047, 0.06226916347931988, 0.06362670589498853, 0.09613662346649776, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1480974018305644, 0.10470493349903331, 0.09677325632965317, 0.13123694841517808, 0.12454375883516133, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.0042075348643063615, 0.004209117030077536, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019597111055594918, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 9.999999999998899e-05, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03213393888227367, 0.054782067011964086, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22100868044276156, 0.2032788612606321, 0.18344453900438407, 0.2055799784281095, 0.19169367054172226, 0.20724700933075846, 0.19959099984771855, 0.19479366741628634, 0.20404478989785102, 0.05177522453570893, 0.04250646008327186, 0.04645177416815971, 0.04319966904361705, 0.04066682568645663, 0.04464731216698414, 0.07334281601425519, 0.044243575482746156, 0.04617937333870903, 0.137090463653059, 0.12719128825347148, 0.1372168098523947, 0.1412797182171618, 0.14033720801517102, 0.13014301423647034, 0.15034211898882077, 0.14849230181412099, 0.13041828402121847, 0.17181964227474567, 0.15869246493882583, 0.1760473800192245, 0.16763508923187131, 0.18159160621185633, 0.17698463464906034, 0.16591313548350284, 0.17377774300845283, 0.15375461593013517, 0.11478788092532288, 0.10401455222210843, 0.11849202217186028, 0.109240792686368, 0.13629114150247956, 0.11675600890126026, 0.10338902293839869, 0.11345770390476695, 0.12353284378664497, 0.14079379031265582, 0.16199154039681474, 0.1583470274596206, 0.15950309005561725, 0.14639593065125478, 0.16235788159595976, 0.15533346120938785, 0.17478955839867705, 0.18277724523822958, 0.13420034275014137, 0.14767485028897687, 0.1426064404081222, 0.14101597620439077, 0.14421027839558243, 0.15282202985716775, 0.14096434603863706, 0.14204985227420275, 0.16207881422481074, 0.20525271432466174, 0.16679477618376493, 0.16657141521439822, 0.15955321890838003, 0.14879268441547955, 0.14097729640100842, 0.16283439482701723, 0.16325468389120212, 0.17158644167361048, 0.15929710007478826, 0.15833462142207844, 0.1649206394532734, 0.15032012361330382, 0.18908368182290491, 0.1583592766352474, 0.16855947523118198, 0.1755278547820046, 0.20243156038900878, 0.17567799024499886, 0.1861616975585746, 0.17583779991527104, 0.18683568409856555, 0.1926850889104883, 0.18383090911071653, 0.17594512205278, 0.18964964375298843, 0.20568880668582523, 0.05803768483376859, 0.055334055807830684, 0.06585155299632517, 0.051862156040781704, 0.059350430948509114, 0.05634573365794748, 0.07534295976193628, 0.055262946046545025, 0.06596202173493015]}, "mutation_prompt": null}
{"id": "0c2eaee0-a294-4af9-a61f-2586679fb86f", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.gaussian_std = 0.1\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, self.gaussian_std * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n                    self.gaussian_std *= 0.9  # adapt the standard deviation\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm with adaptive learning rate and Gaussian mutation.", "configspace": "", "generation": 44, "fitness": 0.09136948591491661, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17601490754282345, 0.17578811482102485, 0.170257377687277, 0.17141248045120105, 0.18818139055183436, 0.17529879872691978, 0.17846802967975506, 0.16292084683487462, 0.19484233090584324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.05065239770220464, 0.0358037618603918, 0.041090807537406016, 0.03740349114894048, 0.03965900426176627, 0.05089717883332612, 0.06704864932503296, 0.058711088734964334, 0.025979934130904825, 0.030929276720888965, 0.03715311208821226, 0.02731774542678833, 0.04899886924473196, 0.027904992216706392, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08759355309885575, 0.07418051156105832, 0.09087431849796956, 0.09116546462618502, 0.08032688292695478, 0.07328316306816929, 0.08222559889516068, 0.08617586591968407, 0.07925937370028935, 0.07973913569416458, 0.08085103562330043, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06555399563182951, 0.09472457566024695, 0.056418364744343696, 0.09821690698750918, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.1036464471063504, 0.09685346092514469, 0.13123694841517808, 0.12704682081795615, 0.11743098925083906, 0.1159805481505014, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004313061238221616, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.0701418538171743, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 9.999999999998899e-05, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.052328828052126464, 0.05008726726802559, 0.06837283649436232, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22065144948817206, 0.2103772822709351, 0.19495588911784612, 0.20558266067364095, 0.19166992384318782, 0.20710286635085673, 0.1998807079546645, 0.18489657825600758, 0.20408032060320924, 0.05438730636578348, 0.04521859631948644, 0.044058991978727535, 0.04563883761935372, 0.04044644958030863, 0.0450596648954501, 0.06299246627686661, 0.04366558757527417, 0.05229792848072812, 0.13752783092736576, 0.12310310778440359, 0.13491172044769717, 0.13990371955733372, 0.14115194246620144, 0.13013755749087796, 0.15032901993182568, 0.14861619065631115, 0.1333367677611128, 0.17194564968801218, 0.1822777122071244, 0.1760490108912598, 0.16850044427909638, 0.1821496595795835, 0.17699418255182842, 0.16724785078835624, 0.17377781011314786, 0.15162476070863828, 0.11534321591796037, 0.10664439280434201, 0.11774330266849753, 0.1123182076723217, 0.12142073516438867, 0.11802126355950282, 0.10659222137617985, 0.12375151061201772, 0.1229185550255375, 0.14016628270981313, 0.1636284546889779, 0.143986152955921, 0.16091648658910074, 0.1516045556800938, 0.16237044696249892, 0.15076568063433038, 0.17236327245767058, 0.18257444144571155, 0.13689764972153984, 0.14984858187294703, 0.1426064404081222, 0.14223333499539026, 0.1494757197425275, 0.15282202985716775, 0.1402623479731876, 0.13254135966578995, 0.14594593489043017, 0.26967768223538935, 0.16637006994160475, 0.16657141521439822, 0.15299733037052787, 0.15096921747452707, 0.1411966535145892, 0.16841893508968186, 0.1624115083854285, 0.17650326767667757, 0.15782652919015805, 0.15833462142207844, 0.1649044291028534, 0.13925987862752354, 0.19011356726040973, 0.16038725048398772, 0.16851814002267018, 0.17317756003851592, 0.2031046152621654, 0.17487349470251934, 0.19094915976158955, 0.17585034123885257, 0.18671995894985016, 0.21429114062994437, 0.1840020059388826, 0.1735837470862207, 0.18935810251011098, 0.20568818275497436, 0.05126755924494042, 0.05361840961746567, 0.06570388424121032, 0.0509588315598809, 0.059348521776939056, 0.05496958364395954, 0.0753238805398454, 0.05514227531439231, 0.06520241166163432]}, "mutation_prompt": null}
{"id": "700a1b93-90f5-4973-be71-e7d9cd8ce7c1", "solution": "import random\nimport numpy as np\n\nclass RefinedHyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.mutation_std = 0.1\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                self.population[np.argmin(func(self.population))] = best + np.random.normal(0, self.mutation_std * self.learning_rate, self.dim)\n                self.learning_rate *= 0.9\n                self.mutation_std *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "RefinedHyperElitistBloom", "description": "Refine Hyper-Elitist Bloom algorithm with adaptive learning rate and Gaussian mutation.", "configspace": "", "generation": 45, "fitness": 0.09111598994491131, "feedback": "The algorithm RefinedHyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17770583033620058, 0.17582843566358786, 0.17024192054565723, 0.17418156060602907, 0.18818781360710624, 0.1776006226743957, 0.1785970782263303, 0.16359748210136915, 0.1942305136381276, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04207183473817622, 0.045159462446966225, 0.03669844691127255, 0.04174690772123102, 0.03732066520661048, 0.03948978223329991, 0.052621205149312456, 0.06696335570610246, 0.058711088734964334, 0.025944075039769254, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.0506171940202188, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.02319761007029575, 0.08341188203463157, 0.0721509228868803, 0.09051265573093314, 0.09039320193628153, 0.08032688292695478, 0.0863887231794428, 0.08222559889516068, 0.08620909750186001, 0.07934118861610695, 0.07973913569416458, 0.07277219785340183, 0.09179191195052949, 0.06190551430284319, 0.062276416502640486, 0.06155484475989759, 0.09472457566024695, 0.059501854777944785, 0.09821690698750918, 0.12553619411724048, 0.19308637766117165, 0.14835455652318574, 0.10471519865355927, 0.09677325632965317, 0.13124460017082673, 0.12616896453387505, 0.13655059092380528, 0.09857634330804099, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004263425908059615, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.017162093656277078, 0.008148577147152003, 0.025672690061669168, 9.999999999998899e-05, 0.011988543793833517, 0.01900488333945327, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0559986769002242, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.031203280451700843, 0.055770453722678415, 0.05389630967756276, 0.05008726726802559, 0.06968091371858898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22092621447193883, 0.1934807547854811, 0.19495588911784612, 0.2055799784281095, 0.19055329568361545, 0.20724700933075846, 0.19988359902062036, 0.19875252915319908, 0.20408032060320924, 0.0556229873822931, 0.04652291446538459, 0.044049756007706664, 0.04157605611782478, 0.04044574604984119, 0.0360249635600961, 0.07322963976219232, 0.043805414698616874, 0.05229792848072812, 0.13747837757302173, 0.1273795545501043, 0.13989880833821478, 0.1412797182171618, 0.14115194246620144, 0.12930814316802475, 0.15043081682045445, 0.14861382511244514, 0.1338453581186947, 0.17180424499982405, 0.17379059484379866, 0.1760473800192245, 0.16779352461211916, 0.18210184854866784, 0.17690731315438768, 0.16444804962053872, 0.17379340448278757, 0.1538258082734959, 0.11545358610858236, 0.10410132033109509, 0.11848757982194513, 0.11215600995306285, 0.13548252288011264, 0.11676919299387534, 0.10628682615994733, 0.1236908663503018, 0.12291271809283555, 0.1401999359973275, 0.16198569407990637, 0.1583470274596206, 0.16406892037062204, 0.14467743325456883, 0.16236131312274005, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.14823909540611457, 0.1426064404081222, 0.14101597620439077, 0.15029430338205452, 0.15282202985716775, 0.1409878073650902, 0.13722294172227745, 0.16207881422481074, 0.1920988476495139, 0.16649639412053985, 0.16657141521439822, 0.15947424857584047, 0.1512378402346629, 0.1411999138231782, 0.16136212886459866, 0.1646616610718049, 0.15682005386063502, 0.15829163372946875, 0.15833462142207844, 0.16490505119766274, 0.15052080959025194, 0.19141987704327967, 0.16052995921902713, 0.16855947523118198, 0.1736235992239481, 0.20286463952082678, 0.17573987391192836, 0.18605873297537667, 0.1758219834446041, 0.18683568409856555, 0.21413643060278087, 0.18721673484303114, 0.17594512205278, 0.189339320247771, 0.20491962908416983, 0.05834661247747486, 0.051636645050926355, 0.06585155299632517, 0.05208192542180623, 0.05898201796580471, 0.055933964908894684, 0.07451769537934816, 0.05514353277672612, 0.06163698123440897]}, "mutation_prompt": null}
{"id": "92a4b4d4-6ff0-4e39-a042-eb5e00c04695", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.mutation_rate = 0.02\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < self.mutation_rate:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n                # Introduce a new mutation strategy: use a uniform mutation\n                elif random.random() < 0.8:\n                    self.population[np.argmin(func(self.population))] += np.random.uniform(-0.1, 0.1, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm with a novel mutation strategy and adaptive learning rate.", "configspace": "", "generation": 46, "fitness": 0.09109727725856474, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1777139996739341, 0.17577230663598697, 0.17041441953269254, 0.17189175533564105, 0.18769425485833247, 0.17632832081053784, 0.17854166733925014, 0.16585149597882065, 0.19005339702709112, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04170269026925855, 0.0489066603221896, 0.03633384076971802, 0.041028703578300574, 0.03737739963129294, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.049274512668374015, 0.028265671781150914, 0.03768548859383769, 0.03992308285267243, 0.030515468672640433, 0.08727463929921087, 0.07415344044252103, 0.09086302036266425, 0.08907902223753428, 0.08032565861792207, 0.08654706978506688, 0.08222559889516068, 0.08618080631393155, 0.0794668430174219, 0.07973913569416458, 0.08045398891465028, 0.10171882691615464, 0.06804325584971449, 0.062276416502640486, 0.052012087907368, 0.09472457566024695, 0.06091967871180781, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.10636538160839737, 0.10023743866141444, 0.09495998986401921, 0.13123694841517808, 0.12703817847418364, 0.11525305494910243, 0.11599879438801142, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.0005348144197767635, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05873497826238394, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06805072413517299, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22048463275547148, 0.20707226105550802, 0.19495588911784612, 0.20552694424756224, 0.18988871568476384, 0.19224465264238566, 0.1998807079546645, 0.1886440597424638, 0.20177820272558633, 0.053878640534073874, 0.04377341069732177, 0.04500384982744765, 0.045453603958388156, 0.04037744361846185, 0.0360249635600961, 0.07334144017181154, 0.04410861411071798, 0.05229792848072812, 0.13752783092736576, 0.12715378991881277, 0.13460009352218638, 0.14128262607245523, 0.13781251177326848, 0.13013755749087796, 0.1503312575940332, 0.14861670674699234, 0.13382417251454515, 0.17099013488783954, 0.17402315155983228, 0.1760473800192245, 0.16779352461211916, 0.18236810676621285, 0.17696877188087423, 0.1645578244463195, 0.17377774300845283, 0.1535088297207884, 0.11536703746962007, 0.10436920440812758, 0.11849014956822501, 0.1062241422511303, 0.13619860910877435, 0.12411012095548435, 0.1047405734700314, 0.11576965386386595, 0.1232992323636819, 0.1410630187122207, 0.16308313479601944, 0.15801556775491588, 0.16048397713677154, 0.15048010718848404, 0.16236042742370171, 0.15534925725147164, 0.17742005633370828, 0.18431753731706468, 0.14195011305864957, 0.14903962472387322, 0.1426064404081222, 0.14101597620439077, 0.14867951240562194, 0.1533902986061606, 0.1394025181707912, 0.14175390856222403, 0.16207881422481074, 0.23084145730366878, 0.16719707278611184, 0.16657141521439822, 0.15632954579363667, 0.15130732091400712, 0.1379698178680645, 0.16139484817187333, 0.16327640929538279, 0.1767063037014106, 0.15726226248324982, 0.1488289733261745, 0.16490498282695387, 0.15028213297923299, 0.18985097460573297, 0.16038725048398772, 0.16855947523118198, 0.17391808752236215, 0.20281757338662387, 0.1691822674340161, 0.19094915976158955, 0.17580924219731275, 0.18758444568095634, 0.2135749380374129, 0.1864989823386881, 0.17613380129153156, 0.18934288334211258, 0.19230192601335494, 0.05834557401228635, 0.05351889066056248, 0.06585155299632517, 0.051510589554602526, 0.0593516546952898, 0.056334504378134254, 0.054868774410232746, 0.0549817784093759, 0.062245079589880015]}, "mutation_prompt": null}
{"id": "66250a12-e6f5-4ece-9162-d069b76e4429", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17771015113270838, 0.1758053463981647, 0.17023645315003377, 0.17154306835689526, 0.18818139055183436, 0.17681990283591242, 0.17856111370070904, 0.16726779740051967, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04207556726031636, 0.04697087702470093, 0.036306714756563996, 0.041862171512963675, 0.03732066520661048, 0.039490777858887105, 0.0528437448134802, 0.06702432684758475, 0.05885000000036089, 0.02596330142534442, 0.032508982847686774, 0.047173722684426544, 0.02731774542678833, 0.04926774209271334, 0.05725483866555392, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.07405764095380296, 0.09090334998711569, 0.07463630204253424, 0.08032688292695478, 0.08639423096144161, 0.08233601937196522, 0.08493853211980973, 0.07927340735718225, 0.07973913569416458, 0.07581526644545722, 0.1017585080336425, 0.06766063929871147, 0.06227708511775232, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12181748543385129, 0.19308637766117165, 0.1481850439168273, 0.10222627129652573, 0.09421732086256707, 0.13123694841517808, 0.12601643877407465, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.0042239259828087405, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459806781505305, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03165693341080966, 0.055770453722678415, 0.05346788063423047, 0.05008726726802559, 0.06987013637261374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.21859353475154375, 0.19697475593165203, 0.1949444965852123, 0.2055799784281095, 0.19167657865037413, 0.20718086299128324, 0.19987913881451724, 0.19879510998330396, 0.20404478989785102, 0.051897922943738406, 0.043921194689327425, 0.04490768288943725, 0.04318053323128679, 0.04045314892761709, 0.046009660620107806, 0.07343783986403629, 0.043805414698616874, 0.05229792848072812, 0.13747837757302173, 0.12460034705241907, 0.1372168098523947, 0.1412797182171618, 0.14115194246620144, 0.12992946471676436, 0.1503424401666703, 0.14353112579929161, 0.12965056993449908, 0.17182383204663798, 0.17036139881629275, 0.1760538438252235, 0.15979132974852162, 0.18214892876424693, 0.176969753445117, 0.16603027692076744, 0.17377774300845283, 0.15364446062397308, 0.11536427207939615, 0.11081632811356412, 0.11851549116698612, 0.1123738480417984, 0.13594672465400925, 0.11671700147935338, 0.10663139043683145, 0.12375838164870023, 0.12291248234139363, 0.1410630187122207, 0.16228521858325162, 0.1583470274596206, 0.162033792745384, 0.14625083391827198, 0.16235648153942261, 0.1548862989057046, 0.1735582960702362, 0.18240255185499854, 0.14195011305864957, 0.14857179162659284, 0.1426064404081222, 0.14101597620439077, 0.15466412946090735, 0.15279227744556179, 0.13961679524412707, 0.13912440536758108, 0.16289374022253233, 0.2457134074930989, 0.16679477618376493, 0.16656824490244904, 0.15964066900415785, 0.15122820773463586, 0.14162835660026363, 0.16225510223660766, 0.16321187645926005, 0.17711856011791827, 0.15829656523808822, 0.15832686156688447, 0.1649475208436475, 0.150330135465925, 0.189356778686262, 0.16045374486843178, 0.16850387486680551, 0.17346200285136326, 0.20287929456730158, 0.17574460147619064, 0.18605873297537667, 0.17584328457004061, 0.18758199336949177, 0.2136811059433117, 0.18595080263409614, 0.1767342551952824, 0.1893326418660214, 0.20568880668582523, 0.058358589503175406, 0.05358905471133257, 0.05616012955903826, 0.05186305593955043, 0.05934830659822565, 0.05593203410477676, 0.07518762782838762, 0.05517383263887443, 0.06060784636763872]}, "mutation_prompt": null}
{"id": "c5564a95-ba93-426a-867a-4f6a87e18b3f", "solution": "import random\nimport numpy as np\n\nclass RefineHyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.ranking_weights = np.ones(self.budget)\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Improve the ranking-based selection by using a more efficient method\n            ranks = np.argsort(func(self.population)) + 1\n            self.ranking_weights = np.array([1 / rank for rank in ranks])\n            self.ranking_weights /= np.sum(self.ranking_weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += self.ranking_weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "RefineHyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and using a more efficient ranking-based selection.", "configspace": "", "generation": 48, "fitness": 0.09153588117697156, "feedback": "The algorithm RefineHyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.17024321785543528, 0.17752122140306603, 0.18816571645036906, 0.17808892770178575, 0.17186165685087418, 0.16595144186643263, 0.19000608813081876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206446523987284, 0.051142159615100935, 0.036857059324771346, 0.04115054476306701, 0.0371423820475798, 0.03948978223329991, 0.05303583551078139, 0.06702432684758475, 0.05871167914380804, 0.024574489337958805, 0.03265934571095308, 0.0481463786277756, 0.027803019802558393, 0.04927530920668688, 0.05707813225678893, 0.03768548859383769, 0.03411080062299443, 0.029897663827185728, 0.08746944629118047, 0.0741770523943478, 0.090997297082964, 0.08955048934722198, 0.08032688292695478, 0.08639386840231766, 0.08222559889516068, 0.08621135442166483, 0.07935126383599778, 0.07960361804113458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06358209371532153, 0.09472457566024695, 0.06036583728012834, 0.09992729358139563, 0.12548326824563738, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09677325632965317, 0.13123694841517808, 0.1257022772585331, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004210186878373712, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 9.999999999998899e-05, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049745275989235616, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03158966795683449, 0.055770453722678415, 0.05265380241963524, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.21237358831609376, 0.19495588911784612, 0.20567580721582157, 0.19703513095863923, 0.20816521723305437, 0.19949447777263807, 0.19647715433252233, 0.20518594417295444, 0.05004246840975779, 0.047825121516009705, 0.044052022598258245, 0.04318053323128679, 0.04056879826230886, 0.0360249635600961, 0.07327824534808858, 0.04265625341330381, 0.05229792848072812, 0.13752783092736576, 0.12529803785542282, 0.14219029494277347, 0.13923367891145577, 0.1408370734342983, 0.12430693410314941, 0.1503157028408736, 0.14861619065631115, 0.13414784551328085, 0.17165784808144213, 0.16266223523203227, 0.17489536994808919, 0.16779352461211916, 0.18212197483714299, 0.1768896371527091, 0.16543572220197278, 0.17377774300845283, 0.15375185635224675, 0.11534321591796037, 0.11086113784149854, 0.11109727802625036, 0.11235487752776496, 0.13191667838360066, 0.11676919299387534, 0.10554739552969516, 0.11076820865134873, 0.1229185550255375, 0.13880878933479912, 0.16235108707229828, 0.1583470274596206, 0.15916338068064906, 0.14924671726373906, 0.1623625199847154, 0.15076568063433038, 0.17946523644761236, 0.18277724523822958, 0.14195011305864957, 0.14849909055243715, 0.1426064404081222, 0.14101597620439077, 0.1460779086056544, 0.14498822507907716, 0.13523507932778633, 0.14114319382385088, 0.16207881422481074, 0.2510838744329549, 0.16668914199777796, 0.16200009192273523, 0.15958812633133224, 0.14995001973124744, 0.14114939506790725, 0.16139484817187333, 0.16337975010672634, 0.17669265514746235, 0.16157854035163166, 0.15803267644029473, 0.1649008493996471, 0.13909003736076608, 0.18884994564669577, 0.1608286484584811, 0.16857964833016026, 0.17325639199344567, 0.20288622849736948, 0.17427457051410455, 0.1909154081424823, 0.17413356320494733, 0.17422944549369235, 0.2135749380374129, 0.18337487480633674, 0.17594440673919165, 0.1882901230342353, 0.20568818275497436, 0.058344077551123696, 0.05533071577626103, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.052523827498396014, 0.05507013780536507, 0.05509065452218076, 0.06236750670435853]}, "mutation_prompt": null}
{"id": "4cd77ebe-a292-4f9d-b57c-701f264995a1", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17771015113270838, 0.1758053463981647, 0.17023645315003377, 0.17154306835689526, 0.18818139055183436, 0.17681990283591242, 0.17856111370070904, 0.16726779740051967, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04207556726031636, 0.04697087702470093, 0.036306714756563996, 0.041862171512963675, 0.03732066520661048, 0.039490777858887105, 0.0528437448134802, 0.06702432684758475, 0.05885000000036089, 0.02596330142534442, 0.032508982847686774, 0.047173722684426544, 0.02731774542678833, 0.04926774209271334, 0.05725483866555392, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.07405764095380296, 0.09090334998711569, 0.07463630204253424, 0.08032688292695478, 0.08639423096144161, 0.08233601937196522, 0.08493853211980973, 0.07927340735718225, 0.07973913569416458, 0.07581526644545722, 0.1017585080336425, 0.06766063929871147, 0.06227708511775232, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12181748543385129, 0.19308637766117165, 0.1481850439168273, 0.10222627129652573, 0.09421732086256707, 0.13123694841517808, 0.12601643877407465, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.0042239259828087405, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459806781505305, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03165693341080966, 0.055770453722678415, 0.05346788063423047, 0.05008726726802559, 0.06987013637261374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.21859353475154375, 0.19697475593165203, 0.1949444965852123, 0.2055799784281095, 0.19167657865037413, 0.20718086299128324, 0.19987913881451724, 0.19879510998330396, 0.20404478989785102, 0.051897922943738406, 0.043921194689327425, 0.04490768288943725, 0.04318053323128679, 0.04045314892761709, 0.046009660620107806, 0.07343783986403629, 0.043805414698616874, 0.05229792848072812, 0.13747837757302173, 0.12460034705241907, 0.1372168098523947, 0.1412797182171618, 0.14115194246620144, 0.12992946471676436, 0.1503424401666703, 0.14353112579929161, 0.12965056993449908, 0.17182383204663798, 0.17036139881629275, 0.1760538438252235, 0.15979132974852162, 0.18214892876424693, 0.176969753445117, 0.16603027692076744, 0.17377774300845283, 0.15364446062397308, 0.11536427207939615, 0.11081632811356412, 0.11851549116698612, 0.1123738480417984, 0.13594672465400925, 0.11671700147935338, 0.10663139043683145, 0.12375838164870023, 0.12291248234139363, 0.1410630187122207, 0.16228521858325162, 0.1583470274596206, 0.162033792745384, 0.14625083391827198, 0.16235648153942261, 0.1548862989057046, 0.1735582960702362, 0.18240255185499854, 0.14195011305864957, 0.14857179162659284, 0.1426064404081222, 0.14101597620439077, 0.15466412946090735, 0.15279227744556179, 0.13961679524412707, 0.13912440536758108, 0.16289374022253233, 0.2457134074930989, 0.16679477618376493, 0.16656824490244904, 0.15964066900415785, 0.15122820773463586, 0.14162835660026363, 0.16225510223660766, 0.16321187645926005, 0.17711856011791827, 0.15829656523808822, 0.15832686156688447, 0.1649475208436475, 0.150330135465925, 0.189356778686262, 0.16045374486843178, 0.16850387486680551, 0.17346200285136326, 0.20287929456730158, 0.17574460147619064, 0.18605873297537667, 0.17584328457004061, 0.18758199336949177, 0.2136811059433117, 0.18595080263409614, 0.1767342551952824, 0.1893326418660214, 0.20568880668582523, 0.058358589503175406, 0.05358905471133257, 0.05616012955903826, 0.05186305593955043, 0.05934830659822565, 0.05593203410477676, 0.07518762782838762, 0.05517383263887443, 0.06060784636763872]}, "mutation_prompt": null}
{"id": "63e47156-d8d6-43e2-996d-25083c8ee511", "solution": "import random\nimport numpy as np\nfrom collections import deque\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.selection_queue = deque()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Use a more efficient data structure for population selection\n            self.selection_queue.extend(selected)\n            if len(self.selection_queue) > self.budget:\n                self.selection_queue.popleft()\n            self.population = list(self.selection_queue)\n\n    def get_elitist(self):\n        return self.elitist\n", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and using a more efficient data structure for population selection.", "configspace": "", "generation": 50, "fitness": 0.09105858844655305, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.17030027563176575, 0.1758257927297251, 0.18814642453352537, 0.17469913998046127, 0.17907923922463254, 0.1681123847569277, 0.18998967530282407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04208195152343919, 0.05032169111163476, 0.03696714614152152, 0.041028703578300574, 0.03734632201172494, 0.03948978223329991, 0.0528437448134802, 0.06717192773980873, 0.042531761609246654, 0.025902235419872688, 0.03243453119750428, 0.0481463786277756, 0.02740633546737814, 0.04992722643948744, 0.0571489030962693, 0.03768548859383769, 0.03455906459891844, 0.02991538816000916, 0.08746944629118047, 0.07417779065959296, 0.09088824052509137, 0.0888326728599459, 0.08032688292695478, 0.07450650080877708, 0.08249810161430926, 0.08620909750186001, 0.07953108994979652, 0.06314603368328442, 0.08043703106553202, 0.10250185934945644, 0.06783755759972065, 0.06227510184226048, 0.06130150772388787, 0.09333637870097666, 0.05696654284711078, 0.09821690698750918, 0.1246737771694556, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.12836413247697365, 0.12638692377932237, 0.1368487698841222, 0.10634691883195335, 0.0043507767599104685, 9.999999999998899e-05, 0.006205422871878197, 0.004396087096785184, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.007159387613177359, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.031532644310368285, 0.055770453722678415, 0.04254219278500604, 0.05008726726802559, 0.06223263404733903, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22085163048886503, 0.21747417350210474, 0.19494350608404842, 0.20641531291293724, 0.19214370383232693, 0.20725137855453035, 0.1998807079546645, 0.19975973326807828, 0.20402934706775366, 0.054719853500688975, 0.04383740579749007, 0.043545482966593, 0.04709275521788481, 0.04044574604984119, 0.046009660620107806, 0.07287306138785365, 0.043993360971981255, 0.05229792848072812, 0.13752783092736576, 0.12737836668242164, 0.137230949868961, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.13935713092527025, 0.14141611208602134, 0.13254524832615677, 0.17084029419177782, 0.15910049595785114, 0.1760473800192245, 0.16779352461211916, 0.18213499004193912, 0.17696555062449948, 0.16591313548350284, 0.17378233039805058, 0.1532913706027682, 0.1099948280043318, 0.10021410953591314, 0.11844930066379, 0.11215520940335788, 0.13605940063865596, 0.12279260987925622, 0.10615908733946577, 0.1237427242099084, 0.12294898962630652, 0.14143981375345538, 0.16233822647361662, 0.1583470274596206, 0.1601583581414543, 0.14497570479010158, 0.16235994290792255, 0.15533346120938785, 0.1736040850799232, 0.15384279319850125, 0.14195011305864957, 0.14888843373434157, 0.1426064404081222, 0.14101597620439077, 0.15454694125834834, 0.1534529983847267, 0.1394025181707912, 0.14175390856222403, 0.14594593489043017, 0.1961762246341513, 0.16679477618376493, 0.16648163477622313, 0.1594080555631352, 0.15120231260257588, 0.13598067281925197, 0.16142094069745305, 0.1634028490223587, 0.17663072333748187, 0.15807036514080897, 0.15739646621992565, 0.16490431365791558, 0.1393020231618286, 0.19211332469291664, 0.16059869392230308, 0.16855942690827053, 0.1757522657807371, 0.20299940497711588, 0.1757397014909311, 0.19094436798338243, 0.17508876674673723, 0.18680987598606213, 0.2135449978557653, 0.1838354280976937, 0.17276960293525878, 0.18832024318355478, 0.20568880668582523, 0.05805440744896606, 0.055310757659504994, 0.06570383221588072, 0.05186305593955043, 0.05934788436755256, 0.05623859212113258, 0.07532653835131586, 0.05540413187907356, 0.06299298443352219]}, "mutation_prompt": null}
{"id": "fac0c704-a6f0-4ac8-b190-719a92c195d7", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.mutation_rate = 0.02\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < self.mutation_rate:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate.", "configspace": "", "generation": 51, "fitness": 0.09095303146244556, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1777139996739341, 0.16877102720067416, 0.170257377687277, 0.17547524974139994, 0.1863307480818125, 0.1767459575880579, 0.17855331352240722, 0.16460328226395815, 0.17750397596953316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.04091288400688353, 0.03657976032179011, 0.04105473284103778, 0.036937769203285065, 0.03660144838937718, 0.04645955382421074, 0.06694269852317214, 0.058711088734964334, 0.025979934130904825, 0.032466833554772534, 0.0481463786277756, 0.02712960174753476, 0.04925648558817397, 0.05702674525995721, 0.03696417075239278, 0.0356597240913854, 0.02319206468627122, 0.08746944629118047, 0.07244427717825253, 0.09087431849796956, 0.08275405411450387, 0.08032688292695478, 0.07190257082300977, 0.08212418707263225, 0.08620909750186001, 0.07934093922647811, 0.07973913569416458, 0.08043703106553202, 0.1018256396070144, 0.06766063929871147, 0.062276416502640486, 0.06040282667722219, 0.07168882423034284, 0.06042398914582958, 0.09734671166992925, 0.12553619411724048, 0.19302622637228872, 0.1481748168008029, 0.10470493349903331, 0.09538387577270246, 0.13123694841517808, 0.11811618358074882, 0.1368487698841222, 0.1162454551148423, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004390456316279101, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.07046261080712879, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.0016558624544074085, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058523703225685675, 0.06858859508378334, 0.045838637145036776, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.053586476202693856, 0.05008726726802559, 0.06903098315416467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.2203381885786697, 0.21138361886640156, 0.1952279718578941, 0.2055799784281095, 0.19177573925730307, 0.20724804881313108, 0.1998807079546645, 0.18570462859584835, 0.20404594720902425, 0.05105271522353727, 0.04528110478348335, 0.043383299122003005, 0.046085737212247624, 0.04044574604984119, 0.04578022755974054, 0.06931330166414607, 0.0447113189662699, 0.05229792848072812, 0.13753537957897444, 0.12800428426470334, 0.1361202375969367, 0.1412797182171618, 0.14195147756883975, 0.12829115706945227, 0.1502515180359678, 0.14861619065631115, 0.1338453581186947, 0.1708315239490923, 0.18240244779928105, 0.1760473800192245, 0.16779352461211916, 0.18201257292386785, 0.17695077020815297, 0.16591313548350284, 0.17377774300845283, 0.15228724420671536, 0.11521622264437448, 0.10603943712527764, 0.11849032669552728, 0.11112949590405352, 0.12138151588190016, 0.11524935323140395, 0.10631408111059504, 0.1237427242099084, 0.12287317566471523, 0.141007175363993, 0.16263540528289655, 0.1583470274596206, 0.1618698478499795, 0.14726355847421602, 0.1623549990745441, 0.15533346120938785, 0.17359606007559902, 0.1484371248601718, 0.14230979331036597, 0.1487844172481293, 0.1426064404081222, 0.14101597620439077, 0.15117437659058086, 0.15248125926001244, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.2218285608509254, 0.1666967312017107, 0.1663052672935108, 0.15631793331758037, 0.15116389973247735, 0.14124703061865418, 0.16136775735283537, 0.1633333793389231, 0.1765453283469378, 0.15568456102430683, 0.15833462142207844, 0.16490041117922194, 0.15032447356630596, 0.19434449657286057, 0.15849501139721356, 0.15108795656316254, 0.17326682396940052, 0.20287929456730158, 0.1692476572276832, 0.18518064146965452, 0.1759509441088608, 0.1868242185419594, 0.21426235343332, 0.18388724934162792, 0.17654227199386896, 0.17936576271413773, 0.19250513873222908, 0.05837906605397947, 0.055317793090979506, 0.06570408069813805, 0.048787125317103164, 0.059151973277758785, 0.05613381629015857, 0.07465814648778779, 0.05668589051269024, 0.06262765706342144]}, "mutation_prompt": null}
{"id": "e20ce157-2683-4b3c-9175-bce8ed92d9b9", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.adaptive_learning_rate = True\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * (self.learning_rate + 0.01 * np.random.uniform(-1, 1)), self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            if self.adaptive_learning_rate:\n                weights = np.array([func(individual) for individual in selected])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n                # Introduce a new selection strategy: use a ranking-based selection\n                if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                    ranks = np.argsort(func(self.population)) + 1\n                    weights = np.array([1 / rank for rank in ranks])\n                    weights /= np.sum(weights)\n                    new_population = []\n                    for _ in range(self.budget):\n                        r = random.random()\n                        cumulative_weight = 0\n                        for individual in selected:\n                            cumulative_weight += weights[individual]\n                            if cumulative_weight >= r:\n                                new_population.append(individual)\n                                break\n            else:\n                # Use a Gaussian distribution to generate weights for the Bloom selection strategy\n                weights = np.array([np.exp(-((func(individual) - np.mean(func(selected))) / 0.1)**2) for individual in selected])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine HyperElitistBloom by introducing a new adaptive learning rate control and using a more efficient Bloom selection strategy with a Gaussian distribution.", "configspace": "", "generation": 52, "fitness": 0.09128932676510546, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17806883574076915, 0.17574474285274733, 0.17050003074102482, 0.17734142365726602, 0.18818139055183436, 0.1832198028048777, 0.17879440933205226, 0.16285400389945115, 0.17219691711267493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.049580292509679436, 0.03687291689032879, 0.041028703578300574, 0.03588346605904624, 0.03948978223329991, 0.0528437448134802, 0.06699245160362188, 0.058714370103438385, 0.026176955396046253, 0.032344334621631554, 0.04775653583324091, 0.023336136955838138, 0.049131658773213904, 0.05706623419763568, 0.037247513599375615, 0.03992308285267243, 0.023944566372347098, 0.08348998556937837, 0.07422256160435403, 0.09087431849796956, 0.08816865542695773, 0.08028585374295139, 0.08642088130888281, 0.08222870588563713, 0.0848223424075808, 0.07945390310195255, 0.0797090366479648, 0.08022788967389749, 0.10165761364209647, 0.067662134940772, 0.062276416502640486, 0.06247839124140542, 0.09472457566024695, 0.057034870011662187, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12591128413356256, 0.1103043453878243, 0.11599925472713601, 0.0043507767599104685, 9.999999999998899e-05, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 9.999999999998899e-05, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054350388710601716, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03123997910134224, 0.055770453722678415, 0.05249534245527687, 0.05008726726802559, 0.06915933561670629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.2208164541405877, 0.20035613326724644, 0.19495588911784612, 0.2055799784281095, 0.19136806762700387, 0.19401605611055894, 0.19955812392311656, 0.18944530572776885, 0.2042246421272571, 0.05427552032242389, 0.04540757129096673, 0.04461345882049739, 0.045692754575901384, 0.03526451302701439, 0.04573456871865855, 0.07324248104694397, 0.043805414698616874, 0.04555179045768332, 0.13748051215920587, 0.12715378991881277, 0.13743502420873233, 0.1412797182171618, 0.14115194246620144, 0.12996208774968987, 0.15034268976310372, 0.14861619065631115, 0.13381193994724438, 0.17155030753271716, 0.18045464394170252, 0.1760473800192245, 0.16779352461211916, 0.18137004303597115, 0.17692575181178705, 0.16648995779776454, 0.17377774300845283, 0.15365115267908236, 0.11534321591796037, 0.10869662932348201, 0.10053223764550168, 0.109240792686368, 0.13650655992737926, 0.11690902208243292, 0.10628682615994733, 0.12399315300899727, 0.122925314094541, 0.13889274656059403, 0.16236672674390606, 0.1583470274596206, 0.15150006223998935, 0.14539399908948414, 0.16236042742370171, 0.15533346120938785, 0.17600631880317874, 0.18256782180359366, 0.132676490554828, 0.14693638408840615, 0.1426064404081222, 0.14101597620439077, 0.14705701387559167, 0.15248125926001244, 0.13765028942237623, 0.14123252360266703, 0.14594593489043017, 0.25753772323226853, 0.1668007440937589, 0.16656200504435004, 0.1596427042756502, 0.1512022767280199, 0.14226275094135565, 0.16154590380257738, 0.1634028490223587, 0.17650083581544018, 0.15894029061739057, 0.14860113925149632, 0.16490498282695387, 0.150330135465925, 0.19064688630274285, 0.15646665048956365, 0.16856715104203157, 0.1732571542459166, 0.20308263354610323, 0.17428537572846947, 0.19094915976158955, 0.1757589291934526, 0.18683568409856555, 0.2134343211819989, 0.18401098146867412, 0.17594638840760768, 0.17976516870887083, 0.20568880668582523, 0.058344077551123696, 0.05082495666374165, 0.06584714954231208, 0.05186305593955043, 0.05935135708666206, 0.055933964908894684, 0.07533690427032902, 0.056064383206254065, 0.06149480495832327]}, "mutation_prompt": null}
{"id": "8297529c-5a2a-4937-bcdd-34af179bf0f7", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.mutation_std = 0.1\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, self.mutation_std * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n", "name": "HyperElitistBloom", "description": "Refine HyperElitistBloom by introducing a new mutation strategy and adaptive learning rate.", "configspace": "", "generation": 53, "fitness": 0.09131449426694943, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1777139996739341, 0.17557756982858552, 0.17031650789502872, 0.17403843251149897, 0.18818139055183436, 0.17797441108793177, 0.1787314024672565, 0.1674467571931071, 0.1726728634138146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04213020613802476, 0.05056098020944533, 0.03685255970659074, 0.04171523650256004, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.05871571574150658, 0.025979934130904825, 0.03246112400006618, 0.0481463786277756, 0.02731774542678833, 0.04926774209271334, 0.057026951145709104, 0.03709828343845345, 0.03992308285267243, 0.030709922183562055, 0.08732981321055211, 0.07361388639915589, 0.09087431849796956, 0.08837673446492333, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08550024507519971, 0.07951710930411304, 0.07973913569416458, 0.0808051936690275, 0.10167293466287575, 0.06783755759972065, 0.062276416502640486, 0.06273073638024484, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12551356758130827, 0.19308637766117165, 0.1481748168008029, 0.10470493349903331, 0.0946340867246579, 0.13123694841517808, 0.13032761066405874, 0.1368487698841222, 0.11599925472713601, 9.999999999998899e-05, 0.004560104586776803, 0.006205422871878197, 0.004301433676476285, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055498414829882714, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03123997910134224, 0.055770453722678415, 0.05248174268068029, 0.05008726726802559, 0.06206724671489283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.20456539463999068, 0.21113022694171035, 0.19495588911784612, 0.2052260972721579, 0.19501328686649244, 0.20747386092564246, 0.1936105764787569, 0.18627838524241946, 0.1891618883721441, 0.050246182249995996, 0.04728933197456786, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.045048314669234424, 0.07326334017934732, 0.04488479734625361, 0.05229792848072812, 0.13752457453596112, 0.12718817376688296, 0.12957199825244203, 0.13943292789810713, 0.14115980858966592, 0.13013755749087796, 0.1499523359155932, 0.14840880194851003, 0.13309893344525425, 0.17062701415916692, 0.1711909052316758, 0.1760473800192245, 0.1691784401244919, 0.16167469210314356, 0.17260642672802973, 0.16572298933513452, 0.17377774300845283, 0.154740329800367, 0.11542843804423031, 0.10846129210619126, 0.11849032669552728, 0.11149028800799732, 0.13610603218022022, 0.11450171612659366, 0.1047405734700314, 0.12367622151883151, 0.12291271809283555, 0.14016628270981313, 0.1623336127477052, 0.1583470274596206, 0.1601583581414543, 0.14986898677382976, 0.15992312887638782, 0.15533346120938785, 0.17355296022836242, 0.18278282448610417, 0.14000663042741146, 0.14954142505336654, 0.14324963603216423, 0.1420303492381143, 0.1505926695859574, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.16584884187871407, 0.1667279740397265, 0.16461259049394772, 0.1596427042756502, 0.15123021465650877, 0.14115765965571814, 0.16154909434170972, 0.1633715430710252, 0.17678234564483664, 0.16140296584235891, 0.15833462142207844, 0.16490261438250486, 0.1503367304043326, 0.18947142411534623, 0.1603614140305275, 0.16855947523118198, 0.17441710956028622, 0.20299451231758825, 0.1757284206219254, 0.1909154081424823, 0.17574275880228485, 0.1867770500281285, 0.21378174436072173, 0.18382439475410084, 0.17594512205278, 0.18832532218492992, 0.20463265912767348, 0.0583443623697798, 0.055317793090979506, 0.06585155299632517, 0.049681133869572514, 0.05934830659822565, 0.055936021099644906, 0.07532575404647801, 0.05598521486904251, 0.06850360226705066]}, "mutation_prompt": null}
{"id": "2001c46c-ec0e-4315-afb9-fe296c20d63f", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.ranking_weights = [1 / i for i in range(1, self.budget + 1)]\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection with adaptive weights\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array(self.ranking_weights[:len(selected)])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine HyperElitistBloom by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and using a more efficient ranking-based selection.", "configspace": "", "generation": 54, "fitness": 0.0910702248960567, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.17000038377700788, 0.1779139243551534, 0.18824889273164247, 0.17810885076513527, 0.17856999940812623, 0.16619242720889238, 0.1726728634138146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206185514619809, 0.049590577438306305, 0.035182295607863456, 0.04096043386050385, 0.03735472475623314, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032344334621631554, 0.04639270556577646, 0.02285571191798008, 0.049318013583870335, 0.05735777060684455, 0.03768548859383769, 0.037750092575678185, 0.029939375202822305, 0.08743515481523578, 0.07415344044252103, 0.09140441932412013, 0.09208343220793902, 0.08034060395902909, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07934509056511119, 0.07973913569416458, 0.07956670900982843, 0.10171882691615464, 0.062311795368885425, 0.06236903064834698, 0.06157340582408466, 0.09333637870097666, 0.058135885286550004, 0.09992729358139563, 0.12553619411724048, 0.13816761439089864, 0.1481850439168273, 0.1021028822797061, 0.09685346092514469, 0.1332037367906549, 0.12921661399632978, 0.1368487698841222, 0.11608820357272198, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.0005632217074303947, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.01900488333945327, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.054025251479449476, 0.05008726726802559, 0.06581544731116251, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.22065144948817206, 0.21036731015454457, 0.19495588911784612, 0.2055799784281095, 0.1895623482501877, 0.20743278856782077, 0.19364818875214052, 0.19066468022708727, 0.20408032060320924, 0.05297296502805715, 0.046506153843911324, 0.044196519154055536, 0.04068080528830653, 0.040374398770089415, 0.03506361760922194, 0.0732620818499099, 0.04391930965436208, 0.0513885633343476, 0.13753621612835543, 0.12457348867321272, 0.13721967320348194, 0.1412797182171618, 0.14188755737409176, 0.12379980802453427, 0.1503441335172332, 0.146984257488613, 0.13384857391877636, 0.17213859172694446, 0.17819238428243878, 0.16302349745796052, 0.16717348522264452, 0.18160633305358387, 0.17697107003471013, 0.16877199833045564, 0.17378470867129758, 0.1537444254795748, 0.11511262918517984, 0.10542788001710868, 0.11848625909966737, 0.1123738480417984, 0.13208216658105698, 0.12236474639134376, 0.10628682615994733, 0.12369450572465868, 0.12283506619524653, 0.14002661810886619, 0.1627008050889157, 0.1583470274596206, 0.16214145999202778, 0.15069764281417242, 0.16229878357225103, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.14878183832698355, 0.1412581604582399, 0.14101597620439077, 0.1475675268614981, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.2387129425588086, 0.16679477618376493, 0.16658064233953174, 0.15964066900415785, 0.15162430823038409, 0.1401584613036101, 0.161165538820069, 0.1634028490223587, 0.17650083581544018, 0.16046325321254185, 0.15832057460437354, 0.16245937502180186, 0.150794248242614, 0.14873081581643888, 0.16045374486843178, 0.1609136852085874, 0.17379439573521993, 0.2027711617632293, 0.1691822674340161, 0.18621232399016485, 0.1759537306896516, 0.18695109452717873, 0.21385405311225436, 0.1839639045414998, 0.17520708963670006, 0.18035428936579534, 0.20568880668582523, 0.05834322328909325, 0.052679237827443104, 0.06573570054119626, 0.05175880929021204, 0.05934830659822565, 0.0550366743385905, 0.0753868898489598, 0.05490947284157277, 0.06214899796556406]}, "mutation_prompt": null}
{"id": "05c02998-b6a9-409a-bdde-bea34ee601a3", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.mutation_rate = 0.02\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < self.mutation_rate:  # 2% chance of mutation\n                # Introduce a novel mutation strategy: use a Gaussian mutation with adaptive learning rate\n                if random.random() < 0.1:\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate * (1 + np.random.uniform(-0.5, 0.5)), self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine HyperElitistBloom by introducing a novel mutation strategy and adaptive learning rate for Bloom selection.", "configspace": "", "generation": 55, "fitness": 0.09132637442332837, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1777562967681957, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18816809643435195, 0.17617413928123826, 0.17899922958364134, 0.16296330899069433, 0.1898118354082099, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04209278961366214, 0.047627841238204516, 0.03681264595519462, 0.042061231664515475, 0.03732066520661048, 0.03948978223329991, 0.045846996429934395, 0.06706428158293798, 0.058711088734964334, 0.02589920518126232, 0.032508982847686774, 0.04815581147731751, 0.027803019802558393, 0.04925648558817397, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08745196535606026, 0.07203310470270696, 0.09043916306957922, 0.08865052248763439, 0.08019119467451763, 0.08794029687566929, 0.08293319253370068, 0.07636480546107194, 0.07938314508887634, 0.07971344122867374, 0.08053272505215014, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06358790234337941, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.14813209921127768, 0.10484336151762763, 0.09685346092514469, 0.13123694841517808, 0.11863121998814696, 0.13686675176300067, 0.11620060770996388, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004278769784938907, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03213393888227367, 0.049491762982323384, 0.05295698494644707, 0.05008726726802559, 0.06580156607221344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22097054741888378, 0.19526652501720454, 0.18245413640592356, 0.20547022936627868, 0.19201681777065027, 0.20733700469087168, 0.1998614213500992, 0.20028615689974738, 0.19778525111428835, 0.052391770020074, 0.046940406309353255, 0.04406253352378775, 0.0477584988288019, 0.04044771488905974, 0.046009660620107806, 0.07325409256479509, 0.04369716690194658, 0.05229792848072812, 0.1375314147351968, 0.12733507935617383, 0.141957268237352, 0.1412797182171618, 0.141153092566061, 0.13003165139673967, 0.15034268976310372, 0.14861619065631115, 0.1303195848832076, 0.17107009002384077, 0.18045757612539515, 0.1760473800192245, 0.16778648112937478, 0.1821496595795835, 0.1769617280414485, 0.16283947478962968, 0.17377774300845283, 0.15372359794415602, 0.11475582256048378, 0.1044314902024509, 0.11847240072147602, 0.11239684978419939, 0.12169632906499628, 0.11848895106538293, 0.10628682615994733, 0.1238005154712366, 0.1229402034437238, 0.14054870989722745, 0.16230881515792495, 0.1583470274596206, 0.1601172048227525, 0.14570949693790736, 0.1623602756842718, 0.15533346120938785, 0.17416994474275072, 0.18169522496422652, 0.14195011305864957, 0.15089034664478318, 0.14127099752922512, 0.13854128525111176, 0.1527927475979579, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.20576800535819095, 0.16679477618376493, 0.16649087670775353, 0.15963967012532032, 0.15120231260257588, 0.1412054944930371, 0.16218504168344028, 0.16386253545014295, 0.17688602086743854, 0.15781248125656278, 0.15833462142207844, 0.16491162903812495, 0.12741321641587144, 0.14894379253567536, 0.16045678846385858, 0.16855947523118198, 0.17337526414428595, 0.20279173975696052, 0.17574207974604128, 0.19090649449499175, 0.17551696537670414, 0.18743278559754228, 0.21371525835515326, 0.18361143692527226, 0.17594440673919165, 0.18935535555206828, 0.20568880668582523, 0.058086164089822145, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05936472065717702, 0.05622087821688748, 0.07534740761542069, 0.057156319973188374, 0.06075896415374682]}, "mutation_prompt": null}
{"id": "ee7620e3-d04c-49ab-a9b7-3ca2703ce299", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.mutation_rate = 0.02\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < self.mutation_rate:  \n                # Introduce a new mutation strategy: use a Gaussian mutation\n                self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n", "name": "HyperElitistBloom", "description": "Refine HyperElitistBloom by introducing a novel mutation strategy and improving Bloom selection with adaptive learning rate.", "configspace": "", "generation": 56, "fitness": 0.09094979728276303, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17771462502640756, 0.17579018379391598, 0.17023363657449686, 0.168056570231231, 0.18794922129133917, 0.17795622752883955, 0.17085325369379822, 0.16230913579365092, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03850888547683318, 0.0489543750734831, 0.03691614148703426, 0.042870457519995964, 0.03732935793638548, 0.03948978223329991, 0.0528437448134802, 0.06777571786927639, 0.058713647655415535, 0.023530397871567188, 0.030380889865939564, 0.0481463786277756, 0.027803019802558393, 0.049345418005552144, 0.05702674525995721, 0.03768548859383769, 0.03455906459891844, 0.023257571903879448, 0.0874600253232184, 0.07401390259362739, 0.0913618631435602, 0.08822245961465414, 0.07865661766151877, 0.08637600499406761, 0.0822039444001339, 0.08618080631393155, 0.07937880859281154, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06766494137001378, 0.062276416502640486, 0.06130150772388787, 0.09333637870097666, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19265088620594473, 0.1481850439168273, 0.10375357913913519, 0.09537675572610993, 0.13129099978780268, 0.12728938825334812, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004414527902949161, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.002367286420350001, 0.025157232330730417, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041665374654375587, 0.06858859508378334, 0.03324407680556851, 0.06941906045599022, 0.03123997910134224, 0.055770453722678415, 0.05345812507839054, 0.05008726726802559, 0.06991332163552766, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22088382880568502, 0.21678690984361892, 0.19495588911784612, 0.20559978062864126, 0.19059035637068478, 0.20724700933075846, 0.19987913881451724, 0.20513677051174928, 0.20408032060320924, 0.05162790583725252, 0.044612203617396706, 0.046660913874614796, 0.043183199593486266, 0.04044574604984119, 0.046009660620107806, 0.06246167282645254, 0.043967080862634456, 0.04555179045768332, 0.13752457453596112, 0.1273795545501043, 0.12961292506144784, 0.1412797182171618, 0.14115194246620144, 0.1301713557447809, 0.13899875119426564, 0.14174959469077497, 0.1338453581186947, 0.17061781769841122, 0.17592373102568637, 0.16801247542594644, 0.16779352461211916, 0.1821496595795835, 0.1769656323315676, 0.1660707906676191, 0.17378565920212474, 0.1537967338590852, 0.11520496936938651, 0.10457938727749894, 0.11846062652598688, 0.10978923820566577, 0.13603533412206503, 0.12368423851978838, 0.10628682615994733, 0.1237427242099084, 0.12287317566471523, 0.1409049730381483, 0.16234421955402245, 0.1583470274596206, 0.1601583581414543, 0.1488046943556246, 0.1623587636370979, 0.1548892494132006, 0.1475914170881848, 0.18277724523822958, 0.14195011305864957, 0.14795008101654183, 0.1426064404081222, 0.14101597620439077, 0.1436063423499614, 0.15278421981377122, 0.14188813576772374, 0.13912440536758108, 0.16207881422481074, 0.1869947986265884, 0.16679102604569307, 0.1665788252897319, 0.1564830684005778, 0.15120231260257588, 0.14119420704725782, 0.16137925361248528, 0.163275219786864, 0.1766868730014548, 0.15827627759108198, 0.15833462142207844, 0.16490498282695387, 0.15038463803816937, 0.18917800665125528, 0.15844722603016248, 0.16855947523118198, 0.17304003740901075, 0.19349885817189993, 0.1691937585508485, 0.19091607213517703, 0.17591594541531208, 0.18683568409856555, 0.21357616369650667, 0.1848995898342497, 0.17593555307310105, 0.18934997740686232, 0.20568880668582523, 0.05840868447507186, 0.05534466097195623, 0.06585155299632517, 0.05210165520002097, 0.059310318145447294, 0.05634626847443358, 0.07561273052302497, 0.05505648980214084, 0.061701202385162524]}, "mutation_prompt": null}
{"id": "92018075-a678-4886-a87f-606daf5a78ac", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.selection_method = 'weighted'\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                self.learning_rate *= 0.9\n            # Apply the selected selection method\n            if self.selection_method == 'weighted':\n                weights = np.array([func(individual) for individual in selected])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            elif self.selection_method == 'ranking-based':\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and using a more efficient selection method.", "configspace": "", "generation": 57, "fitness": 0.0911978414831492, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17773779622009256, 0.1757369055399346, 0.170257377687277, 0.17186421010678443, 0.1863439546602863, 0.17556342288633164, 0.17856999940812623, 0.16306941583992174, 0.19047408852527015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042114201592669764, 0.049614305265432646, 0.03519183875666643, 0.04118624670985516, 0.03732066520661048, 0.036416944450789246, 0.055886904767112555, 0.0669775361484708, 0.05882522257405032, 0.025979934130904825, 0.032508982847686774, 0.04745631067285394, 0.027803019802558393, 0.04926774209271334, 0.03041806664101898, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.07376066393960268, 0.09087431849796956, 0.08870350072522759, 0.08032688292695478, 0.08643070012582688, 0.08204642703968967, 0.07627735402932745, 0.0792513892196044, 0.07973913569416458, 0.08043703106553202, 0.09136464603211936, 0.06783755759972065, 0.06013563800813648, 0.06135345573490125, 0.09472457566024695, 0.057642272887816204, 0.08578809751979444, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10382494706514067, 0.09692775686932853, 0.12916349019839635, 0.12643833477874178, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.0006951790486009468, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05049950441034512, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05409920196621987, 0.05008726726802559, 0.06215922884086744, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.20802076267484637, 0.19485815949177931, 0.20553928319377412, 0.1907501340654627, 0.204532052694121, 0.1998807079546645, 0.17599350674294734, 0.20408032060320924, 0.04928533030722282, 0.04747891989974451, 0.04487770948862546, 0.04334087119565355, 0.040183883779326024, 0.04578022755974054, 0.07326334017934732, 0.04476409393042302, 0.05229792848072812, 0.1374198807824203, 0.127384080613695, 0.12989492751744292, 0.14106301975521696, 0.14113736871964577, 0.1277340328192932, 0.15034114056805792, 0.14862385102852693, 0.13347771767297345, 0.17182146956931754, 0.17466359791915542, 0.1760473800192245, 0.16778648112937478, 0.18232752444569333, 0.172440987240417, 0.1658458293599131, 0.17377774300845283, 0.15353859559481875, 0.11038379416362509, 0.10225224388019083, 0.11759074230424216, 0.11290069397758018, 0.13624087758089976, 0.11675921261929711, 0.10628682615994733, 0.1237427242099084, 0.12296353185054032, 0.14158046878749808, 0.1623737315398356, 0.1583470274596206, 0.16077215347061102, 0.1463847336936488, 0.15826605158622842, 0.15076568063433038, 0.1774127918131344, 0.18257468343305838, 0.1339299172615045, 0.14893814699927277, 0.14006577975982915, 0.13867913747222793, 0.14815731205974147, 0.14392453361912516, 0.14096434603863706, 0.13844506600239603, 0.16207881422481074, 0.2638245920120609, 0.16679477618376493, 0.16657141521439822, 0.15963998753348774, 0.15014477048554187, 0.1412535982639641, 0.16156869391972162, 0.1634028490223587, 0.17650083581544018, 0.15771809994986596, 0.15830641076816487, 0.16069952020177447, 0.15052256635556782, 0.14870682596182816, 0.14755148998027634, 0.16855947523118198, 0.17495970043104647, 0.2028812417861957, 0.1757397014909311, 0.1909077052966458, 0.17745239191491602, 0.187747504474702, 0.21349476051877814, 0.18864826483845176, 0.17594512205278, 0.1893115607523953, 0.20568880668582523, 0.058494864031678806, 0.055317793090979506, 0.06584714954231208, 0.051880250174084486, 0.05933118969101192, 0.05540450518062101, 0.07466396896264016, 0.05165639452473847, 0.06662310102515001]}, "mutation_prompt": null}
{"id": "45b73bac-4e7c-41f3-a7f4-4efb8d8e6467", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.mutation_probability = 0.02\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < self.mutation_probability:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                if random.random() < 0.1:\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n", "name": "HyperElitistBloom", "description": "Refine HyperElitistBloom by introducing a new mutation strategy and improving Bloom selection with adaptive learning rate.", "configspace": "", "generation": 58, "fitness": 0.0910777187399649, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1777139996739341, 0.1736207151917477, 0.17027440536431526, 0.17692251844370055, 0.18818139055183436, 0.17493524841375385, 0.17908885887688053, 0.16277972856745215, 0.18917031388150685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.05035026233328521, 0.036568599222907894, 0.04100164522081573, 0.03732066520661048, 0.039152308156773175, 0.0528437448134802, 0.06690794679795276, 0.058711088734964334, 0.025979934130904825, 0.03243453119750428, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0394748188767482, 0.029763200517845312, 0.08555244707415655, 0.07417919764529779, 0.09278388859262054, 0.09190440677554923, 0.08028585374295139, 0.08639406582822062, 0.07932241111852834, 0.08620909750186001, 0.07934013482391489, 0.07973913569416458, 0.0807030421647561, 0.10171882691615464, 0.06783755759972065, 0.06058472670551984, 0.06249660867121454, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12551356758130827, 0.19308637766117165, 0.14820736509634047, 0.10375357913913519, 0.09643669506305397, 0.13028795135711957, 0.12457361077295859, 0.1365379932092946, 0.10634645849282875, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004385726460653827, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.07024669267770423, 9.999999999998899e-05, 0.011988543793833517, 0.01885987821187518, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05660277902732125, 0.06858859508378334, 0.04513743476793097, 0.06941906045599022, 0.032530568194916176, 0.054782067011964086, 0.05295698494644707, 0.05008726726802559, 0.06737699324621738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.2004419307412686, 0.1952950883393556, 0.1937167229120742, 0.20659584244972917, 0.1921949694028494, 0.20737705433902776, 0.1998807079546645, 0.17909109466266693, 0.20205923757463784, 0.05258575531269161, 0.04255978933341231, 0.034598150974878394, 0.047497372208598065, 0.04039198851080206, 0.0360249635600961, 0.07469622738659587, 0.043993360971981255, 0.0470398816854779, 0.13753151896216465, 0.12501121485672972, 0.13609959205370692, 0.14106301975521696, 0.1396651320843173, 0.130119747531262, 0.15034092413924993, 0.14863494561898183, 0.13288936557368147, 0.16581136048863043, 0.1660176101457328, 0.1760396785200794, 0.16779352461211916, 0.1821496595795835, 0.1764016352755864, 0.16588338777822742, 0.17377774300845283, 0.15407484133705007, 0.11536557581803175, 0.1051956355329523, 0.11032966666291888, 0.11484996396156699, 0.12143706749174199, 0.12316028738890095, 0.10514160804565564, 0.12374064570758092, 0.12291947131959391, 0.1410630187122207, 0.16232952038771764, 0.15833027656110388, 0.16201170715632884, 0.14517257615977908, 0.1623531452136847, 0.15533346120938785, 0.1717951085611601, 0.18277724523822958, 0.14195011305864957, 0.1469464473955, 0.14127099752922512, 0.14101597620439077, 0.1464043019169109, 0.14573090311559722, 0.14096434603863706, 0.14080350313345824, 0.16207881422481074, 0.23480070777283568, 0.16668914199777796, 0.16657086548141908, 0.15968184386191564, 0.15124547107903707, 0.14163513209922785, 0.16394727501010364, 0.1634028490223587, 0.17188289010698699, 0.158061590204588, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.14870682596182816, 0.16045374486843178, 0.16855947523118198, 0.1774740823980936, 0.19489617678713755, 0.17578817229198507, 0.19094915976158955, 0.17569815146363743, 0.18683568409856555, 0.2140411547529919, 0.1840879675077014, 0.17594512205278, 0.18968403639429876, 0.20506156430526956, 0.05836830281658989, 0.05532508699833638, 0.06585155299632517, 0.05181394021066155, 0.05937121515064503, 0.055906688646990776, 0.07532529613519179, 0.04647546763859156, 0.061197810502221395]}, "mutation_prompt": null}
{"id": "a31086d1-c88a-40af-8c4b-77b59f6135f3", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.elitist_preservation = 0.2\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * self.elitist_preservation))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                if random.random() < 0.1:\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            # Preserve the elitist in the new population\n            if self.elitist is not None and random.random() < self.elitist_preservation:\n                new_population.append(self.elitist)\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and incorporating elitist preservation.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'HyperElitistBloom' object has no attribute 'elitist_preservation'\").", "error": "AttributeError(\"'HyperElitistBloom' object has no attribute 'elitist_preservation'\")", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {}, "mutation_prompt": null}
{"id": "22d4a51f-5504-4bb6-9727-8a6f2eb540f2", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.ranking_based_selection = False\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use ranking-based selection\n            if random.random() < 0.01 and not self.ranking_based_selection:  # 1% chance of using ranking-based selection\n                self.ranking_based_selection = True\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            # Apply ranking-based selection\n            if self.ranking_based_selection:\n                self.population = new_population\n            else:\n                self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and ranking-based selection.", "configspace": "", "generation": 60, "fitness": 0.0913443766824494, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17751383426222112, 0.17557491019851246, 0.17004140559040648, 0.1707454091561592, 0.18817629502421807, 0.17519995631970853, 0.17178593786209206, 0.1634791726508802, 0.1887222278127032, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04226250341349547, 0.05263509108652564, 0.036793727226992035, 0.041036854250431465, 0.037321429769791026, 0.03948978223329991, 0.05342816985004195, 0.06702432684758475, 0.05872028780020677, 0.026023908493882475, 0.03251731107034106, 0.0481463786277756, 0.027803019802558393, 0.04908819008595111, 0.05759805798461637, 0.03696417075239278, 0.0394748188767482, 0.02991774574580819, 0.08768615542519931, 0.07406037798593534, 0.09238936954934851, 0.0828622531777683, 0.08032688292695478, 0.08619977197899076, 0.07931849877960517, 0.08608600190547555, 0.07512727994461799, 0.07973913569416458, 0.07581526644545722, 0.10173009247058673, 0.06783755759972065, 0.06228370867093724, 0.06201350942145767, 0.0825871874724704, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481672364901624, 0.10471519865355927, 0.09676040037445877, 0.12739676093154506, 0.12706068350938782, 0.1368487698841222, 0.11359790503812273, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004272012848331563, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.0705674496676586, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829496978534421, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.054782067011964086, 0.054781310620771406, 0.04799109494143394, 0.06601897420279834, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.21875860970521133, 0.2113704492353191, 0.1941629029825589, 0.17272677639185863, 0.19646936494821599, 0.20724700933075846, 0.19743419379848715, 0.20210162678492982, 0.20442575904466498, 0.05001390496924141, 0.04603733423259726, 0.04502835296401886, 0.04450605043061917, 0.04095863467463223, 0.045028531636119085, 0.07354942498420314, 0.04462431142069523, 0.05229792848072812, 0.1375293074613555, 0.1271728505906785, 0.13731408092454989, 0.14119709029028749, 0.14115194246620144, 0.13013755749087796, 0.1506351167145964, 0.14861619065631115, 0.1338453581186947, 0.1708915050959373, 0.1645209443080088, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769617280414485, 0.1658577637835249, 0.17377774300845283, 0.15453284970415715, 0.11557527515654564, 0.10457569039001269, 0.11848942889509084, 0.11277381687319177, 0.13618959588353208, 0.11676919299387534, 0.10628682615994733, 0.11264492677252513, 0.12291623673243479, 0.14035052248229418, 0.1640336122116829, 0.1583470274596206, 0.16016627591066868, 0.15086521353085136, 0.16236042742370171, 0.15533346120938785, 0.17375649246962133, 0.18277724523822958, 0.13975188906562597, 0.14902764005331337, 0.14172560018676317, 0.14101597620439077, 0.14107723659695492, 0.15278421981377122, 0.14096434603863706, 0.13962066274336626, 0.16207881422481074, 0.18501130622156814, 0.16669750549878115, 0.16457483335966294, 0.1596427042756502, 0.15144161514623233, 0.14221966498090732, 0.1629480572215969, 0.16327640929538279, 0.1766965171721413, 0.1604070532257199, 0.1583218125051784, 0.16023900519351375, 0.1505366571257336, 0.18874466905310217, 0.16045335780951975, 0.16855947523118198, 0.17341877496762714, 0.2029644820771621, 0.17428430283350227, 0.19086916339539295, 0.17594837936843655, 0.18683568409856555, 0.2135933616344181, 0.18381764963874925, 0.17596209792914597, 0.18994256371387752, 0.20568880668582523, 0.058025873876898726, 0.055317793090979506, 0.0561588201637232, 0.05186305593955043, 0.05898201796580471, 0.05598619371035585, 0.07532925811715907, 0.05741463450806028, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "c1a616e5-00af-4c39-b77e-687c98c937c7", "solution": "import random\nimport numpy as np\n\nclass RefineHyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.hybrid_selection = False\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            # Hybrid selection strategy: use a combination of weighted and ranking-based selection\n            if random.random() < 0.05:  # 5% chance of using hybrid selection\n                weights = np.array([func(individual) for individual in selected])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n                for individual in new_population:\n                    ranks = np.argsort(func(self.population)) + 1\n                    weights = np.array([1 / rank for rank in ranks])\n                    weights /= np.sum(weights)\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.remove(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# Example usage:\nrefine_hyper_elitist_bloom = RefineHyperElitistBloom(100, 10)\ndef func(x):\n    return np.sum(x**2)\nrefine_hyper_elitist_bloom(func)\nprint(refine_hyper_elitist_bloom.get_elitist())", "name": "RefineHyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and incorporating a hybrid selection strategy.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('arrays used as indices must be of integer (or boolean) type').", "error": "IndexError('arrays used as indices must be of integer (or boolean) type')", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {}, "mutation_prompt": null}
{"id": "02999348-106d-450e-8d0e-e86046f8101f", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.mutation_std = 0.1\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                self.population[np.argmin(func(self.population))] = best + np.random.normal(0, self.mutation_std * self.learning_rate, self.dim)\n                self.learning_rate *= 0.9\n                self.mutation_std *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# ```", "name": "HyperElitistBloom", "description": "Refine Hyper-Elitist Bloom algorithm with adaptive learning rate and Gaussian mutation.", "configspace": "", "generation": 62, "fitness": 0.09135276125144305, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17778740528171966, 0.17321434221890997, 0.17028797547519003, 0.17149714747426936, 0.18815971865100767, 0.17619166600871305, 0.17856999940812623, 0.16519929239468545, 0.1887222278127032, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04170621477549108, 0.049087723365350944, 0.03669869478526766, 0.04186152292943057, 0.03732066520661048, 0.03964319608703759, 0.0528437448134802, 0.0670828315188422, 0.05885174156912398, 0.02357762905686067, 0.03243453119750428, 0.04801009187655525, 0.027803019802558393, 0.051048744074456254, 0.03076745723712271, 0.03696417075239278, 0.03996483017867136, 0.03004603533316108, 0.08745797583852855, 0.07425037172642168, 0.09087802953728297, 0.08911163137552958, 0.08032688292695478, 0.08636246929659774, 0.08222559889516068, 0.08552422009179095, 0.0793547483012288, 0.07973913569416458, 0.0804956958511841, 0.10171882691615464, 0.06785247726225097, 0.062276416502640486, 0.059383070115923364, 0.07449170232560443, 0.061028138297436585, 0.09996960121716636, 0.1246737771694556, 0.19308637766117165, 0.1482199795790775, 0.10471519865355927, 0.0968406049699504, 0.12834786763439499, 0.13097520515706607, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.00431500385749628, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.0016558624544074085, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614200857575835, 0.06858859508378334, 0.045538966200598274, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06543174925501993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.20464781785573138, 0.19495588911784612, 0.2055799784281095, 0.19233024822612343, 0.2072123777987127, 0.19989826359347718, 0.18016838118226786, 0.19793229844209093, 0.05543799350341616, 0.04656100678691455, 0.044032625517211654, 0.04646450008214709, 0.040172228167739354, 0.0360249635600961, 0.0745104827046218, 0.044112815068090616, 0.05229792848072812, 0.13752783092736576, 0.12812143991418856, 0.14233274058817824, 0.1412797182171618, 0.1388745825109612, 0.1299562862355278, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.1717852697684189, 0.17012122942334407, 0.1760473800192245, 0.16779352461211916, 0.1816468767217051, 0.17695870551462944, 0.16544628533509642, 0.17377774300845283, 0.1540904995841318, 0.11446719336035605, 0.10072234421203408, 0.11849244986450025, 0.11378151095810207, 0.13624168822456795, 0.116777567730464, 0.10680681279503568, 0.12368777073108927, 0.12291623673243479, 0.13974788276578898, 0.14869642390287185, 0.15834927211433392, 0.1601172048227525, 0.14880212591555575, 0.16235631549664065, 0.15533346120938785, 0.17355612515906882, 0.18239878922290453, 0.14195011305864957, 0.14940053068668513, 0.14172560018676317, 0.14101597620439077, 0.1531160640746193, 0.15282202985716775, 0.14096434603863706, 0.1420275119813792, 0.14372502813979937, 0.2620415586219663, 0.16695879228019161, 0.16657545208164415, 0.1596361989496865, 0.15067055131231755, 0.14135584232494203, 0.16114309168651486, 0.16333831618623573, 0.17379766059861157, 0.15806236153087705, 0.15830405541393977, 0.16490498282695387, 0.150330135465925, 0.18835192010476165, 0.16008983488914275, 0.15281676873710515, 0.17340645427797663, 0.19496764483646567, 0.17578252623828083, 0.19095013359400792, 0.17542572287172276, 0.1868361056927541, 0.19309325607022765, 0.1835484316348831, 0.17623219384545996, 0.18835391456800366, 0.20568880668582523, 0.05840250970751548, 0.055325004966297664, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05499326592420872, 0.06109951536378522]}, "mutation_prompt": null}
{"id": "aa81487f-5030-44a3-b282-165b38bfb536", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17771015113270838, 0.1758053463981647, 0.17023645315003377, 0.17154306835689526, 0.18818139055183436, 0.17681990283591242, 0.17856111370070904, 0.16726779740051967, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04207556726031636, 0.04697087702470093, 0.036306714756563996, 0.041862171512963675, 0.03732066520661048, 0.039490777858887105, 0.0528437448134802, 0.06702432684758475, 0.05885000000036089, 0.02596330142534442, 0.032508982847686774, 0.047173722684426544, 0.02731774542678833, 0.04926774209271334, 0.05725483866555392, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.07405764095380296, 0.09090334998711569, 0.07463630204253424, 0.08032688292695478, 0.08639423096144161, 0.08233601937196522, 0.08493853211980973, 0.07927340735718225, 0.07973913569416458, 0.07581526644545722, 0.1017585080336425, 0.06766063929871147, 0.06227708511775232, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12181748543385129, 0.19308637766117165, 0.1481850439168273, 0.10222627129652573, 0.09421732086256707, 0.13123694841517808, 0.12601643877407465, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.0042239259828087405, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459806781505305, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03165693341080966, 0.055770453722678415, 0.05346788063423047, 0.05008726726802559, 0.06987013637261374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.21859353475154375, 0.19697475593165203, 0.1949444965852123, 0.2055799784281095, 0.19167657865037413, 0.20718086299128324, 0.19987913881451724, 0.19879510998330396, 0.20404478989785102, 0.051897922943738406, 0.043921194689327425, 0.04490768288943725, 0.04318053323128679, 0.04045314892761709, 0.046009660620107806, 0.07343783986403629, 0.043805414698616874, 0.05229792848072812, 0.13747837757302173, 0.12460034705241907, 0.1372168098523947, 0.1412797182171618, 0.14115194246620144, 0.12992946471676436, 0.1503424401666703, 0.14353112579929161, 0.12965056993449908, 0.17182383204663798, 0.17036139881629275, 0.1760538438252235, 0.15979132974852162, 0.18214892876424693, 0.176969753445117, 0.16603027692076744, 0.17377774300845283, 0.15364446062397308, 0.11536427207939615, 0.11081632811356412, 0.11851549116698612, 0.1123738480417984, 0.13594672465400925, 0.11671700147935338, 0.10663139043683145, 0.12375838164870023, 0.12291248234139363, 0.1410630187122207, 0.16228521858325162, 0.1583470274596206, 0.162033792745384, 0.14625083391827198, 0.16235648153942261, 0.1548862989057046, 0.1735582960702362, 0.18240255185499854, 0.14195011305864957, 0.14857179162659284, 0.1426064404081222, 0.14101597620439077, 0.15466412946090735, 0.15279227744556179, 0.13961679524412707, 0.13912440536758108, 0.16289374022253233, 0.2457134074930989, 0.16679477618376493, 0.16656824490244904, 0.15964066900415785, 0.15122820773463586, 0.14162835660026363, 0.16225510223660766, 0.16321187645926005, 0.17711856011791827, 0.15829656523808822, 0.15832686156688447, 0.1649475208436475, 0.150330135465925, 0.189356778686262, 0.16045374486843178, 0.16850387486680551, 0.17346200285136326, 0.20287929456730158, 0.17574460147619064, 0.18605873297537667, 0.17584328457004061, 0.18758199336949177, 0.2136811059433117, 0.18595080263409614, 0.1767342551952824, 0.1893326418660214, 0.20568880668582523, 0.058358589503175406, 0.05358905471133257, 0.05616012955903826, 0.05186305593955043, 0.05934830659822565, 0.05593203410477676, 0.07518762782838762, 0.05517383263887443, 0.06060784636763872]}, "mutation_prompt": null}
{"id": "f65e02fb-d5d0-4b4b-b691-294f9d24fd20", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.mutation_std = 0.1\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                self.population[np.argmin(func(self.population))] = best + np.random.normal(0, self.mutation_std * self.learning_rate, self.dim)\n                self.learning_rate *= 0.9\n                self.mutation_std *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm with adaptive learning rate and Gaussian mutation.", "configspace": "", "generation": 64, "fitness": 0.09100235595004828, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1777637555236501, 0.17557542119112168, 0.17026425253143895, 0.17755156939409245, 0.1877268743900803, 0.17912282763906073, 0.17856999940812623, 0.16464384920207487, 0.19487435248894558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04170755201259002, 0.05388668239562033, 0.03603788234210792, 0.041028703578300574, 0.03727617893008062, 0.03948978223329991, 0.052845626047516414, 0.06692386912024417, 0.058711088734964334, 0.025902235419872688, 0.031913479167312686, 0.03737793615862761, 0.027803019802558393, 0.04926774209271334, 0.057328814905206804, 0.03702459196209018, 0.03992308285267243, 0.02323933788364807, 0.08803261290712694, 0.07085937728242375, 0.0912747752591837, 0.08847454044208802, 0.08032688292695478, 0.08625423139007815, 0.08222559889516068, 0.08620909750186001, 0.07936374890414788, 0.0797090366479648, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.06207922502713714, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12546064170970495, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12451772720272403, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.003689195106263865, 0.004243239559944989, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008081236604151831, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.01900488333945327, 0.011860097762603106, 0.0016558624544074085, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.02982524463482006, 0.06941906045599022, 0.03158966795683449, 0.055770453722678415, 0.05391703153419036, 0.035064393738538646, 0.06598833519465408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.2208227223723337, 0.20396067731831868, 0.19568093388116825, 0.20551828808175698, 0.19067206419729832, 0.20724700933075846, 0.19989349652890132, 0.18728979323064399, 0.2047594594109492, 0.056406537732526685, 0.04566659907737847, 0.04445743377343514, 0.03790200405761701, 0.04039198851080206, 0.046009660620107806, 0.07324129669723678, 0.04477789554066369, 0.05229792848072812, 0.13752783092736576, 0.1274143708244998, 0.1401970686689492, 0.13990371955733372, 0.14115194246620144, 0.13003165139673967, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.1718455380080719, 0.1719687579404594, 0.16814906059237933, 0.16779352461211916, 0.1821401957956349, 0.17697572046333676, 0.16593058553038287, 0.17377774300845283, 0.15368960678424193, 0.11037792380926836, 0.10431587618201665, 0.11109327062771956, 0.11243898459233592, 0.13632081563897813, 0.11676792969343475, 0.10628682615994733, 0.1237427242099084, 0.12291940134109969, 0.1410630187122207, 0.16246189889941687, 0.1583470274596206, 0.1601583581414543, 0.14786407737719343, 0.1622768814730844, 0.15430793788199848, 0.17362879228181283, 0.18277724523822958, 0.13975188906562597, 0.14793812154301444, 0.1426064404081222, 0.14101597620439077, 0.14805532049860504, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18811657872890808, 0.16679477618376493, 0.16456292118901128, 0.1585214264271655, 0.15141587258577416, 0.1404966926596748, 0.16169964079022392, 0.16420438059048448, 0.17673054778264485, 0.1589755431968327, 0.15833462142207844, 0.16435610943379564, 0.150330135465925, 0.15225847331280817, 0.16045374486843178, 0.168559372571916, 0.17307776779716855, 0.20256675286820747, 0.17572580501549528, 0.18647104137035253, 0.17568690548417198, 0.18762735398584718, 0.190886696363319, 0.18382439475410084, 0.17594512205278, 0.18931009095364848, 0.20538567531272423, 0.058295623846821076, 0.05531785659017274, 0.06584714954231208, 0.05191375383566288, 0.05912710412889899, 0.056227616505676314, 0.07515961808646776, 0.054895480446547795, 0.06276777507690223]}, "mutation_prompt": null}
{"id": "13579de4-936f-4d73-bf78-76de9ddbfeb0", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.mutation_probability = 0.02\n        self.mutation_step = 0.1\n        self.mutation_count = 0\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < self.mutation_probability:\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                self.learning_rate *= 0.9\n                self.mutation_count += 1\n                if self.mutation_count % self.mutation_step == 0:\n                    self.learning_rate *= 0.9\n                    self.mutation_probability *= 1.1\n                if self.mutation_probability > 0.1:\n                    self.mutation_probability = 0.1\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and increasing the mutation probability.", "configspace": "", "generation": 65, "fitness": 0.09097552036023913, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17771243807022508, 0.17574268159889084, 0.1708216591489078, 0.17001153224292598, 0.18818139055183436, 0.176294858496011, 0.1816971427694356, 0.16333333436324027, 0.1917475682301325, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04204537383821538, 0.04709174064411059, 0.0324036524636786, 0.04175561554304841, 0.03731730824551327, 0.03758931019537359, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025902235419872688, 0.0325801940018684, 0.04799115299610435, 0.02712960174753476, 0.05051596182869511, 0.05801592782886367, 0.029591223162503066, 0.03821147307613426, 0.03077384899497615, 0.0873504871568841, 0.0741770523943478, 0.09200546116137487, 0.0901478647803049, 0.08032595147549759, 0.08639400372017847, 0.0822839067376977, 0.08618080631393155, 0.0791946862611318, 0.07973913569416458, 0.08043703106553202, 0.10175878423588436, 0.06769503856843817, 0.062276416502640486, 0.06131729778311201, 0.09333637870097666, 0.06042398914582958, 0.09992729358139563, 0.12553619411724048, 0.13883319177206033, 0.1481850439168273, 0.10471519865355927, 0.09597725170615634, 0.13290693086530014, 0.12791837068346212, 0.13720798657895572, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004191492687093179, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.010809369510698108, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05708262269645126, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.032076915235807246, 0.055770453722678415, 0.054311389071262095, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22079614084734667, 0.20744243994180755, 0.1944069795717589, 0.2058781116112175, 0.19144183420659266, 0.20469567960268953, 0.19364818875214052, 0.19815793904471246, 0.19607309604784806, 0.049680797386169595, 0.04252200334286549, 0.04617835012641358, 0.04316834883154719, 0.04044574604984119, 0.046009660620107806, 0.07433583616886497, 0.04394102471516148, 0.05229792848072812, 0.13752783092736576, 0.1273795545501043, 0.13724204246156602, 0.1412797182171618, 0.14119242525620834, 0.1299562862355278, 0.1396792457305166, 0.1469256390681687, 0.1324586088225833, 0.17182146956931754, 0.16339626991492917, 0.1760473800192245, 0.16779352461211916, 0.18210184854866784, 0.17701089288577698, 0.16742414756459856, 0.17377774300845283, 0.15393834601420786, 0.11534321591796037, 0.11055898130174668, 0.11839865961536744, 0.11212243150723078, 0.13610569193393163, 0.1167685744282011, 0.10623884374430759, 0.1237427242099084, 0.12153838018400676, 0.14101365000576482, 0.1485952361273658, 0.15832875839320004, 0.16216395046833332, 0.14763444805864978, 0.16235808060925505, 0.15533346120938785, 0.1736120986417996, 0.1546218194075114, 0.14227359422721675, 0.14837463390089722, 0.1426064404081222, 0.14101597620439077, 0.1519457880640397, 0.15248125926001244, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.2610149927584089, 0.16774694660496947, 0.16456609150096047, 0.1596470889077558, 0.15090364644036713, 0.14298995596440567, 0.16148592373158976, 0.15424123792468913, 0.15756009512495184, 0.1609197542920412, 0.1419037013050345, 0.12777609066052353, 0.1504868009875976, 0.19221151150279014, 0.14755148998027634, 0.16079431369405628, 0.1733826869119277, 0.1949250148273316, 0.16913088795734987, 0.19086916339539295, 0.1746618218071433, 0.18683568409856555, 0.21352145738951, 0.18387060240675468, 0.17594474792094827, 0.18933248328274044, 0.2056973644989032, 0.050572186120337204, 0.05522258164259419, 0.06565788436411035, 0.05175880929021204, 0.05934830659822565, 0.05496541728382254, 0.07532529613519179, 0.054917916336056805, 0.06449377004422241]}, "mutation_prompt": null}
{"id": "15da2f5c-6349-43b9-a940-5496f11faee2", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.mutation_rate = 0.02\n        self.adaptive_learning_rate = False\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < self.mutation_rate:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                if random.random() < 0.1:\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n                # Introduce adaptive learning rate\n                if self.adaptive_learning_rate:\n                    if np.linalg.norm(best - self.elitist) < 1e-3:\n                        self.learning_rate *= 0.9\n                    elif np.linalg.norm(best - self.elitist) > 1e-1:\n                        self.learning_rate *= 0.8\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm with adaptive mutation and Bloom selection.", "configspace": "", "generation": 66, "fitness": 0.0909148916787598, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17771243807022508, 0.17578811482102485, 0.1708038475949274, 0.17150428729850087, 0.18771343322671707, 0.17742397982713154, 0.1791621352051339, 0.16247431078594343, 0.18975053604453318, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04210078152478458, 0.05388255288111121, 0.03701792365103962, 0.041028703578300574, 0.03732066520661048, 0.039444108458792315, 0.0560286883558605, 0.06702432684758475, 0.042531761609246654, 0.024134857358332762, 0.025002462122443503, 0.04774151833247253, 0.027803019802558393, 0.049262283768901405, 0.0570153721923361, 0.03768548859383769, 0.0394748188767482, 0.03049663536857128, 0.08746944629118047, 0.07416850240044093, 0.0907425825970638, 0.08916106394689449, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07937121000265868, 0.07973913569416458, 0.08043703106553202, 0.10165761364209647, 0.0674821113212627, 0.06227510184226048, 0.051930297421942884, 0.09472457566024695, 0.06041163303011765, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.10538331360446196, 0.10471519865355927, 0.09685346092514469, 0.13127527575213005, 0.12783208599640317, 0.1368487698841222, 0.1135869029704345, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004415316212220244, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06255420573266568, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06527050835426651, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.22079824787529645, 0.19946759850229623, 0.19495588911784612, 0.2055799784281095, 0.19242651822148205, 0.20724700933075846, 0.19364818875214052, 0.18078923064563224, 0.2051997254358232, 0.055843106910755336, 0.045228537379770395, 0.044546343300285285, 0.04451541773181433, 0.04021054649525724, 0.0360249635600961, 0.073263588849099, 0.044489116753156255, 0.0470398816854779, 0.13752783092736576, 0.1273795545501043, 0.1405571446122671, 0.1412797182171618, 0.14115670927312962, 0.13013755749087796, 0.1503460517535341, 0.14870282417820013, 0.13343795942830494, 0.17182146956931754, 0.17252602270228745, 0.1760473800192245, 0.16778106838960472, 0.1821496595795835, 0.1769644640004372, 0.16244737848268365, 0.17377897090598438, 0.15391099370930827, 0.10971934855330001, 0.10402009802286305, 0.11109491287868445, 0.11423027056365409, 0.13196299052767702, 0.1132975418817479, 0.10460822994416086, 0.11265991717893542, 0.12294003267549147, 0.14075157514833592, 0.16237267015738066, 0.15802737224080265, 0.1617568026493178, 0.1495326987517348, 0.159931903716239, 0.15533346120938785, 0.1726779084475244, 0.18181282256731413, 0.14195011305864957, 0.1498784297761495, 0.1426064404081222, 0.14101597620439077, 0.15115672264868785, 0.15278421981377122, 0.14096434603863706, 0.14164044590726022, 0.16207881422481074, 0.1994705462852958, 0.1663697383910494, 0.16656757087412732, 0.15986327398582145, 0.15120707240403752, 0.1416007477506127, 0.16597186504301775, 0.1634028490223587, 0.17666724415691548, 0.16153102127281238, 0.1486179101344145, 0.16569849397686498, 0.15004617852409396, 0.1883448480623814, 0.14755110292136453, 0.16856062152846718, 0.16175143377029066, 0.2027358462435085, 0.1757397014909311, 0.19094932789762986, 0.17355320647526207, 0.18683568409856555, 0.21454680678266191, 0.18409441427320683, 0.17594864678119715, 0.18933528979092384, 0.20570071134035084, 0.058344077551123696, 0.04892353944216432, 0.04970536649288315, 0.048359686146736025, 0.05934830659822565, 0.055933964908894684, 0.07466246828689382, 0.05503423917022132, 0.06604966270079038]}, "mutation_prompt": null}
{"id": "57ad9e0a-080c-4f04-a64b-09db340ed727", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.rank_threshold = 0.8\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            # Apply a new ranking-based selection\n            if random.random() < 0.05:  # 5% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and incorporating a new ranking-based selection.", "configspace": "", "generation": 67, "fitness": 0.09122856699430419, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1777162687395577, 0.17579579708134152, 0.17019049340179204, 0.16916763728204043, 0.18631695925393188, 0.17631975760606056, 0.1785264100312124, 0.16276083134748964, 0.18758802422928333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.04657898780278624, 0.03679613331162179, 0.04186117740917994, 0.03588346605904624, 0.039152308156773175, 0.04671819615398021, 0.06695747264652396, 0.058711088734964334, 0.02416933885181949, 0.032508982847686774, 0.04813999901158783, 0.027598886402573797, 0.04949844611964327, 0.05721405795705636, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.07414018190079819, 0.09011269983275472, 0.08951562661678691, 0.08028585374295139, 0.08639412375773481, 0.08222559889516068, 0.0791871025300892, 0.07933859172558622, 0.0797090366479648, 0.08080111677610458, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06078213344477956, 0.09472457566024695, 0.061028138297436585, 0.09734671166992925, 0.12075939604628749, 0.1922724160899849, 0.14821448516703783, 0.1021028822797061, 0.09685346092514469, 0.12731323397435246, 0.1216766789897451, 0.1368487698841222, 0.11607572511499797, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004339920061236069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.01900488333945327, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03213393888227367, 0.055770453722678415, 0.046616679773006986, 0.05008726726802559, 0.06038333880829083, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082363006097716, 0.2102865133713464, 0.19494350608404842, 0.20555813851730098, 0.19053310981694072, 0.20725711450000228, 0.19949604691278533, 0.1869342849161878, 0.20417085430012005, 0.053527253949621656, 0.04250646008327186, 0.03444504108293245, 0.04327883087778295, 0.04052527711396492, 0.046009660620107806, 0.07414566810088652, 0.04431790739470853, 0.05229792848072812, 0.13752783092736576, 0.12908626369267073, 0.1372168098523947, 0.14114350602743875, 0.14115194246620144, 0.13013755749087796, 0.15031923484372778, 0.1494619254648435, 0.13381193994724438, 0.17180348900481623, 0.17360661900850627, 0.1760631549712518, 0.16716212521952967, 0.16165498403356682, 0.17695656654388692, 0.16651194978516282, 0.17377774300845283, 0.15377478770185826, 0.10509072017112397, 0.10491714174776645, 0.11849032669552728, 0.11237304749209343, 0.1360626686139672, 0.1186002429750952, 0.10509259900608636, 0.1237427242099084, 0.12292666157681109, 0.1410630187122207, 0.16217918530372788, 0.1583470274596206, 0.1601583581414543, 0.1505445664260826, 0.16241226634692651, 0.15533346120938785, 0.17355151355563359, 0.18277299017564363, 0.14195011305864957, 0.14701525276411265, 0.1426064404081222, 0.14166753393112508, 0.15312007237812864, 0.1495740305343688, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.20505561354618995, 0.16679477618376493, 0.16456609150096047, 0.15974227911766647, 0.15120231260257588, 0.13947363312929173, 0.1596844645502099, 0.16341295983627702, 0.17654467050480127, 0.15870500180116054, 0.15832057460437354, 0.16243657034223014, 0.150330135465925, 0.19189913585997853, 0.16056878380007567, 0.16077218676778593, 0.17354284120768315, 0.20353360620089067, 0.17579399472915191, 0.19094915976158955, 0.17528184425399762, 0.18683568409856555, 0.21357776188314248, 0.1783308944811295, 0.17191974050892822, 0.18735950992358796, 0.2056942628642371, 0.058724569245254266, 0.05530264414521535, 0.06585155299632517, 0.049939102506830535, 0.05934830659822565, 0.05623030809662555, 0.07535582805704466, 0.055018168741657214, 0.061359506456440394]}, "mutation_prompt": null}
{"id": "7d92875b-eab9-4b23-9f70-fd2c89640e35", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.mutation_std_dev = 0.05\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation with adaptive standard deviation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, self.mutation_std_dev * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n                    self.mutation_std_dev *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n", "name": "HyperElitistBloom", "description": "Refine Hyper-Elitist Bloom by introducing a novel mutation strategy and adaptive learning rate control.", "configspace": "", "generation": 68, "fitness": 0.09131829667717008, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17772586297309612, 0.17586357524743512, 0.1702290253063824, 0.16826850328348264, 0.18820649324291727, 0.17521595708996007, 0.17996566852858775, 0.1629645835609641, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041702083932415035, 0.04929249661003254, 0.03669844691127255, 0.040083581025302184, 0.03765939657452455, 0.03948978223329991, 0.0528437448134802, 0.06772118725939491, 0.05872819475356095, 0.024134857358332762, 0.032508982847686774, 0.03784318004313414, 0.02285571191798008, 0.04967067269046033, 0.05702674525995721, 0.037257560578184745, 0.040397541112902724, 0.029898291447754133, 0.08746944629118047, 0.0727893097383503, 0.09087431849796956, 0.08913924247828109, 0.08032688292695478, 0.08640844039635176, 0.08222168655623752, 0.08620909750186001, 0.07937378496923742, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.067982649774464, 0.062276416502640486, 0.06585581317901756, 0.09472457566024695, 0.06096998643173557, 0.09734671166992925, 0.1255438988497215, 0.19308637766117165, 0.147178146333388, 0.10190109393061941, 0.09685346092514469, 0.13123694841517808, 0.12477293694172564, 0.1368487698841222, 0.1112145057514965, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.0042776999366427315, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058959228262360774, 0.06858859508378334, 0.045274884319672526, 0.044669195072529644, 0.03258759184138249, 0.055770453722678415, 0.05335763704423968, 0.050116345186613565, 0.06460279177738593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22053426603739634, 0.19668897180014078, 0.19495588911784612, 0.2055799784281095, 0.1913615623265933, 0.20717066556504238, 0.1998807079546645, 0.18434309480368138, 0.20256137266542706, 0.04989713541104379, 0.04390521012981152, 0.045979357300523604, 0.045113442852950714, 0.03526451302701439, 0.046009660620107806, 0.07540456547336782, 0.043993360971981255, 0.05229792848072812, 0.13752783092736576, 0.12708626346808882, 0.14294976436303108, 0.1412797182171618, 0.13842169147668426, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.16774900017915784, 0.1731147945108944, 0.1760473800192245, 0.1676442004518074, 0.18080945989068464, 0.17702574150737693, 0.1660157347920651, 0.17377774300845283, 0.1530243643237198, 0.11534321591796037, 0.10691068699631401, 0.11760591401317577, 0.11154953547874669, 0.12144577838435056, 0.11676919299387534, 0.10514160804565564, 0.12338706505596764, 0.1229185550255375, 0.1411082106621816, 0.16325466975593372, 0.1439771524254786, 0.16012689845526296, 0.14758776813658026, 0.16235105974500708, 0.15533346120938785, 0.17355189549078154, 0.18205849859032597, 0.14195011305864957, 0.14771715754074632, 0.14172560018676317, 0.14101597620439077, 0.14679423272796233, 0.14568785143978458, 0.13961679524412707, 0.14175390856222403, 0.16207881422481074, 0.2459539748562618, 0.1663664209056036, 0.1645933102976589, 0.1596427042756502, 0.15120231260257588, 0.14126890795052727, 0.1613812843339134, 0.1634028490223587, 0.17697105634396337, 0.15914736842920718, 0.1574246768738392, 0.1649321205820461, 0.15033169847114436, 0.18886734367950586, 0.16038869181176652, 0.1685587435539896, 0.17382573264980694, 0.1671170777181944, 0.1757397014909311, 0.19094915976158955, 0.1763500527175791, 0.1867922848218011, 0.2135749380374129, 0.18736321242029508, 0.17593463949160026, 0.18933528979092384, 0.20568880668582523, 0.04953019576525952, 0.055316900087574505, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055893080549845986, 0.07576855856343212, 0.05508594525833599, 0.06317979047100875]}, "mutation_prompt": null}
{"id": "ee45d845-651b-4a8f-a9f1-a82087fd43b5", "solution": "import random\nimport numpy as np\n\nclass RefineHyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.ranking_based_selection = False\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Use a more efficient ranking-based selection\n            if self.ranking_based_selection:\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            # Update the ranking-based selection flag\n            if random.random() < 0.01:  # 1% chance of updating the flag\n                self.ranking_based_selection = not self.ranking_based_selection\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n", "name": "RefineHyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and using a more efficient ranking-based selection.", "configspace": "", "generation": 69, "fitness": 0.09116314716837005, "feedback": "The algorithm RefineHyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17774666345647983, 0.17590363149833743, 0.1704543281206794, 0.1675062222791841, 0.18692719315125494, 0.1764082619912668, 0.17854593632290927, 0.1627637387109342, 0.19024506538712427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.05027887690614985, 0.03688233541787089, 0.04103769126325474, 0.03686378454270267, 0.03642036138704685, 0.04572150069463354, 0.06699007005715774, 0.058593786895773325, 0.025979934130904825, 0.03243453119750428, 0.04799115299610435, 0.027803019802558393, 0.04908819008595111, 0.05713359128941353, 0.03768548859383769, 0.04049083616615823, 0.029898291447754133, 0.08337357590814376, 0.07375061450247145, 0.09207212209808746, 0.08982645516649468, 0.08032688292695478, 0.08639205708297304, 0.08222478068514616, 0.0786486552482345, 0.07501889665511086, 0.07973913569416458, 0.07581526644545722, 0.10171882691615464, 0.06783755759972065, 0.06227510184226048, 0.06130150772388787, 0.09333637870097666, 0.060869907721937344, 0.10004446360456731, 0.1255377295085195, 0.19308637766117165, 0.14821218066072195, 0.10526040593718733, 0.09537675572610993, 0.13123694841517808, 0.126877526257403, 0.13570633828321066, 0.1112145057514965, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004339779291723467, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04584588517838817, 0.06941906045599022, 0.03213393888227367, 0.055770453722678415, 0.05376589860545222, 0.05008726726802559, 0.06379790701513188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.2208000111003, 0.21362926774707458, 0.19495588911784612, 0.17735809648351464, 0.18992176788852566, 0.20726093129518364, 0.19959099984771855, 0.18172841303829945, 0.20431275276047645, 0.0497397364896871, 0.04329649483178033, 0.04280630105329941, 0.04489863455268894, 0.040395074946144804, 0.04585851057359247, 0.073263588849099, 0.04469254374654208, 0.0470398816854779, 0.1370941010055503, 0.127057256595425, 0.13716746999815643, 0.13962079349062684, 0.14127445617280132, 0.12472466881541644, 0.14979928416125954, 0.14924576209738716, 0.1338453581186947, 0.17181964227474567, 0.1668086498918201, 0.1760473800192245, 0.16779352461211916, 0.18221456532080194, 0.1769627262030692, 0.16643783003981572, 0.17377704171265018, 0.153786853310227, 0.11536596136255683, 0.10525813119040284, 0.11849032669552728, 0.11020720643896653, 0.13611116282914404, 0.1166889059646865, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16314651752189946, 0.15487585406428006, 0.16219943466329734, 0.14950773766652348, 0.15992312887638782, 0.15533346120938785, 0.17355607954694097, 0.18256782180359366, 0.14195011305864957, 0.1471926928778099, 0.1426064404081222, 0.14101597620439077, 0.14680611116358555, 0.14616104010028774, 0.13697870895265896, 0.14175390856222403, 0.16207881422481074, 0.2006877471287879, 0.16679730753406585, 0.16656740676009207, 0.1596427042756502, 0.15119971229582274, 0.14145415050674925, 0.16093028200203519, 0.1634028490223587, 0.17650083581544018, 0.15969982378885705, 0.15830379423094965, 0.16490498282695387, 0.15035065532003777, 0.18943557095024643, 0.16045374486843178, 0.15243333482322452, 0.17348581395726648, 0.2029029940538457, 0.1757397014909311, 0.19094915976158955, 0.17584328457004061, 0.18683568409856555, 0.19297986807083722, 0.18387995942324953, 0.17594401590058517, 0.18933394128312397, 0.20568880668582523, 0.05986028982822922, 0.0551916789107223, 0.0658521581329583, 0.05186305593955043, 0.05934788436755256, 0.05496541728382254, 0.07532286703081303, 0.05200513181152777, 0.06835969195336589]}, "mutation_prompt": null}
{"id": "3a4a9f52-d678-4eab-8a18-0e9721af6f82", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.selection_strategy = \"Weighted\"\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            if self.selection_strategy == \"Weighted\":\n                weights = np.array([func(individual) for individual in selected])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            # Introduce a new selection strategy: use a ranking-based selection\n            elif self.selection_strategy == \"Ranking\":\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and using a more efficient selection strategy.", "configspace": "", "generation": 70, "fitness": 0.0912560115167283, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1777740637361227, 0.17557756982858552, 0.17016219194849513, 0.17150454385941594, 0.18818139055183436, 0.17463430678497804, 0.17856999940812623, 0.16495286094732564, 0.19117233963108504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.054690587601675, 0.035182295607863456, 0.041933691359241076, 0.03729185167768223, 0.03948978223329991, 0.0528437448134802, 0.06759487103710105, 0.05872703763843623, 0.025926806373157474, 0.032508982847686774, 0.04774151833247253, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029936678346638823, 0.08739005618321027, 0.07344615134817756, 0.09087367534676227, 0.08896263556748418, 0.08032688292695478, 0.08639412375773481, 0.08250613198354784, 0.08549397662253977, 0.07932716673688678, 0.07971344122867374, 0.08043703106553202, 0.10171882691615464, 0.06431725022910595, 0.062276416502640486, 0.06050624721238962, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.1930881357482258, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13143396220130998, 0.12595553978877339, 0.1368487698841222, 0.11614728996553292, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004291945811323417, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.0707309483668177, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06535045920481664, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05479899211155803, 0.03252444772997387, 0.0679829487755953, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.20442121721874684, 0.19841582032110372, 0.19495588911784612, 0.2055816954077182, 0.1925398037342031, 0.19402113575000401, 0.19756329587994614, 0.17672919882771, 0.20412159479959258, 0.050630473712987456, 0.04495198712545445, 0.04494663517382469, 0.04157776306827399, 0.04047962946115746, 0.04578022755974054, 0.07290174993808063, 0.044067868048377035, 0.04555179045768332, 0.13752783092736576, 0.12734985408101274, 0.14114593832215383, 0.13962079349062684, 0.14115194246620144, 0.13013755749087796, 0.15066203712842985, 0.14859986015006, 0.13384061212254017, 0.17180348900481623, 0.1615467545062429, 0.17600240440600878, 0.16779352461211916, 0.1812837850239497, 0.17616323526970445, 0.16591313548350284, 0.17377774300845283, 0.1532921611964212, 0.11060303473412691, 0.10481883546539716, 0.11849032669552728, 0.11332096351180698, 0.1359987653869299, 0.10803348363851184, 0.10320640604767617, 0.12374624323615768, 0.1229185550255375, 0.1410685978940932, 0.16237965247611597, 0.15702892149643355, 0.1601061786572493, 0.14798587947145003, 0.16241069448922318, 0.15533346120938785, 0.17355051801211507, 0.1840456830321272, 0.14203945547663477, 0.14847484587561344, 0.1426064404081222, 0.14101597620439077, 0.15089298563512799, 0.15282202985716775, 0.1470160337390065, 0.14114319382385088, 0.16207881422481074, 0.19922082435391697, 0.16679155918142408, 0.16656765876756197, 0.15629863619184925, 0.15120231260257588, 0.13768160931831697, 0.16011940657988233, 0.15424123792468913, 0.17358652841053623, 0.14884391962062382, 0.15828233163520455, 0.16494787843477332, 0.1506617862947114, 0.18876102006955275, 0.16038725048398772, 0.16855947523118198, 0.17315147757924276, 0.20283404934431326, 0.17573975432657496, 0.19090629074973953, 0.1752484737651222, 0.18729382863915434, 0.213664380432928, 0.18506263731089223, 0.17655827003016167, 0.18832532218492992, 0.20568880668582523, 0.05838545710937415, 0.055352740987652416, 0.06585289852283294, 0.05186305593955043, 0.05934788436755256, 0.054742093359802624, 0.07532513434003052, 0.05645622007676865, 0.06527771514008529]}, "mutation_prompt": null}
{"id": "d6abcffb-151b-47f5-812c-274c2d112f30", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.ranking_based_selection = False\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                self.ranking_based_selection = True\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            if self.ranking_based_selection:\n                self.population = new_population\n            else:\n                self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and using a more efficient ranking-based selection.", "configspace": "", "generation": 71, "fitness": 0.09059132317364142, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1766812368256777, 0.17579354478418185, 0.170257377687277, 0.1724707292800054, 0.18818139055183436, 0.1796573484108338, 0.17860833594004255, 0.16147483199424673, 0.19741317506307443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04207174602931085, 0.0490475897355489, 0.036843840851905174, 0.041028703578300574, 0.03580319433317802, 0.03948978223329991, 0.052754791636464016, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.03198793081749518, 0.0481463786277756, 0.027803019802558393, 0.04970491265556609, 0.05702674525995721, 0.03096864576247227, 0.03992308285267243, 0.029898291447754133, 0.08733955426615991, 0.07363109982692517, 0.09126312881566212, 0.08915396228907724, 0.08024150907148175, 0.08639059452280984, 0.08222559889516068, 0.08562987019306934, 0.07945299512161397, 0.0797090366479648, 0.07627488325595133, 0.09136464603211936, 0.06783755759972065, 0.062276416502640486, 0.06036651201332366, 0.09472457566024695, 0.06041163303011765, 0.08089053992722561, 0.12551356758130827, 0.10183402900236993, 0.10646249782444173, 0.10470493349903331, 0.09685346092514469, 0.1313441477671342, 0.13127443967206054, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 9.999999999998899e-05, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05250454322027287, 0.06535045920481664, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.054558835387120364, 0.05008726726802559, 0.06887381055826003, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.22078770912055556, 0.19288028427107085, 0.19485815949177931, 0.20555257593748466, 0.18833664210224055, 0.2064474076815408, 0.1998807079546645, 0.179796750982533, 0.20404484693379832, 0.050785489661993255, 0.045089119482966455, 0.04491465864722688, 0.043413587282514876, 0.04108423090849811, 0.046009660620107806, 0.07322181034436837, 0.04483774853147682, 0.05229792848072812, 0.13752474478887367, 0.12745461993634566, 0.13572356774902383, 0.13962079349062684, 0.14115880042917928, 0.13013755749087796, 0.1391870477314029, 0.14859986015006, 0.1338453581186947, 0.17186075876852158, 0.18087686109036727, 0.1760473800192245, 0.16779352461211916, 0.18214941725644695, 0.1761524615335246, 0.1681295204585087, 0.17378478897859895, 0.15447938128075567, 0.11534321591796037, 0.10412568180399773, 0.11261857964891131, 0.11090542773573475, 0.13607934992625037, 0.1201495354459794, 0.10400114283978068, 0.1237427242099084, 0.1228050244554546, 0.14107158595231994, 0.16197434591930382, 0.1583470274596206, 0.16021452150748516, 0.14916546205897463, 0.1623643307002236, 0.15430793788199848, 0.17353975696504131, 0.18256782180359366, 0.14195011305864957, 0.14687775019665317, 0.14228311253266146, 0.13724058100429903, 0.14544852887386406, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.2175781948283867, 0.16708218744590742, 0.16461259049394772, 0.1596361989496865, 0.15120231260257588, 0.13972218897692834, 0.16545487046578256, 0.163482972881987, 0.17621225751418823, 0.15769950395271737, 0.15807755044912863, 0.13194838855069047, 0.14945336279730725, 0.19240072680296183, 0.14755148998027634, 0.16856498361417072, 0.17358977446403845, 0.20290976604295974, 0.1757397014909311, 0.18513592297438264, 0.17521172209778724, 0.1865520802096733, 0.21400458804242894, 0.18380533103858598, 0.17434693194623707, 0.18946932283236784, 0.20491329762080313, 0.052870968960045284, 0.05542695620838167, 0.06585155299632517, 0.05189080864824169, 0.05934830659822565, 0.05599578564151775, 0.07529728639327182, 0.051622805652493886, 0.05961041691700797]}, "mutation_prompt": null}
{"id": "b5c16916-8133-42c8-883b-571971cbf832", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.covariance = 0.01\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation with adaptive learning rate\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n                    # Update the covariance to control the mutation standard deviation\n                    self.covariance *= 0.99\n                    if self.covariance < 0.001:\n                        self.covariance = 0.001\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate.", "configspace": "", "generation": 72, "fitness": 0.09126730950216928, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1777139996739341, 0.175864505661662, 0.17026015539284622, 0.18009557592972214, 0.18818139055183436, 0.17842072930167618, 0.17856999940812623, 0.1628148628767091, 0.19114273722571906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042123271533823226, 0.04920648323669974, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03829133748844615, 0.05586442688109161, 0.06699533868431795, 0.05882612070122617, 0.026092631832224877, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04974759404200668, 0.05702674525995721, 0.03717132102080245, 0.03936564341003668, 0.02293221040976745, 0.08754629354920285, 0.07407090852700515, 0.09142411983457588, 0.08924876748046462, 0.08028585374295139, 0.08639618921282965, 0.08222559889516068, 0.08604143537590714, 0.07934814646567323, 0.07973913569416458, 0.06540963629252217, 0.1019795088606743, 0.06821734231256527, 0.06058472670551984, 0.052428156016289584, 0.09472457566024695, 0.06041163303011765, 0.09992729358139563, 0.12553619411724048, 0.13942247651190098, 0.14843175869217518, 0.10471519865355927, 0.09688291417176265, 0.12741550336459007, 0.12595553978877339, 0.1368487698841222, 0.11601152694274408, 0.0043507767599104685, 0.004560104586776803, 0.0042075348643063615, 0.004418750988329667, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.017162093656277078, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06599894965726294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22019688575434193, 0.2007848064373513, 0.19524678832067, 0.20570070286639586, 0.1896015362064296, 0.20724700933075846, 0.19912639814561206, 0.18748203228067395, 0.2040139454789297, 0.05500886563505136, 0.04259492221310479, 0.04401887178405428, 0.043536257911059306, 0.03492491825203292, 0.046009660620107806, 0.07326786416742526, 0.04411238953189056, 0.04555179045768332, 0.13752783092736576, 0.12472971708497171, 0.1436741968769315, 0.14128209352536214, 0.14155037834679662, 0.12995664281040809, 0.15034268976310372, 0.1417688551674492, 0.13299753044733464, 0.17227415354605202, 0.17356329610548238, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.17689174223905124, 0.16580091884920034, 0.17377774300845283, 0.15455320122874638, 0.11469852145720083, 0.10511046249387179, 0.11267842109530724, 0.10885119094923479, 0.1361087296728667, 0.11676919299387534, 0.10628682615994733, 0.12374064570758092, 0.1229185550255375, 0.1410630187122207, 0.16229788720318716, 0.1583470274596206, 0.16011312328722127, 0.1457875355347671, 0.1599191829921086, 0.15533346120938785, 0.17366654253562686, 0.18277078111048128, 0.14213649103026327, 0.1466727534956721, 0.14006577975982915, 0.14101597620439077, 0.147724444920462, 0.14826610141595642, 0.14096434603863706, 0.1417903201568501, 0.16207881422481074, 0.25768312483752775, 0.16679477618376493, 0.15656402986616413, 0.15640578237623382, 0.15120612990166138, 0.1411966535145892, 0.16166161997792128, 0.163275219786864, 0.17650083581544018, 0.15768378219198798, 0.1582791832012932, 0.16490498282695387, 0.15100387222807787, 0.18877718677894717, 0.16054520208914613, 0.1609612974526331, 0.17351162330010617, 0.2028812417861957, 0.17571421504338236, 0.19094915976158955, 0.1758255198196319, 0.18683599940612405, 0.21360981454220795, 0.18427806847979133, 0.17594512205278, 0.17976516870887083, 0.20568304527172832, 0.05775353443437947, 0.05532071204015787, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055762805319362285, 0.0550917887943968, 0.05157634987429571, 0.06785329610400226]}, "mutation_prompt": null}
{"id": "825ee73a-6c5e-402a-b43b-ee5cbc6aa92e", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.mutation_probability = 0.02\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < self.mutation_probability:  # Increase mutation probability\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                self.learning_rate *= 0.9\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    self.population[np.argmin(func(self.population))] = best + np.random.uniform(-0.1, 0.1, self.dim)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and increasing the mutation probability.", "configspace": "", "generation": 73, "fitness": 0.09132323547333765, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17233019564447405, 0.17578811482102485, 0.16985118877906602, 0.17289325665755095, 0.18819962174336802, 0.17963932465179822, 0.17182645572443866, 0.16189922459905104, 0.19976617849313605, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042307171504547436, 0.049182013914975675, 0.035182295607863456, 0.04170201356881498, 0.03600900400973317, 0.03829133748844615, 0.0528437448134802, 0.0669633259036293, 0.05871371367136813, 0.025979934130904825, 0.031007285203612622, 0.04813999901158783, 0.027598886402573797, 0.04926774209271334, 0.05704074815813187, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08826272685437431, 0.07213381808060204, 0.09087431849796956, 0.08568504301175195, 0.08033958659905982, 0.08639412375773481, 0.0828643818480117, 0.08608600190547555, 0.079354032181854, 0.07964440716651155, 0.07276437706426642, 0.10165761364209647, 0.06842898751798243, 0.062276416502640486, 0.06032814546141274, 0.09472457566024695, 0.05930758252791879, 0.09734671166992925, 0.12553619411724048, 0.19308637766117165, 0.1481748168008029, 0.10478282698193653, 0.09685346092514469, 0.13123694841517808, 0.1259136130845091, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.0042075348643063615, 0.004384515842845049, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.01900488333945327, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04729240278443192, 0.06858859508378334, 0.04540858208171317, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22066228991769699, 0.19928221752520336, 0.19453374165967996, 0.2055799784281095, 0.19760899118329356, 0.20724700933075846, 0.19364818875214052, 0.19953440455929716, 0.19811925319379164, 0.050785671951656175, 0.043274401285293584, 0.04483960263340703, 0.045842259439514255, 0.04044574604984119, 0.046009660620107806, 0.07334415042364051, 0.043993360971981255, 0.04616519580518197, 0.13753385476320146, 0.1273795545501043, 0.1372168098523947, 0.1412797182171618, 0.14180233044776125, 0.12600641812157176, 0.15034209600385184, 0.1486249449478242, 0.13039592126932875, 0.1709201797914216, 0.17045532543890718, 0.16814906059237933, 0.16779352461211916, 0.18161376382756977, 0.1769644640004372, 0.16525662837865873, 0.17377774300845283, 0.15453078476694337, 0.11439479101012362, 0.10550157497119639, 0.1176742951323273, 0.11325712136917576, 0.13689975170612234, 0.11676919299387534, 0.10586257595629922, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233726078969324, 0.1583470274596206, 0.16262878805901493, 0.14652608669737188, 0.1623572407938354, 0.15533346120938785, 0.17554653391246133, 0.18256782180359366, 0.14097760689030436, 0.15003964763021993, 0.1426064404081222, 0.14101597620439077, 0.14776763690581352, 0.15282202985716775, 0.14930916203802502, 0.14175390856222403, 0.16207881422481074, 0.20244129698563462, 0.16679477618376493, 0.16461259049394772, 0.15836593579029412, 0.1513261586654644, 0.1411430246628681, 0.16453164158600597, 0.1638966947367222, 0.17169425936385596, 0.15902342245506984, 0.14888823309102373, 0.1624347169009781, 0.14945281765920115, 0.18910595404219976, 0.15639380321837848, 0.16855947523118198, 0.17351831423856634, 0.20143402666657984, 0.17574352208020172, 0.19094915976158955, 0.17585289330230935, 0.18659813131039726, 0.2135749380374129, 0.18382439475410084, 0.17352153860838793, 0.18933528979092384, 0.19229562973578596, 0.05932159391766012, 0.049455091198303824, 0.06585319728388073, 0.05158111314302383, 0.058815507864153016, 0.05594124744469897, 0.07508984043237632, 0.051227191480298306, 0.06329908588645594]}, "mutation_prompt": null}
{"id": "05177be8-4d74-48ec-9bdd-0281275a4858", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.covariance = 0.1\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation with adaptive covariance\n                    std_dev = self.learning_rate * self.covariance\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, std_dev, self.dim)\n                    self.learning_rate *= 0.9\n                    self.covariance *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate.", "configspace": "", "generation": 74, "fitness": 0.09080015325990755, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.1712310747465805, 0.17993653894452455, 0.18632782706777584, 0.177984338641218, 0.17439946753792868, 0.16280194198054432, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042072042754083716, 0.04701907417354523, 0.03694389989152769, 0.04230743273267146, 0.03733024404167806, 0.03948978223329991, 0.05284228156795234, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.027373918573666778, 0.04813999901158783, 0.02731774542678833, 0.04926774209271334, 0.057478387921322205, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746748470215648, 0.07408085223160343, 0.09047260094410525, 0.08822198236992773, 0.08032688292695478, 0.08690843536319715, 0.08222010981131667, 0.08619897077221372, 0.07942924595056178, 0.07750585945050281, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.06058472670551984, 0.06370847938825486, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12548326824563738, 0.19308637766117165, 0.1482899442881771, 0.10471519865355927, 0.09685346092514469, 0.1312677822663798, 0.1259414581322259, 0.1368487698841222, 0.11599925472713601, 9.999999999998899e-05, 0.004560104586776803, 0.006205422871878197, 0.0006730782351076492, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008081236604151831, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.0005275901478054568, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053926339758119335, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.0555426011456186, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.21859873565007204, 0.20891201595010156, 0.19475142299738168, 0.2058569180563924, 0.1894203618698963, 0.2064522492967763, 0.19989069864871922, 0.18127878460556734, 0.2040615478175123, 0.05397498438115966, 0.04545137522502607, 0.04404503779880342, 0.04364004832467194, 0.04044270120146887, 0.04578022755974054, 0.07412055081637059, 0.04469255568620756, 0.05229792848072812, 0.13752659305554915, 0.1273795545501043, 0.1372168098523947, 0.14106226934643273, 0.14134849706505115, 0.12607598176862156, 0.15034268976310372, 0.14861619065631115, 0.13363579024712158, 0.17201710412846083, 0.16593184886758683, 0.17282693350303358, 0.16779352461211916, 0.18216072695714125, 0.17709835924424389, 0.16564369812484803, 0.17377774300845283, 0.15323057326549128, 0.11534321591796037, 0.11067981724642906, 0.11767416817785181, 0.11273436220146182, 0.1361211035770752, 0.11778121097016103, 0.10620933200616223, 0.12371664468104004, 0.09578519731986801, 0.1410630187122207, 0.16229462083312096, 0.1583470274596206, 0.15711172694965714, 0.15018761914099488, 0.16236211632663367, 0.15076568063433038, 0.14430403073957965, 0.18256782180359366, 0.14195011305864957, 0.14814832511694387, 0.1426064404081222, 0.13724058100429903, 0.1472621471733777, 0.15282202985716775, 0.14096434603863706, 0.1418205383889346, 0.15101632172421486, 0.19844968565319554, 0.16679477618376493, 0.15031330111193042, 0.15962779977775576, 0.15148702939367154, 0.14147814800180825, 0.15348681625241933, 0.16504819724742537, 0.17647755067737814, 0.15311686884537978, 0.15735739362299117, 0.16490496533178733, 0.1503805568465053, 0.14937955409180959, 0.1603762416796971, 0.16856452376650854, 0.16590188408562223, 0.19495005437235946, 0.17571227447007498, 0.18505592660818604, 0.17584778572079263, 0.18683568409856555, 0.2135598678114532, 0.18382439475410084, 0.17280908315522814, 0.18933528979092384, 0.20507474565880535, 0.05834833240383519, 0.055317793090979506, 0.06585155299632517, 0.049681133869572514, 0.05934712555252386, 0.056045949925621286, 0.07442341405758346, 0.0550079530755373, 0.06011521686098109]}, "mutation_prompt": null}
{"id": "2c341d4c-b669-48ae-a0a3-066d3790dce8", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.01 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n                # Introduce adaptive learning rate\n                self.learning_rate = max(0.01, self.learning_rate * 0.8)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm with adaptive learning rate and Gaussian mutation", "configspace": "", "generation": 75, "fitness": 0.09155184734259833, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17751747056193856, 0.17580106894155723, 0.170245654564544, 0.17201952717203184, 0.18818621880016206, 0.18328072306789167, 0.17856999940812623, 0.1666159105139361, 0.19692659660313017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040820751339385786, 0.050208983932784945, 0.03625295840831255, 0.03979092926737371, 0.03497296716188758, 0.03948978223329991, 0.05284228156795234, 0.06696338179239592, 0.05871118270638109, 0.025979934130904825, 0.03251309706140515, 0.04757858297972961, 0.027803019802558393, 0.04940213755409384, 0.05702674525995721, 0.03768548859383769, 0.03747181839358238, 0.029989076383797886, 0.08466987334391685, 0.0741770523943478, 0.0887438201509142, 0.0915441299835047, 0.08032688292695478, 0.08620804654633851, 0.08216429210468346, 0.08620909750186001, 0.07935398374160618, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06799986410028092, 0.062276416502640486, 0.06043304934207283, 0.09472457566024695, 0.061028138297436585, 0.09734671166992925, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.1021028822797061, 0.09685346092514469, 0.12926014437573208, 0.12577191286311806, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.0005274662512161354, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.002367286420350001, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05289757561044084, 0.05010595187434719, 0.06555889108652924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21917834974600747, 0.19783671964526017, 0.18344693861085826, 0.2055799784281095, 0.18558462365468742, 0.20750052684167353, 0.18351498912799102, 0.17990074955286361, 0.20405983856341203, 0.051702636975864746, 0.047393704935559056, 0.04473967598778983, 0.04318053323128679, 0.04082231557783378, 0.04578060189557909, 0.0732085319600374, 0.044021815489441396, 0.05229792848072812, 0.13106695632405485, 0.1273795545501043, 0.14112430285774846, 0.1412797182171618, 0.14114808212595453, 0.13013755749087796, 0.14729240345424766, 0.14861769011893267, 0.1338453581186947, 0.17181414534970207, 0.18426903994337085, 0.17604770918758916, 0.16763940965443558, 0.1814250278553905, 0.1700477006365323, 0.1664244024675845, 0.17377774300845283, 0.15313882002335377, 0.11521622264437448, 0.11231664866825763, 0.11846210678742897, 0.11434878931936088, 0.13191187532897908, 0.11676196933575378, 0.10656393626675686, 0.1237427242099084, 0.12287317566471523, 0.1410630187122207, 0.16223764874361657, 0.15703461515629857, 0.16204759623854348, 0.14653480090754512, 0.1620246138804512, 0.15533346120938785, 0.17778082571437115, 0.1824538237568355, 0.14195011305864957, 0.14868954073945972, 0.1426064404081222, 0.14101597620439077, 0.14505680129333565, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.20970749658420917, 0.16716646166029736, 0.16657141521439822, 0.15852594395942765, 0.1511996404947069, 0.1419746071437994, 0.1624068505106916, 0.16340448648306938, 0.17312862828591224, 0.16374674405349166, 0.15807755044912863, 0.16490498282695387, 0.15027726056263968, 0.18179589553035858, 0.16045374486843178, 0.16855947523118198, 0.17802608602663517, 0.20357590994954622, 0.17515561531158252, 0.19094915976158955, 0.17519758894785376, 0.18683702366272836, 0.21355650737945187, 0.1838533085330859, 0.1735777003455864, 0.18976821179057768, 0.20568880668582523, 0.058344077551123696, 0.05531494148014682, 0.06585155299632517, 0.0496458412526628, 0.05934830659822565, 0.05644517955384487, 0.07469164468735057, 0.05514604987148597, 0.06413730427308906]}, "mutation_prompt": null}
{"id": "a81ce23c-6523-46b8-a5e3-fb4e446930a6", "solution": "import random\nimport numpy as np\nimport heapq\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.selected_indices = set()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = [self.population[i] for i in self.selected_indices]\n            selected = [individual for _, individual in heapq.nlargest(int(0.2 * self.budget), [(func(individual), individual) for individual in selected])]\n            selected = [individual for _, individual in selected]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                if random.random() < 0.1:\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n            self.selected_indices = set(np.argsort(func(self.population))[:int(0.2 * self.budget)])\n\n    def get_elitist(self):\n        return self.elitist\n", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and using a more efficient data structure for population selection.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {}, "mutation_prompt": null}
{"id": "4c74c36f-4b1e-499c-9fe7-60e65e186cda", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.ranking_threshold = 0.1\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                if random.random() < 0.1:\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection with a threshold\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank if rank < self.ranking_threshold else 0 for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = [individual for individual in selected if weights[individual] > random.random()]\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and using a more efficient ranking-based selection.", "configspace": "", "generation": 77, "fitness": 0.09090265262658155, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1777139996739341, 0.1758272202145268, 0.170257377687277, 0.1720331290271362, 0.18691881536791066, 0.1753910175404524, 0.17507636058811005, 0.16325310527639303, 0.19175100016472402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04207556726031636, 0.05402920745628159, 0.036843840851905174, 0.04105998388123222, 0.0374757134732987, 0.03950571354630661, 0.05714694993165992, 0.06702432684758475, 0.058711088734964334, 0.025902235419872688, 0.031203503771179197, 0.0481463786277756, 0.02731774542678833, 0.04969622501689064, 0.057074465399455376, 0.03768548859383769, 0.03821147307613426, 0.029984951389487424, 0.08746748470215648, 0.07433028688934051, 0.09087367534676227, 0.08913962246525753, 0.08032688292695478, 0.0863887231794428, 0.08222559889516068, 0.077866155344535, 0.07946067395487932, 0.07973913569416458, 0.0723191918399172, 0.10158535593465201, 0.059034427198027206, 0.062276416502640486, 0.06134911451240532, 0.09472457566024695, 0.06041163303011765, 0.09992729358139563, 0.12164867611791308, 0.19308637766117165, 0.14823702195826627, 0.10470493349903331, 0.09312166973137026, 0.13020231475513555, 0.1266363871852222, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008081236604151831, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06834571695726643, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.2044877346796593, 0.21198055888125733, 0.1944069795717589, 0.2055799784281095, 0.1907253403044008, 0.1766545175437979, 0.1998807079546645, 0.1805233084194826, 0.19761043558169145, 0.05025735841296752, 0.03990536099348607, 0.03371684905824679, 0.04089075599529335, 0.038474059846760444, 0.04585851057359247, 0.07397408585546161, 0.043993360971981255, 0.05229792848072812, 0.13752854607697196, 0.1273795545501043, 0.140050256589054, 0.14128043263937673, 0.14131318311956786, 0.13013755749087796, 0.15034268976310372, 0.1485944543934805, 0.1338453581186947, 0.1706161174284485, 0.161565075407191, 0.16814906059237933, 0.16779352461211916, 0.18216528054766024, 0.17298861952051792, 0.1659335513516711, 0.17377774300845283, 0.15387863883850772, 0.11532610343168403, 0.10910301058866256, 0.11849032669552728, 0.11472464184876496, 0.13611284029466209, 0.11678050947498397, 0.10628682615994733, 0.1237427242099084, 0.12292486056665963, 0.1400254640475208, 0.16273599500512015, 0.143986152955921, 0.16011934606827982, 0.14639920530099204, 0.16235637180254126, 0.15533346120938785, 0.17358273657057366, 0.18277724523822958, 0.14195011305864957, 0.14814366909694143, 0.14006577975982915, 0.14101597620439077, 0.14759296606614136, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18503610292107586, 0.1667951941095911, 0.16260726678051018, 0.1596427042756502, 0.15120231260257588, 0.13015053670438304, 0.1613812843339134, 0.16295934309504412, 0.17650083581544018, 0.15693941795478528, 0.15830641076816487, 0.16437324964090405, 0.15010380930287337, 0.19056060544471343, 0.16056147670084042, 0.16855947523118198, 0.17330811266268775, 0.19489746101660943, 0.17491535420318727, 0.19095579478915592, 0.1756356803428245, 0.1865859575895723, 0.21444545881477284, 0.18778676830366448, 0.17594512205278, 0.1899902965379754, 0.19236858845342453, 0.05837440834350471, 0.055609232855595825, 0.06585155299632517, 0.051862156040781704, 0.05898201796580471, 0.05623666335474953, 0.07520281032085718, 0.05501244206054812, 0.05493141837799376]}, "mutation_prompt": null}
{"id": "67d03467-1e88-48e1-b361-a41f398537dc", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.mutation_probability = 0.02\n        self.adaptive_learning_rate = True\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < self.mutation_probability:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation with adaptive learning rate\n                if self.adaptive_learning_rate:\n                    self.learning_rate = max(0.01, self.learning_rate * 0.9)\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                else:\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                self.adaptive_learning_rate = not self.adaptive_learning_rate\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n", "name": "HyperElitistBloom", "description": "Refine HyperElitistBloom with improved mutation strategy and Bloom selection", "configspace": "", "generation": 78, "fitness": 0.09082897156244985, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17773732049899682, 0.17557756982858552, 0.1701150185626864, 0.17720548202496067, 0.18818139055183436, 0.1781674692965205, 0.17855600309273834, 0.16170254751321644, 0.19176164606504265, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042072042754083716, 0.05217572620744959, 0.03687288342163553, 0.04108219964145887, 0.03733416265602396, 0.03948978223329991, 0.05089717883332612, 0.06705949626205798, 0.058711088734964334, 0.02611179044144918, 0.027216920999286187, 0.04813999901158783, 0.027803019802558393, 0.05149776218334523, 0.05733627176909395, 0.03768548859383769, 0.03992308285267243, 0.030221095747072102, 0.08755816108885772, 0.07214237289297343, 0.09087532255642239, 0.08854945841511785, 0.07860079106985451, 0.08637420769729365, 0.08249169773040832, 0.08620909750186001, 0.07939520217306695, 0.07973913569416458, 0.0737309301227781, 0.10171882691615464, 0.06846289200049305, 0.06227510184226048, 0.06130150772388787, 0.09472457566024695, 0.06041163303011765, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.14813209921127768, 0.1021028822797061, 0.09685346092514469, 0.13123694841517808, 0.11751495444986049, 0.13653502471633705, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.0042346526196730405, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008081236604151831, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.059534311121465344, 0.030159438583772458, 0.06302826167861186, 0.02707569422668732, 0.055428706393117144, 0.05405887215860605, 0.05008726726802559, 0.06587324141832673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22081842923052486, 0.20742115403079864, 0.19495588911784612, 0.20551828808175698, 0.18958638502830072, 0.20725100737625135, 0.1998807079546645, 0.1847223648865668, 0.20459703589863465, 0.051837679984955365, 0.03976648888745582, 0.04401887178405428, 0.04316939897542904, 0.040103744330923785, 0.04497470246207902, 0.073263588849099, 0.04395876629650286, 0.04555179045768332, 0.13752837422080533, 0.12785351845343462, 0.14356447416459106, 0.1412797182171618, 0.1368403558889213, 0.13013755749087796, 0.15034187358137718, 0.14861619065631115, 0.13344842845121052, 0.1721877647863279, 0.17507551284074452, 0.17489536994808919, 0.167785167512443, 0.18217591919304577, 0.17698998106342045, 0.16591313548350284, 0.17378124056896904, 0.15396047660056233, 0.11542713793356651, 0.10865677468494617, 0.11195745733950047, 0.11236322132675847, 0.1360361782201326, 0.11677514316785653, 0.10503720808251638, 0.1237427242099084, 0.12292116962782906, 0.1410630187122207, 0.16234373556721327, 0.1583470274596206, 0.1601583581414543, 0.14521568213907665, 0.16236042742370171, 0.15533346120938785, 0.14840681118517007, 0.15384279319850125, 0.13689764972153984, 0.1468309947507812, 0.14296833441663725, 0.14101597620439077, 0.15094275453960493, 0.15282202985716775, 0.14096434603863706, 0.13769980307023377, 0.16207881422481074, 0.2352943383619961, 0.16668914199777796, 0.16657141521439822, 0.1598629674923272, 0.15120231260257588, 0.14125579719357995, 0.16139484817187333, 0.1634028490223587, 0.15775278501236534, 0.1570915835721799, 0.15833462142207844, 0.1252996970539707, 0.150330135465925, 0.18895875270602802, 0.14732547083965442, 0.1609143438768892, 0.1733826927034039, 0.20273494179069218, 0.1758104971665827, 0.19094915976158955, 0.17426353025110453, 0.1758060531819694, 0.191741888119474, 0.18512625848673647, 0.17286854462746237, 0.18934116897119868, 0.20575825394443603, 0.05837429727876675, 0.055437987174766334, 0.06585155299632517, 0.05175880929021204, 0.05934830659822565, 0.055149788191296456, 0.07532283527740746, 0.05520281283212847, 0.06502465111996225]}, "mutation_prompt": null}
{"id": "4bb0da20-d1d1-49f2-a478-82fd59fdf7de", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.mutation_rate = 0.02\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < self.mutation_rate:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate * np.random.uniform(0.5, 1.5), self.dim)\n                self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine HyperElitistBloom with improved mutation strategy and adaptive learning rate", "configspace": "", "generation": 79, "fitness": 0.09085046993743286, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1722989962581849, 0.17578811482102485, 0.17025108521375698, 0.17373418447625577, 0.18694048726873735, 0.17479685791346855, 0.178586124042876, 0.1620531732842283, 0.17056240407503698, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04009109894220653, 0.050071831343454276, 0.03618932539327069, 0.041028703578300574, 0.03592599266742946, 0.03829133748844615, 0.0528437448134802, 0.06702432684758475, 0.05871529291991662, 0.02596330142534442, 0.030929276720888965, 0.04814772207395002, 0.027803019802558393, 0.04908819008595111, 0.05745570959550206, 0.03717132102080245, 0.037505560214326605, 0.029898291447754133, 0.08746944629118047, 0.07416050128751817, 0.09189203825825265, 0.08823664772703377, 0.08032688292695478, 0.08619228197123507, 0.08222559889516068, 0.08554912364485501, 0.07936831697090951, 0.07964440716651155, 0.08043703106553202, 0.10171882691615464, 0.062311795368885425, 0.062276416502640486, 0.054241737511995236, 0.09472457566024695, 0.05599216566574816, 0.09992729358139563, 0.12553619411724048, 0.1931036271947515, 0.1481850439168273, 0.10471519865355927, 0.0958970471106646, 0.1275794276408223, 0.12854715674721684, 0.13160011939730265, 0.11599925472713601, 9.999999999998899e-05, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.002367286420350001, 0.026444004535567944, 9.999999999998899e-05, 9.999999999998899e-05, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04476944405699468, 0.03705090460943139, 0.032530568194916176, 0.055770453722678415, 0.05384063251412319, 0.05008726726802559, 0.06890631954022808, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.2208531097181382, 0.2067868991294226, 0.1944069795717589, 0.2055799784281095, 0.19104919249536056, 0.2064474076815408, 0.1998807079546645, 0.19234946168516986, 0.20266152754384237, 0.05171119559846793, 0.04249946984901731, 0.0449947753848432, 0.04465933240407771, 0.035261468178642064, 0.04437388435586631, 0.073263588849099, 0.04365823249561396, 0.05229792848072812, 0.13752783092736576, 0.12458863027681122, 0.13784669516005854, 0.1412797182171618, 0.14187462631474157, 0.13010567220344382, 0.15034268976310372, 0.14863038778963122, 0.13242968476019779, 0.17183981391304437, 0.1799280467524812, 0.1748809112789248, 0.16777855371232675, 0.18213423507067983, 0.1769925258215006, 0.1663274661860692, 0.17377774300845283, 0.15409503716060302, 0.110631369110615, 0.10414889443547704, 0.11849032669552728, 0.1123738480417984, 0.13608653787180214, 0.12128183241975588, 0.10628682615994733, 0.12367622151883151, 0.12293771269065923, 0.1390668015541191, 0.16235855581528702, 0.1583470274596206, 0.16011240143830796, 0.15046300675698143, 0.15991401980031772, 0.15533346120938785, 0.14474682430323516, 0.18277724523822958, 0.14195011305864957, 0.15103975623244792, 0.1426064404081222, 0.13724058100429903, 0.15174362572251376, 0.14472837911690384, 0.1293903738536819, 0.1417627272157591, 0.16207881422481074, 0.22428759587949987, 0.16610287046968497, 0.16657405568366357, 0.15983288737210166, 0.15120231260257588, 0.1415261592787287, 0.16123349944700727, 0.1649753383275394, 0.177009791509409, 0.15856907401603626, 0.15833462142207844, 0.16490782065451715, 0.15056323184640297, 0.18893103384690324, 0.16045374486843178, 0.16855947523118198, 0.17338328706021022, 0.2028812417861957, 0.17522354183896582, 0.18450448988197532, 0.17585034123885257, 0.17581916467362713, 0.2135181841211985, 0.18369626914092396, 0.17594517963000056, 0.18008703632032264, 0.20580142050155914, 0.05836238587266107, 0.05553470147572048, 0.06585155299632517, 0.05186305593955043, 0.059338854318024103, 0.055762805319362285, 0.07518762782838762, 0.05586596756111717, 0.06149865794822762]}, "mutation_prompt": null}
{"id": "be669509-8356-434c-aa7f-8f99a1862e73", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.ranking_weights = np.array([1 / np.arange(1, self.budget + 1) for _ in range(self.budget)])\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Use a more efficient ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                self.ranking_weights = np.array([1 / rank for rank in ranks])\n                self.ranking_weights /= np.sum(self.ranking_weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += self.ranking_weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and using a more efficient ranking-based selection.", "configspace": "", "generation": 80, "fitness": 0.09094801208981007, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17789668103591194, 0.17580966562879274, 0.1566361895054157, 0.17296879406024546, 0.18669624812898122, 0.18390160742240547, 0.17442313476084603, 0.16656544082528268, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042056387066023104, 0.0524917017396207, 0.03666725201456211, 0.041520496885902536, 0.03588999708295593, 0.03831681727966685, 0.05285572663984606, 0.06760300910247186, 0.05871681645483129, 0.023539790590870524, 0.032508982847686774, 0.04801647149274302, 0.023336136955838138, 0.04926774209271334, 0.05750697626629664, 0.03768548859383769, 0.03455906459891844, 0.02992175574242406, 0.08727608563223732, 0.07415595895120364, 0.09087681026213945, 0.08958477486560934, 0.08032688292695478, 0.08639386840231766, 0.08222559889516068, 0.0785021575201279, 0.0793617331968719, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06463094606462605, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1480974018305644, 0.10272796239914483, 0.09685346092514469, 0.13123694841517808, 0.12323764940347337, 0.1332723542740094, 0.11606696899913349, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.0041982777776030655, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019597111055594918, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056371985725313656, 0.06858859508378334, 0.04476944405699468, 0.06302826167861186, 0.03213393888227367, 0.055770453722678415, 0.05352250470147846, 0.04799109494143394, 0.06634319959542523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22081317662873667, 0.20672818784867852, 0.19480431428609268, 0.2055799784281095, 0.19140058172911734, 0.19408843857435065, 0.19726210125892918, 0.18459411436655315, 0.20408032060320924, 0.05135288541518934, 0.04796231391566397, 0.03444474812224829, 0.0450703549184831, 0.04023515275055267, 0.0360249635600961, 0.07331063933493276, 0.043993360971981255, 0.05229792848072812, 0.13752783092736576, 0.12719140521264982, 0.13748967265565915, 0.14128010848098016, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.1385776653675681, 0.1323742493298965, 0.16781651562403843, 0.17424406676977056, 0.1760473800192245, 0.16763508923187131, 0.16160172199504053, 0.17615457981481208, 0.16587648223820084, 0.17377774300845283, 0.15594777450634578, 0.11519926707905648, 0.10514780266432666, 0.11848233870302993, 0.11166500195598894, 0.1364169527430411, 0.11677110523113277, 0.10628682615994733, 0.12375081471296456, 0.09768436781085366, 0.1410630187122207, 0.16130394836086814, 0.15836281793438212, 0.1632519169617359, 0.14870647865418518, 0.16236042742370171, 0.15533346120938785, 0.17770612088119941, 0.15384279319850125, 0.13689764972153984, 0.1495589532322379, 0.1426064404081222, 0.14101597620439077, 0.14858393177830898, 0.15278421981377122, 0.1402623479731876, 0.14274353795065797, 0.16207881422481074, 0.20790557885867433, 0.16678401072362303, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.14119578717893022, 0.16291246645653323, 0.1634028490223587, 0.17679706994687927, 0.1551960366497478, 0.15801832720595577, 0.16490857035298045, 0.1393020231618286, 0.17749110701831594, 0.15879309240342532, 0.16855992108003626, 0.17350895198823424, 0.2028812417861957, 0.17428430283350227, 0.19094915976158955, 0.17528184425399762, 0.18683568409856555, 0.21366359264933776, 0.18357765369393164, 0.17594512205278, 0.18931345092958796, 0.20573605458854627, 0.05787119614105962, 0.055316900087574505, 0.05601697975191289, 0.051759199018936, 0.05934830659822565, 0.05238645555473598, 0.07564416250887718, 0.05731506276393461, 0.06722742895003064]}, "mutation_prompt": null}
{"id": "27445d07-eacf-4906-ad07-be366aa512d4", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.adaptive_learning_rate = True\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                if random.random() < 0.1:\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * (self.learning_rate if self.adaptive_learning_rate else 0.1), self.dim)\n                    if self.adaptive_learning_rate:\n                        self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Use a ranking-based selection strategy\n            ranks = np.argsort(func(self.population)) + 1\n            weights = np.array([1 / rank for rank in ranks])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and using a ranking-based selection strategy.", "configspace": "", "generation": 81, "fitness": 0.09163963544434289, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1777082548732407, 0.17594010727015486, 0.170257377687277, 0.17354296470587538, 0.18818139055183436, 0.17508645899729836, 0.17441346385331657, 0.16443564116819798, 0.17528646191605168, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04229605905205713, 0.049276925223480816, 0.03645899736273017, 0.04103687420098612, 0.03732066520661048, 0.039406586542902744, 0.05359761852928091, 0.06702432684758475, 0.05828670025368976, 0.025979934130904825, 0.032604142561851956, 0.04745631067285394, 0.027598886402573797, 0.049306130371498, 0.057108622725063785, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.0874600253232184, 0.07239556366394007, 0.08993207927257574, 0.08993769027481613, 0.07865661766151877, 0.08645881092808927, 0.08222559889516068, 0.07847386633219955, 0.07932877981414133, 0.07973913569416458, 0.08044766445567786, 0.09133522032670349, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.06095981113288529, 0.09992729358139563, 0.1245994328371065, 0.19312456703833136, 0.14832015655580055, 0.10369109294893875, 0.09685346092514469, 0.12862377338184738, 0.12621934955123892, 0.1368487698841222, 0.11089859095151022, 0.0043507767599104685, 9.999999999998899e-05, 0.006205422871878197, 0.0006579595894469215, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.017162093656277078, 0.008148577147152003, 0.07076339849031488, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.053412047474108326, 0.05008726726802559, 0.06919972700716259, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.20084548657910528, 0.19470658466002577, 0.20636636813741394, 0.19129739403073154, 0.204662521800152, 0.1998807079546645, 0.20162850674886523, 0.20408032060320924, 0.052335850875398715, 0.04250646008327186, 0.04352238663549357, 0.04656789042975651, 0.04045474754672995, 0.04585851057359247, 0.07171699489235672, 0.04307506709275333, 0.0470398816854779, 0.13747713970120512, 0.1273795545501043, 0.1372168098523947, 0.1412797182171618, 0.14115194246620144, 0.1300961126033624, 0.15034092413924993, 0.14860677634667374, 0.13290265216511343, 0.1720144767230689, 0.16953055071563305, 0.17290949834321578, 0.16779352461211916, 0.16174034296956163, 0.1769533676935987, 0.16244737848268365, 0.17377774300845283, 0.15401147991716857, 0.1147064686340935, 0.10458747765445064, 0.11848942889509084, 0.11258221416043201, 0.13610636039642288, 0.12418556567094619, 0.10023940954519384, 0.11238251853246928, 0.12284117777744119, 0.14100914295794298, 0.16233450221944246, 0.1583530821405046, 0.16521986890603235, 0.14720758808975187, 0.16234691667152656, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.14784756469086657, 0.14305969733450075, 0.14101597620439077, 0.1461563172909497, 0.15282202985716775, 0.14096434603863706, 0.13912440536758108, 0.16207881422481074, 0.27053914946186064, 0.16676200467930136, 0.1665521350181094, 0.1596101679853842, 0.15120231260257588, 0.1376344282012395, 0.1640429359643938, 0.16333831618623573, 0.17650083581544018, 0.15683972041734828, 0.15830641076816487, 0.16492323643944184, 0.15040461678782158, 0.18861751694189788, 0.16045374486843178, 0.16855947523118198, 0.1744588580972526, 0.1985378248945523, 0.17433472821284157, 0.19094915976158955, 0.17565991983341667, 0.18683568409856555, 0.2135749380374129, 0.18421393852491785, 0.1760880070830677, 0.18934354471663717, 0.20568880668582523, 0.05839051450863719, 0.055308284406362374, 0.06585155299632517, 0.0518640202388615, 0.05933018473293139, 0.05180679170533187, 0.07577066390455878, 0.05513605147894629, 0.06311931041852603]}, "mutation_prompt": null}
{"id": "45c052b7-e987-4671-b7d0-8fec661ba3d0", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.k = 10  # Top-k parameter\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                top_k = np.argsort(weights)[-self.k:]\n                new_population = [individual for individual in selected if np.any(np.argsort(weights)[np.where(top_k == np.argsort(weights)[np.where(weights == func(individual))])] == np.where(top_k == np.argsort(weights)[np.where(weights == func(individual))]))]\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and incorporating a novel selection strategy based on the top-k method.", "configspace": "", "generation": 82, "fitness": 0.09084965595746537, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1777139996739341, 0.17590543816897608, 0.17027892622178642, 0.17332724057517457, 0.18818139055183436, 0.17439685940314686, 0.1785685585686897, 0.1673339540688743, 0.19288890680792514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.05284108967261725, 0.036843840851905174, 0.03932534880187433, 0.03730442564320713, 0.03948978223329991, 0.0528437448134802, 0.03975638420206984, 0.05871736326874266, 0.025979934130904825, 0.032508982847686774, 0.04757858297972961, 0.02731774542678833, 0.04926774209271334, 0.027570228192835722, 0.030945835267481514, 0.03992308285267243, 0.029898291447754133, 0.08756992620929882, 0.0740471142753808, 0.08338381781337845, 0.08918797062596384, 0.08032688292695478, 0.08639412375773481, 0.08204106771470465, 0.08620191301472768, 0.0794867719902198, 0.07977306566488218, 0.08098399152919122, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06382139554500499, 0.09472457566024695, 0.06096998643173557, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.14813613676082482, 0.10472738983276764, 0.0959831664632731, 0.13123694841517808, 0.1285381340229509, 0.1369156833460593, 0.10634691883195335, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004312413698463358, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.010809369510698108, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05409057396966943, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03123997910134224, 0.055770453722678415, 0.05324810573379779, 0.05008726726802559, 0.07017540237256636, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082866114699795, 0.20323793901097764, 0.19495588911784612, 0.20597874534055027, 0.19384110513408936, 0.20724700933075846, 0.19987913881451724, 0.18073467513711472, 0.20410437051570984, 0.050606727554913467, 0.04231028239168522, 0.04401887178405428, 0.0432129633974464, 0.04039198851080206, 0.045048314669234424, 0.07398151005238429, 0.044765277623559974, 0.05229792848072812, 0.13752783092736576, 0.12483378832479608, 0.13696618081515322, 0.1412797182171618, 0.13954421638258607, 0.1301244487584312, 0.15034464648132928, 0.1485929717967247, 0.133758718615121, 0.17080313199124741, 0.1595575641615825, 0.17609617900664998, 0.16674072726250178, 0.1811081580323597, 0.1761619556426025, 0.16389836062719498, 0.17377774300845283, 0.15374725507483222, 0.11534321591796037, 0.1047081760180838, 0.11849032669552728, 0.11116130347584674, 0.13610603218022022, 0.122391766531316, 0.10628682615994733, 0.11346585441234747, 0.12322700789486041, 0.1410630187122207, 0.16265526047557155, 0.1583470274596206, 0.16010437829500623, 0.14535131897299614, 0.16241357395180644, 0.15533346120938785, 0.1485494261272362, 0.15384279319850125, 0.14195011305864957, 0.14902535881865042, 0.147155922574563, 0.14101597620439077, 0.14801953364895504, 0.14472837911690384, 0.14096434603863706, 0.13722294172227745, 0.16207881422481074, 0.23743622505499917, 0.1662677939711582, 0.16640664929982008, 0.1596427042756502, 0.15120231260257588, 0.14123456908474274, 0.16127921983618576, 0.15424123792468913, 0.17650083581544018, 0.1579737207096238, 0.15833462142207844, 0.16490498282695387, 0.14909015729017283, 0.18198266700299204, 0.1604548130395289, 0.16857302045952016, 0.1616779090781485, 0.19418853513397172, 0.17428430283350227, 0.18514000189339874, 0.17585034123885257, 0.18683568409856555, 0.21355402347907482, 0.18379246981723363, 0.17625188420117577, 0.18933372406083648, 0.19229599878872328, 0.05858021788484624, 0.055317793090979506, 0.06585155299632517, 0.05186551472311529, 0.05867154739419944, 0.05612074609244988, 0.05510839285705893, 0.05510295041768709, 0.06620614257011637]}, "mutation_prompt": null}
{"id": "38e669fc-b3c0-4a80-908e-9646984060c5", "solution": "import random\nimport numpy as np\nfrom collections import OrderedDict\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.rank_cache = OrderedDict()\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                if random.random() < 0.1:\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Use a more efficient data structure for the population\n            self.population = np.array(new_population)\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n                self.population = np.array(new_population)\n\n    def get_elitist(self):\n        return self.elitist\n", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and using a more efficient data structure for the population.", "configspace": "", "generation": 83, "fitness": 0.09080948917581874, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150799055137356, 0.18672998990906886, 0.1746206357597102, 0.1784545104012052, 0.1645915416098207, 0.1921125120255076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03867374702843862, 0.04841121238072288, 0.036843840851905174, 0.04112916483763307, 0.03732819389649866, 0.03948978223329991, 0.0528437448134802, 0.06695747264652396, 0.058711088734964334, 0.025979934130904825, 0.03198793081749518, 0.04761161119743973, 0.027803019802558393, 0.04926774209271334, 0.0570153721923361, 0.03096864576247227, 0.03821147307613426, 0.030415577972146446, 0.08572185371064811, 0.07356227687560601, 0.08071691201900522, 0.08928584756648361, 0.08032688292695478, 0.08639412375773481, 0.08281090947895553, 0.08620909750186001, 0.07922062566828714, 0.07964440716651155, 0.0766410990221984, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06289453995300442, 0.059720984037351044, 0.060869907721937344, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10057761690261047, 0.09685346092514469, 0.1312678329064585, 0.12578954267465725, 0.1368487698841222, 0.1098184780541056, 0.0043507767599104685, 9.999999999998899e-05, 0.003689195106263865, 0.004191858687826011, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06302826167861186, 0.03165693341080966, 0.055770453722678415, 0.0569586412853208, 0.028815617787927628, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.1978280715082541, 0.18344693861085826, 0.20638099841182922, 0.19083458882518423, 0.20724700933075846, 0.1994418718090213, 0.19998142182355338, 0.20223985467110372, 0.05146213662184618, 0.04250646008327186, 0.04426622781795664, 0.04073117735871712, 0.04054730684591068, 0.045048314669234424, 0.07392131653602918, 0.043805414698616874, 0.05229792848072812, 0.1370941010055503, 0.12831596824213853, 0.13778119130224786, 0.1412797182171618, 0.1418598586230344, 0.13013755749087796, 0.15034155658885906, 0.14861619065631115, 0.13344945606610614, 0.1645821297216653, 0.17062614094330564, 0.1760473800192245, 0.16778648112937478, 0.182171181582632, 0.17706650578887984, 0.1661519830564665, 0.17377782057697388, 0.1537462005649899, 0.11538469550520114, 0.10478167965848628, 0.11261361651446855, 0.11157531437417689, 0.13600053421936154, 0.11665129178519273, 0.10514160804565564, 0.1237427242099084, 0.1229738231946843, 0.1411106040748047, 0.1623606352283148, 0.1583470274596206, 0.15999331778663417, 0.1460914033993166, 0.1620247221457325, 0.15533346120938785, 0.17355151355563359, 0.1827741933285496, 0.13975188906562597, 0.14824364966426307, 0.1426064404081222, 0.14101597620439077, 0.14505391700560066, 0.15568299293254462, 0.14096434603863706, 0.13912440536758108, 0.16207881422481074, 0.20619234831049638, 0.16523549812091154, 0.16655802879100612, 0.15959795821956235, 0.15120479127458186, 0.13728428915709778, 0.16139544552194107, 0.15402084952988648, 0.17650083581544018, 0.1571636558830467, 0.15827599244170654, 0.1624422889749667, 0.1503329020728763, 0.1853624589675631, 0.11566040749394957, 0.16855947523118198, 0.1734235184853431, 0.20287981432775193, 0.1757397014909311, 0.19086916339539295, 0.1760010483181924, 0.1869392413709423, 0.21357333870616357, 0.17784333998288915, 0.17594512205278, 0.1803563926429259, 0.20568880668582523, 0.058475600992075494, 0.055387190129683406, 0.06584714954231208, 0.0518688741740192, 0.05934368475916485, 0.055933964908894684, 0.07532529613519179, 0.05531928749234627, 0.0663836328965639]}, "mutation_prompt": null}
{"id": "333764ac-3df2-4ac1-92fe-010137323e12", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.mutation_std = 0.05\n        self.mutation_rate = 0.02\n        self.adaptive_learning_rate = True\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < self.mutation_rate:  \n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, self.mutation_std * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n                else:\n                    # Introduce a new mutation strategy: use a Laplace mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.laplace(0, self.mutation_std * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n", "name": "HyperElitistBloom", "description": "Refine HyperElitistBloom by introducing a novel mutation strategy and adaptive learning rate for Bloom selection.", "configspace": "", "generation": 84, "fitness": 0.09081962212803993, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17619531845177605, 0.17554132744144557, 0.16998598431962764, 0.17150387971053227, 0.18816874554858243, 0.17530127153307928, 0.17176408475014848, 0.16314666633303299, 0.18799145005959494, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206185514619809, 0.05403188032644668, 0.036843840851905174, 0.041028703578300574, 0.03729185167768223, 0.03948978223329991, 0.05365467777841115, 0.04025047110663438, 0.05757355670212305, 0.025979934130904825, 0.032489164284907, 0.0481463786277756, 0.02289457754955715, 0.04933931603346575, 0.05889290601715125, 0.03768548859383769, 0.040001276422793164, 0.029898291447754133, 0.08764684210295781, 0.0740094300263503, 0.09072024943832802, 0.0883843442399288, 0.08032480506098127, 0.08639412375773481, 0.07975983227719152, 0.08549669145921268, 0.07953539433737222, 0.07973913569416458, 0.07539776241599161, 0.10165761364209647, 0.06835721534745076, 0.06227047813969999, 0.06386795176566118, 0.06430950672301317, 0.057034870011662187, 0.09992729358139563, 0.12075939604628749, 0.19314282768116697, 0.1481850439168273, 0.1036464471063504, 0.09470711266913823, 0.13209028079099028, 0.12643312824770236, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004395242479709349, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.007159387613177359, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04339963781239509, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05332560546558085, 0.05008726726802559, 0.06785116111708012, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22098887569300119, 0.20180749467253245, 0.1949823731364566, 0.2055799784281095, 0.19236219087751805, 0.19413098666641582, 0.1998807079546645, 0.19841999710952585, 0.20408032060320924, 0.0568542115972932, 0.04544947284465084, 0.04464349129072709, 0.04328527662509418, 0.040468239294576214, 0.046009660620107806, 0.073263588849099, 0.043906023735761246, 0.04555179045768332, 0.1370941010055503, 0.12478283215161423, 0.1295232923774201, 0.14122536296943566, 0.14115194246620144, 0.12969125891383881, 0.15079864326455028, 0.1486304015763248, 0.13346229979257174, 0.1718502979300851, 0.1725880023881855, 0.1760473800192245, 0.16896497827532786, 0.18165060341932315, 0.1761524615335246, 0.16601698711764, 0.17377774300845283, 0.15372127542208092, 0.11522966113220334, 0.10428660489509511, 0.1184950428888153, 0.11299621675898563, 0.13679993284486902, 0.11677088133434299, 0.1047405734700314, 0.12367622151883151, 0.12293068463297674, 0.14106590982038691, 0.1628161840228609, 0.1583470274596206, 0.1602997117122299, 0.14701613200792674, 0.15991533877819852, 0.15533346120938785, 0.1763300329939399, 0.18277449390062106, 0.14330392088214972, 0.1494996380458855, 0.1426064404081222, 0.14101597620439077, 0.15028141952806529, 0.1533297993227003, 0.1288504005837171, 0.14175390856222403, 0.16207881422481074, 0.19590256002912942, 0.16679477618376493, 0.16646515270004114, 0.16008150523148457, 0.15120231260257588, 0.1373297163142002, 0.16270729016956953, 0.1634028490223587, 0.1767716553981481, 0.15966216468757044, 0.15833462142207844, 0.1649044291028534, 0.14919342027445837, 0.14990083402068866, 0.14755148998027634, 0.15104452805510482, 0.17344011922706615, 0.2028812417861957, 0.1758643068183754, 0.19094988579570904, 0.17570552550036733, 0.18672745191626094, 0.21371972420531793, 0.18454733041298232, 0.17594583867212477, 0.1893350763784969, 0.20568880668582523, 0.05120737232839978, 0.05534103010846392, 0.06570357825135775, 0.051873910797202716, 0.05934368475916485, 0.055933964908894684, 0.07534410298965499, 0.05176394069967516, 0.055792898462853735]}, "mutation_prompt": null}
{"id": "04e32f4a-638b-48fa-9cae-e1408a1bc799", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.weighted_bloom_selection = False\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a Gaussian mutation\n                self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            # Introduce weighted Bloom selection\n            if self.weighted_bloom_selection:\n                weights = np.array([func(individual) / np.sum(func(selected)) for individual in selected])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n\n# ```", "name": "HyperElitistBloom", "description": "Refine Hyper-Elitist Bloom by introducing a new mutation strategy and improving Bloom selection with adaptive learning rate and weighted Bloom selection.", "configspace": "", "generation": 85, "fitness": 0.09058931794506837, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17809076627641973, 0.1757393501663217, 0.17023971757587275, 0.17248924874537241, 0.18837096690785238, 0.17831322072317757, 0.17814000070630787, 0.1630396179645912, 0.18910480743138847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04207212602765176, 0.04699899934911422, 0.036843840851905174, 0.04064156950490849, 0.03813795207342063, 0.03829133748844615, 0.055957263017236025, 0.06702432684758475, 0.058711088734964334, 0.024490155120993395, 0.028222293664824094, 0.04816796034826043, 0.02400955501086177, 0.05005514443216508, 0.05751807060105907, 0.03768548859383769, 0.04115442337911668, 0.029898291447754133, 0.08746944629118047, 0.07416905128142504, 0.09139321463188987, 0.08822863271431869, 0.08032688292695478, 0.08639361374486831, 0.08222559889516068, 0.08620191301472768, 0.07943824190861992, 0.07973913569416458, 0.08056396010600497, 0.10167293466287575, 0.06424955684119937, 0.062276416502640486, 0.05121394447167349, 0.09472457566024695, 0.0602868878164039, 0.08543464779147658, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10521277203767054, 0.09534014752564546, 0.13127281887155617, 0.122140470486925, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.0042075348643063615, 0.004189550067818515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019597111055594918, 0.008148577147152003, 0.06994091266782543, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 9.999999999998899e-05, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.059534311121465344, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.05604862081703832, 0.05357128662249666, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.2207567769444303, 0.19446561342744573, 0.19495588911784612, 0.20547022936627868, 0.1853864506702495, 0.20720482213314573, 0.1978541516915875, 0.18734815801516214, 0.20445461011275534, 0.05116051455778958, 0.0435025388075474, 0.03386650986131967, 0.04318053323128679, 0.040166123558312394, 0.0360249635600961, 0.07412720497023007, 0.044353732581696614, 0.05229792848072812, 0.13747837757302173, 0.1273795545501043, 0.13724602929279806, 0.14128322374842606, 0.14150137286415665, 0.13013755749087796, 0.15002254123955883, 0.14861619065631115, 0.1338453581186947, 0.17057501423285903, 0.16143611404841463, 0.17290949834321578, 0.15979132974852162, 0.18122072248865095, 0.17625128241436672, 0.1626076030741751, 0.17378576365458553, 0.15328483126971548, 0.11042594352476442, 0.10549087984219918, 0.11849032669552728, 0.1120770539786019, 0.13613687991701207, 0.11576263632501382, 0.10628682615994733, 0.12368593750275936, 0.12291778458993718, 0.1410630187122207, 0.1623351818513984, 0.1583470274596206, 0.15917969209851857, 0.1500512492252124, 0.16236042742370171, 0.15533346120938785, 0.1736056381498836, 0.15369979588288607, 0.14203483431708397, 0.15008919581400382, 0.14172560018676317, 0.14101597620439077, 0.1525765210668697, 0.15318775485072478, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.14647287381872942, 0.16696227099533967, 0.16670724797941816, 0.15963340595931663, 0.15120231260257588, 0.1375139424740912, 0.16136457461812093, 0.1634028490223587, 0.17650083581544018, 0.15622522939228944, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18901055972575742, 0.16050458051345518, 0.15287046228786316, 0.17338125156659556, 0.20253489860253582, 0.16921665737482328, 0.19096778522431324, 0.17583582237962725, 0.18683568409856555, 0.193128094412927, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.05818528321044791, 0.055317793090979506, 0.06584723577991858, 0.05186305593955043, 0.05934830659822565, 0.0533550031798079, 0.07532283527740746, 0.05609578939776916, 0.06411897644582454]}, "mutation_prompt": null}
{"id": "6ad5d45c-fd28-4d23-9829-953ebb17e60a", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.rank_threshold = 0.5\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Use a more efficient ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                threshold = ranks * (1 - self.rank_threshold)\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                weights[threshold > self.budget] = 0\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist\n", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and using a more efficient ranking-based selection.", "configspace": "", "generation": 86, "fitness": 0.09128413253991204, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1778222814805115, 0.1757393501663217, 0.170257377687277, 0.1715228904638949, 0.18820962178276746, 0.17856390702934044, 0.17856730983779512, 0.163134269880142, 0.19251998348138588, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04170703638437867, 0.046808020891165536, 0.03625325266471158, 0.03954953433856767, 0.03732066520661048, 0.03948978223329991, 0.05740327755131036, 0.06699719516763158, 0.058724819834446884, 0.024065358267604253, 0.0324570693024947, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.057845151128126604, 0.037166928424915535, 0.03985306483636997, 0.029763828138413717, 0.08714227387326101, 0.07406070269492138, 0.090875597764843, 0.08885388455962606, 0.080247925986343, 0.08797243758222884, 0.08222559889516068, 0.08576477000569305, 0.07945450442133284, 0.07973913569416458, 0.07276960701342927, 0.10171882691615464, 0.05998945114626131, 0.062276416502640486, 0.06155113199266948, 0.09472457566024695, 0.060811755856236216, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1471823666111619, 0.10380095752139618, 0.09522588960955436, 0.13123694841517808, 0.12991240273090532, 0.136851976501424, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004239748476031147, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019597111055594918, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.027253302044846217, 0.055770453722678415, 0.05874074164714149, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22052662215394392, 0.19303464613965515, 0.19416319882120892, 0.2055799784281095, 0.1905086147592815, 0.2063813952853838, 0.1995685068464892, 0.1902697987499442, 0.2022411665704471, 0.05008228411471993, 0.043982918465730436, 0.04401887178405428, 0.044343907461926735, 0.040382920481982, 0.04601383438054185, 0.073263588849099, 0.04402876699284064, 0.0470398816854779, 0.13752783092736576, 0.1273801562508583, 0.13546656306614657, 0.1412258103004964, 0.14175953439668065, 0.12066309309316436, 0.15032762326119153, 0.1486174689253278, 0.1338453581186947, 0.17164294057360185, 0.17793929313885692, 0.17290949834321578, 0.16779352461211916, 0.18214133962664714, 0.1761786003006528, 0.16709888078849722, 0.17377774300845283, 0.15416430188271457, 0.11538914330459316, 0.10485499787203101, 0.1176742951323273, 0.10978382111388596, 0.13625736853809356, 0.11670057257645172, 0.10628682615994733, 0.113799345369333, 0.12291758393039176, 0.14035052248229418, 0.16193835801596457, 0.15802737224080265, 0.1601583581414543, 0.1481935684608865, 0.1623041932842194, 0.15533346120938785, 0.1759921291774703, 0.18277724523822958, 0.14195011305864957, 0.14776129786800374, 0.1426064404081222, 0.1394146246688457, 0.1521406378775202, 0.15283613071280122, 0.14939057487704344, 0.14175390856222403, 0.16207881422481074, 0.19143641194248162, 0.16617691496395814, 0.166569897309503, 0.1596488316012532, 0.15120231260257588, 0.1411966535145892, 0.167432615409551, 0.1630468621622858, 0.1570547686478332, 0.15623424981809897, 0.15741691701864524, 0.16490498282695387, 0.15032956320032376, 0.1923699029939986, 0.14526897407966188, 0.15275432118423216, 0.1733004519960285, 0.1944265009664956, 0.17573317152079548, 0.19094915976158955, 0.17582254216112347, 0.18683568409856555, 0.2135583999689774, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.05840391358888597, 0.05351898560980439, 0.06585155299632517, 0.05174883844768463, 0.05934830659822565, 0.05562141426891698, 0.07466246828689382, 0.055206201676068156, 0.06016226253418644]}, "mutation_prompt": null}
{"id": "31137cfc-cd72-43ab-909e-b4dd9747d1cb", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine the Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.17771015113270838, 0.1758053463981647, 0.17023645315003377, 0.17154306835689526, 0.18818139055183436, 0.17681990283591242, 0.17856111370070904, 0.16726779740051967, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04207556726031636, 0.04697087702470093, 0.036306714756563996, 0.041862171512963675, 0.03732066520661048, 0.039490777858887105, 0.0528437448134802, 0.06702432684758475, 0.05885000000036089, 0.02596330142534442, 0.032508982847686774, 0.047173722684426544, 0.02731774542678833, 0.04926774209271334, 0.05725483866555392, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.07405764095380296, 0.09090334998711569, 0.07463630204253424, 0.08032688292695478, 0.08639423096144161, 0.08233601937196522, 0.08493853211980973, 0.07927340735718225, 0.07973913569416458, 0.07581526644545722, 0.1017585080336425, 0.06766063929871147, 0.06227708511775232, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12181748543385129, 0.19308637766117165, 0.1481850439168273, 0.10222627129652573, 0.09421732086256707, 0.13123694841517808, 0.12601643877407465, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.0042239259828087405, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459806781505305, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03165693341080966, 0.055770453722678415, 0.05346788063423047, 0.05008726726802559, 0.06987013637261374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.21859353475154375, 0.19697475593165203, 0.1949444965852123, 0.2055799784281095, 0.19167657865037413, 0.20718086299128324, 0.19987913881451724, 0.19879510998330396, 0.20404478989785102, 0.051897922943738406, 0.043921194689327425, 0.04490768288943725, 0.04318053323128679, 0.04045314892761709, 0.046009660620107806, 0.07343783986403629, 0.043805414698616874, 0.05229792848072812, 0.13747837757302173, 0.12460034705241907, 0.1372168098523947, 0.1412797182171618, 0.14115194246620144, 0.12992946471676436, 0.1503424401666703, 0.14353112579929161, 0.12965056993449908, 0.17182383204663798, 0.17036139881629275, 0.1760538438252235, 0.15979132974852162, 0.18214892876424693, 0.176969753445117, 0.16603027692076744, 0.17377774300845283, 0.15364446062397308, 0.11536427207939615, 0.11081632811356412, 0.11851549116698612, 0.1123738480417984, 0.13594672465400925, 0.11671700147935338, 0.10663139043683145, 0.12375838164870023, 0.12291248234139363, 0.1410630187122207, 0.16228521858325162, 0.1583470274596206, 0.162033792745384, 0.14625083391827198, 0.16235648153942261, 0.1548862989057046, 0.1735582960702362, 0.18240255185499854, 0.14195011305864957, 0.14857179162659284, 0.1426064404081222, 0.14101597620439077, 0.15466412946090735, 0.15279227744556179, 0.13961679524412707, 0.13912440536758108, 0.16289374022253233, 0.2457134074930989, 0.16679477618376493, 0.16656824490244904, 0.15964066900415785, 0.15122820773463586, 0.14162835660026363, 0.16225510223660766, 0.16321187645926005, 0.17711856011791827, 0.15829656523808822, 0.15832686156688447, 0.1649475208436475, 0.150330135465925, 0.189356778686262, 0.16045374486843178, 0.16850387486680551, 0.17346200285136326, 0.20287929456730158, 0.17574460147619064, 0.18605873297537667, 0.17584328457004061, 0.18758199336949177, 0.2136811059433117, 0.18595080263409614, 0.1767342551952824, 0.1893326418660214, 0.20568880668582523, 0.058358589503175406, 0.05358905471133257, 0.05616012955903826, 0.05186305593955043, 0.05934830659822565, 0.05593203410477676, 0.07518762782838762, 0.05517383263887443, 0.06060784636763872]}, "mutation_prompt": null}
{"id": "87554635-1879-40ed-8562-672ec1e650b2", "solution": "import random\nimport numpy as np\n\nclass HyperElitistBloom:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.elitist = None\n        self.population = self.initialize_population()\n        self.learning_rate = 0.1\n        self.crowding_distance = 0.5\n\n    def initialize_population(self):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        # Ensure that the first 10% of the population are unique\n        unique_indices = random.sample(range(self.budget), int(self.budget * 0.1))\n        for i in unique_indices:\n            population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n        return population\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Select the best 20% of the population\n            selected = self.population[np.argsort(func(self.population))[:int(0.2 * self.budget)]]\n            # Select the best individual from the selected population\n            best = selected[np.argmin(func(selected))]\n            # Add the best individual to the elitist list\n            if self.elitist is None or np.linalg.norm(best - self.elitist) > 1e-6:\n                self.elitist = best\n            # Replace the worst individual with the new best individual\n            self.population[self.budget - 1] = best\n            # Replace the worst individual in the selected population with a new random individual\n            worst = selected[np.argmax(func(selected))]\n            if random.random() < 0.02:  # 2% chance of mutation\n                # Introduce a new mutation strategy: use a probability-based mutation\n                if random.random() < 0.1:\n                    # Introduce a new mutation strategy: use a Gaussian mutation\n                    self.population[np.argmin(func(self.population))] = best + np.random.normal(0, 0.1 * self.learning_rate, self.dim)\n                    self.learning_rate *= 0.9\n                    # Update the learning rate based on the crowding distance\n                    self.learning_rate *= (1 - self.crowding_distance)\n            # Apply a new \"Bloom\" selection strategy: use a weighted selection\n            weights = np.array([func(individual) for individual in selected])\n            weights /= np.sum(weights)\n            new_population = []\n            for _ in range(self.budget):\n                r = random.random()\n                cumulative_weight = 0\n                for individual in selected:\n                    cumulative_weight += weights[individual]\n                    if cumulative_weight >= r:\n                        new_population.append(individual)\n                        break\n            # Introduce a new selection strategy: use a ranking-based selection\n            if random.random() < 0.01:  # 1% chance of using ranking-based selection\n                ranks = np.argsort(func(self.population)) + 1\n                weights = np.array([1 / rank for rank in ranks])\n                weights /= np.sum(weights)\n                new_population = []\n                for _ in range(self.budget):\n                    r = random.random()\n                    cumulative_weight = 0\n                    for individual in selected:\n                        cumulative_weight += weights[individual]\n                        if cumulative_weight >= r:\n                            new_population.append(individual)\n                            break\n            # Update the crowding distance\n            self.crowding_distance = np.mean(np.linalg.norm(new_population - np.array(new_population)[:, np.newaxis], axis=2))\n            self.crowding_distance = np.maximum(self.crowding_distance, 0)\n            self.crowding_distance /= np.max(self.crowding_distance)\n            self.population = new_population\n\n    def get_elitist(self):\n        return self.elitist", "name": "HyperElitistBloom", "description": "Refine Hyper-Elitist Bloom algorithm by introducing a new mutation strategy and improving the Bloom selection strategy with adaptive learning rate and incorporating a new \"Crowding Distance\" metric.", "configspace": "", "generation": 88, "fitness": 0.09077218299633215, "feedback": "The algorithm HyperElitistBloom got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "96e3c8b8-9d93-4cc1-a635-8550a5f54c28", "metadata": {"aucs": [0.1713468692061908, 0.17573741653254382, 0.170257377687277, 0.17993867610526504, 0.18632782706777584, 0.17459856234560334, 0.1724801346373177, 0.16524452564852332, 0.19111431891656772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039797980861933646, 0.051461628669628, 0.036843840851905174, 0.041028703578300574, 0.03753265988723575, 0.03948978223329991, 0.05275846700300957, 0.03756888379243739, 0.058711088734964334, 0.025902235419872688, 0.032508982847686774, 0.03770689329191368, 0.02731774542678833, 0.04934730834691947, 0.05682297758268018, 0.03075637218676963, 0.03821147307613426, 0.029898291447754133, 0.08735047052633582, 0.07414696996891201, 0.09027524335495252, 0.0881122925128901, 0.08019119467451763, 0.08639412375773481, 0.082228695309425, 0.08620909750186001, 0.0793664381239958, 0.07973913569416458, 0.08057679710005361, 0.10165761364209647, 0.06457425344437506, 0.06058472670551984, 0.06136660702704344, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12181748543385129, 0.19308637766117165, 0.1481850439168273, 0.10364220353130782, 0.09537675572610993, 0.13128840328122093, 0.12699427814354491, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.003689195106263865, 0.004230964458441511, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05576277685090758, 0.06858859508378334, 0.03125543292421662, 0.044669195072529644, 0.03258759184138249, 0.055770453722678415, 0.05220741849370347, 0.0339060597669375, 0.06206724671489283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.2208322959885174, 0.20313975501191783, 0.19540543743119843, 0.20564974119833135, 0.19772688320017395, 0.20724700933075846, 0.19959099984771855, 0.18062908755661633, 0.2041688302600183, 0.05132407857274324, 0.04572792547934201, 0.04401887178405428, 0.04547891141402305, 0.04044270120146887, 0.04578022755974054, 0.07344269399760506, 0.042184921688556254, 0.0470398816854779, 0.13752783092736576, 0.1273795545501043, 0.13687016312891975, 0.14127896780837768, 0.14115057751766613, 0.13013755749087796, 0.15046887708501033, 0.1484302617130384, 0.1337327958150245, 0.17184225051170687, 0.17015528658300227, 0.1760473800192245, 0.15977864085629134, 0.18110284209888017, 0.17697334672518683, 0.16584440223213348, 0.17377774300845283, 0.15368901030901072, 0.11536231249318407, 0.10450394426300813, 0.11261840252160915, 0.11428952994150754, 0.1325980129519052, 0.1167685744282011, 0.10330884445826194, 0.12368777073108927, 0.12290558851420663, 0.14125309792208862, 0.16239595400805806, 0.1583470274596206, 0.16013559143888545, 0.15156526231830014, 0.16235010330139266, 0.1543043755969089, 0.14717769951463655, 0.18277724523822958, 0.14195011305864957, 0.14715291752998005, 0.1426064404081222, 0.14101597620439077, 0.15579127407083304, 0.15312992974907413, 0.14593052921876093, 0.14175390856222403, 0.16207881422481074, 0.1847237424321122, 0.16679477618376493, 0.1665073548270135, 0.1601327457194579, 0.13412805303410114, 0.14159021944082795, 0.16239060618315382, 0.1634028490223587, 0.1763160822704487, 0.1582940058816905, 0.15804933979521485, 0.16501339161306494, 0.14911663902791228, 0.18887862434828562, 0.15842577101969146, 0.1685626852080795, 0.16207525507322684, 0.20278156657399682, 0.1756720348251518, 0.19079229648421547, 0.17584328457004061, 0.18688430081244456, 0.21356967567363905, 0.18331538579837614, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.05120737232839978, 0.05532752957512943, 0.06585155299632517, 0.05177084729344372, 0.05934830659822565, 0.05523330969526519, 0.07561674315446176, 0.055095286991418524, 0.06072943737915504]}, "mutation_prompt": null}
