{"id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 0, "fitness": 0.41566468037020693, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.30.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "ac646071-e6ea-4b7d-b030-8a563bd53f12", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "27ef0ead-ceaa-4657-9f74-aafb5d8cfcf5", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "a42bccc6-66bc-482c-a39d-7dfc33c52b1f", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "0b0d3c51-6eec-4f3b-8ca9-86d20d76a622", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "032e756b-8082-4d25-ae7c-742789f6ec2d", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "0c3be14d-6886-4c43-a3e9-8e0d8abc73a5", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "5fd5e517-07e4-4d55-9db9-e97807a87a83", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "a2ef29c0-d7da-423f-8800-4ccc83364f1b", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "d86a1c8d-cf68-412b-b04f-5431e607b28d", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "fe166da4-8746-4613-aaab-b1acaa0a4745", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def adjust_population_size(self, num_evaluations):\n        if num_evaluations > self.budget / 2:\n            self.population_size = max(10, self.initial_population_size // 2)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n            self.adjust_population_size(num_evaluations)\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced Hybrid GADE with adaptive population size dynamically adjusting based on current convergence to improve exploration-exploitation balance.", "configspace": "", "generation": 10, "fitness": 0.4132028373451051, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.30.", "error": "", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.529452670918749, 0.23701865593625304, 0.15226963241529523, 0.807931284882737, 0.8106791384205068, 0.11025619639443851, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850374, 0.1809547587219974, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.15803909945915962, 0.18114701219821772, 0.313135746214134, 0.14527062094083498, 0.1318087659541467, 0.13954872310543798, 0.159029490300866, 0.14543496240652365, 0.11366024772080874, 0.15390433968659345, 0.11871236535558471, 0.13848806589406992, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094547425008203, 0.20060476078385503, 0.20180344750577484, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.37139707215581486, 0.5610060832509018, 0.2871685751860755, 0.5154460003415493, 0.24738748680339695, 0.5322779280996224, 0.5943309800928898, 0.3671211701114877, 0.43732517225279466, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.1682258850571421, 0.10624248197473751, 0.1648026138767562, 0.20448121139011632, 0.23610716541444476, 0.16975653211875508, 0.565465625652515, 0.2105146032842784, 0.16074086227198037, 0.22931256007173584, 0.13065758107191938, 0.13844652856368866, 0.1540573194214765, 0.14685052683563404, 0.13923557708360734, 0.16398550001576973, 0.1502892871037459, 0.17511524548141078, 0.18025134241681096, 0.11916668184584145, 0.07947496419273337, 0.06484484843281557, 0.7427802348223724, 0.13919105321382763, 0.7670128360452, 0.7188996322721117, 0.24474815553703266, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16825874809701058, 0.13888465753443546, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.183572248214651, 0.5041581368627523, 0.1393879231203795, 0.28608534991562296, 0.094507239925817, 0.09685362081884363, 0.15905123443104818, 0.20400578156971727, 0.12220540299369675, 0.5936328196376679, 0.46179884279317673, 0.6487621529645355, 0.690686899321452, 0.2142397879521346, 0.5907756525715987, 0.3622959125421944, 0.5500151930616227, 0.39691328502151835, 0.8584298791574336, 0.7926599903378545, 0.8760861345676321, 0.864053533031008, 0.742170818208355, 0.7104938141365988, 0.7326902646256146, 0.8670483588318918, 0.7783113425367627, 0.13466815472986005, 0.13049098842096174, 0.1290413984840505, 0.12966065356200906, 0.1463950098182657, 0.13528993888527496, 0.13954200728145438, 0.15024542485058046, 0.17519922006389732, 0.2250222340232303, 0.2682941084140982, 0.28523669247645933, 0.1610926305001632, 0.1954844784118237, 0.19567085726570554, 0.7354042311365043, 0.2846624089215891, 0.5132374566418372, 0.6103057920161641, 0.6887668345368089, 0.7220444334694207, 0.6779711577668478, 0.5869413168430515, 0.6400433714691165, 0.6402250680240793, 0.7238506724213843, 0.7362873896085943, 0.46026876815247064, 0.5635985756535808, 0.5538153889751423, 0.6227104847001771, 0.6518794448648677, 0.5780376123627062, 0.23933427095647597, 0.5672936192970127, 0.29524197880933356, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848110609967963, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.2190387476465605, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7653249244702514, 0.8885022224400614, 0.9124842357491083, 0.5407245301647425, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.22926812065327984, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.10107471097925425, 0.10922088240330008, 0.10454964952896095, 0.08687889794733694, 0.11114844712439498, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "00dacbbf-fb0a-4b67-9485-5eeb9eb4e381", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "1cd26c3e-85f9-44d0-9d6f-4f22e4312f4e", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def adaptive_tuning(self, generation):\n        self.crossover_rate = 0.5 + 0.4 * np.cos((generation / self.budget) * np.pi)  # Adaptive tuning\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        generation = 0\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            self.adaptive_tuning(generation)  # Apply adaptive tuning\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n            generation += 1\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with adaptive parameter tuning for improved convergence in diverse search spaces.", "configspace": "", "generation": 12, "fitness": 0.3786508556365436, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.30.", "error": "", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.902787149356318, 0.8945838874295394, 0.9095531431066431, 0.9026126519629447, 0.900129795981376, 0.90528346689188, 0.8955288920765953, 0.9045372907076457, 0.9026808002772808, 0.15872645961288379, 0.12791952154621955, 0.03184634004816467, 0.8118984123594728, 0.1310701528168302, 0.19904460655580503, 9.999999999998899e-05, 0.8097708182067426, 9.999999999998899e-05, 0.17498475731595953, 0.1618619874190137, 0.1165803374701998, 0.13620110083051773, 0.1634176513346025, 0.12300084712856785, 0.18142304880427096, 0.14879843494515133, 0.1693756889277409, 0.1255435187087196, 0.1295501633178996, 0.128922580452968, 0.1523215397904658, 0.09377957526260816, 0.100789223095755, 0.11463699231589508, 0.10499265525908397, 0.13578572974298364, 0.7349517601740747, 0.19643029147371338, 0.18808345286106465, 0.16070317065586115, 0.3442683610817493, 0.13988048220281435, 0.8982277259245763, 0.9289660654671468, 0.21412390291096173, 0.3154322990328292, 0.23792613294667897, 0.24629122078985966, 0.5618648971563944, 0.49054218635781066, 0.33002379988240227, 0.3245950729417366, 0.28875429429065247, 0.3913954024441363, 0.9163062020164695, 0.9100888572743171, 0.22789919294281946, 0.9153609225099387, 0.9274245383729774, 0.917655773702134, 0.8904862930546292, 0.8995750598283829, 0.9132746766239364, 0.15158792373683772, 0.1294049389141062, 0.1328657215352319, 0.1309529185657724, 0.1589425070498941, 0.16252759589344545, 0.1541557229872056, 0.17478624358376094, 0.22497829326174668, 0.15613466168326717, 0.1527737847539571, 0.14553416807343988, 0.1337609634810515, 0.16491008259465745, 0.15088817715761382, 0.1951957208339602, 0.14143995359651684, 0.16440500381407275, 0.010320634589522482, 0.8088126108613496, 0.18966128441836483, 0.005636201740651048, 0.5657422136004973, 0.10551732711302453, 0.14968877456454377, 0.8114620738244174, 0.8033806221372316, 0.8552565479044845, 0.8410954129965047, 0.8548679949309943, 0.8350105799500941, 0.2099783227266676, 0.2603669429564146, 0.8475134035789973, 0.8540886584033109, 0.8489409871779908, 0.19104902759523457, 0.1428792450561499, 0.29172788015515616, 0.23238762223158616, 0.17696744317010304, 0.20633212667561918, 0.14653070260548196, 0.24240539560242547, 0.1563047115487992, 0.2880934561940517, 0.7456129385708852, 0.4353239342395939, 0.7240514205069537, 0.23563663313361471, 0.24669329145248808, 0.5473997567763779, 0.24111781496469054, 0.4321395213859591, 0.7017039698813421, 0.5647049376141587, 0.5802564315400364, 0.531176259818507, 0.7080572399474135, 0.8767652909481197, 0.8627872757496433, 0.8787634320751988, 0.8837225593766462, 0.1392811214764046, 0.13019462048670594, 0.1372752640682815, 0.17872293070337364, 0.10313705528355532, 0.15119300699386673, 0.14610733806200338, 0.1341575537658931, 0.1294941653368512, 0.7350053800272947, 0.20961151145017065, 0.174217046481685, 0.21556264180133167, 0.2167445608402926, 0.17961398585257737, 0.15713694878448736, 0.27032239547005565, 0.19008156893794204, 0.7327440639238629, 0.7347885717409604, 0.5444899932982028, 0.5961852816227945, 0.5353459289180842, 0.5934619011563966, 0.6928499047633014, 0.4953364779019991, 0.713354559371363, 0.4589557994230776, 0.5607180353214813, 0.4985397940539059, 0.537943019544346, 0.5821577321425001, 0.657473930676657, 0.2789966668169519, 0.6787372645274345, 0.28051843108565744, 0.20115062745780432, 0.21191529080739935, 0.1892311236546339, 0.24043723909276415, 0.2146260970976448, 0.19377382225197903, 0.2497997202119877, 0.19485543178147635, 0.17845831368302256, 0.18825085793929197, 0.21661578200843978, 0.22009628501984146, 0.20113775144862533, 0.20415633541233658, 0.18722018606718493, 0.22110012337125762, 0.1973859154042823, 0.20820935049962697, 0.16436428909687073, 0.8948437270901655, 0.1525050836989309, 0.19867598577480383, 0.19956246084556095, 0.1988503770453628, 0.8905006848269874, 0.161816272731085, 0.9072126702504543, 0.9236443743228065, 0.861021950885346, 0.5474541378792754, 0.920522701516632, 0.15366372299569397, 0.15411041526809455, 0.3424315103143061, 0.8845688400555903, 0.5443309664165761, 0.22712950427193923, 0.23425813622055425, 0.22619532225498684, 0.21526420922746525, 0.18392677987034534, 0.20411273030672816, 0.22252373318281948, 0.19207684418685822, 0.19523528079149632, 0.10190420108971121, 0.11057124759387649, 0.1007843743355572, 0.09992372493518853, 0.1088097486720806, 0.13361648162341966, 0.10213984652491703, 0.1032986620248405, 0.12401056425809054]}, "mutation_prompt": null}
{"id": "38cd977b-4050-453d-a49a-d8877c32682f", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "96ff8e17-f8bf-4696-8b82-6c0b2d52a0bd", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "41292cca-3094-4b25-8a5f-8f19d18c79fd", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "ecd83563-fa05-4456-9398-9302a547b034", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "b86dcfde-f924-4139-8e49-b3881523a9f9", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "3afa3f71-dc81-4ca5-8cff-832c661b10d1", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.adaptive_scale = 0.9  # Added adaptive scaling for mutation\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        # Adjusted mutation: added adaptive scaling\n        mutant = target + self.adaptive_scale * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with refined mutation strategy to improve convergence speed and solution accuracy.", "configspace": "", "generation": 18, "fitness": 0.33508536640005365, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.9173714350386141, 0.9283120125168334, 0.9226933238629069, 0.9265384131370419, 0.9261944900068312, 0.9154980719312554, 0.9256059299064007, 0.9293757846427023, 0.9239422078635358, 0.05680934595355991, 0.01671100843976492, 0.10822108929557495, 0.014491823188310438, 0.05980729904599669, 9.999999999998899e-05, 0.0628419997010633, 0.8486028237399682, 9.999999999998899e-05, 0.7675252899029581, 0.1173654213567139, 0.1821932974901782, 0.14504056526818854, 0.7478037750684797, 0.1545395592630855, 0.1290706069289561, 0.11688329916979623, 0.18328127422813778, 0.12154467204168828, 0.155631191991648, 0.12284284712821825, 0.09615514834186689, 0.1146668055611908, 0.12278166587177652, 0.14306917393777474, 0.11552624805846068, 0.1297773503759425, 0.9652137651873207, 0.3266935064737648, 0.9338052713801658, 0.9321386260520057, 0.953943210724845, 0.2339746011116557, 0.9107277713525782, 0.9693725729800113, 0.9537462314298611, 0.849866347723891, 0.8352893747882025, 0.19874555758907808, 0.8404465955098503, 0.849118472981911, 0.8400343846959976, 0.83934923722578, 0.7686661840582972, 0.42721938103220325, 0.9367156908770309, 0.9292066923980925, 0.17105297969457534, 0.21423801127022002, 0.9144188870287278, 0.28129468253268886, 0.17799648662002188, 0.9409658740195969, 0.18041318073791057, 0.19841801151798288, 0.17663564570462453, 0.008696546357119916, 0.008249798840030631, 0.16620706923106265, 0.03502284685159607, 0.15553425508902818, 0.21967128281794712, 0.5527990120998799, 0.16091184818855842, 0.20320316146751005, 0.13531065315529378, 0.14118056834287784, 0.22582017721296943, 0.15530432868522748, 0.14448545289325176, 0.11892207750582584, 0.15997236936612758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17313671705544498, 0.12178721169853146, 0.06665014610692, 0.11409535712814378, 0.17865696908060258, 0.06445203060017901, 0.11350489989286561, 0.0933317367732378, 0.8692264141688429, 0.2290951917566919, 0.09233939375360911, 0.12259897591758728, 0.5214890406482503, 0.406538679334411, 0.1549146390595919, 0.07522839722219887, 0.043867745842695705, 0.1449607751237585, 0.2005678941358866, 0.08237850236540656, 0.08208920114052565, 0.21745122250958437, 0.1733990167219256, 0.30524939274392193, 0.04549867336952196, 0.24403243220277493, 0.19901779191115465, 0.5806627982991851, 0.16076332107907965, 0.4719331016581215, 0.14438662647726086, 0.21540213835725452, 0.22107342160562582, 0.6425422437846082, 0.5440156657758605, 0.8141914745318197, 0.6495548638922553, 0.8499709274798715, 0.32815019686097846, 0.5828216168334084, 0.9096016059486531, 0.8842532580955648, 0.10761144938860612, 0.14119973749168624, 0.12975537930932202, 0.07774326003353327, 0.10051111788788969, 0.1575812087211339, 0.14266123152723376, 0.16063854230817054, 0.12407129592936794, 0.22853889064291588, 0.7973094058567335, 0.23658208016951354, 0.7995884350745079, 0.24181253859288176, 0.16979685560666857, 0.4432813195251226, 0.2878659405686794, 0.5604755208439836, 0.24857825105234665, 0.4366785057895832, 0.3008534745536554, 0.49715485522193514, 0.5044386255055112, 0.4032341247116069, 0.312998026559523, 0.3994189576807087, 0.5585224761236693, 0.3981963345091981, 0.29702975365747186, 0.32864607627332865, 0.44663199130244136, 0.24286621048907264, 0.387749883372249, 0.2432948166475497, 0.40965111955503597, 0.37348667938844693, 0.2573881079253272, 0.1800431298851548, 0.20562289243287946, 0.2458445852849298, 0.20205031392307926, 0.2726282468333405, 0.25820345222118135, 0.21412769610037607, 0.2101854907899282, 0.20941930116139706, 0.886045447866407, 0.20811037966542445, 0.8668052211415157, 0.201086657894043, 0.20001913925526604, 0.19141119275228013, 0.22381165227002353, 0.25012661947453985, 0.17213846378358577, 0.16862283133602018, 0.15385692447400912, 0.9449029673201219, 0.2003799160671227, 0.1691466119926328, 0.14253631584661886, 0.16463832234086895, 0.16711120343483177, 0.9220612279305581, 0.21307263965571688, 0.07354539031672647, 0.9164180375911772, 0.33735091497629965, 0.16800220174031166, 0.10496354545073061, 0.10450440754611356, 0.16823630923786137, 0.1903096359725518, 0.17914548794657748, 0.17055726411253314, 0.1968805893259965, 0.1871897312919265, 0.17271805058903011, 0.18263489689038814, 0.19215563036597538, 0.16728088763736282, 0.10403053629652492, 0.07759455919696079, 0.09283909697860326, 0.08975274364265629, 0.0920226475500513, 0.0791880933530843, 0.1404800471338522, 0.0767819990207892, 0.09090947331460608]}, "mutation_prompt": null}
{"id": "1ccb8d3f-aaa5-4c6c-9f5c-96a1282572a4", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.initial_mutation_factor = 0.5\n        self.mutation_factor = self.initial_mutation_factor\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        self.mutation_factor *= 0.99  # reduce mutation factor gradually\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with dynamic mutation factor adjustment for improved convergence.", "configspace": "", "generation": 19, "fitness": 0.12056808843401548, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.08.", "error": "", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.30367875169848835, 0.21964056452603797, 0.26429264314386325, 0.22101743248749894, 0.21600481107860992, 0.2720874011477148, 0.24926037690507852, 0.225538852850379, 0.23438392022014531, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11304582819225706, 0.10668938285088303, 0.12322129851922548, 0.12350134390470102, 0.09046533109363686, 0.11217995371125744, 0.12043393013262993, 0.110173359218525, 0.15233503618593836, 0.0908253058484475, 0.09404712536606152, 0.0984143529988869, 0.08721941815988243, 0.08139840681135868, 0.08622301734980009, 0.10997947484902437, 0.103229140459981, 0.07536545467121525, 0.08972548522131163, 0.1268403325750629, 0.09608198115141553, 0.10411181191437757, 0.08534920666308932, 0.08984136258452413, 0.10330144553925547, 0.0988241337017598, 0.10243828181943648, 0.10131771544484469, 0.10461345095127694, 0.06834217653761365, 0.09893206352892381, 0.08876780610612045, 0.04656839807949631, 0.08494383411313888, 0.08882366802738362, 0.12164269508923642, 0.2119419356016191, 0.18218276106046105, 0.17304929767299349, 0.21534482473568373, 0.1699162096420036, 0.1725967602402776, 0.14666196405156529, 0.16723316676569777, 0.1662244338312674, 0.08002993691157878, 0.02063788832567026, 0.09080297535318493, 0.01310465705872188, 0.07554222310008751, 0.002048369444951237, 0.0749537877398454, 0.009341829926739598, 0.0969981003835444, 0.06409635105520173, 0.09388648343269146, 0.06137381043141377, 0.05697175388754827, 0.0672750097540018, 0.08156928058277679, 0.04381730328760769, 0.002574086072195003, 0.06940139865087824, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058929939453526314, 0.04114250613648274, 0.0946272247219958, 0.06461982615456252, 0.02749752616331902, 0.0235761242405772, 0.10452982801125998, 0.12239875567914604, 0.07869035420963466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015574230327817906, 0.02269119889162763, 0.024627578318974108, 0.005009567577802354, 0.0016871673495691963, 0.06541482965858236, 0.011827711282050068, 0.040211842094511674, 0.023259504962584665, 0.2865968456111143, 0.2593227150146572, 0.32771416662028163, 0.22776895787378781, 0.26641942991798206, 0.19338233238714198, 0.27805277925650285, 0.27569113791563604, 0.2529710094033154, 0.06412437669339466, 0.08038088748108041, 0.06476392458497104, 0.05555486919744346, 0.05680078609126504, 0.07143633137793937, 0.04822433506604051, 0.05573095512322257, 0.12378398021427217, 0.15233701341239825, 0.11351915686838221, 0.1640592670897102, 0.21952520114964214, 0.13139761834823838, 0.14613226574019222, 0.14996838624081488, 0.13031946812673945, 0.17414166092297878, 0.17001679599121688, 0.19212730584968207, 0.21748827596980091, 0.2096140547995412, 0.19416441377091198, 0.18502313294897121, 0.17353052509145694, 0.19489563546992617, 0.2060288878886829, 0.1616283404758757, 0.17065877123821882, 0.1552139177172578, 0.13443962664631803, 0.14455580796063272, 0.15838170301727517, 0.11230239581591028, 0.15295880917337235, 0.14866033759286434, 0.1989229356713791, 0.1851506355234669, 0.2080077811294796, 0.18277127659125614, 0.20827585664010662, 0.2130313734601499, 0.17938729842586987, 0.2475222303362662, 0.1856103872713274, 0.17009836052595417, 0.16577823870317532, 0.184733794867031, 0.1783164328540111, 0.18565562809823266, 0.18273388200540375, 0.16837798982729124, 0.21696342980460948, 0.20269067684875586, 0.16789359498608702, 0.17105346680587374, 0.13678228242141854, 0.30738211617343014, 0.18875378232424278, 0.19250011118820864, 0.2217057994506907, 0.24003629341569155, 0.2137765536250057, 0.3033979809169829, 0.33139969658860247, 0.08802130806770347, 0.26871982765010805, 0.14245445849371774, 0.09887204603685074, 0.21069785567774668, 0.18243166164179792, 0.13238139461173326, 0.19434470160583095, 0.1853400596833925, 0.1746032306454377, 0.16847704203426606, 0.18069346908450223, 0.18795565407723336, 0.20829147367325307, 0.17592116849639894, 0.20007488107113336, 0.05819553912963915, 0.05626094210369137, 0.07104153834191529, 0.06830422470516062, 0.08728606436681763, 0.08098023195080328, 0.06193698643419343, 0.07943536901778714, 0.06575741385514122]}, "mutation_prompt": null}
{"id": "deeb465b-51b4-4da9-8dae-d6e743e9edc9", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "b25223d9-fb79-44e2-bf92-74e834b1f520", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "56367ee7-ef26-40fb-a91d-090c07267b83", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "2897764e-8e2d-43c5-bddf-2eab7cdf141b", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.base_crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2, dynamic_crossover_rate):\n        mask = np.random.rand(self.dim) < dynamic_crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n            \n            # Calculate diversity for adaptive crossover rate\n            diversity = np.mean(np.std(self.population, axis=0))\n            dynamic_crossover_rate = self.base_crossover_rate + (0.3 * (1 - diversity))\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2, dynamic_crossover_rate)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < dynamic_crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE by introducing adaptive crossover rate based on population diversity to increase exploration.", "configspace": "", "generation": 23, "fitness": 0.398254624305675, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.30.", "error": "", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8993391322270966, 0.8963019733573455, 0.8973873839662133, 0.8984856263371621, 0.8946968923540849, 0.8997271243375738, 0.8936714900489899, 0.8969108356820616, 0.8855945248621926, 0.13165943018870752, 0.813937193346181, 0.8143047659689036, 0.39983730466579914, 0.2427392608720924, 0.8174245582659095, 0.8142457006490651, 0.30785166918628015, 0.034598938244902455, 0.17295680400517177, 0.1414979395629542, 0.24350478763775651, 0.15637531766561918, 0.17691900524510729, 0.15324743494276172, 0.6753662142516046, 0.23991878633562502, 0.15013841342530754, 0.13888962906087055, 0.1389109778827069, 0.10704707758622112, 0.1210539996158464, 0.10004722179059589, 0.14694559906388116, 0.14358496230666273, 0.13101960276801528, 0.1317616188641758, 0.24058358569846605, 0.9260351672369163, 0.1923308293372057, 0.1707465770435148, 0.2598753099466483, 0.8732215182622148, 0.9149851127733664, 0.36027258779314475, 0.17600203572716544, 0.46631829179718676, 0.2569544048338852, 0.12787748121957976, 0.16223051038618175, 0.2224032770927865, 0.7128076865878206, 0.2819994450662775, 0.4572610389406091, 0.28611753404858575, 0.9166954568391882, 0.8996095709924792, 0.8870350887579502, 0.8512020749289497, 0.9141346615901449, 0.9067770866769265, 0.8572162963820127, 0.35972548165467166, 0.9052961077075201, 0.13541792796771313, 0.1337983688795109, 0.18188627276917668, 0.18439579451159438, 0.7153968085244102, 0.8334417438873651, 0.16203337920210992, 0.2858418693975101, 0.21147688147726762, 0.1624507535055114, 0.22146424438415957, 0.14209732557855237, 0.1608992030421541, 0.13171298981158142, 0.13631007828027264, 0.16688979975324014, 0.17994164802196433, 0.23451472479886437, 0.7991232974297882, 0.12535440010480037, 0.7988368361672458, 0.7824617907800177, 0.13642776438851034, 9.999999999998899e-05, 0.7786052049218035, 0.007415777454670924, 0.10534572981657397, 0.8183674474591873, 0.8154496161456946, 0.8286783485475706, 0.26057246023847125, 0.8046995722983894, 0.2202599762002263, 0.8357933226115697, 0.810848064682795, 0.8151507604786232, 0.2192207645252372, 0.3723599772202185, 0.24028483120671051, 0.1356953335138238, 0.1336256676205103, 0.12083522693960314, 0.28753193437944125, 0.3627657100323045, 0.1554331798891846, 0.24281923054641807, 0.288991951129835, 0.2978332048444656, 0.4103764808646104, 0.36975594576964355, 0.4190650169257881, 0.6563582474765769, 0.7441766076931987, 0.14106875128376417, 0.7827358176694897, 0.7603735252208452, 0.7861207619705814, 0.8716252082247765, 0.6839025425305092, 0.6816346649263283, 0.6278071901249922, 0.629708089558942, 0.6907530870735168, 0.12256114717431776, 0.13395635182701293, 0.15011308644398325, 0.11306236142860848, 0.10508949089465969, 0.11408847782896114, 0.16598087734788658, 0.1445414796775214, 0.13726735927538503, 0.10922586697617376, 0.0969897628244002, 0.23170457769259478, 0.1561509282131025, 0.1471187633473623, 0.16214343208638604, 0.275045603871353, 0.12224433122652556, 0.19167697871746003, 0.6983637047175402, 0.7014785238999659, 0.6722233455741882, 0.5876756327348258, 0.6971833947082886, 0.6078529561001416, 0.6040793506852915, 0.6934929801896562, 0.536898517206037, 0.32119288623639963, 0.5364687105102842, 0.6702061390427714, 0.6608674961073024, 0.5431604849899943, 0.6868101485857769, 0.4227290668373497, 0.6458219232420883, 0.2602476649943325, 0.18415819068980355, 0.20581916748700213, 0.2264391172791297, 0.21838647518201837, 0.2274684323304127, 0.20438296675643897, 0.19311417162315436, 0.19055700921442864, 0.27790840158471586, 0.19713670572710906, 0.18833658699205036, 0.2203711887275588, 0.24552101810445282, 0.23249533818690393, 0.7653097159517377, 0.1895100282113037, 0.2000944167021821, 0.20903828611395636, 0.18319267991442434, 0.11657798047075141, 0.29900734139273477, 0.9130522964728915, 0.9209231122742607, 0.8865906158427989, 0.17415761222086767, 0.16085372840552048, 0.8941018783681505, 0.8899827266145274, 0.20847901948548675, 0.7596718095111308, 0.5185831058849, 0.35375331169049695, 0.15546586372554816, 0.7496755519461478, 0.8740416966195951, 0.3525573454937536, 0.1565355315003948, 0.15356867932189233, 0.19745615309619402, 0.16554993536296747, 0.1871315426238681, 0.16733223613980408, 0.2048118080473884, 0.17990824376074122, 0.1883103197276309, 0.107448893236474, 0.09148988528911117, 0.09448767411349124, 0.09792145118525553, 0.08960896824858133, 0.09961418131180566, 0.10646281975279814, 0.09900289050206679, 0.09399639181800434]}, "mutation_prompt": null}
{"id": "54a6129b-b1ea-459e-be71-f45952b7c1cc", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "20c94f15-b267-4ff1-92b2-5f230e453370", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "bb00d841-10b5-4f4b-8a5d-ce0048ba6bc8", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "6ffd35b0-6de7-4702-8289-35a90054508b", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "d4087e81-9722-4b85-a01e-c7d207c9a5c0", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "586b134e-3e05-4e2a-89aa-e92daf3a1ec6", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "5c8750a1-d2cf-4270-b980-f0970fc6b216", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "8c96a9d0-18cd-4a22-8180-0c40ab3e4753", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "0eb40484-3bbf-4c23-bbc0-7c2e42d10171", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "5774eaff-e1f6-4e31-a3ca-d68694bf3a4a", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "aa4a212d-ccb2-4d33-83ae-c0de3ae4d749", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "bc9f41c1-675e-4933-9b82-3726faeafcc4", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "6d612b42-065a-48a0-a8ee-9730206fb10b", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "07adc22e-b1c0-4114-98e7-6f02014a44a5", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "054a25e0-2f7c-46a4-9975-6a5e03d4aa42", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        adaptive_factor = 1.0 if fitness_improvement > 0 else 0.5\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with dynamic mutation factor adaptation based on fitness improvement rate.", "configspace": "", "generation": 38, "fitness": 0.4377250933995973, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.28.", "error": "", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8492132915369545, 0.8339948169011278, 0.8391794685564861, 0.835524361064498, 0.8369103840181541, 0.8437301179415225, 0.8403805265894344, 0.8372237404946589, 0.8393521398511834, 0.7351295845942787, 0.7250784161647961, 0.7331524603071546, 0.7190647580256416, 0.7306331282986361, 0.7290698609793806, 0.7037558956479038, 0.7011961735491508, 9.999999999998899e-05, 0.1712020039390778, 0.24332986341712248, 0.17658510729109167, 0.17188104154059602, 0.16298825416191487, 0.21624398174081938, 0.26650217418369637, 0.15146971390009079, 0.20715822319524746, 0.15887658169474494, 0.1317860704816488, 0.14118341439038562, 0.16520358517639566, 0.12972793113916414, 0.15676320395612675, 0.16516139472469027, 0.1740261039507328, 0.45793331374768254, 0.9121206817022861, 0.8936173519921569, 0.8787470938696602, 0.9093136261015781, 0.8754747599366927, 0.8963580910141702, 0.9199715387010199, 0.8838356418448509, 0.9293414668345741, 0.6533936761573113, 0.6332826697667994, 0.398808104918146, 0.6286309932762313, 0.5736924518188159, 0.6637267312122479, 0.6080248568227395, 0.534807258795376, 0.647703377751587, 0.3749194053386361, 0.8429413508002622, 0.838478114772491, 0.8404842051352127, 0.8431494684121251, 0.884076485517241, 0.8433186723711441, 0.8274752572392035, 0.8079013293036077, 0.1522511834268322, 0.20271914326589102, 0.16583880781258153, 0.18996166437478146, 0.19810834076701167, 0.23992125840529177, 0.21489409288993688, 0.3093778650418312, 0.14877414771225117, 0.17099116663599512, 0.12875011971711303, 0.1734947245891002, 0.1570043544741344, 0.13944214575131775, 0.17997543112381176, 0.1621997573161309, 0.2127863355502312, 0.1911074466882018, 0.5455304006435429, 0.6037517510443604, 0.6021038767838051, 0.6070601342665787, 0.5658243421027297, 0.5924397983568293, 0.5910265207219347, 0.5831520742199096, 0.6065608488892513, 0.682273346581102, 0.6735920927768431, 0.6883815475657603, 0.6727748392688686, 0.6881335152950329, 0.6632966975107568, 0.7211333150479387, 0.6934863077947405, 0.6932084771525218, 0.2988015644832689, 0.12050873017535357, 0.26528879602659394, 0.277770584212945, 0.47643171066715684, 0.5025214815737942, 0.3294204307383216, 0.3005398398519511, 0.1788950301784593, 0.4858370542298739, 0.4710049538992863, 0.4722727712071534, 0.48483574436437427, 0.47281303327600577, 0.47178527080789545, 0.46394401564187837, 0.44365998440271004, 0.47695225408478614, 0.7890965450005167, 0.7653882956185931, 0.8010917580410066, 0.7895082182310476, 0.7776655048469754, 0.8033441987823478, 0.7945311738674823, 0.7784296786994479, 0.7911491286388521, 0.12538130529629055, 0.14184545506177726, 0.12295836585814646, 0.09921126509055356, 0.09937480481297245, 0.11553773008770718, 0.11741041171130562, 0.13783996222629136, 0.10083983832761101, 0.14163040915102543, 0.14956885268750797, 0.17247514810111875, 0.47570373423448753, 0.30333744155608133, 0.5255210677928647, 0.17483921886145526, 0.13554853362792507, 0.1804626447671671, 0.49167620485166896, 0.4549861334522767, 0.5438632424576586, 0.5108813797483138, 0.5333700375577912, 0.5482025324888318, 0.5318913474236502, 0.5338913533157715, 0.5285247815539549, 0.4137502797930883, 0.4043618227593416, 0.41493740796914225, 0.41133220378455604, 0.40757440779822207, 0.38949976100484507, 0.4013627212598426, 0.45429602239137434, 0.41601390598427634, 0.20604437105464524, 0.20769724950131319, 0.21909626462657183, 0.1732194801213398, 0.20734834336878738, 0.19133130388750064, 0.19392317022760686, 0.2035824237693128, 0.21522349377051975, 0.20802693189450838, 0.20533547511411265, 0.23899255770616823, 0.23952875190570422, 0.19134262529286306, 0.2119897518781214, 0.20450436396410188, 0.21580351103914197, 0.21433560900839776, 0.18209465260347069, 0.8564149857005994, 0.19329505866441787, 0.8782850854618802, 0.8212591932543537, 0.8203696380504073, 0.16548701008300482, 0.7918007146748162, 0.8224263990537473, 0.851076444653438, 0.20990970213086413, 0.8450565997939805, 0.8193954290112153, 0.1622003777444817, 0.7875447567185809, 0.20584911622350743, 0.8227409674784488, 0.2078285406852739, 0.1830639879143411, 0.17916765212836838, 0.17268217517327134, 0.2062463888664049, 0.1867554784524038, 0.18100295793273302, 0.1772582091376146, 0.1670693428390152, 0.17185652769392823, 0.09344913030664759, 0.093098915890647, 0.0930369714910263, 0.08292516399033156, 0.07374357673390208, 0.10290485287788764, 0.08862380519558244, 0.08595106072618419, 0.09040052032723633]}, "mutation_prompt": null}
{"id": "9f91519a-82c0-4d0b-8137-b7a7c512f055", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        tournament_size = 5\n        indices = np.random.choice(self.population_size, tournament_size, replace=False)\n        tournament = self.population[indices]\n        tournament_fitness = self.fitness[indices]\n        return tournament[np.argsort(tournament_fitness)[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        adaptive_factor = 1.0 if fitness_improvement > 0 else 0.5\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Modified HybridGADE with improved parent selection using tournament selection to enhance diversity and convergence.", "configspace": "", "generation": 39, "fitness": 0.4250769465277864, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.30.", "error": "", "parent_id": "054a25e0-2f7c-46a4-9975-6a5e03d4aa42", "metadata": {"aucs": [0.8873624287041926, 0.8810735782107353, 0.8870947326273858, 0.8779954759407123, 0.8818569146183846, 0.8772043218511608, 0.881592194202412, 0.8782778734189575, 0.8741034610370886, 0.7734712551695877, 0.8046196548977534, 0.6922176517532235, 0.7946463954549261, 0.7846032441836985, 0.7773676989341476, 0.7937782628272544, 0.7843064600545955, 0.7870767785519474, 0.11598205632134251, 0.17736213961856906, 0.13006819928315294, 0.15276855060447947, 0.12628752185652503, 0.1256521621301412, 0.14981269650350737, 0.1255920406278339, 0.12445190962142882, 0.10965653421415267, 0.13235158923874546, 0.10924441410135333, 0.12037853385075992, 0.07561985061797205, 0.11096284403131595, 0.0718451734103428, 0.09647301316361423, 0.12452752275564016, 0.944477818114286, 0.9403025867859363, 0.953975979255328, 0.9392250180340915, 0.9390397974024078, 0.9481152670263766, 0.953996338231653, 0.9516475824981673, 0.9386728144427969, 0.28544523851176185, 0.656474851301019, 0.6264596632250664, 0.46381002743743915, 0.5265154133590941, 0.4219625340566586, 0.4531178468213114, 0.5245106556117625, 0.37416487825370015, 0.894947668868434, 0.8997410385044795, 0.3265049586229214, 0.8948295190599596, 0.8899672924050414, 0.2686750943875086, 0.8490555975345375, 0.8536296052387439, 0.8930031719479304, 0.1639392351448674, 0.1582646861802285, 0.14318289025370845, 0.19025367804495996, 0.18347042350071652, 0.18834593624115636, 0.2720764364904048, 0.2178308066347444, 0.15744033755873565, 0.20183376215862148, 0.1358477407324734, 0.16752312255389257, 0.20860994305787128, 0.15969453282381563, 0.1401487674052565, 0.29976237397423433, 0.1305118211725549, 0.14372984003397882, 0.6578829232945356, 0.6069230974525672, 0.6428303761176763, 0.6439196334454713, 0.652335991948815, 0.6237953672455583, 0.648181458285549, 0.6661856817097331, 0.6909917290494586, 0.7519364814252512, 0.7327208531869677, 0.7358125150866174, 0.6134854319957284, 0.7197512867366385, 0.7273692346565596, 0.7506956459658802, 0.7627220011277676, 0.742120472295077, 0.10972497163846251, 0.3337751413952126, 0.10472889532605734, 0.5418247594650325, 0.33839547279412396, 0.46158291244148597, 0.22627779296287864, 0.16489906344995875, 0.18635959903049792, 0.5506441813654526, 0.5748349426343697, 0.5391530429593099, 0.5665915078765624, 0.5855825270567611, 0.5445247073325621, 0.3737962769416683, 0.558108535142144, 0.580739431898444, 0.81969612478988, 0.780864884991661, 0.8437216479059813, 0.8473549062549723, 0.8117425563950968, 0.829523861015847, 0.7948773354867456, 0.48356881600945034, 0.8454241089110196, 0.08237351758068667, 0.11375229950354282, 0.13455790287717284, 0.08097774191830087, 0.07175023879144649, 0.13600787882381937, 0.10869175664952713, 0.12910040994144023, 0.10956931287924221, 0.2768461194106412, 0.19187100567193882, 0.12427354070912444, 0.12681827557800174, 0.14286312172456272, 0.12052166989646307, 0.32572679989041875, 0.20735454159927735, 0.11399652307510966, 0.4100747137266799, 0.3570628067945565, 0.5596997852648498, 0.5565312014140273, 0.4283010201060228, 0.29375630858651225, 0.5369871286823678, 0.5009784307874914, 0.36310651605772515, 0.36003812395135226, 0.4285833563545367, 0.5180877572041644, 0.3976826978052399, 0.255092714555178, 0.38892554647383826, 0.23199364191755845, 0.3538353708946268, 0.30862248610242626, 0.21765160515562165, 0.1647692797327418, 0.1632950458844047, 0.16275374156268918, 0.19355730549311934, 0.165260774449436, 0.2063813427470813, 0.17807412785830223, 0.2146647596627519, 0.1940122450871523, 0.20145180519855144, 0.20529448838378483, 0.22172086648828804, 0.20009155243106547, 0.19458563640788207, 0.20363229116704074, 0.2282712754091717, 0.24924708112360405, 0.18663361888730723, 0.7558517322652591, 0.17464902887341993, 0.9173612948530524, 0.1991735050855189, 0.1976709548259129, 0.898588890299253, 0.891583048860072, 0.9154498197242008, 0.8708262063303447, 0.21148569008023899, 0.20920257042166035, 0.8857211890683104, 0.16687715239657608, 0.8506564630535278, 0.32319566096177854, 0.5379961902047332, 0.211907882984253, 0.18808704951926736, 0.15932069666363435, 0.19902987291003493, 0.1986672367191702, 0.15409580730633077, 0.21089108356308062, 0.15966275599839375, 0.15546672314678256, 0.17075054263516098, 0.06539173709297463, 0.07099206501300281, 0.1190561137194196, 0.04909818288051537, 0.07115257644822703, 0.07575408049840449, 0.07431175216973063, 0.07131221566619317, 0.06722366164638993]}, "mutation_prompt": null}
{"id": "ee022b29-852c-4ddd-90d3-982db217ae51", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        adaptive_factor = 1.0 if fitness_improvement > 0 else 0.5\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with dynamic mutation factor adaptation based on fitness improvement rate.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "054a25e0-2f7c-46a4-9975-6a5e03d4aa42", "metadata": {"aucs": [0.8492132915369545, 0.8339948169011278, 0.8391794685564861, 0.835524361064498, 0.8369103840181541, 0.8437301179415225, 0.8403805265894344, 0.8372237404946589, 0.8393521398511834, 0.7351295845942787, 0.7250784161647961, 0.7331524603071546, 0.7190647580256416, 0.7306331282986361, 0.7290698609793806, 0.7037558956479038, 0.7011961735491508, 9.999999999998899e-05, 0.1712020039390778, 0.24332986341712248, 0.17658510729109167, 0.17188104154059602, 0.16298825416191487, 0.21624398174081938, 0.26650217418369637, 0.15146971390009079, 0.20715822319524746, 0.15887658169474494, 0.1317860704816488, 0.14118341439038562, 0.16520358517639566, 0.12972793113916414, 0.15676320395612675, 0.16516139472469027, 0.1740261039507328, 0.45793331374768254, 0.9121206817022861, 0.8936173519921569, 0.8787470938696602, 0.9093136261015781, 0.8754747599366927, 0.8963580910141702, 0.9199715387010199, 0.8838356418448509, 0.9293414668345741, 0.6533936761573113, 0.6332826697667994, 0.398808104918146, 0.6286309932762313, 0.5736924518188159, 0.6637267312122479, 0.6080248568227395, 0.534807258795376, 0.647703377751587, 0.3749194053386361, 0.8429413508002622, 0.838478114772491, 0.8404842051352127, 0.8431494684121251, 0.884076485517241, 0.8433186723711441, 0.8274752572392035, 0.8079013293036077, 0.1522511834268322, 0.20271914326589102, 0.16583880781258153, 0.18996166437478146, 0.19810834076701167, 0.23992125840529177, 0.21489409288993688, 0.3093778650418312, 0.14877414771225117, 0.17099116663599512, 0.12875011971711303, 0.1734947245891002, 0.1570043544741344, 0.13944214575131775, 0.17997543112381176, 0.1621997573161309, 0.2127863355502312, 0.1911074466882018, 0.5455304006435429, 0.6037517510443604, 0.6021038767838051, 0.6070601342665787, 0.5658243421027297, 0.5924397983568293, 0.5910265207219347, 0.5831520742199096, 0.6065608488892513, 0.682273346581102, 0.6735920927768431, 0.6883815475657603, 0.6727748392688686, 0.6881335152950329, 0.6632966975107568, 0.7211333150479387, 0.6934863077947405, 0.6932084771525218, 0.2988015644832689, 0.12050873017535357, 0.26528879602659394, 0.277770584212945, 0.47643171066715684, 0.5025214815737942, 0.3294204307383216, 0.3005398398519511, 0.1788950301784593, 0.4858370542298739, 0.4710049538992863, 0.4722727712071534, 0.48483574436437427, 0.47281303327600577, 0.47178527080789545, 0.46394401564187837, 0.44365998440271004, 0.47695225408478614, 0.7890965450005167, 0.7653882956185931, 0.8010917580410066, 0.7895082182310476, 0.7776655048469754, 0.8033441987823478, 0.7945311738674823, 0.7784296786994479, 0.7911491286388521, 0.12538130529629055, 0.14184545506177726, 0.12295836585814646, 0.09921126509055356, 0.09937480481297245, 0.11553773008770718, 0.11741041171130562, 0.13783996222629136, 0.10083983832761101, 0.14163040915102543, 0.14956885268750797, 0.17247514810111875, 0.47570373423448753, 0.30333744155608133, 0.5255210677928647, 0.17483921886145526, 0.13554853362792507, 0.1804626447671671, 0.49167620485166896, 0.4549861334522767, 0.5438632424576586, 0.5108813797483138, 0.5333700375577912, 0.5482025324888318, 0.5318913474236502, 0.5338913533157715, 0.5285247815539549, 0.4137502797930883, 0.4043618227593416, 0.41493740796914225, 0.41133220378455604, 0.40757440779822207, 0.38949976100484507, 0.4013627212598426, 0.45429602239137434, 0.41601390598427634, 0.20604437105464524, 0.20769724950131319, 0.21909626462657183, 0.1732194801213398, 0.20734834336878738, 0.19133130388750064, 0.19392317022760686, 0.2035824237693128, 0.21522349377051975, 0.20802693189450838, 0.20533547511411265, 0.23899255770616823, 0.23952875190570422, 0.19134262529286306, 0.2119897518781214, 0.20450436396410188, 0.21580351103914197, 0.21433560900839776, 0.18209465260347069, 0.8564149857005994, 0.19329505866441787, 0.8782850854618802, 0.8212591932543537, 0.8203696380504073, 0.16548701008300482, 0.7918007146748162, 0.8224263990537473, 0.851076444653438, 0.20990970213086413, 0.8450565997939805, 0.8193954290112153, 0.1622003777444817, 0.7875447567185809, 0.20584911622350743, 0.8227409674784488, 0.2078285406852739, 0.1830639879143411, 0.17916765212836838, 0.17268217517327134, 0.2062463888664049, 0.1867554784524038, 0.18100295793273302, 0.1772582091376146, 0.1670693428390152, 0.17185652769392823, 0.09344913030664759, 0.093098915890647, 0.0930369714910263, 0.08292516399033156, 0.07374357673390208, 0.10290485287788764, 0.08862380519558244, 0.08595106072618419, 0.09040052032723633]}, "mutation_prompt": null}
{"id": "80843f7e-56cb-4156-9cc9-95692316222a", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        adaptive_factor = 1.0 if fitness_improvement > 0 else 0.5\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with dynamic mutation factor adaptation based on fitness improvement rate.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "054a25e0-2f7c-46a4-9975-6a5e03d4aa42", "metadata": {"aucs": [0.8492132915369545, 0.8339948169011278, 0.8391794685564861, 0.835524361064498, 0.8369103840181541, 0.8437301179415225, 0.8403805265894344, 0.8372237404946589, 0.8393521398511834, 0.7351295845942787, 0.7250784161647961, 0.7331524603071546, 0.7190647580256416, 0.7306331282986361, 0.7290698609793806, 0.7037558956479038, 0.7011961735491508, 9.999999999998899e-05, 0.1712020039390778, 0.24332986341712248, 0.17658510729109167, 0.17188104154059602, 0.16298825416191487, 0.21624398174081938, 0.26650217418369637, 0.15146971390009079, 0.20715822319524746, 0.15887658169474494, 0.1317860704816488, 0.14118341439038562, 0.16520358517639566, 0.12972793113916414, 0.15676320395612675, 0.16516139472469027, 0.1740261039507328, 0.45793331374768254, 0.9121206817022861, 0.8936173519921569, 0.8787470938696602, 0.9093136261015781, 0.8754747599366927, 0.8963580910141702, 0.9199715387010199, 0.8838356418448509, 0.9293414668345741, 0.6533936761573113, 0.6332826697667994, 0.398808104918146, 0.6286309932762313, 0.5736924518188159, 0.6637267312122479, 0.6080248568227395, 0.534807258795376, 0.647703377751587, 0.3749194053386361, 0.8429413508002622, 0.838478114772491, 0.8404842051352127, 0.8431494684121251, 0.884076485517241, 0.8433186723711441, 0.8274752572392035, 0.8079013293036077, 0.1522511834268322, 0.20271914326589102, 0.16583880781258153, 0.18996166437478146, 0.19810834076701167, 0.23992125840529177, 0.21489409288993688, 0.3093778650418312, 0.14877414771225117, 0.17099116663599512, 0.12875011971711303, 0.1734947245891002, 0.1570043544741344, 0.13944214575131775, 0.17997543112381176, 0.1621997573161309, 0.2127863355502312, 0.1911074466882018, 0.5455304006435429, 0.6037517510443604, 0.6021038767838051, 0.6070601342665787, 0.5658243421027297, 0.5924397983568293, 0.5910265207219347, 0.5831520742199096, 0.6065608488892513, 0.682273346581102, 0.6735920927768431, 0.6883815475657603, 0.6727748392688686, 0.6881335152950329, 0.6632966975107568, 0.7211333150479387, 0.6934863077947405, 0.6932084771525218, 0.2988015644832689, 0.12050873017535357, 0.26528879602659394, 0.277770584212945, 0.47643171066715684, 0.5025214815737942, 0.3294204307383216, 0.3005398398519511, 0.1788950301784593, 0.4858370542298739, 0.4710049538992863, 0.4722727712071534, 0.48483574436437427, 0.47281303327600577, 0.47178527080789545, 0.46394401564187837, 0.44365998440271004, 0.47695225408478614, 0.7890965450005167, 0.7653882956185931, 0.8010917580410066, 0.7895082182310476, 0.7776655048469754, 0.8033441987823478, 0.7945311738674823, 0.7784296786994479, 0.7911491286388521, 0.12538130529629055, 0.14184545506177726, 0.12295836585814646, 0.09921126509055356, 0.09937480481297245, 0.11553773008770718, 0.11741041171130562, 0.13783996222629136, 0.10083983832761101, 0.14163040915102543, 0.14956885268750797, 0.17247514810111875, 0.47570373423448753, 0.30333744155608133, 0.5255210677928647, 0.17483921886145526, 0.13554853362792507, 0.1804626447671671, 0.49167620485166896, 0.4549861334522767, 0.5438632424576586, 0.5108813797483138, 0.5333700375577912, 0.5482025324888318, 0.5318913474236502, 0.5338913533157715, 0.5285247815539549, 0.4137502797930883, 0.4043618227593416, 0.41493740796914225, 0.41133220378455604, 0.40757440779822207, 0.38949976100484507, 0.4013627212598426, 0.45429602239137434, 0.41601390598427634, 0.20604437105464524, 0.20769724950131319, 0.21909626462657183, 0.1732194801213398, 0.20734834336878738, 0.19133130388750064, 0.19392317022760686, 0.2035824237693128, 0.21522349377051975, 0.20802693189450838, 0.20533547511411265, 0.23899255770616823, 0.23952875190570422, 0.19134262529286306, 0.2119897518781214, 0.20450436396410188, 0.21580351103914197, 0.21433560900839776, 0.18209465260347069, 0.8564149857005994, 0.19329505866441787, 0.8782850854618802, 0.8212591932543537, 0.8203696380504073, 0.16548701008300482, 0.7918007146748162, 0.8224263990537473, 0.851076444653438, 0.20990970213086413, 0.8450565997939805, 0.8193954290112153, 0.1622003777444817, 0.7875447567185809, 0.20584911622350743, 0.8227409674784488, 0.2078285406852739, 0.1830639879143411, 0.17916765212836838, 0.17268217517327134, 0.2062463888664049, 0.1867554784524038, 0.18100295793273302, 0.1772582091376146, 0.1670693428390152, 0.17185652769392823, 0.09344913030664759, 0.093098915890647, 0.0930369714910263, 0.08292516399033156, 0.07374357673390208, 0.10290485287788764, 0.08862380519558244, 0.08595106072618419, 0.09040052032723633]}, "mutation_prompt": null}
{"id": "e8916318-721c-40e2-8de1-c5af09d8ec26", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        adaptive_factor = 1.0 if fitness_improvement > 0 else 0.5\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with dynamic mutation factor adaptation based on fitness improvement rate.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "054a25e0-2f7c-46a4-9975-6a5e03d4aa42", "metadata": {"aucs": [0.8492132915369545, 0.8339948169011278, 0.8391794685564861, 0.835524361064498, 0.8369103840181541, 0.8437301179415225, 0.8403805265894344, 0.8372237404946589, 0.8393521398511834, 0.7351295845942787, 0.7250784161647961, 0.7331524603071546, 0.7190647580256416, 0.7306331282986361, 0.7290698609793806, 0.7037558956479038, 0.7011961735491508, 9.999999999998899e-05, 0.1712020039390778, 0.24332986341712248, 0.17658510729109167, 0.17188104154059602, 0.16298825416191487, 0.21624398174081938, 0.26650217418369637, 0.15146971390009079, 0.20715822319524746, 0.15887658169474494, 0.1317860704816488, 0.14118341439038562, 0.16520358517639566, 0.12972793113916414, 0.15676320395612675, 0.16516139472469027, 0.1740261039507328, 0.45793331374768254, 0.9121206817022861, 0.8936173519921569, 0.8787470938696602, 0.9093136261015781, 0.8754747599366927, 0.8963580910141702, 0.9199715387010199, 0.8838356418448509, 0.9293414668345741, 0.6533936761573113, 0.6332826697667994, 0.398808104918146, 0.6286309932762313, 0.5736924518188159, 0.6637267312122479, 0.6080248568227395, 0.534807258795376, 0.647703377751587, 0.3749194053386361, 0.8429413508002622, 0.838478114772491, 0.8404842051352127, 0.8431494684121251, 0.884076485517241, 0.8433186723711441, 0.8274752572392035, 0.8079013293036077, 0.1522511834268322, 0.20271914326589102, 0.16583880781258153, 0.18996166437478146, 0.19810834076701167, 0.23992125840529177, 0.21489409288993688, 0.3093778650418312, 0.14877414771225117, 0.17099116663599512, 0.12875011971711303, 0.1734947245891002, 0.1570043544741344, 0.13944214575131775, 0.17997543112381176, 0.1621997573161309, 0.2127863355502312, 0.1911074466882018, 0.5455304006435429, 0.6037517510443604, 0.6021038767838051, 0.6070601342665787, 0.5658243421027297, 0.5924397983568293, 0.5910265207219347, 0.5831520742199096, 0.6065608488892513, 0.682273346581102, 0.6735920927768431, 0.6883815475657603, 0.6727748392688686, 0.6881335152950329, 0.6632966975107568, 0.7211333150479387, 0.6934863077947405, 0.6932084771525218, 0.2988015644832689, 0.12050873017535357, 0.26528879602659394, 0.277770584212945, 0.47643171066715684, 0.5025214815737942, 0.3294204307383216, 0.3005398398519511, 0.1788950301784593, 0.4858370542298739, 0.4710049538992863, 0.4722727712071534, 0.48483574436437427, 0.47281303327600577, 0.47178527080789545, 0.46394401564187837, 0.44365998440271004, 0.47695225408478614, 0.7890965450005167, 0.7653882956185931, 0.8010917580410066, 0.7895082182310476, 0.7776655048469754, 0.8033441987823478, 0.7945311738674823, 0.7784296786994479, 0.7911491286388521, 0.12538130529629055, 0.14184545506177726, 0.12295836585814646, 0.09921126509055356, 0.09937480481297245, 0.11553773008770718, 0.11741041171130562, 0.13783996222629136, 0.10083983832761101, 0.14163040915102543, 0.14956885268750797, 0.17247514810111875, 0.47570373423448753, 0.30333744155608133, 0.5255210677928647, 0.17483921886145526, 0.13554853362792507, 0.1804626447671671, 0.49167620485166896, 0.4549861334522767, 0.5438632424576586, 0.5108813797483138, 0.5333700375577912, 0.5482025324888318, 0.5318913474236502, 0.5338913533157715, 0.5285247815539549, 0.4137502797930883, 0.4043618227593416, 0.41493740796914225, 0.41133220378455604, 0.40757440779822207, 0.38949976100484507, 0.4013627212598426, 0.45429602239137434, 0.41601390598427634, 0.20604437105464524, 0.20769724950131319, 0.21909626462657183, 0.1732194801213398, 0.20734834336878738, 0.19133130388750064, 0.19392317022760686, 0.2035824237693128, 0.21522349377051975, 0.20802693189450838, 0.20533547511411265, 0.23899255770616823, 0.23952875190570422, 0.19134262529286306, 0.2119897518781214, 0.20450436396410188, 0.21580351103914197, 0.21433560900839776, 0.18209465260347069, 0.8564149857005994, 0.19329505866441787, 0.8782850854618802, 0.8212591932543537, 0.8203696380504073, 0.16548701008300482, 0.7918007146748162, 0.8224263990537473, 0.851076444653438, 0.20990970213086413, 0.8450565997939805, 0.8193954290112153, 0.1622003777444817, 0.7875447567185809, 0.20584911622350743, 0.8227409674784488, 0.2078285406852739, 0.1830639879143411, 0.17916765212836838, 0.17268217517327134, 0.2062463888664049, 0.1867554784524038, 0.18100295793273302, 0.1772582091376146, 0.1670693428390152, 0.17185652769392823, 0.09344913030664759, 0.093098915890647, 0.0930369714910263, 0.08292516399033156, 0.07374357673390208, 0.10290485287788764, 0.08862380519558244, 0.08595106072618419, 0.09040052032723633]}, "mutation_prompt": null}
{"id": "4bbca9e1-3d04-45fa-86ff-a44a2324de15", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        adaptive_factor = 1.0 if fitness_improvement > 0 else 0.5\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with dynamic mutation factor adaptation based on fitness improvement rate.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "054a25e0-2f7c-46a4-9975-6a5e03d4aa42", "metadata": {"aucs": [0.8492132915369545, 0.8339948169011278, 0.8391794685564861, 0.835524361064498, 0.8369103840181541, 0.8437301179415225, 0.8403805265894344, 0.8372237404946589, 0.8393521398511834, 0.7351295845942787, 0.7250784161647961, 0.7331524603071546, 0.7190647580256416, 0.7306331282986361, 0.7290698609793806, 0.7037558956479038, 0.7011961735491508, 9.999999999998899e-05, 0.1712020039390778, 0.24332986341712248, 0.17658510729109167, 0.17188104154059602, 0.16298825416191487, 0.21624398174081938, 0.26650217418369637, 0.15146971390009079, 0.20715822319524746, 0.15887658169474494, 0.1317860704816488, 0.14118341439038562, 0.16520358517639566, 0.12972793113916414, 0.15676320395612675, 0.16516139472469027, 0.1740261039507328, 0.45793331374768254, 0.9121206817022861, 0.8936173519921569, 0.8787470938696602, 0.9093136261015781, 0.8754747599366927, 0.8963580910141702, 0.9199715387010199, 0.8838356418448509, 0.9293414668345741, 0.6533936761573113, 0.6332826697667994, 0.398808104918146, 0.6286309932762313, 0.5736924518188159, 0.6637267312122479, 0.6080248568227395, 0.534807258795376, 0.647703377751587, 0.3749194053386361, 0.8429413508002622, 0.838478114772491, 0.8404842051352127, 0.8431494684121251, 0.884076485517241, 0.8433186723711441, 0.8274752572392035, 0.8079013293036077, 0.1522511834268322, 0.20271914326589102, 0.16583880781258153, 0.18996166437478146, 0.19810834076701167, 0.23992125840529177, 0.21489409288993688, 0.3093778650418312, 0.14877414771225117, 0.17099116663599512, 0.12875011971711303, 0.1734947245891002, 0.1570043544741344, 0.13944214575131775, 0.17997543112381176, 0.1621997573161309, 0.2127863355502312, 0.1911074466882018, 0.5455304006435429, 0.6037517510443604, 0.6021038767838051, 0.6070601342665787, 0.5658243421027297, 0.5924397983568293, 0.5910265207219347, 0.5831520742199096, 0.6065608488892513, 0.682273346581102, 0.6735920927768431, 0.6883815475657603, 0.6727748392688686, 0.6881335152950329, 0.6632966975107568, 0.7211333150479387, 0.6934863077947405, 0.6932084771525218, 0.2988015644832689, 0.12050873017535357, 0.26528879602659394, 0.277770584212945, 0.47643171066715684, 0.5025214815737942, 0.3294204307383216, 0.3005398398519511, 0.1788950301784593, 0.4858370542298739, 0.4710049538992863, 0.4722727712071534, 0.48483574436437427, 0.47281303327600577, 0.47178527080789545, 0.46394401564187837, 0.44365998440271004, 0.47695225408478614, 0.7890965450005167, 0.7653882956185931, 0.8010917580410066, 0.7895082182310476, 0.7776655048469754, 0.8033441987823478, 0.7945311738674823, 0.7784296786994479, 0.7911491286388521, 0.12538130529629055, 0.14184545506177726, 0.12295836585814646, 0.09921126509055356, 0.09937480481297245, 0.11553773008770718, 0.11741041171130562, 0.13783996222629136, 0.10083983832761101, 0.14163040915102543, 0.14956885268750797, 0.17247514810111875, 0.47570373423448753, 0.30333744155608133, 0.5255210677928647, 0.17483921886145526, 0.13554853362792507, 0.1804626447671671, 0.49167620485166896, 0.4549861334522767, 0.5438632424576586, 0.5108813797483138, 0.5333700375577912, 0.5482025324888318, 0.5318913474236502, 0.5338913533157715, 0.5285247815539549, 0.4137502797930883, 0.4043618227593416, 0.41493740796914225, 0.41133220378455604, 0.40757440779822207, 0.38949976100484507, 0.4013627212598426, 0.45429602239137434, 0.41601390598427634, 0.20604437105464524, 0.20769724950131319, 0.21909626462657183, 0.1732194801213398, 0.20734834336878738, 0.19133130388750064, 0.19392317022760686, 0.2035824237693128, 0.21522349377051975, 0.20802693189450838, 0.20533547511411265, 0.23899255770616823, 0.23952875190570422, 0.19134262529286306, 0.2119897518781214, 0.20450436396410188, 0.21580351103914197, 0.21433560900839776, 0.18209465260347069, 0.8564149857005994, 0.19329505866441787, 0.8782850854618802, 0.8212591932543537, 0.8203696380504073, 0.16548701008300482, 0.7918007146748162, 0.8224263990537473, 0.851076444653438, 0.20990970213086413, 0.8450565997939805, 0.8193954290112153, 0.1622003777444817, 0.7875447567185809, 0.20584911622350743, 0.8227409674784488, 0.2078285406852739, 0.1830639879143411, 0.17916765212836838, 0.17268217517327134, 0.2062463888664049, 0.1867554784524038, 0.18100295793273302, 0.1772582091376146, 0.1670693428390152, 0.17185652769392823, 0.09344913030664759, 0.093098915890647, 0.0930369714910263, 0.08292516399033156, 0.07374357673390208, 0.10290485287788764, 0.08862380519558244, 0.08595106072618419, 0.09040052032723633]}, "mutation_prompt": null}
{"id": "48e9b7a2-6c77-4344-8e0b-c61398369012", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        adaptive_factor = 1.0 if fitness_improvement > 0 else 0.5\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with dynamic mutation factor adaptation based on fitness improvement rate.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "054a25e0-2f7c-46a4-9975-6a5e03d4aa42", "metadata": {"aucs": [0.8492132915369545, 0.8339948169011278, 0.8391794685564861, 0.835524361064498, 0.8369103840181541, 0.8437301179415225, 0.8403805265894344, 0.8372237404946589, 0.8393521398511834, 0.7351295845942787, 0.7250784161647961, 0.7331524603071546, 0.7190647580256416, 0.7306331282986361, 0.7290698609793806, 0.7037558956479038, 0.7011961735491508, 9.999999999998899e-05, 0.1712020039390778, 0.24332986341712248, 0.17658510729109167, 0.17188104154059602, 0.16298825416191487, 0.21624398174081938, 0.26650217418369637, 0.15146971390009079, 0.20715822319524746, 0.15887658169474494, 0.1317860704816488, 0.14118341439038562, 0.16520358517639566, 0.12972793113916414, 0.15676320395612675, 0.16516139472469027, 0.1740261039507328, 0.45793331374768254, 0.9121206817022861, 0.8936173519921569, 0.8787470938696602, 0.9093136261015781, 0.8754747599366927, 0.8963580910141702, 0.9199715387010199, 0.8838356418448509, 0.9293414668345741, 0.6533936761573113, 0.6332826697667994, 0.398808104918146, 0.6286309932762313, 0.5736924518188159, 0.6637267312122479, 0.6080248568227395, 0.534807258795376, 0.647703377751587, 0.3749194053386361, 0.8429413508002622, 0.838478114772491, 0.8404842051352127, 0.8431494684121251, 0.884076485517241, 0.8433186723711441, 0.8274752572392035, 0.8079013293036077, 0.1522511834268322, 0.20271914326589102, 0.16583880781258153, 0.18996166437478146, 0.19810834076701167, 0.23992125840529177, 0.21489409288993688, 0.3093778650418312, 0.14877414771225117, 0.17099116663599512, 0.12875011971711303, 0.1734947245891002, 0.1570043544741344, 0.13944214575131775, 0.17997543112381176, 0.1621997573161309, 0.2127863355502312, 0.1911074466882018, 0.5455304006435429, 0.6037517510443604, 0.6021038767838051, 0.6070601342665787, 0.5658243421027297, 0.5924397983568293, 0.5910265207219347, 0.5831520742199096, 0.6065608488892513, 0.682273346581102, 0.6735920927768431, 0.6883815475657603, 0.6727748392688686, 0.6881335152950329, 0.6632966975107568, 0.7211333150479387, 0.6934863077947405, 0.6932084771525218, 0.2988015644832689, 0.12050873017535357, 0.26528879602659394, 0.277770584212945, 0.47643171066715684, 0.5025214815737942, 0.3294204307383216, 0.3005398398519511, 0.1788950301784593, 0.4858370542298739, 0.4710049538992863, 0.4722727712071534, 0.48483574436437427, 0.47281303327600577, 0.47178527080789545, 0.46394401564187837, 0.44365998440271004, 0.47695225408478614, 0.7890965450005167, 0.7653882956185931, 0.8010917580410066, 0.7895082182310476, 0.7776655048469754, 0.8033441987823478, 0.7945311738674823, 0.7784296786994479, 0.7911491286388521, 0.12538130529629055, 0.14184545506177726, 0.12295836585814646, 0.09921126509055356, 0.09937480481297245, 0.11553773008770718, 0.11741041171130562, 0.13783996222629136, 0.10083983832761101, 0.14163040915102543, 0.14956885268750797, 0.17247514810111875, 0.47570373423448753, 0.30333744155608133, 0.5255210677928647, 0.17483921886145526, 0.13554853362792507, 0.1804626447671671, 0.49167620485166896, 0.4549861334522767, 0.5438632424576586, 0.5108813797483138, 0.5333700375577912, 0.5482025324888318, 0.5318913474236502, 0.5338913533157715, 0.5285247815539549, 0.4137502797930883, 0.4043618227593416, 0.41493740796914225, 0.41133220378455604, 0.40757440779822207, 0.38949976100484507, 0.4013627212598426, 0.45429602239137434, 0.41601390598427634, 0.20604437105464524, 0.20769724950131319, 0.21909626462657183, 0.1732194801213398, 0.20734834336878738, 0.19133130388750064, 0.19392317022760686, 0.2035824237693128, 0.21522349377051975, 0.20802693189450838, 0.20533547511411265, 0.23899255770616823, 0.23952875190570422, 0.19134262529286306, 0.2119897518781214, 0.20450436396410188, 0.21580351103914197, 0.21433560900839776, 0.18209465260347069, 0.8564149857005994, 0.19329505866441787, 0.8782850854618802, 0.8212591932543537, 0.8203696380504073, 0.16548701008300482, 0.7918007146748162, 0.8224263990537473, 0.851076444653438, 0.20990970213086413, 0.8450565997939805, 0.8193954290112153, 0.1622003777444817, 0.7875447567185809, 0.20584911622350743, 0.8227409674784488, 0.2078285406852739, 0.1830639879143411, 0.17916765212836838, 0.17268217517327134, 0.2062463888664049, 0.1867554784524038, 0.18100295793273302, 0.1772582091376146, 0.1670693428390152, 0.17185652769392823, 0.09344913030664759, 0.093098915890647, 0.0930369714910263, 0.08292516399033156, 0.07374357673390208, 0.10290485287788764, 0.08862380519558244, 0.08595106072618419, 0.09040052032723633]}, "mutation_prompt": null}
{"id": "3b3368bd-48b7-4e2a-ba73-8467d23c028d", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        adaptive_factor = 1.0 if fitness_improvement > 0 else 0.5\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with dynamic mutation factor adaptation based on fitness improvement rate.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "054a25e0-2f7c-46a4-9975-6a5e03d4aa42", "metadata": {"aucs": [0.8492132915369545, 0.8339948169011278, 0.8391794685564861, 0.835524361064498, 0.8369103840181541, 0.8437301179415225, 0.8403805265894344, 0.8372237404946589, 0.8393521398511834, 0.7351295845942787, 0.7250784161647961, 0.7331524603071546, 0.7190647580256416, 0.7306331282986361, 0.7290698609793806, 0.7037558956479038, 0.7011961735491508, 9.999999999998899e-05, 0.1712020039390778, 0.24332986341712248, 0.17658510729109167, 0.17188104154059602, 0.16298825416191487, 0.21624398174081938, 0.26650217418369637, 0.15146971390009079, 0.20715822319524746, 0.15887658169474494, 0.1317860704816488, 0.14118341439038562, 0.16520358517639566, 0.12972793113916414, 0.15676320395612675, 0.16516139472469027, 0.1740261039507328, 0.45793331374768254, 0.9121206817022861, 0.8936173519921569, 0.8787470938696602, 0.9093136261015781, 0.8754747599366927, 0.8963580910141702, 0.9199715387010199, 0.8838356418448509, 0.9293414668345741, 0.6533936761573113, 0.6332826697667994, 0.398808104918146, 0.6286309932762313, 0.5736924518188159, 0.6637267312122479, 0.6080248568227395, 0.534807258795376, 0.647703377751587, 0.3749194053386361, 0.8429413508002622, 0.838478114772491, 0.8404842051352127, 0.8431494684121251, 0.884076485517241, 0.8433186723711441, 0.8274752572392035, 0.8079013293036077, 0.1522511834268322, 0.20271914326589102, 0.16583880781258153, 0.18996166437478146, 0.19810834076701167, 0.23992125840529177, 0.21489409288993688, 0.3093778650418312, 0.14877414771225117, 0.17099116663599512, 0.12875011971711303, 0.1734947245891002, 0.1570043544741344, 0.13944214575131775, 0.17997543112381176, 0.1621997573161309, 0.2127863355502312, 0.1911074466882018, 0.5455304006435429, 0.6037517510443604, 0.6021038767838051, 0.6070601342665787, 0.5658243421027297, 0.5924397983568293, 0.5910265207219347, 0.5831520742199096, 0.6065608488892513, 0.682273346581102, 0.6735920927768431, 0.6883815475657603, 0.6727748392688686, 0.6881335152950329, 0.6632966975107568, 0.7211333150479387, 0.6934863077947405, 0.6932084771525218, 0.2988015644832689, 0.12050873017535357, 0.26528879602659394, 0.277770584212945, 0.47643171066715684, 0.5025214815737942, 0.3294204307383216, 0.3005398398519511, 0.1788950301784593, 0.4858370542298739, 0.4710049538992863, 0.4722727712071534, 0.48483574436437427, 0.47281303327600577, 0.47178527080789545, 0.46394401564187837, 0.44365998440271004, 0.47695225408478614, 0.7890965450005167, 0.7653882956185931, 0.8010917580410066, 0.7895082182310476, 0.7776655048469754, 0.8033441987823478, 0.7945311738674823, 0.7784296786994479, 0.7911491286388521, 0.12538130529629055, 0.14184545506177726, 0.12295836585814646, 0.09921126509055356, 0.09937480481297245, 0.11553773008770718, 0.11741041171130562, 0.13783996222629136, 0.10083983832761101, 0.14163040915102543, 0.14956885268750797, 0.17247514810111875, 0.47570373423448753, 0.30333744155608133, 0.5255210677928647, 0.17483921886145526, 0.13554853362792507, 0.1804626447671671, 0.49167620485166896, 0.4549861334522767, 0.5438632424576586, 0.5108813797483138, 0.5333700375577912, 0.5482025324888318, 0.5318913474236502, 0.5338913533157715, 0.5285247815539549, 0.4137502797930883, 0.4043618227593416, 0.41493740796914225, 0.41133220378455604, 0.40757440779822207, 0.38949976100484507, 0.4013627212598426, 0.45429602239137434, 0.41601390598427634, 0.20604437105464524, 0.20769724950131319, 0.21909626462657183, 0.1732194801213398, 0.20734834336878738, 0.19133130388750064, 0.19392317022760686, 0.2035824237693128, 0.21522349377051975, 0.20802693189450838, 0.20533547511411265, 0.23899255770616823, 0.23952875190570422, 0.19134262529286306, 0.2119897518781214, 0.20450436396410188, 0.21580351103914197, 0.21433560900839776, 0.18209465260347069, 0.8564149857005994, 0.19329505866441787, 0.8782850854618802, 0.8212591932543537, 0.8203696380504073, 0.16548701008300482, 0.7918007146748162, 0.8224263990537473, 0.851076444653438, 0.20990970213086413, 0.8450565997939805, 0.8193954290112153, 0.1622003777444817, 0.7875447567185809, 0.20584911622350743, 0.8227409674784488, 0.2078285406852739, 0.1830639879143411, 0.17916765212836838, 0.17268217517327134, 0.2062463888664049, 0.1867554784524038, 0.18100295793273302, 0.1772582091376146, 0.1670693428390152, 0.17185652769392823, 0.09344913030664759, 0.093098915890647, 0.0930369714910263, 0.08292516399033156, 0.07374357673390208, 0.10290485287788764, 0.08862380519558244, 0.08595106072618419, 0.09040052032723633]}, "mutation_prompt": null}
{"id": "723b66af-fad6-48c6-bf21-ff3ab748eeb0", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        adaptive_factor = 1.0 if fitness_improvement > 0 else 0.5\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with dynamic mutation factor adaptation based on fitness improvement rate.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "054a25e0-2f7c-46a4-9975-6a5e03d4aa42", "metadata": {"aucs": [0.8492132915369545, 0.8339948169011278, 0.8391794685564861, 0.835524361064498, 0.8369103840181541, 0.8437301179415225, 0.8403805265894344, 0.8372237404946589, 0.8393521398511834, 0.7351295845942787, 0.7250784161647961, 0.7331524603071546, 0.7190647580256416, 0.7306331282986361, 0.7290698609793806, 0.7037558956479038, 0.7011961735491508, 9.999999999998899e-05, 0.1712020039390778, 0.24332986341712248, 0.17658510729109167, 0.17188104154059602, 0.16298825416191487, 0.21624398174081938, 0.26650217418369637, 0.15146971390009079, 0.20715822319524746, 0.15887658169474494, 0.1317860704816488, 0.14118341439038562, 0.16520358517639566, 0.12972793113916414, 0.15676320395612675, 0.16516139472469027, 0.1740261039507328, 0.45793331374768254, 0.9121206817022861, 0.8936173519921569, 0.8787470938696602, 0.9093136261015781, 0.8754747599366927, 0.8963580910141702, 0.9199715387010199, 0.8838356418448509, 0.9293414668345741, 0.6533936761573113, 0.6332826697667994, 0.398808104918146, 0.6286309932762313, 0.5736924518188159, 0.6637267312122479, 0.6080248568227395, 0.534807258795376, 0.647703377751587, 0.3749194053386361, 0.8429413508002622, 0.838478114772491, 0.8404842051352127, 0.8431494684121251, 0.884076485517241, 0.8433186723711441, 0.8274752572392035, 0.8079013293036077, 0.1522511834268322, 0.20271914326589102, 0.16583880781258153, 0.18996166437478146, 0.19810834076701167, 0.23992125840529177, 0.21489409288993688, 0.3093778650418312, 0.14877414771225117, 0.17099116663599512, 0.12875011971711303, 0.1734947245891002, 0.1570043544741344, 0.13944214575131775, 0.17997543112381176, 0.1621997573161309, 0.2127863355502312, 0.1911074466882018, 0.5455304006435429, 0.6037517510443604, 0.6021038767838051, 0.6070601342665787, 0.5658243421027297, 0.5924397983568293, 0.5910265207219347, 0.5831520742199096, 0.6065608488892513, 0.682273346581102, 0.6735920927768431, 0.6883815475657603, 0.6727748392688686, 0.6881335152950329, 0.6632966975107568, 0.7211333150479387, 0.6934863077947405, 0.6932084771525218, 0.2988015644832689, 0.12050873017535357, 0.26528879602659394, 0.277770584212945, 0.47643171066715684, 0.5025214815737942, 0.3294204307383216, 0.3005398398519511, 0.1788950301784593, 0.4858370542298739, 0.4710049538992863, 0.4722727712071534, 0.48483574436437427, 0.47281303327600577, 0.47178527080789545, 0.46394401564187837, 0.44365998440271004, 0.47695225408478614, 0.7890965450005167, 0.7653882956185931, 0.8010917580410066, 0.7895082182310476, 0.7776655048469754, 0.8033441987823478, 0.7945311738674823, 0.7784296786994479, 0.7911491286388521, 0.12538130529629055, 0.14184545506177726, 0.12295836585814646, 0.09921126509055356, 0.09937480481297245, 0.11553773008770718, 0.11741041171130562, 0.13783996222629136, 0.10083983832761101, 0.14163040915102543, 0.14956885268750797, 0.17247514810111875, 0.47570373423448753, 0.30333744155608133, 0.5255210677928647, 0.17483921886145526, 0.13554853362792507, 0.1804626447671671, 0.49167620485166896, 0.4549861334522767, 0.5438632424576586, 0.5108813797483138, 0.5333700375577912, 0.5482025324888318, 0.5318913474236502, 0.5338913533157715, 0.5285247815539549, 0.4137502797930883, 0.4043618227593416, 0.41493740796914225, 0.41133220378455604, 0.40757440779822207, 0.38949976100484507, 0.4013627212598426, 0.45429602239137434, 0.41601390598427634, 0.20604437105464524, 0.20769724950131319, 0.21909626462657183, 0.1732194801213398, 0.20734834336878738, 0.19133130388750064, 0.19392317022760686, 0.2035824237693128, 0.21522349377051975, 0.20802693189450838, 0.20533547511411265, 0.23899255770616823, 0.23952875190570422, 0.19134262529286306, 0.2119897518781214, 0.20450436396410188, 0.21580351103914197, 0.21433560900839776, 0.18209465260347069, 0.8564149857005994, 0.19329505866441787, 0.8782850854618802, 0.8212591932543537, 0.8203696380504073, 0.16548701008300482, 0.7918007146748162, 0.8224263990537473, 0.851076444653438, 0.20990970213086413, 0.8450565997939805, 0.8193954290112153, 0.1622003777444817, 0.7875447567185809, 0.20584911622350743, 0.8227409674784488, 0.2078285406852739, 0.1830639879143411, 0.17916765212836838, 0.17268217517327134, 0.2062463888664049, 0.1867554784524038, 0.18100295793273302, 0.1772582091376146, 0.1670693428390152, 0.17185652769392823, 0.09344913030664759, 0.093098915890647, 0.0930369714910263, 0.08292516399033156, 0.07374357673390208, 0.10290485287788764, 0.08862380519558244, 0.08595106072618419, 0.09040052032723633]}, "mutation_prompt": null}
{"id": "b5585e0a-31e4-4498-9214-93f50d8df79e", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        adaptive_factor = 1.0 if fitness_improvement > 0 else 0.5\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with dynamic mutation factor adaptation based on fitness improvement rate.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "054a25e0-2f7c-46a4-9975-6a5e03d4aa42", "metadata": {"aucs": [0.8492132915369545, 0.8339948169011278, 0.8391794685564861, 0.835524361064498, 0.8369103840181541, 0.8437301179415225, 0.8403805265894344, 0.8372237404946589, 0.8393521398511834, 0.7351295845942787, 0.7250784161647961, 0.7331524603071546, 0.7190647580256416, 0.7306331282986361, 0.7290698609793806, 0.7037558956479038, 0.7011961735491508, 9.999999999998899e-05, 0.1712020039390778, 0.24332986341712248, 0.17658510729109167, 0.17188104154059602, 0.16298825416191487, 0.21624398174081938, 0.26650217418369637, 0.15146971390009079, 0.20715822319524746, 0.15887658169474494, 0.1317860704816488, 0.14118341439038562, 0.16520358517639566, 0.12972793113916414, 0.15676320395612675, 0.16516139472469027, 0.1740261039507328, 0.45793331374768254, 0.9121206817022861, 0.8936173519921569, 0.8787470938696602, 0.9093136261015781, 0.8754747599366927, 0.8963580910141702, 0.9199715387010199, 0.8838356418448509, 0.9293414668345741, 0.6533936761573113, 0.6332826697667994, 0.398808104918146, 0.6286309932762313, 0.5736924518188159, 0.6637267312122479, 0.6080248568227395, 0.534807258795376, 0.647703377751587, 0.3749194053386361, 0.8429413508002622, 0.838478114772491, 0.8404842051352127, 0.8431494684121251, 0.884076485517241, 0.8433186723711441, 0.8274752572392035, 0.8079013293036077, 0.1522511834268322, 0.20271914326589102, 0.16583880781258153, 0.18996166437478146, 0.19810834076701167, 0.23992125840529177, 0.21489409288993688, 0.3093778650418312, 0.14877414771225117, 0.17099116663599512, 0.12875011971711303, 0.1734947245891002, 0.1570043544741344, 0.13944214575131775, 0.17997543112381176, 0.1621997573161309, 0.2127863355502312, 0.1911074466882018, 0.5455304006435429, 0.6037517510443604, 0.6021038767838051, 0.6070601342665787, 0.5658243421027297, 0.5924397983568293, 0.5910265207219347, 0.5831520742199096, 0.6065608488892513, 0.682273346581102, 0.6735920927768431, 0.6883815475657603, 0.6727748392688686, 0.6881335152950329, 0.6632966975107568, 0.7211333150479387, 0.6934863077947405, 0.6932084771525218, 0.2988015644832689, 0.12050873017535357, 0.26528879602659394, 0.277770584212945, 0.47643171066715684, 0.5025214815737942, 0.3294204307383216, 0.3005398398519511, 0.1788950301784593, 0.4858370542298739, 0.4710049538992863, 0.4722727712071534, 0.48483574436437427, 0.47281303327600577, 0.47178527080789545, 0.46394401564187837, 0.44365998440271004, 0.47695225408478614, 0.7890965450005167, 0.7653882956185931, 0.8010917580410066, 0.7895082182310476, 0.7776655048469754, 0.8033441987823478, 0.7945311738674823, 0.7784296786994479, 0.7911491286388521, 0.12538130529629055, 0.14184545506177726, 0.12295836585814646, 0.09921126509055356, 0.09937480481297245, 0.11553773008770718, 0.11741041171130562, 0.13783996222629136, 0.10083983832761101, 0.14163040915102543, 0.14956885268750797, 0.17247514810111875, 0.47570373423448753, 0.30333744155608133, 0.5255210677928647, 0.17483921886145526, 0.13554853362792507, 0.1804626447671671, 0.49167620485166896, 0.4549861334522767, 0.5438632424576586, 0.5108813797483138, 0.5333700375577912, 0.5482025324888318, 0.5318913474236502, 0.5338913533157715, 0.5285247815539549, 0.4137502797930883, 0.4043618227593416, 0.41493740796914225, 0.41133220378455604, 0.40757440779822207, 0.38949976100484507, 0.4013627212598426, 0.45429602239137434, 0.41601390598427634, 0.20604437105464524, 0.20769724950131319, 0.21909626462657183, 0.1732194801213398, 0.20734834336878738, 0.19133130388750064, 0.19392317022760686, 0.2035824237693128, 0.21522349377051975, 0.20802693189450838, 0.20533547511411265, 0.23899255770616823, 0.23952875190570422, 0.19134262529286306, 0.2119897518781214, 0.20450436396410188, 0.21580351103914197, 0.21433560900839776, 0.18209465260347069, 0.8564149857005994, 0.19329505866441787, 0.8782850854618802, 0.8212591932543537, 0.8203696380504073, 0.16548701008300482, 0.7918007146748162, 0.8224263990537473, 0.851076444653438, 0.20990970213086413, 0.8450565997939805, 0.8193954290112153, 0.1622003777444817, 0.7875447567185809, 0.20584911622350743, 0.8227409674784488, 0.2078285406852739, 0.1830639879143411, 0.17916765212836838, 0.17268217517327134, 0.2062463888664049, 0.1867554784524038, 0.18100295793273302, 0.1772582091376146, 0.1670693428390152, 0.17185652769392823, 0.09344913030664759, 0.093098915890647, 0.0930369714910263, 0.08292516399033156, 0.07374357673390208, 0.10290485287788764, 0.08862380519558244, 0.08595106072618419, 0.09040052032723633]}, "mutation_prompt": null}
{"id": "83d67410-251b-438f-8e90-8f0319fd6443", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement, convergence_speed):\n        adaptive_factor = 1.0 + 0.5 * convergence_speed if fitness_improvement > 0 else 0.5 * convergence_speed\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        previous_best_fitness = np.min(self.fitness)\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n            current_best_fitness = self.fitness[best_idx]\n            convergence_speed = (previous_best_fitness - current_best_fitness) / self.population_size\n            previous_best_fitness = current_best_fitness\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness, convergence_speed)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with adaptive mutation factor based on convergence speed and elite preservation.", "configspace": "", "generation": 48, "fitness": 0.35567773298976063, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.23.", "error": "", "parent_id": "054a25e0-2f7c-46a4-9975-6a5e03d4aa42", "metadata": {"aucs": [0.7600228020806615, 0.7548716449222738, 0.7571097952345811, 0.7457341713226702, 0.746443713605289, 0.7468412198687463, 0.7641953724844486, 0.7499003663636652, 0.7477118278460565, 0.5713706530768656, 0.5722966707137352, 0.5746230969431966, 0.5814277983462759, 0.6043967022900649, 0.5907921337611715, 0.5750404505294575, 0.5491626673634319, 0.586270986279136, 0.24182162082869263, 0.15634475451689944, 0.3527292221130478, 0.16947505974042654, 0.44670856413900173, 0.15926047899793938, 0.16003823633221548, 0.13656211017953046, 0.14358063651577246, 0.13508352412771907, 0.12960582082021288, 0.14536272131387395, 0.1495471766408657, 0.16214983866932053, 0.16598519052388494, 0.12756903712185463, 0.1441315160204063, 0.1449351093460296, 0.9221855398002049, 0.9277112825339742, 0.9207903211179401, 0.9335031813950931, 0.8792273346598605, 0.9151754515638497, 0.9388830389581354, 0.9045525106382952, 0.9131320560820757, 0.37486828750245926, 0.37309006509151854, 0.39162476640614363, 0.3751335497266778, 0.40252844652641473, 0.42958991896837173, 0.37806410908802424, 0.3239484110546653, 0.3911300892350841, 0.7667514402267417, 0.6909510359979892, 0.7146813297090446, 0.7551366135137623, 0.7149343886389365, 0.6831464271666735, 0.6756840591843892, 0.7362833554684316, 0.8053382927005712, 0.3647703563709782, 0.21512865621325306, 0.20449578764660437, 0.33433408120089203, 0.22667739651386465, 0.25822128686593915, 0.41642579251961076, 0.31176094064338, 0.17693396673045203, 0.16840716388807964, 0.1610869940288947, 0.2389035467848012, 0.1790713040586901, 0.2272690712352754, 0.2128603559710951, 0.1399248624874443, 0.22072169382635543, 0.19024069791440312, 0.2634833572285955, 0.2348643119828403, 0.27461839252344666, 0.30835294816562875, 0.32418442638156764, 0.21106591228054716, 0.2926628977470127, 0.2558734245317179, 0.21455386771247453, 0.3830689913486661, 0.4072014965239067, 0.3902641468560454, 0.42273171925933506, 0.3787719486764859, 0.400281949201134, 0.39534001259890617, 0.44131619774085806, 0.37635058725906156, 0.1665765914068872, 0.08115933634620431, 0.1193449531897226, 0.16288496874093494, 0.1092965114903025, 0.13534748277408848, 0.13643026021351945, 0.1270973903125734, 0.11043844142626402, 0.2520621453803247, 0.25011554929270596, 0.2695813466362995, 0.2680257133554207, 0.2810174172885985, 0.2758089613791559, 0.24757351530251326, 0.25111846370860025, 0.25584533657176667, 0.6580097090443262, 0.6386619826040026, 0.6085192784995999, 0.6550566002895772, 0.5999952640582613, 0.6063113315138081, 0.6370053867170182, 0.6547642886807472, 0.6284637372399104, 0.09290049924013144, 0.10614767718142792, 0.1390363362220398, 0.11891674949871289, 0.08593726953807523, 0.12420574484161628, 0.11389862650603733, 0.09784279648720007, 0.12859349884063542, 0.1684378670459189, 0.16324116128535648, 0.2022916653721547, 0.26539068570817936, 0.45739421672791847, 0.21228140541232, 0.20094021789382, 0.1503268213944562, 0.14421382065269406, 0.37788546977489545, 0.4005940496857048, 0.3930015934770864, 0.40685162982031775, 0.38726133911545324, 0.3849932404741533, 0.3992165741081729, 0.4076559061185602, 0.39772251347589194, 0.2829636558142532, 0.29948008611599786, 0.28613082522589584, 0.28180716532749217, 0.30284350654057735, 0.3034295541510226, 0.27405588311886675, 0.27955078622712737, 0.29907251664281287, 0.181659852913164, 0.16963428498840094, 0.17348031275143494, 0.18855186251980016, 0.24176793379159522, 0.19047738900856725, 0.1928986737007713, 0.208709556282344, 0.20902260652441995, 0.2165395717312827, 0.2773695010704691, 0.22790053591409531, 0.5996356660742312, 0.5227740430727055, 0.23721733438300752, 0.23787404493604491, 0.22863945122972062, 0.5206027084972669, 0.5831014704434592, 0.7481360079131198, 0.18963156806212667, 0.7695094271495471, 0.4735101369337913, 0.19349009904478476, 0.7251689630523341, 0.13585511167424213, 0.2022621980708743, 0.7441301112225809, 0.3771354682517625, 0.7048509496633873, 0.35605204538345314, 0.3870470914032773, 0.1634739023443954, 0.2047541437649979, 0.19947623819452753, 0.20918720637148636, 0.1832674291892451, 0.18422361233470352, 0.22851276440410595, 0.18942105465608627, 0.19376483701557168, 0.1993149949717803, 0.2546613484527852, 0.20180050994573373, 0.17892422624163096, 0.10309204972098773, 0.07197143907751102, 0.08891274869980514, 0.08275319026502115, 0.0916289755125883, 0.09078207953440265, 0.09312670777909371, 0.08735818583029176, 0.07895284844438089]}, "mutation_prompt": null}
{"id": "1d34e02b-8c3a-4754-9c36-645a1cff7984", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        adaptive_factor = 1.0 if fitness_improvement > 0 else 0.5\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            # Adaptive population size based on available budget\n            if num_evaluations > self.budget / 2:\n                self.population_size = max(20, self.population_size - 5)\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with adaptive population size for improved exploration and exploitation.", "configspace": "", "generation": 49, "fitness": 0.4319339383794632, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "054a25e0-2f7c-46a4-9975-6a5e03d4aa42", "metadata": {"aucs": [0.8492132915369545, 0.8339948169011278, 0.8391794685564861, 0.835524361064498, 0.8369103840181541, 0.8437301179415225, 0.8403805265894344, 0.8372237404946589, 0.8393521398511834, 0.7351295845942787, 0.7250784161647961, 0.7331524603071546, 0.7190647580256416, 0.7306331282986361, 0.7290698609793806, 0.7037558956479038, 0.7011961735491508, 9.999999999998899e-05, 0.17120230864613895, 0.24332870244052152, 0.17658510728547283, 0.17189871715254246, 0.16298825416191487, 0.2081467727602938, 0.2665021836010735, 0.15146969619051232, 0.20715822319282917, 0.15878303597417542, 0.13178638131741993, 0.14118344410721806, 0.1652105462397243, 0.12972793113916414, 0.15676320395627585, 0.16516148599855407, 0.1740261039507075, 0.30512509091960305, 0.9121206817022861, 0.8936173519921569, 0.8787470938696602, 0.9093136261015781, 0.8754747599366927, 0.8963580910141702, 0.9199715387010199, 0.8838356418448509, 0.9293414668345741, 0.598103215874936, 0.5686228719657985, 0.40663287798244985, 0.6220238168104243, 0.6059948673349476, 0.6454325882362613, 0.5652000795497438, 0.424658737358909, 0.6420035022274821, 0.3749194053386361, 0.8429413508002622, 0.838478114772491, 0.8404842051352127, 0.8431494684121251, 0.884076485517241, 0.8433186723711441, 0.8274752572392035, 0.8079013293036077, 0.1519197773223443, 0.20256776979505542, 0.16540470823290832, 0.1896591609038808, 0.1980141048570545, 0.24182747760651613, 0.21492486117311072, 0.3012692276958241, 0.14881957291547765, 0.1707646361223255, 0.1287508346673849, 0.17311210130263044, 0.15694558037765416, 0.13940813712215427, 0.17955096284697392, 0.16208697683469997, 0.2110079302371516, 0.1909787798808249, 0.5595692950784095, 0.6175824155224121, 0.6152633241173953, 0.6171154830712098, 0.4256867812626186, 0.6107027749941412, 0.4721095709237927, 0.6022071123267652, 0.6218590948086709, 0.6378930120758024, 0.6787631774557905, 0.6227560378927083, 0.590162241490964, 0.6910603190093116, 0.667075889798443, 0.7215059245116213, 0.696960453235161, 0.6961157820998816, 0.2592809194096177, 0.12011808589508677, 0.19797334530326394, 0.27316687283448804, 0.4771717776057154, 0.4834263433755628, 0.31673463462300866, 0.24425005689367685, 0.17139867629168748, 0.5005126520054273, 0.5096678014008789, 0.4755909099128608, 0.49946027667128956, 0.5582642038341772, 0.44101096184483035, 0.46447259321552525, 0.3370226331378212, 0.5150727685311548, 0.7897052508683795, 0.748293220287334, 0.8010028918634426, 0.7890386384345651, 0.7779086754031899, 0.8033441987823478, 0.7944347383710526, 0.7797109266039828, 0.7845231778334144, 0.1253813053467998, 0.14186422238098106, 0.12285866832174175, 0.09921009547301529, 0.09891271066969842, 0.11553773015651203, 0.11743594200925489, 0.13784450632441114, 0.10083983832761101, 0.14163044807664427, 0.14954062206138585, 0.1726529420508035, 0.34271849031393375, 0.30283855048816277, 0.3561546118730583, 0.17328117128178944, 0.13554853362792507, 0.18043241748303884, 0.5112514594986489, 0.4872331367745488, 0.46960287860671956, 0.43957785750656986, 0.5165095131750084, 0.5493854520877959, 0.573906141848894, 0.5256950536040194, 0.515964847022855, 0.338731818378709, 0.43804744378135396, 0.4801044706017883, 0.41227158887443216, 0.38135135350212535, 0.44579523300840396, 0.39251051854723995, 0.46731207265665575, 0.41734631311394677, 0.20604437105464524, 0.20769724950131319, 0.21883206698765145, 0.1732194801213398, 0.20734834336878738, 0.19133130388750064, 0.1948845289018709, 0.2035824237693128, 0.21522349377051975, 0.20802724477315215, 0.20533547511437245, 0.23899255778466866, 0.23952875089890635, 0.19131754790857125, 0.21198963579140173, 0.20449585087218847, 0.21580354755335063, 0.2143356228645653, 0.18209465260341973, 0.8564149857005994, 0.19329505866444197, 0.8782850854618802, 0.8212591932543537, 0.8203696380504073, 0.1649801132698403, 0.7918007146748162, 0.8224263990537473, 0.851076444653438, 0.2099097021309031, 0.8450565997939805, 0.8193954290112153, 0.16220037774459983, 0.7875447567185809, 0.20584911622348878, 0.8227409674784488, 0.2078285406852739, 0.1830639879143411, 0.17916765212836838, 0.17268217517354167, 0.2062463888664049, 0.1867554784524038, 0.18100295793295118, 0.1772582091376146, 0.1670693428390152, 0.17185652769392823, 0.09304503433853983, 0.09258581607577976, 0.09301737828917778, 0.08292516399033156, 0.07374357673390208, 0.11718868129221649, 0.08862380519558244, 0.0844577360578409, 0.09535161631226419]}, "mutation_prompt": null}
{"id": "899749f7-1aa8-45ec-bc4a-17e1d1976a05", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        adaptive_factor = 1.0 if fitness_improvement > 0 else 0.5\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with dynamic mutation factor adaptation based on fitness improvement rate.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "054a25e0-2f7c-46a4-9975-6a5e03d4aa42", "metadata": {"aucs": [0.8492132915369545, 0.8339948169011278, 0.8391794685564861, 0.835524361064498, 0.8369103840181541, 0.8437301179415225, 0.8403805265894344, 0.8372237404946589, 0.8393521398511834, 0.7351295845942787, 0.7250784161647961, 0.7331524603071546, 0.7190647580256416, 0.7306331282986361, 0.7290698609793806, 0.7037558956479038, 0.7011961735491508, 9.999999999998899e-05, 0.1712020039390778, 0.24332986341712248, 0.17658510729109167, 0.17188104154059602, 0.16298825416191487, 0.21624398174081938, 0.26650217418369637, 0.15146971390009079, 0.20715822319524746, 0.15887658169474494, 0.1317860704816488, 0.14118341439038562, 0.16520358517639566, 0.12972793113916414, 0.15676320395612675, 0.16516139472469027, 0.1740261039507328, 0.45793331374768254, 0.9121206817022861, 0.8936173519921569, 0.8787470938696602, 0.9093136261015781, 0.8754747599366927, 0.8963580910141702, 0.9199715387010199, 0.8838356418448509, 0.9293414668345741, 0.6533936761573113, 0.6332826697667994, 0.398808104918146, 0.6286309932762313, 0.5736924518188159, 0.6637267312122479, 0.6080248568227395, 0.534807258795376, 0.647703377751587, 0.3749194053386361, 0.8429413508002622, 0.838478114772491, 0.8404842051352127, 0.8431494684121251, 0.884076485517241, 0.8433186723711441, 0.8274752572392035, 0.8079013293036077, 0.1522511834268322, 0.20271914326589102, 0.16583880781258153, 0.18996166437478146, 0.19810834076701167, 0.23992125840529177, 0.21489409288993688, 0.3093778650418312, 0.14877414771225117, 0.17099116663599512, 0.12875011971711303, 0.1734947245891002, 0.1570043544741344, 0.13944214575131775, 0.17997543112381176, 0.1621997573161309, 0.2127863355502312, 0.1911074466882018, 0.5455304006435429, 0.6037517510443604, 0.6021038767838051, 0.6070601342665787, 0.5658243421027297, 0.5924397983568293, 0.5910265207219347, 0.5831520742199096, 0.6065608488892513, 0.682273346581102, 0.6735920927768431, 0.6883815475657603, 0.6727748392688686, 0.6881335152950329, 0.6632966975107568, 0.7211333150479387, 0.6934863077947405, 0.6932084771525218, 0.2988015644832689, 0.12050873017535357, 0.26528879602659394, 0.277770584212945, 0.47643171066715684, 0.5025214815737942, 0.3294204307383216, 0.3005398398519511, 0.1788950301784593, 0.4858370542298739, 0.4710049538992863, 0.4722727712071534, 0.48483574436437427, 0.47281303327600577, 0.47178527080789545, 0.46394401564187837, 0.44365998440271004, 0.47695225408478614, 0.7890965450005167, 0.7653882956185931, 0.8010917580410066, 0.7895082182310476, 0.7776655048469754, 0.8033441987823478, 0.7945311738674823, 0.7784296786994479, 0.7911491286388521, 0.12538130529629055, 0.14184545506177726, 0.12295836585814646, 0.09921126509055356, 0.09937480481297245, 0.11553773008770718, 0.11741041171130562, 0.13783996222629136, 0.10083983832761101, 0.14163040915102543, 0.14956885268750797, 0.17247514810111875, 0.47570373423448753, 0.30333744155608133, 0.5255210677928647, 0.17483921886145526, 0.13554853362792507, 0.1804626447671671, 0.49167620485166896, 0.4549861334522767, 0.5438632424576586, 0.5108813797483138, 0.5333700375577912, 0.5482025324888318, 0.5318913474236502, 0.5338913533157715, 0.5285247815539549, 0.4137502797930883, 0.4043618227593416, 0.41493740796914225, 0.41133220378455604, 0.40757440779822207, 0.38949976100484507, 0.4013627212598426, 0.45429602239137434, 0.41601390598427634, 0.20604437105464524, 0.20769724950131319, 0.21909626462657183, 0.1732194801213398, 0.20734834336878738, 0.19133130388750064, 0.19392317022760686, 0.2035824237693128, 0.21522349377051975, 0.20802693189450838, 0.20533547511411265, 0.23899255770616823, 0.23952875190570422, 0.19134262529286306, 0.2119897518781214, 0.20450436396410188, 0.21580351103914197, 0.21433560900839776, 0.18209465260347069, 0.8564149857005994, 0.19329505866441787, 0.8782850854618802, 0.8212591932543537, 0.8203696380504073, 0.16548701008300482, 0.7918007146748162, 0.8224263990537473, 0.851076444653438, 0.20990970213086413, 0.8450565997939805, 0.8193954290112153, 0.1622003777444817, 0.7875447567185809, 0.20584911622350743, 0.8227409674784488, 0.2078285406852739, 0.1830639879143411, 0.17916765212836838, 0.17268217517327134, 0.2062463888664049, 0.1867554784524038, 0.18100295793273302, 0.1772582091376146, 0.1670693428390152, 0.17185652769392823, 0.09344913030664759, 0.093098915890647, 0.0930369714910263, 0.08292516399033156, 0.07374357673390208, 0.10290485287788764, 0.08862380519558244, 0.08595106072618419, 0.09040052032723633]}, "mutation_prompt": null}
{"id": "822b7441-741f-4e85-a7af-ca094e0eb376", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.stagnation_counter = 0\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        adaptive_factor = 1.0 if fitness_improvement > 0 else 0.5\n        if self.stagnation_counter > 5:\n            adaptive_factor = 1.2  # Increase exploration if stagnated\n            self.stagnation_counter = 0 # Reset counter\n        \n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            improvement_occurred = False\n            \n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                    improvement_occurred = True\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n            \n            if not improvement_occurred:\n                self.stagnation_counter += 1\n            else:\n                self.stagnation_counter = 0\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with adaptive mutation factor using fitness improvement and stagnation detection to promote diversity.", "configspace": "", "generation": 51, "fitness": 0.4377250933995973, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.28.", "error": "", "parent_id": "054a25e0-2f7c-46a4-9975-6a5e03d4aa42", "metadata": {"aucs": [0.8492132915369545, 0.8339948169011278, 0.8391794685564861, 0.835524361064498, 0.8369103840181541, 0.8437301179415225, 0.8403805265894344, 0.8372237404946589, 0.8393521398511834, 0.7351295845942787, 0.7250784161647961, 0.7331524603071546, 0.7190647580256416, 0.7306331282986361, 0.7290698609793806, 0.7037558956479038, 0.7011961735491508, 9.999999999998899e-05, 0.1712020039390778, 0.24332986341712248, 0.17658510729109167, 0.17188104154059602, 0.16298825416191487, 0.21624398174081938, 0.26650217418369637, 0.15146971390009079, 0.20715822319524746, 0.15887658169474494, 0.1317860704816488, 0.14118341439038562, 0.16520358517639566, 0.12972793113916414, 0.15676320395612675, 0.16516139472469027, 0.1740261039507328, 0.45793331374768254, 0.9121206817022861, 0.8936173519921569, 0.8787470938696602, 0.9093136261015781, 0.8754747599366927, 0.8963580910141702, 0.9199715387010199, 0.8838356418448509, 0.9293414668345741, 0.6533936761573113, 0.6332826697667994, 0.398808104918146, 0.6286309932762313, 0.5736924518188159, 0.6637267312122479, 0.6080248568227395, 0.534807258795376, 0.647703377751587, 0.3749194053386361, 0.8429413508002622, 0.838478114772491, 0.8404842051352127, 0.8431494684121251, 0.884076485517241, 0.8433186723711441, 0.8274752572392035, 0.8079013293036077, 0.1522511834268322, 0.20271914326589102, 0.16583880781258153, 0.18996166437478146, 0.19810834076701167, 0.23992125840529177, 0.21489409288993688, 0.3093778650418312, 0.14877414771225117, 0.17099116663599512, 0.12875011971711303, 0.1734947245891002, 0.1570043544741344, 0.13944214575131775, 0.17997543112381176, 0.1621997573161309, 0.2127863355502312, 0.1911074466882018, 0.5455304006435429, 0.6037517510443604, 0.6021038767838051, 0.6070601342665787, 0.5658243421027297, 0.5924397983568293, 0.5910265207219347, 0.5831520742199096, 0.6065608488892513, 0.682273346581102, 0.6735920927768431, 0.6883815475657603, 0.6727748392688686, 0.6881335152950329, 0.6632966975107568, 0.7211333150479387, 0.6934863077947405, 0.6932084771525218, 0.2988015644832689, 0.12050873017535357, 0.26528879602659394, 0.277770584212945, 0.47643171066715684, 0.5025214815737942, 0.3294204307383216, 0.3005398398519511, 0.1788950301784593, 0.4858370542298739, 0.4710049538992863, 0.4722727712071534, 0.48483574436437427, 0.47281303327600577, 0.47178527080789545, 0.46394401564187837, 0.44365998440271004, 0.47695225408478614, 0.7890965450005167, 0.7653882956185931, 0.8010917580410066, 0.7895082182310476, 0.7776655048469754, 0.8033441987823478, 0.7945311738674823, 0.7784296786994479, 0.7911491286388521, 0.12538130529629055, 0.14184545506177726, 0.12295836585814646, 0.09921126509055356, 0.09937480481297245, 0.11553773008770718, 0.11741041171130562, 0.13783996222629136, 0.10083983832761101, 0.14163040915102543, 0.14956885268750797, 0.17247514810111875, 0.47570373423448753, 0.30333744155608133, 0.5255210677928647, 0.17483921886145526, 0.13554853362792507, 0.1804626447671671, 0.49167620485166896, 0.4549861334522767, 0.5438632424576586, 0.5108813797483138, 0.5333700375577912, 0.5482025324888318, 0.5318913474236502, 0.5338913533157715, 0.5285247815539549, 0.4137502797930883, 0.4043618227593416, 0.41493740796914225, 0.41133220378455604, 0.40757440779822207, 0.38949976100484507, 0.4013627212598426, 0.45429602239137434, 0.41601390598427634, 0.20604437105464524, 0.20769724950131319, 0.21909626462657183, 0.1732194801213398, 0.20734834336878738, 0.19133130388750064, 0.19392317022760686, 0.2035824237693128, 0.21522349377051975, 0.20802693189450838, 0.20533547511411265, 0.23899255770616823, 0.23952875190570422, 0.19134262529286306, 0.2119897518781214, 0.20450436396410188, 0.21580351103914197, 0.21433560900839776, 0.18209465260347069, 0.8564149857005994, 0.19329505866441787, 0.8782850854618802, 0.8212591932543537, 0.8203696380504073, 0.16548701008300482, 0.7918007146748162, 0.8224263990537473, 0.851076444653438, 0.20990970213086413, 0.8450565997939805, 0.8193954290112153, 0.1622003777444817, 0.7875447567185809, 0.20584911622350743, 0.8227409674784488, 0.2078285406852739, 0.1830639879143411, 0.17916765212836838, 0.17268217517327134, 0.2062463888664049, 0.1867554784524038, 0.18100295793273302, 0.1772582091376146, 0.1670693428390152, 0.17185652769392823, 0.09344913030664759, 0.093098915890647, 0.0930369714910263, 0.08292516399033156, 0.07374357673390208, 0.10290485287788764, 0.08862380519558244, 0.08595106072618419, 0.09040052032723633]}, "mutation_prompt": null}
{"id": "ecc92771-af43-4051-ab2d-20986696e2f8", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        adaptive_factor = 1.0 if fitness_improvement > 0 else 0.5\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with dynamic mutation factor adaptation based on fitness improvement rate.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "054a25e0-2f7c-46a4-9975-6a5e03d4aa42", "metadata": {"aucs": [0.8492132915369545, 0.8339948169011278, 0.8391794685564861, 0.835524361064498, 0.8369103840181541, 0.8437301179415225, 0.8403805265894344, 0.8372237404946589, 0.8393521398511834, 0.7351295845942787, 0.7250784161647961, 0.7331524603071546, 0.7190647580256416, 0.7306331282986361, 0.7290698609793806, 0.7037558956479038, 0.7011961735491508, 9.999999999998899e-05, 0.1712020039390778, 0.24332986341712248, 0.17658510729109167, 0.17188104154059602, 0.16298825416191487, 0.21624398174081938, 0.26650217418369637, 0.15146971390009079, 0.20715822319524746, 0.15887658169474494, 0.1317860704816488, 0.14118341439038562, 0.16520358517639566, 0.12972793113916414, 0.15676320395612675, 0.16516139472469027, 0.1740261039507328, 0.45793331374768254, 0.9121206817022861, 0.8936173519921569, 0.8787470938696602, 0.9093136261015781, 0.8754747599366927, 0.8963580910141702, 0.9199715387010199, 0.8838356418448509, 0.9293414668345741, 0.6533936761573113, 0.6332826697667994, 0.398808104918146, 0.6286309932762313, 0.5736924518188159, 0.6637267312122479, 0.6080248568227395, 0.534807258795376, 0.647703377751587, 0.3749194053386361, 0.8429413508002622, 0.838478114772491, 0.8404842051352127, 0.8431494684121251, 0.884076485517241, 0.8433186723711441, 0.8274752572392035, 0.8079013293036077, 0.1522511834268322, 0.20271914326589102, 0.16583880781258153, 0.18996166437478146, 0.19810834076701167, 0.23992125840529177, 0.21489409288993688, 0.3093778650418312, 0.14877414771225117, 0.17099116663599512, 0.12875011971711303, 0.1734947245891002, 0.1570043544741344, 0.13944214575131775, 0.17997543112381176, 0.1621997573161309, 0.2127863355502312, 0.1911074466882018, 0.5455304006435429, 0.6037517510443604, 0.6021038767838051, 0.6070601342665787, 0.5658243421027297, 0.5924397983568293, 0.5910265207219347, 0.5831520742199096, 0.6065608488892513, 0.682273346581102, 0.6735920927768431, 0.6883815475657603, 0.6727748392688686, 0.6881335152950329, 0.6632966975107568, 0.7211333150479387, 0.6934863077947405, 0.6932084771525218, 0.2988015644832689, 0.12050873017535357, 0.26528879602659394, 0.277770584212945, 0.47643171066715684, 0.5025214815737942, 0.3294204307383216, 0.3005398398519511, 0.1788950301784593, 0.4858370542298739, 0.4710049538992863, 0.4722727712071534, 0.48483574436437427, 0.47281303327600577, 0.47178527080789545, 0.46394401564187837, 0.44365998440271004, 0.47695225408478614, 0.7890965450005167, 0.7653882956185931, 0.8010917580410066, 0.7895082182310476, 0.7776655048469754, 0.8033441987823478, 0.7945311738674823, 0.7784296786994479, 0.7911491286388521, 0.12538130529629055, 0.14184545506177726, 0.12295836585814646, 0.09921126509055356, 0.09937480481297245, 0.11553773008770718, 0.11741041171130562, 0.13783996222629136, 0.10083983832761101, 0.14163040915102543, 0.14956885268750797, 0.17247514810111875, 0.47570373423448753, 0.30333744155608133, 0.5255210677928647, 0.17483921886145526, 0.13554853362792507, 0.1804626447671671, 0.49167620485166896, 0.4549861334522767, 0.5438632424576586, 0.5108813797483138, 0.5333700375577912, 0.5482025324888318, 0.5318913474236502, 0.5338913533157715, 0.5285247815539549, 0.4137502797930883, 0.4043618227593416, 0.41493740796914225, 0.41133220378455604, 0.40757440779822207, 0.38949976100484507, 0.4013627212598426, 0.45429602239137434, 0.41601390598427634, 0.20604437105464524, 0.20769724950131319, 0.21909626462657183, 0.1732194801213398, 0.20734834336878738, 0.19133130388750064, 0.19392317022760686, 0.2035824237693128, 0.21522349377051975, 0.20802693189450838, 0.20533547511411265, 0.23899255770616823, 0.23952875190570422, 0.19134262529286306, 0.2119897518781214, 0.20450436396410188, 0.21580351103914197, 0.21433560900839776, 0.18209465260347069, 0.8564149857005994, 0.19329505866441787, 0.8782850854618802, 0.8212591932543537, 0.8203696380504073, 0.16548701008300482, 0.7918007146748162, 0.8224263990537473, 0.851076444653438, 0.20990970213086413, 0.8450565997939805, 0.8193954290112153, 0.1622003777444817, 0.7875447567185809, 0.20584911622350743, 0.8227409674784488, 0.2078285406852739, 0.1830639879143411, 0.17916765212836838, 0.17268217517327134, 0.2062463888664049, 0.1867554784524038, 0.18100295793273302, 0.1772582091376146, 0.1670693428390152, 0.17185652769392823, 0.09344913030664759, 0.093098915890647, 0.0930369714910263, 0.08292516399033156, 0.07374357673390208, 0.10290485287788764, 0.08862380519558244, 0.08595106072618419, 0.09040052032723633]}, "mutation_prompt": null}
{"id": "a77a6cbe-5c17-4345-8ef3-aebd95a35425", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        diversity = np.std(self.population)\n        adaptive_factor = 1.0 if fitness_improvement > 0 else self.scaling_factor * (1 - diversity / self.ub)\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with adaptive crossover rate and mutation factor scaling based on diversity.", "configspace": "", "generation": 53, "fitness": 0.4521485899718564, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.28.", "error": "", "parent_id": "054a25e0-2f7c-46a4-9975-6a5e03d4aa42", "metadata": {"aucs": [0.8552266849198897, 0.851523675285539, 0.8621037485058396, 0.8099533809728796, 0.8181183828818304, 0.8245037525719361, 0.8556441081698354, 0.859996827815028, 0.8532800009680963, 0.7389705762900319, 0.741992828308538, 0.7394876538912316, 0.7476789248908566, 0.7465446898245538, 0.7510529207074906, 0.6731144254575777, 0.6934873578047005, 0.6478946485092156, 0.1754870977839682, 0.2710676673692505, 0.20709543810061637, 0.5720976945211713, 0.13754421235971237, 0.1821849094766197, 0.15397141073074105, 0.21817547464677822, 0.6107914423454974, 0.11209404768426634, 0.1423390170465938, 0.15241923064428342, 0.12648359089687, 0.16815498878080193, 0.13507852462078374, 0.17304788614319655, 0.1325242920611136, 0.17143639232265195, 0.8944415783829885, 0.9161079877908611, 0.9418870675984922, 0.9279444396600104, 0.8932599335687387, 0.8692987303794146, 0.9187278201869109, 0.8859573373308905, 0.9201646586915944, 0.6207450992418946, 0.6190659576417451, 0.5232179273375481, 0.5813926927143798, 0.5621628289175518, 0.5262272518298468, 0.6263854065333045, 0.5531277604778135, 0.6084317912685304, 0.8579735115995012, 0.8472798842230166, 0.8851979030301307, 0.823986388076947, 0.8317176986744048, 0.8560374412940938, 0.8092813364957002, 0.8513720229013607, 0.8376145356845921, 0.17995912472312137, 0.6271072797203857, 0.13986660379442106, 0.12511849657094953, 0.16972055302967148, 0.16851606947991926, 0.6340317502077284, 0.20127369200662026, 0.17790965720281293, 0.18372548050275095, 0.16019484486902524, 0.15668806268720614, 0.13106746104141764, 0.2003630147696044, 0.18198427522849336, 0.14198763471163334, 0.15444588609759247, 0.16281375777930385, 0.5710240663597625, 0.6053074448283727, 0.5791102739933427, 0.5828915456327743, 0.5948146101425246, 0.5933287091211308, 0.6754098809720929, 0.647531871704218, 0.6481937445849328, 0.7068998798024568, 0.7231645779076761, 0.7423821078686459, 0.6659821656826372, 0.6829314159484261, 0.6898273534092378, 0.7164968794114603, 0.7151729163567939, 0.7206903308540207, 0.08090122783619991, 0.2926147499415427, 0.18162583544730349, 0.4388378851125816, 0.4409032092208417, 0.4716283227689406, 0.21282364616051652, 0.2920913759994863, 0.20825578204971817, 0.46314616838438016, 0.4200805948562688, 0.45433042461487716, 0.416030876518252, 0.3955208115645209, 0.39459720601497794, 0.4171727634739548, 0.4135390050839519, 0.37351360101875375, 0.8008966854024148, 0.7944685413113065, 0.8142590628932144, 0.7790441734818246, 0.7594887138490455, 0.7866401942330972, 0.8013933412945935, 0.8137159706727282, 0.8197605359685101, 0.11480572556336788, 0.11909463135591647, 0.11084902208346281, 0.141166976725438, 0.14903025117892188, 0.1342748625571636, 0.11304897009327375, 0.1617199015618047, 0.1390992672004291, 0.16673579554562135, 0.23786839795934334, 0.1851384449054999, 0.28009584141794486, 0.14651221853851515, 0.29253478027557855, 0.23232606450932325, 0.4720600886535472, 0.14753437146003556, 0.5504321714810904, 0.5414923436531659, 0.5618085771630343, 0.605605673671848, 0.6177713365774438, 0.6193096925470074, 0.528408986069929, 0.5477837579344529, 0.5223001600419355, 0.4194670164862323, 0.3868528227866552, 0.4222202715286857, 0.46090687439695477, 0.47741285110924514, 0.47490319943552006, 0.40628335237446833, 0.3971330050527936, 0.40643244780291055, 0.23102389375029353, 0.19570377219912738, 0.21010537082999203, 0.20914090352908565, 0.21925100798175712, 0.21219774136832548, 0.18752191399280604, 0.21808728511985287, 0.21330098335625247, 0.21740121282643743, 0.2367940708809868, 0.19438160542543348, 0.21339323893066353, 0.24309954086010088, 0.19291269082796525, 0.1913312669145627, 0.7577861247964197, 0.21816572581945848, 0.7702316406091525, 0.8464562085576028, 0.7095649597846061, 0.8439018248031656, 0.8019283270585332, 0.28136812206051653, 0.7378360829873518, 0.2256420118552087, 0.817156599850717, 0.8470290503645408, 0.20643645516264264, 0.8367025821550962, 0.19969006237603726, 0.16477472070299137, 0.26709603093852863, 0.19142979059065712, 0.7677312439333391, 0.8006993282745635, 0.18746019788553658, 0.18457338064031314, 0.19045768179370315, 0.18104374737720919, 0.2067175487034526, 0.1949386473517266, 0.18218856813106543, 0.20927015915594627, 0.18031558019950822, 0.08778861130634619, 0.08750828319597947, 0.0847107861001366, 0.0804630353229997, 0.08515423498548458, 0.08747536457871863, 0.08622800478355452, 0.09090738885357497, 0.09241164936318036]}, "mutation_prompt": null}
{"id": "0270d342-bc71-4b05-9276-115d4cc9af0f", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        diversity = np.std(self.population)\n        adaptive_factor = 1.0 if fitness_improvement > 0 else self.scaling_factor * (1 - diversity / self.ub)\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with adaptive crossover rate and mutation factor scaling based on diversity.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a77a6cbe-5c17-4345-8ef3-aebd95a35425", "metadata": {"aucs": [0.8552266849198897, 0.851523675285539, 0.8621037485058396, 0.8099533809728796, 0.8181183828818304, 0.8245037525719361, 0.8556441081698354, 0.859996827815028, 0.8532800009680963, 0.7389705762900319, 0.741992828308538, 0.7394876538912316, 0.7476789248908566, 0.7465446898245538, 0.7510529207074906, 0.6731144254575777, 0.6934873578047005, 0.6478946485092156, 0.1754870977839682, 0.2710676673692505, 0.20709543810061637, 0.5720976945211713, 0.13754421235971237, 0.1821849094766197, 0.15397141073074105, 0.21817547464677822, 0.6107914423454974, 0.11209404768426634, 0.1423390170465938, 0.15241923064428342, 0.12648359089687, 0.16815498878080193, 0.13507852462078374, 0.17304788614319655, 0.1325242920611136, 0.17143639232265195, 0.8944415783829885, 0.9161079877908611, 0.9418870675984922, 0.9279444396600104, 0.8932599335687387, 0.8692987303794146, 0.9187278201869109, 0.8859573373308905, 0.9201646586915944, 0.6207450992418946, 0.6190659576417451, 0.5232179273375481, 0.5813926927143798, 0.5621628289175518, 0.5262272518298468, 0.6263854065333045, 0.5531277604778135, 0.6084317912685304, 0.8579735115995012, 0.8472798842230166, 0.8851979030301307, 0.823986388076947, 0.8317176986744048, 0.8560374412940938, 0.8092813364957002, 0.8513720229013607, 0.8376145356845921, 0.17995912472312137, 0.6271072797203857, 0.13986660379442106, 0.12511849657094953, 0.16972055302967148, 0.16851606947991926, 0.6340317502077284, 0.20127369200662026, 0.17790965720281293, 0.18372548050275095, 0.16019484486902524, 0.15668806268720614, 0.13106746104141764, 0.2003630147696044, 0.18198427522849336, 0.14198763471163334, 0.15444588609759247, 0.16281375777930385, 0.5710240663597625, 0.6053074448283727, 0.5791102739933427, 0.5828915456327743, 0.5948146101425246, 0.5933287091211308, 0.6754098809720929, 0.647531871704218, 0.6481937445849328, 0.7068998798024568, 0.7231645779076761, 0.7423821078686459, 0.6659821656826372, 0.6829314159484261, 0.6898273534092378, 0.7164968794114603, 0.7151729163567939, 0.7206903308540207, 0.08090122783619991, 0.2926147499415427, 0.18162583544730349, 0.4388378851125816, 0.4409032092208417, 0.4716283227689406, 0.21282364616051652, 0.2920913759994863, 0.20825578204971817, 0.46314616838438016, 0.4200805948562688, 0.45433042461487716, 0.416030876518252, 0.3955208115645209, 0.39459720601497794, 0.4171727634739548, 0.4135390050839519, 0.37351360101875375, 0.8008966854024148, 0.7944685413113065, 0.8142590628932144, 0.7790441734818246, 0.7594887138490455, 0.7866401942330972, 0.8013933412945935, 0.8137159706727282, 0.8197605359685101, 0.11480572556336788, 0.11909463135591647, 0.11084902208346281, 0.141166976725438, 0.14903025117892188, 0.1342748625571636, 0.11304897009327375, 0.1617199015618047, 0.1390992672004291, 0.16673579554562135, 0.23786839795934334, 0.1851384449054999, 0.28009584141794486, 0.14651221853851515, 0.29253478027557855, 0.23232606450932325, 0.4720600886535472, 0.14753437146003556, 0.5504321714810904, 0.5414923436531659, 0.5618085771630343, 0.605605673671848, 0.6177713365774438, 0.6193096925470074, 0.528408986069929, 0.5477837579344529, 0.5223001600419355, 0.4194670164862323, 0.3868528227866552, 0.4222202715286857, 0.46090687439695477, 0.47741285110924514, 0.47490319943552006, 0.40628335237446833, 0.3971330050527936, 0.40643244780291055, 0.23102389375029353, 0.19570377219912738, 0.21010537082999203, 0.20914090352908565, 0.21925100798175712, 0.21219774136832548, 0.18752191399280604, 0.21808728511985287, 0.21330098335625247, 0.21740121282643743, 0.2367940708809868, 0.19438160542543348, 0.21339323893066353, 0.24309954086010088, 0.19291269082796525, 0.1913312669145627, 0.7577861247964197, 0.21816572581945848, 0.7702316406091525, 0.8464562085576028, 0.7095649597846061, 0.8439018248031656, 0.8019283270585332, 0.28136812206051653, 0.7378360829873518, 0.2256420118552087, 0.817156599850717, 0.8470290503645408, 0.20643645516264264, 0.8367025821550962, 0.19969006237603726, 0.16477472070299137, 0.26709603093852863, 0.19142979059065712, 0.7677312439333391, 0.8006993282745635, 0.18746019788553658, 0.18457338064031314, 0.19045768179370315, 0.18104374737720919, 0.2067175487034526, 0.1949386473517266, 0.18218856813106543, 0.20927015915594627, 0.18031558019950822, 0.08778861130634619, 0.08750828319597947, 0.0847107861001366, 0.0804630353229997, 0.08515423498548458, 0.08747536457871863, 0.08622800478355452, 0.09090738885357497, 0.09241164936318036]}, "mutation_prompt": null}
{"id": "2bc36747-6de1-4dec-8ca7-2c04df62051d", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        diversity = np.std(self.population)\n        adaptive_factor = 1.0 if fitness_improvement > 0 else self.scaling_factor * (1 - diversity / self.ub)\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with adaptive crossover rate and mutation factor scaling based on diversity.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a77a6cbe-5c17-4345-8ef3-aebd95a35425", "metadata": {"aucs": [0.8552266849198897, 0.851523675285539, 0.8621037485058396, 0.8099533809728796, 0.8181183828818304, 0.8245037525719361, 0.8556441081698354, 0.859996827815028, 0.8532800009680963, 0.7389705762900319, 0.741992828308538, 0.7394876538912316, 0.7476789248908566, 0.7465446898245538, 0.7510529207074906, 0.6731144254575777, 0.6934873578047005, 0.6478946485092156, 0.1754870977839682, 0.2710676673692505, 0.20709543810061637, 0.5720976945211713, 0.13754421235971237, 0.1821849094766197, 0.15397141073074105, 0.21817547464677822, 0.6107914423454974, 0.11209404768426634, 0.1423390170465938, 0.15241923064428342, 0.12648359089687, 0.16815498878080193, 0.13507852462078374, 0.17304788614319655, 0.1325242920611136, 0.17143639232265195, 0.8944415783829885, 0.9161079877908611, 0.9418870675984922, 0.9279444396600104, 0.8932599335687387, 0.8692987303794146, 0.9187278201869109, 0.8859573373308905, 0.9201646586915944, 0.6207450992418946, 0.6190659576417451, 0.5232179273375481, 0.5813926927143798, 0.5621628289175518, 0.5262272518298468, 0.6263854065333045, 0.5531277604778135, 0.6084317912685304, 0.8579735115995012, 0.8472798842230166, 0.8851979030301307, 0.823986388076947, 0.8317176986744048, 0.8560374412940938, 0.8092813364957002, 0.8513720229013607, 0.8376145356845921, 0.17995912472312137, 0.6271072797203857, 0.13986660379442106, 0.12511849657094953, 0.16972055302967148, 0.16851606947991926, 0.6340317502077284, 0.20127369200662026, 0.17790965720281293, 0.18372548050275095, 0.16019484486902524, 0.15668806268720614, 0.13106746104141764, 0.2003630147696044, 0.18198427522849336, 0.14198763471163334, 0.15444588609759247, 0.16281375777930385, 0.5710240663597625, 0.6053074448283727, 0.5791102739933427, 0.5828915456327743, 0.5948146101425246, 0.5933287091211308, 0.6754098809720929, 0.647531871704218, 0.6481937445849328, 0.7068998798024568, 0.7231645779076761, 0.7423821078686459, 0.6659821656826372, 0.6829314159484261, 0.6898273534092378, 0.7164968794114603, 0.7151729163567939, 0.7206903308540207, 0.08090122783619991, 0.2926147499415427, 0.18162583544730349, 0.4388378851125816, 0.4409032092208417, 0.4716283227689406, 0.21282364616051652, 0.2920913759994863, 0.20825578204971817, 0.46314616838438016, 0.4200805948562688, 0.45433042461487716, 0.416030876518252, 0.3955208115645209, 0.39459720601497794, 0.4171727634739548, 0.4135390050839519, 0.37351360101875375, 0.8008966854024148, 0.7944685413113065, 0.8142590628932144, 0.7790441734818246, 0.7594887138490455, 0.7866401942330972, 0.8013933412945935, 0.8137159706727282, 0.8197605359685101, 0.11480572556336788, 0.11909463135591647, 0.11084902208346281, 0.141166976725438, 0.14903025117892188, 0.1342748625571636, 0.11304897009327375, 0.1617199015618047, 0.1390992672004291, 0.16673579554562135, 0.23786839795934334, 0.1851384449054999, 0.28009584141794486, 0.14651221853851515, 0.29253478027557855, 0.23232606450932325, 0.4720600886535472, 0.14753437146003556, 0.5504321714810904, 0.5414923436531659, 0.5618085771630343, 0.605605673671848, 0.6177713365774438, 0.6193096925470074, 0.528408986069929, 0.5477837579344529, 0.5223001600419355, 0.4194670164862323, 0.3868528227866552, 0.4222202715286857, 0.46090687439695477, 0.47741285110924514, 0.47490319943552006, 0.40628335237446833, 0.3971330050527936, 0.40643244780291055, 0.23102389375029353, 0.19570377219912738, 0.21010537082999203, 0.20914090352908565, 0.21925100798175712, 0.21219774136832548, 0.18752191399280604, 0.21808728511985287, 0.21330098335625247, 0.21740121282643743, 0.2367940708809868, 0.19438160542543348, 0.21339323893066353, 0.24309954086010088, 0.19291269082796525, 0.1913312669145627, 0.7577861247964197, 0.21816572581945848, 0.7702316406091525, 0.8464562085576028, 0.7095649597846061, 0.8439018248031656, 0.8019283270585332, 0.28136812206051653, 0.7378360829873518, 0.2256420118552087, 0.817156599850717, 0.8470290503645408, 0.20643645516264264, 0.8367025821550962, 0.19969006237603726, 0.16477472070299137, 0.26709603093852863, 0.19142979059065712, 0.7677312439333391, 0.8006993282745635, 0.18746019788553658, 0.18457338064031314, 0.19045768179370315, 0.18104374737720919, 0.2067175487034526, 0.1949386473517266, 0.18218856813106543, 0.20927015915594627, 0.18031558019950822, 0.08778861130634619, 0.08750828319597947, 0.0847107861001366, 0.0804630353229997, 0.08515423498548458, 0.08747536457871863, 0.08622800478355452, 0.09090738885357497, 0.09241164936318036]}, "mutation_prompt": null}
{"id": "2a104853-f285-4e08-a15e-eb343072ed5a", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        diversity = np.std(self.population)\n        adaptive_factor = 1.0 if fitness_improvement > 0 else self.scaling_factor * (1 - diversity / self.ub)\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with adaptive crossover rate and mutation factor scaling based on diversity.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a77a6cbe-5c17-4345-8ef3-aebd95a35425", "metadata": {"aucs": [0.8552266849198897, 0.851523675285539, 0.8621037485058396, 0.8099533809728796, 0.8181183828818304, 0.8245037525719361, 0.8556441081698354, 0.859996827815028, 0.8532800009680963, 0.7389705762900319, 0.741992828308538, 0.7394876538912316, 0.7476789248908566, 0.7465446898245538, 0.7510529207074906, 0.6731144254575777, 0.6934873578047005, 0.6478946485092156, 0.1754870977839682, 0.2710676673692505, 0.20709543810061637, 0.5720976945211713, 0.13754421235971237, 0.1821849094766197, 0.15397141073074105, 0.21817547464677822, 0.6107914423454974, 0.11209404768426634, 0.1423390170465938, 0.15241923064428342, 0.12648359089687, 0.16815498878080193, 0.13507852462078374, 0.17304788614319655, 0.1325242920611136, 0.17143639232265195, 0.8944415783829885, 0.9161079877908611, 0.9418870675984922, 0.9279444396600104, 0.8932599335687387, 0.8692987303794146, 0.9187278201869109, 0.8859573373308905, 0.9201646586915944, 0.6207450992418946, 0.6190659576417451, 0.5232179273375481, 0.5813926927143798, 0.5621628289175518, 0.5262272518298468, 0.6263854065333045, 0.5531277604778135, 0.6084317912685304, 0.8579735115995012, 0.8472798842230166, 0.8851979030301307, 0.823986388076947, 0.8317176986744048, 0.8560374412940938, 0.8092813364957002, 0.8513720229013607, 0.8376145356845921, 0.17995912472312137, 0.6271072797203857, 0.13986660379442106, 0.12511849657094953, 0.16972055302967148, 0.16851606947991926, 0.6340317502077284, 0.20127369200662026, 0.17790965720281293, 0.18372548050275095, 0.16019484486902524, 0.15668806268720614, 0.13106746104141764, 0.2003630147696044, 0.18198427522849336, 0.14198763471163334, 0.15444588609759247, 0.16281375777930385, 0.5710240663597625, 0.6053074448283727, 0.5791102739933427, 0.5828915456327743, 0.5948146101425246, 0.5933287091211308, 0.6754098809720929, 0.647531871704218, 0.6481937445849328, 0.7068998798024568, 0.7231645779076761, 0.7423821078686459, 0.6659821656826372, 0.6829314159484261, 0.6898273534092378, 0.7164968794114603, 0.7151729163567939, 0.7206903308540207, 0.08090122783619991, 0.2926147499415427, 0.18162583544730349, 0.4388378851125816, 0.4409032092208417, 0.4716283227689406, 0.21282364616051652, 0.2920913759994863, 0.20825578204971817, 0.46314616838438016, 0.4200805948562688, 0.45433042461487716, 0.416030876518252, 0.3955208115645209, 0.39459720601497794, 0.4171727634739548, 0.4135390050839519, 0.37351360101875375, 0.8008966854024148, 0.7944685413113065, 0.8142590628932144, 0.7790441734818246, 0.7594887138490455, 0.7866401942330972, 0.8013933412945935, 0.8137159706727282, 0.8197605359685101, 0.11480572556336788, 0.11909463135591647, 0.11084902208346281, 0.141166976725438, 0.14903025117892188, 0.1342748625571636, 0.11304897009327375, 0.1617199015618047, 0.1390992672004291, 0.16673579554562135, 0.23786839795934334, 0.1851384449054999, 0.28009584141794486, 0.14651221853851515, 0.29253478027557855, 0.23232606450932325, 0.4720600886535472, 0.14753437146003556, 0.5504321714810904, 0.5414923436531659, 0.5618085771630343, 0.605605673671848, 0.6177713365774438, 0.6193096925470074, 0.528408986069929, 0.5477837579344529, 0.5223001600419355, 0.4194670164862323, 0.3868528227866552, 0.4222202715286857, 0.46090687439695477, 0.47741285110924514, 0.47490319943552006, 0.40628335237446833, 0.3971330050527936, 0.40643244780291055, 0.23102389375029353, 0.19570377219912738, 0.21010537082999203, 0.20914090352908565, 0.21925100798175712, 0.21219774136832548, 0.18752191399280604, 0.21808728511985287, 0.21330098335625247, 0.21740121282643743, 0.2367940708809868, 0.19438160542543348, 0.21339323893066353, 0.24309954086010088, 0.19291269082796525, 0.1913312669145627, 0.7577861247964197, 0.21816572581945848, 0.7702316406091525, 0.8464562085576028, 0.7095649597846061, 0.8439018248031656, 0.8019283270585332, 0.28136812206051653, 0.7378360829873518, 0.2256420118552087, 0.817156599850717, 0.8470290503645408, 0.20643645516264264, 0.8367025821550962, 0.19969006237603726, 0.16477472070299137, 0.26709603093852863, 0.19142979059065712, 0.7677312439333391, 0.8006993282745635, 0.18746019788553658, 0.18457338064031314, 0.19045768179370315, 0.18104374737720919, 0.2067175487034526, 0.1949386473517266, 0.18218856813106543, 0.20927015915594627, 0.18031558019950822, 0.08778861130634619, 0.08750828319597947, 0.0847107861001366, 0.0804630353229997, 0.08515423498548458, 0.08747536457871863, 0.08622800478355452, 0.09090738885357497, 0.09241164936318036]}, "mutation_prompt": null}
{"id": "7e9fede4-d69a-4809-a6a8-b363998e692d", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        diversity = np.std(self.population)\n        adaptive_factor = 1.0 if fitness_improvement > 0 else self.scaling_factor * (1 - diversity / self.ub)\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with adaptive crossover rate and mutation factor scaling based on diversity.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a77a6cbe-5c17-4345-8ef3-aebd95a35425", "metadata": {"aucs": [0.8552266849198897, 0.851523675285539, 0.8621037485058396, 0.8099533809728796, 0.8181183828818304, 0.8245037525719361, 0.8556441081698354, 0.859996827815028, 0.8532800009680963, 0.7389705762900319, 0.741992828308538, 0.7394876538912316, 0.7476789248908566, 0.7465446898245538, 0.7510529207074906, 0.6731144254575777, 0.6934873578047005, 0.6478946485092156, 0.1754870977839682, 0.2710676673692505, 0.20709543810061637, 0.5720976945211713, 0.13754421235971237, 0.1821849094766197, 0.15397141073074105, 0.21817547464677822, 0.6107914423454974, 0.11209404768426634, 0.1423390170465938, 0.15241923064428342, 0.12648359089687, 0.16815498878080193, 0.13507852462078374, 0.17304788614319655, 0.1325242920611136, 0.17143639232265195, 0.8944415783829885, 0.9161079877908611, 0.9418870675984922, 0.9279444396600104, 0.8932599335687387, 0.8692987303794146, 0.9187278201869109, 0.8859573373308905, 0.9201646586915944, 0.6207450992418946, 0.6190659576417451, 0.5232179273375481, 0.5813926927143798, 0.5621628289175518, 0.5262272518298468, 0.6263854065333045, 0.5531277604778135, 0.6084317912685304, 0.8579735115995012, 0.8472798842230166, 0.8851979030301307, 0.823986388076947, 0.8317176986744048, 0.8560374412940938, 0.8092813364957002, 0.8513720229013607, 0.8376145356845921, 0.17995912472312137, 0.6271072797203857, 0.13986660379442106, 0.12511849657094953, 0.16972055302967148, 0.16851606947991926, 0.6340317502077284, 0.20127369200662026, 0.17790965720281293, 0.18372548050275095, 0.16019484486902524, 0.15668806268720614, 0.13106746104141764, 0.2003630147696044, 0.18198427522849336, 0.14198763471163334, 0.15444588609759247, 0.16281375777930385, 0.5710240663597625, 0.6053074448283727, 0.5791102739933427, 0.5828915456327743, 0.5948146101425246, 0.5933287091211308, 0.6754098809720929, 0.647531871704218, 0.6481937445849328, 0.7068998798024568, 0.7231645779076761, 0.7423821078686459, 0.6659821656826372, 0.6829314159484261, 0.6898273534092378, 0.7164968794114603, 0.7151729163567939, 0.7206903308540207, 0.08090122783619991, 0.2926147499415427, 0.18162583544730349, 0.4388378851125816, 0.4409032092208417, 0.4716283227689406, 0.21282364616051652, 0.2920913759994863, 0.20825578204971817, 0.46314616838438016, 0.4200805948562688, 0.45433042461487716, 0.416030876518252, 0.3955208115645209, 0.39459720601497794, 0.4171727634739548, 0.4135390050839519, 0.37351360101875375, 0.8008966854024148, 0.7944685413113065, 0.8142590628932144, 0.7790441734818246, 0.7594887138490455, 0.7866401942330972, 0.8013933412945935, 0.8137159706727282, 0.8197605359685101, 0.11480572556336788, 0.11909463135591647, 0.11084902208346281, 0.141166976725438, 0.14903025117892188, 0.1342748625571636, 0.11304897009327375, 0.1617199015618047, 0.1390992672004291, 0.16673579554562135, 0.23786839795934334, 0.1851384449054999, 0.28009584141794486, 0.14651221853851515, 0.29253478027557855, 0.23232606450932325, 0.4720600886535472, 0.14753437146003556, 0.5504321714810904, 0.5414923436531659, 0.5618085771630343, 0.605605673671848, 0.6177713365774438, 0.6193096925470074, 0.528408986069929, 0.5477837579344529, 0.5223001600419355, 0.4194670164862323, 0.3868528227866552, 0.4222202715286857, 0.46090687439695477, 0.47741285110924514, 0.47490319943552006, 0.40628335237446833, 0.3971330050527936, 0.40643244780291055, 0.23102389375029353, 0.19570377219912738, 0.21010537082999203, 0.20914090352908565, 0.21925100798175712, 0.21219774136832548, 0.18752191399280604, 0.21808728511985287, 0.21330098335625247, 0.21740121282643743, 0.2367940708809868, 0.19438160542543348, 0.21339323893066353, 0.24309954086010088, 0.19291269082796525, 0.1913312669145627, 0.7577861247964197, 0.21816572581945848, 0.7702316406091525, 0.8464562085576028, 0.7095649597846061, 0.8439018248031656, 0.8019283270585332, 0.28136812206051653, 0.7378360829873518, 0.2256420118552087, 0.817156599850717, 0.8470290503645408, 0.20643645516264264, 0.8367025821550962, 0.19969006237603726, 0.16477472070299137, 0.26709603093852863, 0.19142979059065712, 0.7677312439333391, 0.8006993282745635, 0.18746019788553658, 0.18457338064031314, 0.19045768179370315, 0.18104374737720919, 0.2067175487034526, 0.1949386473517266, 0.18218856813106543, 0.20927015915594627, 0.18031558019950822, 0.08778861130634619, 0.08750828319597947, 0.0847107861001366, 0.0804630353229997, 0.08515423498548458, 0.08747536457871863, 0.08622800478355452, 0.09090738885357497, 0.09241164936318036]}, "mutation_prompt": null}
{"id": "371e62a1-3345-4b1d-aefc-5103d8f56be7", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        diversity = np.std(self.population)\n        adaptive_factor = 1.0 if fitness_improvement > 0 else self.scaling_factor * (1 - diversity / self.ub)\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with adaptive crossover rate and mutation factor scaling based on diversity.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a77a6cbe-5c17-4345-8ef3-aebd95a35425", "metadata": {"aucs": [0.8552266849198897, 0.851523675285539, 0.8621037485058396, 0.8099533809728796, 0.8181183828818304, 0.8245037525719361, 0.8556441081698354, 0.859996827815028, 0.8532800009680963, 0.7389705762900319, 0.741992828308538, 0.7394876538912316, 0.7476789248908566, 0.7465446898245538, 0.7510529207074906, 0.6731144254575777, 0.6934873578047005, 0.6478946485092156, 0.1754870977839682, 0.2710676673692505, 0.20709543810061637, 0.5720976945211713, 0.13754421235971237, 0.1821849094766197, 0.15397141073074105, 0.21817547464677822, 0.6107914423454974, 0.11209404768426634, 0.1423390170465938, 0.15241923064428342, 0.12648359089687, 0.16815498878080193, 0.13507852462078374, 0.17304788614319655, 0.1325242920611136, 0.17143639232265195, 0.8944415783829885, 0.9161079877908611, 0.9418870675984922, 0.9279444396600104, 0.8932599335687387, 0.8692987303794146, 0.9187278201869109, 0.8859573373308905, 0.9201646586915944, 0.6207450992418946, 0.6190659576417451, 0.5232179273375481, 0.5813926927143798, 0.5621628289175518, 0.5262272518298468, 0.6263854065333045, 0.5531277604778135, 0.6084317912685304, 0.8579735115995012, 0.8472798842230166, 0.8851979030301307, 0.823986388076947, 0.8317176986744048, 0.8560374412940938, 0.8092813364957002, 0.8513720229013607, 0.8376145356845921, 0.17995912472312137, 0.6271072797203857, 0.13986660379442106, 0.12511849657094953, 0.16972055302967148, 0.16851606947991926, 0.6340317502077284, 0.20127369200662026, 0.17790965720281293, 0.18372548050275095, 0.16019484486902524, 0.15668806268720614, 0.13106746104141764, 0.2003630147696044, 0.18198427522849336, 0.14198763471163334, 0.15444588609759247, 0.16281375777930385, 0.5710240663597625, 0.6053074448283727, 0.5791102739933427, 0.5828915456327743, 0.5948146101425246, 0.5933287091211308, 0.6754098809720929, 0.647531871704218, 0.6481937445849328, 0.7068998798024568, 0.7231645779076761, 0.7423821078686459, 0.6659821656826372, 0.6829314159484261, 0.6898273534092378, 0.7164968794114603, 0.7151729163567939, 0.7206903308540207, 0.08090122783619991, 0.2926147499415427, 0.18162583544730349, 0.4388378851125816, 0.4409032092208417, 0.4716283227689406, 0.21282364616051652, 0.2920913759994863, 0.20825578204971817, 0.46314616838438016, 0.4200805948562688, 0.45433042461487716, 0.416030876518252, 0.3955208115645209, 0.39459720601497794, 0.4171727634739548, 0.4135390050839519, 0.37351360101875375, 0.8008966854024148, 0.7944685413113065, 0.8142590628932144, 0.7790441734818246, 0.7594887138490455, 0.7866401942330972, 0.8013933412945935, 0.8137159706727282, 0.8197605359685101, 0.11480572556336788, 0.11909463135591647, 0.11084902208346281, 0.141166976725438, 0.14903025117892188, 0.1342748625571636, 0.11304897009327375, 0.1617199015618047, 0.1390992672004291, 0.16673579554562135, 0.23786839795934334, 0.1851384449054999, 0.28009584141794486, 0.14651221853851515, 0.29253478027557855, 0.23232606450932325, 0.4720600886535472, 0.14753437146003556, 0.5504321714810904, 0.5414923436531659, 0.5618085771630343, 0.605605673671848, 0.6177713365774438, 0.6193096925470074, 0.528408986069929, 0.5477837579344529, 0.5223001600419355, 0.4194670164862323, 0.3868528227866552, 0.4222202715286857, 0.46090687439695477, 0.47741285110924514, 0.47490319943552006, 0.40628335237446833, 0.3971330050527936, 0.40643244780291055, 0.23102389375029353, 0.19570377219912738, 0.21010537082999203, 0.20914090352908565, 0.21925100798175712, 0.21219774136832548, 0.18752191399280604, 0.21808728511985287, 0.21330098335625247, 0.21740121282643743, 0.2367940708809868, 0.19438160542543348, 0.21339323893066353, 0.24309954086010088, 0.19291269082796525, 0.1913312669145627, 0.7577861247964197, 0.21816572581945848, 0.7702316406091525, 0.8464562085576028, 0.7095649597846061, 0.8439018248031656, 0.8019283270585332, 0.28136812206051653, 0.7378360829873518, 0.2256420118552087, 0.817156599850717, 0.8470290503645408, 0.20643645516264264, 0.8367025821550962, 0.19969006237603726, 0.16477472070299137, 0.26709603093852863, 0.19142979059065712, 0.7677312439333391, 0.8006993282745635, 0.18746019788553658, 0.18457338064031314, 0.19045768179370315, 0.18104374737720919, 0.2067175487034526, 0.1949386473517266, 0.18218856813106543, 0.20927015915594627, 0.18031558019950822, 0.08778861130634619, 0.08750828319597947, 0.0847107861001366, 0.0804630353229997, 0.08515423498548458, 0.08747536457871863, 0.08622800478355452, 0.09090738885357497, 0.09241164936318036]}, "mutation_prompt": null}
{"id": "d4c0237b-b0a5-4cad-8a4d-2fd5c5e0615f", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        diversity = np.std(self.population)\n        adaptive_factor = 1.0 if fitness_improvement > 0 else self.scaling_factor * (1 - diversity / self.ub)\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with adaptive crossover rate and mutation factor scaling based on diversity.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a77a6cbe-5c17-4345-8ef3-aebd95a35425", "metadata": {"aucs": [0.8552266849198897, 0.851523675285539, 0.8621037485058396, 0.8099533809728796, 0.8181183828818304, 0.8245037525719361, 0.8556441081698354, 0.859996827815028, 0.8532800009680963, 0.7389705762900319, 0.741992828308538, 0.7394876538912316, 0.7476789248908566, 0.7465446898245538, 0.7510529207074906, 0.6731144254575777, 0.6934873578047005, 0.6478946485092156, 0.1754870977839682, 0.2710676673692505, 0.20709543810061637, 0.5720976945211713, 0.13754421235971237, 0.1821849094766197, 0.15397141073074105, 0.21817547464677822, 0.6107914423454974, 0.11209404768426634, 0.1423390170465938, 0.15241923064428342, 0.12648359089687, 0.16815498878080193, 0.13507852462078374, 0.17304788614319655, 0.1325242920611136, 0.17143639232265195, 0.8944415783829885, 0.9161079877908611, 0.9418870675984922, 0.9279444396600104, 0.8932599335687387, 0.8692987303794146, 0.9187278201869109, 0.8859573373308905, 0.9201646586915944, 0.6207450992418946, 0.6190659576417451, 0.5232179273375481, 0.5813926927143798, 0.5621628289175518, 0.5262272518298468, 0.6263854065333045, 0.5531277604778135, 0.6084317912685304, 0.8579735115995012, 0.8472798842230166, 0.8851979030301307, 0.823986388076947, 0.8317176986744048, 0.8560374412940938, 0.8092813364957002, 0.8513720229013607, 0.8376145356845921, 0.17995912472312137, 0.6271072797203857, 0.13986660379442106, 0.12511849657094953, 0.16972055302967148, 0.16851606947991926, 0.6340317502077284, 0.20127369200662026, 0.17790965720281293, 0.18372548050275095, 0.16019484486902524, 0.15668806268720614, 0.13106746104141764, 0.2003630147696044, 0.18198427522849336, 0.14198763471163334, 0.15444588609759247, 0.16281375777930385, 0.5710240663597625, 0.6053074448283727, 0.5791102739933427, 0.5828915456327743, 0.5948146101425246, 0.5933287091211308, 0.6754098809720929, 0.647531871704218, 0.6481937445849328, 0.7068998798024568, 0.7231645779076761, 0.7423821078686459, 0.6659821656826372, 0.6829314159484261, 0.6898273534092378, 0.7164968794114603, 0.7151729163567939, 0.7206903308540207, 0.08090122783619991, 0.2926147499415427, 0.18162583544730349, 0.4388378851125816, 0.4409032092208417, 0.4716283227689406, 0.21282364616051652, 0.2920913759994863, 0.20825578204971817, 0.46314616838438016, 0.4200805948562688, 0.45433042461487716, 0.416030876518252, 0.3955208115645209, 0.39459720601497794, 0.4171727634739548, 0.4135390050839519, 0.37351360101875375, 0.8008966854024148, 0.7944685413113065, 0.8142590628932144, 0.7790441734818246, 0.7594887138490455, 0.7866401942330972, 0.8013933412945935, 0.8137159706727282, 0.8197605359685101, 0.11480572556336788, 0.11909463135591647, 0.11084902208346281, 0.141166976725438, 0.14903025117892188, 0.1342748625571636, 0.11304897009327375, 0.1617199015618047, 0.1390992672004291, 0.16673579554562135, 0.23786839795934334, 0.1851384449054999, 0.28009584141794486, 0.14651221853851515, 0.29253478027557855, 0.23232606450932325, 0.4720600886535472, 0.14753437146003556, 0.5504321714810904, 0.5414923436531659, 0.5618085771630343, 0.605605673671848, 0.6177713365774438, 0.6193096925470074, 0.528408986069929, 0.5477837579344529, 0.5223001600419355, 0.4194670164862323, 0.3868528227866552, 0.4222202715286857, 0.46090687439695477, 0.47741285110924514, 0.47490319943552006, 0.40628335237446833, 0.3971330050527936, 0.40643244780291055, 0.23102389375029353, 0.19570377219912738, 0.21010537082999203, 0.20914090352908565, 0.21925100798175712, 0.21219774136832548, 0.18752191399280604, 0.21808728511985287, 0.21330098335625247, 0.21740121282643743, 0.2367940708809868, 0.19438160542543348, 0.21339323893066353, 0.24309954086010088, 0.19291269082796525, 0.1913312669145627, 0.7577861247964197, 0.21816572581945848, 0.7702316406091525, 0.8464562085576028, 0.7095649597846061, 0.8439018248031656, 0.8019283270585332, 0.28136812206051653, 0.7378360829873518, 0.2256420118552087, 0.817156599850717, 0.8470290503645408, 0.20643645516264264, 0.8367025821550962, 0.19969006237603726, 0.16477472070299137, 0.26709603093852863, 0.19142979059065712, 0.7677312439333391, 0.8006993282745635, 0.18746019788553658, 0.18457338064031314, 0.19045768179370315, 0.18104374737720919, 0.2067175487034526, 0.1949386473517266, 0.18218856813106543, 0.20927015915594627, 0.18031558019950822, 0.08778861130634619, 0.08750828319597947, 0.0847107861001366, 0.0804630353229997, 0.08515423498548458, 0.08747536457871863, 0.08622800478355452, 0.09090738885357497, 0.09241164936318036]}, "mutation_prompt": null}
{"id": "6441984c-ab35-4a8e-b781-16f3120ef4a0", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        diversity = np.std(self.population)\n        adaptive_factor = 1.0 if fitness_improvement > 0 else self.scaling_factor * (1 - diversity / self.ub)\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced HybridGADE with adaptive crossover rate and mutation factor scaling based on diversity.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a77a6cbe-5c17-4345-8ef3-aebd95a35425", "metadata": {"aucs": [0.8552266849198897, 0.851523675285539, 0.8621037485058396, 0.8099533809728796, 0.8181183828818304, 0.8245037525719361, 0.8556441081698354, 0.859996827815028, 0.8532800009680963, 0.7389705762900319, 0.741992828308538, 0.7394876538912316, 0.7476789248908566, 0.7465446898245538, 0.7510529207074906, 0.6731144254575777, 0.6934873578047005, 0.6478946485092156, 0.1754870977839682, 0.2710676673692505, 0.20709543810061637, 0.5720976945211713, 0.13754421235971237, 0.1821849094766197, 0.15397141073074105, 0.21817547464677822, 0.6107914423454974, 0.11209404768426634, 0.1423390170465938, 0.15241923064428342, 0.12648359089687, 0.16815498878080193, 0.13507852462078374, 0.17304788614319655, 0.1325242920611136, 0.17143639232265195, 0.8944415783829885, 0.9161079877908611, 0.9418870675984922, 0.9279444396600104, 0.8932599335687387, 0.8692987303794146, 0.9187278201869109, 0.8859573373308905, 0.9201646586915944, 0.6207450992418946, 0.6190659576417451, 0.5232179273375481, 0.5813926927143798, 0.5621628289175518, 0.5262272518298468, 0.6263854065333045, 0.5531277604778135, 0.6084317912685304, 0.8579735115995012, 0.8472798842230166, 0.8851979030301307, 0.823986388076947, 0.8317176986744048, 0.8560374412940938, 0.8092813364957002, 0.8513720229013607, 0.8376145356845921, 0.17995912472312137, 0.6271072797203857, 0.13986660379442106, 0.12511849657094953, 0.16972055302967148, 0.16851606947991926, 0.6340317502077284, 0.20127369200662026, 0.17790965720281293, 0.18372548050275095, 0.16019484486902524, 0.15668806268720614, 0.13106746104141764, 0.2003630147696044, 0.18198427522849336, 0.14198763471163334, 0.15444588609759247, 0.16281375777930385, 0.5710240663597625, 0.6053074448283727, 0.5791102739933427, 0.5828915456327743, 0.5948146101425246, 0.5933287091211308, 0.6754098809720929, 0.647531871704218, 0.6481937445849328, 0.7068998798024568, 0.7231645779076761, 0.7423821078686459, 0.6659821656826372, 0.6829314159484261, 0.6898273534092378, 0.7164968794114603, 0.7151729163567939, 0.7206903308540207, 0.08090122783619991, 0.2926147499415427, 0.18162583544730349, 0.4388378851125816, 0.4409032092208417, 0.4716283227689406, 0.21282364616051652, 0.2920913759994863, 0.20825578204971817, 0.46314616838438016, 0.4200805948562688, 0.45433042461487716, 0.416030876518252, 0.3955208115645209, 0.39459720601497794, 0.4171727634739548, 0.4135390050839519, 0.37351360101875375, 0.8008966854024148, 0.7944685413113065, 0.8142590628932144, 0.7790441734818246, 0.7594887138490455, 0.7866401942330972, 0.8013933412945935, 0.8137159706727282, 0.8197605359685101, 0.11480572556336788, 0.11909463135591647, 0.11084902208346281, 0.141166976725438, 0.14903025117892188, 0.1342748625571636, 0.11304897009327375, 0.1617199015618047, 0.1390992672004291, 0.16673579554562135, 0.23786839795934334, 0.1851384449054999, 0.28009584141794486, 0.14651221853851515, 0.29253478027557855, 0.23232606450932325, 0.4720600886535472, 0.14753437146003556, 0.5504321714810904, 0.5414923436531659, 0.5618085771630343, 0.605605673671848, 0.6177713365774438, 0.6193096925470074, 0.528408986069929, 0.5477837579344529, 0.5223001600419355, 0.4194670164862323, 0.3868528227866552, 0.4222202715286857, 0.46090687439695477, 0.47741285110924514, 0.47490319943552006, 0.40628335237446833, 0.3971330050527936, 0.40643244780291055, 0.23102389375029353, 0.19570377219912738, 0.21010537082999203, 0.20914090352908565, 0.21925100798175712, 0.21219774136832548, 0.18752191399280604, 0.21808728511985287, 0.21330098335625247, 0.21740121282643743, 0.2367940708809868, 0.19438160542543348, 0.21339323893066353, 0.24309954086010088, 0.19291269082796525, 0.1913312669145627, 0.7577861247964197, 0.21816572581945848, 0.7702316406091525, 0.8464562085576028, 0.7095649597846061, 0.8439018248031656, 0.8019283270585332, 0.28136812206051653, 0.7378360829873518, 0.2256420118552087, 0.817156599850717, 0.8470290503645408, 0.20643645516264264, 0.8367025821550962, 0.19969006237603726, 0.16477472070299137, 0.26709603093852863, 0.19142979059065712, 0.7677312439333391, 0.8006993282745635, 0.18746019788553658, 0.18457338064031314, 0.19045768179370315, 0.18104374737720919, 0.2067175487034526, 0.1949386473517266, 0.18218856813106543, 0.20927015915594627, 0.18031558019950822, 0.08778861130634619, 0.08750828319597947, 0.0847107861001366, 0.0804630353229997, 0.08515423498548458, 0.08747536457871863, 0.08622800478355452, 0.09090738885357497, 0.09241164936318036]}, "mutation_prompt": null}
{"id": "d63e120f-1048-4e57-a66e-bc3a642240bc", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        diversity = np.std(self.population)\n        adaptive_factor = 1.0 if fitness_improvement > 0 else self.scaling_factor * (1 - diversity / self.ub)\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced exploration by varying population size dynamically to balance exploration and exploitation.", "configspace": "", "generation": 61, "fitness": 0.4567000571632978, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "a77a6cbe-5c17-4345-8ef3-aebd95a35425", "metadata": {"aucs": [0.8552266849198897, 0.851523675285539, 0.8621037485058396, 0.8099533809728796, 0.8181183828818304, 0.8245037525719361, 0.8556441081698354, 0.859996827815028, 0.8532800009680963, 0.7389705762900319, 0.741992828308538, 0.7394876538912316, 0.7476789248908566, 0.7465446898245538, 0.7510529207074906, 0.6734430880169946, 0.6934704217165191, 0.6490740163673825, 0.17548709712897903, 0.2680752067598352, 0.20615214526652137, 0.5871025405096246, 0.13754203841694201, 0.18185929403342915, 0.15397141073074072, 0.21817547463644782, 0.6169681558294872, 0.11209404808597623, 0.1423143569292299, 0.15241923065584273, 0.12648359089408734, 0.1680960774447885, 0.13507852464299708, 0.17311430166915365, 0.1325242920611136, 0.17143628881710882, 0.8944415783829885, 0.9161079877908611, 0.9418870675984922, 0.9279444396600104, 0.8932599335687387, 0.8692987303794146, 0.9187278201869109, 0.8859573373308905, 0.9201646586915944, 0.5907593034490535, 0.5855093209999847, 0.5132270223974333, 0.6085189323936504, 0.5794311317536203, 0.45665104358399355, 0.5962250396568181, 0.541405827143763, 0.5863361295925371, 0.8579735115995012, 0.8472798842230166, 0.8851979030301307, 0.823986388076947, 0.8317176986744048, 0.8560374412940938, 0.8092813364957002, 0.8513720229013607, 0.8376145356845921, 0.17987861505672786, 0.6351624328101568, 0.13984880303102676, 0.12511857799667192, 0.16975307965174902, 0.1685026266826164, 0.6420598944768755, 0.20132252257205752, 0.17663000599844725, 0.18372578273392093, 0.1601889072260586, 0.15668987695960657, 0.1310674610414524, 0.20036485264385917, 0.1819720843225312, 0.14198442620844032, 0.15445596041797638, 0.16281124251007062, 0.5913942080330377, 0.6101473112217095, 0.5917620456007124, 0.5987553392697968, 0.6073831580025271, 0.6093778942958159, 0.6757466013681375, 0.6488877715070326, 0.6520032010347538, 0.7072314670021715, 0.7231645779076761, 0.7423821078686459, 0.6677105244336072, 0.6889769756252269, 0.6917641997818762, 0.7164840166472487, 0.716027071042509, 0.7206903308540207, 0.08245233066128821, 0.2870644691626085, 0.17992585447608256, 0.4981955455823086, 0.4918497817726969, 0.5089038459000117, 0.21305071285399368, 0.28216728771474286, 0.20825486457937414, 0.5349865257823144, 0.5111756962380267, 0.5395104436004093, 0.5011957996295721, 0.4869853970218263, 0.48189958228667995, 0.5088085530484179, 0.49651200141765295, 0.4593340907712574, 0.8008966854024148, 0.7944685413113065, 0.8142590628932144, 0.7809025454389057, 0.762884561436801, 0.7873421444901019, 0.8013933412945935, 0.8137159706727282, 0.8197605359685101, 0.1136682865899733, 0.11908953347539342, 0.11084902223713411, 0.14116697685063395, 0.14903025129825487, 0.13427486258372678, 0.11304897009729242, 0.16171994433858783, 0.1271161010327997, 0.16685997743231706, 0.23883720918119478, 0.18522424858851672, 0.28382214977459874, 0.14651221893354338, 0.29303534407239074, 0.23357180221186624, 0.5162151683753528, 0.14753437146058002, 0.5024266264215524, 0.4987766353433847, 0.5475170746001758, 0.6205965896963386, 0.543794011282233, 0.5414309398916181, 0.488981384942317, 0.6036726168266059, 0.5019841021152659, 0.41459913078255817, 0.4328029928317777, 0.5098275636449705, 0.4590689522662599, 0.49078955586349704, 0.5193537293044161, 0.4469041129318694, 0.46351799469732724, 0.47194987835922986, 0.23102389375029353, 0.19570377219912738, 0.21010537082999203, 0.20914090352908565, 0.21097457739963843, 0.20682002629524054, 0.18752191399280604, 0.21808728511985287, 0.19696141975635795, 0.21740121284025837, 0.23679407214528736, 0.1943425448572591, 0.21339368115334822, 0.24309954086804464, 0.19294041775745707, 0.19131397613117207, 0.7577861247964197, 0.21816572592451344, 0.7702316406091525, 0.8464562085576028, 0.7095649597846061, 0.8439018248031656, 0.8019283270585332, 0.27910861236472406, 0.7378360829873518, 0.22374805881803872, 0.817156599850717, 0.8470290503645408, 0.20643645516306175, 0.8367025821550962, 0.1996900624102952, 0.16477472070299137, 0.265941704960972, 0.19142979059238674, 0.7677312439333391, 0.8006993282745635, 0.18746019788553658, 0.17451376817556752, 0.19045768179370315, 0.18104375217253388, 0.20671811424333586, 0.1949386473517266, 0.18218856813106543, 0.20927015915594627, 0.18031558019950822, 0.08778508119057582, 0.08750828319597947, 0.0847107861001366, 0.08083576566429407, 0.08515423498454433, 0.08747397367904741, 0.08540876365735273, 0.09090738885357497, 0.09241164936318036]}, "mutation_prompt": null}
{"id": "a81b72c8-0f4d-4fb9-b69c-ca7650cfd627", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        diversity = np.std(self.population)\n        adaptive_factor = 1.0 if fitness_improvement > 0 else self.scaling_factor * (1 - diversity / self.ub)\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced mutation mechanism by incorporating a diversity-based scaling factor to dynamically adjust mutation strength.", "configspace": "", "generation": 62, "fitness": 0.4492368252795216, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.29.", "error": "", "parent_id": "d63e120f-1048-4e57-a66e-bc3a642240bc", "metadata": {"aucs": [0.8481113057598947, 0.8483134277883997, 0.8604586163367536, 0.8243407794650405, 0.8076959313288671, 0.8391804686851764, 0.8566273396423663, 0.8549287819629268, 0.8496915144145802, 0.7468006140305116, 0.7520234896254255, 0.7526190302054062, 0.7519068112735634, 0.7381474589200836, 0.7375127197596165, 0.713140607956011, 0.7028409493493857, 0.7059757750522002, 0.18084423974659836, 0.15372946072802318, 0.23726514601257287, 0.14474829232662267, 0.13263475518092416, 0.17257029580340444, 0.1568821267348498, 0.5840554964313134, 0.14106981459565193, 0.15058197611734792, 0.151986410607712, 0.13825067021570225, 0.152752021771701, 0.25434100260916803, 0.1498753036728443, 0.15933382819720832, 0.12202603873665707, 0.11204135176557917, 0.927670138476041, 0.9494021576521143, 0.9288626819239573, 0.926338662924171, 0.8567933413481764, 0.9495418111398879, 0.9330431894321675, 0.95587531403699, 0.9165911166794702, 0.6357676090574275, 0.33042673030963565, 0.5713965895948204, 0.5999026688607627, 0.5155123864979345, 0.47278202753872733, 0.5756567250906017, 0.5791733870742923, 0.5106439664729883, 0.8705267105258384, 0.8625026621358065, 0.8757917547138167, 0.8310166827551695, 0.8113594430344032, 0.8209764332731695, 0.822688068600802, 0.8234735004372725, 0.8312817204633722, 0.17740934755770355, 0.166126922612166, 0.1748000601078895, 0.2899389711527742, 0.23515287112016792, 0.23614068401349364, 0.31385489315839044, 0.15617990406392268, 0.1481855007613433, 0.1893362406500978, 0.7602795828517457, 0.19260236796989072, 0.17497370317212058, 0.16592165120432678, 0.15119286719515435, 0.19819339127907842, 0.144057226629551, 0.13649986253684088, 0.5825612287084698, 0.6083445045014424, 0.605867717658692, 0.5829437111841087, 0.6141061136209682, 0.6056376576285287, 0.6752799676803538, 0.6041764195124515, 0.6571943917049919, 0.7251727509111514, 0.7003477133099527, 0.7107437117366525, 0.6962047966065662, 0.6880246738221025, 0.6787175943006175, 0.7183103555807234, 0.7188807411009264, 0.7260347098635012, 0.21006870387092547, 0.15882024426685293, 0.17330698276103484, 0.2785170345728313, 0.19683110778696156, 0.14918551457668583, 0.18877934764716142, 0.11884060773442084, 0.15234568263737347, 0.5367192290998184, 0.4679914567681768, 0.5095359654663847, 0.4897266986526019, 0.48201594594087593, 0.4932284267803061, 0.49614877121964707, 0.4822361053724231, 0.43526119607437164, 0.809801729404056, 0.8115824382135974, 0.8008482931525629, 0.7884810173414967, 0.7827872673198786, 0.7807906297029372, 0.8284957595283232, 0.8135992472328433, 0.8176335163703056, 0.10027978189955755, 0.1110805802827417, 0.10860080119361759, 0.09475652592575912, 0.1023253114629391, 0.1509105371504016, 0.11376936579944374, 0.10988559014720634, 0.13352718317490597, 0.14332643284044988, 0.13336535230331736, 0.13388139153010847, 0.12874193020139846, 0.24989253126277144, 0.17592450330756315, 0.2018199977858346, 0.2042009866692568, 0.14690238954642776, 0.5358546511200368, 0.5944965432563347, 0.6009080458053424, 0.5697200826886056, 0.6193869676394486, 0.5639281433928027, 0.4933535394545915, 0.4820671974399988, 0.5024555676668762, 0.487011163110493, 0.4970160601294866, 0.5021953646512363, 0.5569663690908522, 0.5275800339447263, 0.38173964832885854, 0.450538727310947, 0.4904646797137847, 0.45450682662465547, 0.19054067668442976, 0.22740114140939593, 0.21233288013929352, 0.21306422197779684, 0.18526928799687659, 0.2259768490051639, 0.20177819625330384, 0.22418656782422486, 0.2830770930736545, 0.20663526383024022, 0.6384244916256101, 0.21428745282878914, 0.23978608025236203, 0.21148977415860493, 0.6359299296045977, 0.19425213986328604, 0.20505857741404732, 0.1963208612567462, 0.8168124121450027, 0.17752462009825465, 0.7669918014175897, 0.8871627527882213, 0.7478119359370959, 0.8385658098375236, 0.8256161302597671, 0.16480159748824807, 0.772854675751549, 0.8671878786926902, 0.20089063127202522, 0.8416875862254708, 0.8565061531418332, 0.37023463847878724, 0.16414538228259368, 0.43582016382189115, 0.16534518453995228, 0.8107909612650677, 0.19503713859107685, 0.17040088097629924, 0.17351048031582683, 0.1964735472217095, 0.18009629202124566, 0.19017787957006405, 0.18610115116352, 0.19857651224992734, 0.17133731981226497, 0.07711737800581775, 0.08683260994194475, 0.09568790528485493, 0.09808204139934729, 0.08991581713582908, 0.09868898184324748, 0.06991123703618396, 0.08348180623543444, 0.0705076172536736]}, "mutation_prompt": null}
{"id": "6bbd14f2-7db3-4863-8e69-8c2bc9eda292", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        diversity = np.std(self.population)\n        adaptive_factor = 1.0 if fitness_improvement > 0 else self.scaling_factor * (1 - diversity / self.ub)\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhanced exploration by varying population size dynamically to balance exploration and exploitation.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d63e120f-1048-4e57-a66e-bc3a642240bc", "metadata": {"aucs": [0.8552266849198897, 0.851523675285539, 0.8621037485058396, 0.8099533809728796, 0.8181183828818304, 0.8245037525719361, 0.8556441081698354, 0.859996827815028, 0.8532800009680963, 0.7389705762900319, 0.741992828308538, 0.7394876538912316, 0.7476789248908566, 0.7465446898245538, 0.7510529207074906, 0.6734430880169946, 0.6934704217165191, 0.6490740163673825, 0.17548709712897903, 0.2680752067598352, 0.20615214526652137, 0.5871025405096246, 0.13754203841694201, 0.18185929403342915, 0.15397141073074072, 0.21817547463644782, 0.6169681558294872, 0.11209404808597623, 0.1423143569292299, 0.15241923065584273, 0.12648359089408734, 0.1680960774447885, 0.13507852464299708, 0.17311430166915365, 0.1325242920611136, 0.17143628881710882, 0.8944415783829885, 0.9161079877908611, 0.9418870675984922, 0.9279444396600104, 0.8932599335687387, 0.8692987303794146, 0.9187278201869109, 0.8859573373308905, 0.9201646586915944, 0.5907593034490535, 0.5855093209999847, 0.5132270223974333, 0.6085189323936504, 0.5794311317536203, 0.45665104358399355, 0.5962250396568181, 0.541405827143763, 0.5863361295925371, 0.8579735115995012, 0.8472798842230166, 0.8851979030301307, 0.823986388076947, 0.8317176986744048, 0.8560374412940938, 0.8092813364957002, 0.8513720229013607, 0.8376145356845921, 0.17987861505672786, 0.6351624328101568, 0.13984880303102676, 0.12511857799667192, 0.16975307965174902, 0.1685026266826164, 0.6420598944768755, 0.20132252257205752, 0.17663000599844725, 0.18372578273392093, 0.1601889072260586, 0.15668987695960657, 0.1310674610414524, 0.20036485264385917, 0.1819720843225312, 0.14198442620844032, 0.15445596041797638, 0.16281124251007062, 0.5913942080330377, 0.6101473112217095, 0.5917620456007124, 0.5987553392697968, 0.6073831580025271, 0.6093778942958159, 0.6757466013681375, 0.6488877715070326, 0.6520032010347538, 0.7072314670021715, 0.7231645779076761, 0.7423821078686459, 0.6677105244336072, 0.6889769756252269, 0.6917641997818762, 0.7164840166472487, 0.716027071042509, 0.7206903308540207, 0.08245233066128821, 0.2870644691626085, 0.17992585447608256, 0.4981955455823086, 0.4918497817726969, 0.5089038459000117, 0.21305071285399368, 0.28216728771474286, 0.20825486457937414, 0.5349865257823144, 0.5111756962380267, 0.5395104436004093, 0.5011957996295721, 0.4869853970218263, 0.48189958228667995, 0.5088085530484179, 0.49651200141765295, 0.4593340907712574, 0.8008966854024148, 0.7944685413113065, 0.8142590628932144, 0.7809025454389057, 0.762884561436801, 0.7873421444901019, 0.8013933412945935, 0.8137159706727282, 0.8197605359685101, 0.1136682865899733, 0.11908953347539342, 0.11084902223713411, 0.14116697685063395, 0.14903025129825487, 0.13427486258372678, 0.11304897009729242, 0.16171994433858783, 0.1271161010327997, 0.16685997743231706, 0.23883720918119478, 0.18522424858851672, 0.28382214977459874, 0.14651221893354338, 0.29303534407239074, 0.23357180221186624, 0.5162151683753528, 0.14753437146058002, 0.5024266264215524, 0.4987766353433847, 0.5475170746001758, 0.6205965896963386, 0.543794011282233, 0.5414309398916181, 0.488981384942317, 0.6036726168266059, 0.5019841021152659, 0.41459913078255817, 0.4328029928317777, 0.5098275636449705, 0.4590689522662599, 0.49078955586349704, 0.5193537293044161, 0.4469041129318694, 0.46351799469732724, 0.47194987835922986, 0.23102389375029353, 0.19570377219912738, 0.21010537082999203, 0.20914090352908565, 0.21097457739963843, 0.20682002629524054, 0.18752191399280604, 0.21808728511985287, 0.19696141975635795, 0.21740121284025837, 0.23679407214528736, 0.1943425448572591, 0.21339368115334822, 0.24309954086804464, 0.19294041775745707, 0.19131397613117207, 0.7577861247964197, 0.21816572592451344, 0.7702316406091525, 0.8464562085576028, 0.7095649597846061, 0.8439018248031656, 0.8019283270585332, 0.27910861236472406, 0.7378360829873518, 0.22374805881803872, 0.817156599850717, 0.8470290503645408, 0.20643645516306175, 0.8367025821550962, 0.1996900624102952, 0.16477472070299137, 0.265941704960972, 0.19142979059238674, 0.7677312439333391, 0.8006993282745635, 0.18746019788553658, 0.17451376817556752, 0.19045768179370315, 0.18104375217253388, 0.20671811424333586, 0.1949386473517266, 0.18218856813106543, 0.20927015915594627, 0.18031558019950822, 0.08778508119057582, 0.08750828319597947, 0.0847107861001366, 0.08083576566429407, 0.08515423498454433, 0.08747397367904741, 0.08540876365735273, 0.09090738885357497, 0.09241164936318036]}, "mutation_prompt": null}
{"id": "1c1c88a7-f9fc-4d94-aaa6-6d05d8f3c836", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        diversity = np.std(self.population)\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / self.ub)  # more varied adaptive scaling\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Introduce intelligent mutation scaling by considering past improvements and population diversity to better balance global and local search.", "configspace": "", "generation": 64, "fitness": 0.4683529985902876, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.30.", "error": "", "parent_id": "d63e120f-1048-4e57-a66e-bc3a642240bc", "metadata": {"aucs": [0.8822274133699077, 0.881176464307947, 0.8881859516920217, 0.8584437574453309, 0.8655813974225758, 0.8748262567042209, 0.8784250347712866, 0.8761221140310301, 0.8774775039802907, 0.7875417290592163, 0.7749226193687677, 0.7881698586852629, 0.7831030956126593, 0.7809158756570852, 0.1477190293438383, 0.7721284188202316, 0.7563948487397751, 0.14877220663867752, 0.1789605857526656, 0.18042093702122453, 0.6023074304205343, 0.1717318927975241, 0.5938056238669306, 0.24408514268849268, 0.1785673662651136, 0.21987301287746108, 0.1842731043262128, 0.15437868457196924, 0.15018428396508265, 0.17175277550029966, 0.15592088237405588, 0.14431109273954768, 0.12485628386855119, 0.7229627876673853, 0.12508404892025482, 0.15084967673666272, 0.8546500847126833, 0.9025432243275637, 0.9443008548201489, 0.7277734779857906, 0.8531635683727158, 0.8889193308754987, 0.9179713687402484, 0.8928831964377905, 0.9400189351735578, 0.320981769400843, 0.6942913933075467, 0.34967555484316415, 0.7116418761727019, 0.4639131765296043, 0.6924738015632683, 0.6540289389942984, 0.38008503376331004, 0.3319772918868319, 0.8754054397892297, 0.8704727253648299, 0.878802788146815, 0.8761303318707557, 0.8753382450702816, 0.8366980994311568, 0.8401155294503365, 0.873008509777194, 0.8712601819835277, 0.1992440742897439, 0.7511338333709646, 0.16696282707441956, 0.21196862051210807, 0.14765213598714233, 0.16099499159963526, 0.1308916640172365, 0.22925118514366627, 0.15643468529772542, 0.30880695521183865, 0.17840134974054023, 0.1513843758238279, 0.15438754836018653, 0.2169945192439423, 0.1470737534240969, 0.16637403557284447, 0.15642626103185098, 0.1706893823859802, 0.690132470659317, 0.7042117884851025, 0.7117729236434636, 0.6542343724172054, 0.6193437456256212, 0.1860515675599449, 0.7259894547317115, 0.7317078132645244, 0.7369985787903197, 0.7793991777562116, 0.7818795045092419, 0.7839319856711255, 0.7727844935424633, 0.738366633415359, 0.7564402232075194, 0.80287996159972, 0.7647387513390378, 0.7964860966593957, 0.46583767746844584, 0.14528840757044326, 0.1508380010717567, 0.14921445587101445, 0.3276671802654738, 0.6203484566676578, 0.2092588199472415, 0.11682546346243494, 0.24403100779512155, 0.6335728266167058, 0.6203251234667109, 0.5720711388816879, 0.6052611635620536, 0.5535573366258245, 0.633147711696934, 0.61889175739826, 0.4368536080826594, 0.5557622544172194, 0.8241417735114387, 0.8327426736830925, 0.854337454872367, 0.8372531019966961, 0.8353597524397642, 0.8343955012896831, 0.8541726462843937, 0.7801663176249514, 0.8250176937386561, 0.1036165998989198, 0.14629458268139917, 0.16333087232878518, 0.1718043051694902, 0.12502911760680058, 0.1284791503723549, 0.14125352434307736, 0.15046278640879196, 0.16904856380475086, 0.2474069062235027, 0.18863229738931753, 0.12754147738002142, 0.14696519113965567, 0.2719176726557886, 0.20850528893695064, 0.12777749364628632, 0.24677866665719161, 0.29193202253620243, 0.6772673569455459, 0.6919345307173017, 0.7038382363571307, 0.5874886943893265, 0.5130105381245236, 0.6830745459105574, 0.6436140318789852, 0.5512439461661277, 0.5848385780913039, 0.4822342048249416, 0.6075907973873986, 0.5169600450441653, 0.5359202747249232, 0.3766399031429619, 0.4854949877491054, 0.444761713698408, 0.5183518273631715, 0.5168006388820977, 0.21471697812400703, 0.19977154641865413, 0.2095814762511069, 0.21026048162726096, 0.27152120467479046, 0.18265600895305978, 0.20350471430895412, 0.18976286440974022, 0.20761665428584808, 0.7694043883301092, 0.2438061436264014, 0.21988979446194112, 0.20491486403878756, 0.18862248743851673, 0.2228894867862019, 0.1986036481532545, 0.21571999387973684, 0.24624064425536873, 0.8578252606894012, 0.8783160208882821, 0.15185488253329982, 0.894978434522928, 0.19943286959754947, 0.8902065780975121, 0.8617460578356197, 0.8586363793520385, 0.16698853225554744, 0.8961799863645477, 0.37640323836678014, 0.8592927074581838, 0.873796855762861, 0.16675837466394006, 0.16594733951010787, 0.885422576685269, 0.8289410090477576, 0.15437363690645, 0.19356648210832428, 0.1889845700814884, 0.17090568434921038, 0.18819693227822165, 0.17513350206155687, 0.1922972758874153, 0.17759661279209393, 0.1838238411060864, 0.1866962675248881, 0.08487126989707217, 0.09786777360096088, 0.0843539441940786, 0.08921936083056348, 0.08211199383968015, 0.08624308472971931, 0.09638435490901798, 0.08493458675174914, 0.08288970334542356]}, "mutation_prompt": null}
{"id": "3f1f00c7-25e4-42f6-ad72-5f09e12fcb5b", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        diversity = np.std(self.population)\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / self.ub)  # more varied adaptive scaling\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Introduce intelligent mutation scaling by considering past improvements and population diversity to better balance global and local search.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c1c88a7-f9fc-4d94-aaa6-6d05d8f3c836", "metadata": {"aucs": [0.8822274133699077, 0.881176464307947, 0.8881859516920217, 0.8584437574453309, 0.8655813974225758, 0.8748262567042209, 0.8784250347712866, 0.8761221140310301, 0.8774775039802907, 0.7875417290592163, 0.7749226193687677, 0.7881698586852629, 0.7831030956126593, 0.7809158756570852, 0.1477190293438383, 0.7721284188202316, 0.7563948487397751, 0.14877220663867752, 0.1789605857526656, 0.18042093702122453, 0.6023074304205343, 0.1717318927975241, 0.5938056238669306, 0.24408514268849268, 0.1785673662651136, 0.21987301287746108, 0.1842731043262128, 0.15437868457196924, 0.15018428396508265, 0.17175277550029966, 0.15592088237405588, 0.14431109273954768, 0.12485628386855119, 0.7229627876673853, 0.12508404892025482, 0.15084967673666272, 0.8546500847126833, 0.9025432243275637, 0.9443008548201489, 0.7277734779857906, 0.8531635683727158, 0.8889193308754987, 0.9179713687402484, 0.8928831964377905, 0.9400189351735578, 0.320981769400843, 0.6942913933075467, 0.34967555484316415, 0.7116418761727019, 0.4639131765296043, 0.6924738015632683, 0.6540289389942984, 0.38008503376331004, 0.3319772918868319, 0.8754054397892297, 0.8704727253648299, 0.878802788146815, 0.8761303318707557, 0.8753382450702816, 0.8366980994311568, 0.8401155294503365, 0.873008509777194, 0.8712601819835277, 0.1992440742897439, 0.7511338333709646, 0.16696282707441956, 0.21196862051210807, 0.14765213598714233, 0.16099499159963526, 0.1308916640172365, 0.22925118514366627, 0.15643468529772542, 0.30880695521183865, 0.17840134974054023, 0.1513843758238279, 0.15438754836018653, 0.2169945192439423, 0.1470737534240969, 0.16637403557284447, 0.15642626103185098, 0.1706893823859802, 0.690132470659317, 0.7042117884851025, 0.7117729236434636, 0.6542343724172054, 0.6193437456256212, 0.1860515675599449, 0.7259894547317115, 0.7317078132645244, 0.7369985787903197, 0.7793991777562116, 0.7818795045092419, 0.7839319856711255, 0.7727844935424633, 0.738366633415359, 0.7564402232075194, 0.80287996159972, 0.7647387513390378, 0.7964860966593957, 0.46583767746844584, 0.14528840757044326, 0.1508380010717567, 0.14921445587101445, 0.3276671802654738, 0.6203484566676578, 0.2092588199472415, 0.11682546346243494, 0.24403100779512155, 0.6335728266167058, 0.6203251234667109, 0.5720711388816879, 0.6052611635620536, 0.5535573366258245, 0.633147711696934, 0.61889175739826, 0.4368536080826594, 0.5557622544172194, 0.8241417735114387, 0.8327426736830925, 0.854337454872367, 0.8372531019966961, 0.8353597524397642, 0.8343955012896831, 0.8541726462843937, 0.7801663176249514, 0.8250176937386561, 0.1036165998989198, 0.14629458268139917, 0.16333087232878518, 0.1718043051694902, 0.12502911760680058, 0.1284791503723549, 0.14125352434307736, 0.15046278640879196, 0.16904856380475086, 0.2474069062235027, 0.18863229738931753, 0.12754147738002142, 0.14696519113965567, 0.2719176726557886, 0.20850528893695064, 0.12777749364628632, 0.24677866665719161, 0.29193202253620243, 0.6772673569455459, 0.6919345307173017, 0.7038382363571307, 0.5874886943893265, 0.5130105381245236, 0.6830745459105574, 0.6436140318789852, 0.5512439461661277, 0.5848385780913039, 0.4822342048249416, 0.6075907973873986, 0.5169600450441653, 0.5359202747249232, 0.3766399031429619, 0.4854949877491054, 0.444761713698408, 0.5183518273631715, 0.5168006388820977, 0.21471697812400703, 0.19977154641865413, 0.2095814762511069, 0.21026048162726096, 0.27152120467479046, 0.18265600895305978, 0.20350471430895412, 0.18976286440974022, 0.20761665428584808, 0.7694043883301092, 0.2438061436264014, 0.21988979446194112, 0.20491486403878756, 0.18862248743851673, 0.2228894867862019, 0.1986036481532545, 0.21571999387973684, 0.24624064425536873, 0.8578252606894012, 0.8783160208882821, 0.15185488253329982, 0.894978434522928, 0.19943286959754947, 0.8902065780975121, 0.8617460578356197, 0.8586363793520385, 0.16698853225554744, 0.8961799863645477, 0.37640323836678014, 0.8592927074581838, 0.873796855762861, 0.16675837466394006, 0.16594733951010787, 0.885422576685269, 0.8289410090477576, 0.15437363690645, 0.19356648210832428, 0.1889845700814884, 0.17090568434921038, 0.18819693227822165, 0.17513350206155687, 0.1922972758874153, 0.17759661279209393, 0.1838238411060864, 0.1866962675248881, 0.08487126989707217, 0.09786777360096088, 0.0843539441940786, 0.08921936083056348, 0.08211199383968015, 0.08624308472971931, 0.09638435490901798, 0.08493458675174914, 0.08288970334542356]}, "mutation_prompt": null}
{"id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 66, "fitness": 0.4722066261510966, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.30.", "error": "", "parent_id": "1c1c88a7-f9fc-4d94-aaa6-6d05d8f3c836", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "57fc6612-9fe3-41da-aef4-ee778db61ae9", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "4cf6299d-703d-46b7-81da-ef7e7afc35cf", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "ba0899cf-54d2-4e3c-ab41-c60b62444984", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "e3c24404-46fe-4bab-aad9-6fa1d0583841", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "9a400336-c452-4812-9858-e73a53a9a4dc", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "b6ae23ae-8552-4dac-a71d-5c5e04924c49", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "8e6705de-5197-48cf-94dc-7f46c4ff85f9", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        # Adjust mutation scale based on remaining budget to boost exploration\n        mutation_scale = self.mutation_factor * (1 + (self.budget - fitness_improvement) / self.budget)\n        mutant = target + adaptive_factor * mutation_scale * (best - target) + mutation_scale * (r1 - r2) + mutation_scale * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Utilize adaptive population resizing and mutation scaling based on current optimization phase to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 73, "fitness": 0.38205347749659196, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.27.", "error": "", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8166619136746901, 0.7331052916871242, 0.7879552343473947, 0.792301446409604, 0.8004729557563284, 0.7904769018109543, 0.7903249979084065, 0.8049707172551885, 0.7757132245242558, 0.546617662694225, 0.6232576980213208, 0.1597386994452762, 0.07535334625696888, 0.6120950796558648, 0.5748611331488862, 0.5695598513252931, 0.5351378244103038, 0.583939692609192, 0.17734772915295138, 0.17078460165057074, 0.1511585346429507, 0.6429714610546384, 0.1734022524112495, 0.17545280982650324, 0.11839072242049131, 0.14934026878411766, 0.17075697954922875, 0.1712390326762796, 0.14739839486706918, 0.5579168032968517, 0.1711881611223418, 0.12601347582773104, 0.15034505235697904, 0.17256967001402213, 0.1307858929690754, 0.16744750137436548, 0.9593806401521405, 0.9625311155254831, 0.9896100668332434, 0.9765277211098534, 0.9492478677432905, 0.9389099618557334, 0.9776561960208066, 0.972223256893647, 0.9681428600575939, 0.5875436300210319, 0.5856163534531575, 0.5463237555696551, 0.6141345277184903, 0.5568937463433556, 0.5503997242181782, 0.05001861673975705, 0.5463624057834635, 0.08581396721921031, 0.7933625504238022, 0.2080162815555524, 0.7622866359659841, 0.7202048190541108, 0.7705024782297942, 0.3597114585563397, 0.3590034526644419, 0.8209600467979976, 0.796579600077413, 0.12388583049533008, 0.5156916754191228, 0.5279177306919287, 0.48473318097354534, 0.12188410678583328, 0.47390584561353155, 0.5068304834133601, 0.47914803387470417, 0.5530920973686417, 0.5503128496914498, 0.48356794777788414, 0.5304383423759089, 0.5482441483500134, 0.5800683737729122, 0.5738038696314897, 0.5171785512714249, 0.5193233301086525, 0.48106487755828486, 0.06018373439051361, 0.06700866744524825, 9.999999999998899e-05, 0.31699959095615393, 9.999999999998899e-05, 0.36769350499271014, 0.3902543996273833, 0.22842019895521215, 0.2862514090219256, 0.4262983455244769, 0.5137983358739353, 0.5098131453529867, 0.5589910738755108, 0.5558958484836409, 0.5390432122805868, 0.007698499425437544, 0.5751192103161893, 0.47144451848523805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21264645971699825, 0.3428668143459921, 0.3576690364521222, 0.3717066117813679, 0.2870166552491388, 0.3450340409674998, 0.19890616766265135, 0.2936096613102832, 0.2798006160904525, 0.650932445547509, 0.7070329945801868, 0.7295900688568582, 0.7167654801469713, 0.6113409307397296, 0.6428752275633947, 0.7084416617276474, 0.7343062879748895, 0.6988925314051819, 0.10066256159439635, 0.12086484691847932, 0.09706532953786717, 0.10214257286552708, 0.1614807657264089, 0.09787357130724106, 0.6122044480320992, 0.13002991364326522, 0.12885049345268618, 0.23892258920830978, 0.1730361417506423, 0.12222830729921608, 0.14725852606729417, 0.46972782085292275, 0.2006593373819705, 0.14048639045303424, 0.20327029837466748, 0.18801966351059085, 0.23710793715118894, 0.3966392889173267, 0.36226813586695794, 0.3753813157446604, 0.3626124082371337, 0.32365433626735074, 0.31010648763001714, 0.41077932459926314, 0.36687583377922395, 0.29715375971193947, 0.30121697488170385, 0.28975760604726997, 0.3304201149574365, 0.3251401252998041, 0.2672550303160304, 0.2884785139930277, 0.285278631866266, 0.3464794944953251, 0.18487440534928556, 0.19052956457182668, 0.17489701889480058, 0.187966430196725, 0.20674950290278005, 0.17528387361233777, 0.18819933754651563, 0.21059492518491862, 0.2017243013771438, 0.19563972368602767, 0.6300537256672949, 0.2249218620784078, 0.1998844082633916, 0.21020582267831256, 0.6232390482086638, 0.19256272514638706, 0.5703988848531352, 0.1981489129283116, 0.7952958963887069, 0.17745991306390263, 0.16337504685131576, 0.7804942318907657, 0.7849468083892469, 0.19850313425915134, 0.18060563604808466, 0.7158316508693676, 0.18764784108205557, 0.7432960637951807, 0.20458225235129535, 0.713149792241919, 0.7358195050950294, 0.7358960304790908, 0.7655811173395918, 0.21082627435492063, 0.7429454022015751, 0.20673777949066996, 0.19680839562628327, 0.1964599583477762, 0.2021729553635908, 0.17160759528544767, 0.18373794765895501, 0.2249658242932816, 0.21741684411531192, 0.17632174564627567, 0.1792048163538711, 0.10373321418391312, 0.09039184893994767, 0.08440021870881242, 0.09939061832949769, 0.10172035720422823, 0.07151886813775366, 0.08714831884597296, 0.08684950209931719, 0.08788894922468149]}, "mutation_prompt": null}
{"id": "d1d2a893-160c-4a6b-a12e-1260bc6e4630", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "ca733d2e-0211-4204-b8cf-05ba4183737c", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "287c4a76-92c0-4db0-87df-04e749a0e19a", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "c9d68729-f4b7-4f34-8b1f-0c6e226bf383", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "16407b55-702b-49dd-982a-ff040b38f535", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "9dbec853-b56c-4df8-873a-9fb453c3a345", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "902ccfda-f2d3-4220-b8be-6308ad544b4a", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement, convergence_speed):\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))\n        adaptive_mutation = min(1.0, max(0.2, convergence_speed))  # Adaptive scaling based on convergence speed\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + adaptive_mutation * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n        prev_best_fitness = np.inf\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n            convergence_speed = abs(prev_best_fitness - self.fitness[best_idx]) / max(1, num_evaluations)\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness, convergence_speed)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            prev_best_fitness = self.fitness[best_idx]\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Integrate adaptive mutation scaling based on convergence speed to enhance exploitation while maintaining effective exploration.", "configspace": "", "generation": 80, "fitness": 0.3708255706677799, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.28.", "error": "", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.9012918022252113, 0.8963601269619854, 0.9029448032404781, 0.8968101629407258, 0.8945335285714907, 0.8950873048210716, 0.8956772449886812, 0.8971752041373913, 0.8914064370443028, 0.7900193958741605, 0.7864529038346362, 0.7924364503893799, 0.7833380732333215, 0.8005323404872158, 9.999999999998899e-05, 0.7784075268880679, 0.20259251373913645, 0.07728504433062644, 0.14087468930791225, 0.26791653752451217, 0.18355681122883838, 0.159918864355293, 0.1739182597302521, 0.273011219221708, 0.1565372171162418, 0.18120828592829863, 0.17882247938677864, 0.12096491909122176, 0.10205535819958544, 0.1442975912903297, 0.11425384788892312, 0.11841673505241046, 0.27122980293547616, 0.1961198532130355, 0.13709397869420503, 0.11215473707517554, 0.5343091407032401, 0.21120458785705032, 0.7773813609758204, 0.3235708495867369, 0.17508007989075502, 0.13814175196670764, 0.34531928609046736, 0.23419415595119075, 0.3854929006406632, 0.1852614845257523, 0.1855361890352415, 0.14859653537420858, 0.2908000461657634, 0.2389900725826789, 0.15346828461449935, 0.2147499089307765, 0.21336798382752664, 0.236410767660014, 0.8923879783242924, 0.8966909418717954, 0.8940898599440398, 0.8943551204465885, 0.9001379198155387, 0.9018071188338024, 0.23392804750734963, 0.9012904635149604, 0.23405409350019013, 0.19287107808010384, 0.3301058309050814, 0.1510074329549368, 0.2107611461922526, 0.1475413113725481, 0.18898928770648604, 0.3878362663703957, 0.22228741684052766, 0.16564268522841763, 0.18969378576407758, 0.14573956967693247, 0.1468276716832153, 0.13506443064985574, 0.12556018830819626, 0.1517787855680215, 0.149258525798451, 0.13186509984122607, 0.16670659003981914, 0.15673882876273182, 0.22350936225565132, 0.7647547654287774, 0.21388947748863485, 0.036122287516955676, 0.14503180771655388, 0.7636416319294306, 0.11527644202514453, 0.29271983366963983, 0.7909782070766236, 0.35240536373388565, 0.8146291557465454, 0.7826753048089562, 0.7880937406769132, 0.7945594434906744, 0.7851143158011948, 0.8053940769273213, 0.819555072408404, 0.21072999460613495, 0.07220704279835699, 0.07174603029267768, 0.10684909823242794, 0.07749772429754176, 0.13396591983429695, 0.27720350551930595, 0.23521751438426342, 0.22768181406715926, 0.2117933471222203, 0.1764295937902478, 0.21511351563242465, 0.25308203750100533, 0.3227937234705165, 0.2552608729125271, 0.23301447400092667, 0.18798684900258344, 0.28902101874410413, 0.7380219089314017, 0.7091782424779658, 0.43818648906375424, 0.7763702699722737, 0.6304955972945951, 0.5527032111888543, 0.5467208046787349, 0.8698044025580057, 0.6877377524976226, 0.1378648647081656, 0.11178691120545559, 0.18016808002190787, 0.13217288812858463, 0.145711120444872, 0.14107481424153778, 0.1476866699251077, 0.14553660422203707, 0.16892910218973844, 0.16722967796354993, 0.17285808715760853, 0.1813976668802293, 0.2265033948975762, 0.18003697343160385, 0.1336939504726239, 0.18862014623513734, 0.21782227694369627, 0.14866762616477225, 0.7026562319242828, 0.4192029045675275, 0.6856250523121477, 0.7396195825568126, 0.5906174141740446, 0.7521038629939949, 0.5784699244645356, 0.6302717715411217, 0.7379576368709676, 0.2548871916179912, 0.475809506690026, 0.3024181819214061, 0.46221721274297645, 0.32212825160149405, 0.5717290036118408, 0.24680479635889518, 0.6035995606929013, 0.5681466729028088, 0.23848302373983776, 0.20190248879110873, 0.1987666557736757, 0.22040236465344143, 0.22976087797644895, 0.24392364391099308, 0.25076744226046355, 0.20069421907254503, 0.2110816959281261, 0.21896678566178562, 0.24430705006372877, 0.20701003856724298, 0.21863001180471686, 0.21662263963279704, 0.21139620480361776, 0.27989725739525106, 0.6754934467700635, 0.18868276735382516, 0.6369521006066204, 0.1845698336790832, 0.744265613138789, 0.8674961368004236, 0.19470202599322606, 0.19637030576738213, 0.7998107169200886, 0.8651752873329287, 0.876549043801197, 0.8855027142757524, 0.5126667253266066, 0.8851373811462322, 0.20695038623513462, 0.16560527007769166, 0.8351884244820762, 0.3152664441398352, 0.42190870367306144, 0.8648298519645632, 0.17723009439760373, 0.1763331860532077, 0.16924249367405375, 0.18145426035442425, 0.1760890680764795, 0.19102018180429592, 0.2018627346455164, 0.1751114368551454, 0.1790674707241, 0.08691207271662638, 0.08985905755251866, 0.1007030546711356, 0.09233688883442515, 0.08532963910621516, 0.09952280286405257, 0.10001457751550002, 0.08740673771097007, 0.09420835598159716]}, "mutation_prompt": null}
{"id": "31875027-443c-4868-9922-d9f92d596939", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "e652153b-e1ca-4504-a3b1-7e2aa4e55223", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "363a08f4-31a0-40b1-aad6-0ca685cde6ec", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "9693c52a-c3c7-4fc7-8a02-fff8eece10ce", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))\n        \n        # Fitness-based adaptive scaling\n        fitness_range = np.ptp(self.fitness)\n        scaling_adapt = 0.1 + 0.4 * (fitness_range / max(self.fitness))\n        \n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + scaling_adapt * adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Introduce fitness-based adaptive scaling for mutation to dynamically balance exploration and exploitation.", "configspace": "", "generation": 84, "fitness": 0.4057698188407314, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.25.", "error": "", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.7823182633155854, 0.7752962960890714, 0.7810083046662284, 0.7601020298155643, 0.7688266035924372, 0.7759231940292983, 0.7688144664629928, 0.7510598798468034, 0.7495587609687937, 0.6328668116737164, 0.6370111367189467, 0.5922392817586408, 0.6256057779654323, 0.6404210668157064, 0.6730543826956699, 0.6205435138440152, 0.619323292852193, 0.5939692173012795, 0.14382485770559106, 0.17295622804234922, 0.17696861076303627, 0.19032096538962895, 0.14687493972958787, 0.5584482534895456, 0.17504353679569884, 0.15290039848653536, 0.18522664089060892, 0.11507388971090238, 0.15727147893833604, 0.13572039059865548, 0.1307114125027209, 0.13210900715897989, 0.1453376455391202, 0.16849263594677, 0.14597103419676682, 0.13683272247926126, 0.8901901891451385, 0.912200047115742, 0.9275918868239118, 0.9287361580992386, 0.8759454086403432, 0.9222694797135831, 0.8884718184357676, 0.9003749845951812, 0.8956005573501779, 0.5373669896726454, 0.5215731172942817, 0.5682814443320636, 0.5204908919081359, 0.5173896313386948, 0.5126681125816552, 0.5110020420823085, 0.46949270873416815, 0.4249971667952235, 0.7980234475333988, 0.7780337855324075, 0.7364803027165107, 0.7778368667600863, 0.7675344614190819, 0.7924356784769624, 0.7563369487720095, 0.7653703292777856, 0.7997866908918159, 0.31279931160500973, 0.37321060307070275, 0.3555953636009215, 0.19184401058365952, 0.24015062086371308, 0.4730426754467665, 0.3829800636374735, 0.4539028785078799, 0.4467482452253052, 0.3163980686555977, 0.21557345736078937, 0.28583090901742003, 0.16194860887774576, 0.32801653530917685, 0.22342691679099158, 0.21448483766299709, 0.18694646826288785, 0.33412207172871844, 0.49413521001816785, 0.4672785201470945, 0.49661225605042414, 0.486289049674539, 0.4961550482403826, 0.4907797340913145, 0.42846117534379546, 0.4212164404245613, 0.42507904292088505, 0.5695688692940323, 0.5748010833440167, 0.5552026906747802, 0.5092967574120164, 0.49363383975823616, 0.5530653885140844, 0.5798359024943355, 0.5949771540067986, 0.5990774088140416, 0.17027962809316355, 0.0875652397024318, 0.15128950796149698, 0.2986851657377292, 0.3388194655853889, 0.17802528153641428, 0.19073882275182485, 0.2513745578444747, 0.23321724024456147, 0.37811633908048503, 0.35116011767198974, 0.3670921577118532, 0.3429150014211657, 0.3202835115628363, 0.40250227199382416, 0.1958421460472537, 0.3535340627969694, 0.31701859344801886, 0.6919028550143363, 0.6822909435225264, 0.6910681994480856, 0.6973216305807206, 0.6705496409171503, 0.7177601652489992, 0.6956781428784845, 0.6922760622404751, 0.6954965709762829, 0.13145537850582745, 0.12144331826070642, 0.131728196287607, 0.1178889151733783, 0.11142977956687394, 0.1134990940408005, 0.10433851335223587, 0.12683715805006923, 0.16065906018259324, 0.1641930163627039, 0.13005894535930873, 0.1443346446413054, 0.19325068966695558, 0.1534624223164932, 0.14757789599884386, 0.20855197168040562, 0.17296521854010172, 0.17433249249594718, 0.33401800628167544, 0.4224886898548702, 0.44448754168342064, 0.42205057958168957, 0.44482834555160367, 0.47107850672090634, 0.41323588366107356, 0.5211322976644499, 0.4318489531530346, 0.26236554941688195, 0.24130215518942078, 0.29129792827229417, 0.3519101939229752, 0.3233739128157168, 0.34949909652673816, 0.3664523457279123, 0.32339127496398945, 0.3188411232295969, 0.20119251536624327, 0.19330924489877177, 0.20878347172603762, 0.181430055458338, 0.1906468872361169, 0.18950943208874782, 0.20385547706478813, 0.18400877315626374, 0.2077994271500252, 0.2138023293498964, 0.2405215687800143, 0.2009643392675723, 0.19778704544857795, 0.23239296942338517, 0.1934053302830625, 0.20350834178353006, 0.18695512672875336, 0.5600534758368532, 0.17994363334222396, 0.8291430442012866, 0.7240152049421068, 0.7907118362902914, 0.5537299902338857, 0.8316591364958775, 0.7458444315566424, 0.5995927732269388, 0.17571307357211285, 0.7550357099333083, 0.6328947137504664, 0.7424379507223989, 0.5225908963325021, 0.2673595653376847, 0.5760935764700358, 0.7314708319267527, 0.7620564679209549, 0.21083472065347264, 0.1918927845899171, 0.19707502303787205, 0.181433845674841, 0.18161161613641907, 0.1873994736068355, 0.17325490909642138, 0.19509737813825279, 0.1785975264144769, 0.17246894874826446, 0.08479118098701788, 0.07798887300640744, 0.07506694776717104, 0.07923329436823856, 0.0752524476162052, 0.08230575616144364, 0.07074595696646391, 0.08546329838267142, 0.08414053197773441]}, "mutation_prompt": null}
{"id": "56d06869-4932-465d-bcaa-32a134e08f7e", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "6644cdc6-a494-4011-a979-27adc7da6990", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "2d574627-d074-4298-af33-3fc4e97c311e", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2, fitness_improvement):\n        adaptive_crossover_rate = 0.5 + 0.5 * fitness_improvement  # Adaptive crossover rate\n        mask = np.random.rand(self.dim) < adaptive_crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                fitness_improvement = self.fitness[best_idx] - self.fitness[i]\n                child = self.crossover(parent1, parent2, fitness_improvement)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, fitness_improvement)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Introduce an adaptive crossover rate based on fitness improvement to enhance exploration-exploitation balance.", "configspace": "", "generation": 87, "fitness": 0.3674780806982466, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.30.", "error": "", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8954839423238329, 0.8842372338837737, 0.8938153727802802, 0.8853128420621901, 0.8885351634578423, 0.8922797629563736, 0.8816695265154676, 0.8825731180306472, 0.8910747419523559, 0.7995979116434249, 0.779184802942501, 0.12670759264382903, 0.7979514938313148, 0.11823012172686753, 0.0377706950820722, 0.20875999850605054, 0.7813642407615572, 0.18664837717247085, 0.1017765472307055, 0.13935999997547732, 0.11562628211554693, 0.13686665352964578, 0.131821060424269, 0.13642769444691583, 0.10561508721036628, 0.13968682247517084, 0.09143690765326862, 0.10272950084446708, 0.09774911383791751, 0.10246611707820918, 0.10737892808044947, 0.13518152954329377, 0.12843807318826894, 0.09790235238204681, 0.06998933106604477, 0.07631055174738322, 0.1743509043663991, 0.8894215874834794, 0.17577744368795922, 0.8131682780607523, 0.1613241911624882, 0.19609967108116266, 0.9019535077679169, 0.8742116770885267, 0.8037016850697466, 0.1893057685393713, 0.28978752095358395, 0.2371398780251961, 0.2875055210529385, 0.37949491764291376, 0.3204670812605418, 0.19185630609004878, 0.3015931697696955, 0.5810182236659054, 0.8656543222900303, 0.8933613644018449, 0.8343186312897038, 0.27725918202046484, 0.9099503579756184, 0.9119409940219654, 0.23206235499899885, 0.8690457240620316, 0.9012055716076105, 0.15425277905312318, 0.22482969949420695, 0.17542025474104161, 0.3065026775883627, 0.1683981615988721, 0.1414760757282555, 0.20354236610025656, 0.2545353835088596, 0.1719320410841363, 0.14359827736393205, 0.13017606947645421, 0.14952608107460474, 0.2092603484294141, 0.13860176124764878, 0.1428966241872115, 0.2817813613790109, 0.1529920379478623, 0.1805332505583136, 0.07723091060849818, 0.7714372537842341, 9.999999999998899e-05, 0.7560321115749415, 0.06483435442469454, 0.06822053906392789, 0.08321431069530971, 0.7655562907075163, 0.27239149902945214, 0.8229642537524717, 0.12325261051501346, 0.8131314098420981, 0.8286487171103104, 0.8109483908999925, 0.1434338034047543, 0.7767391279729488, 0.8166458347023209, 0.8230253280329037, 0.05958865594867779, 0.16291383648956814, 0.07187242337573041, 0.09429435561806299, 0.26087677785419827, 0.13749241422180236, 0.15040173753015806, 0.13398027877055918, 0.12484981912244453, 0.3584708179969095, 0.5422701237376248, 0.6926870426511912, 0.22535236796706715, 0.2606646323755575, 0.38158916473448823, 0.27681375794826135, 0.6830423808573034, 0.695018293856906, 0.8565610506178806, 0.8473994087248177, 0.8591412786730068, 0.8522746558735279, 0.8406553201414431, 0.8391841401825251, 0.8533502932740261, 0.8471316456854275, 0.8558438682976371, 0.12933279042022183, 0.06709878672827885, 0.1209052809743183, 0.11187054317958356, 0.10729718297369306, 0.0840262186467633, 0.15536327540648032, 0.09824465339267807, 0.11219330646081038, 0.2154247050353787, 0.19341623537151154, 0.11842175776968378, 0.2523201677904702, 0.10852972522114013, 0.10798713552697259, 0.18597060017113864, 0.11696518509968168, 0.12451790767660664, 0.322605274599016, 0.5998449191382355, 0.7059309490831237, 0.7008337518376486, 0.5800292164374858, 0.6939829717233025, 0.7012914596537931, 0.6293562179893615, 0.6448661231743362, 0.543546358526646, 0.4915619617854542, 0.5304244554966604, 0.31163697351551545, 0.532881649642155, 0.497180078251216, 0.5318938666263358, 0.5266935927461555, 0.5494425545641012, 0.24279263228042314, 0.19800002009916562, 0.17007513606783564, 0.18366900460661895, 0.19414515099945795, 0.23674620118134193, 0.18892156531909188, 0.21969076763915185, 0.20702888764279903, 0.2098732180531393, 0.17864097969412873, 0.20173712415886613, 0.2122782775862896, 0.18386498191949696, 0.20405286329942007, 0.19399862620739017, 0.18819641146982302, 0.2173316313025606, 0.18444219403693274, 0.893522429869994, 0.15166922384271753, 0.8914817724513817, 0.1958030802608216, 0.19899015456847502, 0.48775117075283403, 0.13575583819914572, 0.7987216008302, 0.7231658276333885, 0.2110097629815354, 0.2082324254514223, 0.7677050228455153, 0.8798929683872999, 0.15365562696141044, 0.28257596380984873, 0.12725029739548877, 0.20964925989424676, 0.18559097819742087, 0.19941964336464535, 0.15109440634467297, 0.18258305218879545, 0.17495875622893453, 0.16057099926514862, 0.16502635280934408, 0.16337670260006365, 0.18102430900499378, 0.09978474755412592, 0.07923952627026265, 0.07546509974564997, 0.09015123933685687, 0.07560525725960798, 0.09670043654890792, 0.09306764590515215, 0.07649937766323289, 0.0661831024489058]}, "mutation_prompt": null}
{"id": "23d706fd-f86f-4fe4-8879-1c1cbe9f4c58", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "1e1ec744-8221-48ff-adee-b6d565a7ae44", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        convergence_rate = np.std(self.fitness) / max(np.mean(self.fitness), 1e-6)  # New dynamic component\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb)) * convergence_rate\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Introduce dynamic mutation scaling based on convergence rate to better adapt to varying landscapes and improve solution quality.", "configspace": "", "generation": 89, "fitness": 0.3339532800736786, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8527383245601996, 0.8390835063090012, 0.8476736616893148, 0.8395285829182771, 0.841521400941483, 0.8470812416810881, 0.2934609850046772, 0.40273791439612694, 0.2845561933296795, 0.17086932461726445, 0.37131756287177875, 0.346930332054743, 0.26667594971478203, 0.2601883083395927, 0.19078972301371688, 0.1467838576635484, 0.2929535935158829, 0.1721118620923544, 0.09224562770500344, 0.10708404404377347, 0.08871244187895211, 0.17432130279106461, 0.2024653168653422, 0.20831850954424003, 0.5780281353911504, 0.17977029419068025, 0.1881119741784425, 0.07178934618372201, 0.09196973699305422, 0.08258351812854692, 0.14667797985314524, 0.13459059938571394, 0.1505354380731203, 0.15149097459603122, 0.14321323651039708, 0.1336205850697506, 0.9474464289586821, 0.9403609692449504, 0.9354915798030488, 0.9316146514885979, 0.8909826688103591, 0.8782439573583083, 0.940823630587294, 0.8828409643185087, 0.9156082207472847, 0.5368990306624329, 0.5665312140835725, 0.6116360216404619, 0.7016846605397922, 0.3836312801952053, 0.5871631162014361, 0.16441533714684142, 0.16082145484761, 0.21236345190096972, 0.8306060691468068, 0.8377934041833115, 0.8436376116041673, 0.8604814592739655, 0.8305659362877215, 0.8557903736333096, 0.23255999655743598, 0.8431296154718031, 0.8549988789011969, 0.1834262281218677, 0.1863731616219274, 0.17837878523319595, 0.18983179837577413, 0.1348679077588969, 0.12265369378805191, 0.20488079988615926, 0.20087329195720827, 0.19441951395998547, 0.21090751412231035, 0.13689872409597614, 0.2392614401655001, 0.23492652055990082, 0.2286966136028854, 0.17236226278049194, 0.17362744641374084, 0.22273201193468617, 0.20372133717650287, 0.16846158441248194, 0.15070173008502574, 0.10006878476783221, 0.6093023429700996, 0.6397089757322627, 0.6409430784729583, 0.07397780364061035, 0.05512289736186082, 0.1316667183383714, 0.7260488603779336, 0.7096023061055934, 0.722692070964897, 0.18601667812903344, 0.20561786166856166, 0.22276566269488607, 0.724302133478719, 0.7360284389987417, 0.7505747278060848, 0.06249486088762024, 0.1788180590302758, 0.12420863812744487, 0.08407452255265468, 0.09285507641873769, 0.10508165529829805, 0.1698877247613353, 0.1165500938025994, 0.13719624175466283, 0.5563581041684352, 0.5647283498440971, 0.5122474223179696, 0.14404852632567722, 0.13424360325185658, 0.11352026110220026, 0.10748953252529214, 0.16076367051705076, 0.10092569886168334, 0.2151871103137335, 0.31887712486914566, 0.2689301716952692, 0.22753901588634684, 0.3310874955714651, 0.29915536868394943, 0.78431255845939, 0.7760048546105062, 0.7795659258923721, 0.10677174945150714, 0.5996770384954686, 0.15741791607625166, 0.10942062569870159, 0.11235617821967281, 0.12088836572602668, 0.10106219972143315, 0.10006477992581508, 0.07690011745546765, 0.14077688953088285, 0.15425414356901002, 0.137335566314996, 0.10519744226813021, 0.11024803906584091, 0.13378854551473074, 0.17487094085727062, 0.14863420882423395, 0.13537590599160776, 0.2122472046515701, 0.18768286711940285, 0.2378740734014958, 0.5520748889159559, 0.5311610295177209, 0.6260451108362228, 0.5033337240749607, 0.54435857413842, 0.5148726514494313, 0.1692547096156677, 0.18951872167122252, 0.23386162950815337, 0.4118887793541962, 0.4185515054303346, 0.379540598183289, 0.5119098329888043, 0.5264483139053795, 0.47040682669533507, 0.16714776222127836, 0.16692696763251658, 0.16529117214688882, 0.2082499853937677, 0.2713334120963684, 0.21739260668887128, 0.19617846774520908, 0.26852306914444746, 0.19660605633573602, 0.18633718008395805, 0.20010449018510235, 0.18095487921659437, 0.6515266749578869, 0.2154909697461077, 0.1900596874646885, 0.22079048338132035, 0.2008412789052133, 0.20510094556931668, 0.1813358919317659, 0.8708610256210669, 0.7643431594015068, 0.6712216997585141, 0.1984511111243048, 0.7425168824642017, 0.11472810203581707, 0.15141735822989522, 0.1564321985813364, 0.27731479969091966, 0.17423551301482498, 0.2671004487022349, 0.8181230861986647, 0.1620662416344083, 0.7781797745385524, 0.21545079078888718, 0.27392792899025886, 0.20229615984443294, 0.16913479620353122, 0.16192229283962223, 0.17577351822092047, 0.16991242665109607, 0.1875722227441916, 0.1678293754033302, 0.16246269523635148, 0.13174099434644448, 0.15647175343104758, 0.08791058158564413, 0.07734866576661747, 0.08506652265965298, 0.07578698230229897, 0.08580813268261445, 0.09898206173666968, 0.07305366027579241, 0.08874834874310233, 0.09420676467235922]}, "mutation_prompt": null}
{"id": "411974e2-3c87-45dd-91b5-0af7a20199f0", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "9147f8c8-ec5f-4c85-9108-1995dc80d9ff", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "b08d1e0b-5e89-431e-b190-070b4e8a9951", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "1b6d7de2-6489-4d9a-987f-e527e1907336", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "f7ef6d06-83a9-487e-833e-5a16d13ee29e", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Enhance diversity calculation by factoring in proximity clustering to better tune mutation scale and maintain adaptability.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.8826111011133746, 0.884902439497089, 0.8948126155609238, 0.8763546327001074, 0.881032289741322, 0.8932103316401608, 0.8842376019326167, 0.880991065925377, 0.8817542729030562, 0.797403773172225, 0.7986954764251296, 0.8016929181299428, 0.7833245005875428, 0.7867243953636165, 0.36322174135453056, 0.7753929109567257, 0.784223013469948, 9.999999999998899e-05, 0.6800569715195128, 0.2947894848895053, 0.6959881799042029, 0.7829821185563703, 0.6915521025423683, 0.7165022710985713, 0.1800386740851827, 0.27077027636265527, 0.6904421343303134, 0.11968550800592603, 0.15057725691720547, 0.33101917381659085, 0.15862175097089837, 0.14959573218559674, 0.1259666756530463, 0.15533010471847886, 0.1485586403346999, 0.1539158424359972, 0.8695269559815042, 0.5011513244094999, 0.8922642378914656, 0.292503466864925, 0.8333936419941826, 0.9063038624612059, 0.9475644332802127, 0.9002855488124359, 0.9334071873645409, 0.6621418100895602, 0.528328765755605, 0.45053384158046095, 0.7591388476630792, 0.23672191281554056, 0.6231910750693177, 0.7884098058286831, 0.6112335032362556, 0.36357230391690487, 0.8912670797632805, 0.8569667807523184, 0.8902462305673733, 0.8853998779875516, 0.8890338594809887, 0.9166404542642512, 0.8713174591761829, 0.8867821715405309, 0.8864375116953496, 0.17923830435504784, 0.16657325559127534, 0.1422944325751887, 0.1720526841272223, 0.2544096908560526, 0.17277564508317833, 0.23805184814392633, 0.1584360993525612, 0.18441489413547196, 0.23090581350432093, 0.12905781639328928, 0.13982289374033885, 0.19094375066834057, 0.23818551512918917, 0.1305856270673783, 0.15968972388529512, 0.13941679430674425, 0.14164816594621843, 0.731397348709108, 0.7392112732124005, 0.7298736663400365, 0.7284578242616957, 0.6963512717215838, 0.7359808596871141, 0.754050758661531, 0.7350429563438872, 0.7384817828818451, 0.7816339578263749, 0.7691919568070105, 0.7894237701083687, 0.7972571113932783, 0.782246369676574, 0.8000891144376188, 0.7872177992284619, 0.7888035357873546, 0.7970665434159535, 0.23534681963861526, 0.14865881280848225, 0.23119943931025255, 0.254197609011528, 0.10491831659798112, 0.08309969015914065, 0.3682422105768933, 0.19618557239375034, 0.17454688432033494, 0.5834576462396251, 0.5783353617361353, 0.14533831355461402, 0.6174980778198379, 0.6242338941881345, 0.6511309098788804, 0.6709915702698417, 0.4518261422200519, 0.6814890676575216, 0.7382090793053915, 0.8441630476891984, 0.8622528379224338, 0.8582035977879878, 0.8408215700047836, 0.7012681390244149, 0.6739479348065294, 0.6699134791472892, 0.8499766173353462, 0.136941927209431, 0.11035203852686393, 0.15593008740354253, 0.14483878957449503, 0.12754489613298048, 0.11936439453695202, 0.13643725368974757, 0.12489630576720079, 0.12309585032937631, 0.13324535292712958, 0.2384951782151976, 0.17925900992032295, 0.2660785382931161, 0.17716943904905524, 0.19674038009436345, 0.14968001065819259, 0.30784520366115764, 0.151920854614207, 0.29833754702844195, 0.5444056944599615, 0.6917970655796966, 0.7020721920075528, 0.6823511240412389, 0.3500675360490051, 0.6577289972431629, 0.5886689598420298, 0.5775146548857784, 0.6425212739546051, 0.553526063281599, 0.49444454002050187, 0.5614779743216989, 0.623507519066262, 0.6280602948466703, 0.2393276977396923, 0.642230647525611, 0.6228132014078891, 0.1909838264783441, 0.21745343040043352, 0.22979169297106194, 0.21157225789995981, 0.2376417417931812, 0.27794275003332125, 0.27476273008716845, 0.23050504630171176, 0.23674779766707643, 0.21726104958144477, 0.20414875187281045, 0.22182506930534995, 0.18684138688006569, 0.21694055794993694, 0.24174071073715298, 0.18006607495720017, 0.24497008191047864, 0.2215509930834908, 0.8498741002174937, 0.8970358553187747, 0.1468242294285288, 0.8982476960348075, 0.19951728008925762, 0.8773862431502294, 0.7600014127272505, 0.16083517990895946, 0.8704346164236573, 0.8938946778677108, 0.21085886360516215, 0.49323173530611253, 0.8415520217887286, 0.16434904617085377, 0.8613277337350245, 0.8312918290624652, 0.8637703911557173, 0.3045686398965415, 0.1851611977888401, 0.16829875746944978, 0.19398005594264467, 0.18385432155861148, 0.18611048286487508, 0.19053117257343355, 0.19566351902040902, 0.1956428801060358, 0.237552352522597, 0.09996747861803235, 0.10020309667198124, 0.09594033901334276, 0.10516517767657352, 0.10981316914656913, 0.08529066819383113, 0.1054326225438883, 0.10543383664684502, 0.0935786987664653]}, "mutation_prompt": null}
{"id": "88a59254-07c2-44cc-adf5-aad6293e9c82", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, target_rank):\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))\n        rank_scaling = 1 - (target_rank / self.population_size)\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * self.mutation_factor * rank_scaling * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            rank_indices = np.argsort(self.fitness)\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                target_rank = np.where(rank_indices == i)[0][0]\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, target_rank)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Introduce dynamic mutation scaling based on fitness rank to enhance exploration and exploitation balance.", "configspace": "", "generation": 95, "fitness": 0.4583272554639045, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.26.", "error": "", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.831156361218552, 0.8345364335230419, 0.8184339438553278, 0.8281197144175645, 0.8279122956420326, 0.8249902534210937, 0.8233521406622579, 0.8164436113343, 0.8217036817878209, 0.6881187906010795, 0.7029531833523495, 0.6978481900562772, 0.6987654641558391, 0.7000117016574363, 0.679266204010724, 0.6606560505025802, 0.6710692588617317, 0.6919695547826477, 0.645082507546003, 0.17177393886397474, 0.15096897998517356, 0.15367180247949386, 0.44146239849476476, 0.1658700467149703, 0.13610108946159583, 0.1514358974133182, 0.39282264677616363, 0.14161802705993798, 0.1464462941769774, 0.14584799634871415, 0.1351587387003943, 0.16575305169393195, 0.47887186416132543, 0.13419702978476, 0.12148187741437722, 0.14944739402442353, 0.9074492163053076, 0.9264141962944124, 0.9327100808384191, 0.938761542744308, 0.8997092237910437, 0.9478761281315143, 0.9566067397016693, 0.9239184336620918, 0.934179199325248, 0.6490352324578975, 0.6493306458044837, 0.6303627880520342, 0.660165827736297, 0.6310413149247482, 0.6182889680045406, 0.6503484032273028, 0.6526907278768144, 0.632444243929198, 0.7943769576818416, 0.8079523439933952, 0.8186092501463381, 0.8492141566078926, 0.850749489888793, 0.8610429702060078, 0.8109304721507631, 0.8122867296659231, 0.8224028181343607, 0.575928004606494, 0.4211666496350962, 0.45035732599150935, 0.4693283103350162, 0.4207015049908014, 0.6205549932346045, 0.5762231468364445, 0.2797851612391734, 0.45257320793753497, 0.4193679184642525, 0.2781436409711111, 0.3276751825321339, 0.4886828444243121, 0.302389509393875, 0.5518191033003659, 0.26734719558474784, 0.2686829556501166, 0.4655044818727019, 0.5378770330464464, 0.5212545082752296, 0.5477980112954414, 0.5312509879066009, 0.5039675901671604, 0.5069268130849263, 0.5266133481142501, 0.5187215903909916, 0.5196795476957726, 0.5915526195052473, 0.6163973228485784, 0.6378004725072168, 0.6104000822884601, 0.6347527554698091, 0.607494891045, 0.623347447883952, 0.6128279901359541, 0.6506768058302357, 0.1277809696422768, 0.2513735394787774, 0.2108479981095286, 0.44828828380630414, 0.39531506099746994, 0.4753135992522175, 0.30163308015409673, 0.17002768634198906, 0.13084867254163368, 0.4625261721697087, 0.39638782776433445, 0.4558796695748951, 0.4863140950483844, 0.46148962553203265, 0.4955112561583499, 0.449794882212343, 0.46432820897868343, 0.4537178513160026, 0.7370753623603558, 0.7666039701248755, 0.7632748528784559, 0.7710809688849397, 0.747648147222238, 0.7445507011390486, 0.7471750304352984, 0.7516853766527128, 0.755999944034458, 0.13687523503870402, 0.14022189580544997, 0.12636881191029337, 0.1605056211328254, 0.08619112648072691, 0.11482359842455758, 0.15512338968063866, 0.1050476348966104, 0.13274583168856358, 0.1404444965856746, 0.16154367238393208, 0.13711002667809757, 0.15558407255210116, 0.151713942611592, 0.15017196451551862, 0.20226749703919544, 0.12267058888662652, 0.1621475627170581, 0.4947430278352173, 0.5040243670356905, 0.5001300154405912, 0.4623990310326547, 0.47736480359249167, 0.4814589894371031, 0.5217735948174435, 0.6002188801791389, 0.5039594190904294, 0.38960845846990255, 0.42071774731260303, 0.38623280957985484, 0.40004143091862143, 0.34493568940173513, 0.4445123993835307, 0.3675048366932583, 0.41959229646137086, 0.4185414385558929, 0.21715620740114572, 0.22165189885657277, 0.2129377920660418, 0.21045217464414057, 0.20277460372262812, 0.1917376934863474, 0.23013969831428693, 0.19232840564986486, 0.21885035696513266, 0.24074070145574777, 0.22192488769786645, 0.19359746568372482, 0.2168468938118997, 0.20788315169821803, 0.5898502861061528, 0.20746357975224916, 0.6237642949855943, 0.21112365404565103, 0.7883669654676748, 0.8535500079943447, 0.19588100316035717, 0.8407342448544788, 0.19572473819269753, 0.8267133811013243, 0.7752722021308678, 0.1389418554660159, 0.8408842692035015, 0.8639364080257615, 0.2032365690657959, 0.7979572414883507, 0.16559477650379595, 0.7002460025016297, 0.73937062365885, 0.7602548624508002, 0.8091444602785424, 0.20770094461959454, 0.18227482242561122, 0.17290199145486296, 0.18239692018120135, 0.18062193372271118, 0.1813892722173931, 0.19197534809952455, 0.186688736370886, 0.177367601504143, 0.1918531605181848, 0.08683262725230745, 0.09211912626767338, 0.09049575798901699, 0.09224283488337548, 0.07251350982324745, 0.0879577167420984, 0.10663878793208148, 0.07643613610022038, 0.07967008641690754]}, "mutation_prompt": null}
{"id": "dd674cea-bb94-4d6f-8caa-c268087b255f", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        dynamic_mutation = self.mutation_factor * (1 - fitness_improvement / np.abs(np.min(self.fitness) - np.max(self.fitness)))\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * dynamic_mutation * (best - target) + dynamic_mutation * (r1 - r2) + dynamic_mutation * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Introduce dynamic scaling of mutation factor based on convergence speed for refined diversity and exploration.", "configspace": "", "generation": 96, "fitness": 0.5187472888030593, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.52 with standard deviation 0.28.", "error": "", "parent_id": "af7e2931-af9a-4a83-ab13-00b843f91eef", "metadata": {"aucs": [0.85975394424967, 0.8551655757521027, 0.8745219882407094, 0.8498913739708293, 0.8703925075190775, 0.8676197432592576, 0.8618292626947989, 0.8621852246743358, 0.8683715358434647, 0.759567436338934, 0.7528822053865155, 0.7630608334573515, 0.7599500970408191, 0.754812889887626, 0.7451479632688964, 0.7507751912600301, 0.7362637778892525, 0.7653240192454047, 0.17090519586118447, 0.6207370223957304, 0.6352457641802993, 0.668684859135177, 0.6539616520252101, 0.16633729275452946, 0.6739568736493635, 0.17251961657100978, 0.6872607014686102, 0.15273722176006121, 0.6319655386333602, 0.174958447707264, 0.17101387053334471, 0.17298394757702118, 0.22692325947101577, 0.16906578351720314, 0.1747729423185368, 0.16995374226240778, 0.9286316659976264, 0.9260820412487405, 0.9579339661957044, 0.9620531548542768, 0.9354481907942382, 0.9440632788219329, 0.9554531293244889, 0.9611729387576371, 0.9654636046635714, 0.7493801923932304, 0.755303878679193, 0.7391509834883391, 0.7451476407288636, 0.7342379153850245, 0.7355191441337668, 0.7564051654533219, 0.7549628813593019, 0.753380557165461, 0.8433854855328646, 0.8720721851945454, 0.8493232741922101, 0.8424506408161727, 0.852939631827947, 0.842245129851672, 0.868470754109698, 0.8592112477585621, 0.8523088457169857, 0.12902413454216044, 0.6399052656378752, 0.7433036763144946, 0.6602791093425431, 0.6056724296773534, 0.6231239635691763, 0.629463814661249, 0.6707156426403988, 0.1325737162420917, 0.7586445803432816, 0.709712021853715, 0.6659053923582969, 0.5643978644831487, 0.6159057521069038, 0.5520182312584263, 0.659884508542516, 0.6517991640151892, 0.7082210928328815, 0.7001888044903186, 0.6776723926597292, 0.7148020676287969, 0.6772962722465309, 0.6884192692726883, 0.7091306233497341, 0.718369815188953, 0.6743074830427245, 0.6892215223355462, 0.7557000155882526, 0.7416613865052608, 0.7686695326204922, 0.7695207087750939, 0.7677610360284184, 0.7871902797585764, 0.7698256839141437, 0.7632316560690949, 0.7669394946963181, 0.4323749035394494, 0.3336436307509374, 0.4572002206358087, 0.6415279914152893, 0.6366106541287797, 0.32650457667740096, 0.2259733378910188, 0.3343967547347443, 0.36784814789807585, 0.4862430977473776, 0.5727849983958575, 0.589833753787146, 0.5873699506082428, 0.5841877404717053, 0.5877684297745092, 0.5999033371612452, 0.5850464243946486, 0.5752691654194981, 0.8160208557968205, 0.828229049765784, 0.8345068683651433, 0.8184511848995284, 0.8117093105487415, 0.8315422852652677, 0.8251531225032329, 0.8194302063876473, 0.8226820336945229, 0.13217035292197143, 0.11697622325570534, 0.1545562762808408, 0.09942051597629964, 0.14286206847116356, 0.11232804188753875, 0.1328610494687429, 0.12695603694070523, 0.1772046348552001, 0.21066072977257622, 0.19343637196411922, 0.21090225452901745, 0.21035964622931524, 0.24764905678082083, 0.1461478349304629, 0.38525320345019876, 0.19643167765707914, 0.17967385895244004, 0.6402166415355713, 0.6431693958520952, 0.5844871587605124, 0.5385275634530506, 0.6419707731692283, 0.5636886988690929, 0.5637474349394678, 0.5661799837867861, 0.6524859834338034, 0.5399399802950247, 0.44726942802247327, 0.4815274678112751, 0.5263268049682096, 0.4228103679395012, 0.43698582956742105, 0.4293068750159892, 0.47028708176695144, 0.4519609807681698, 0.2334073812376839, 0.17888752516912554, 0.17897617338987826, 0.2080787813266054, 0.20925516320704307, 0.19984760661567602, 0.2281710290505412, 0.21584190112785762, 0.24214635155070818, 0.21612187080881773, 0.24373888165845692, 0.20508984862434743, 0.21862739451475421, 0.6341040539655292, 0.22001163112786926, 0.20614873593277738, 0.25174798675475396, 0.19520312616320934, 0.18443309716160905, 0.8038351957679852, 0.15124285203327037, 0.19551836763573716, 0.8251779206337179, 0.804645122775529, 0.1604904616567021, 0.7532053812102215, 0.812129927599647, 0.8260305741046975, 0.8121806082779292, 0.20410703823831833, 0.2071684186537487, 0.11104426375902698, 0.799882670825751, 0.2088292509079105, 0.15161688445112886, 0.209065955011576, 0.1689348987529402, 0.22099610961031846, 0.1722203501448677, 0.19354271011611768, 0.2205457171763483, 0.16932515760406386, 0.18549500326824775, 0.17121587437672148, 0.1961548020030598, 0.09319378304444159, 0.09389488457576411, 0.09542012496537278, 0.09020672023227383, 0.10089983560960569, 0.10022685791095831, 0.10382608048301278, 0.09454422793186545, 0.10965626294929753]}, "mutation_prompt": null}
{"id": "2def1122-ceb3-4211-acc4-6efc888dd230", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))  # Utilize proximity-based diversity\n        dynamic_mutation = self.mutation_factor * (1 - fitness_improvement / np.abs(np.min(self.fitness) - np.max(self.fitness)))\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * dynamic_mutation * (best - target) + dynamic_mutation * (r1 - r2) + dynamic_mutation * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:  # Reduce population size to intensify exploitation\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Introduce dynamic scaling of mutation factor based on convergence speed for refined diversity and exploration.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dd674cea-bb94-4d6f-8caa-c268087b255f", "metadata": {"aucs": [0.85975394424967, 0.8551655757521027, 0.8745219882407094, 0.8498913739708293, 0.8703925075190775, 0.8676197432592576, 0.8618292626947989, 0.8621852246743358, 0.8683715358434647, 0.759567436338934, 0.7528822053865155, 0.7630608334573515, 0.7599500970408191, 0.754812889887626, 0.7451479632688964, 0.7507751912600301, 0.7362637778892525, 0.7653240192454047, 0.17090519586118447, 0.6207370223957304, 0.6352457641802993, 0.668684859135177, 0.6539616520252101, 0.16633729275452946, 0.6739568736493635, 0.17251961657100978, 0.6872607014686102, 0.15273722176006121, 0.6319655386333602, 0.174958447707264, 0.17101387053334471, 0.17298394757702118, 0.22692325947101577, 0.16906578351720314, 0.1747729423185368, 0.16995374226240778, 0.9286316659976264, 0.9260820412487405, 0.9579339661957044, 0.9620531548542768, 0.9354481907942382, 0.9440632788219329, 0.9554531293244889, 0.9611729387576371, 0.9654636046635714, 0.7493801923932304, 0.755303878679193, 0.7391509834883391, 0.7451476407288636, 0.7342379153850245, 0.7355191441337668, 0.7564051654533219, 0.7549628813593019, 0.753380557165461, 0.8433854855328646, 0.8720721851945454, 0.8493232741922101, 0.8424506408161727, 0.852939631827947, 0.842245129851672, 0.868470754109698, 0.8592112477585621, 0.8523088457169857, 0.12902413454216044, 0.6399052656378752, 0.7433036763144946, 0.6602791093425431, 0.6056724296773534, 0.6231239635691763, 0.629463814661249, 0.6707156426403988, 0.1325737162420917, 0.7586445803432816, 0.709712021853715, 0.6659053923582969, 0.5643978644831487, 0.6159057521069038, 0.5520182312584263, 0.659884508542516, 0.6517991640151892, 0.7082210928328815, 0.7001888044903186, 0.6776723926597292, 0.7148020676287969, 0.6772962722465309, 0.6884192692726883, 0.7091306233497341, 0.718369815188953, 0.6743074830427245, 0.6892215223355462, 0.7557000155882526, 0.7416613865052608, 0.7686695326204922, 0.7695207087750939, 0.7677610360284184, 0.7871902797585764, 0.7698256839141437, 0.7632316560690949, 0.7669394946963181, 0.4323749035394494, 0.3336436307509374, 0.4572002206358087, 0.6415279914152893, 0.6366106541287797, 0.32650457667740096, 0.2259733378910188, 0.3343967547347443, 0.36784814789807585, 0.4862430977473776, 0.5727849983958575, 0.589833753787146, 0.5873699506082428, 0.5841877404717053, 0.5877684297745092, 0.5999033371612452, 0.5850464243946486, 0.5752691654194981, 0.8160208557968205, 0.828229049765784, 0.8345068683651433, 0.8184511848995284, 0.8117093105487415, 0.8315422852652677, 0.8251531225032329, 0.8194302063876473, 0.8226820336945229, 0.13217035292197143, 0.11697622325570534, 0.1545562762808408, 0.09942051597629964, 0.14286206847116356, 0.11232804188753875, 0.1328610494687429, 0.12695603694070523, 0.1772046348552001, 0.21066072977257622, 0.19343637196411922, 0.21090225452901745, 0.21035964622931524, 0.24764905678082083, 0.1461478349304629, 0.38525320345019876, 0.19643167765707914, 0.17967385895244004, 0.6402166415355713, 0.6431693958520952, 0.5844871587605124, 0.5385275634530506, 0.6419707731692283, 0.5636886988690929, 0.5637474349394678, 0.5661799837867861, 0.6524859834338034, 0.5399399802950247, 0.44726942802247327, 0.4815274678112751, 0.5263268049682096, 0.4228103679395012, 0.43698582956742105, 0.4293068750159892, 0.47028708176695144, 0.4519609807681698, 0.2334073812376839, 0.17888752516912554, 0.17897617338987826, 0.2080787813266054, 0.20925516320704307, 0.19984760661567602, 0.2281710290505412, 0.21584190112785762, 0.24214635155070818, 0.21612187080881773, 0.24373888165845692, 0.20508984862434743, 0.21862739451475421, 0.6341040539655292, 0.22001163112786926, 0.20614873593277738, 0.25174798675475396, 0.19520312616320934, 0.18443309716160905, 0.8038351957679852, 0.15124285203327037, 0.19551836763573716, 0.8251779206337179, 0.804645122775529, 0.1604904616567021, 0.7532053812102215, 0.812129927599647, 0.8260305741046975, 0.8121806082779292, 0.20410703823831833, 0.2071684186537487, 0.11104426375902698, 0.799882670825751, 0.2088292509079105, 0.15161688445112886, 0.209065955011576, 0.1689348987529402, 0.22099610961031846, 0.1722203501448677, 0.19354271011611768, 0.2205457171763483, 0.16932515760406386, 0.18549500326824775, 0.17121587437672148, 0.1961548020030598, 0.09319378304444159, 0.09389488457576411, 0.09542012496537278, 0.09020672023227383, 0.10089983560960569, 0.10022685791095831, 0.10382608048301278, 0.09454422793186545, 0.10965626294929753]}, "mutation_prompt": null}
{"id": "39b1f0cd-8fd7-417b-b04f-b974bf56d837", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7  # Initial crossover rate\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))\n        dynamic_mutation = self.mutation_factor * (1 - fitness_improvement / np.abs(np.min(self.fitness) - np.max(self.fitness)))\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * dynamic_mutation * (best - target) + dynamic_mutation * (r1 - r2) + dynamic_mutation * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            # Adjust crossover rate based on population diversity\n            diversity = np.mean([np.linalg.norm(p - self.population[0]) for p in self.population])\n            self.crossover_rate = 0.9 * (1 - diversity / (self.ub - self.lb))\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Introduce a dynamic crossover rate based on population diversity to balance exploration and exploitation.", "configspace": "", "generation": 98, "fitness": 0.5094478111539212, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.51 with standard deviation 0.29.", "error": "", "parent_id": "dd674cea-bb94-4d6f-8caa-c268087b255f", "metadata": {"aucs": [0.8632647557591923, 0.8646557973201621, 0.8721019497966771, 0.8655760503372263, 0.8714394184942031, 0.8700741102181968, 0.8683167814628456, 0.8596769100837823, 0.8696111405115611, 0.7537156969947236, 0.7575906896484158, 0.7529679357414948, 0.7620984005258202, 0.7575341394897213, 0.779128541125404, 0.7530509522487785, 0.7821682661111068, 0.7692866852740892, 0.5059448438831379, 0.12945169188297256, 0.6408141200419419, 0.17830782373603393, 0.17430365064678377, 0.14029777780138408, 0.671993310562017, 0.17641687489652869, 0.15015334684388326, 0.1680656923820807, 0.1514036712667337, 0.15108158542922445, 0.14872751829629705, 0.14745798919043207, 0.1619699889078251, 0.12885812345073977, 0.13691535653423292, 0.1118644906117452, 0.9395187239202147, 0.9402203760568214, 0.94936041184134, 0.9399668060045412, 0.9477391214231816, 0.8818884728916376, 0.9401513842844029, 0.8798801619860134, 0.9136310949171806, 0.7726102735905047, 0.7689805422381751, 0.7551330800822754, 0.7650363626785873, 0.7475247516036168, 0.7480097299994715, 0.7769704405771649, 0.7680781770827669, 0.760659028592755, 0.8813899890203187, 0.8758066117147565, 0.8729457194829796, 0.8720611159034819, 0.893657915250486, 0.8877115132346731, 0.8568562902349226, 0.23917835797810405, 0.8769484996285458, 0.60319503524273, 0.12487242861509329, 0.1298544642910645, 0.6708542526623538, 0.12972146736889112, 0.7251840526393837, 0.6278007466037059, 0.7065198356345557, 0.6944755847845723, 0.5831807391265776, 0.7151871278128346, 0.13099194508067014, 0.6886973694946358, 0.7179093743165527, 0.7603452297184627, 0.6660217197817426, 0.7070583558458158, 0.6830607243471705, 0.7267163143747166, 0.7147394366592038, 0.7531855990349674, 0.7085193648702119, 0.7122370920544887, 0.6927958972429611, 0.6904119478167532, 0.7319158908596751, 0.7396535451418622, 0.7851870221906132, 0.7584389655612059, 0.7725317689377298, 0.7614401676141591, 0.7547323759695659, 0.7577112464559675, 0.7706307500042529, 0.7443005205829532, 0.7546520769781373, 0.6325259387314308, 0.14693267008479838, 0.44976068182689566, 0.6926534251506462, 0.24180561399703093, 0.5099739613962126, 0.2989724371234498, 0.13298210561856483, 0.2854974316832981, 0.6168504945901612, 0.6061577290874368, 0.6188202673455983, 0.6090932409804272, 0.6028232592527634, 0.6355655074444595, 0.588069506252779, 0.6350766366953737, 0.6225040080800293, 0.8325426078561456, 0.8454684182594046, 0.8471468613952875, 0.8386073380915747, 0.8297133766457591, 0.8418302962485223, 0.8548141427378235, 0.8251260923672054, 0.832731806498884, 0.13296065065755358, 0.12485170045441285, 0.13768657310797694, 0.15581328841098352, 0.13389620939580293, 0.1410188528290095, 0.1388497031117668, 0.13613597752576623, 0.13412442801182023, 0.2230764666379711, 0.1321551337395811, 0.20882769178401417, 0.7465898216684642, 0.16475926388973205, 0.13336035342712216, 0.24479058570357626, 0.18065457672561602, 0.7306814282956889, 0.4829028763971821, 0.5325738176509976, 0.6302357523195881, 0.4759968888922371, 0.5290236306318542, 0.5471241397693982, 0.5483033088010777, 0.660251174901002, 0.6511449373581356, 0.4471337148117225, 0.3174054800008005, 0.5009691473087253, 0.4937709409634494, 0.44164476543312914, 0.46319970709876435, 0.5821238063818059, 0.2793026754162946, 0.48019265929499644, 0.1907989310177428, 0.19433361582667452, 0.19017940050743065, 0.21197209048773147, 0.21787863863991386, 0.22648110390258946, 0.2278420942046694, 0.1976671069105077, 0.23631959822055526, 0.7671105946982401, 0.2430291783760654, 0.22099043223213044, 0.7244039633719829, 0.6963720210115958, 0.21745783233446592, 0.20225076445419354, 0.647647686590137, 0.24065837062061168, 0.1818571496978869, 0.1753804332301544, 0.8740195861981866, 0.16743928890204407, 0.19872624381732762, 0.16812190340802047, 0.13376830179239918, 0.16683485930655062, 0.1645471605943123, 0.71633800223623, 0.2086453574672118, 0.9024294751879869, 0.8984160989423002, 0.7625574132929028, 0.1535229295271645, 0.8424651381881042, 0.6967112156241082, 0.2063888240846039, 0.1672473554906343, 0.19826241565236868, 0.1857593310005916, 0.2719206190815163, 0.16135617055733797, 0.17076922815286943, 0.1496971479877055, 0.1798263830353639, 0.16081985751377093, 0.06672127455106969, 0.08411926965563365, 0.10913624679069345, 0.08258368830898855, 0.08999688165802033, 0.10533961110328205, 0.08516243231351073, 0.07924583594399304, 0.09069120585237656]}, "mutation_prompt": null}
{"id": "df02788c-2f89-4f31-9ee7-915be8fbab60", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.scaling_factor = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2, diversity_factor):\n        mask = np.random.rand(self.dim) < (self.crossover_rate * diversity_factor)\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best, fitness_improvement):\n        # Enhanced diversity calculation\n        diversity = np.mean([np.linalg.norm(p - target) for p in self.population])\n        adaptive_factor = 0.5 + 0.5 * (1 - diversity / (self.ub - self.lb))\n        dynamic_mutation = self.mutation_factor * (1 - fitness_improvement / np.abs(np.min(self.fitness) - np.max(self.fitness)))\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + adaptive_factor * dynamic_mutation * (best - target) + dynamic_mutation * (r1 - r2) + dynamic_mutation * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n        eval_threshold = int(self.budget * 0.5)\n\n        while num_evaluations < self.budget:\n            if num_evaluations > eval_threshold:\n                self.population_size = max(10, self.initial_population_size // 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            diversity_factor = np.std(self.fitness) / np.abs(np.mean(self.fitness))  # Adaptive crossover rate\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2, diversity_factor)\n\n                previous_fitness = self.fitness[i]\n                mutant = self.mutate(target, best, self.fitness[best_idx] - previous_fitness)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Introduce adaptive crossover rate based on population diversity to enhance convergence.", "configspace": "", "generation": 99, "fitness": 0.4824599709519824, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.30.", "error": "", "parent_id": "dd674cea-bb94-4d6f-8caa-c268087b255f", "metadata": {"aucs": [0.8663887997973305, 0.86610232472391, 0.8851976022610702, 0.8748622277222687, 0.8723915673480481, 0.8744794888346681, 0.8535457077982697, 0.8659275097435446, 0.8717840560038473, 0.764007849984943, 0.756072278740729, 0.770882050069724, 0.7643075473279044, 0.7640071893656036, 0.7454936763353366, 0.7437910740460731, 0.7412069677091393, 0.763068963647606, 0.1515736364758693, 0.14690471828953833, 0.17719451862736024, 0.13295804263835798, 0.1334167195266065, 0.1365130631222341, 0.15115639787638868, 0.12526303638155456, 0.12620553090718134, 0.11447212477016222, 0.10492494007574238, 0.11263965510308538, 0.08968745085149044, 0.11611504549966978, 0.11033189174412905, 0.12718027808604204, 0.0911414946781266, 0.14579843071408105, 0.928551221288623, 0.9419592035600995, 0.9687858310114762, 0.9665104996714895, 0.9089990960084501, 0.918763223832333, 0.9266935683995996, 0.8800817571498403, 0.9331147953733401, 0.7663788133490393, 0.7404838569609782, 0.7243061334842752, 0.7522177345441841, 0.7297239354726077, 0.7716785105056135, 0.7735352332683361, 0.7711423580524864, 0.7646467719793621, 0.8785747533981163, 0.8618329072987523, 0.8941579155783271, 0.8843351381809971, 0.8925288001440073, 0.8931853938606683, 0.8779585045647182, 0.8599966483455785, 0.8814739893350364, 0.7107789127228463, 0.5878161975582383, 0.5811158326574692, 0.6929983911437523, 0.7783269368337159, 0.6470586338084544, 0.65047892231498, 0.6724535237077502, 0.5809345629019466, 0.778444868610011, 0.7072155133583651, 0.2737883838881221, 0.6318538104449279, 0.6796345267099997, 0.49522126468891836, 0.5614416360927788, 0.37437742323161916, 0.6298555537181008, 0.7400260670404051, 0.7333624834071393, 0.7621511123669867, 0.7519372358901201, 0.7529582808012063, 0.720407343011259, 0.7759883707956812, 0.7480890656387776, 0.754676175450228, 0.8159728964906172, 0.8113570222516834, 0.8140030274341205, 0.7910367106873828, 0.7981486458258328, 0.7948835065639532, 0.8135703402153922, 0.8038774488777769, 0.8190874519559324, 0.3359367265263634, 0.14477817540902038, 0.17952455705861925, 0.6405801815415226, 0.6827829066436049, 0.683567246959478, 0.3489153288985556, 0.20123770033743793, 0.2643951306414073, 0.5987085871814914, 0.6473041183851107, 0.5256996121036455, 0.6135345555984781, 0.6432494758586345, 0.6384257666355989, 0.5470928640574712, 0.598429207968205, 0.6081050553013171, 0.8335183406870945, 0.8299478834097783, 0.8361268745619898, 0.8401960486710813, 0.8488042753073959, 0.8424074134516526, 0.8468139299181908, 0.8278247199752883, 0.8522262732418022, 0.06579590705010252, 0.1421318916100316, 0.10684202073337179, 0.12887957310656617, 0.12961898367283198, 0.1289037225844224, 0.11512340642927998, 0.08583392214933627, 0.1221107248586557, 0.19718346562922018, 0.12174113964954958, 0.25245648816321087, 0.24832316021133527, 0.23997122428305862, 0.16734174100952082, 0.11803847629038322, 0.20131653505877167, 0.13556836338975298, 0.4540769746818579, 0.5146638221183548, 0.5201734542573684, 0.5990655398617873, 0.4031706904538873, 0.303410367374806, 0.511001620592605, 0.48730080036228896, 0.6141751190808666, 0.3212895805298015, 0.4027149232979159, 0.37406510179637664, 0.43615507879823767, 0.40310949200031887, 0.3919795105561614, 0.2309678658032025, 0.40984436057606066, 0.5224090985556543, 0.18601945255055374, 0.16557559002367073, 0.17184991998528398, 0.18762680134406595, 0.2269566729345106, 0.16779791531741362, 0.17598773467993456, 0.1811943831920254, 0.21004320831926349, 0.17857452814997687, 0.1707079509540239, 0.7609331317063254, 0.19993360127319193, 0.1974555969113828, 0.19499207525237294, 0.18915270185358313, 0.20612396196575367, 0.22001188983719222, 0.17338049614325368, 0.16626993226035336, 0.152242590653614, 0.19079305786448086, 0.8111118206237601, 0.8638460670041778, 0.16704254348732395, 0.31329725539652975, 0.20910233177844406, 0.7850010363706508, 0.20757543661980848, 0.7401473472120117, 0.11055770772471318, 0.16585295633056307, 0.1650763791497316, 0.20847530870107045, 0.12467253055647576, 0.15470900443083502, 0.17151734136539765, 0.17900931577507273, 0.1763767909350178, 0.23097670912101298, 0.1952724882357918, 0.22143119073346518, 0.18741353291614593, 0.1654312464420864, 0.16841705610969293, 0.09303234029266283, 0.07961041658497703, 0.05230090551601074, 0.09098245140288364, 0.0653264064758583, 0.06002416281044154, 0.09221405181726727, 0.06424350717777783, 0.08685725990865101]}, "mutation_prompt": null}
