{"id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.2665753037227311, "feedback": "The algorithm AQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.27.", "error": "", "parent_id": null, "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "fc300ec4-5834-47df-964f-f8c853b7de8a", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "4b55ef1c-8e0c-4393-b261-d726bb737ded", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "4b4dd539-cea7-42d2-b81d-3dc660d84f9e", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "60467386-674f-4a0c-a121-7cd87ef41623", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "95539ebe-cfa3-4bff-a079-0c16ba47e610", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "e96bf24e-d2d6-4e67-b328-a718adc52b7e", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "8a1badd5-7e08-40a7-b034-2f330d8fe6ae", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w_max = 0.9  # initial inertia weight\n        self.w_min = 0.4  # final inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n\n                # Dynamic inertia weight\n                self.w = self.w_max - (self.w_max - self.w_min) * (self.evaluations / self.budget)\n                \n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position", "name": "AQIPSO", "description": "Enhanced AQIPSO with dynamic inertia weight adjustment for improved convergence.", "configspace": "", "generation": 7, "fitness": 0.17287204918228416, "feedback": "The algorithm AQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.5960602062618894, 0.565548071386801, 0.1259330211212204, 0.1895565341175296, 0.19020860643040605, 0.5870434580703454, 0.16990490515301226, 0.6306871093452822, 0.1762514689679323, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029647964969907514, 0.03416875739769276, 9.999999999998899e-05, 9.999999999998899e-05, 0.004731059598977461, 0.03477699547043389, 0.11090036670242975, 0.12319646387354188, 0.050612931132818395, 0.34181846796502224, 0.06461504350163105, 0.11255480255852923, 0.1250891875006731, 0.06169113270012072, 0.0335976288599219, 0.1009711667573523, 0.11673391426245894, 0.1228900445683021, 0.11111866615350185, 0.08133356527273283, 0.11978994508647034, 0.033819455343398475, 0.0379813239810346, 0.13119167652059405, 0.9946846062642414, 0.9916172523997675, 0.9958683595609499, 0.9934129115102643, 0.9818422829796772, 0.9941670130581662, 0.9932316946549664, 0.9945479950005035, 0.993108601917661, 0.32546495895041283, 0.05515022257199287, 0.09720704387533374, 0.14394078531397758, 0.460425211419043, 0.1239673803088448, 0.08081833720085707, 0.08770649358771931, 9.999999999998899e-05, 0.16612308129014675, 0.25441835802684987, 0.1335334013199736, 0.15045743173965598, 0.06406435865382698, 0.1829817059923119, 0.19141812912502376, 0.1489482816074349, 0.20461216884873556, 0.09778318495594418, 0.13303786059045652, 0.09064029156100095, 0.06351502521510533, 0.07334345887162563, 9.999999999998899e-05, 0.12390708814668339, 0.13356723652109337, 0.21014199557926616, 0.021572565124205356, 0.010142174120918779, 0.019434418807991682, 0.11035166029201704, 0.09613970189054521, 0.2705087708574415, 0.08778651207469124, 0.02851838780610705, 0.13739781536068896, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019105586862883328, 0.02118195173302917, 0.06258754457746596, 0.008084211768113914, 0.011880896548050801, 0.05579676740097583, 0.04572026051286515, 0.03613119645220919, 0.07628825828347197, 0.03175597345935699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13579376033666668, 0.15319802658029713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07713041748241345, 0.0651517549132703, 9.999999999998899e-05, 0.10928707119211489, 9.999999999998899e-05, 0.06048108599711255, 0.049747089843802494, 0.057966940489204144, 0.15193961383485843, 0.38837875446895664, 0.4387896548641089, 0.40942706852145017, 0.18142233987300893, 0.20663525264332383, 0.37998971150960725, 0.4191832986733255, 0.3742896359846051, 0.10485018251818579, 0.05015848687244928, 0.06822700517437752, 0.07995118141604529, 0.13820744540068663, 0.08225219841246068, 0.054859378181806306, 0.10473791618269024, 0.08047534535309064, 0.1402244782856198, 0.14181634176650026, 0.14270962133310094, 0.23949619164915725, 0.15119266709359402, 0.10547412887169316, 0.18334361223462103, 0.13968538777515638, 0.2203219699416049, 0.17639769088626944, 0.21615439572965767, 0.288245100348248, 0.22467566232606961, 0.29099680828930663, 0.2151300820721852, 0.3198159804362616, 0.1694693841219299, 0.11172071820921958, 0.16970824571744125, 0.15046837923461986, 0.12191115958569021, 0.15946267626834576, 0.23139883129557492, 0.11282464419399296, 0.21131547347181745, 0.12320748126835446, 0.07108698151262893, 0.15817636543288682, 0.17946857728053145, 0.17764529435963128, 0.20150573558395135, 0.1460824656301053, 0.20319087498305655, 0.18688709873565335, 0.16321726853739238, 0.1937573789957927, 0.16829592120661996, 0.21293554546403648, 0.18884701230150336, 0.2193146598807798, 0.18838781498750035, 0.18735377610526305, 0.17561233086492667, 0.20044701969377854, 0.16940747630826536, 0.1812644357330604, 0.24646639673419513, 0.11284987133962243, 0.1631560723184935, 0.19996679827760033, 0.194451443886953, 0.149054469779763, 0.1134517613878947, 0.16938997310252946, 0.3670852146121464, 0.16634516242352515, 0.16469101258231877, 0.20835915959307083, 0.09619269671763209, 0.1594945527086311, 0.19454389716606568, 0.17997014257299793, 0.18530382526184308, 0.169730295221434, 0.20921647870074989, 0.20125822604543386, 0.20327441450170314, 0.21020737258020217, 0.19446270523383313, 0.17856218730634754, 0.18852859610017336, 0.2370063862388455, 0.04888406109713306, 0.050763479837653946, 0.08117124659735886, 0.09455964706758058, 0.0938378142575309, 0.07258497622327575, 0.05377780958319456, 0.06395918692704794, 0.06826072308078002]}, "mutation_prompt": null}
{"id": "78b0f642-9890-4800-9653-87ef5e82e351", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "b8c7e888-4e06-4665-b75e-344bb1cd3499", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "d309ab7a-c63f-4929-a6d4-3aaabba5cf56", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "e2210aec-e526-42cc-944a-a75fce9eb928", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "954ffa3b-b7f4-4352-b44f-d7ebbe05f0ce", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "f40c2157-cdab-4355-aeba-54427889feb4", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "2cdb67d4-4c7d-4ad9-9255-384d4929f222", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "de783b7e-dcae-4bb6-be36-2e488a0bf62b", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "bfcca1f7-f2cb-45a2-b5e7-a3bad8d0ec91", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "7235752d-14c5-4c18-ba4e-c041e57ec418", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "4400480e-c438-41f8-8d8e-18d57c6bf8a8", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "1f8fa7c0-cd93-4013-bb52-3f4e2a81196c", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "de9c37c7-24ff-4811-957f-9c9f8717e5a6", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "20f5333f-7b10-44cf-8958-6e5f2436d458", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "f016f3d2-4062-4e58-b9e6-69e64f4f19d2", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "fcb39201-4a11-4626-941e-85d204ed71c1", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w_max = 0.9  # Maximum inertia weight\n        self.w_min = 0.4  # Minimum inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            self.w = self.w_max - ((self.w_max - self.w_min) * (self.evaluations / self.budget))  # Update inertia weight\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Enhanced AQIPSO with dynamically adjusted inertia weight for improved convergence speed and solution accuracy.", "configspace": "", "generation": 23, "fitness": 0.17945653572370032, "feedback": "The algorithm AQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.21.", "error": "", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.5650518524125703, 0.5756546403329177, 0.1260357505969787, 0.1894608324159065, 0.19022990600027223, 0.612899451885131, 0.17024718119476334, 0.6234557397308638, 0.17787815034956878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3985568997102812, 0.4172292838392765, 0.0034692875658153266, 0.10058583319262038, 0.0669391762415178, 0.0514135189514886, 0.3688749986806853, 0.06419390262828695, 0.1233715498292931, 0.12706197320467638, 0.35551419126933104, 0.052541225756883025, 0.07362633097959936, 0.10419143673118103, 0.12373762592173665, 0.12279137392979134, 0.10686659391585396, 0.0415876700120994, 0.032824590188527125, 0.03811974789446826, 0.11048661621533606, 0.994684890593425, 0.9916179634653933, 0.9958683635333871, 0.9934132787128072, 0.9818429123206297, 0.9941670576327221, 0.9932309918202337, 0.9945480416178162, 0.9931087580962631, 0.32900565317605124, 0.0549508236620464, 0.05382443601651099, 0.1423547024061419, 0.37784971316124005, 0.12465258884311592, 0.08507137489653072, 0.08828359275486564, 9.999999999998899e-05, 0.16186307440279812, 0.15343370049295046, 0.13062612575328747, 0.15249260191497416, 0.11449600044601171, 0.18182688643397482, 0.2032710368974855, 0.14851713549496615, 0.16538568391709452, 0.08209367706957915, 0.14341998544890844, 0.08700244442567817, 0.08266229012999704, 0.07560355159253018, 9.999999999998899e-05, 0.11488909147163062, 0.1267615758044669, 0.20194858877208854, 0.09348605555972866, 0.010142799900745403, 0.19650921276938216, 0.16678438456822864, 0.08806236694930991, 0.08687533556667781, 0.1622920056278665, 0.02748019141336422, 0.1243326097433246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00621677099579554, 9.999999999998899e-05, 0.08812393345976721, 9.999999999998899e-05, 9.999999999998899e-05, 0.004743565936173089, 0.03135080628373976, 0.0561663826157075, 0.00023426718443952943, 0.01416474565351733, 0.03706365209708706, 0.04520984189714017, 0.024405527630688262, 0.06614750915627521, 0.02749829701916584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05787121334864964, 0.08516406584374125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12248802119877455, 0.10146800421086699, 9.999999999998899e-05, 0.1304133445635367, 9.999999999998899e-05, 0.057857889551221175, 0.049666582829566486, 0.056080151977283665, 0.15221657569021485, 0.4343753898939422, 0.43894850258583706, 0.46493425296928825, 0.18144122261025164, 0.20542776456910328, 0.4063822273212737, 0.43427998500752496, 0.374926763436492, 0.052718194690551945, 0.07653927528000437, 0.04860219574540847, 0.09636985264463915, 0.08081715545962653, 0.10829053131698352, 0.06013258938131383, 0.09384221627500178, 0.09126653781595828, 0.14101892889114098, 0.14214266435545164, 0.14309579566795505, 0.22005834528474033, 0.14103615343899634, 0.11443005806589768, 0.18404332138482205, 0.1405654088209065, 0.2003777812340629, 0.19690493322116276, 0.23191949579660098, 0.21668151739742836, 0.22893525391100344, 0.24895708883543766, 0.24512186247155598, 0.2477062062217429, 0.17293010381984641, 0.11177960633973194, 0.17241267490543155, 0.14293751103588803, 0.10938322280846569, 0.16991720231431118, 0.20757396247093562, 0.13213307621032933, 0.1958729618426298, 0.13045090170706408, 0.07215121377748424, 0.19410292157122544, 0.16414935840684097, 0.2030269126562494, 0.17106408802787665, 0.20992306002340078, 0.16448632558931275, 0.17915700992462458, 0.17208468624911488, 0.19709709194522174, 0.1980336671268943, 0.5304158007390452, 0.17388646361656723, 0.22132347942271846, 0.1894930743084159, 0.18506561955850265, 0.21417238353158186, 0.17589605679717557, 0.17565808829392282, 0.18199504336428518, 0.1633088703181611, 0.12218261863212998, 0.1617387938096394, 0.19942032563146372, 0.6837486490408737, 0.14815327226145725, 0.12278504494747844, 0.19031649073070955, 0.2645571498193219, 0.16639084707531926, 0.1646540548287836, 0.2041816064800166, 0.0970713935544274, 0.20056860620066475, 0.18391566772287926, 0.10179267269258963, 0.18549621577315156, 0.18428157006335566, 0.1785922018643028, 0.18473688776078212, 0.1846957738489604, 0.2098551254273452, 0.212765310594494, 0.188777444563358, 0.19170883028272057, 0.19875328054731622, 0.05158487900015529, 0.07887957413411772, 0.07711546108497769, 0.07504042561897895, 0.06622246327792214, 0.05483098519377194, 0.09321143153430655, 0.07565500018463933, 0.08217771543420171]}, "mutation_prompt": null}
{"id": "4b239f76-e990-479a-a9c8-9cafdc74a4cf", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.9   # initial inertia weight\n        self.w_min = 0.4  # minimum inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update inertia weight based on progress\n            self.w = self.w_min + (0.9 - self.w_min) * (1 - self.evaluations / self.budget)\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Enhanced AQIPSO with adaptive inertia weight for improved convergence by dynamically adjusting exploration and exploitation balance.", "configspace": "", "generation": 24, "fitness": 0.17287204900286543, "feedback": "The algorithm AQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.5960602062620615, 0.5655480713865502, 0.1259330211212204, 0.1895565341175296, 0.19020860643040605, 0.5870434580686966, 0.16990490515301226, 0.630687109551971, 0.1762514689679323, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02964796496991473, 0.03416875739769276, 9.999999999998899e-05, 9.999999999998899e-05, 0.004731059598977461, 0.034776995470434335, 0.11090036670248793, 0.12319646387354966, 0.050612931132818395, 0.341818467932117, 0.06461504350163105, 0.112554802558534, 0.12508918750068243, 0.06169113270012072, 0.0335976288599219, 0.1009711667573523, 0.1167339142624596, 0.1228900445683021, 0.11111866615350185, 0.08133356527273283, 0.11978994508647034, 0.033819455343398475, 0.03798132398103937, 0.13119167652059405, 0.9946846062642414, 0.9916172523997675, 0.9958683595609499, 0.9934129115102643, 0.9818422829796772, 0.9941670130581662, 0.9932316946549664, 0.9945479950005035, 0.993108601917661, 0.32546495893735894, 0.05515022257217583, 0.0972070438753353, 0.14394078531397758, 0.4604252114185218, 0.12396738030881838, 0.08081833720085774, 0.08770649358771931, 9.999999999998899e-05, 0.16612308129014675, 0.25441835802684987, 0.1335334013199736, 0.15045743173965598, 0.06406435865382698, 0.1829817059923119, 0.19141812912502376, 0.1489482816074349, 0.20461216884873556, 0.09778318495594418, 0.1330378605907555, 0.09064029156104458, 0.063515025215087, 0.07334345887166693, 9.999999999998899e-05, 0.12390708814672402, 0.13356723652060032, 0.210141995579605, 0.021572565124205356, 0.010142174120918779, 0.019434418807991682, 0.11035166029202881, 0.09613970189054521, 0.27050877085750946, 0.08778651207468902, 0.02851838780610705, 0.13739781536064277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019105586861036472, 0.02118195173302917, 0.0625875445774664, 0.00808421176809826, 0.011880896548050801, 0.055796767400979275, 0.04572026051286515, 0.03613119645220919, 0.07628825828347308, 0.03175597345930692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1357937603355307, 0.153198026580198, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07713041748246108, 0.06515175491323932, 9.999999999998899e-05, 0.10928707119259873, 9.999999999998899e-05, 0.06048108599711999, 0.04974708984380627, 0.057966940489166174, 0.15193961383485843, 0.3883787544690621, 0.4387896548642243, 0.409427068520653, 0.18142233987300893, 0.20663525264332383, 0.37998971150962035, 0.41918329868598725, 0.37428963598466536, 0.10485018251818479, 0.05015848687244928, 0.06822700517437752, 0.07995118141604529, 0.13820744540068663, 0.08225219841246068, 0.054859378181806306, 0.10473791618269457, 0.08047534535309064, 0.14022447828565632, 0.14181634176637437, 0.14270962133310316, 0.2394961916491668, 0.1511926670927296, 0.1054741288715082, 0.18334361223446471, 0.13968538777508943, 0.22032196994162434, 0.17639769088624713, 0.21615439572978434, 0.2882451009525804, 0.22467566232603042, 0.29099680769216507, 0.21513007844989385, 0.31981597955979124, 0.16946938411969803, 0.11172071820921958, 0.16970824602478696, 0.15046837926767143, 0.1219111595801663, 0.1594626793340591, 0.23139883129549066, 0.1128246441616979, 0.21131543569547862, 0.1232074812683086, 0.07108698151269399, 0.15817636543292724, 0.17946857728001175, 0.1776452943596014, 0.201505735583981, 0.1460824656344839, 0.2031908749841227, 0.18688709873180998, 0.1632172685142823, 0.19375737899573864, 0.16829592120660997, 0.21293554546402116, 0.18884701230150336, 0.21931465988079912, 0.18838781498751622, 0.18735377610526305, 0.17561233086492667, 0.200447019693773, 0.16940747630826536, 0.1812644357330585, 0.2464663967341939, 0.11284987133962243, 0.1631560723184935, 0.19996679827760033, 0.194451443886953, 0.14905446977975023, 0.1134517613878947, 0.16938997310252946, 0.3670852146122041, 0.16634516242352515, 0.16469101258231877, 0.20835915959307083, 0.09619269671763209, 0.1594945527086311, 0.1945438971660376, 0.17997014257299415, 0.18530382526184352, 0.169730295221434, 0.20921647870313054, 0.20125822604549826, 0.20327441450165307, 0.21020737258018007, 0.19446270523381726, 0.17856218730634377, 0.1885285961001697, 0.23700638623892833, 0.04888406109713228, 0.050763479837653946, 0.08117124659734942, 0.0945596470675748, 0.0938378142575309, 0.07258497622310967, 0.05377780958319456, 0.06395918692701474, 0.06826072308081588]}, "mutation_prompt": null}
{"id": "8278cbed-0b16-4a85-9edb-fdd75e3a8571", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "ea89877d-8028-4397-a179-77de0598d272", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.9   # initial inertia weight\n        self.w_min = 0.4  # minimum inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic inertia weight adjustment\n            self.w = max(self.w_min, self.w - 0.01)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Enhanced AQIPSO with dynamic inertia weight adjustment and elite preservation to balance exploration and exploitation.", "configspace": "", "generation": 26, "fitness": 0.21780103695932068, "feedback": "The algorithm AQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.25.", "error": "", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.8946274260414587, 0.8801639747637471, 0.12656598060441138, 0.18978891865065317, 0.19093436972380162, 0.9171541084035876, 0.8998929340579274, 0.9189368114843531, 0.18202316354553338, 0.07676869642792661, 9.999999999998899e-05, 9.999999999998899e-05, 0.8328853283025992, 0.8465963120654159, 9.999999999998899e-05, 9.999999999998899e-05, 0.018537001389728913, 9.999999999998899e-05, 0.16063383132911058, 0.14362258684900375, 0.09885403320678665, 0.07282313240996885, 0.06569399353197947, 0.06585361881865814, 0.05018501935429287, 0.12448934184959248, 0.054938521603476675, 0.09281726264279055, 0.08983886557533582, 0.10900113176741233, 0.15442341909020085, 0.12137136955778371, 0.08724831497774466, 0.04927114526598397, 0.039064605937563335, 0.1104763660820518, 0.9946810900060666, 0.9916064626297535, 0.9958683094698474, 0.9934115936286011, 0.9810227064649091, 0.9941669650603572, 0.9933921495923961, 0.9945471125810466, 0.9931101271397891, 0.6820999673100734, 0.06020222743777015, 0.11290221242928766, 0.15271025298568053, 0.627689050087153, 0.611652400282236, 0.08394155510270918, 0.08830816778883854, 9.999999999998899e-05, 0.17079469282794457, 0.13481085761126999, 0.16877916380585467, 0.14867704506009072, 0.05576542181551236, 0.1916424138899615, 0.1247234531136222, 0.117179494875292, 0.22641049695742055, 0.13923380504193483, 0.12564505178548047, 0.13787083215239404, 0.12681961194337288, 0.12158662968219558, 9.999999999998899e-05, 0.1309408895196046, 0.128065167983603, 0.12542538861989305, 0.053221967140472004, 0.05359899212448638, 0.22620994904054237, 0.20432729240542624, 9.999999999998899e-05, 0.35944836693598925, 0.20562885606996983, 9.999999999998899e-05, 0.24293253820725635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03875152226209233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001636081115920729, 0.03481290927042302, 0.07132004033877215, 0.01332383246527602, 0.0010444807678321455, 0.026347353887645086, 0.01100989187321122, 0.06363141361239255, 0.09768127952516348, 0.05086554253040887, 9.999999999998899e-05, 9.999999999998899e-05, 0.10069614038901109, 9.999999999998899e-05, 0.4109805923150466, 0.33220908909229185, 0.10400715893031398, 0.07817817873454591, 9.999999999998899e-05, 0.04446379451877436, 0.18965754517657762, 9.999999999998899e-05, 0.11557464314003041, 9.999999999998899e-05, 0.0838722681592462, 0.057700645112751636, 0.08090597852669323, 0.5131668212736873, 0.514300688624495, 0.5830498788280527, 0.600156029419727, 0.1817987593554451, 0.5461682851851477, 0.5225352315202358, 0.5429415689755093, 0.5346223846222875, 0.06962451598845709, 0.06855306407362127, 0.050406093944388664, 0.10248772852431431, 0.0715423886629436, 0.09731899796088006, 0.07598346735790606, 0.18465536802825122, 0.07925836869346259, 0.1673161217233321, 0.15199647267970084, 0.14288504997728357, 0.27076428404202046, 0.15405669202943606, 0.1391158507350121, 0.15925266368996693, 0.18085467727130478, 0.2076962729883488, 0.261869954171569, 0.21454535468763225, 0.23446686580141018, 0.218822975605944, 0.3145739999217586, 0.28287581562059105, 0.19832472243321286, 0.18355532867525548, 0.1291139638883093, 0.09358660511782602, 0.15344996040595937, 0.16031811409138264, 0.21192424838408574, 0.25433169742789385, 0.16012161232212807, 0.13980701861483724, 0.1362064524134876, 0.07073259920176822, 0.20804984472321153, 0.17590022744992928, 0.21283882188338898, 0.19947132088559272, 0.2104471944660945, 0.16029245402067682, 0.21739329451303924, 0.2541681576385013, 0.2541888982171505, 0.20616188221958986, 0.19475046536213303, 0.1898063751103497, 0.22830584761440054, 0.8395062830277112, 0.22813435526551762, 0.19647405528893946, 0.1848668176719358, 0.22417309900949878, 0.2615804955260719, 0.20879390868042103, 0.15268437016624192, 0.16620121140307487, 0.20192131584318085, 0.20083636132218785, 0.15303166437236448, 0.11414683184518981, 0.16162430965075403, 0.15402134362942865, 0.16725364990429392, 0.15210038866437559, 0.21303982189647208, 0.6639117095557905, 0.21075099359471972, 0.1980512617995831, 0.16533612419749022, 0.19968726662849567, 0.20903093234199266, 0.2333076345142283, 0.2134573263908216, 0.22083524981249947, 0.20019673027970475, 0.19099587752768754, 0.24527247740805336, 0.2346218891079186, 0.27775942102696793, 0.09580906711348702, 0.10340320857255336, 0.08455150627319596, 0.09898630867916813, 0.0947355107628095, 0.07307499682711316, 0.07946441221879741, 0.09756655347277465, 0.08341474721402353]}, "mutation_prompt": null}
{"id": "9592d744-2864-4719-a0b9-2a7d26c4fdcd", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w_initial = 0.9  # initial inertia weight\n        self.w_final = 0.4   # final inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            # Update inertia weight\n            self.w = self.w_initial - (self.w_initial - self.w_final) * (self.evaluations / self.budget)\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Improved AQIPSO by introducing adaptive inertia weight adjustment for better convergence.", "configspace": "", "generation": 27, "fitness": 0.17945653572370032, "feedback": "The algorithm AQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.21.", "error": "", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.5650518524125703, 0.5756546403329177, 0.1260357505969787, 0.1894608324159065, 0.19022990600027223, 0.612899451885131, 0.17024718119476334, 0.6234557397308638, 0.17787815034956878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3985568997102812, 0.4172292838392765, 0.0034692875658153266, 0.10058583319262038, 0.0669391762415178, 0.0514135189514886, 0.3688749986806853, 0.06419390262828695, 0.1233715498292931, 0.12706197320467638, 0.35551419126933104, 0.052541225756883025, 0.07362633097959936, 0.10419143673118103, 0.12373762592173665, 0.12279137392979134, 0.10686659391585396, 0.0415876700120994, 0.032824590188527125, 0.03811974789446826, 0.11048661621533606, 0.994684890593425, 0.9916179634653933, 0.9958683635333871, 0.9934132787128072, 0.9818429123206297, 0.9941670576327221, 0.9932309918202337, 0.9945480416178162, 0.9931087580962631, 0.32900565317605124, 0.0549508236620464, 0.05382443601651099, 0.1423547024061419, 0.37784971316124005, 0.12465258884311592, 0.08507137489653072, 0.08828359275486564, 9.999999999998899e-05, 0.16186307440279812, 0.15343370049295046, 0.13062612575328747, 0.15249260191497416, 0.11449600044601171, 0.18182688643397482, 0.2032710368974855, 0.14851713549496615, 0.16538568391709452, 0.08209367706957915, 0.14341998544890844, 0.08700244442567817, 0.08266229012999704, 0.07560355159253018, 9.999999999998899e-05, 0.11488909147163062, 0.1267615758044669, 0.20194858877208854, 0.09348605555972866, 0.010142799900745403, 0.19650921276938216, 0.16678438456822864, 0.08806236694930991, 0.08687533556667781, 0.1622920056278665, 0.02748019141336422, 0.1243326097433246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00621677099579554, 9.999999999998899e-05, 0.08812393345976721, 9.999999999998899e-05, 9.999999999998899e-05, 0.004743565936173089, 0.03135080628373976, 0.0561663826157075, 0.00023426718443952943, 0.01416474565351733, 0.03706365209708706, 0.04520984189714017, 0.024405527630688262, 0.06614750915627521, 0.02749829701916584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05787121334864964, 0.08516406584374125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12248802119877455, 0.10146800421086699, 9.999999999998899e-05, 0.1304133445635367, 9.999999999998899e-05, 0.057857889551221175, 0.049666582829566486, 0.056080151977283665, 0.15221657569021485, 0.4343753898939422, 0.43894850258583706, 0.46493425296928825, 0.18144122261025164, 0.20542776456910328, 0.4063822273212737, 0.43427998500752496, 0.374926763436492, 0.052718194690551945, 0.07653927528000437, 0.04860219574540847, 0.09636985264463915, 0.08081715545962653, 0.10829053131698352, 0.06013258938131383, 0.09384221627500178, 0.09126653781595828, 0.14101892889114098, 0.14214266435545164, 0.14309579566795505, 0.22005834528474033, 0.14103615343899634, 0.11443005806589768, 0.18404332138482205, 0.1405654088209065, 0.2003777812340629, 0.19690493322116276, 0.23191949579660098, 0.21668151739742836, 0.22893525391100344, 0.24895708883543766, 0.24512186247155598, 0.2477062062217429, 0.17293010381984641, 0.11177960633973194, 0.17241267490543155, 0.14293751103588803, 0.10938322280846569, 0.16991720231431118, 0.20757396247093562, 0.13213307621032933, 0.1958729618426298, 0.13045090170706408, 0.07215121377748424, 0.19410292157122544, 0.16414935840684097, 0.2030269126562494, 0.17106408802787665, 0.20992306002340078, 0.16448632558931275, 0.17915700992462458, 0.17208468624911488, 0.19709709194522174, 0.1980336671268943, 0.5304158007390452, 0.17388646361656723, 0.22132347942271846, 0.1894930743084159, 0.18506561955850265, 0.21417238353158186, 0.17589605679717557, 0.17565808829392282, 0.18199504336428518, 0.1633088703181611, 0.12218261863212998, 0.1617387938096394, 0.19942032563146372, 0.6837486490408737, 0.14815327226145725, 0.12278504494747844, 0.19031649073070955, 0.2645571498193219, 0.16639084707531926, 0.1646540548287836, 0.2041816064800166, 0.0970713935544274, 0.20056860620066475, 0.18391566772287926, 0.10179267269258963, 0.18549621577315156, 0.18428157006335566, 0.1785922018643028, 0.18473688776078212, 0.1846957738489604, 0.2098551254273452, 0.212765310594494, 0.188777444563358, 0.19170883028272057, 0.19875328054731622, 0.05158487900015529, 0.07887957413411772, 0.07711546108497769, 0.07504042561897895, 0.06622246327792214, 0.05483098519377194, 0.09321143153430655, 0.07565500018463933, 0.08217771543420171]}, "mutation_prompt": null}
{"id": "de26dbd1-8866-4c8d-9ae9-5fde637b234b", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.9   # initial inertia weight\n        self.w_min = 0.4  # minimum inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Dynamic inertia weight\n            self.w = self.w_min + (0.9 - self.w_min) * ((self.budget - self.evaluations) / self.budget)\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Enhanced AQIPSO with dynamic inertia weight and adaptive cognitive-social adjustment to improve convergence efficiency.", "configspace": "", "generation": 28, "fitness": 0.1728720490174659, "feedback": "The algorithm AQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.5960602062620358, 0.5655480713867218, 0.1259330211212204, 0.1895565341175296, 0.19020860643040605, 0.5870434580674326, 0.16990490515301226, 0.6306871095584973, 0.1762514689679323, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029647964969903517, 0.03416875739769276, 9.999999999998899e-05, 9.999999999998899e-05, 0.004731059598974907, 0.034776995470434335, 0.11090036670248793, 0.12319646387354966, 0.050612931132818395, 0.34181846791430504, 0.06461504350163105, 0.11255480255853767, 0.12508918750068243, 0.06169113270012072, 0.0335976288599219, 0.1009711667573523, 0.11673391426249036, 0.1228900445683021, 0.11111866615350885, 0.08133356527273283, 0.1197899450864699, 0.033819455343398475, 0.03798132398103937, 0.13119167652059405, 0.9946846062642414, 0.9916172523997675, 0.9958683595609499, 0.9934129115102643, 0.9818422829796772, 0.9941670130581662, 0.9932316946549664, 0.9945479950005035, 0.993108601917661, 0.32546495893407357, 0.05515022257217583, 0.09720704387538259, 0.14394078531397758, 0.46042521142064496, 0.12396738030881838, 0.08081833720085774, 0.08770649358771931, 9.999999999998899e-05, 0.16612308129014675, 0.25441835802684987, 0.1335334013199736, 0.15045743173965598, 0.06406435865382698, 0.1829817059923119, 0.19141812912502376, 0.1489482816074349, 0.20461216884873556, 0.09778318495594418, 0.13303786059089395, 0.09064029156114739, 0.06351502521508867, 0.07334345887166815, 9.999999999998899e-05, 0.1239070881467389, 0.13356723652056335, 0.21014199557925406, 0.021572565124205356, 0.010142174120918779, 0.019434418807991682, 0.11035166029202625, 0.09613970189054721, 0.2705087708574875, 0.08778651207471844, 0.02851838780610705, 0.13739781536065165, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019105586860878265, 0.021181951733069915, 0.0625875445774664, 0.00808421176809826, 0.011880896548050801, 0.055796767401301794, 0.04572026051286515, 0.03613119645220919, 0.07628825828347197, 0.03175597345930692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13579376033570278, 0.15319802658016246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07713041748246052, 0.06515175491325376, 9.999999999998899e-05, 0.10928707119259051, 9.999999999998899e-05, 0.06048108599712321, 0.04974708984380627, 0.05796694048925344, 0.15193961383485843, 0.38837875446907977, 0.43878965486411003, 0.40942706852061606, 0.18142233987300893, 0.20663525264332383, 0.379989711509621, 0.4191832986856344, 0.3742896359847294, 0.10485018251818479, 0.05015848687244928, 0.06822700517437752, 0.07995118141604529, 0.13820744540068663, 0.08225219841246068, 0.054859378181806306, 0.10473791618269279, 0.08047534535309064, 0.14022447828565632, 0.14181634176637437, 0.14270962133310316, 0.2394961916491839, 0.15119266709268808, 0.10547412887143492, 0.18334361223442786, 0.13968538777508888, 0.22032196994162667, 0.17639769088624713, 0.216154395729788, 0.2882451014071663, 0.22467566232601954, 0.290996807654885, 0.2151300784507193, 0.3198159796562696, 0.16946938411988377, 0.11172071820921958, 0.16970824594508727, 0.15046837923226397, 0.12191115958223964, 0.15946267922786062, 0.2313988312970955, 0.11282464416128735, 0.21131543856720458, 0.12320748126832426, 0.07108698151269399, 0.15817636543264157, 0.1794685772799176, 0.1776452943596014, 0.201505735583981, 0.1460824656350611, 0.20319087498380417, 0.186887098731919, 0.16321726851561247, 0.19375737899575318, 0.16829592120660997, 0.21293554546403215, 0.18884701230150336, 0.2193146598807867, 0.18838781498750035, 0.18735377610526305, 0.17561233086492667, 0.200447019693773, 0.16940747630826536, 0.1812644357330585, 0.24646639673419513, 0.11284987133962243, 0.1631560723184935, 0.19996679827760033, 0.194451443886953, 0.14905446977975023, 0.1134517613878947, 0.16938997310252946, 0.3670852146120591, 0.16634516242352515, 0.16469101258231877, 0.20835915959307083, 0.09619269671763209, 0.1594945527086311, 0.1945438971660376, 0.17997014257295563, 0.18530382526184352, 0.169730295221434, 0.2092164787008729, 0.20125822604544463, 0.20327441450165307, 0.21020737258020272, 0.1944627052338126, 0.17856218730637197, 0.1885285961001697, 0.23700638623895542, 0.04888406109713228, 0.050763479837653946, 0.08117124659735253, 0.0945596470675748, 0.0938378142575309, 0.0725849762230859, 0.05377780958319467, 0.0639591869270495, 0.06826072308083164]}, "mutation_prompt": null}
{"id": "48afcdc8-7a94-47ed-af95-c99c56c0377b", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "400b6253-0c1e-4484-93f5-c4111b8620b4", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "77b87ee4-0443-4477-9c75-052b58d76d50", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "244bf4ec-1c0c-4077-b8a3-96012ea278ef", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "320d0443-f8f1-4675-955c-901612dad872", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "dd3dc94e-4e1d-4f70-ab37-638f8b98f86c", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "cf3f2f2e-7aba-4399-bca5-b1b305771c7c", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "9e10466f-ef81-4e4a-9bb9-a662a75e8e3d", "solution": "import numpy as np\n\nclass EQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w_max = 0.9  # max inertia weight\n        self.w_min = 0.4  # min inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            w = self.w_max - ((self.w_max - self.w_min) * (self.evaluations / self.budget))\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = EQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "EQIPSO", "description": "Enhanced Adaptive Quantum-Inspired Particle Swarm Optimization (EQIPSO) with dynamic inertia weight adjustment for improved convergence.", "configspace": "", "generation": 36, "fitness": 0.17945653572370032, "feedback": "The algorithm EQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.21.", "error": "", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.5650518524125703, 0.5756546403329177, 0.1260357505969787, 0.1894608324159065, 0.19022990600027223, 0.612899451885131, 0.17024718119476334, 0.6234557397308638, 0.17787815034956878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3985568997102812, 0.4172292838392765, 0.0034692875658153266, 0.10058583319262038, 0.0669391762415178, 0.0514135189514886, 0.3688749986806853, 0.06419390262828695, 0.1233715498292931, 0.12706197320467638, 0.35551419126933104, 0.052541225756883025, 0.07362633097959936, 0.10419143673118103, 0.12373762592173665, 0.12279137392979134, 0.10686659391585396, 0.0415876700120994, 0.032824590188527125, 0.03811974789446826, 0.11048661621533606, 0.994684890593425, 0.9916179634653933, 0.9958683635333871, 0.9934132787128072, 0.9818429123206297, 0.9941670576327221, 0.9932309918202337, 0.9945480416178162, 0.9931087580962631, 0.32900565317605124, 0.0549508236620464, 0.05382443601651099, 0.1423547024061419, 0.37784971316124005, 0.12465258884311592, 0.08507137489653072, 0.08828359275486564, 9.999999999998899e-05, 0.16186307440279812, 0.15343370049295046, 0.13062612575328747, 0.15249260191497416, 0.11449600044601171, 0.18182688643397482, 0.2032710368974855, 0.14851713549496615, 0.16538568391709452, 0.08209367706957915, 0.14341998544890844, 0.08700244442567817, 0.08266229012999704, 0.07560355159253018, 9.999999999998899e-05, 0.11488909147163062, 0.1267615758044669, 0.20194858877208854, 0.09348605555972866, 0.010142799900745403, 0.19650921276938216, 0.16678438456822864, 0.08806236694930991, 0.08687533556667781, 0.1622920056278665, 0.02748019141336422, 0.1243326097433246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00621677099579554, 9.999999999998899e-05, 0.08812393345976721, 9.999999999998899e-05, 9.999999999998899e-05, 0.004743565936173089, 0.03135080628373976, 0.0561663826157075, 0.00023426718443952943, 0.01416474565351733, 0.03706365209708706, 0.04520984189714017, 0.024405527630688262, 0.06614750915627521, 0.02749829701916584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05787121334864964, 0.08516406584374125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12248802119877455, 0.10146800421086699, 9.999999999998899e-05, 0.1304133445635367, 9.999999999998899e-05, 0.057857889551221175, 0.049666582829566486, 0.056080151977283665, 0.15221657569021485, 0.4343753898939422, 0.43894850258583706, 0.46493425296928825, 0.18144122261025164, 0.20542776456910328, 0.4063822273212737, 0.43427998500752496, 0.374926763436492, 0.052718194690551945, 0.07653927528000437, 0.04860219574540847, 0.09636985264463915, 0.08081715545962653, 0.10829053131698352, 0.06013258938131383, 0.09384221627500178, 0.09126653781595828, 0.14101892889114098, 0.14214266435545164, 0.14309579566795505, 0.22005834528474033, 0.14103615343899634, 0.11443005806589768, 0.18404332138482205, 0.1405654088209065, 0.2003777812340629, 0.19690493322116276, 0.23191949579660098, 0.21668151739742836, 0.22893525391100344, 0.24895708883543766, 0.24512186247155598, 0.2477062062217429, 0.17293010381984641, 0.11177960633973194, 0.17241267490543155, 0.14293751103588803, 0.10938322280846569, 0.16991720231431118, 0.20757396247093562, 0.13213307621032933, 0.1958729618426298, 0.13045090170706408, 0.07215121377748424, 0.19410292157122544, 0.16414935840684097, 0.2030269126562494, 0.17106408802787665, 0.20992306002340078, 0.16448632558931275, 0.17915700992462458, 0.17208468624911488, 0.19709709194522174, 0.1980336671268943, 0.5304158007390452, 0.17388646361656723, 0.22132347942271846, 0.1894930743084159, 0.18506561955850265, 0.21417238353158186, 0.17589605679717557, 0.17565808829392282, 0.18199504336428518, 0.1633088703181611, 0.12218261863212998, 0.1617387938096394, 0.19942032563146372, 0.6837486490408737, 0.14815327226145725, 0.12278504494747844, 0.19031649073070955, 0.2645571498193219, 0.16639084707531926, 0.1646540548287836, 0.2041816064800166, 0.0970713935544274, 0.20056860620066475, 0.18391566772287926, 0.10179267269258963, 0.18549621577315156, 0.18428157006335566, 0.1785922018643028, 0.18473688776078212, 0.1846957738489604, 0.2098551254273452, 0.212765310594494, 0.188777444563358, 0.19170883028272057, 0.19875328054731622, 0.05158487900015529, 0.07887957413411772, 0.07711546108497769, 0.07504042561897895, 0.06622246327792214, 0.05483098519377194, 0.09321143153430655, 0.07565500018463933, 0.08217771543420171]}, "mutation_prompt": null}
{"id": "b8c804a3-b2a3-4af5-8155-77f438093edf", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "2b26a499-da8d-41de-b54a-541209d9032b", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "ce3f9cfd-b940-4f33-bd80-b5d7e49c3ede", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "21e06e2d-5695-4b21-9f53-dd9d54f0ace9", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "45911b97-ecb5-485c-b76e-c97077dbe5d8", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "b2ac7e84-8dcb-4fe5-a2de-cfc305a4dc7e", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "bf3a969a-dcd8-40e2-8629-df423e8cac65", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "d14abbac-7e3b-4537-973e-786c6480ca62", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "f24daadb-e29c-40d4-af17-dd376d5e416b", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "336008a1-2cfd-433f-bd5a-10b54c60d2d9", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "006d6162-9e9a-45b2-b6b1-e37cf2b21268", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "523ff4d2-acd9-4218-9fe9-c254418c077d", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "c2e3619a-213a-4bb6-8ec1-5c90d7d35ffb", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "a8b00036-99c3-4d19-bb64-1ed70c773c01", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "064009e3-3c35-4b0f-aa3e-b3b992268f0a", "solution": "import numpy as np\n\nclass AQIPSO_Adaptive:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w_max = 0.9  # maximum inertia weight\n        self.w_min = 0.4  # minimum inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (self.evaluations / self.budget)\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO_Adaptive(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO_Adaptive", "description": "Enhanced AQIPSO with adaptive inertia weights for improved balance between exploration and exploitation.", "configspace": "", "generation": 51, "fitness": 0.17945653572370032, "feedback": "The algorithm AQIPSO_Adaptive got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.21.", "error": "", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.5650518524125703, 0.5756546403329177, 0.1260357505969787, 0.1894608324159065, 0.19022990600027223, 0.612899451885131, 0.17024718119476334, 0.6234557397308638, 0.17787815034956878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3985568997102812, 0.4172292838392765, 0.0034692875658153266, 0.10058583319262038, 0.0669391762415178, 0.0514135189514886, 0.3688749986806853, 0.06419390262828695, 0.1233715498292931, 0.12706197320467638, 0.35551419126933104, 0.052541225756883025, 0.07362633097959936, 0.10419143673118103, 0.12373762592173665, 0.12279137392979134, 0.10686659391585396, 0.0415876700120994, 0.032824590188527125, 0.03811974789446826, 0.11048661621533606, 0.994684890593425, 0.9916179634653933, 0.9958683635333871, 0.9934132787128072, 0.9818429123206297, 0.9941670576327221, 0.9932309918202337, 0.9945480416178162, 0.9931087580962631, 0.32900565317605124, 0.0549508236620464, 0.05382443601651099, 0.1423547024061419, 0.37784971316124005, 0.12465258884311592, 0.08507137489653072, 0.08828359275486564, 9.999999999998899e-05, 0.16186307440279812, 0.15343370049295046, 0.13062612575328747, 0.15249260191497416, 0.11449600044601171, 0.18182688643397482, 0.2032710368974855, 0.14851713549496615, 0.16538568391709452, 0.08209367706957915, 0.14341998544890844, 0.08700244442567817, 0.08266229012999704, 0.07560355159253018, 9.999999999998899e-05, 0.11488909147163062, 0.1267615758044669, 0.20194858877208854, 0.09348605555972866, 0.010142799900745403, 0.19650921276938216, 0.16678438456822864, 0.08806236694930991, 0.08687533556667781, 0.1622920056278665, 0.02748019141336422, 0.1243326097433246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00621677099579554, 9.999999999998899e-05, 0.08812393345976721, 9.999999999998899e-05, 9.999999999998899e-05, 0.004743565936173089, 0.03135080628373976, 0.0561663826157075, 0.00023426718443952943, 0.01416474565351733, 0.03706365209708706, 0.04520984189714017, 0.024405527630688262, 0.06614750915627521, 0.02749829701916584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05787121334864964, 0.08516406584374125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12248802119877455, 0.10146800421086699, 9.999999999998899e-05, 0.1304133445635367, 9.999999999998899e-05, 0.057857889551221175, 0.049666582829566486, 0.056080151977283665, 0.15221657569021485, 0.4343753898939422, 0.43894850258583706, 0.46493425296928825, 0.18144122261025164, 0.20542776456910328, 0.4063822273212737, 0.43427998500752496, 0.374926763436492, 0.052718194690551945, 0.07653927528000437, 0.04860219574540847, 0.09636985264463915, 0.08081715545962653, 0.10829053131698352, 0.06013258938131383, 0.09384221627500178, 0.09126653781595828, 0.14101892889114098, 0.14214266435545164, 0.14309579566795505, 0.22005834528474033, 0.14103615343899634, 0.11443005806589768, 0.18404332138482205, 0.1405654088209065, 0.2003777812340629, 0.19690493322116276, 0.23191949579660098, 0.21668151739742836, 0.22893525391100344, 0.24895708883543766, 0.24512186247155598, 0.2477062062217429, 0.17293010381984641, 0.11177960633973194, 0.17241267490543155, 0.14293751103588803, 0.10938322280846569, 0.16991720231431118, 0.20757396247093562, 0.13213307621032933, 0.1958729618426298, 0.13045090170706408, 0.07215121377748424, 0.19410292157122544, 0.16414935840684097, 0.2030269126562494, 0.17106408802787665, 0.20992306002340078, 0.16448632558931275, 0.17915700992462458, 0.17208468624911488, 0.19709709194522174, 0.1980336671268943, 0.5304158007390452, 0.17388646361656723, 0.22132347942271846, 0.1894930743084159, 0.18506561955850265, 0.21417238353158186, 0.17589605679717557, 0.17565808829392282, 0.18199504336428518, 0.1633088703181611, 0.12218261863212998, 0.1617387938096394, 0.19942032563146372, 0.6837486490408737, 0.14815327226145725, 0.12278504494747844, 0.19031649073070955, 0.2645571498193219, 0.16639084707531926, 0.1646540548287836, 0.2041816064800166, 0.0970713935544274, 0.20056860620066475, 0.18391566772287926, 0.10179267269258963, 0.18549621577315156, 0.18428157006335566, 0.1785922018643028, 0.18473688776078212, 0.1846957738489604, 0.2098551254273452, 0.212765310594494, 0.188777444563358, 0.19170883028272057, 0.19875328054731622, 0.05158487900015529, 0.07887957413411772, 0.07711546108497769, 0.07504042561897895, 0.06622246327792214, 0.05483098519377194, 0.09321143153430655, 0.07565500018463933, 0.08217771543420171]}, "mutation_prompt": null}
{"id": "aab28ab7-9d56-451b-a868-a58b643e534f", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.9   # initial inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def diversity_based_mutation(self, position):\n        diversity_factor = np.std(self.positions, axis=0)\n        mutation = np.random.uniform(-1, 1, self.dim) * diversity_factor\n        return np.clip(position + mutation, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Dynamic adjustment of inertia weight\n                self.w = 0.4 + 0.5 * (1 - (self.evaluations / self.budget))\n\n                # Quantum-inspired update with diversity-based mutation\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n                # Apply diversity-based mutation occasionally\n                if np.random.rand() < 0.1:\n                    self.positions[i] = self.diversity_based_mutation(self.positions[i])\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Enhanced AQIPSO with dynamic adjustment of inertia weight and diversity-based mutation for improved convergence.", "configspace": "", "generation": 52, "fitness": 0.15311774890580965, "feedback": "The algorithm AQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.20.", "error": "", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.33016228949475446, 0.3144799468923801, 0.335319862466978, 0.18547221202702724, 0.37194039833607595, 0.17706973675291826, 0.25895277166969766, 0.372372122199393, 0.17132873050089148, 0.027958960090433194, 0.005904237104365384, 9.999999999998899e-05, 9.999999999998899e-05, 0.01376653956062368, 9.999999999998899e-05, 0.05658355947778304, 9.999999999998899e-05, 9.999999999998899e-05, 0.07321354507435607, 0.0886289575034489, 0.09327405173109404, 0.04910180867770564, 0.05830674240332501, 0.09698558608340502, 0.06735592677342195, 0.08257968854693976, 0.08419380802577248, 0.07012399265030833, 0.07157619460713482, 0.06624432588103524, 0.07161769315701805, 0.05127863455666337, 0.06363410230835964, 0.04756444191899778, 0.0671872993464685, 0.04051050218810848, 0.9943031115274964, 0.9947021127378857, 0.996362752414983, 0.9942560892189406, 0.9921288132898198, 0.9927120774603971, 0.9923725763274778, 0.9935374329331541, 0.9941413873491487, 0.058726439238704686, 0.05887903216642265, 0.09963769070648809, 0.17989987131167584, 0.13124258257506483, 0.1300381998202561, 0.0832446559851594, 0.08667686268954877, 9.999999999998899e-05, 0.1966443927396102, 0.15793318002806378, 0.22266269574451492, 0.21665742467125026, 0.17022732551733388, 0.17269074072343826, 0.06688848655128565, 0.12344485645365699, 0.15650458630254271, 0.05178275659683351, 0.06454003306627343, 0.06018801900863868, 9.999999999998899e-05, 0.10898567042072771, 0.08850005594018717, 0.08611117660551859, 0.07813960962821875, 0.07821826959105183, 0.014009205487057752, 0.010068061232135883, 0.020534041046639917, 0.07419391375377504, 0.07534871933492848, 0.11148216513346798, 0.06848552038449485, 0.01650342626747603, 0.08029566858794879, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04940572666556842, 9.999999999998899e-05, 0.05480279527126075, 0.040952300541316045, 9.999999999998899e-05, 0.016641245166338692, 0.02194170636867998, 0.02771064135053325, 9.999999999998899e-05, 0.0013602896664902664, 0.010663256567041257, 0.006609590516950314, 0.007406376354407662, 9.999999999998899e-05, 0.01792599520054916, 0.0021674738645038882, 0.0015167094150647653, 0.007319696656589936, 9.999999999998899e-05, 0.021151353042868526, 0.018139243135466887, 0.08103243986930686, 9.999999999998899e-05, 9.999999999998899e-05, 0.05467044755560546, 0.03656737942650756, 0.05110813713950335, 0.28227628586596853, 0.3301329756299468, 0.3141714254801028, 0.1663172504280206, 0.33100334886190397, 0.19980851620233653, 0.3075392140151755, 0.1354524933092176, 0.30718542712879915, 0.06350490901038652, 0.04838039891238244, 0.07825077665515923, 0.08095348270606251, 0.06043475839126988, 0.07388987175304573, 0.05326021605679465, 0.13342475974906598, 0.06903433749313004, 0.16717433952481786, 0.1523393777624258, 0.28099339626318676, 0.17578659049947887, 0.17530858713852926, 0.16269503235989635, 0.17283128032385975, 0.18107651859156082, 0.21565075724973304, 0.21513468115836876, 0.20213162340327895, 0.19415689389716895, 0.17475922973207603, 0.18518930840402292, 0.2285320091082753, 0.19134110167290852, 0.18190688595803362, 0.15495884555221218, 0.153397946089863, 0.14618588574046532, 0.138248080574367, 0.1117022086740781, 0.13633738448493438, 0.14444794808914962, 0.12685486083666497, 0.1599696011106193, 0.11378884357445862, 0.16781353082751815, 0.17461248162245535, 0.16757664209096834, 0.16964472475323167, 0.13703687696643752, 0.1643862603879679, 0.1580437336643037, 0.1616936840206401, 0.16499366547646166, 0.16595516809974575, 0.21207430702894536, 0.1868656182519276, 0.1885410377142025, 0.18082098085650156, 0.16139752252655193, 0.1745830931951945, 0.15918784152833554, 0.18117277292824874, 0.1504392383982508, 0.16948417376832092, 0.15380552016702442, 0.35897245363298635, 0.20652602880408544, 0.19281401445722923, 0.12659145578805897, 0.13508917121587127, 0.15186793039072233, 0.11498774042694071, 0.1522544671795062, 0.15520172086987227, 0.20929494484037559, 0.15993113616039756, 0.17950547224991475, 0.19678043007820034, 0.17385771253396654, 0.2010575108697935, 0.19780252307099155, 0.2016496701259618, 0.186896803619932, 0.20993257778189778, 0.19502965355337676, 0.1875087340259023, 0.23219745207503995, 0.20958709211110937, 0.20065967056109568, 0.06053037649237847, 0.06386193326226841, 0.06371831532125849, 0.07008350772867378, 0.05932769421728612, 0.07192328222167854, 0.056923070991855784, 0.060113616905989375, 0.06292390004269999]}, "mutation_prompt": null}
{"id": "45456033-e70e-42ca-b198-c6ea6cfd56ba", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "8123f2a5-79ae-4f6e-8da1-ccf23e6db773", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w_max = 0.9  # max inertia weight\n        self.w_min = 0.4  # min inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            self.w = self.w_max - (self.w_max - self.w_min) * (self.evaluations / self.budget)  # Dynamic inertia weight\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Enhanced AQIPSO with dynamic inertia weight adjustment for improved balance between exploration and exploitation.", "configspace": "", "generation": 54, "fitness": 0.17945653572370032, "feedback": "The algorithm AQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.21.", "error": "", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.5650518524125703, 0.5756546403329177, 0.1260357505969787, 0.1894608324159065, 0.19022990600027223, 0.612899451885131, 0.17024718119476334, 0.6234557397308638, 0.17787815034956878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3985568997102812, 0.4172292838392765, 0.0034692875658153266, 0.10058583319262038, 0.0669391762415178, 0.0514135189514886, 0.3688749986806853, 0.06419390262828695, 0.1233715498292931, 0.12706197320467638, 0.35551419126933104, 0.052541225756883025, 0.07362633097959936, 0.10419143673118103, 0.12373762592173665, 0.12279137392979134, 0.10686659391585396, 0.0415876700120994, 0.032824590188527125, 0.03811974789446826, 0.11048661621533606, 0.994684890593425, 0.9916179634653933, 0.9958683635333871, 0.9934132787128072, 0.9818429123206297, 0.9941670576327221, 0.9932309918202337, 0.9945480416178162, 0.9931087580962631, 0.32900565317605124, 0.0549508236620464, 0.05382443601651099, 0.1423547024061419, 0.37784971316124005, 0.12465258884311592, 0.08507137489653072, 0.08828359275486564, 9.999999999998899e-05, 0.16186307440279812, 0.15343370049295046, 0.13062612575328747, 0.15249260191497416, 0.11449600044601171, 0.18182688643397482, 0.2032710368974855, 0.14851713549496615, 0.16538568391709452, 0.08209367706957915, 0.14341998544890844, 0.08700244442567817, 0.08266229012999704, 0.07560355159253018, 9.999999999998899e-05, 0.11488909147163062, 0.1267615758044669, 0.20194858877208854, 0.09348605555972866, 0.010142799900745403, 0.19650921276938216, 0.16678438456822864, 0.08806236694930991, 0.08687533556667781, 0.1622920056278665, 0.02748019141336422, 0.1243326097433246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00621677099579554, 9.999999999998899e-05, 0.08812393345976721, 9.999999999998899e-05, 9.999999999998899e-05, 0.004743565936173089, 0.03135080628373976, 0.0561663826157075, 0.00023426718443952943, 0.01416474565351733, 0.03706365209708706, 0.04520984189714017, 0.024405527630688262, 0.06614750915627521, 0.02749829701916584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05787121334864964, 0.08516406584374125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12248802119877455, 0.10146800421086699, 9.999999999998899e-05, 0.1304133445635367, 9.999999999998899e-05, 0.057857889551221175, 0.049666582829566486, 0.056080151977283665, 0.15221657569021485, 0.4343753898939422, 0.43894850258583706, 0.46493425296928825, 0.18144122261025164, 0.20542776456910328, 0.4063822273212737, 0.43427998500752496, 0.374926763436492, 0.052718194690551945, 0.07653927528000437, 0.04860219574540847, 0.09636985264463915, 0.08081715545962653, 0.10829053131698352, 0.06013258938131383, 0.09384221627500178, 0.09126653781595828, 0.14101892889114098, 0.14214266435545164, 0.14309579566795505, 0.22005834528474033, 0.14103615343899634, 0.11443005806589768, 0.18404332138482205, 0.1405654088209065, 0.2003777812340629, 0.19690493322116276, 0.23191949579660098, 0.21668151739742836, 0.22893525391100344, 0.24895708883543766, 0.24512186247155598, 0.2477062062217429, 0.17293010381984641, 0.11177960633973194, 0.17241267490543155, 0.14293751103588803, 0.10938322280846569, 0.16991720231431118, 0.20757396247093562, 0.13213307621032933, 0.1958729618426298, 0.13045090170706408, 0.07215121377748424, 0.19410292157122544, 0.16414935840684097, 0.2030269126562494, 0.17106408802787665, 0.20992306002340078, 0.16448632558931275, 0.17915700992462458, 0.17208468624911488, 0.19709709194522174, 0.1980336671268943, 0.5304158007390452, 0.17388646361656723, 0.22132347942271846, 0.1894930743084159, 0.18506561955850265, 0.21417238353158186, 0.17589605679717557, 0.17565808829392282, 0.18199504336428518, 0.1633088703181611, 0.12218261863212998, 0.1617387938096394, 0.19942032563146372, 0.6837486490408737, 0.14815327226145725, 0.12278504494747844, 0.19031649073070955, 0.2645571498193219, 0.16639084707531926, 0.1646540548287836, 0.2041816064800166, 0.0970713935544274, 0.20056860620066475, 0.18391566772287926, 0.10179267269258963, 0.18549621577315156, 0.18428157006335566, 0.1785922018643028, 0.18473688776078212, 0.1846957738489604, 0.2098551254273452, 0.212765310594494, 0.188777444563358, 0.19170883028272057, 0.19875328054731622, 0.05158487900015529, 0.07887957413411772, 0.07711546108497769, 0.07504042561897895, 0.06622246327792214, 0.05483098519377194, 0.09321143153430655, 0.07565500018463933, 0.08217771543420171]}, "mutation_prompt": null}
{"id": "b1842805-8f70-40d5-b572-15d9d2e71d44", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "a0ff4a8f-9852-48a2-9c94-55371b2dc5ac", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "96a29c76-ee95-4d76-9fb3-afa2fe4c919e", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "b74ee8d5-e215-4453-bb9f-eb658a17936c", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w_min = 0.4   # Min inertia weight\n        self.w_max = 0.9   # Max inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (self.evaluations / self.budget)\n            qt_threshold = 0.7 - 0.5 * (self.evaluations / self.budget)\n\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < qt_threshold:  # Adaptive probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Enhanced AQIPSO with adaptive inertia weight and dynamic quantum update threshold for improved convergence.", "configspace": "", "generation": 58, "fitness": 0.18054913374150014, "feedback": "The algorithm AQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.21.", "error": "", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.5753907903132838, 0.5055848284334574, 0.5246611124302996, 0.18771973856708513, 0.19062503891344873, 0.6175471082253494, 0.6089875911297022, 0.17191706109452864, 0.6400228315768701, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026388493456821593, 0.028843347625751803, 9.999999999998899e-05, 0.032831342688074305, 0.011135559048169319, 0.002907638917810429, 0.05785765633530193, 0.03628654469387804, 0.06713540038730026, 0.10170831459474794, 0.06768853426521215, 0.16724438066744263, 0.12063127735376633, 0.028972114084481304, 0.04554613417404452, 0.11702082145703374, 0.11044243349578797, 0.09736120087230304, 0.11258830325302172, 0.032794729237385245, 0.13920566743891483, 0.12328591451455473, 0.0880775239100563, 0.13982415182032604, 0.9928585733920445, 0.9955555755897652, 0.9959449106454745, 0.995607797423748, 0.9944018355205979, 0.9922498423520243, 0.9933369267655402, 0.9940700547456438, 0.9898905537722636, 0.060163197824121384, 0.05502055138683426, 0.10809085604409552, 0.45148923459709955, 0.3583635788703905, 0.14368984176446853, 0.12286587815632488, 0.08772818367226132, 9.999999999998899e-05, 0.19718307051018735, 0.16026906389551554, 0.13034384837349866, 0.06921240571612053, 0.18322815900345224, 0.1134282158005071, 0.06645827876753863, 0.01772874458140994, 0.14598640352655512, 0.18377550403172005, 0.12440046551426964, 0.13859599879643447, 0.11525931039917936, 0.06308828453789284, 0.08367786168921487, 0.13290005398879112, 0.12370466198415397, 0.10985758948956537, 0.009666132893412227, 0.02079382459349255, 0.009707007584856209, 0.15208917968866442, 0.180716015204321, 0.1356465736289676, 0.11371363347962526, 0.08542807674898611, 0.09389705583261743, 9.999999999998899e-05, 9.999999999998899e-05, 0.027575844527964022, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016244573158656572, 9.999999999998899e-05, 9.999999999998899e-05, 0.05896260979506862, 0.020240272562206174, 0.06585128451083633, 0.09791201890722967, 9.999999999998899e-05, 0.026384298307133958, 0.0002012051845226015, 9.999999999998899e-05, 0.02970338621584101, 0.04584400856108972, 0.0723401949025676, 0.06601486512629529, 0.06980842445966029, 0.03772000315699042, 0.0367027895441675, 0.05823774197348086, 0.04901994623229644, 0.04498328373290783, 0.1499008920745033, 0.031209471216826934, 9.999999999998899e-05, 9.999999999998899e-05, 0.025695018787142532, 9.999999999998899e-05, 0.04428834432094009, 9.999999999998899e-05, 0.061243581278611736, 0.39370478740858705, 0.4071192916928258, 0.4113613972876029, 0.20717795817967333, 0.19964641106388015, 0.42902701904923535, 0.3809248938984754, 0.4361015429276789, 0.41398789238263667, 0.05416184012287251, 0.04996173030040385, 0.05870670060418992, 0.07493358433590924, 0.02400278582519, 0.124950273466926, 0.09910077001986939, 0.054522491350815105, 0.08061851559701594, 0.1411929878233188, 0.1582740750602869, 0.20982948026921944, 0.14421891671259923, 0.20722943095944246, 0.1799384588584909, 0.20567151385514093, 0.18589628039909434, 0.14411026848107245, 0.19174211687088905, 0.20432348950803658, 0.31401211489524905, 0.28584892005476514, 0.2937564231239935, 0.330639384158138, 0.24946831300873584, 0.24456550882218653, 0.1286610373397632, 0.20191784075207597, 0.14984470099973646, 0.1303055166295065, 0.16893817837640512, 0.17875585169793762, 0.10601593005766408, 0.13695979541538894, 0.11154373268352791, 0.06806952818655554, 0.18757934837767976, 0.18169509421441277, 0.18029653012302693, 0.1821418604528584, 0.133852733848267, 0.18893618696725767, 0.1956560791525067, 0.1942160012037245, 0.20537764592559404, 0.1861377393428727, 0.17596648300068884, 0.17064458505658786, 0.18229621486169567, 0.4090234324394568, 0.19232565463140006, 0.17738220010315908, 0.39778721559455776, 0.4018492061636898, 0.17564982912360771, 0.2043040156540875, 0.12388498402222592, 0.655164963946125, 0.1930382621381337, 0.188956513535532, 0.12537377263079708, 0.17665956796862425, 0.15509116839517934, 0.1081094486186992, 0.15125064522266585, 0.15163919596778452, 0.2520715133981708, 0.19869814363081395, 0.10338173725415467, 0.18386222959626364, 0.10411999166091868, 0.1960595452662326, 0.2105846424577289, 0.188467171820905, 0.19901197175562957, 0.19697629219296642, 0.22297916106385196, 0.18912300914859093, 0.18329391665144124, 0.18708175438603647, 0.22738950056898588, 0.065493433572554, 0.04545659677212355, 0.07358710449696626, 0.07884468323944871, 0.0725887293325419, 0.08003113800457717, 0.06698026668353618, 0.06550343516271262, 0.07480020455417657]}, "mutation_prompt": null}
{"id": "867878ff-e7ef-44d8-8fb9-f8b775356265", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w_start = 0.9  # start inertia weight\n        self.w_end = 0.4    # end inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Dynamic inertia weight calculation\n            w = self.w_start - (self.w_start - self.w_end) * (self.evaluations / self.budget)\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position", "name": "AQIPSO", "description": "Enhanced AQIPSO with dynamic inertia weight adjustment for improved convergence.", "configspace": "", "generation": 59, "fitness": 0.17287204918228416, "feedback": "The algorithm AQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.5960602062618894, 0.565548071386801, 0.1259330211212204, 0.1895565341175296, 0.19020860643040605, 0.5870434580703454, 0.16990490515301226, 0.6306871093452822, 0.1762514689679323, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029647964969907514, 0.03416875739769276, 9.999999999998899e-05, 9.999999999998899e-05, 0.004731059598977461, 0.03477699547043389, 0.11090036670242975, 0.12319646387354188, 0.050612931132818395, 0.34181846796502224, 0.06461504350163105, 0.11255480255852923, 0.1250891875006731, 0.06169113270012072, 0.0335976288599219, 0.1009711667573523, 0.11673391426245894, 0.1228900445683021, 0.11111866615350185, 0.08133356527273283, 0.11978994508647034, 0.033819455343398475, 0.0379813239810346, 0.13119167652059405, 0.9946846062642414, 0.9916172523997675, 0.9958683595609499, 0.9934129115102643, 0.9818422829796772, 0.9941670130581662, 0.9932316946549664, 0.9945479950005035, 0.993108601917661, 0.32546495895041283, 0.05515022257199287, 0.09720704387533374, 0.14394078531397758, 0.460425211419043, 0.1239673803088448, 0.08081833720085707, 0.08770649358771931, 9.999999999998899e-05, 0.16612308129014675, 0.25441835802684987, 0.1335334013199736, 0.15045743173965598, 0.06406435865382698, 0.1829817059923119, 0.19141812912502376, 0.1489482816074349, 0.20461216884873556, 0.09778318495594418, 0.13303786059045652, 0.09064029156100095, 0.06351502521510533, 0.07334345887162563, 9.999999999998899e-05, 0.12390708814668339, 0.13356723652109337, 0.21014199557926616, 0.021572565124205356, 0.010142174120918779, 0.019434418807991682, 0.11035166029201704, 0.09613970189054521, 0.2705087708574415, 0.08778651207469124, 0.02851838780610705, 0.13739781536068896, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019105586862883328, 0.02118195173302917, 0.06258754457746596, 0.008084211768113914, 0.011880896548050801, 0.05579676740097583, 0.04572026051286515, 0.03613119645220919, 0.07628825828347197, 0.03175597345935699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13579376033666668, 0.15319802658029713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07713041748241345, 0.0651517549132703, 9.999999999998899e-05, 0.10928707119211489, 9.999999999998899e-05, 0.06048108599711255, 0.049747089843802494, 0.057966940489204144, 0.15193961383485843, 0.38837875446895664, 0.4387896548641089, 0.40942706852145017, 0.18142233987300893, 0.20663525264332383, 0.37998971150960725, 0.4191832986733255, 0.3742896359846051, 0.10485018251818579, 0.05015848687244928, 0.06822700517437752, 0.07995118141604529, 0.13820744540068663, 0.08225219841246068, 0.054859378181806306, 0.10473791618269024, 0.08047534535309064, 0.1402244782856198, 0.14181634176650026, 0.14270962133310094, 0.23949619164915725, 0.15119266709359402, 0.10547412887169316, 0.18334361223462103, 0.13968538777515638, 0.2203219699416049, 0.17639769088626944, 0.21615439572965767, 0.288245100348248, 0.22467566232606961, 0.29099680828930663, 0.2151300820721852, 0.3198159804362616, 0.1694693841219299, 0.11172071820921958, 0.16970824571744125, 0.15046837923461986, 0.12191115958569021, 0.15946267626834576, 0.23139883129557492, 0.11282464419399296, 0.21131547347181745, 0.12320748126835446, 0.07108698151262893, 0.15817636543288682, 0.17946857728053145, 0.17764529435963128, 0.20150573558395135, 0.1460824656301053, 0.20319087498305655, 0.18688709873565335, 0.16321726853739238, 0.1937573789957927, 0.16829592120661996, 0.21293554546403648, 0.18884701230150336, 0.2193146598807798, 0.18838781498750035, 0.18735377610526305, 0.17561233086492667, 0.20044701969377854, 0.16940747630826536, 0.1812644357330604, 0.24646639673419513, 0.11284987133962243, 0.1631560723184935, 0.19996679827760033, 0.194451443886953, 0.149054469779763, 0.1134517613878947, 0.16938997310252946, 0.3670852146121464, 0.16634516242352515, 0.16469101258231877, 0.20835915959307083, 0.09619269671763209, 0.1594945527086311, 0.19454389716606568, 0.17997014257299793, 0.18530382526184308, 0.169730295221434, 0.20921647870074989, 0.20125822604543386, 0.20327441450170314, 0.21020737258020217, 0.19446270523383313, 0.17856218730634754, 0.18852859610017336, 0.2370063862388455, 0.04888406109713306, 0.050763479837653946, 0.08117124659735886, 0.09455964706758058, 0.0938378142575309, 0.07258497622327575, 0.05377780958319456, 0.06395918692704794, 0.06826072308078002]}, "mutation_prompt": null}
{"id": "78f2e566-5f18-4377-a103-0ca8902aeb55", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "b61d3fb9-6dfe-4f46-be9b-72ef8aef4f66", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "c60d787a-8fb8-4499-9a40-ab46544fc370", "solution": "import numpy as np\n\nclass EAQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w_max = 0.9  # maximum inertia weight\n        self.w_min = 0.4  # minimum inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            w = self.w_max - ((self.w_max - self.w_min) * (self.evaluations / self.budget))  # Dynamic inertia weight\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = EAQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "EAQIPSO", "description": "Enhanced Adaptive Quantum-Inspired Particle Swarm Optimization (EAQIPSO) with dynamic inertia weight for improved convergence.", "configspace": "", "generation": 62, "fitness": 0.17287204918228416, "feedback": "The algorithm EAQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.5960602062618894, 0.565548071386801, 0.1259330211212204, 0.1895565341175296, 0.19020860643040605, 0.5870434580703454, 0.16990490515301226, 0.6306871093452822, 0.1762514689679323, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029647964969907514, 0.03416875739769276, 9.999999999998899e-05, 9.999999999998899e-05, 0.004731059598977461, 0.03477699547043389, 0.11090036670242975, 0.12319646387354188, 0.050612931132818395, 0.34181846796502224, 0.06461504350163105, 0.11255480255852923, 0.1250891875006731, 0.06169113270012072, 0.0335976288599219, 0.1009711667573523, 0.11673391426245894, 0.1228900445683021, 0.11111866615350185, 0.08133356527273283, 0.11978994508647034, 0.033819455343398475, 0.0379813239810346, 0.13119167652059405, 0.9946846062642414, 0.9916172523997675, 0.9958683595609499, 0.9934129115102643, 0.9818422829796772, 0.9941670130581662, 0.9932316946549664, 0.9945479950005035, 0.993108601917661, 0.32546495895041283, 0.05515022257199287, 0.09720704387533374, 0.14394078531397758, 0.460425211419043, 0.1239673803088448, 0.08081833720085707, 0.08770649358771931, 9.999999999998899e-05, 0.16612308129014675, 0.25441835802684987, 0.1335334013199736, 0.15045743173965598, 0.06406435865382698, 0.1829817059923119, 0.19141812912502376, 0.1489482816074349, 0.20461216884873556, 0.09778318495594418, 0.13303786059045652, 0.09064029156100095, 0.06351502521510533, 0.07334345887162563, 9.999999999998899e-05, 0.12390708814668339, 0.13356723652109337, 0.21014199557926616, 0.021572565124205356, 0.010142174120918779, 0.019434418807991682, 0.11035166029201704, 0.09613970189054521, 0.2705087708574415, 0.08778651207469124, 0.02851838780610705, 0.13739781536068896, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019105586862883328, 0.02118195173302917, 0.06258754457746596, 0.008084211768113914, 0.011880896548050801, 0.05579676740097583, 0.04572026051286515, 0.03613119645220919, 0.07628825828347197, 0.03175597345935699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13579376033666668, 0.15319802658029713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07713041748241345, 0.0651517549132703, 9.999999999998899e-05, 0.10928707119211489, 9.999999999998899e-05, 0.06048108599711255, 0.049747089843802494, 0.057966940489204144, 0.15193961383485843, 0.38837875446895664, 0.4387896548641089, 0.40942706852145017, 0.18142233987300893, 0.20663525264332383, 0.37998971150960725, 0.4191832986733255, 0.3742896359846051, 0.10485018251818579, 0.05015848687244928, 0.06822700517437752, 0.07995118141604529, 0.13820744540068663, 0.08225219841246068, 0.054859378181806306, 0.10473791618269024, 0.08047534535309064, 0.1402244782856198, 0.14181634176650026, 0.14270962133310094, 0.23949619164915725, 0.15119266709359402, 0.10547412887169316, 0.18334361223462103, 0.13968538777515638, 0.2203219699416049, 0.17639769088626944, 0.21615439572965767, 0.288245100348248, 0.22467566232606961, 0.29099680828930663, 0.2151300820721852, 0.3198159804362616, 0.1694693841219299, 0.11172071820921958, 0.16970824571744125, 0.15046837923461986, 0.12191115958569021, 0.15946267626834576, 0.23139883129557492, 0.11282464419399296, 0.21131547347181745, 0.12320748126835446, 0.07108698151262893, 0.15817636543288682, 0.17946857728053145, 0.17764529435963128, 0.20150573558395135, 0.1460824656301053, 0.20319087498305655, 0.18688709873565335, 0.16321726853739238, 0.1937573789957927, 0.16829592120661996, 0.21293554546403648, 0.18884701230150336, 0.2193146598807798, 0.18838781498750035, 0.18735377610526305, 0.17561233086492667, 0.20044701969377854, 0.16940747630826536, 0.1812644357330604, 0.24646639673419513, 0.11284987133962243, 0.1631560723184935, 0.19996679827760033, 0.194451443886953, 0.149054469779763, 0.1134517613878947, 0.16938997310252946, 0.3670852146121464, 0.16634516242352515, 0.16469101258231877, 0.20835915959307083, 0.09619269671763209, 0.1594945527086311, 0.19454389716606568, 0.17997014257299793, 0.18530382526184308, 0.169730295221434, 0.20921647870074989, 0.20125822604543386, 0.20327441450170314, 0.21020737258020217, 0.19446270523383313, 0.17856218730634754, 0.18852859610017336, 0.2370063862388455, 0.04888406109713306, 0.050763479837653946, 0.08117124659735886, 0.09455964706758058, 0.0938378142575309, 0.07258497622327575, 0.05377780958319456, 0.06395918692704794, 0.06826072308078002]}, "mutation_prompt": null}
{"id": "0b7bc0da-44d2-4399-9518-768531824182", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "05716fd7-d31b-4892-816c-c849268858b0", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "ff8a095d-af64-4ddc-b165-0990dae6bee7", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "c2c2e6d7-c801-4a46-8ab5-41bbc463e7a1", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "a84244ad-6db8-407c-a929-61a5f069bf74", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "1ef1da84-2de6-4abc-923a-bd47a6516ccc", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "0930e6fd-5b22-4f47-ab87-0c7d6fc7a9e5", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "73a78336-2e04-433a-8ed1-8f6173491f83", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "eddf146e-ef2d-4be6-b830-0c0fc17dd8db", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w_max = 0.9  # max inertia weight\n        self.w_min = 0.4  # min inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            inertia_weight = self.w_max - (self.w_max - self.w_min) * (self.evaluations / self.budget)\n\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position", "name": "AQIPSO", "description": "Enhanced AQIPSO with adaptive inertia weight strategy for better convergence by dynamically adjusting exploration-exploitation balance.", "configspace": "", "generation": 71, "fitness": 0.17945653572370032, "feedback": "The algorithm AQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.21.", "error": "", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.5650518524125703, 0.5756546403329177, 0.1260357505969787, 0.1894608324159065, 0.19022990600027223, 0.612899451885131, 0.17024718119476334, 0.6234557397308638, 0.17787815034956878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3985568997102812, 0.4172292838392765, 0.0034692875658153266, 0.10058583319262038, 0.0669391762415178, 0.0514135189514886, 0.3688749986806853, 0.06419390262828695, 0.1233715498292931, 0.12706197320467638, 0.35551419126933104, 0.052541225756883025, 0.07362633097959936, 0.10419143673118103, 0.12373762592173665, 0.12279137392979134, 0.10686659391585396, 0.0415876700120994, 0.032824590188527125, 0.03811974789446826, 0.11048661621533606, 0.994684890593425, 0.9916179634653933, 0.9958683635333871, 0.9934132787128072, 0.9818429123206297, 0.9941670576327221, 0.9932309918202337, 0.9945480416178162, 0.9931087580962631, 0.32900565317605124, 0.0549508236620464, 0.05382443601651099, 0.1423547024061419, 0.37784971316124005, 0.12465258884311592, 0.08507137489653072, 0.08828359275486564, 9.999999999998899e-05, 0.16186307440279812, 0.15343370049295046, 0.13062612575328747, 0.15249260191497416, 0.11449600044601171, 0.18182688643397482, 0.2032710368974855, 0.14851713549496615, 0.16538568391709452, 0.08209367706957915, 0.14341998544890844, 0.08700244442567817, 0.08266229012999704, 0.07560355159253018, 9.999999999998899e-05, 0.11488909147163062, 0.1267615758044669, 0.20194858877208854, 0.09348605555972866, 0.010142799900745403, 0.19650921276938216, 0.16678438456822864, 0.08806236694930991, 0.08687533556667781, 0.1622920056278665, 0.02748019141336422, 0.1243326097433246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00621677099579554, 9.999999999998899e-05, 0.08812393345976721, 9.999999999998899e-05, 9.999999999998899e-05, 0.004743565936173089, 0.03135080628373976, 0.0561663826157075, 0.00023426718443952943, 0.01416474565351733, 0.03706365209708706, 0.04520984189714017, 0.024405527630688262, 0.06614750915627521, 0.02749829701916584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05787121334864964, 0.08516406584374125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12248802119877455, 0.10146800421086699, 9.999999999998899e-05, 0.1304133445635367, 9.999999999998899e-05, 0.057857889551221175, 0.049666582829566486, 0.056080151977283665, 0.15221657569021485, 0.4343753898939422, 0.43894850258583706, 0.46493425296928825, 0.18144122261025164, 0.20542776456910328, 0.4063822273212737, 0.43427998500752496, 0.374926763436492, 0.052718194690551945, 0.07653927528000437, 0.04860219574540847, 0.09636985264463915, 0.08081715545962653, 0.10829053131698352, 0.06013258938131383, 0.09384221627500178, 0.09126653781595828, 0.14101892889114098, 0.14214266435545164, 0.14309579566795505, 0.22005834528474033, 0.14103615343899634, 0.11443005806589768, 0.18404332138482205, 0.1405654088209065, 0.2003777812340629, 0.19690493322116276, 0.23191949579660098, 0.21668151739742836, 0.22893525391100344, 0.24895708883543766, 0.24512186247155598, 0.2477062062217429, 0.17293010381984641, 0.11177960633973194, 0.17241267490543155, 0.14293751103588803, 0.10938322280846569, 0.16991720231431118, 0.20757396247093562, 0.13213307621032933, 0.1958729618426298, 0.13045090170706408, 0.07215121377748424, 0.19410292157122544, 0.16414935840684097, 0.2030269126562494, 0.17106408802787665, 0.20992306002340078, 0.16448632558931275, 0.17915700992462458, 0.17208468624911488, 0.19709709194522174, 0.1980336671268943, 0.5304158007390452, 0.17388646361656723, 0.22132347942271846, 0.1894930743084159, 0.18506561955850265, 0.21417238353158186, 0.17589605679717557, 0.17565808829392282, 0.18199504336428518, 0.1633088703181611, 0.12218261863212998, 0.1617387938096394, 0.19942032563146372, 0.6837486490408737, 0.14815327226145725, 0.12278504494747844, 0.19031649073070955, 0.2645571498193219, 0.16639084707531926, 0.1646540548287836, 0.2041816064800166, 0.0970713935544274, 0.20056860620066475, 0.18391566772287926, 0.10179267269258963, 0.18549621577315156, 0.18428157006335566, 0.1785922018643028, 0.18473688776078212, 0.1846957738489604, 0.2098551254273452, 0.212765310594494, 0.188777444563358, 0.19170883028272057, 0.19875328054731622, 0.05158487900015529, 0.07887957413411772, 0.07711546108497769, 0.07504042561897895, 0.06622246327792214, 0.05483098519377194, 0.09321143153430655, 0.07565500018463933, 0.08217771543420171]}, "mutation_prompt": null}
{"id": "812b0933-c879-4d4a-ae1b-f84517b0e401", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "26bab930-800d-4c2b-9ccd-cdd8b32e1984", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "885e6d83-0833-474d-bda2-c6e9ad52514e", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "3fd42a32-1fb9-4312-9597-d673515888b5", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "dee088f8-5acc-4113-b078-02ead4e16d56", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "75659336-d672-4b50-944b-ff32525e4147", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "56ca77d0-b7e5-4fb4-9f3c-91955952cfee", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "39572078-d26e-411c-8a41-df8b58a453b2", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "10f9364c-38e3-4270-9af5-f6f7b228129b", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "88c91dcd-599a-4bf1-833a-1a17534ee85d", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "2d8021e8-184d-4b33-bd1a-44241eab5cdf", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "2cfa3da9-9aa4-452f-b0f7-2f44833c2508", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "6847a576-5810-4525-99a6-2a539be122f6", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "07016d95-f9ae-4813-ad87-346281499535", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "06268f54-35c5-47cc-bf7b-913af2be6481", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w_max = 0.9  # max inertia weight\n        self.w_min = 0.4  # min inertia weight\n        self.w = self.w_max\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def update_inertia_weight(self):\n        if np.ptp(self.best_personal_values) > 0:\n            self.w = self.w_min + (self.w_max - self.w_min) * (1 - (np.std(self.best_personal_values) / np.ptp(self.best_personal_values)))\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            self.update_inertia_weight()\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position", "name": "AQIPSO", "description": "Enhanced AQIPSO with adaptive inertia weight based on fitness diversity to improve convergence performance.", "configspace": "", "generation": 86, "fitness": 0.1840985270482996, "feedback": "The algorithm AQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.5246622539570492, 0.5697449834034667, 0.1266857005494083, 0.18876528151982241, 0.5630275678100499, 0.6705567458959218, 0.14947588075292484, 0.5698266186872197, 0.4844636067996655, 9.999999999998899e-05, 9.999999999998899e-05, 0.2179810336758119, 0.05171877855650164, 0.02415458312696428, 9.999999999998899e-05, 0.036752464252840955, 0.009848030371038319, 0.01383733190485037, 0.06952009469538101, 0.19973345440228873, 0.14770573689329836, 0.06735745057681541, 0.08060362708727153, 0.0957065909852588, 0.06679061653729368, 0.10636266787105142, 0.025918705759275906, 0.10040024855092866, 0.10388879798315609, 0.14200089672853333, 0.11668503325082658, 0.10899538953823718, 0.09000891289770774, 0.10100939233245276, 0.10508087441523006, 0.12939525525540374, 0.994640882974233, 0.9915532632469621, 0.99586620172934, 0.9933128317775278, 0.09983819323896237, 0.994174034739481, 0.9937147052695586, 0.9945405233189071, 0.9929818721131406, 0.11056859725432733, 0.059601437367519994, 0.05998669937601031, 0.2126858087585075, 0.21589309264920686, 0.14556594869199457, 0.3159200682276315, 0.08886436397638009, 9.999999999998899e-05, 0.2330050869702287, 0.298943026337117, 0.16784389354444706, 0.2677549107808749, 0.01128245662213645, 0.19865472454262723, 0.1262989317019837, 0.08576622899469244, 0.437759840140608, 9.999999999998899e-05, 0.17801098085608813, 0.14541487499868344, 0.16279764746257785, 0.15530909539309545, 0.13056184075132438, 0.16008369375844644, 0.1554164225464798, 0.1950409633601159, 0.14863253255595554, 0.009665684249660966, 0.32116700481854643, 0.10702046008831334, 0.16306977604113182, 0.11457064191490829, 0.1168942235112006, 0.12284068132467196, 0.11076614345177327, 0.00029820590137930036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008024151311253669, 0.008463887117555746, 0.003268282706334724, 9.999999999998899e-05, 9.999999999998899e-05, 0.06694268851485285, 0.039133552579540765, 0.04903233885909153, 0.023674393143068073, 9.999999999998899e-05, 0.022303606395296494, 0.12697755882084982, 0.06721517842847147, 0.03457967458843847, 0.029737259643108138, 9.999999999998899e-05, 0.11444548264966614, 0.002747641133799328, 9.999999999998899e-05, 0.057242031966057594, 0.039982050602528574, 0.055518229156193755, 0.03797603662161486, 9.999999999998899e-05, 9.999999999998899e-05, 0.10117145709292563, 9.999999999998899e-05, 0.038473981251351375, 0.08913367455546106, 0.1251836863206801, 0.054033454499425204, 0.07205579401365902, 0.1529950814365949, 0.37954293649596516, 0.393231556625007, 0.4347582833736071, 0.4459517975215179, 0.20687352699805284, 0.43251754084307026, 0.3957278371159262, 0.4128114728406054, 0.06975013359550464, 0.07263598389143244, 0.05307194813254568, 0.1174182129758492, 0.08136631864353727, 0.07683435714949682, 0.06508722301118941, 0.0919231208750576, 0.09667521922524247, 0.16855642551663075, 0.166997654473243, 0.21606643286138394, 0.20567778910203138, 0.3153276026659593, 0.2738149379664573, 0.1734304583342533, 0.16850761276705162, 0.2128938024260827, 0.19568712729354076, 0.17314845342089502, 0.2748096021362567, 0.2873071702474893, 0.25779294819650145, 0.18093062500163104, 0.1891655064256368, 0.17615717452948043, 0.12243764394962331, 0.161243717008265, 0.13133304319434735, 0.13972408660798574, 0.2020793887143394, 0.18694814551112127, 0.11195281310664229, 0.13575105604470317, 0.1325558981888193, 0.10304066557337732, 0.22807858426575356, 0.28534681878496804, 0.18905164812943975, 0.20578899850782317, 0.19705932624811262, 0.19285060273796273, 0.1780353301162686, 0.16958269676316673, 0.1990697333840924, 0.18556021139312429, 0.21318372328951884, 0.19253325323926873, 0.20845665959158544, 0.19536292759293605, 0.1984515381491725, 0.20357779252139263, 0.20933304927958685, 0.22951897921253506, 0.2484321032656952, 0.19688802251147697, 0.12421020604493838, 0.5777427480632397, 0.20180037100586534, 0.19727150490018452, 0.1520656351864803, 0.11409098883710689, 0.1556147929206274, 0.07721078204784348, 0.16506126833883294, 0.15290721401922946, 0.2073319933350194, 0.16859561167801507, 0.20680616891609283, 0.19612596396035775, 0.15059926337854668, 0.47885101002870556, 0.1898742068748307, 0.18363858071097316, 0.19686830510304387, 0.19088874815723, 0.1664320452345306, 0.1812917261036835, 0.20917893222308137, 0.18234580915736387, 0.20187932058312164, 0.0849028414785522, 0.05984333265970532, 0.08089976252811615, 0.07021496410897965, 0.06812076046758342, 0.09574463995430482, 0.07646167005634286, 0.06916727616760343, 0.05041187088082477]}, "mutation_prompt": null}
{"id": "1dfdde35-c107-4c84-982a-f3b2cf6e1d66", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "10086882-f3fd-4dc6-b571-9d5c12ad7648", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w_max = 0.9   # max inertia weight\n        self.w_min = 0.4   # min inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update inertia weight dynamically\n            self.w = self.w_max - (self.w_max - self.w_min) * (self.evaluations / self.budget)\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Adjusted probability threshold for quantum update\n                if np.random.rand() < 0.6:  \n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position", "name": "AQIPSO", "description": "Introducing dynamic inertia weight and enhanced quantum update probability for improved convergence in AQIPSO.", "configspace": "", "generation": 88, "fitness": 0.16563118630006457, "feedback": "The algorithm AQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.5012229817615235, 0.5831067415150184, 0.510558294087115, 0.17912569433330205, 0.18322676452874387, 0.19146077220781665, 0.180331158547282, 0.5598714916366092, 0.5984920855172378, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03699228615957728, 0.003594527851588869, 0.06316406282985665, 0.12613438075508243, 0.12385592130020884, 0.041010892225866735, 0.11181243813735908, 0.12871737259983274, 0.03373236655121925, 0.06596604389458549, 0.032825832122856946, 0.08512842043340973, 0.11263032778737636, 0.0856124113342368, 0.13550879021275974, 0.1121292562160996, 0.10660003243722171, 0.05528942743114129, 0.10346082092907383, 0.10965597356846901, 0.9940847087800386, 0.9934951622404573, 0.9956538073320685, 0.9932467462230723, 0.09983716759800076, 0.9924013713305878, 0.9967848501046614, 0.9945371114023249, 0.9929853374964002, 0.05941077294186836, 0.05538278596078594, 0.05427429062989908, 0.13077769520875482, 0.29286733817915067, 0.1413735404169052, 0.0817156790399004, 0.08175841569887232, 0.04932903837099334, 0.16616368538561166, 0.10551725493314101, 0.16329699916600582, 0.15580609162449022, 0.17991893501633227, 0.17693792376857487, 0.1206238620314598, 0.0843199050578296, 0.20556014407751289, 0.11729881191801783, 0.14300581557195013, 0.14676476569066943, 0.08438952937185462, 0.13084178777304045, 9.999999999998899e-05, 0.12343965847269978, 0.11796466150997198, 0.12381514661728799, 0.01920195172118888, 0.022153153344379617, 0.009770420819712355, 0.0922353640715371, 0.10608927800930246, 0.1139281465089863, 0.13342255224126998, 0.10482276414093827, 0.09273673818910333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005329172414116123, 0.04004624226882603, 0.02707616597356355, 0.06548504481267392, 9.999999999998899e-05, 9.999999999998899e-05, 0.02217656459905515, 0.02284401706282102, 0.034365293713002565, 0.023794086106773693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03114555578326139, 0.05969487139185459, 9.999999999998899e-05, 0.03465361325262217, 0.0066934294492768664, 0.06484589915273387, 9.999999999998899e-05, 0.003529932903543309, 0.04178785223282355, 9.999999999998899e-05, 0.04696888213250472, 0.07446611816071724, 0.04844240189237392, 0.3613431171234206, 0.38238342577553797, 0.39823475756911153, 0.1675626369759411, 0.20518395468827855, 0.20341378576314095, 0.37183973392673997, 0.38156391429486936, 0.3863548547024961, 0.055843632304289015, 0.05156630080004054, 0.049910323754014496, 0.0843650244613493, 0.08317813075667113, 0.08628661438435214, 0.09219960906656055, 0.06002732911858677, 0.07986435344295673, 0.14040627625580415, 0.14164212097056583, 0.20238496612063717, 0.20781604033315904, 0.2598087857615605, 0.2841814063666698, 0.13646812357170512, 0.13192575969411624, 0.12579918614261099, 0.19377857576092894, 0.16719591674061207, 0.2641782957276728, 0.20905313338535858, 0.23969879277304051, 0.2853003651704006, 0.22743818591238618, 0.1472993723368634, 0.13661055241247977, 0.20993313489347498, 0.11422480878929453, 0.12336532653753651, 0.1614748679110054, 0.17880662339086484, 0.11996761823838975, 0.11239807258896073, 0.1168175611402823, 0.08679378828298956, 0.1954149636711362, 0.2036558366083736, 0.187306663253075, 0.19145045737893496, 0.22121197269075255, 0.18935422047200767, 0.19288791655146065, 0.2060522104567366, 0.20191908514067358, 0.1863695359386499, 0.19252803344789093, 0.18215709633410537, 0.2117864218408948, 0.2060688544261453, 0.19466064829112606, 0.19537866250952673, 0.1790497898620953, 0.18907374447902925, 0.25011644561308544, 0.1271627399052757, 0.12370453458290398, 0.6428646576074577, 0.19422693322705198, 0.19513991472076164, 0.16842814716561316, 0.17652300592311954, 0.1294079094581575, 0.1724323621905225, 0.15279641737698935, 0.11747358913051953, 0.1915173458450372, 0.28898254554737046, 0.1939717655109947, 0.18512533581875712, 0.17686704410840592, 0.18561249674347524, 0.18525692032052832, 0.19864560358106165, 0.19433302391725016, 0.1899547408446114, 0.21036479593416357, 0.20134693402511417, 0.19700013295842034, 0.18555695179287224, 0.2893082159004827, 0.07400796974229451, 0.0354031841658945, 0.06373627597174714, 0.09461648376881915, 0.06984295397899054, 0.08558762540242659, 0.079462447618592, 0.0721650991808428, 0.0680745435613741]}, "mutation_prompt": null}
{"id": "f46ce4dd-98c0-46cf-ad32-e4e3b9d9f55d", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "ff4a4dec-dff9-4145-a492-7a14d061aca3", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.9   # initial inertia weight\n        self.w_min = 0.4  # minimum inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Adaptive inertia weight decay\n                self.w = self.w_min + (0.9 - self.w_min) * ((self.budget - self.evaluations) / self.budget)\n\n                # Adaptive probability for quantum update\n                if np.random.rand() < (0.5 * (1 - (self.evaluations / self.budget))):\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position", "name": "AQIPSO", "description": "Modified AQIPSO with adaptive inertia weight decay and adaptive quantum probability to improve exploration-exploitation balance dynamically.", "configspace": "", "generation": 90, "fitness": 0.18716868538507667, "feedback": "The algorithm AQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.22.", "error": "", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.5938843069413389, 0.6015439299132028, 0.6303497095096902, 0.1892820827005789, 0.1904535120043892, 0.7330139767082633, 0.637002651631123, 0.6769900579289992, 0.17866391299348938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03098228166545436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012762706216629671, 0.03547217478418441, 0.09578315623292832, 0.15104023666204303, 0.09573773270342245, 0.5317284647353222, 0.0721425515586207, 0.09869238006026093, 0.11505989483145163, 0.046945459177341387, 0.03303699086224221, 0.10712347749637863, 0.12679438290350842, 0.13071136573470743, 0.10607736300867421, 0.1144221394094539, 0.11347780907172977, 0.03681792880257162, 0.10702259281589266, 0.11573002194132898, 0.9946848527164148, 0.9916172523997675, 0.9958683556618612, 0.9934129185184234, 0.981083732234043, 0.9941670135723137, 0.9932317081689143, 0.9945479950005035, 0.9931086109491001, 0.4298188220003929, 0.05877445896159583, 0.09190791379845598, 0.1411108341480809, 0.45119264764295963, 0.13566740923339893, 0.08258698894951977, 0.08070827825583204, 9.999999999998899e-05, 0.16579755536023932, 0.1860121422288289, 0.13017928727678574, 0.15365850604171138, 0.18514611852531504, 0.1825842661191709, 0.20810131544187216, 0.1625206041490992, 0.22880118455839615, 0.10096550105122881, 0.1414502420787963, 0.1052433203228813, 0.0759277951793581, 0.11437307574267119, 0.09898759799079904, 0.14914305690119123, 0.1022613601171608, 0.16142181160837188, 0.009830566587454626, 0.010144398509091102, 0.00925436202268648, 0.1450404635127306, 0.08104811720514249, 0.10656285175615832, 0.15600831718586383, 0.1015448706998261, 0.0990418733831746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021152911346260184, 0.029029227578170502, 0.005406104804410061, 0.03760911899841046, 0.01673042992678242, 0.03935008897425141, 0.03557580364385882, 0.10145581508944013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06253239109110276, 0.07407029026511824, 9.999999999998899e-05, 0.047537977080946425, 9.999999999998899e-05, 0.039147545975553144, 0.10039413327249891, 9.999999999998899e-05, 0.11798506330441216, 9.999999999998899e-05, 0.06296508144925972, 0.04408148296377934, 0.0616269478669248, 0.15238281601946746, 0.42385101907585443, 0.4092404128937751, 0.46658967577514476, 0.4450921141984653, 0.2038699885248193, 0.4165612470624628, 0.4717313040082016, 0.46891504006335294, 0.05072885380799652, 0.05611574369541339, 0.058327632507019556, 0.09944355652642423, 0.10305498614470676, 0.11029450419205655, 0.06530747547288851, 0.07789093010738979, 0.09393517279091523, 0.14182581820404028, 0.16454170282699565, 0.14280313624976682, 0.22953765018675454, 0.2086073482697034, 0.13310509231996837, 0.18164297391484818, 0.1326971460357077, 0.19666392274896505, 0.17749219508073855, 0.2983576543417842, 0.23911842524821447, 0.2292490773578335, 0.2478225262519097, 0.3106099467966962, 0.16969050550914944, 0.1847277048505127, 0.1119118498755648, 0.18501648080414268, 0.21320554478660658, 0.21084536302128598, 0.1715938551917121, 0.2089343021582929, 0.10567692567250742, 0.1615357612426489, 0.20389218106152862, 0.07173911475446404, 0.18136510321377408, 0.25891915603492344, 0.19217260555402482, 0.20899610115758704, 0.16390806670867553, 0.1823669766683118, 0.1972931326455427, 0.1680567865701812, 0.18978419112526446, 0.1742635556377703, 0.19330776153813345, 0.21557194590009043, 0.5538957939341065, 0.22496048939065283, 0.19648179112492958, 0.19388275332931204, 0.20349903925300017, 0.19133576736873525, 0.18260173931477708, 0.19643105967368812, 0.11273001493176293, 0.15506216268746031, 0.19962464556520731, 0.1941108163062456, 0.18108895734717068, 0.1263082005813574, 0.18306760067050465, 0.5111285305118297, 0.16312148613225685, 0.1722304614233946, 0.20480733880494384, 0.15981154654508167, 0.15720413582185444, 0.18409292205621064, 0.2742577689736776, 0.19816851763403165, 0.18576886590061892, 0.1784977335945399, 0.1969454441559777, 0.20325026485928444, 0.18227568214535028, 0.20316083183925515, 0.19537796649284433, 0.18838768526615546, 0.18644510215263022, 0.08192203946298637, 0.050911930075081546, 0.08388026841369867, 0.07809248937116242, 0.087976253501168, 0.06730313031752044, 0.07134001295840209, 0.07568754403128042, 0.07659118046945701]}, "mutation_prompt": null}
{"id": "94c8a5f2-b01f-49cd-b892-8fad5edc05a1", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.9   # initial inertia weight\n        self.w_min = 0.4  # minimum inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Dynamic inertia weight adjustment\n            self.w = self.w_min + (0.9 - self.w_min) * (1 - self.evaluations / self.budget)\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position", "name": "AQIPSO", "description": "Enhanced AQIPSO with Dynamic Inertia Weight Adjustment for Adaptive Exploration-Exploitation Balance.", "configspace": "", "generation": 91, "fitness": 0.17287204900286543, "feedback": "The algorithm AQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.5960602062620615, 0.5655480713865502, 0.1259330211212204, 0.1895565341175296, 0.19020860643040605, 0.5870434580686966, 0.16990490515301226, 0.630687109551971, 0.1762514689679323, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02964796496991473, 0.03416875739769276, 9.999999999998899e-05, 9.999999999998899e-05, 0.004731059598977461, 0.034776995470434335, 0.11090036670248793, 0.12319646387354966, 0.050612931132818395, 0.341818467932117, 0.06461504350163105, 0.112554802558534, 0.12508918750068243, 0.06169113270012072, 0.0335976288599219, 0.1009711667573523, 0.1167339142624596, 0.1228900445683021, 0.11111866615350185, 0.08133356527273283, 0.11978994508647034, 0.033819455343398475, 0.03798132398103937, 0.13119167652059405, 0.9946846062642414, 0.9916172523997675, 0.9958683595609499, 0.9934129115102643, 0.9818422829796772, 0.9941670130581662, 0.9932316946549664, 0.9945479950005035, 0.993108601917661, 0.32546495893735894, 0.05515022257217583, 0.0972070438753353, 0.14394078531397758, 0.4604252114185218, 0.12396738030881838, 0.08081833720085774, 0.08770649358771931, 9.999999999998899e-05, 0.16612308129014675, 0.25441835802684987, 0.1335334013199736, 0.15045743173965598, 0.06406435865382698, 0.1829817059923119, 0.19141812912502376, 0.1489482816074349, 0.20461216884873556, 0.09778318495594418, 0.1330378605907555, 0.09064029156104458, 0.063515025215087, 0.07334345887166693, 9.999999999998899e-05, 0.12390708814672402, 0.13356723652060032, 0.210141995579605, 0.021572565124205356, 0.010142174120918779, 0.019434418807991682, 0.11035166029202881, 0.09613970189054521, 0.27050877085750946, 0.08778651207468902, 0.02851838780610705, 0.13739781536064277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019105586861036472, 0.02118195173302917, 0.0625875445774664, 0.00808421176809826, 0.011880896548050801, 0.055796767400979275, 0.04572026051286515, 0.03613119645220919, 0.07628825828347308, 0.03175597345930692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1357937603355307, 0.153198026580198, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07713041748246108, 0.06515175491323932, 9.999999999998899e-05, 0.10928707119259873, 9.999999999998899e-05, 0.06048108599711999, 0.04974708984380627, 0.057966940489166174, 0.15193961383485843, 0.3883787544690621, 0.4387896548642243, 0.409427068520653, 0.18142233987300893, 0.20663525264332383, 0.37998971150962035, 0.41918329868598725, 0.37428963598466536, 0.10485018251818479, 0.05015848687244928, 0.06822700517437752, 0.07995118141604529, 0.13820744540068663, 0.08225219841246068, 0.054859378181806306, 0.10473791618269457, 0.08047534535309064, 0.14022447828565632, 0.14181634176637437, 0.14270962133310316, 0.2394961916491668, 0.1511926670927296, 0.1054741288715082, 0.18334361223446471, 0.13968538777508943, 0.22032196994162434, 0.17639769088624713, 0.21615439572978434, 0.2882451009525804, 0.22467566232603042, 0.29099680769216507, 0.21513007844989385, 0.31981597955979124, 0.16946938411969803, 0.11172071820921958, 0.16970824602478696, 0.15046837926767143, 0.1219111595801663, 0.1594626793340591, 0.23139883129549066, 0.1128246441616979, 0.21131543569547862, 0.1232074812683086, 0.07108698151269399, 0.15817636543292724, 0.17946857728001175, 0.1776452943596014, 0.201505735583981, 0.1460824656344839, 0.2031908749841227, 0.18688709873180998, 0.1632172685142823, 0.19375737899573864, 0.16829592120660997, 0.21293554546402116, 0.18884701230150336, 0.21931465988079912, 0.18838781498751622, 0.18735377610526305, 0.17561233086492667, 0.200447019693773, 0.16940747630826536, 0.1812644357330585, 0.2464663967341939, 0.11284987133962243, 0.1631560723184935, 0.19996679827760033, 0.194451443886953, 0.14905446977975023, 0.1134517613878947, 0.16938997310252946, 0.3670852146122041, 0.16634516242352515, 0.16469101258231877, 0.20835915959307083, 0.09619269671763209, 0.1594945527086311, 0.1945438971660376, 0.17997014257299415, 0.18530382526184352, 0.169730295221434, 0.20921647870313054, 0.20125822604549826, 0.20327441450165307, 0.21020737258018007, 0.19446270523381726, 0.17856218730634377, 0.1885285961001697, 0.23700638623892833, 0.04888406109713228, 0.050763479837653946, 0.08117124659734942, 0.0945596470675748, 0.0938378142575309, 0.07258497622310967, 0.05377780958319456, 0.06395918692701474, 0.06826072308081588]}, "mutation_prompt": null}
{"id": "446e9b3c-c900-4932-9a42-eba2f12efdc3", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "3575ccae-c4ab-45e1-ba33-7ed13b5a1859", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "29edb019-bd1e-412e-b7cc-c455453f3e0b", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w_max = 0.9  # max inertia weight\n        self.w_min = 0.4  # min inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            self.w = self.w_max - (self.w_max - self.w_min) * (self.evaluations / self.budget)  # Adaptive inertia\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position", "name": "AQIPSO", "description": "Enhanced AQIPSO with adaptive inertia weight for better balance between exploration and exploitation.", "configspace": "", "generation": 94, "fitness": 0.17945653572370032, "feedback": "The algorithm AQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.21.", "error": "", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.5650518524125703, 0.5756546403329177, 0.1260357505969787, 0.1894608324159065, 0.19022990600027223, 0.612899451885131, 0.17024718119476334, 0.6234557397308638, 0.17787815034956878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3985568997102812, 0.4172292838392765, 0.0034692875658153266, 0.10058583319262038, 0.0669391762415178, 0.0514135189514886, 0.3688749986806853, 0.06419390262828695, 0.1233715498292931, 0.12706197320467638, 0.35551419126933104, 0.052541225756883025, 0.07362633097959936, 0.10419143673118103, 0.12373762592173665, 0.12279137392979134, 0.10686659391585396, 0.0415876700120994, 0.032824590188527125, 0.03811974789446826, 0.11048661621533606, 0.994684890593425, 0.9916179634653933, 0.9958683635333871, 0.9934132787128072, 0.9818429123206297, 0.9941670576327221, 0.9932309918202337, 0.9945480416178162, 0.9931087580962631, 0.32900565317605124, 0.0549508236620464, 0.05382443601651099, 0.1423547024061419, 0.37784971316124005, 0.12465258884311592, 0.08507137489653072, 0.08828359275486564, 9.999999999998899e-05, 0.16186307440279812, 0.15343370049295046, 0.13062612575328747, 0.15249260191497416, 0.11449600044601171, 0.18182688643397482, 0.2032710368974855, 0.14851713549496615, 0.16538568391709452, 0.08209367706957915, 0.14341998544890844, 0.08700244442567817, 0.08266229012999704, 0.07560355159253018, 9.999999999998899e-05, 0.11488909147163062, 0.1267615758044669, 0.20194858877208854, 0.09348605555972866, 0.010142799900745403, 0.19650921276938216, 0.16678438456822864, 0.08806236694930991, 0.08687533556667781, 0.1622920056278665, 0.02748019141336422, 0.1243326097433246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00621677099579554, 9.999999999998899e-05, 0.08812393345976721, 9.999999999998899e-05, 9.999999999998899e-05, 0.004743565936173089, 0.03135080628373976, 0.0561663826157075, 0.00023426718443952943, 0.01416474565351733, 0.03706365209708706, 0.04520984189714017, 0.024405527630688262, 0.06614750915627521, 0.02749829701916584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05787121334864964, 0.08516406584374125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12248802119877455, 0.10146800421086699, 9.999999999998899e-05, 0.1304133445635367, 9.999999999998899e-05, 0.057857889551221175, 0.049666582829566486, 0.056080151977283665, 0.15221657569021485, 0.4343753898939422, 0.43894850258583706, 0.46493425296928825, 0.18144122261025164, 0.20542776456910328, 0.4063822273212737, 0.43427998500752496, 0.374926763436492, 0.052718194690551945, 0.07653927528000437, 0.04860219574540847, 0.09636985264463915, 0.08081715545962653, 0.10829053131698352, 0.06013258938131383, 0.09384221627500178, 0.09126653781595828, 0.14101892889114098, 0.14214266435545164, 0.14309579566795505, 0.22005834528474033, 0.14103615343899634, 0.11443005806589768, 0.18404332138482205, 0.1405654088209065, 0.2003777812340629, 0.19690493322116276, 0.23191949579660098, 0.21668151739742836, 0.22893525391100344, 0.24895708883543766, 0.24512186247155598, 0.2477062062217429, 0.17293010381984641, 0.11177960633973194, 0.17241267490543155, 0.14293751103588803, 0.10938322280846569, 0.16991720231431118, 0.20757396247093562, 0.13213307621032933, 0.1958729618426298, 0.13045090170706408, 0.07215121377748424, 0.19410292157122544, 0.16414935840684097, 0.2030269126562494, 0.17106408802787665, 0.20992306002340078, 0.16448632558931275, 0.17915700992462458, 0.17208468624911488, 0.19709709194522174, 0.1980336671268943, 0.5304158007390452, 0.17388646361656723, 0.22132347942271846, 0.1894930743084159, 0.18506561955850265, 0.21417238353158186, 0.17589605679717557, 0.17565808829392282, 0.18199504336428518, 0.1633088703181611, 0.12218261863212998, 0.1617387938096394, 0.19942032563146372, 0.6837486490408737, 0.14815327226145725, 0.12278504494747844, 0.19031649073070955, 0.2645571498193219, 0.16639084707531926, 0.1646540548287836, 0.2041816064800166, 0.0970713935544274, 0.20056860620066475, 0.18391566772287926, 0.10179267269258963, 0.18549621577315156, 0.18428157006335566, 0.1785922018643028, 0.18473688776078212, 0.1846957738489604, 0.2098551254273452, 0.212765310594494, 0.188777444563358, 0.19170883028272057, 0.19875328054731622, 0.05158487900015529, 0.07887957413411772, 0.07711546108497769, 0.07504042561897895, 0.06622246327792214, 0.05483098519377194, 0.09321143153430655, 0.07565500018463933, 0.08217771543420171]}, "mutation_prompt": null}
{"id": "da3df4e2-5267-4a4b-9b67-542995fbf2a1", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "6ce66bc9-dd18-4d1c-b692-02f26e4285dd", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "0698af3d-fcf3-4bb6-a77a-3a7091fc86e3", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "af36fef1-4db6-47d5-b609-d63ffd48560e", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
{"id": "058e2c7e-41b1-482a-a221-69fdacf9e0a3", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def initialize(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.positions)\n        self.best_personal_values = np.full(self.population_size, np.inf)\n\n    def quantum_update(self, position, global_best):\n        phi = np.random.uniform(0, 1, self.dim)\n        delta = np.abs(position - global_best)\n        new_position = global_best + (-1)**np.random.randint(2, size=self.dim) * delta * np.log(1/phi)\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        self.initialize()\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                value = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if value < self.best_personal_values[i]:\n                    self.best_personal_values[i] = value\n                    self.best_personal_positions[i] = self.positions[i]\n\n                # Update global best\n                if value < self.best_global_value:\n                    self.best_global_value = value\n                    self.best_global_position = self.positions[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and positions\n            for i in range(self.population_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (self.best_personal_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired update\n                if np.random.rand() < 0.5:  # Probability threshold for quantum update\n                    self.positions[i] = self.quantum_update(self.positions[i], self.best_global_position)\n                else:\n                    self.positions[i] += self.velocities[i]\n                    self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.best_global_value, self.best_global_position\n\n# Example usage:\n# optimizer = AQIPSO(budget=1000, dim=10)\n# best_value, best_position = optimizer(func)", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum-inspired position updates for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0b78939-c664-4c02-9ef5-c42d9f5189cc", "metadata": {"aucs": [0.9355502862815612, 0.9118391911371039, 0.9357008717001111, 0.9048570567880821, 0.9147418546518686, 0.9102959393242585, 0.9237906819062611, 0.9161063564459995, 0.9148991172041239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04774832203291568, 0.8572042726245013, 0.7793129226057187, 0.8591592719800162, 0.8256420639936698, 0.11785299908619129, 0.1808421634890256, 0.18536059820441053, 0.07317908717838295, 0.14786926326367866, 0.0649111788856015, 0.7861332118467551, 0.072464319736258, 0.1361158551138617, 0.14583031399385926, 0.1176269125311239, 0.11699026669183643, 0.09736984034204599, 0.04960189197244602, 0.11679356308339683, 0.17806107460303833, 0.616227468623976, 0.12294313864024864, 0.9941839005594799, 0.9915013772153262, 0.9937349896741848, 0.9899093090724361, 0.09979294139973605, 0.9933475996762199, 0.9958632138120663, 0.9922156544859911, 0.9921523086152867, 0.7006011985786316, 0.7103522223883825, 0.05959512921057197, 0.7215024952320488, 0.5894510420385628, 0.15211391929916795, 0.6702945644633642, 0.6830887276573445, 9.999999999998899e-05, 0.1707145688601478, 0.17032562668593143, 0.2537260177080306, 0.27958014393919306, 0.2146536255976732, 0.2223323154238861, 0.13892630984997745, 0.09494215890933733, 0.22786217855424862, 0.12979098692360747, 0.2075167018969747, 0.20375821524561244, 0.32457904180988406, 0.2493050304922333, 0.22230965251937052, 0.2001778010508729, 0.20186479950973357, 0.2491913628289324, 0.20167841883461246, 0.017000385404208784, 0.21440523932411393, 0.2549333903251626, 0.2319776183388763, 0.1979684384583449, 0.2120360647130165, 0.05996608283635274, 0.24160237369014692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012008425062044581, 9.999999999998899e-05, 0.024757756709046452, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559240345937687, 0.05717283958885144, 0.07462058661839788, 0.14497428235811216, 9.999999999998899e-05, 0.03764575252844027, 0.11948701438535958, 0.04712221173252018, 0.0645616258852908, 0.05400016223842541, 9.999999999998899e-05, 0.34974097372648594, 0.10039169019504457, 9.999999999998899e-05, 0.08441356045449178, 0.23230430397469415, 0.11536716262622027, 0.11544676765468143, 0.0481539121450858, 0.043594116374864655, 0.1458966146452172, 0.0401944757029874, 0.03376961129933642, 0.04463294107153326, 0.15218936798964955, 0.06819269639192116, 0.08435928304748574, 0.5300558899645665, 0.5732838406519081, 0.5900370585071361, 0.5562787770946584, 0.6028291109629358, 0.5399101567945512, 0.540415592058539, 0.5663035486385064, 0.5565898157218974, 0.11148202041334276, 0.0476755884804434, 0.11090997260678703, 0.14578780266742175, 0.07858399541356886, 0.10065578170912581, 0.04937492581440839, 0.086209504713047, 0.08690593708095873, 0.18961913714070056, 0.16674038906869004, 0.13546410097077788, 0.2642636654387368, 0.1975435879343329, 0.1976307769397352, 0.1919198460882109, 0.1901526063020933, 0.2863412070238135, 0.19868763102630116, 0.20253561396722763, 0.3045769889928497, 0.29010167272790877, 0.4837931124122007, 0.19058251024182415, 0.25245487181884685, 0.17981417231672492, 0.13884907656799206, 0.09728686568613099, 0.18573997775713025, 0.22144371975422905, 0.22675597801440373, 0.18678318459751464, 0.17764554589143577, 0.21072476744392032, 0.16557284042505926, 0.2423959154950781, 0.2270909264997425, 0.19796121197961347, 0.22953749366770448, 0.19263843769004085, 0.2240698622182531, 0.22311125526407216, 0.22255516489311344, 0.2595567211220118, 0.22072495968120642, 0.1900894020039906, 0.21069855218909184, 0.21325007451725586, 0.2164023695633709, 0.20042590964632423, 0.17031674903656346, 0.21911859622363106, 0.19174127687698805, 0.20104302083226544, 0.9201869916778956, 0.19908875470848053, 0.15473483749379668, 0.17348427589539128, 0.20201519183413008, 0.2012123392515045, 0.15438484028114108, 0.11416910649322976, 0.16710161327223327, 0.07937823297580182, 0.21344274736154012, 0.16965657234055542, 0.21343200421394537, 0.16889813440416623, 0.2139350414805402, 0.10433407715569387, 0.16761589189657478, 0.6387544789155504, 0.21584027326084443, 0.19959248538765773, 0.2281010989560378, 0.21658125333514067, 0.19145735433030464, 0.20926563411706145, 0.2190695673129338, 0.2066751240225081, 0.2577500046661414, 0.106730300713331, 0.08794997225362455, 0.09085615241957512, 0.0816619341181426, 0.09866878397577661, 0.13944151877250155, 0.09453550658772769, 0.10049998342508937, 0.0927854226232574]}, "mutation_prompt": null}
