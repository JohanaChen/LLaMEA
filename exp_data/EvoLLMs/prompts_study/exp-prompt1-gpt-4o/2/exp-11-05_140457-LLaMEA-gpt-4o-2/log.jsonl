{"id": "08c9ccc3-a4cc-4890-8986-aeaa052de9a4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # differential evolution scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                mutant_vector = np.clip(a + self.F * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid particle swarm optimization with adaptive differential evolution to balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.21458885324826313, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": null, "metadata": {"aucs": [0.39712887885076875, 0.39712887885076875, 0.39712887885076875, 0.9392608853865323, 0.9392608853865323, 0.9392608853865323, 0.9447148316808145, 0.9447148316808145, 0.9447148316808145, 0.028792382451166332, 0.028792382451166332, 0.028792382451166332, 0.1009351199984907, 0.1009351199984907, 0.1009351199984907, 0.1430506425957383, 0.1430506425957383, 0.1430506425957383, 0.1389080290134791, 0.1389080290134791, 0.1389080290134791, 0.11907872565189537, 0.11907872565189537, 0.11907872565189537, 0.12097957910475166, 0.12097957910475166, 0.12097957910475166, 0.09323925280257861, 0.09323925280257861, 0.09323925280257861, 0.08423166241709568, 0.08423166241709568, 0.08423166241709568, 0.16560897253537077, 0.16560897253537077, 0.16560897253537077, 0.1569292008876091, 0.1569292008876091, 0.1569292008876091, 0.986701382393906, 0.986701382393906, 0.986701382393906, 0.22921073650379675, 0.22921073650379675, 0.22921073650379675, 0.7152190098184298, 0.7152190098184298, 0.7152190098184298, 0.14682330187732462, 0.14682330187732462, 0.14682330187732462, 0.17062499230538597, 0.17062499230538597, 0.17062499230538597, 0.17289888386197438, 0.17289888386197438, 0.17289888386197438, 0.16296510256108454, 0.16296510256108454, 0.16296510256108454, 0.22372347356299893, 0.22372347356299893, 0.22372347356299893, 0.13815739814132755, 0.13815739814132755, 0.13815739814132755, 0.1628571520815424, 0.1628571520815424, 0.1628571520815424, 0.07500309716985376, 0.07500309716985376, 0.07500309716985376, 0.15288070449686908, 0.15288070449686908, 0.15288070449686908, 0.15286606853579465, 0.15286606853579465, 0.15286606853579465, 0.13783602808943574, 0.13783602808943574, 0.13783602808943574, 0.01809705027407016, 0.01809705027407016, 0.01809705027407016, 0.011213555172999268, 0.011213555172999268, 0.011213555172999268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15188807390674608, 0.15188807390674608, 0.15188807390674608, 0.04513764527761999, 0.04513764527761999, 0.04513764527761999, 0.09587655233290882, 0.09587655233290882, 0.09587655233290882, 0.19701351519139731, 0.19701351519139731, 0.19701351519139731, 0.1467681466263393, 0.1467681466263393, 0.1467681466263393, 0.21879673330699723, 0.21879673330699723, 0.21879673330699723, 0.13266085342380718, 0.13266085342380718, 0.13266085342380718, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.5021745159494003, 0.5021745159494003, 0.5021745159494003, 0.26791554812722307, 0.26791554812722307, 0.26791554812722307, 0.4034031679207458, 0.4034031679207458, 0.4034031679207458, 0.07912983070662738, 0.07912983070662738, 0.07912983070662738, 0.10890157698744929, 0.10890157698744929, 0.10890157698744929, 0.07790850416404904, 0.07790850416404904, 0.07790850416404904, 0.17793838342635426, 0.17793838342635426, 0.17793838342635426, 0.21146187415422624, 0.21146187415422624, 0.21146187415422624, 0.20801603229642884, 0.20801603229642884, 0.20801603229642884, 0.5042570489570127, 0.5042570489570127, 0.5042570489570127, 0.43911133305186345, 0.43911133305186345, 0.43911133305186345, 0.17672942670168834, 0.17672942670168834, 0.17672942670168834, 0.20087677551783245, 0.20087677551783245, 0.20087677551783245, 0.27206400122291374, 0.27206400122291374, 0.27206400122291374, 0.15760741436928694, 0.15760741436928694, 0.15760741436928694, 0.2147211716330205, 0.2147211716330205, 0.2147211716330205, 0.2358635608978069, 0.2358635608978069, 0.2358635608978069, 0.21101825937973473, 0.21101825937973473, 0.21101825937973473, 0.21393156671765268, 0.21393156671765268, 0.21393156671765268, 0.19890931799085132, 0.19890931799085132, 0.19890931799085132, 0.18023087717828856, 0.18023087717828856, 0.18023087717828856, 0.6378141874184067, 0.6378141874184067, 0.6378141874184067, 0.18897147642551293, 0.18897147642551293, 0.18897147642551293, 0.16672924726552685, 0.16672924726552685, 0.16672924726552685, 0.16995128948968852, 0.16995128948968852, 0.16995128948968852, 0.16989663507815544, 0.16989663507815544, 0.16989663507815544, 0.16755371257063834, 0.16755371257063834, 0.16755371257063834, 0.17909819032542162, 0.17909819032542162, 0.17909819032542162, 0.1852133671546029, 0.1852133671546029, 0.1852133671546029, 0.19330726827627032, 0.19330726827627032, 0.19330726827627032, 0.09197430504235948, 0.09197430504235948, 0.09197430504235948, 0.10703734828107936, 0.10703734828107936, 0.10703734828107936, 0.0723025989079269, 0.0723025989079269, 0.0723025989079269]}, "mutation_prompt": null}
{"id": "35e8ef95-ec39-4251-9d62-8caef0306f5e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # differential evolution scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                mutant_vector = np.clip(a + self.F * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid particle swarm optimization with adaptive differential evolution to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08c9ccc3-a4cc-4890-8986-aeaa052de9a4", "metadata": {"aucs": [0.39712887885076875, 0.39712887885076875, 0.39712887885076875, 0.9392608853865323, 0.9392608853865323, 0.9392608853865323, 0.9447148316808145, 0.9447148316808145, 0.9447148316808145, 0.028792382451166332, 0.028792382451166332, 0.028792382451166332, 0.1009351199984907, 0.1009351199984907, 0.1009351199984907, 0.1430506425957383, 0.1430506425957383, 0.1430506425957383, 0.1389080290134791, 0.1389080290134791, 0.1389080290134791, 0.11907872565189537, 0.11907872565189537, 0.11907872565189537, 0.12097957910475166, 0.12097957910475166, 0.12097957910475166, 0.09323925280257861, 0.09323925280257861, 0.09323925280257861, 0.08423166241709568, 0.08423166241709568, 0.08423166241709568, 0.16560897253537077, 0.16560897253537077, 0.16560897253537077, 0.1569292008876091, 0.1569292008876091, 0.1569292008876091, 0.986701382393906, 0.986701382393906, 0.986701382393906, 0.22921073650379675, 0.22921073650379675, 0.22921073650379675, 0.7152190098184298, 0.7152190098184298, 0.7152190098184298, 0.14682330187732462, 0.14682330187732462, 0.14682330187732462, 0.17062499230538597, 0.17062499230538597, 0.17062499230538597, 0.17289888386197438, 0.17289888386197438, 0.17289888386197438, 0.16296510256108454, 0.16296510256108454, 0.16296510256108454, 0.22372347356299893, 0.22372347356299893, 0.22372347356299893, 0.13815739814132755, 0.13815739814132755, 0.13815739814132755, 0.1628571520815424, 0.1628571520815424, 0.1628571520815424, 0.07500309716985376, 0.07500309716985376, 0.07500309716985376, 0.15288070449686908, 0.15288070449686908, 0.15288070449686908, 0.15286606853579465, 0.15286606853579465, 0.15286606853579465, 0.13783602808943574, 0.13783602808943574, 0.13783602808943574, 0.01809705027407016, 0.01809705027407016, 0.01809705027407016, 0.011213555172999268, 0.011213555172999268, 0.011213555172999268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15188807390674608, 0.15188807390674608, 0.15188807390674608, 0.04513764527761999, 0.04513764527761999, 0.04513764527761999, 0.09587655233290882, 0.09587655233290882, 0.09587655233290882, 0.19701351519139731, 0.19701351519139731, 0.19701351519139731, 0.1467681466263393, 0.1467681466263393, 0.1467681466263393, 0.21879673330699723, 0.21879673330699723, 0.21879673330699723, 0.13266085342380718, 0.13266085342380718, 0.13266085342380718, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.5021745159494003, 0.5021745159494003, 0.5021745159494003, 0.26791554812722307, 0.26791554812722307, 0.26791554812722307, 0.4034031679207458, 0.4034031679207458, 0.4034031679207458, 0.07912983070662738, 0.07912983070662738, 0.07912983070662738, 0.10890157698744929, 0.10890157698744929, 0.10890157698744929, 0.07790850416404904, 0.07790850416404904, 0.07790850416404904, 0.17793838342635426, 0.17793838342635426, 0.17793838342635426, 0.21146187415422624, 0.21146187415422624, 0.21146187415422624, 0.20801603229642884, 0.20801603229642884, 0.20801603229642884, 0.5042570489570127, 0.5042570489570127, 0.5042570489570127, 0.43911133305186345, 0.43911133305186345, 0.43911133305186345, 0.17672942670168834, 0.17672942670168834, 0.17672942670168834, 0.20087677551783245, 0.20087677551783245, 0.20087677551783245, 0.27206400122291374, 0.27206400122291374, 0.27206400122291374, 0.15760741436928694, 0.15760741436928694, 0.15760741436928694, 0.2147211716330205, 0.2147211716330205, 0.2147211716330205, 0.2358635608978069, 0.2358635608978069, 0.2358635608978069, 0.21101825937973473, 0.21101825937973473, 0.21101825937973473, 0.21393156671765268, 0.21393156671765268, 0.21393156671765268, 0.19890931799085132, 0.19890931799085132, 0.19890931799085132, 0.18023087717828856, 0.18023087717828856, 0.18023087717828856, 0.6378141874184067, 0.6378141874184067, 0.6378141874184067, 0.18897147642551293, 0.18897147642551293, 0.18897147642551293, 0.16672924726552685, 0.16672924726552685, 0.16672924726552685, 0.16995128948968852, 0.16995128948968852, 0.16995128948968852, 0.16989663507815544, 0.16989663507815544, 0.16989663507815544, 0.16755371257063834, 0.16755371257063834, 0.16755371257063834, 0.17909819032542162, 0.17909819032542162, 0.17909819032542162, 0.1852133671546029, 0.1852133671546029, 0.1852133671546029, 0.19330726827627032, 0.19330726827627032, 0.19330726827627032, 0.09197430504235948, 0.09197430504235948, 0.09197430504235948, 0.10703734828107936, 0.10703734828107936, 0.10703734828107936, 0.0723025989079269, 0.0723025989079269, 0.0723025989079269]}, "mutation_prompt": null}
{"id": "a8ed9ab0-9497-41a0-a7d8-c64a152fbbca", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # differential evolution scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                mutant_vector = np.clip(a + self.F * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid particle swarm optimization with adaptive differential evolution to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08c9ccc3-a4cc-4890-8986-aeaa052de9a4", "metadata": {"aucs": [0.39712887885076875, 0.39712887885076875, 0.39712887885076875, 0.9392608853865323, 0.9392608853865323, 0.9392608853865323, 0.9447148316808145, 0.9447148316808145, 0.9447148316808145, 0.028792382451166332, 0.028792382451166332, 0.028792382451166332, 0.1009351199984907, 0.1009351199984907, 0.1009351199984907, 0.1430506425957383, 0.1430506425957383, 0.1430506425957383, 0.1389080290134791, 0.1389080290134791, 0.1389080290134791, 0.11907872565189537, 0.11907872565189537, 0.11907872565189537, 0.12097957910475166, 0.12097957910475166, 0.12097957910475166, 0.09323925280257861, 0.09323925280257861, 0.09323925280257861, 0.08423166241709568, 0.08423166241709568, 0.08423166241709568, 0.16560897253537077, 0.16560897253537077, 0.16560897253537077, 0.1569292008876091, 0.1569292008876091, 0.1569292008876091, 0.986701382393906, 0.986701382393906, 0.986701382393906, 0.22921073650379675, 0.22921073650379675, 0.22921073650379675, 0.7152190098184298, 0.7152190098184298, 0.7152190098184298, 0.14682330187732462, 0.14682330187732462, 0.14682330187732462, 0.17062499230538597, 0.17062499230538597, 0.17062499230538597, 0.17289888386197438, 0.17289888386197438, 0.17289888386197438, 0.16296510256108454, 0.16296510256108454, 0.16296510256108454, 0.22372347356299893, 0.22372347356299893, 0.22372347356299893, 0.13815739814132755, 0.13815739814132755, 0.13815739814132755, 0.1628571520815424, 0.1628571520815424, 0.1628571520815424, 0.07500309716985376, 0.07500309716985376, 0.07500309716985376, 0.15288070449686908, 0.15288070449686908, 0.15288070449686908, 0.15286606853579465, 0.15286606853579465, 0.15286606853579465, 0.13783602808943574, 0.13783602808943574, 0.13783602808943574, 0.01809705027407016, 0.01809705027407016, 0.01809705027407016, 0.011213555172999268, 0.011213555172999268, 0.011213555172999268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15188807390674608, 0.15188807390674608, 0.15188807390674608, 0.04513764527761999, 0.04513764527761999, 0.04513764527761999, 0.09587655233290882, 0.09587655233290882, 0.09587655233290882, 0.19701351519139731, 0.19701351519139731, 0.19701351519139731, 0.1467681466263393, 0.1467681466263393, 0.1467681466263393, 0.21879673330699723, 0.21879673330699723, 0.21879673330699723, 0.13266085342380718, 0.13266085342380718, 0.13266085342380718, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.5021745159494003, 0.5021745159494003, 0.5021745159494003, 0.26791554812722307, 0.26791554812722307, 0.26791554812722307, 0.4034031679207458, 0.4034031679207458, 0.4034031679207458, 0.07912983070662738, 0.07912983070662738, 0.07912983070662738, 0.10890157698744929, 0.10890157698744929, 0.10890157698744929, 0.07790850416404904, 0.07790850416404904, 0.07790850416404904, 0.17793838342635426, 0.17793838342635426, 0.17793838342635426, 0.21146187415422624, 0.21146187415422624, 0.21146187415422624, 0.20801603229642884, 0.20801603229642884, 0.20801603229642884, 0.5042570489570127, 0.5042570489570127, 0.5042570489570127, 0.43911133305186345, 0.43911133305186345, 0.43911133305186345, 0.17672942670168834, 0.17672942670168834, 0.17672942670168834, 0.20087677551783245, 0.20087677551783245, 0.20087677551783245, 0.27206400122291374, 0.27206400122291374, 0.27206400122291374, 0.15760741436928694, 0.15760741436928694, 0.15760741436928694, 0.2147211716330205, 0.2147211716330205, 0.2147211716330205, 0.2358635608978069, 0.2358635608978069, 0.2358635608978069, 0.21101825937973473, 0.21101825937973473, 0.21101825937973473, 0.21393156671765268, 0.21393156671765268, 0.21393156671765268, 0.19890931799085132, 0.19890931799085132, 0.19890931799085132, 0.18023087717828856, 0.18023087717828856, 0.18023087717828856, 0.6378141874184067, 0.6378141874184067, 0.6378141874184067, 0.18897147642551293, 0.18897147642551293, 0.18897147642551293, 0.16672924726552685, 0.16672924726552685, 0.16672924726552685, 0.16995128948968852, 0.16995128948968852, 0.16995128948968852, 0.16989663507815544, 0.16989663507815544, 0.16989663507815544, 0.16755371257063834, 0.16755371257063834, 0.16755371257063834, 0.17909819032542162, 0.17909819032542162, 0.17909819032542162, 0.1852133671546029, 0.1852133671546029, 0.1852133671546029, 0.19330726827627032, 0.19330726827627032, 0.19330726827627032, 0.09197430504235948, 0.09197430504235948, 0.09197430504235948, 0.10703734828107936, 0.10703734828107936, 0.10703734828107936, 0.0723025989079269, 0.0723025989079269, 0.0723025989079269]}, "mutation_prompt": null}
{"id": "7e180372-ff68-406f-83c0-7440d256a236", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # differential evolution scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                mutant_vector = np.clip(a + self.F * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid particle swarm optimization with adaptive differential evolution to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08c9ccc3-a4cc-4890-8986-aeaa052de9a4", "metadata": {"aucs": [0.39712887885076875, 0.39712887885076875, 0.39712887885076875, 0.9392608853865323, 0.9392608853865323, 0.9392608853865323, 0.9447148316808145, 0.9447148316808145, 0.9447148316808145, 0.028792382451166332, 0.028792382451166332, 0.028792382451166332, 0.1009351199984907, 0.1009351199984907, 0.1009351199984907, 0.1430506425957383, 0.1430506425957383, 0.1430506425957383, 0.1389080290134791, 0.1389080290134791, 0.1389080290134791, 0.11907872565189537, 0.11907872565189537, 0.11907872565189537, 0.12097957910475166, 0.12097957910475166, 0.12097957910475166, 0.09323925280257861, 0.09323925280257861, 0.09323925280257861, 0.08423166241709568, 0.08423166241709568, 0.08423166241709568, 0.16560897253537077, 0.16560897253537077, 0.16560897253537077, 0.1569292008876091, 0.1569292008876091, 0.1569292008876091, 0.986701382393906, 0.986701382393906, 0.986701382393906, 0.22921073650379675, 0.22921073650379675, 0.22921073650379675, 0.7152190098184298, 0.7152190098184298, 0.7152190098184298, 0.14682330187732462, 0.14682330187732462, 0.14682330187732462, 0.17062499230538597, 0.17062499230538597, 0.17062499230538597, 0.17289888386197438, 0.17289888386197438, 0.17289888386197438, 0.16296510256108454, 0.16296510256108454, 0.16296510256108454, 0.22372347356299893, 0.22372347356299893, 0.22372347356299893, 0.13815739814132755, 0.13815739814132755, 0.13815739814132755, 0.1628571520815424, 0.1628571520815424, 0.1628571520815424, 0.07500309716985376, 0.07500309716985376, 0.07500309716985376, 0.15288070449686908, 0.15288070449686908, 0.15288070449686908, 0.15286606853579465, 0.15286606853579465, 0.15286606853579465, 0.13783602808943574, 0.13783602808943574, 0.13783602808943574, 0.01809705027407016, 0.01809705027407016, 0.01809705027407016, 0.011213555172999268, 0.011213555172999268, 0.011213555172999268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15188807390674608, 0.15188807390674608, 0.15188807390674608, 0.04513764527761999, 0.04513764527761999, 0.04513764527761999, 0.09587655233290882, 0.09587655233290882, 0.09587655233290882, 0.19701351519139731, 0.19701351519139731, 0.19701351519139731, 0.1467681466263393, 0.1467681466263393, 0.1467681466263393, 0.21879673330699723, 0.21879673330699723, 0.21879673330699723, 0.13266085342380718, 0.13266085342380718, 0.13266085342380718, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.5021745159494003, 0.5021745159494003, 0.5021745159494003, 0.26791554812722307, 0.26791554812722307, 0.26791554812722307, 0.4034031679207458, 0.4034031679207458, 0.4034031679207458, 0.07912983070662738, 0.07912983070662738, 0.07912983070662738, 0.10890157698744929, 0.10890157698744929, 0.10890157698744929, 0.07790850416404904, 0.07790850416404904, 0.07790850416404904, 0.17793838342635426, 0.17793838342635426, 0.17793838342635426, 0.21146187415422624, 0.21146187415422624, 0.21146187415422624, 0.20801603229642884, 0.20801603229642884, 0.20801603229642884, 0.5042570489570127, 0.5042570489570127, 0.5042570489570127, 0.43911133305186345, 0.43911133305186345, 0.43911133305186345, 0.17672942670168834, 0.17672942670168834, 0.17672942670168834, 0.20087677551783245, 0.20087677551783245, 0.20087677551783245, 0.27206400122291374, 0.27206400122291374, 0.27206400122291374, 0.15760741436928694, 0.15760741436928694, 0.15760741436928694, 0.2147211716330205, 0.2147211716330205, 0.2147211716330205, 0.2358635608978069, 0.2358635608978069, 0.2358635608978069, 0.21101825937973473, 0.21101825937973473, 0.21101825937973473, 0.21393156671765268, 0.21393156671765268, 0.21393156671765268, 0.19890931799085132, 0.19890931799085132, 0.19890931799085132, 0.18023087717828856, 0.18023087717828856, 0.18023087717828856, 0.6378141874184067, 0.6378141874184067, 0.6378141874184067, 0.18897147642551293, 0.18897147642551293, 0.18897147642551293, 0.16672924726552685, 0.16672924726552685, 0.16672924726552685, 0.16995128948968852, 0.16995128948968852, 0.16995128948968852, 0.16989663507815544, 0.16989663507815544, 0.16989663507815544, 0.16755371257063834, 0.16755371257063834, 0.16755371257063834, 0.17909819032542162, 0.17909819032542162, 0.17909819032542162, 0.1852133671546029, 0.1852133671546029, 0.1852133671546029, 0.19330726827627032, 0.19330726827627032, 0.19330726827627032, 0.09197430504235948, 0.09197430504235948, 0.09197430504235948, 0.10703734828107936, 0.10703734828107936, 0.10703734828107936, 0.0723025989079269, 0.0723025989079269, 0.0723025989079269]}, "mutation_prompt": null}
{"id": "ec0a644b-840c-4702-aeec-f5e09aa0e334", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive velocity update and dynamic DE parameters for improved convergence.", "configspace": "", "generation": 4, "fitness": 0.27123507962272364, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": "08c9ccc3-a4cc-4890-8986-aeaa052de9a4", "metadata": {"aucs": [0.7088466979050652, 0.7088466979050652, 0.7088466979050652, 0.7716727160864145, 0.7716727160864145, 0.7716727160864145, 0.8213962208037371, 0.8213962208037371, 0.8213962208037371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.6348197936407443, 0.6348197936407443, 0.6348197936407443, 0.12270222500039851, 0.12270222500039851, 0.12270222500039851, 0.07949645523138826, 0.07949645523138826, 0.07949645523138826, 0.10111488994089146, 0.10111488994089146, 0.10111488994089146, 0.07927669639120027, 0.07927669639120027, 0.07927669639120027, 0.10209560097569625, 0.10209560097569625, 0.10209560097569625, 0.12066696510367869, 0.12066696510367869, 0.12066696510367869, 0.9859933936969779, 0.9859933936969779, 0.9859933936969779, 0.9834751201755124, 0.9834751201755124, 0.9834751201755124, 0.9838229492094559, 0.9838229492094559, 0.9838229492094559, 0.36561922421440995, 0.36561922421440995, 0.36561922421440995, 0.1503216489647673, 0.1503216489647673, 0.1503216489647673, 0.08768398466611216, 0.08768398466611216, 0.08768398466611216, 0.6388896938941981, 0.6388896938941981, 0.6388896938941981, 0.15948924770312622, 0.15948924770312622, 0.15948924770312622, 0.48756144601694373, 0.48756144601694373, 0.48756144601694373, 0.676498464355017, 0.676498464355017, 0.676498464355017, 0.22759826432707353, 0.22759826432707353, 0.22759826432707353, 0.6648168716970604, 0.6648168716970604, 0.6648168716970604, 0.204123106455244, 0.204123106455244, 0.204123106455244, 0.2070434391944973, 0.2070434391944973, 0.2070434391944973, 0.2775609032294789, 0.2775609032294789, 0.2775609032294789, 0.09167890728542116, 0.09167890728542116, 0.09167890728542116, 0.05727756355920899, 0.05727756355920899, 0.05727756355920899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07012027754343686, 0.07012027754343686, 0.07012027754343686, 0.11644049183148275, 0.11644049183148275, 0.11644049183148275, 0.050226082387908044, 0.050226082387908044, 0.050226082387908044, 0.045136234169967815, 0.045136234169967815, 0.045136234169967815, 0.05690449649142082, 0.05690449649142082, 0.05690449649142082, 0.16026343511425034, 0.16026343511425034, 0.16026343511425034, 0.5056937670746404, 0.5056937670746404, 0.5056937670746404, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08279555155990004, 0.08279555155990004, 0.08279555155990004, 0.7218087447909175, 0.7218087447909175, 0.7218087447909175, 0.5817152958214491, 0.5817152958214491, 0.5817152958214491, 0.5346599182173627, 0.5346599182173627, 0.5346599182173627, 0.08332084708293441, 0.08332084708293441, 0.08332084708293441, 0.09818319640677287, 0.09818319640677287, 0.09818319640677287, 0.04627954276951329, 0.04627954276951329, 0.04627954276951329, 0.1395144346209719, 0.1395144346209719, 0.1395144346209719, 0.1939320396500409, 0.1939320396500409, 0.1939320396500409, 0.16314250970452993, 0.16314250970452993, 0.16314250970452993, 0.31552415479709595, 0.31552415479709595, 0.31552415479709595, 0.1926486934451992, 0.1926486934451992, 0.1926486934451992, 0.3219636258796019, 0.3219636258796019, 0.3219636258796019, 0.2645471228592482, 0.2645471228592482, 0.2645471228592482, 0.18722067900195238, 0.18722067900195238, 0.18722067900195238, 0.1151690352168574, 0.1151690352168574, 0.1151690352168574, 0.1908090063911605, 0.1908090063911605, 0.1908090063911605, 0.1835402619990455, 0.1835402619990455, 0.1835402619990455, 0.18954077288289628, 0.18954077288289628, 0.18954077288289628, 0.20599268301303075, 0.20599268301303075, 0.20599268301303075, 0.20929892108136616, 0.20929892108136616, 0.20929892108136616, 0.19548689052505674, 0.19548689052505674, 0.19548689052505674, 0.7812829783522514, 0.7812829783522514, 0.7812829783522514, 0.15239071209406996, 0.15239071209406996, 0.15239071209406996, 0.1767420808913508, 0.1767420808913508, 0.1767420808913508, 0.2118724791884964, 0.2118724791884964, 0.2118724791884964, 0.21010164965515665, 0.21010164965515665, 0.21010164965515665, 0.1860744612992311, 0.1860744612992311, 0.1860744612992311, 0.1794444355486463, 0.1794444355486463, 0.1794444355486463, 0.18200923180998152, 0.18200923180998152, 0.18200923180998152, 0.19079232748695485, 0.19079232748695485, 0.19079232748695485, 0.08097511055638384, 0.08097511055638384, 0.08097511055638384, 0.09022965301771602, 0.09022965301771602, 0.09022965301771602, 0.07318941088213193, 0.07318941088213193, 0.07318941088213193]}, "mutation_prompt": null}
{"id": "7ed0727e-1696-4a9f-9dfc-9efdbdb3f721", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive velocity update and dynamic DE parameters for improved convergence.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec0a644b-840c-4702-aeec-f5e09aa0e334", "metadata": {"aucs": [0.7088466979050652, 0.7088466979050652, 0.7088466979050652, 0.7716727160864145, 0.7716727160864145, 0.7716727160864145, 0.8213962208037371, 0.8213962208037371, 0.8213962208037371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.6348197936407443, 0.6348197936407443, 0.6348197936407443, 0.12270222500039851, 0.12270222500039851, 0.12270222500039851, 0.07949645523138826, 0.07949645523138826, 0.07949645523138826, 0.10111488994089146, 0.10111488994089146, 0.10111488994089146, 0.07927669639120027, 0.07927669639120027, 0.07927669639120027, 0.10209560097569625, 0.10209560097569625, 0.10209560097569625, 0.12066696510367869, 0.12066696510367869, 0.12066696510367869, 0.9859933936969779, 0.9859933936969779, 0.9859933936969779, 0.9834751201755124, 0.9834751201755124, 0.9834751201755124, 0.9838229492094559, 0.9838229492094559, 0.9838229492094559, 0.36561922421440995, 0.36561922421440995, 0.36561922421440995, 0.1503216489647673, 0.1503216489647673, 0.1503216489647673, 0.08768398466611216, 0.08768398466611216, 0.08768398466611216, 0.6388896938941981, 0.6388896938941981, 0.6388896938941981, 0.15948924770312622, 0.15948924770312622, 0.15948924770312622, 0.48756144601694373, 0.48756144601694373, 0.48756144601694373, 0.676498464355017, 0.676498464355017, 0.676498464355017, 0.22759826432707353, 0.22759826432707353, 0.22759826432707353, 0.6648168716970604, 0.6648168716970604, 0.6648168716970604, 0.204123106455244, 0.204123106455244, 0.204123106455244, 0.2070434391944973, 0.2070434391944973, 0.2070434391944973, 0.2775609032294789, 0.2775609032294789, 0.2775609032294789, 0.09167890728542116, 0.09167890728542116, 0.09167890728542116, 0.05727756355920899, 0.05727756355920899, 0.05727756355920899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07012027754343686, 0.07012027754343686, 0.07012027754343686, 0.11644049183148275, 0.11644049183148275, 0.11644049183148275, 0.050226082387908044, 0.050226082387908044, 0.050226082387908044, 0.045136234169967815, 0.045136234169967815, 0.045136234169967815, 0.05690449649142082, 0.05690449649142082, 0.05690449649142082, 0.16026343511425034, 0.16026343511425034, 0.16026343511425034, 0.5056937670746404, 0.5056937670746404, 0.5056937670746404, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08279555155990004, 0.08279555155990004, 0.08279555155990004, 0.7218087447909175, 0.7218087447909175, 0.7218087447909175, 0.5817152958214491, 0.5817152958214491, 0.5817152958214491, 0.5346599182173627, 0.5346599182173627, 0.5346599182173627, 0.08332084708293441, 0.08332084708293441, 0.08332084708293441, 0.09818319640677287, 0.09818319640677287, 0.09818319640677287, 0.04627954276951329, 0.04627954276951329, 0.04627954276951329, 0.1395144346209719, 0.1395144346209719, 0.1395144346209719, 0.1939320396500409, 0.1939320396500409, 0.1939320396500409, 0.16314250970452993, 0.16314250970452993, 0.16314250970452993, 0.31552415479709595, 0.31552415479709595, 0.31552415479709595, 0.1926486934451992, 0.1926486934451992, 0.1926486934451992, 0.3219636258796019, 0.3219636258796019, 0.3219636258796019, 0.2645471228592482, 0.2645471228592482, 0.2645471228592482, 0.18722067900195238, 0.18722067900195238, 0.18722067900195238, 0.1151690352168574, 0.1151690352168574, 0.1151690352168574, 0.1908090063911605, 0.1908090063911605, 0.1908090063911605, 0.1835402619990455, 0.1835402619990455, 0.1835402619990455, 0.18954077288289628, 0.18954077288289628, 0.18954077288289628, 0.20599268301303075, 0.20599268301303075, 0.20599268301303075, 0.20929892108136616, 0.20929892108136616, 0.20929892108136616, 0.19548689052505674, 0.19548689052505674, 0.19548689052505674, 0.7812829783522514, 0.7812829783522514, 0.7812829783522514, 0.15239071209406996, 0.15239071209406996, 0.15239071209406996, 0.1767420808913508, 0.1767420808913508, 0.1767420808913508, 0.2118724791884964, 0.2118724791884964, 0.2118724791884964, 0.21010164965515665, 0.21010164965515665, 0.21010164965515665, 0.1860744612992311, 0.1860744612992311, 0.1860744612992311, 0.1794444355486463, 0.1794444355486463, 0.1794444355486463, 0.18200923180998152, 0.18200923180998152, 0.18200923180998152, 0.19079232748695485, 0.19079232748695485, 0.19079232748695485, 0.08097511055638384, 0.08097511055638384, 0.08097511055638384, 0.09022965301771602, 0.09022965301771602, 0.09022965301771602, 0.07318941088213193, 0.07318941088213193, 0.07318941088213193]}, "mutation_prompt": null}
{"id": "6efa80cf-d84f-4963-b4bb-9c19f02c80c1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive velocity update and dynamic DE parameters for improved convergence.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec0a644b-840c-4702-aeec-f5e09aa0e334", "metadata": {"aucs": [0.7088466979050652, 0.7088466979050652, 0.7088466979050652, 0.7716727160864145, 0.7716727160864145, 0.7716727160864145, 0.8213962208037371, 0.8213962208037371, 0.8213962208037371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.6348197936407443, 0.6348197936407443, 0.6348197936407443, 0.12270222500039851, 0.12270222500039851, 0.12270222500039851, 0.07949645523138826, 0.07949645523138826, 0.07949645523138826, 0.10111488994089146, 0.10111488994089146, 0.10111488994089146, 0.07927669639120027, 0.07927669639120027, 0.07927669639120027, 0.10209560097569625, 0.10209560097569625, 0.10209560097569625, 0.12066696510367869, 0.12066696510367869, 0.12066696510367869, 0.9859933936969779, 0.9859933936969779, 0.9859933936969779, 0.9834751201755124, 0.9834751201755124, 0.9834751201755124, 0.9838229492094559, 0.9838229492094559, 0.9838229492094559, 0.36561922421440995, 0.36561922421440995, 0.36561922421440995, 0.1503216489647673, 0.1503216489647673, 0.1503216489647673, 0.08768398466611216, 0.08768398466611216, 0.08768398466611216, 0.6388896938941981, 0.6388896938941981, 0.6388896938941981, 0.15948924770312622, 0.15948924770312622, 0.15948924770312622, 0.48756144601694373, 0.48756144601694373, 0.48756144601694373, 0.676498464355017, 0.676498464355017, 0.676498464355017, 0.22759826432707353, 0.22759826432707353, 0.22759826432707353, 0.6648168716970604, 0.6648168716970604, 0.6648168716970604, 0.204123106455244, 0.204123106455244, 0.204123106455244, 0.2070434391944973, 0.2070434391944973, 0.2070434391944973, 0.2775609032294789, 0.2775609032294789, 0.2775609032294789, 0.09167890728542116, 0.09167890728542116, 0.09167890728542116, 0.05727756355920899, 0.05727756355920899, 0.05727756355920899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07012027754343686, 0.07012027754343686, 0.07012027754343686, 0.11644049183148275, 0.11644049183148275, 0.11644049183148275, 0.050226082387908044, 0.050226082387908044, 0.050226082387908044, 0.045136234169967815, 0.045136234169967815, 0.045136234169967815, 0.05690449649142082, 0.05690449649142082, 0.05690449649142082, 0.16026343511425034, 0.16026343511425034, 0.16026343511425034, 0.5056937670746404, 0.5056937670746404, 0.5056937670746404, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08279555155990004, 0.08279555155990004, 0.08279555155990004, 0.7218087447909175, 0.7218087447909175, 0.7218087447909175, 0.5817152958214491, 0.5817152958214491, 0.5817152958214491, 0.5346599182173627, 0.5346599182173627, 0.5346599182173627, 0.08332084708293441, 0.08332084708293441, 0.08332084708293441, 0.09818319640677287, 0.09818319640677287, 0.09818319640677287, 0.04627954276951329, 0.04627954276951329, 0.04627954276951329, 0.1395144346209719, 0.1395144346209719, 0.1395144346209719, 0.1939320396500409, 0.1939320396500409, 0.1939320396500409, 0.16314250970452993, 0.16314250970452993, 0.16314250970452993, 0.31552415479709595, 0.31552415479709595, 0.31552415479709595, 0.1926486934451992, 0.1926486934451992, 0.1926486934451992, 0.3219636258796019, 0.3219636258796019, 0.3219636258796019, 0.2645471228592482, 0.2645471228592482, 0.2645471228592482, 0.18722067900195238, 0.18722067900195238, 0.18722067900195238, 0.1151690352168574, 0.1151690352168574, 0.1151690352168574, 0.1908090063911605, 0.1908090063911605, 0.1908090063911605, 0.1835402619990455, 0.1835402619990455, 0.1835402619990455, 0.18954077288289628, 0.18954077288289628, 0.18954077288289628, 0.20599268301303075, 0.20599268301303075, 0.20599268301303075, 0.20929892108136616, 0.20929892108136616, 0.20929892108136616, 0.19548689052505674, 0.19548689052505674, 0.19548689052505674, 0.7812829783522514, 0.7812829783522514, 0.7812829783522514, 0.15239071209406996, 0.15239071209406996, 0.15239071209406996, 0.1767420808913508, 0.1767420808913508, 0.1767420808913508, 0.2118724791884964, 0.2118724791884964, 0.2118724791884964, 0.21010164965515665, 0.21010164965515665, 0.21010164965515665, 0.1860744612992311, 0.1860744612992311, 0.1860744612992311, 0.1794444355486463, 0.1794444355486463, 0.1794444355486463, 0.18200923180998152, 0.18200923180998152, 0.18200923180998152, 0.19079232748695485, 0.19079232748695485, 0.19079232748695485, 0.08097511055638384, 0.08097511055638384, 0.08097511055638384, 0.09022965301771602, 0.09022965301771602, 0.09022965301771602, 0.07318941088213193, 0.07318941088213193, 0.07318941088213193]}, "mutation_prompt": null}
{"id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 7, "fitness": 0.3016289437031772, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.29.", "error": "", "parent_id": "ec0a644b-840c-4702-aeec-f5e09aa0e334", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "377f1973-4ad6-4b4f-951c-3af603decb1d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Refined HybridPSODE with dynamic component and trial vector improvement for superior convergence.", "configspace": "", "generation": 8, "fitness": 0.3016289437031772, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.29.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "65b2cf81-8c94-4a62-88c7-9358a906e5d7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "3d73a634-c9c3-4401-885a-18b63b03f13d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # initial crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            iter_ratio = evaluations / self.budget\n            dynamic_CR = 0.5 + 0.4 * (1 - iter_ratio)  # Dynamic crossover probability\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < dynamic_CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Modified HybridPSODE with adaptive crossover probability based on iteration count for enhanced exploration and exploitation balance.", "configspace": "", "generation": 10, "fitness": 0.28540771093699074, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.8090495996054339, 0.8090495996054339, 0.8090495996054339, 0.8660609529843274, 0.8660609529843274, 0.8660609529843274, 0.18295461335791552, 0.18295461335791552, 0.18295461335791552, 0.04230909460905807, 0.04230909460905807, 0.04230909460905807, 0.06265166820371848, 0.06265166820371848, 0.06265166820371848, 0.004628423789755143, 0.004628423789755143, 0.004628423789755143, 0.11672567193855865, 0.11672567193855865, 0.11672567193855865, 0.0990447992261686, 0.0990447992261686, 0.0990447992261686, 0.10306076555798849, 0.10306076555798849, 0.10306076555798849, 0.09446178879284739, 0.09446178879284739, 0.09446178879284739, 0.11715590436353196, 0.11715590436353196, 0.11715590436353196, 0.09708643200704259, 0.09708643200704259, 0.09708643200704259, 0.9829091655317781, 0.9829091655317781, 0.9829091655317781, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.4661974558718741, 0.4661974558718741, 0.4661974558718741, 0.14997178745314121, 0.14997178745314121, 0.14997178745314121, 0.3953615816650978, 0.3953615816650978, 0.3953615816650978, 0.21424568737226213, 0.21424568737226213, 0.21424568737226213, 0.16218785795431356, 0.16218785795431356, 0.16218785795431356, 0.1662309854659838, 0.1662309854659838, 0.1662309854659838, 0.7081132350102101, 0.7081132350102101, 0.7081132350102101, 0.1976382291219344, 0.1976382291219344, 0.1976382291219344, 0.5251376374224486, 0.5251376374224486, 0.5251376374224486, 0.19914676874024062, 0.19914676874024062, 0.19914676874024062, 0.1586438078533945, 0.1586438078533945, 0.1586438078533945, 0.12597143841463143, 0.12597143841463143, 0.12597143841463143, 0.07931088134606112, 0.07931088134606112, 0.07931088134606112, 0.05512725773708149, 0.05512725773708149, 0.05512725773708149, 0.6037617899980839, 0.6037617899980839, 0.6037617899980839, 0.0726701700386495, 0.0726701700386495, 0.0726701700386495, 0.150104468081378, 0.150104468081378, 0.150104468081378, 0.06300920923312647, 0.06300920923312647, 0.06300920923312647, 0.11773574814244603, 0.11773574814244603, 0.11773574814244603, 0.07304283814210089, 0.07304283814210089, 0.07304283814210089, 0.09539984119918465, 0.09539984119918465, 0.09539984119918465, 0.4177465478447546, 0.4177465478447546, 0.4177465478447546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050087723546773155, 0.050087723546773155, 0.050087723546773155, 0.6038536047884667, 0.6038536047884667, 0.6038536047884667, 0.7406503324209137, 0.7406503324209137, 0.7406503324209137, 0.6531710032462833, 0.6531710032462833, 0.6531710032462833, 0.07754799124454115, 0.07754799124454115, 0.07754799124454115, 0.11808112716106933, 0.11808112716106933, 0.11808112716106933, 0.09027487740099938, 0.09027487740099938, 0.09027487740099938, 0.10836192874074735, 0.10836192874074735, 0.10836192874074735, 0.4454129043941063, 0.4454129043941063, 0.4454129043941063, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.2356968600088296, 0.2356968600088296, 0.2356968600088296, 0.3201904201576008, 0.3201904201576008, 0.3201904201576008, 0.16305401959452104, 0.16305401959452104, 0.16305401959452104, 0.2850166136155128, 0.2850166136155128, 0.2850166136155128, 0.30457582507601044, 0.30457582507601044, 0.30457582507601044, 0.14251463166071354, 0.14251463166071354, 0.14251463166071354, 0.1875874079161024, 0.1875874079161024, 0.1875874079161024, 0.20166108617913403, 0.20166108617913403, 0.20166108617913403, 0.20765985580692348, 0.20765985580692348, 0.20765985580692348, 0.20081929564146517, 0.20081929564146517, 0.20081929564146517, 0.20762676352600906, 0.20762676352600906, 0.20762676352600906, 0.20416770248100358, 0.20416770248100358, 0.20416770248100358, 0.8867405771900174, 0.8867405771900174, 0.8867405771900174, 0.1675718679884045, 0.1675718679884045, 0.1675718679884045, 0.8099255348070844, 0.8099255348070844, 0.8099255348070844, 0.8867625164645337, 0.8867625164645337, 0.8867625164645337, 0.393263154323526, 0.393263154323526, 0.393263154323526, 0.1860135338687977, 0.1860135338687977, 0.1860135338687977, 0.20692463890344148, 0.20692463890344148, 0.20692463890344148, 0.18290050596712726, 0.18290050596712726, 0.18290050596712726, 0.1872513271522308, 0.1872513271522308, 0.1872513271522308, 0.08052521539761359, 0.08052521539761359, 0.08052521539761359, 0.08303211404658795, 0.08303211404658795, 0.08303211404658795, 0.06515034111035423, 0.06515034111035423, 0.06515034111035423]}, "mutation_prompt": null}
{"id": "cb4efe23-76ca-4648-a2c1-67f2ca76dc57", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "8761c55c-d0f1-4848-b568-5d1503d96656", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "e66b542d-9dae-475b-8d27-c3c87c9ba6df", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                CR_adaptive = 0.8 + 0.2 * np.random.random()  # Adaptive crossover probability\n                crossover_mask = np.random.rand(self.dim) < CR_adaptive  # Changed from self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive crossover probability for improved exploration-exploitation balance.", "configspace": "", "generation": 13, "fitness": 0.24587394797974405, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.27.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.9023826066990922, 0.9023826066990922, 0.9023826066990922, 0.8443982587585387, 0.8443982587585387, 0.8443982587585387, 0.18324098988255644, 0.18324098988255644, 0.18324098988255644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06728030076808988, 0.06728030076808988, 0.06728030076808988, 0.005076786301587033, 0.005076786301587033, 0.005076786301587033, 0.026947325044381243, 0.026947325044381243, 0.026947325044381243, 0.12277887461745873, 0.12277887461745873, 0.12277887461745873, 0.08786843485835616, 0.08786843485835616, 0.08786843485835616, 0.09402873543309831, 0.09402873543309831, 0.09402873543309831, 0.09501721563114429, 0.09501721563114429, 0.09501721563114429, 0.14123652979861323, 0.14123652979861323, 0.14123652979861323, 0.9935420775533509, 0.9935420775533509, 0.9935420775533509, 0.9911016987158167, 0.9911016987158167, 0.9911016987158167, 0.9591712221970237, 0.9591712221970237, 0.9591712221970237, 0.4388572888064396, 0.4388572888064396, 0.4388572888064396, 0.33488714432609723, 0.33488714432609723, 0.33488714432609723, 0.5283121364434771, 0.5283121364434771, 0.5283121364434771, 0.22651421916417236, 0.22651421916417236, 0.22651421916417236, 0.16235745112621802, 0.16235745112621802, 0.16235745112621802, 0.2324717686318838, 0.2324717686318838, 0.2324717686318838, 0.1334617551527726, 0.1334617551527726, 0.1334617551527726, 0.10885339295917806, 0.10885339295917806, 0.10885339295917806, 0.19804265513837682, 0.19804265513837682, 0.19804265513837682, 0.28828952504617134, 0.28828952504617134, 0.28828952504617134, 0.13444543889282234, 0.13444543889282234, 0.13444543889282234, 0.24025656039531418, 0.24025656039531418, 0.24025656039531418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07612540907298859, 0.07612540907298859, 0.07612540907298859, 0.00032675547222515977, 0.00032675547222515977, 0.00032675547222515977, 0.0529941676498662, 0.0529941676498662, 0.0529941676498662, 0.19632233014087608, 0.19632233014087608, 0.19632233014087608, 0.0832452605714229, 0.0832452605714229, 0.0832452605714229, 0.10527075031786914, 0.10527075031786914, 0.10527075031786914, 0.012009440135861582, 0.012009440135861582, 0.012009440135861582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05831195200040551, 0.05831195200040551, 0.05831195200040551, 0.7230158961607673, 0.7230158961607673, 0.7230158961607673, 0.8642549575288005, 0.8642549575288005, 0.8642549575288005, 0.1401401352625582, 0.1401401352625582, 0.1401401352625582, 0.05257313308239098, 0.05257313308239098, 0.05257313308239098, 0.10407242505557823, 0.10407242505557823, 0.10407242505557823, 0.06303813563375282, 0.06303813563375282, 0.06303813563375282, 0.21665816605563792, 0.21665816605563792, 0.21665816605563792, 0.21757997816625807, 0.21757997816625807, 0.21757997816625807, 0.1986003313749608, 0.1986003313749608, 0.1986003313749608, 0.2473341511207665, 0.2473341511207665, 0.2473341511207665, 0.21672048951962242, 0.21672048951962242, 0.21672048951962242, 0.45471867243806763, 0.45471867243806763, 0.45471867243806763, 0.22099600903874994, 0.22099600903874994, 0.22099600903874994, 0.19977562339411048, 0.19977562339411048, 0.19977562339411048, 0.11781560364605648, 0.11781560364605648, 0.11781560364605648, 0.2508177833701376, 0.2508177833701376, 0.2508177833701376, 0.20782287418439893, 0.20782287418439893, 0.20782287418439893, 0.19040891079036681, 0.19040891079036681, 0.19040891079036681, 0.21081264676500133, 0.21081264676500133, 0.21081264676500133, 0.25229074311461974, 0.25229074311461974, 0.25229074311461974, 0.1824353029286968, 0.1824353029286968, 0.1824353029286968, 0.9435731724973417, 0.9435731724973417, 0.9435731724973417, 0.11966583165665146, 0.11966583165665146, 0.11966583165665146, 0.9367045392141001, 0.9367045392141001, 0.9367045392141001, 0.16575618326941, 0.16575618326941, 0.16575618326941, 0.21074637356542703, 0.21074637356542703, 0.21074637356542703, 0.10804198747791038, 0.10804198747791038, 0.10804198747791038, 0.18010002910693235, 0.18010002910693235, 0.18010002910693235, 0.16678911396023754, 0.16678911396023754, 0.16678911396023754, 0.17651038464470858, 0.17651038464470858, 0.17651038464470858, 0.08714850003503594, 0.08714850003503594, 0.08714850003503594, 0.08050546872167685, 0.08050546872167685, 0.08050546872167685, 0.06957424405729229, 0.06957424405729229, 0.06957424405729229]}, "mutation_prompt": null}
{"id": "2c465cd3-c594-44c8-a137-f37130470d0c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "98b04ef4-080f-413e-bf31-e04e32059968", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "dbb7a448-3a34-489e-a63c-1224952d7078", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "12415e18-c70a-418f-8cb4-6adef0c41449", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "48d43829-3fbf-488f-a254-0932ce66d3bc", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "9301ae3a-7acb-44b6-aa89-a5a5b73ec69f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "6f603720-bb8b-453a-8532-bc7cd095b1c6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "0065f280-3736-4e43-9e43-0859de9d1e43", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "47060813-0eb5-4478-95ac-f82ff3d1889a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "195149a2-9005-41bf-b382-1f365fe7af72", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.tolerance = 1e-5  # Early stopping tolerance\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        previous_best_score = global_best_score\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.3 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.1 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            current_best_score = np.min(scores)\n            if current_best_score < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = current_best_score\n\n            # Early stopping check\n            if abs(previous_best_score - global_best_score) < self.tolerance:\n                break\n            previous_best_score = global_best_score\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with hyperparameter adaptation and early stopping for improved convergence efficiency.", "configspace": "", "generation": 23, "fitness": 0.07627327120042225, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.13.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.1963105793195873, 0.1963105793195873, 0.1963105793195873, 0.22687629589525982, 0.22687629589525982, 0.22687629589525982, 0.17177776649988596, 0.17177776649988596, 0.17177776649988596, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.021687454489075053, 0.021687454489075053, 0.021687454489075053, 0.028079573843845185, 0.028079573843845185, 0.028079573843845185, 0.021387908584041937, 0.021387908584041937, 0.021387908584041937, 0.04866812549145416, 0.04866812549145416, 0.04866812549145416, 0.013530018764405627, 0.013530018764405627, 0.013530018764405627, 0.0, 0.0, 0.0, 0.02694027191897508, 0.02694027191897508, 0.02694027191897508, 0.9879505709838848, 0.9879505709838848, 0.9879505709838848, 0.0375633117043539, 0.0375633117043539, 0.0375633117043539, 0.057796422460515307, 0.057796422460515307, 0.057796422460515307, 0.05378735129935963, 0.05378735129935963, 0.05378735129935963, 0.05006374263718627, 0.05006374263718627, 0.05006374263718627, 0.08157229067358762, 0.08157229067358762, 0.08157229067358762, 0.07589311421027722, 0.07589311421027722, 0.07589311421027722, 0.1254649249576052, 0.1254649249576052, 0.1254649249576052, 0.0, 0.0, 0.0, 0.02945841788297654, 0.02945841788297654, 0.02945841788297654, 0.0, 0.0, 0.0, 0.004872624291909267, 0.004872624291909267, 0.004872624291909267, 0.0, 0.0, 0.0, 0.013966632710688431, 0.013966632710688431, 0.013966632710688431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0028626722050405506, 0.0028626722050405506, 0.0028626722050405506, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003602619634036963, 0.003602619634036963, 0.003602619634036963, 0.03248630688037868, 0.03248630688037868, 0.03248630688037868, 0.23700179423586787, 0.23700179423586787, 0.23700179423586787, 0.1392005657448071, 0.1392005657448071, 0.1392005657448071, 0.23097117690232782, 0.23097117690232782, 0.23097117690232782, 0.04203449190686659, 0.04203449190686659, 0.04203449190686659, 0.034641268454253304, 0.034641268454253304, 0.034641268454253304, 0.049397144984712704, 0.049397144984712704, 0.049397144984712704, 0.07067769941181179, 0.07067769941181179, 0.07067769941181179, 0.043815204770045635, 0.043815204770045635, 0.043815204770045635, 0.0601514202292498, 0.0601514202292498, 0.0601514202292498, 0.1365668559045482, 0.1365668559045482, 0.1365668559045482, 0.17182955250385223, 0.17182955250385223, 0.17182955250385223, 0.11414182470560175, 0.11414182470560175, 0.11414182470560175, 0.05249030663972021, 0.05249030663972021, 0.05249030663972021, 0.12456849037013584, 0.12456849037013584, 0.12456849037013584, 0.07614870944240737, 0.07614870944240737, 0.07614870944240737, 0.14018227803022054, 0.14018227803022054, 0.14018227803022054, 0.1207826409801892, 0.1207826409801892, 0.1207826409801892, 0.1570818381531648, 0.1570818381531648, 0.1570818381531648, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13727273594195755, 0.13727273594195755, 0.13727273594195755, 0.13028227031231943, 0.13028227031231943, 0.13028227031231943, 0.08424947128010296, 0.08424947128010296, 0.08424947128010296, 0.07755650597134467, 0.07755650597134467, 0.07755650597134467, 0.0265219807714826, 0.0265219807714826, 0.0265219807714826, 0.07645973960558916, 0.07645973960558916, 0.07645973960558916, 0.0884117226644332, 0.0884117226644332, 0.0884117226644332, 0.11297944040753627, 0.11297944040753627, 0.11297944040753627, 0.16248367995914892, 0.16248367995914892, 0.16248367995914892, 0.16747415752131534, 0.16747415752131534, 0.16747415752131534, 0.045908610128065575, 0.045908610128065575, 0.045908610128065575, 0.0267802774676138, 0.0267802774676138, 0.0267802774676138, 0.04101267369137973, 0.04101267369137973, 0.04101267369137973]}, "mutation_prompt": null}
{"id": "4e27ebac-ccd9-49c3-bc1f-c580b0b67fad", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            progress_ratio = evaluations / self.budget  # New adaptive component\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c2 = (1.2 + 0.6 * np.random.random()) * (1 - progress_ratio)  # Changed line\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved convergence through adaptive component weighting based on function evaluations.", "configspace": "", "generation": 24, "fitness": 0.28975849366850936, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.29.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.8643453947979258, 0.8643453947979258, 0.8643453947979258, 0.8933719799591229, 0.8933719799591229, 0.8933719799591229, 0.8710158267815634, 0.8710158267815634, 0.8710158267815634, 0.04520785478752509, 0.04520785478752509, 0.04520785478752509, 0.7467860021608879, 0.7467860021608879, 0.7467860021608879, 0.004569854464392287, 0.004569854464392287, 0.004569854464392287, 0.03583260016598744, 0.03583260016598744, 0.03583260016598744, 0.12217646082974243, 0.12217646082974243, 0.12217646082974243, 0.12585197694324857, 0.12585197694324857, 0.12585197694324857, 0.09835520618458027, 0.09835520618458027, 0.09835520618458027, 0.0791229679669827, 0.0791229679669827, 0.0791229679669827, 0.10173296599502624, 0.10173296599502624, 0.10173296599502624, 0.9828800324462214, 0.9828800324462214, 0.9828800324462214, 0.9861698514390125, 0.9861698514390125, 0.9861698514390125, 0.9888630501784137, 0.9888630501784137, 0.9888630501784137, 0.7008346994663779, 0.7008346994663779, 0.7008346994663779, 0.1515983967393022, 0.1515983967393022, 0.1515983967393022, 0.6577161540931532, 0.6577161540931532, 0.6577161540931532, 0.8296630217394433, 0.8296630217394433, 0.8296630217394433, 0.1619225505323697, 0.1619225505323697, 0.1619225505323697, 0.22949237697803848, 0.22949237697803848, 0.22949237697803848, 0.19068004165921115, 0.19068004165921115, 0.19068004165921115, 0.15110536144683195, 0.15110536144683195, 0.15110536144683195, 0.21243220936942164, 0.21243220936942164, 0.21243220936942164, 0.14915055254506482, 0.14915055254506482, 0.14915055254506482, 0.10314618089115735, 0.10314618089115735, 0.10314618089115735, 0.12583835907692498, 0.12583835907692498, 0.12583835907692498, 0.0019377337241625048, 0.0019377337241625048, 0.0019377337241625048, 0.041825296648844934, 0.041825296648844934, 0.041825296648844934, 0.22292314279865877, 0.22292314279865877, 0.22292314279865877, 0.06417686707347348, 0.06417686707347348, 0.06417686707347348, 0.02274968630009566, 0.02274968630009566, 0.02274968630009566, 0.10172431004498339, 0.10172431004498339, 0.10172431004498339, 0.14176751125513287, 0.14176751125513287, 0.14176751125513287, 0.07465563472169434, 0.07465563472169434, 0.07465563472169434, 0.09609492719468471, 0.09609492719468471, 0.09609492719468471, 0.18542617635279712, 0.18542617635279712, 0.18542617635279712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12987454834083056, 0.12987454834083056, 0.12987454834083056, 0.5604880983565806, 0.5604880983565806, 0.5604880983565806, 0.46748634175412795, 0.46748634175412795, 0.46748634175412795, 0.5656669006236508, 0.5656669006236508, 0.5656669006236508, 0.0870690592549398, 0.0870690592549398, 0.0870690592549398, 0.09897700934110742, 0.09897700934110742, 0.09897700934110742, 0.09318387961806329, 0.09318387961806329, 0.09318387961806329, 0.16501214207251746, 0.16501214207251746, 0.16501214207251746, 0.19658496684008753, 0.19658496684008753, 0.19658496684008753, 0.1602969399060401, 0.1602969399060401, 0.1602969399060401, 0.4853779537852554, 0.4853779537852554, 0.4853779537852554, 0.3569077286233995, 0.3569077286233995, 0.3569077286233995, 0.1648071696305935, 0.1648071696305935, 0.1648071696305935, 0.3577328031820355, 0.3577328031820355, 0.3577328031820355, 0.22556003002427838, 0.22556003002427838, 0.22556003002427838, 0.13388642487862612, 0.13388642487862612, 0.13388642487862612, 0.1929518083880788, 0.1929518083880788, 0.1929518083880788, 0.18059147966882483, 0.18059147966882483, 0.18059147966882483, 0.1939034609773057, 0.1939034609773057, 0.1939034609773057, 0.19238157217863316, 0.19238157217863316, 0.19238157217863316, 0.21073825791158318, 0.21073825791158318, 0.21073825791158318, 0.2044940930137502, 0.2044940930137502, 0.2044940930137502, 0.2673580020127947, 0.2673580020127947, 0.2673580020127947, 0.16649529260234797, 0.16649529260234797, 0.16649529260234797, 0.8701268104142706, 0.8701268104142706, 0.8701268104142706, 0.8279631784023146, 0.8279631784023146, 0.8279631784023146, 0.81875626610868, 0.81875626610868, 0.81875626610868, 0.20142408651576593, 0.20142408651576593, 0.20142408651576593, 0.17336640258779168, 0.17336640258779168, 0.17336640258779168, 0.14987387354084747, 0.14987387354084747, 0.14987387354084747, 0.1809781622924338, 0.1809781622924338, 0.1809781622924338, 0.07665510094702588, 0.07665510094702588, 0.07665510094702588, 0.07340874074196613, 0.07340874074196613, 0.07340874074196613, 0.06898974384366996, 0.06898974384366996, 0.06898974384366996]}, "mutation_prompt": null}
{"id": "71279a36-911d-4445-8af3-0e00afbf12cf", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        diversity_threshold = 0.1  # New threshold for controlling diversity\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # Calculate Diversity\n            diversity = np.mean(np.std(positions, axis=0))\n            if diversity < diversity_threshold:\n                self.w *= 1.1  # Slightly increase inertia weight to boost exploration\n            \n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive particle diversity control for improved exploration and exploitation balance.", "configspace": "", "generation": 25, "fitness": 0.3016289437031772, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.29.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "7ba9c1a1-8b24-4432-b345-d0aa64913822", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "93ba144b-34b2-482b-96be-c300f16e0742", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "81c93e14-90ed-4485-a5d2-3d18be2791b8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            self.w = 0.3 + 0.7 * (1 - evaluations / self.budget)  # Self-adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with self-adaptive parameters for improved exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": 0.18233145599023481, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.23.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.5947074382607829, 0.5947074382607829, 0.5947074382607829, 0.6027244097971274, 0.6027244097971274, 0.6027244097971274, 0.5969001508906283, 0.5969001508906283, 0.5969001508906283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027371837490469453, 0.027371837490469453, 0.027371837490469453, 0.00344068287014343, 0.00344068287014343, 0.00344068287014343, 0.08499835514354637, 0.08499835514354637, 0.08499835514354637, 0.05546617071910298, 0.05546617071910298, 0.05546617071910298, 0.07529474182530305, 0.07529474182530305, 0.07529474182530305, 0.06963431466012493, 0.06963431466012493, 0.06963431466012493, 0.08375374253807188, 0.08375374253807188, 0.08375374253807188, 0.05418512605606196, 0.05418512605606196, 0.05418512605606196, 0.9878139027267855, 0.9878139027267855, 0.9878139027267855, 0.9862978852007663, 0.9862978852007663, 0.9862978852007663, 0.9931239775618275, 0.9931239775618275, 0.9931239775618275, 0.250647569103398, 0.250647569103398, 0.250647569103398, 0.1259025589180235, 0.1259025589180235, 0.1259025589180235, 0.05111235967943939, 0.05111235967943939, 0.05111235967943939, 0.13064219363331508, 0.13064219363331508, 0.13064219363331508, 0.15611596036470587, 0.15611596036470587, 0.15611596036470587, 0.11936501525729326, 0.11936501525729326, 0.11936501525729326, 0.18837297947785692, 0.18837297947785692, 0.18837297947785692, 0.02380330490275051, 0.02380330490275051, 0.02380330490275051, 0.1397620426177425, 0.1397620426177425, 0.1397620426177425, 0.13414317006774523, 0.13414317006774523, 0.13414317006774523, 0.11933852923181998, 0.11933852923181998, 0.11933852923181998, 0.07730061508038433, 0.07730061508038433, 0.07730061508038433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060230160976828984, 0.060230160976828984, 0.060230160976828984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02240542919747368, 0.02240542919747368, 0.02240542919747368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022860126427584282, 0.022860126427584282, 0.022860126427584282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20433294018924653, 0.20433294018924653, 0.20433294018924653, 0.48103910764994195, 0.48103910764994195, 0.48103910764994195, 0.5058945977621185, 0.5058945977621185, 0.5058945977621185, 0.4259037781777403, 0.4259037781777403, 0.4259037781777403, 0.07428432049024303, 0.07428432049024303, 0.07428432049024303, 0.09387002372373243, 0.09387002372373243, 0.09387002372373243, 0.08293728760894536, 0.08293728760894536, 0.08293728760894536, 0.12775726649945152, 0.12775726649945152, 0.12775726649945152, 0.14089463684047565, 0.14089463684047565, 0.14089463684047565, 0.10604509158069853, 0.10604509158069853, 0.10604509158069853, 0.20359117317877284, 0.20359117317877284, 0.20359117317877284, 0.18113328636360482, 0.18113328636360482, 0.18113328636360482, 0.14517764775594155, 0.14517764775594155, 0.14517764775594155, 0.12277674579843934, 0.12277674579843934, 0.12277674579843934, 0.15237812677569362, 0.15237812677569362, 0.15237812677569362, 0.13396500085042062, 0.13396500085042062, 0.13396500085042062, 0.15448186770611738, 0.15448186770611738, 0.15448186770611738, 0.17220434408646124, 0.17220434408646124, 0.17220434408646124, 0.1795397142118691, 0.1795397142118691, 0.1795397142118691, 0.1339486793356235, 0.1339486793356235, 0.1339486793356235, 0.1866413223311041, 0.1866413223311041, 0.1866413223311041, 0.1646417671639796, 0.1646417671639796, 0.1646417671639796, 0.6831022982380401, 0.6831022982380401, 0.6831022982380401, 0.1091918658990495, 0.1091918658990495, 0.1091918658990495, 0.12002979085607879, 0.12002979085607879, 0.12002979085607879, 0.15655020980041967, 0.15655020980041967, 0.15655020980041967, 0.13624551930718332, 0.13624551930718332, 0.13624551930718332, 0.19436773925295148, 0.19436773925295148, 0.19436773925295148, 0.2038170672255888, 0.2038170672255888, 0.2038170672255888, 0.14986213269821003, 0.14986213269821003, 0.14986213269821003, 0.17307742750059663, 0.17307742750059663, 0.17307742750059663, 0.06077684070707523, 0.06077684070707523, 0.06077684070707523, 0.061118863932765444, 0.061118863932765444, 0.061118863932765444, 0.06767159912122311, 0.06767159912122311, 0.06767159912122311]}, "mutation_prompt": null}
{"id": "88b0cba4-9764-4d8a-8e2f-26d7f0312aeb", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_vector += np.random.normal(0, 0.01, self.dim)  # Stochastic perturbation\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive component tuning and stochastic perturbations for better exploration and exploitation balance.", "configspace": "", "generation": 29, "fitness": 0.27217703792397374, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.6976045948430788, 0.6976045948430788, 0.6976045948430788, 0.6719176526442832, 0.6719176526442832, 0.6719176526442832, 0.8195375880566093, 0.8195375880566093, 0.8195375880566093, 0.03909606605282279, 0.03909606605282279, 0.03909606605282279, 0.06169164808885763, 0.06169164808885763, 0.06169164808885763, 0.033004712001534986, 0.033004712001534986, 0.033004712001534986, 0.12901570171822863, 0.12901570171822863, 0.12901570171822863, 0.10973009619128282, 0.10973009619128282, 0.10973009619128282, 0.1139955484819517, 0.1139955484819517, 0.1139955484819517, 0.1487761696736607, 0.1487761696736607, 0.1487761696736607, 0.07526065714455876, 0.07526065714455876, 0.07526065714455876, 0.09075356760481024, 0.09075356760481024, 0.09075356760481024, 0.9932737487085329, 0.9932737487085329, 0.9932737487085329, 0.9906658889291331, 0.9906658889291331, 0.9906658889291331, 0.9879865913139558, 0.9879865913139558, 0.9879865913139558, 0.5201067127033228, 0.5201067127033228, 0.5201067127033228, 0.5413806907285481, 0.5413806907285481, 0.5413806907285481, 0.43576059325272665, 0.43576059325272665, 0.43576059325272665, 0.17210461882173678, 0.17210461882173678, 0.17210461882173678, 0.16131823406729384, 0.16131823406729384, 0.16131823406729384, 0.15174431132012267, 0.15174431132012267, 0.15174431132012267, 0.8172070621272184, 0.8172070621272184, 0.8172070621272184, 0.13533841787535805, 0.13533841787535805, 0.13533841787535805, 0.2971780868790652, 0.2971780868790652, 0.2971780868790652, 0.2074323089028921, 0.2074323089028921, 0.2074323089028921, 0.2550253606088595, 0.2550253606088595, 0.2550253606088595, 0.2695726977585736, 0.2695726977585736, 0.2695726977585736, 0.21608990586291754, 0.21608990586291754, 0.21608990586291754, 0.04347661556745297, 0.04347661556745297, 0.04347661556745297, 0.07658639785306987, 0.07658639785306987, 0.07658639785306987, 0.3753767527638633, 0.3753767527638633, 0.3753767527638633, 0.017343936717848396, 0.017343936717848396, 0.017343936717848396, 0.06980773176451949, 0.06980773176451949, 0.06980773176451949, 0.38550354084067695, 0.38550354084067695, 0.38550354084067695, 0.05970053184243207, 0.05970053184243207, 0.05970053184243207, 0.03395982173285994, 0.03395982173285994, 0.03395982173285994, 0.275661304344869, 0.275661304344869, 0.275661304344869, 0.10411273248919495, 0.10411273248919495, 0.10411273248919495, 0.16855665602700243, 0.16855665602700243, 0.16855665602700243, 0.5416239404588633, 0.5416239404588633, 0.5416239404588633, 0.6070802876933581, 0.6070802876933581, 0.6070802876933581, 0.7128361343649028, 0.7128361343649028, 0.7128361343649028, 0.08359239510770589, 0.08359239510770589, 0.08359239510770589, 0.14915629524070917, 0.14915629524070917, 0.14915629524070917, 0.13198185995101663, 0.13198185995101663, 0.13198185995101663, 0.16797923493138767, 0.16797923493138767, 0.16797923493138767, 0.21415906550873143, 0.21415906550873143, 0.21415906550873143, 0.17408807656472747, 0.17408807656472747, 0.17408807656472747, 0.39967962372550836, 0.39967962372550836, 0.39967962372550836, 0.20271446596547826, 0.20271446596547826, 0.20271446596547826, 0.20982781792088212, 0.20982781792088212, 0.20982781792088212, 0.09427038632738949, 0.09427038632738949, 0.09427038632738949, 0.19441311807126016, 0.19441311807126016, 0.19441311807126016, 0.12913286589834494, 0.12913286589834494, 0.12913286589834494, 0.1908802769180592, 0.1908802769180592, 0.1908802769180592, 0.1866086125711468, 0.1866086125711468, 0.1866086125711468, 0.17273495986987764, 0.17273495986987764, 0.17273495986987764, 0.21320451040602473, 0.21320451040602473, 0.21320451040602473, 0.24611679372524498, 0.24611679372524498, 0.24611679372524498, 0.1896071400429694, 0.1896071400429694, 0.1896071400429694, 0.9311277090598913, 0.9311277090598913, 0.9311277090598913, 0.158440980495551, 0.158440980495551, 0.158440980495551, 0.13872890645555802, 0.13872890645555802, 0.13872890645555802, 0.16927317385109886, 0.16927317385109886, 0.16927317385109886, 0.20913592854403273, 0.20913592854403273, 0.20913592854403273, 0.21123918800654784, 0.21123918800654784, 0.21123918800654784, 0.17913488220502571, 0.17913488220502571, 0.17913488220502571, 0.18193149328907443, 0.18193149328907443, 0.18193149328907443, 0.18884709269711353, 0.18884709269711353, 0.18884709269711353, 0.08279705851636043, 0.08279705851636043, 0.08279705851636043, 0.09836414569583052, 0.09836414569583052, 0.09836414569583052, 0.08338305614071129, 0.08338305614071129, 0.08338305614071129]}, "mutation_prompt": null}
{"id": "9523db92-5c9f-48ca-9752-ad690a1305ad", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                self.CR = 0.8 + 0.2 * np.random.random()  # Adaptive crossover probability\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive crossover probability for better exploration-exploitation balance.", "configspace": "", "generation": 30, "fitness": 0.24587394797974405, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.27.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.9023826066990922, 0.9023826066990922, 0.9023826066990922, 0.8443982587585387, 0.8443982587585387, 0.8443982587585387, 0.18324098988255644, 0.18324098988255644, 0.18324098988255644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06728030076808988, 0.06728030076808988, 0.06728030076808988, 0.005076786301587033, 0.005076786301587033, 0.005076786301587033, 0.026947325044381243, 0.026947325044381243, 0.026947325044381243, 0.12277887461745873, 0.12277887461745873, 0.12277887461745873, 0.08786843485835616, 0.08786843485835616, 0.08786843485835616, 0.09402873543309831, 0.09402873543309831, 0.09402873543309831, 0.09501721563114429, 0.09501721563114429, 0.09501721563114429, 0.14123652979861323, 0.14123652979861323, 0.14123652979861323, 0.9935420775533509, 0.9935420775533509, 0.9935420775533509, 0.9911016987158167, 0.9911016987158167, 0.9911016987158167, 0.9591712221970237, 0.9591712221970237, 0.9591712221970237, 0.4388572888064396, 0.4388572888064396, 0.4388572888064396, 0.33488714432609723, 0.33488714432609723, 0.33488714432609723, 0.5283121364434771, 0.5283121364434771, 0.5283121364434771, 0.22651421916417236, 0.22651421916417236, 0.22651421916417236, 0.16235745112621802, 0.16235745112621802, 0.16235745112621802, 0.2324717686318838, 0.2324717686318838, 0.2324717686318838, 0.1334617551527726, 0.1334617551527726, 0.1334617551527726, 0.10885339295917806, 0.10885339295917806, 0.10885339295917806, 0.19804265513837682, 0.19804265513837682, 0.19804265513837682, 0.28828952504617134, 0.28828952504617134, 0.28828952504617134, 0.13444543889282234, 0.13444543889282234, 0.13444543889282234, 0.24025656039531418, 0.24025656039531418, 0.24025656039531418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07612540907298859, 0.07612540907298859, 0.07612540907298859, 0.00032675547222515977, 0.00032675547222515977, 0.00032675547222515977, 0.0529941676498662, 0.0529941676498662, 0.0529941676498662, 0.19632233014087608, 0.19632233014087608, 0.19632233014087608, 0.0832452605714229, 0.0832452605714229, 0.0832452605714229, 0.10527075031786914, 0.10527075031786914, 0.10527075031786914, 0.012009440135861582, 0.012009440135861582, 0.012009440135861582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05831195200040551, 0.05831195200040551, 0.05831195200040551, 0.7230158961607673, 0.7230158961607673, 0.7230158961607673, 0.8642549575288005, 0.8642549575288005, 0.8642549575288005, 0.1401401352625582, 0.1401401352625582, 0.1401401352625582, 0.05257313308239098, 0.05257313308239098, 0.05257313308239098, 0.10407242505557823, 0.10407242505557823, 0.10407242505557823, 0.06303813563375282, 0.06303813563375282, 0.06303813563375282, 0.21665816605563792, 0.21665816605563792, 0.21665816605563792, 0.21757997816625807, 0.21757997816625807, 0.21757997816625807, 0.1986003313749608, 0.1986003313749608, 0.1986003313749608, 0.2473341511207665, 0.2473341511207665, 0.2473341511207665, 0.21672048951962242, 0.21672048951962242, 0.21672048951962242, 0.45471867243806763, 0.45471867243806763, 0.45471867243806763, 0.22099600903874994, 0.22099600903874994, 0.22099600903874994, 0.19977562339411048, 0.19977562339411048, 0.19977562339411048, 0.11781560364605648, 0.11781560364605648, 0.11781560364605648, 0.2508177833701376, 0.2508177833701376, 0.2508177833701376, 0.20782287418439893, 0.20782287418439893, 0.20782287418439893, 0.19040891079036681, 0.19040891079036681, 0.19040891079036681, 0.21081264676500133, 0.21081264676500133, 0.21081264676500133, 0.25229074311461974, 0.25229074311461974, 0.25229074311461974, 0.1824353029286968, 0.1824353029286968, 0.1824353029286968, 0.9435731724973417, 0.9435731724973417, 0.9435731724973417, 0.11966583165665146, 0.11966583165665146, 0.11966583165665146, 0.9367045392141001, 0.9367045392141001, 0.9367045392141001, 0.16575618326941, 0.16575618326941, 0.16575618326941, 0.21074637356542703, 0.21074637356542703, 0.21074637356542703, 0.10804198747791038, 0.10804198747791038, 0.10804198747791038, 0.18010002910693235, 0.18010002910693235, 0.18010002910693235, 0.16678911396023754, 0.16678911396023754, 0.16678911396023754, 0.17651038464470858, 0.17651038464470858, 0.17651038464470858, 0.08714850003503594, 0.08714850003503594, 0.08714850003503594, 0.08050546872167685, 0.08050546872167685, 0.08050546872167685, 0.06957424405729229, 0.06957424405729229, 0.06957424405729229]}, "mutation_prompt": null}
{"id": "74497bb3-2c03-45cd-9a43-d2b7067f6bbe", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "HybridPSODE+ adds adaptive learning factors to enhance convergence stability and performance.", "configspace": "", "generation": 31, "fitness": 0.3016289437031772, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.29.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "8168e756-3505-4a3e-957b-1fc098e2b961", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "2b0f5942-0cf0-463c-a442-767d76dd1f33", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "572fd068-9683-4295-8eb8-38b70137564b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "9467afd4-7abd-4b2c-b001-3cd5984f552d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "39098dfd-1ab9-405e-821b-5e7ddb6256a6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()  # Dynamic cognitive component\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Incorporate dynamic cognitive component adjustment in HybridPSODE to enhance exploration and convergence.", "configspace": "", "generation": 36, "fitness": 0.27457774139536184, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.27.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.8722068232500034, 0.8722068232500034, 0.8722068232500034, 0.8661332046945878, 0.8661332046945878, 0.8661332046945878, 0.8466694252002757, 0.8466694252002757, 0.8466694252002757, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00475051706497065, 0.00475051706497065, 0.00475051706497065, 0.15763166127794703, 0.15763166127794703, 0.15763166127794703, 0.10159090301406337, 0.10159090301406337, 0.10159090301406337, 0.10235535344943181, 0.10235535344943181, 0.10235535344943181, 0.09841697339771838, 0.09841697339771838, 0.09841697339771838, 0.07587948707116177, 0.07587948707116177, 0.07587948707116177, 0.15460830814866589, 0.15460830814866589, 0.15460830814866589, 0.9905284012302853, 0.9905284012302853, 0.9905284012302853, 0.9910510733111244, 0.9910510733111244, 0.9910510733111244, 0.9892551812304431, 0.9892551812304431, 0.9892551812304431, 0.4891427508261287, 0.4891427508261287, 0.4891427508261287, 0.38751281005239824, 0.38751281005239824, 0.38751281005239824, 0.3865687726980497, 0.3865687726980497, 0.3865687726980497, 0.7840662925389588, 0.7840662925389588, 0.7840662925389588, 0.1613723978620677, 0.1613723978620677, 0.1613723978620677, 0.43595991225629427, 0.43595991225629427, 0.43595991225629427, 0.19274854052594093, 0.19274854052594093, 0.19274854052594093, 0.13094292857611978, 0.13094292857611978, 0.13094292857611978, 0.13455414311347758, 0.13455414311347758, 0.13455414311347758, 0.13286550842509892, 0.13286550842509892, 0.13286550842509892, 0.18250074829739316, 0.18250074829739316, 0.18250074829739316, 0.34179476335789083, 0.34179476335789083, 0.34179476335789083, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05839775374884426, 0.05839775374884426, 0.05839775374884426, 0.0030512232308330667, 0.0030512232308330667, 0.0030512232308330667, 0.18461636598388453, 0.18461636598388453, 0.18461636598388453, 0.06999995911242818, 0.06999995911242818, 0.06999995911242818, 0.061441120918190206, 0.061441120918190206, 0.061441120918190206, 0.05064564736681654, 0.05064564736681654, 0.05064564736681654, 0.5519167702110557, 0.5519167702110557, 0.5519167702110557, 0.2118999196305681, 0.2118999196305681, 0.2118999196305681, 0.02884476746232867, 0.02884476746232867, 0.02884476746232867, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08174833056875885, 0.08174833056875885, 0.08174833056875885, 0.8287807305463284, 0.8287807305463284, 0.8287807305463284, 0.632604046526647, 0.632604046526647, 0.632604046526647, 0.6299238956945572, 0.6299238956945572, 0.6299238956945572, 0.0573419692385807, 0.0573419692385807, 0.0573419692385807, 0.12251444859638827, 0.12251444859638827, 0.12251444859638827, 0.15482444697902187, 0.15482444697902187, 0.15482444697902187, 0.38070708738246617, 0.38070708738246617, 0.38070708738246617, 0.19420042944576998, 0.19420042944576998, 0.19420042944576998, 0.15806204681543534, 0.15806204681543534, 0.15806204681543534, 0.27258911246325424, 0.27258911246325424, 0.27258911246325424, 0.49217313262273366, 0.49217313262273366, 0.49217313262273366, 0.1754401210137284, 0.1754401210137284, 0.1754401210137284, 0.3080888783330811, 0.3080888783330811, 0.3080888783330811, 0.23828804833408623, 0.23828804833408623, 0.23828804833408623, 0.1355578238611168, 0.1355578238611168, 0.1355578238611168, 0.20391013104873223, 0.20391013104873223, 0.20391013104873223, 0.19925196001667134, 0.19925196001667134, 0.19925196001667134, 0.20135600232323558, 0.20135600232323558, 0.20135600232323558, 0.1805786324237728, 0.1805786324237728, 0.1805786324237728, 0.21462468398493117, 0.21462468398493117, 0.21462468398493117, 0.16736130273909078, 0.16736130273909078, 0.16736130273909078, 0.897701937476446, 0.897701937476446, 0.897701937476446, 0.16322535128961158, 0.16322535128961158, 0.16322535128961158, 0.16939841828135538, 0.16939841828135538, 0.16939841828135538, 0.1685034063963673, 0.1685034063963673, 0.1685034063963673, 0.20778669648634673, 0.20778669648634673, 0.20778669648634673, 0.09375104772336729, 0.09375104772336729, 0.09375104772336729, 0.18763413956986164, 0.18763413956986164, 0.18763413956986164, 0.14994820564600864, 0.14994820564600864, 0.14994820564600864, 0.20258777485996782, 0.20258777485996782, 0.20258777485996782, 0.09548855653382704, 0.09548855653382704, 0.09548855653382704, 0.1041953079334087, 0.1041953079334087, 0.1041953079334087, 0.06712886877565216, 0.06712886877565216, 0.06712886877565216]}, "mutation_prompt": null}
{"id": "9c0699ee-6319-40d3-90f5-e4db7f358bd4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            self.c1 = 1.2 + 0.3 * np.random.random()  # Randomized cognitive component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities + np.random.normal(0, 0.1, positions.shape)  # Exploration noise\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive learning factor and randomization for position exploration.", "configspace": "", "generation": 37, "fitness": 0.17740336138086746, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.38889059941350934, 0.38889059941350934, 0.38889059941350934, 0.38821374344876436, 0.38821374344876436, 0.38821374344876436, 0.41599563508227466, 0.41599563508227466, 0.41599563508227466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004407615085234573, 0.0004407615085234573, 0.0004407615085234573, 0.03730243400730038, 0.03730243400730038, 0.03730243400730038, 0.09004681870172093, 0.09004681870172093, 0.09004681870172093, 0.09359271929625024, 0.09359271929625024, 0.09359271929625024, 0.0018014220025576178, 0.0018014220025576178, 0.0018014220025576178, 0.07456074146624048, 0.07456074146624048, 0.07456074146624048, 0.082978510958307, 0.082978510958307, 0.082978510958307, 0.09956562410999792, 0.09956562410999792, 0.09956562410999792, 0.9936216554155922, 0.9936216554155922, 0.9936216554155922, 0.988799177622007, 0.988799177622007, 0.988799177622007, 0.21662721022515274, 0.21662721022515274, 0.21662721022515274, 0.22920618095131073, 0.22920618095131073, 0.22920618095131073, 0.22774679256871233, 0.22774679256871233, 0.22774679256871233, 0.3225500952288026, 0.3225500952288026, 0.3225500952288026, 0.16213171389770165, 0.16213171389770165, 0.16213171389770165, 0.2172323116057715, 0.2172323116057715, 0.2172323116057715, 0.056625591108963036, 0.056625591108963036, 0.056625591108963036, 0.13249697146541473, 0.13249697146541473, 0.13249697146541473, 0.169647453312743, 0.169647453312743, 0.169647453312743, 0.2116916097894096, 0.2116916097894096, 0.2116916097894096, 0.1467262035138328, 0.1467262035138328, 0.1467262035138328, 0.1447529453497316, 0.1447529453497316, 0.1447529453497316, 0.023125456320348903, 0.023125456320348903, 0.023125456320348903, 0.022127611964158467, 0.022127611964158467, 0.022127611964158467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07732537148497631, 0.07732537148497631, 0.07732537148497631, 0.09019067721817864, 0.09019067721817864, 0.09019067721817864, 0.12902225516280508, 0.12902225516280508, 0.12902225516280508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0307865613897913, 0.0307865613897913, 0.0307865613897913, 0.06951932852205334, 0.06951932852205334, 0.06951932852205334, 0.06382700690258347, 0.06382700690258347, 0.06382700690258347, 0.3869387357394417, 0.3869387357394417, 0.3869387357394417, 0.403677351229654, 0.403677351229654, 0.403677351229654, 0.3882894515288694, 0.3882894515288694, 0.3882894515288694, 0.07123922109677117, 0.07123922109677117, 0.07123922109677117, 0.07564854006112143, 0.07564854006112143, 0.07564854006112143, 0.09332205232525814, 0.09332205232525814, 0.09332205232525814, 0.17476096861355672, 0.17476096861355672, 0.17476096861355672, 0.16781444751972796, 0.16781444751972796, 0.16781444751972796, 0.16022590122391633, 0.16022590122391633, 0.16022590122391633, 0.186437692770845, 0.186437692770845, 0.186437692770845, 0.22915467544801427, 0.22915467544801427, 0.22915467544801427, 0.17303952950856671, 0.17303952950856671, 0.17303952950856671, 0.19602850150048212, 0.19602850150048212, 0.19602850150048212, 0.17952573574759245, 0.17952573574759245, 0.17952573574759245, 0.1143648478795789, 0.1143648478795789, 0.1143648478795789, 0.1535708517388208, 0.1535708517388208, 0.1535708517388208, 0.160464522592777, 0.160464522592777, 0.160464522592777, 0.1876679163683217, 0.1876679163683217, 0.1876679163683217, 0.1965730445010585, 0.1965730445010585, 0.1965730445010585, 0.18838681595295292, 0.18838681595295292, 0.18838681595295292, 0.18967492452492452, 0.18967492452492452, 0.18967492452492452, 0.5501738957999187, 0.5501738957999187, 0.5501738957999187, 0.19978734110269947, 0.19978734110269947, 0.19978734110269947, 0.1851727716793643, 0.1851727716793643, 0.1851727716793643, 0.1677213311578496, 0.1677213311578496, 0.1677213311578496, 0.21055240150082977, 0.21055240150082977, 0.21055240150082977, 0.2080086097064605, 0.2080086097064605, 0.2080086097064605, 0.18370937849773816, 0.18370937849773816, 0.18370937849773816, 0.17253854010377379, 0.17253854010377379, 0.17253854010377379, 0.18140472789566653, 0.18140472789566653, 0.18140472789566653, 0.08714293450947752, 0.08714293450947752, 0.08714293450947752, 0.07786928475664079, 0.07786928475664079, 0.07786928475664079, 0.072385883824299, 0.072385883824299, 0.072385883824299]}, "mutation_prompt": null}
{"id": "681c2afc-8be8-45c2-92b7-768c43fd6276", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "3a4adb87-bbcc-408c-a02f-255c751488be", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "1fd0e594-af90-49f1-a616-45f32ab60ad5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "979e1e18-552e-414c-a381-2e198f2ce955", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "05a29b47-6090-401d-b1f3-2582a5ae7eaa", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "9b6b27c8-b11c-469e-8a4f-a9f51a69cf04", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * (1.0 - evaluations / self.budget)  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive DE parameters for improved exploitation.", "configspace": "", "generation": 43, "fitness": 0.24593202176668671, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.26.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.8018562679169584, 0.8018562679169584, 0.8018562679169584, 0.15710564746006128, 0.15710564746006128, 0.15710564746006128, 0.8094793422821004, 0.8094793422821004, 0.8094793422821004, 0.07827995056085202, 0.07827995056085202, 0.07827995056085202, 0.6409624543911762, 0.6409624543911762, 0.6409624543911762, 0.00482908114752667, 0.00482908114752667, 0.00482908114752667, 0.08966729706638565, 0.08966729706638565, 0.08966729706638565, 0.10497885182202737, 0.10497885182202737, 0.10497885182202737, 0.050954807598905805, 0.050954807598905805, 0.050954807598905805, 0.09778916303234841, 0.09778916303234841, 0.09778916303234841, 0.08864254991916609, 0.08864254991916609, 0.08864254991916609, 0.09509908123602984, 0.09509908123602984, 0.09509908123602984, 0.9883178590399786, 0.9883178590399786, 0.9883178590399786, 0.9901530246979192, 0.9901530246979192, 0.9901530246979192, 0.9908611635374507, 0.9908611635374507, 0.9908611635374507, 0.259236497058668, 0.259236497058668, 0.259236497058668, 0.044097879567817855, 0.044097879567817855, 0.044097879567817855, 0.05104099685262775, 0.05104099685262775, 0.05104099685262775, 0.8300595122226775, 0.8300595122226775, 0.8300595122226775, 0.1622830040998633, 0.1622830040998633, 0.1622830040998633, 0.13733629786032509, 0.13733629786032509, 0.13733629786032509, 0.6072656876180376, 0.6072656876180376, 0.6072656876180376, 0.1735879592722871, 0.1735879592722871, 0.1735879592722871, 0.24922811274977086, 0.24922811274977086, 0.24922811274977086, 0.26091321571935555, 0.26091321571935555, 0.26091321571935555, 0.20650136443474099, 0.20650136443474099, 0.20650136443474099, 0.19440974929179033, 0.19440974929179033, 0.19440974929179033, 0.06975540394068391, 0.06975540394068391, 0.06975540394068391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08422136021937021, 0.08422136021937021, 0.08422136021937021, 0.14652804206855818, 0.14652804206855818, 0.14652804206855818, 0.05866769316986897, 0.05866769316986897, 0.05866769316986897, 0.04689650847349147, 0.04689650847349147, 0.04689650847349147, 0.09492165931122021, 0.09492165931122021, 0.09492165931122021, 0.09507409145831991, 0.09507409145831991, 0.09507409145831991, 0.04249679864137601, 0.04249679864137601, 0.04249679864137601, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08272429293177652, 0.08272429293177652, 0.08272429293177652, 0.6979614069368202, 0.6979614069368202, 0.6979614069368202, 0.182629764553228, 0.182629764553228, 0.182629764553228, 0.8279990651255912, 0.8279990651255912, 0.8279990651255912, 0.08564347128579997, 0.08564347128579997, 0.08564347128579997, 0.09707047160494187, 0.09707047160494187, 0.09707047160494187, 0.08590383998108031, 0.08590383998108031, 0.08590383998108031, 0.15550212739983837, 0.15550212739983837, 0.15550212739983837, 0.12053781546448172, 0.12053781546448172, 0.12053781546448172, 0.44350437874254567, 0.44350437874254567, 0.44350437874254567, 0.29651745113951933, 0.29651745113951933, 0.29651745113951933, 0.4691250739619359, 0.4691250739619359, 0.4691250739619359, 0.14748519329104814, 0.14748519329104814, 0.14748519329104814, 0.31002492081309696, 0.31002492081309696, 0.31002492081309696, 0.2106146510674224, 0.2106146510674224, 0.2106146510674224, 0.13389143941315684, 0.13389143941315684, 0.13389143941315684, 0.23355820775447467, 0.23355820775447467, 0.23355820775447467, 0.2020216693546769, 0.2020216693546769, 0.2020216693546769, 0.16914510614284173, 0.16914510614284173, 0.16914510614284173, 0.19126493119418908, 0.19126493119418908, 0.19126493119418908, 0.1927064133480343, 0.1927064133480343, 0.1927064133480343, 0.1649022053775221, 0.1649022053775221, 0.1649022053775221, 0.7847626732340628, 0.7847626732340628, 0.7847626732340628, 0.16494990689045186, 0.16494990689045186, 0.16494990689045186, 0.11728091263614226, 0.11728091263614226, 0.11728091263614226, 0.15637091419922022, 0.15637091419922022, 0.15637091419922022, 0.20654647613572596, 0.20654647613572596, 0.20654647613572596, 0.18325761041069155, 0.18325761041069155, 0.18325761041069155, 0.1840771257967978, 0.1840771257967978, 0.1840771257967978, 0.19140889219260848, 0.19140889219260848, 0.19140889219260848, 0.18144699430506273, 0.18144699430506273, 0.18144699430506273, 0.07288840893096327, 0.07288840893096327, 0.07288840893096327, 0.08774697683832289, 0.08774697683832289, 0.08774697683832289, 0.0718364030076345, 0.0718364030076345, 0.0718364030076345]}, "mutation_prompt": null}
{"id": "0689fa95-5b78-41de-859f-1cc7f10747bf", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "60a436cd-3d36-495a-90dd-b6a8c3bed3d9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "e556e6c5-5ef0-4de5-ae54-c5d334e8dbd4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        chaotic_sequence = np.random.rand(self.budget // self.population_size)\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * chaotic_sequence[evaluations // self.population_size % len(chaotic_sequence)]  # Chaotic inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE using chaotic inertia weight to improve exploration-exploitation balance for better convergence.", "configspace": "", "generation": 46, "fitness": 0.2908747248101251, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.8578936655727736, 0.8578936655727736, 0.8578936655727736, 0.1832018248808842, 0.1832018248808842, 0.1832018248808842, 0.8915982512289823, 0.8915982512289823, 0.8915982512289823, 0.03983183875696594, 0.03983183875696594, 0.03983183875696594, 0.7013623769234624, 0.7013623769234624, 0.7013623769234624, 0.7002372840567845, 0.7002372840567845, 0.7002372840567845, 0.1336360119311768, 0.1336360119311768, 0.1336360119311768, 0.09831874985665823, 0.09831874985665823, 0.09831874985665823, 0.10875305551963688, 0.10875305551963688, 0.10875305551963688, 0.08641039239032966, 0.08641039239032966, 0.08641039239032966, 0.06234356141545727, 0.06234356141545727, 0.06234356141545727, 0.08901246671616059, 0.08901246671616059, 0.08901246671616059, 0.09959669376051838, 0.09959669376051838, 0.09959669376051838, 0.9764470590379822, 0.9764470590379822, 0.9764470590379822, 0.9691691549436324, 0.9691691549436324, 0.9691691549436324, 0.4728988233674951, 0.4728988233674951, 0.4728988233674951, 0.4987779969202375, 0.4987779969202375, 0.4987779969202375, 0.49274083413669445, 0.49274083413669445, 0.49274083413669445, 0.7813716374608067, 0.7813716374608067, 0.7813716374608067, 0.162515535206885, 0.162515535206885, 0.162515535206885, 0.8609980371931235, 0.8609980371931235, 0.8609980371931235, 0.28988908575479766, 0.28988908575479766, 0.28988908575479766, 0.15796528416762123, 0.15796528416762123, 0.15796528416762123, 0.22828046030263416, 0.22828046030263416, 0.22828046030263416, 0.28730077206058824, 0.28730077206058824, 0.28730077206058824, 0.20113576288332213, 0.20113576288332213, 0.20113576288332213, 0.13433255970305436, 0.13433255970305436, 0.13433255970305436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.24741265807554325, 0.24741265807554325, 0.24741265807554325, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09487656013654666, 0.09487656013654666, 0.09487656013654666, 0.19520666137011833, 0.19520666137011833, 0.19520666137011833, 0.053953240679439296, 0.053953240679439296, 0.053953240679439296, 0.057248579730443505, 0.057248579730443505, 0.057248579730443505, 0.33054235106892904, 0.33054235106892904, 0.33054235106892904, 0.09234218139892802, 0.09234218139892802, 0.09234218139892802, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08393384222653655, 0.08393384222653655, 0.08393384222653655, 0.8249393557780771, 0.8249393557780771, 0.8249393557780771, 0.5867189131867319, 0.5867189131867319, 0.5867189131867319, 0.6314398101432667, 0.6314398101432667, 0.6314398101432667, 0.14442332737133023, 0.14442332737133023, 0.14442332737133023, 0.10665627946421519, 0.10665627946421519, 0.10665627946421519, 0.09945228617719626, 0.09945228617719626, 0.09945228617719626, 0.17710466916374912, 0.17710466916374912, 0.17710466916374912, 0.16078451549686557, 0.16078451549686557, 0.16078451549686557, 0.14158798364138747, 0.14158798364138747, 0.14158798364138747, 0.15136955032019994, 0.15136955032019994, 0.15136955032019994, 0.28240657394768365, 0.28240657394768365, 0.28240657394768365, 0.13293682819788333, 0.13293682819788333, 0.13293682819788333, 0.1366986048177521, 0.1366986048177521, 0.1366986048177521, 0.2689272258430868, 0.2689272258430868, 0.2689272258430868, 0.11405209796680194, 0.11405209796680194, 0.11405209796680194, 0.19999884140402824, 0.19999884140402824, 0.19999884140402824, 0.20028266606785117, 0.20028266606785117, 0.20028266606785117, 0.2064135242145375, 0.2064135242145375, 0.2064135242145375, 0.24948418324358868, 0.24948418324358868, 0.24948418324358868, 0.20988588699935473, 0.20988588699935473, 0.20988588699935473, 0.2081951123402147, 0.2081951123402147, 0.2081951123402147, 0.9227158350325173, 0.9227158350325173, 0.9227158350325173, 0.10943918197551794, 0.10943918197551794, 0.10943918197551794, 0.12259038877679307, 0.12259038877679307, 0.12259038877679307, 0.9444704117205223, 0.9444704117205223, 0.9444704117205223, 0.2096161960353573, 0.2096161960353573, 0.2096161960353573, 0.889702089060257, 0.889702089060257, 0.889702089060257, 0.19049494011782586, 0.19049494011782586, 0.19049494011782586, 0.1717062583388651, 0.1717062583388651, 0.1717062583388651, 0.1712258943273448, 0.1712258943273448, 0.1712258943273448, 0.07682217023326898, 0.07682217023326898, 0.07682217023326898, 0.09907393249216623, 0.09907393249216623, 0.09907393249216623, 0.07942940159761913, 0.07942940159761913, 0.07942940159761913]}, "mutation_prompt": null}
{"id": "7b3735e3-d84f-48c2-a497-d735b238505f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "8c1390bd-832c-464b-bd3f-017aff11c9fc", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "a2e5b1ae-0ffd-484f-8496-8a1e1a030a46", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "e24724a0-13fa-4af0-9832-5e15aa193046", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions) +\n                          0.1 * np.random.randn(*velocities.shape))  # Introduce random disturbance\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                CR_dynamic = 0.8 + 0.2 * np.random.random()  # Adaptive crossover probability\n                crossover_mask = np.random.rand(self.dim) < CR_dynamic\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive crossover probability and new velocity update for improved diversity and convergence.", "configspace": "", "generation": 50, "fitness": 0.19865616533809544, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.21.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.4207343971768339, 0.4207343971768339, 0.4207343971768339, 0.4012810605207121, 0.4012810605207121, 0.4012810605207121, 0.3878358462109379, 0.3878358462109379, 0.3878358462109379, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008477406222143768, 0.0008477406222143768, 0.0008477406222143768, 0.000618244844577398, 0.000618244844577398, 0.000618244844577398, 0.08821836869711464, 0.08821836869711464, 0.08821836869711464, 0.09762177557666762, 0.09762177557666762, 0.09762177557666762, 0.08972460705698626, 0.08972460705698626, 0.08972460705698626, 0.053551373077664555, 0.053551373077664555, 0.053551373077664555, 0.08398173600318914, 0.08398173600318914, 0.08398173600318914, 0.09822870150349627, 0.09822870150349627, 0.09822870150349627, 0.981918159054986, 0.981918159054986, 0.981918159054986, 0.9897121467393047, 0.9897121467393047, 0.9897121467393047, 0.9876213284854066, 0.9876213284854066, 0.9876213284854066, 0.2564157076996735, 0.2564157076996735, 0.2564157076996735, 0.2730222658480963, 0.2730222658480963, 0.2730222658480963, 0.2314587335248135, 0.2314587335248135, 0.2314587335248135, 0.29445860198039897, 0.29445860198039897, 0.29445860198039897, 0.16188431820589466, 0.16188431820589466, 0.16188431820589466, 0.012898942198670937, 0.012898942198670937, 0.012898942198670937, 0.14559206310061967, 0.14559206310061967, 0.14559206310061967, 0.17771602680407472, 0.17771602680407472, 0.17771602680407472, 0.15020349886085838, 0.15020349886085838, 0.15020349886085838, 0.13828905774360079, 0.13828905774360079, 0.13828905774360079, 0.1413115584504916, 0.1413115584504916, 0.1413115584504916, 0.13734135580814943, 0.13734135580814943, 0.13734135580814943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033199810544233155, 0.033199810544233155, 0.033199810544233155, 0.0074474998378669666, 0.0074474998378669666, 0.0074474998378669666, 0.06377280661561324, 0.06377280661561324, 0.06377280661561324, 0.07926692188612594, 0.07926692188612594, 0.07926692188612594, 0.03676959716297823, 0.03676959716297823, 0.03676959716297823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03808796118016167, 0.03808796118016167, 0.03808796118016167, 0.08998973362491525, 0.08998973362491525, 0.08998973362491525, 0.074322486384792, 0.074322486384792, 0.074322486384792, 0.37224054295154196, 0.37224054295154196, 0.37224054295154196, 0.39606069406660893, 0.39606069406660893, 0.39606069406660893, 0.40469715531207207, 0.40469715531207207, 0.40469715531207207, 0.09042363687267096, 0.09042363687267096, 0.09042363687267096, 0.08502981326041603, 0.08502981326041603, 0.08502981326041603, 0.06688799153281311, 0.06688799153281311, 0.06688799153281311, 0.13783942807758554, 0.13783942807758554, 0.13783942807758554, 0.16544395523787603, 0.16544395523787603, 0.16544395523787603, 0.18111899235817863, 0.18111899235817863, 0.18111899235817863, 0.26687328120290443, 0.26687328120290443, 0.26687328120290443, 0.20138534064093916, 0.20138534064093916, 0.20138534064093916, 0.1541057767016193, 0.1541057767016193, 0.1541057767016193, 0.20562202381435468, 0.20562202381435468, 0.20562202381435468, 0.20873723555490065, 0.20873723555490065, 0.20873723555490065, 0.12237988811530065, 0.12237988811530065, 0.12237988811530065, 0.20467784496878572, 0.20467784496878572, 0.20467784496878572, 0.18236471719030756, 0.18236471719030756, 0.18236471719030756, 0.17530330271590044, 0.17530330271590044, 0.17530330271590044, 0.17995354637170602, 0.17995354637170602, 0.17995354637170602, 0.18259641336443078, 0.18259641336443078, 0.18259641336443078, 0.18039129499044138, 0.18039129499044138, 0.18039129499044138, 0.6286250974655593, 0.6286250974655593, 0.6286250974655593, 0.1562329021314297, 0.1562329021314297, 0.1562329021314297, 0.1225372101876554, 0.1225372101876554, 0.1225372101876554, 0.49264462398742725, 0.49264462398742725, 0.49264462398742725, 0.5419587856851797, 0.5419587856851797, 0.5419587856851797, 0.21190457175189803, 0.21190457175189803, 0.21190457175189803, 0.1719337540209479, 0.1719337540209479, 0.1719337540209479, 0.17872598934697326, 0.17872598934697326, 0.17872598934697326, 0.1798032377554737, 0.1798032377554737, 0.1798032377554737, 0.07225659962633868, 0.07225659962633868, 0.07225659962633868, 0.08695311533097205, 0.08695311533097205, 0.08695311533097205, 0.06969070871954142, 0.06969070871954142, 0.06969070871954142]}, "mutation_prompt": null}
{"id": "7d75fb03-818d-41d9-b4a4-a9b2624e10e7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            improvement_rate = np.mean(improved)\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * (1 - improvement_rate)  # Adaptive scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive mutation scaling based on convergence rate for improved global search.", "configspace": "", "generation": 51, "fitness": 0.2525207816553997, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.27.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.8675722522920801, 0.8675722522920801, 0.8675722522920801, 0.8309900638795188, 0.8309900638795188, 0.8309900638795188, 0.8454629305971219, 0.8454629305971219, 0.8454629305971219, 0.4890453647167833, 0.4890453647167833, 0.4890453647167833, 0.6913143929809868, 0.6913143929809868, 0.6913143929809868, 0.01717374563657792, 0.01717374563657792, 0.01717374563657792, 0.054579374132364356, 0.054579374132364356, 0.054579374132364356, 0.10449463072580623, 0.10449463072580623, 0.10449463072580623, 0.08758783632383349, 0.08758783632383349, 0.08758783632383349, 0.08764786224601684, 0.08764786224601684, 0.08764786224601684, 0.13564766701647024, 0.13564766701647024, 0.13564766701647024, 0.09307102400036038, 0.09307102400036038, 0.09307102400036038, 0.968857974863786, 0.968857974863786, 0.968857974863786, 0.9831805700604929, 0.9831805700604929, 0.9831805700604929, 0.9860592853782708, 0.9860592853782708, 0.9860592853782708, 0.061146417938164666, 0.061146417938164666, 0.061146417938164666, 0.3784059824308479, 0.3784059824308479, 0.3784059824308479, 0.08740517387986091, 0.08740517387986091, 0.08740517387986091, 0.6255438235164161, 0.6255438235164161, 0.6255438235164161, 0.16240111598868168, 0.16240111598868168, 0.16240111598868168, 0.017878807454782097, 0.017878807454782097, 0.017878807454782097, 0.1881353560171476, 0.1881353560171476, 0.1881353560171476, 0.124489859736017, 0.124489859736017, 0.124489859736017, 0.24080683968468142, 0.24080683968468142, 0.24080683968468142, 0.15769605824444355, 0.15769605824444355, 0.15769605824444355, 0.15726766271911585, 0.15726766271911585, 0.15726766271911585, 0.180227038595269, 0.180227038595269, 0.180227038595269, 0.06215899619558274, 0.06215899619558274, 0.06215899619558274, 0.08904096620914081, 0.08904096620914081, 0.08904096620914081, 0.0019275520083789077, 0.0019275520083789077, 0.0019275520083789077, 0.09306796031578235, 0.09306796031578235, 0.09306796031578235, 0.040423728897436506, 0.040423728897436506, 0.040423728897436506, 0.028725266561314355, 0.028725266561314355, 0.028725266561314355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0755817213716935, 0.0755817213716935, 0.0755817213716935, 0.40887482614427795, 0.40887482614427795, 0.40887482614427795, 0.10765462951418425, 0.10765462951418425, 0.10765462951418425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08067280903184126, 0.08067280903184126, 0.08067280903184126, 0.7811250125656479, 0.7811250125656479, 0.7811250125656479, 0.20933203204031015, 0.20933203204031015, 0.20933203204031015, 0.40446252444206265, 0.40446252444206265, 0.40446252444206265, 0.08203821937792544, 0.08203821937792544, 0.08203821937792544, 0.10420244289336733, 0.10420244289336733, 0.10420244289336733, 0.1005743613409209, 0.1005743613409209, 0.1005743613409209, 0.17779990111233168, 0.17779990111233168, 0.17779990111233168, 0.11601119998054432, 0.11601119998054432, 0.11601119998054432, 0.13776432194433763, 0.13776432194433763, 0.13776432194433763, 0.28684683398829836, 0.28684683398829836, 0.28684683398829836, 0.45359902625410686, 0.45359902625410686, 0.45359902625410686, 0.1809373505384525, 0.1809373505384525, 0.1809373505384525, 0.19778377367770783, 0.19778377367770783, 0.19778377367770783, 0.382955716818435, 0.382955716818435, 0.382955716818435, 0.11709395274542544, 0.11709395274542544, 0.11709395274542544, 0.2058329371724552, 0.2058329371724552, 0.2058329371724552, 0.196061304078175, 0.196061304078175, 0.196061304078175, 0.16769360381077492, 0.16769360381077492, 0.16769360381077492, 0.22473473909475983, 0.22473473909475983, 0.22473473909475983, 0.19681165372062126, 0.19681165372062126, 0.19681165372062126, 0.4332997492797459, 0.4332997492797459, 0.4332997492797459, 0.9045510054585679, 0.9045510054585679, 0.9045510054585679, 0.19602229656999492, 0.19602229656999492, 0.19602229656999492, 0.1220571734141993, 0.1220571734141993, 0.1220571734141993, 0.1535442068552384, 0.1535442068552384, 0.1535442068552384, 0.21200440242612184, 0.21200440242612184, 0.21200440242612184, 0.09376167544906477, 0.09376167544906477, 0.09376167544906477, 0.16531369586176148, 0.16531369586176148, 0.16531369586176148, 0.1830734560280397, 0.1830734560280397, 0.1830734560280397, 0.18863823454881545, 0.18863823454881545, 0.18863823454881545, 0.06480573840657822, 0.06480573840657822, 0.06480573840657822, 0.06952226461157918, 0.06952226461157918, 0.06952226461157918, 0.05882390537687876, 0.05882390537687876, 0.05882390537687876]}, "mutation_prompt": null}
{"id": "cefb1b1f-3994-4c10-828d-ea90b294c6fe", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random() * (1 - evaluations / self.budget)  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR * (1 - evaluations / self.budget)  # Adaptive CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive inertia and crossover for improved exploration-exploitation balance.", "configspace": "", "generation": 52, "fitness": 0.27672099854693616, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.27.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.8517900927494361, 0.8517900927494361, 0.8517900927494361, 0.8086208629098939, 0.8086208629098939, 0.8086208629098939, 0.8863861131718132, 0.8863861131718132, 0.8863861131718132, 0.04118229799702544, 0.04118229799702544, 0.04118229799702544, 0.6387318124750216, 0.6387318124750216, 0.6387318124750216, 0.004836643527539097, 0.004836643527539097, 0.004836643527539097, 0.406111515899097, 0.406111515899097, 0.406111515899097, 0.12697249133824262, 0.12697249133824262, 0.12697249133824262, 0.18378212659095983, 0.18378212659095983, 0.18378212659095983, 0.11106027110849859, 0.11106027110849859, 0.11106027110849859, 0.09393164086207795, 0.09393164086207795, 0.09393164086207795, 0.13026139316454866, 0.13026139316454866, 0.13026139316454866, 0.9851980556762279, 0.9851980556762279, 0.9851980556762279, 0.9861463213666376, 0.9861463213666376, 0.9861463213666376, 0.9888708373669268, 0.9888708373669268, 0.9888708373669268, 0.6233817697126277, 0.6233817697126277, 0.6233817697126277, 0.15192357835374948, 0.15192357835374948, 0.15192357835374948, 0.5731535736198757, 0.5731535736198757, 0.5731535736198757, 0.37838243834657426, 0.37838243834657426, 0.37838243834657426, 0.16200238200595263, 0.16200238200595263, 0.16200238200595263, 0.11650482852748179, 0.11650482852748179, 0.11650482852748179, 0.1999792871862478, 0.1999792871862478, 0.1999792871862478, 0.1893351151855056, 0.1893351151855056, 0.1893351151855056, 0.2290574302849926, 0.2290574302849926, 0.2290574302849926, 0.23325640439520523, 0.23325640439520523, 0.23325640439520523, 0.15988973501571546, 0.15988973501571546, 0.15988973501571546, 0.2040861336844001, 0.2040861336844001, 0.2040861336844001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12392515243043523, 0.12392515243043523, 0.12392515243043523, 0.08681336037486831, 0.08681336037486831, 0.08681336037486831, 0.0428198583794458, 0.0428198583794458, 0.0428198583794458, 0.0633183718767335, 0.0633183718767335, 0.0633183718767335, 0.24979761900650654, 0.24979761900650654, 0.24979761900650654, 0.07154422956463236, 0.07154422956463236, 0.07154422956463236, 0.10067244599088732, 0.10067244599088732, 0.10067244599088732, 0.010953046869625171, 0.010953046869625171, 0.010953046869625171, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050225896835002226, 0.050225896835002226, 0.050225896835002226, 0.7841636214143823, 0.7841636214143823, 0.7841636214143823, 0.4756268142187813, 0.4756268142187813, 0.4756268142187813, 0.5863413984906315, 0.5863413984906315, 0.5863413984906315, 0.12260961259491088, 0.12260961259491088, 0.12260961259491088, 0.11788631026258722, 0.11788631026258722, 0.11788631026258722, 0.14656405443434395, 0.14656405443434395, 0.14656405443434395, 0.14326158480298512, 0.14326158480298512, 0.14326158480298512, 0.14898288888683708, 0.14898288888683708, 0.14898288888683708, 0.128673662163996, 0.128673662163996, 0.128673662163996, 0.25978704156883825, 0.25978704156883825, 0.25978704156883825, 0.4270829595813348, 0.4270829595813348, 0.4270829595813348, 0.26550366623678934, 0.26550366623678934, 0.26550366623678934, 0.21684521430123294, 0.21684521430123294, 0.21684521430123294, 0.21113994365652888, 0.21113994365652888, 0.21113994365652888, 0.13543795245678647, 0.13543795245678647, 0.13543795245678647, 0.20669033207126575, 0.20669033207126575, 0.20669033207126575, 0.2473328073076374, 0.2473328073076374, 0.2473328073076374, 0.18457088845082403, 0.18457088845082403, 0.18457088845082403, 0.21333129728623013, 0.21333129728623013, 0.21333129728623013, 0.18477731908572026, 0.18477731908572026, 0.18477731908572026, 0.24348667364103882, 0.24348667364103882, 0.24348667364103882, 0.9047774245303557, 0.9047774245303557, 0.9047774245303557, 0.12298444564865019, 0.12298444564865019, 0.12298444564865019, 0.130719623982401, 0.130719623982401, 0.130719623982401, 0.8616647696424806, 0.8616647696424806, 0.8616647696424806, 0.19639494247358102, 0.19639494247358102, 0.19639494247358102, 0.18941927787765966, 0.18941927787765966, 0.18941927787765966, 0.18563460125873776, 0.18563460125873776, 0.18563460125873776, 0.16780240550425374, 0.16780240550425374, 0.16780240550425374, 0.17844145519844, 0.17844145519844, 0.17844145519844, 0.08686386835641002, 0.08686386835641002, 0.08686386835641002, 0.10999113951091255, 0.10999113951091255, 0.10999113951091255, 0.07391676463142671, 0.07391676463142671, 0.07391676463142671]}, "mutation_prompt": null}
{"id": "6ba50dfc-452c-417e-89e4-3253c7d943c4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = np.random.uniform(1.3, 1.7)  # stochastic cognitive component\n        self.c2 = np.random.uniform(1.3, 1.7)  # stochastic social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = np.random.uniform(1.2, 1.8)  # Stochastic dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with stochastic dynamic adjustment of cognitive and social components for improved exploration and exploitation balance.", "configspace": "", "generation": 53, "fitness": 0.278876389682402, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.28.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7988131075200371, 0.901759271284577, 0.8356488877566357, 0.8258817606140076, 0.8569018802606876, 0.833206208525396, 0.8603820391821712, 0.1828664648123869, 0.7903134416759685, 0.04267822373567365, 0.040423790967693995, 0.04198825706530951, 0.06221649473105406, 0.043393107560788846, 0.7268279853488813, 0.0046608076183852765, 0.0046550997501846325, 0.004801919108826214, 0.09523033264214387, 0.11355132631091402, 0.038917323057197084, 0.08084826732237393, 0.11820381449978246, 0.12133168997169508, 0.139099979558172, 0.14522283938939962, 0.13681602822829553, 0.08623721350420332, 0.11587428751309836, 0.09872291363825592, 0.0742461244233531, 0.11209054538680352, 0.10295934698542808, 0.07672811416226433, 0.0972879550245469, 0.08827409116291673, 0.9828854841412858, 0.9828857958879058, 0.9828857503318339, 0.9861719115109586, 0.9861688126313505, 0.9861692376856795, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.47376545046486673, 0.40987398063173464, 0.40528127593151386, 0.15199007343527415, 0.14918522130782474, 0.15075917838775, 0.2366080311732568, 0.1264641543602948, 0.5040751182893289, 0.7121313585009283, 0.7008672442898695, 0.22067109317844913, 0.1622893355836892, 0.16183479072812734, 0.16193648128548543, 0.12368518104189608, 0.11668349853901494, 0.1165721747848415, 0.1603302959141636, 0.13373165939936205, 0.224293990252053, 0.7351136560227598, 0.2546386017949137, 0.6400451985101424, 0.21027379554014491, 0.7580524603157054, 0.3549181943417322, 0.18715550790344082, 0.15147332799365976, 0.25052417481153555, 0.29388579368075385, 0.2509868470791241, 0.15296153831151127, 0.28426937044507516, 0.28687456561660685, 0.10910002830449361, 0.060901407870388, 0.1714092893512652, 9.999999999998899e-05, 0.04689073472470462, 0.060265426806842326, 0.037904765345905034, 0.0030309864004806064, 9.999999999998899e-05, 9.999999999998899e-05, 0.09055402264086754, 0.05304939590687885, 0.032888671800961666, 0.022016099447057402, 0.02684638142163398, 0.10879258701828987, 0.10600734511526211, 0.33505282544152126, 0.01690666829587717, 0.031156739089900243, 0.23740261387968598, 0.12711476744447392, 0.07635224896204729, 0.07901935080878975, 0.06589786184878632, 0.09484775181430849, 0.12071802781704333, 0.09325027461994562, 0.28113709992146807, 0.13107743175986764, 0.4818817078655043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05636517728747126, 0.04995638126984614, 0.04973771628644785, 0.6408751934959138, 0.5745550688965233, 0.7137235073930421, 0.7695412094786487, 0.787135404564214, 0.4884032043746426, 0.8092104099318238, 0.6448179639977387, 0.6268365654609134, 0.08665090207718773, 0.08394165273289322, 0.08422955393412179, 0.08002071168550595, 0.0998565726065952, 0.11064688578338633, 0.10863549967837605, 0.11515625417211395, 0.08846545016700624, 0.17498965390439336, 0.1385460184991656, 0.1612558340382999, 0.15678310619414693, 0.17526108833494924, 0.15006281585028136, 0.1856438245132498, 0.12911721279819544, 0.1745778498207583, 0.2323817048225505, 0.42919837174291486, 0.39082880358085414, 0.41509005553991174, 0.4162227395826036, 0.3250201515783345, 0.14890897963895555, 0.1702891305638048, 0.16516570828253951, 0.14574114889945267, 0.23513057247509261, 0.21364301893194015, 0.1880249628052031, 0.21941072109892312, 0.3057589896404479, 0.1230086042332903, 0.1476287609976158, 0.14134239222625822, 0.18857437086182482, 0.2187720313896605, 0.2257307209381747, 0.17937171629769255, 0.18098612171182027, 0.2061977756562554, 0.195937160428311, 0.2091530229108295, 0.18700184750792537, 0.19565906261410193, 0.192020922798127, 0.22059468372973257, 0.16891935937972136, 0.17703835252386524, 0.1847611914001669, 0.19998810797424016, 0.23099945199120475, 0.21484559633394318, 0.9023216536661003, 0.9331221458115064, 0.8663011746233695, 0.13446371925978584, 0.1174698558638485, 0.11748672923913184, 0.1408621571695785, 0.9018510207566997, 0.8788457631709099, 0.8315868978418053, 0.83623715316027, 0.8889490027513113, 0.20971237482774818, 0.20888186714272816, 0.710064351780004, 0.1893929127269074, 0.18879561673360334, 0.18914196711304043, 0.18567700213913008, 0.1843172544207633, 0.1856467814592916, 0.1989303630890913, 0.1917344189414215, 0.18333433958509893, 0.18286300905979436, 0.19851754803963417, 0.18999470098867954, 0.07342668029023769, 0.07539991870247853, 0.08024220403427718, 0.08883900867257122, 0.08402090944667273, 0.07823615589181587, 0.0707637755933036, 0.0793212299231405, 0.06704557883444917]}, "mutation_prompt": null}
{"id": "bc5b5d25-3a91-48b9-9a2b-cb241d38387b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "67fdd5d2-97df-4776-9b14-a0d7d96098d8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.3 + 0.5 * np.random.random()  # Adjusted dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.55 * np.random.random()  # Slightly adjusted dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive learning rates for improved exploration and exploitation balance.", "configspace": "", "generation": 55, "fitness": 0.28630070875486674, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.8667961264542166, 0.8667961264542166, 0.8667961264542166, 0.8078697631423001, 0.8078697631423001, 0.8078697631423001, 0.18285319424524382, 0.18285319424524382, 0.18285319424524382, 0.038457363988876336, 0.038457363988876336, 0.038457363988876336, 0.6397447260458964, 0.6397447260458964, 0.6397447260458964, 0.004787897049871592, 0.004787897049871592, 0.004787897049871592, 0.037087220733552195, 0.037087220733552195, 0.037087220733552195, 0.10010926413208676, 0.10010926413208676, 0.10010926413208676, 0.11884189819524305, 0.11884189819524305, 0.11884189819524305, 0.12230400248657203, 0.12230400248657203, 0.12230400248657203, 0.11034158418128137, 0.11034158418128137, 0.11034158418128137, 0.1036598241869442, 0.1036598241869442, 0.1036598241869442, 0.9851869399129756, 0.9851869399129756, 0.9851869399129756, 0.9862663609174566, 0.9862663609174566, 0.9862663609174566, 0.9908486087701381, 0.9908486087701381, 0.9908486087701381, 0.39805499733131333, 0.39805499733131333, 0.39805499733131333, 0.1509215035340742, 0.1509215035340742, 0.1509215035340742, 0.4468197528973724, 0.4468197528973724, 0.4468197528973724, 0.6836196746853751, 0.6836196746853751, 0.6836196746853751, 0.16148064980126642, 0.16148064980126642, 0.16148064980126642, 0.8532304547373954, 0.8532304547373954, 0.8532304547373954, 0.26233863715018246, 0.26233863715018246, 0.26233863715018246, 0.272375329956395, 0.272375329956395, 0.272375329956395, 0.21178880197515426, 0.21178880197515426, 0.21178880197515426, 0.14252591782210222, 0.14252591782210222, 0.14252591782210222, 0.666136317439501, 0.666136317439501, 0.666136317439501, 0.3177734728266386, 0.3177734728266386, 0.3177734728266386, 0.10840197779553418, 0.10840197779553418, 0.10840197779553418, 0.054504261873694504, 0.054504261873694504, 0.054504261873694504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07759693524816813, 0.07759693524816813, 0.07759693524816813, 0.1562006887778854, 0.1562006887778854, 0.1562006887778854, 0.4510613377369628, 0.4510613377369628, 0.4510613377369628, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06884322558696843, 0.06884322558696843, 0.06884322558696843, 0.0941812379178818, 0.0941812379178818, 0.0941812379178818, 0.2081161023994571, 0.2081161023994571, 0.2081161023994571, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07700034702324987, 0.07700034702324987, 0.07700034702324987, 0.7474120186919597, 0.7474120186919597, 0.7474120186919597, 0.6524726667445166, 0.6524726667445166, 0.6524726667445166, 0.6314595528251556, 0.6314595528251556, 0.6314595528251556, 0.10890703559468984, 0.10890703559468984, 0.10890703559468984, 0.08734075836035193, 0.08734075836035193, 0.08734075836035193, 0.12878559702369607, 0.12878559702369607, 0.12878559702369607, 0.14192710530240416, 0.14192710530240416, 0.14192710530240416, 0.5565581056541362, 0.5565581056541362, 0.5565581056541362, 0.19950671049334645, 0.19950671049334645, 0.19950671049334645, 0.29156180419957745, 0.29156180419957745, 0.29156180419957745, 0.392765660587048, 0.392765660587048, 0.392765660587048, 0.2768681644120111, 0.2768681644120111, 0.2768681644120111, 0.23222899130205, 0.23222899130205, 0.23222899130205, 0.21922027716340375, 0.21922027716340375, 0.21922027716340375, 0.14298831361041908, 0.14298831361041908, 0.14298831361041908, 0.2186442949516939, 0.2186442949516939, 0.2186442949516939, 0.18766703798575246, 0.18766703798575246, 0.18766703798575246, 0.19351740744589774, 0.19351740744589774, 0.19351740744589774, 0.19953055370208683, 0.19953055370208683, 0.19953055370208683, 0.1915114120706829, 0.1915114120706829, 0.1915114120706829, 0.1977289492794081, 0.1977289492794081, 0.1977289492794081, 0.26773915075910404, 0.26773915075910404, 0.26773915075910404, 0.16453345069866754, 0.16453345069866754, 0.16453345069866754, 0.12559060920828524, 0.12559060920828524, 0.12559060920828524, 0.9093472326939398, 0.9093472326939398, 0.9093472326939398, 0.19801611909804606, 0.19801611909804606, 0.19801611909804606, 0.19874690346500956, 0.19874690346500956, 0.19874690346500956, 0.18190590200200896, 0.18190590200200896, 0.18190590200200896, 0.1696905433141801, 0.1696905433141801, 0.1696905433141801, 0.21330953682166487, 0.21330953682166487, 0.21330953682166487, 0.06122556285594838, 0.06122556285594838, 0.06122556285594838, 0.11471806033825727, 0.11471806033825727, 0.11471806033825727, 0.05179914273577835, 0.05179914273577835, 0.05179914273577835]}, "mutation_prompt": null}
{"id": "1e1934f8-7ab3-4013-864f-19dfc3ee199f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Chaotic PSO dynamics\n            chaotic_factor = 4 * r1 * (1 - r1)  # Logistic map for chaos\n            velocities *= chaotic_factor  # Apply chaos to velocities\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE by incorporating chaotic PSO dynamics for better exploration-exploitation balance.", "configspace": "", "generation": 56, "fitness": 0.15354718350430271, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.14.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.9547488807563662, 0.9547488807563662, 0.9547488807563662, 0.3196272956971945, 0.3196272956971945, 0.3196272956971945, 0.2311586453568043, 0.2311586453568043, 0.2311586453568043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1406484732797869, 0.1406484732797869, 0.1406484732797869, 0.0697963819602222, 0.0697963819602222, 0.0697963819602222, 0.09381692367965988, 0.09381692367965988, 0.09381692367965988, 0.10807658384919505, 0.10807658384919505, 0.10807658384919505, 0.03561198395160792, 0.03561198395160792, 0.03561198395160792, 0.04324448163862382, 0.04324448163862382, 0.04324448163862382, 0.019428544386082103, 0.019428544386082103, 0.019428544386082103, 0.06517413150145424, 0.06517413150145424, 0.06517413150145424, 0.12089791115935422, 0.12089791115935422, 0.12089791115935422, 0.14926242855986094, 0.14926242855986094, 0.14926242855986094, 0.07617844506485583, 0.07617844506485583, 0.07617844506485583, 0.15276347164744386, 0.15276347164744386, 0.15276347164744386, 0.06160712119695655, 0.06160712119695655, 0.06160712119695655, 0.2184517687734603, 0.2184517687734603, 0.2184517687734603, 0.19582700811916887, 0.19582700811916887, 0.19582700811916887, 0.009566110032696584, 0.009566110032696584, 0.009566110032696584, 0.09964109880810923, 0.09964109880810923, 0.09964109880810923, 0.23163947882728808, 0.23163947882728808, 0.23163947882728808, 0.18984540457693477, 0.18984540457693477, 0.18984540457693477, 0.19663170026562382, 0.19663170026562382, 0.19663170026562382, 0.13577378518118943, 0.13577378518118943, 0.13577378518118943, 0.13124340816876756, 0.13124340816876756, 0.13124340816876756, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10147957913019523, 0.10147957913019523, 0.10147957913019523, 0.10203573330325522, 0.10203573330325522, 0.10203573330325522, 0.1488339403187623, 0.1488339403187623, 0.1488339403187623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20589793609347862, 0.20589793609347862, 0.20589793609347862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011362549753599849, 0.011362549753599849, 0.011362549753599849, 0.057591700273883495, 0.057591700273883495, 0.057591700273883495, 0.4194289743663342, 0.4194289743663342, 0.4194289743663342, 0.19603406520790068, 0.19603406520790068, 0.19603406520790068, 0.2142235588503959, 0.2142235588503959, 0.2142235588503959, 0.06055118827657757, 0.06055118827657757, 0.06055118827657757, 0.07626419503270043, 0.07626419503270043, 0.07626419503270043, 0.11386332013785927, 0.11386332013785927, 0.11386332013785927, 0.13673724787095598, 0.13673724787095598, 0.13673724787095598, 0.32043809917179156, 0.32043809917179156, 0.32043809917179156, 0.3021297148048263, 0.3021297148048263, 0.3021297148048263, 0.1732193865399546, 0.1732193865399546, 0.1732193865399546, 0.17936585566500907, 0.17936585566500907, 0.17936585566500907, 0.1754382207511349, 0.1754382207511349, 0.1754382207511349, 0.11629751171342417, 0.11629751171342417, 0.11629751171342417, 0.17772652633667008, 0.17772652633667008, 0.17772652633667008, 0.12777100267261177, 0.12777100267261177, 0.12777100267261177, 0.2015268322489222, 0.2015268322489222, 0.2015268322489222, 0.22128538132176467, 0.22128538132176467, 0.22128538132176467, 0.2525291604806673, 0.2525291604806673, 0.2525291604806673, 0.18208769716304873, 0.18208769716304873, 0.18208769716304873, 0.18708765151631912, 0.18708765151631912, 0.18708765151631912, 0.3962750418873544, 0.3962750418873544, 0.3962750418873544, 0.3473476829796731, 0.3473476829796731, 0.3473476829796731, 0.20134511538331346, 0.20134511538331346, 0.20134511538331346, 0.13119271977227565, 0.13119271977227565, 0.13119271977227565, 0.3760754863531054, 0.3760754863531054, 0.3760754863531054, 0.15763757648821097, 0.15763757648821097, 0.15763757648821097, 0.07431487464269848, 0.07431487464269848, 0.07431487464269848, 0.19478419868113117, 0.19478419868113117, 0.19478419868113117, 0.1926970769674775, 0.1926970769674775, 0.1926970769674775, 0.20085675403874304, 0.20085675403874304, 0.20085675403874304, 0.08292873113884491, 0.08292873113884491, 0.08292873113884491, 0.10520754440611002, 0.10520754440611002, 0.10520754440611002, 0.08206591413010611, 0.08206591413010611, 0.08206591413010611]}, "mutation_prompt": null}
{"id": "d561836f-cd76-42d4-b2c0-96ee75617981", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "865ef10b-b50a-4b86-96c1-0d0840e044cd", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "b6591cb4-ed15-4756-96b8-23a2560cee57", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "ba630885-3e3a-4978-86b6-8b4a815266df", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with dynamic social component adjustment for better convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.7726696094422588, 0.7726696094422588, 0.7726696094422588, 0.8633873303190073, 0.8633873303190073, 0.8633873303190073, 0.1829676090967055, 0.1829676090967055, 0.1829676090967055, 0.5750163681009317, 0.5750163681009317, 0.5750163681009317, 0.6466057616723291, 0.6466057616723291, 0.6466057616723291, 0.004546562371741891, 0.004546562371741891, 0.004546562371741891, 0.10094198782382724, 0.10094198782382724, 0.10094198782382724, 0.11719642435753352, 0.11719642435753352, 0.11719642435753352, 0.11772269079770759, 0.11772269079770759, 0.11772269079770759, 0.08972137697800231, 0.08972137697800231, 0.08972137697800231, 0.10099797445936087, 0.10099797445936087, 0.10099797445936087, 0.10819253005361484, 0.10819253005361484, 0.10819253005361484, 0.9828855983317872, 0.9828855983317872, 0.9828855983317872, 0.9861707228867359, 0.9861707228867359, 0.9861707228867359, 0.9888849540909622, 0.9888849540909622, 0.9888849540909622, 0.5067966318859329, 0.5067966318859329, 0.5067966318859329, 0.15257910770662053, 0.15257910770662053, 0.15257910770662053, 0.4213920887677295, 0.4213920887677295, 0.4213920887677295, 0.8527763080405917, 0.8527763080405917, 0.8527763080405917, 0.16231734770481088, 0.16231734770481088, 0.16231734770481088, 0.1726765883182898, 0.1726765883182898, 0.1726765883182898, 0.8129692809765543, 0.8129692809765543, 0.8129692809765543, 0.17269894643105088, 0.17269894643105088, 0.17269894643105088, 0.252842948288143, 0.252842948288143, 0.252842948288143, 0.12911775182089946, 0.12911775182089946, 0.12911775182089946, 0.5621822708021482, 0.5621822708021482, 0.5621822708021482, 0.20111384037380298, 0.20111384037380298, 0.20111384037380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0501074831615157, 0.0501074831615157, 0.0501074831615157, 0.10916954637780785, 0.10916954637780785, 0.10916954637780785, 0.07200499622640855, 0.07200499622640855, 0.07200499622640855, 0.12213839974800955, 0.12213839974800955, 0.12213839974800955, 0.1281374621125062, 0.1281374621125062, 0.1281374621125062, 0.03766960679442655, 0.03766960679442655, 0.03766960679442655, 0.05781475129629321, 0.05781475129629321, 0.05781475129629321, 0.09711703305250563, 0.09711703305250563, 0.09711703305250563, 0.4775242329620206, 0.4775242329620206, 0.4775242329620206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04966490265765611, 0.04966490265765611, 0.04966490265765611, 0.5710711152510344, 0.5710711152510344, 0.5710711152510344, 0.8207106534632211, 0.8207106534632211, 0.8207106534632211, 0.7373029345470694, 0.7373029345470694, 0.7373029345470694, 0.08826535578454675, 0.08826535578454675, 0.08826535578454675, 0.0747535072482235, 0.0747535072482235, 0.0747535072482235, 0.1090620288469838, 0.1090620288469838, 0.1090620288469838, 0.1615267137530747, 0.1615267137530747, 0.1615267137530747, 0.13452424789103534, 0.13452424789103534, 0.13452424789103534, 0.11527210458166703, 0.11527210458166703, 0.11527210458166703, 0.22552728391383647, 0.22552728391383647, 0.22552728391383647, 0.3878072268250965, 0.3878072268250965, 0.3878072268250965, 0.32578253679312763, 0.32578253679312763, 0.32578253679312763, 0.22939952601241043, 0.22939952601241043, 0.22939952601241043, 0.2934949406985038, 0.2934949406985038, 0.2934949406985038, 0.15029554829195835, 0.15029554829195835, 0.15029554829195835, 0.1691293950331496, 0.1691293950331496, 0.1691293950331496, 0.19119891298576064, 0.19119891298576064, 0.19119891298576064, 0.17446788649685063, 0.17446788649685063, 0.17446788649685063, 0.20239507269735058, 0.20239507269735058, 0.20239507269735058, 0.16608578172711164, 0.16608578172711164, 0.16608578172711164, 0.2489273187183796, 0.2489273187183796, 0.2489273187183796, 0.9287305093663373, 0.9287305093663373, 0.9287305093663373, 0.15601131491271392, 0.15601131491271392, 0.15601131491271392, 0.8351652164362366, 0.8351652164362366, 0.8351652164362366, 0.8096903876354105, 0.8096903876354105, 0.8096903876354105, 0.20628165930652254, 0.20628165930652254, 0.20628165930652254, 0.18601363699354756, 0.18601363699354756, 0.18601363699354756, 0.17701542780888901, 0.17701542780888901, 0.17701542780888901, 0.1834810476597597, 0.1834810476597597, 0.1834810476597597, 0.19407182040865112, 0.19407182040865112, 0.19407182040865112, 0.0802325950506767, 0.0802325950506767, 0.0802325950506767, 0.08183278316244436, 0.08183278316244436, 0.08183278316244436, 0.06283843003894396, 0.06283843003894396, 0.06283843003894396]}, "mutation_prompt": null}
{"id": "6f7ff7af-f8d7-4c80-bb2c-2183170cbc5f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        initial_budget = self.budget\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n\n            # New: Decrease cognitive and social factors over time\n            current_ratio = evaluations / self.budget\n            c1_dynamic = self.c1 * (1 - current_ratio)\n            c2_dynamic = self.c2 * (1 - current_ratio)\n\n            velocities = (adaptive_w * velocities +\n                          c1_dynamic * r1 * (personal_best_positions - positions) +\n                          c2_dynamic * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Adaptive exploration-exploitation balance through iteratively decreasing cognitive and social weights.", "configspace": "", "generation": 61, "fitness": 0.28595092349633006, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.29.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.8412694981069553, 0.8412694981069553, 0.8412694981069553, 0.8912056233983343, 0.8912056233983343, 0.8912056233983343, 0.8990812642962162, 0.8990812642962162, 0.8990812642962162, 0.049441765023010675, 0.049441765023010675, 0.049441765023010675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004825286688832753, 0.004825286688832753, 0.004825286688832753, 0.1207360807300869, 0.1207360807300869, 0.1207360807300869, 0.12033616441430184, 0.12033616441430184, 0.12033616441430184, 0.11295512750923886, 0.11295512750923886, 0.11295512750923886, 0.08974827047102885, 0.08974827047102885, 0.08974827047102885, 0.10242015374497604, 0.10242015374497604, 0.10242015374497604, 0.11187750130634777, 0.11187750130634777, 0.11187750130634777, 0.9836345172298371, 0.9836345172298371, 0.9836345172298371, 0.9863234635306057, 0.9863234635306057, 0.9863234635306057, 0.9908636236462655, 0.9908636236462655, 0.9908636236462655, 0.7500819203580712, 0.7500819203580712, 0.7500819203580712, 0.7235667686649692, 0.7235667686649692, 0.7235667686649692, 0.08888813628442327, 0.08888813628442327, 0.08888813628442327, 0.8675944923451918, 0.8675944923451918, 0.8675944923451918, 0.1622400613502425, 0.1622400613502425, 0.1622400613502425, 0.861750191686977, 0.861750191686977, 0.861750191686977, 0.19719312481556295, 0.19719312481556295, 0.19719312481556295, 0.1625382935282611, 0.1625382935282611, 0.1625382935282611, 0.1307281169695198, 0.1307281169695198, 0.1307281169695198, 0.12993186373746635, 0.12993186373746635, 0.12993186373746635, 0.1694226174740836, 0.1694226174740836, 0.1694226174740836, 0.21557087600686498, 0.21557087600686498, 0.21557087600686498, 0.14984733700829034, 0.14984733700829034, 0.14984733700829034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046585874629030855, 0.046585874629030855, 0.046585874629030855, 0.040474647517435014, 0.040474647517435014, 0.040474647517435014, 0.025979816732054184, 0.025979816732054184, 0.025979816732054184, 0.110523080528521, 0.110523080528521, 0.110523080528521, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07605693536982183, 0.07605693536982183, 0.07605693536982183, 0.08230557839721564, 0.08230557839721564, 0.08230557839721564, 0.17426165589736287, 0.17426165589736287, 0.17426165589736287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2855740855684856, 0.2855740855684856, 0.2855740855684856, 0.6522157840184426, 0.6522157840184426, 0.6522157840184426, 0.5338000738554551, 0.5338000738554551, 0.5338000738554551, 0.633906946599925, 0.633906946599925, 0.633906946599925, 0.08759454989253823, 0.08759454989253823, 0.08759454989253823, 0.10925594594079935, 0.10925594594079935, 0.10925594594079935, 0.10726203678950574, 0.10726203678950574, 0.10726203678950574, 0.2874877222299651, 0.2874877222299651, 0.2874877222299651, 0.17329930198951138, 0.17329930198951138, 0.17329930198951138, 0.2202283809046972, 0.2202283809046972, 0.2202283809046972, 0.34260726472659764, 0.34260726472659764, 0.34260726472659764, 0.19158086706161526, 0.19158086706161526, 0.19158086706161526, 0.31127026094111254, 0.31127026094111254, 0.31127026094111254, 0.24743588382714576, 0.24743588382714576, 0.24743588382714576, 0.2567446804621559, 0.2567446804621559, 0.2567446804621559, 0.16341910696152062, 0.16341910696152062, 0.16341910696152062, 0.20804872181230338, 0.20804872181230338, 0.20804872181230338, 0.22427028429574503, 0.22427028429574503, 0.22427028429574503, 0.19124764554289164, 0.19124764554289164, 0.19124764554289164, 0.22022990267614317, 0.22022990267614317, 0.22022990267614317, 0.20811775536437627, 0.20811775536437627, 0.20811775536437627, 0.19756262600297603, 0.19756262600297603, 0.19756262600297603, 0.9345528063897814, 0.9345528063897814, 0.9345528063897814, 0.16233294773195628, 0.16233294773195628, 0.16233294773195628, 0.7872381498902175, 0.7872381498902175, 0.7872381498902175, 0.1616952222431719, 0.1616952222431719, 0.1616952222431719, 0.2063439954711489, 0.2063439954711489, 0.2063439954711489, 0.18615322586694527, 0.18615322586694527, 0.18615322586694527, 0.2089117344132697, 0.2089117344132697, 0.2089117344132697, 0.17248142479917683, 0.17248142479917683, 0.17248142479917683, 0.1814679495494933, 0.1814679495494933, 0.1814679495494933, 0.087550432153082, 0.087550432153082, 0.087550432153082, 0.09158304089347291, 0.09158304089347291, 0.09158304089347291, 0.08433600547273512, 0.08433600547273512, 0.08433600547273512]}, "mutation_prompt": null}
{"id": "75b414e3-f53b-47ac-aa95-d26b6de04d2c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.5 + 0.4 * np.random.random()  # Adaptive inertia weight (modified)\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.5 + 0.5 * np.random.random()  # Dynamic scaling factor (modified)\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced PSODE with adaptive inertia and scaling for improved exploration and exploitation balance.", "configspace": "", "generation": 62, "fitness": 0.2625361313719443, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.811947428772243, 0.811947428772243, 0.811947428772243, 0.8188331175069905, 0.8188331175069905, 0.8188331175069905, 0.7797164815469086, 0.7797164815469086, 0.7797164815469086, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.41183743060262645, 0.41183743060262645, 0.41183743060262645, 0.004608424946576095, 0.004608424946576095, 0.004608424946576095, 0.07993764186769259, 0.07993764186769259, 0.07993764186769259, 0.09801834060892778, 0.09801834060892778, 0.09801834060892778, 0.10286137931735084, 0.10286137931735084, 0.10286137931735084, 0.08265378454924488, 0.08265378454924488, 0.08265378454924488, 0.0782125387123026, 0.0782125387123026, 0.0782125387123026, 0.08590344308863274, 0.08590344308863274, 0.08590344308863274, 0.978547055877306, 0.978547055877306, 0.978547055877306, 0.9888542958054216, 0.9888542958054216, 0.9888542958054216, 0.9891094203921856, 0.9891094203921856, 0.9891094203921856, 0.27671570749644614, 0.27671570749644614, 0.27671570749644614, 0.26145301816019606, 0.26145301816019606, 0.26145301816019606, 0.3188746338819477, 0.3188746338819477, 0.3188746338819477, 0.7008261563565701, 0.7008261563565701, 0.7008261563565701, 0.16173937894642187, 0.16173937894642187, 0.16173937894642187, 0.11579855567665387, 0.11579855567665387, 0.11579855567665387, 0.13215926995519167, 0.13215926995519167, 0.13215926995519167, 0.5369893399739819, 0.5369893399739819, 0.5369893399739819, 0.6118485128713341, 0.6118485128713341, 0.6118485128713341, 0.30384672514332156, 0.30384672514332156, 0.30384672514332156, 0.1291835721047191, 0.1291835721047191, 0.1291835721047191, 0.306172194490835, 0.306172194490835, 0.306172194490835, 0.04387637250839904, 0.04387637250839904, 0.04387637250839904, 0.03271780412227965, 0.03271780412227965, 0.03271780412227965, 0.07331632165916513, 0.07331632165916513, 0.07331632165916513, 0.09465339566791431, 0.09465339566791431, 0.09465339566791431, 0.07320910086844379, 0.07320910086844379, 0.07320910086844379, 0.5115158541836139, 0.5115158541836139, 0.5115158541836139, 0.15512882877024636, 0.15512882877024636, 0.15512882877024636, 0.06497041230246814, 0.06497041230246814, 0.06497041230246814, 0.05595737578678184, 0.05595737578678184, 0.05595737578678184, 0.2871217409258222, 0.2871217409258222, 0.2871217409258222, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.41131808394471636, 0.41131808394471636, 0.41131808394471636, 0.4714552026707811, 0.4714552026707811, 0.4714552026707811, 0.22841977632074506, 0.22841977632074506, 0.22841977632074506, 0.335547814465713, 0.335547814465713, 0.335547814465713, 0.17214462026829658, 0.17214462026829658, 0.17214462026829658, 0.08574688472570346, 0.08574688472570346, 0.08574688472570346, 0.08603340488688704, 0.08603340488688704, 0.08603340488688704, 0.14213713590327492, 0.14213713590327492, 0.14213713590327492, 0.1436217222721451, 0.1436217222721451, 0.1436217222721451, 0.16418009830782798, 0.16418009830782798, 0.16418009830782798, 0.3577812134590461, 0.3577812134590461, 0.3577812134590461, 0.28577352182660776, 0.28577352182660776, 0.28577352182660776, 0.2672978099789659, 0.2672978099789659, 0.2672978099789659, 0.22584415183594708, 0.22584415183594708, 0.22584415183594708, 0.22528093584404063, 0.22528093584404063, 0.22528093584404063, 0.16119542242997653, 0.16119542242997653, 0.16119542242997653, 0.16474115857623406, 0.16474115857623406, 0.16474115857623406, 0.18172706564918362, 0.18172706564918362, 0.18172706564918362, 0.17009176208789922, 0.17009176208789922, 0.17009176208789922, 0.219463479597522, 0.219463479597522, 0.219463479597522, 0.20115244138419774, 0.20115244138419774, 0.20115244138419774, 0.2080549407237574, 0.2080549407237574, 0.2080549407237574, 0.26315788754384417, 0.26315788754384417, 0.26315788754384417, 0.19771051018911745, 0.19771051018911745, 0.19771051018911745, 0.16748817391050363, 0.16748817391050363, 0.16748817391050363, 0.2100991012349931, 0.2100991012349931, 0.2100991012349931, 0.6659101312582609, 0.6659101312582609, 0.6659101312582609, 0.19978945503475298, 0.19978945503475298, 0.19978945503475298, 0.19245539563582614, 0.19245539563582614, 0.19245539563582614, 0.1785334297658414, 0.1785334297658414, 0.1785334297658414, 0.1697899249546081, 0.1697899249546081, 0.1697899249546081, 0.06500264351478713, 0.06500264351478713, 0.06500264351478713, 0.07474338961229388, 0.07474338961229388, 0.07474338961229388, 0.04959771351853037, 0.04959771351853037, 0.04959771351853037]}, "mutation_prompt": null}
{"id": "afc6c788-e87f-4e75-8726-e18f79f1ea86", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        chaos_factor = 0.7  # Initial factor for chaotic inertia\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            adaptive_w *= chaos_factor  # Introduce chaos in inertia weight\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n            chaos_factor *= 0.9  # Gradually decrease chaos factor\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhancing HybridPSODE with chaotic inertia weight for diversified exploration and exploitation balance.", "configspace": "", "generation": 63, "fitness": 0.14046588915199798, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.13.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.3107292307865951, 0.3107292307865951, 0.3107292307865951, 0.21338451338907138, 0.21338451338907138, 0.21338451338907138, 0.2645483384897588, 0.2645483384897588, 0.2645483384897588, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08778730581148264, 0.08778730581148264, 0.08778730581148264, 0.09845823449595248, 0.09845823449595248, 0.09845823449595248, 0.0854780744945538, 0.0854780744945538, 0.0854780744945538, 0.061805244269746096, 0.061805244269746096, 0.061805244269746096, 0.024093085196774333, 0.024093085196774333, 0.024093085196774333, 0.06952284367085504, 0.06952284367085504, 0.06952284367085504, 0.09945018398580707, 0.09945018398580707, 0.09945018398580707, 0.18447716916072598, 0.18447716916072598, 0.18447716916072598, 0.9866058270931962, 0.9866058270931962, 0.9866058270931962, 0.13754046786678786, 0.13754046786678786, 0.13754046786678786, 0.0890143158931942, 0.0890143158931942, 0.0890143158931942, 0.11427124326933047, 0.11427124326933047, 0.11427124326933047, 0.12590657841911201, 0.12590657841911201, 0.12590657841911201, 0.194751598968943, 0.194751598968943, 0.194751598968943, 0.17918496616355495, 0.17918496616355495, 0.17918496616355495, 0.13272936995275963, 0.13272936995275963, 0.13272936995275963, 0.12986154041784725, 0.12986154041784725, 0.12986154041784725, 0.16037624534687545, 0.16037624534687545, 0.16037624534687545, 0.08701554993409721, 0.08701554993409721, 0.08701554993409721, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.130559833064681, 0.130559833064681, 0.130559833064681, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08227852941556679, 0.08227852941556679, 0.08227852941556679, 0.0478211803612103, 0.0478211803612103, 0.0478211803612103, 0.12753996499057207, 0.12753996499057207, 0.12753996499057207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04088603582875838, 0.04088603582875838, 0.04088603582875838, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031702916453754004, 0.031702916453754004, 0.031702916453754004, 0.33793396523553654, 0.33793396523553654, 0.33793396523553654, 0.2110956439926216, 0.2110956439926216, 0.2110956439926216, 0.2980738291007565, 0.2980738291007565, 0.2980738291007565, 0.05271767917106862, 0.05271767917106862, 0.05271767917106862, 0.06754869312259582, 0.06754869312259582, 0.06754869312259582, 0.09418497427929029, 0.09418497427929029, 0.09418497427929029, 0.2124549896119896, 0.2124549896119896, 0.2124549896119896, 0.17082108416484876, 0.17082108416484876, 0.17082108416484876, 0.24957678255182925, 0.24957678255182925, 0.24957678255182925, 0.19501073324649987, 0.19501073324649987, 0.19501073324649987, 0.17791524252583368, 0.17791524252583368, 0.17791524252583368, 0.15595938698200607, 0.15595938698200607, 0.15595938698200607, 0.14619262632961194, 0.14619262632961194, 0.14619262632961194, 0.16812855330641796, 0.16812855330641796, 0.16812855330641796, 0.13091942619817365, 0.13091942619817365, 0.13091942619817365, 0.20590689091406877, 0.20590689091406877, 0.20590689091406877, 0.23359507038738025, 0.23359507038738025, 0.23359507038738025, 0.19630910662106438, 0.19630910662106438, 0.19630910662106438, 0.15889458629604014, 0.15889458629604014, 0.15889458629604014, 0.18225267416525748, 0.18225267416525748, 0.18225267416525748, 0.222641423185591, 0.222641423185591, 0.222641423185591, 0.33676786885667975, 0.33676786885667975, 0.33676786885667975, 0.16983802566811024, 0.16983802566811024, 0.16983802566811024, 0.12224114714213297, 0.12224114714213297, 0.12224114714213297, 0.16967095879937455, 0.16967095879937455, 0.16967095879937455, 0.20954661351974224, 0.20954661351974224, 0.20954661351974224, 0.0946416078299428, 0.0946416078299428, 0.0946416078299428, 0.1780225594369833, 0.1780225594369833, 0.1780225594369833, 0.17415864206968346, 0.17415864206968346, 0.17415864206968346, 0.2165655179568683, 0.2165655179568683, 0.2165655179568683, 0.07599369195311734, 0.07599369195311734, 0.07599369195311734, 0.11711089717703749, 0.11711089717703749, 0.11711089717703749, 0.08197273995413668, 0.08197273995413668, 0.08197273995413668]}, "mutation_prompt": null}
{"id": "9a3f061d-f717-4ae5-8ac5-5861e290ae49", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()  # Dynamic cognitive component\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive personal component to balance exploration and exploitation.", "configspace": "", "generation": 64, "fitness": 0.3045079905991883, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.29.", "error": "", "parent_id": "9c71ca5d-7a42-4a9f-9bec-4950db8663e2", "metadata": {"aucs": [0.8845173465464313, 0.8845173465464313, 0.8845173465464313, 0.866864789705085, 0.866864789705085, 0.866864789705085, 0.807815059651479, 0.807815059651479, 0.807815059651479, 0.06462132110938723, 0.06462132110938723, 0.06462132110938723, 0.04745623464421622, 0.04745623464421622, 0.04745623464421622, 0.004842907987270717, 0.004842907987270717, 0.004842907987270717, 0.12141664361947335, 0.12141664361947335, 0.12141664361947335, 0.09497650090735354, 0.09497650090735354, 0.09497650090735354, 0.09702824001981714, 0.09702824001981714, 0.09702824001981714, 0.0932395117486019, 0.0932395117486019, 0.0932395117486019, 0.09388091044898572, 0.09388091044898572, 0.09388091044898572, 0.10289960524104935, 0.10289960524104935, 0.10289960524104935, 0.990526978126073, 0.990526978126073, 0.990526978126073, 0.9909740060225444, 0.9909740060225444, 0.9909740060225444, 0.9907859883519884, 0.9907859883519884, 0.9907859883519884, 0.349341234104, 0.349341234104, 0.349341234104, 0.3375443351137033, 0.3375443351137033, 0.3375443351137033, 0.08681118831711787, 0.08681118831711787, 0.08681118831711787, 0.7978695039687819, 0.7978695039687819, 0.7978695039687819, 0.16113467413250215, 0.16113467413250215, 0.16113467413250215, 0.8165839022358148, 0.8165839022358148, 0.8165839022358148, 0.16333668541866186, 0.16333668541866186, 0.16333668541866186, 0.156444553776373, 0.156444553776373, 0.156444553776373, 0.22415535499871575, 0.22415535499871575, 0.22415535499871575, 0.6577837565391855, 0.6577837565391855, 0.6577837565391855, 0.43881649247817145, 0.43881649247817145, 0.43881649247817145, 0.6778555688783932, 0.6778555688783932, 0.6778555688783932, 0.12693594253009743, 0.12693594253009743, 0.12693594253009743, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061549850396177996, 0.061549850396177996, 0.061549850396177996, 0.08301422564214733, 0.08301422564214733, 0.08301422564214733, 0.3100361926605597, 0.3100361926605597, 0.3100361926605597, 0.05059741292796427, 0.05059741292796427, 0.05059741292796427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.5094155523749974, 0.5094155523749974, 0.5094155523749974, 0.18765105888531597, 0.18765105888531597, 0.18765105888531597, 0.3737856018211859, 0.3737856018211859, 0.3737856018211859, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12391351792326644, 0.12391351792326644, 0.12391351792326644, 0.806203335770048, 0.806203335770048, 0.806203335770048, 0.7839735363518134, 0.7839735363518134, 0.7839735363518134, 0.5744696560949507, 0.5744696560949507, 0.5744696560949507, 0.06335422009639746, 0.06335422009639746, 0.06335422009639746, 0.13607546443184382, 0.13607546443184382, 0.13607546443184382, 0.14456156286495347, 0.14456156286495347, 0.14456156286495347, 0.1500234420555112, 0.1500234420555112, 0.1500234420555112, 0.16696908096983099, 0.16696908096983099, 0.16696908096983099, 0.15407984555961196, 0.15407984555961196, 0.15407984555961196, 0.39451153116383, 0.39451153116383, 0.39451153116383, 0.4032432728370291, 0.4032432728370291, 0.4032432728370291, 0.17699158148247685, 0.17699158148247685, 0.17699158148247685, 0.3001793364916372, 0.3001793364916372, 0.3001793364916372, 0.20341188943076538, 0.20341188943076538, 0.20341188943076538, 0.12396425672859313, 0.12396425672859313, 0.12396425672859313, 0.20443165696072274, 0.20443165696072274, 0.20443165696072274, 0.19593042902101676, 0.19593042902101676, 0.19593042902101676, 0.18826376147542512, 0.18826376147542512, 0.18826376147542512, 0.18882197760167485, 0.18882197760167485, 0.18882197760167485, 0.2283851311879106, 0.2283851311879106, 0.2283851311879106, 0.18962293992480228, 0.18962293992480228, 0.18962293992480228, 0.9394041273783242, 0.9394041273783242, 0.9394041273783242, 0.1649264709660445, 0.1649264709660445, 0.1649264709660445, 0.8519768186751342, 0.8519768186751342, 0.8519768186751342, 0.15315174033268064, 0.15315174033268064, 0.15315174033268064, 0.20936485550641948, 0.20936485550641948, 0.20936485550641948, 0.09387739676827, 0.09387739676827, 0.09387739676827, 0.1727917694179414, 0.1727917694179414, 0.1727917694179414, 0.17671420279281735, 0.17671420279281735, 0.17671420279281735, 0.17069066802655652, 0.17069066802655652, 0.17069066802655652, 0.07070772782015355, 0.07070772782015355, 0.07070772782015355, 0.11639234318103231, 0.11639234318103231, 0.11639234318103231, 0.08038664452245015, 0.08038664452245015, 0.08038664452245015]}, "mutation_prompt": null}
{"id": "38b798ee-f5b1-4b6f-a75c-ccc64bf826ef", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()  # Dynamic cognitive component\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions with opposition-based learning\n            opposite_positions = self.min_bound + self.max_bound - positions\n            scores = np.array([func(x) for x in positions])\n            opposite_scores = np.array([func(x) for x in opposite_positions])\n            evaluations += 2 * self.population_size\n\n            for i in range(self.population_size):\n                if opposite_scores[i] < scores[i]:\n                    positions[i] = opposite_positions[i]\n                    scores[i] = opposite_scores[i]\n\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with enhanced adaptive parameters and opposition-based learning for better exploration.", "configspace": "", "generation": 65, "fitness": 0.2318114935054606, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.25.", "error": "", "parent_id": "9a3f061d-f717-4ae5-8ac5-5861e290ae49", "metadata": {"aucs": [0.7844369833698284, 0.7844369833698284, 0.7844369833698284, 0.7998642147788864, 0.7998642147788864, 0.7998642147788864, 0.7772923390970932, 0.7772923390970932, 0.7772923390970932, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2832135209076744, 0.2832135209076744, 0.2832135209076744, 0.004358052100711718, 0.004358052100711718, 0.004358052100711718, 0.10391633272144296, 0.10391633272144296, 0.10391633272144296, 0.09458390144319107, 0.09458390144319107, 0.09458390144319107, 0.10364581418545238, 0.10364581418545238, 0.10364581418545238, 0.02823963419998632, 0.02823963419998632, 0.02823963419998632, 0.08271949601668072, 0.08271949601668072, 0.08271949601668072, 0.053755482455214554, 0.053755482455214554, 0.053755482455214554, 0.9827066488701528, 0.9827066488701528, 0.9827066488701528, 0.987141907287303, 0.987141907287303, 0.987141907287303, 0.9869016561692193, 0.9869016561692193, 0.9869016561692193, 0.35277283172954754, 0.35277283172954754, 0.35277283172954754, 0.14531792115197872, 0.14531792115197872, 0.14531792115197872, 0.08520804182070574, 0.08520804182070574, 0.08520804182070574, 0.14102339399240404, 0.14102339399240404, 0.14102339399240404, 0.159350475912723, 0.159350475912723, 0.159350475912723, 0.1277397609508002, 0.1277397609508002, 0.1277397609508002, 0.6190717863229152, 0.6190717863229152, 0.6190717863229152, 0.22870899787731958, 0.22870899787731958, 0.22870899787731958, 0.10736011672712242, 0.10736011672712242, 0.10736011672712242, 0.009958098732008147, 0.009958098732008147, 0.009958098732008147, 0.045149491601671254, 0.045149491601671254, 0.045149491601671254, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07812045210649343, 0.07812045210649343, 0.07812045210649343, 0.039836505182704984, 0.039836505182704984, 0.039836505182704984, 0.07032486577236918, 0.07032486577236918, 0.07032486577236918, 0.09037681615232307, 0.09037681615232307, 0.09037681615232307, 0.09234815823749976, 0.09234815823749976, 0.09234815823749976, 0.037023539115833004, 0.037023539115833004, 0.037023539115833004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18923873429311056, 0.18923873429311056, 0.18923873429311056, 0.09614608472217401, 0.09614608472217401, 0.09614608472217401, 0.13957989118301428, 0.13957989118301428, 0.13957989118301428, 0.03706783746073938, 0.03706783746073938, 0.03706783746073938, 0.11465602328237112, 0.11465602328237112, 0.11465602328237112, 0.5330434744166522, 0.5330434744166522, 0.5330434744166522, 0.6597649160573551, 0.6597649160573551, 0.6597649160573551, 0.6096109503479308, 0.6096109503479308, 0.6096109503479308, 0.06740472489809946, 0.06740472489809946, 0.06740472489809946, 0.07781320223001165, 0.07781320223001165, 0.07781320223001165, 0.09735878361704142, 0.09735878361704142, 0.09735878361704142, 0.14101396553474255, 0.14101396553474255, 0.14101396553474255, 0.12937325601607153, 0.12937325601607153, 0.12937325601607153, 0.12415867857490592, 0.12415867857490592, 0.12415867857490592, 0.3094718676760839, 0.3094718676760839, 0.3094718676760839, 0.3374262110193781, 0.3374262110193781, 0.3374262110193781, 0.4389865490237732, 0.4389865490237732, 0.4389865490237732, 0.2789095846343206, 0.2789095846343206, 0.2789095846343206, 0.27210101320463387, 0.27210101320463387, 0.27210101320463387, 0.12316098784442753, 0.12316098784442753, 0.12316098784442753, 0.18874663856268448, 0.18874663856268448, 0.18874663856268448, 0.16326546088598748, 0.16326546088598748, 0.16326546088598748, 0.15950082742497673, 0.15950082742497673, 0.15950082742497673, 0.19663252731728253, 0.19663252731728253, 0.19663252731728253, 0.19467286369262027, 0.19467286369262027, 0.19467286369262027, 0.2492330406896628, 0.2492330406896628, 0.2492330406896628, 0.7649759433670994, 0.7649759433670994, 0.7649759433670994, 0.18046256583984088, 0.18046256583984088, 0.18046256583984088, 0.13872379500926613, 0.13872379500926613, 0.13872379500926613, 0.17955043695944062, 0.17955043695944062, 0.17955043695944062, 0.09475321097997169, 0.09475321097997169, 0.09475321097997169, 0.16196817945784736, 0.16196817945784736, 0.16196817945784736, 0.20293108134698734, 0.20293108134698734, 0.20293108134698734, 0.1732468678392486, 0.1732468678392486, 0.1732468678392486, 0.17614531458343974, 0.17614531458343974, 0.17614531458343974, 0.06033281043704353, 0.06033281043704353, 0.06033281043704353, 0.0773568020414932, 0.0773568020414932, 0.0773568020414932, 0.048875192932179345, 0.048875192932179345, 0.048875192932179345]}, "mutation_prompt": null}
{"id": "29228b79-1890-4859-85fa-188ec5045051", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()  # Dynamic cognitive component\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            # Adaptive boundary movement\n            boundary_shift = 0.05 * (np.random.rand(self.dim) - 0.5)\n            positions += velocities + boundary_shift\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced PSO-DE with adaptive boundary movement for improved exploration and exploitation balance.", "configspace": "", "generation": 66, "fitness": 0.24327343242785804, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "9a3f061d-f717-4ae5-8ac5-5861e290ae49", "metadata": {"aucs": [0.5621489247245046, 0.5621489247245046, 0.5621489247245046, 0.5683134216397687, 0.5683134216397687, 0.5683134216397687, 0.5493835005748304, 0.5493835005748304, 0.5493835005748304, 0.03389024299715637, 0.03389024299715637, 0.03389024299715637, 0.08316548672951851, 0.08316548672951851, 0.08316548672951851, 0.03953255345256024, 0.03953255345256024, 0.03953255345256024, 0.07493587796552292, 0.07493587796552292, 0.07493587796552292, 0.1305028522238867, 0.1305028522238867, 0.1305028522238867, 0.10585147412394003, 0.10585147412394003, 0.10585147412394003, 0.117361140546557, 0.117361140546557, 0.117361140546557, 0.10846550265404653, 0.10846550265404653, 0.10846550265404653, 0.09998368708379057, 0.09998368708379057, 0.09998368708379057, 0.9755924450445531, 0.9755924450445531, 0.9755924450445531, 0.9861161414715656, 0.9861161414715656, 0.9861161414715656, 0.976226666044649, 0.976226666044649, 0.976226666044649, 0.36905520053214913, 0.36905520053214913, 0.36905520053214913, 0.3847365955218841, 0.3847365955218841, 0.3847365955218841, 0.3196962144935639, 0.3196962144935639, 0.3196962144935639, 0.22966960291251504, 0.22966960291251504, 0.22966960291251504, 0.1623288076866355, 0.1623288076866355, 0.1623288076866355, 0.6655771005014208, 0.6655771005014208, 0.6655771005014208, 0.2785746525763806, 0.2785746525763806, 0.2785746525763806, 0.13414426866848406, 0.13414426866848406, 0.13414426866848406, 0.3003645852522919, 0.3003645852522919, 0.3003645852522919, 0.23504601180414286, 0.23504601180414286, 0.23504601180414286, 0.26617617745606625, 0.26617617745606625, 0.26617617745606625, 0.2582236498661362, 0.2582236498661362, 0.2582236498661362, 0.09227131405653521, 0.09227131405653521, 0.09227131405653521, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05429082468301294, 0.05429082468301294, 0.05429082468301294, 0.14935036902741272, 0.14935036902741272, 0.14935036902741272, 0.10351753226470428, 0.10351753226470428, 0.10351753226470428, 0.04897340666909822, 0.04897340666909822, 0.04897340666909822, 0.03265032604070928, 0.03265032604070928, 0.03265032604070928, 0.03659434573229026, 0.03659434573229026, 0.03659434573229026, 0.0336603849296464, 0.0336603849296464, 0.0336603849296464, 0.15505933156485063, 0.15505933156485063, 0.15505933156485063, 0.18137911166654253, 0.18137911166654253, 0.18137911166654253, 0.14181471307974203, 0.14181471307974203, 0.14181471307974203, 0.46606700223430486, 0.46606700223430486, 0.46606700223430486, 0.4874456743773026, 0.4874456743773026, 0.4874456743773026, 0.477956433397135, 0.477956433397135, 0.477956433397135, 0.08113750742762604, 0.08113750742762604, 0.08113750742762604, 0.09602249814172625, 0.09602249814172625, 0.09602249814172625, 0.11717406977552802, 0.11717406977552802, 0.11717406977552802, 0.14503234847578006, 0.14503234847578006, 0.14503234847578006, 0.15777211569082705, 0.15777211569082705, 0.15777211569082705, 0.3446602239930988, 0.3446602239930988, 0.3446602239930988, 0.2461897522379357, 0.2461897522379357, 0.2461897522379357, 0.303493197175686, 0.303493197175686, 0.303493197175686, 0.2930216103726634, 0.2930216103726634, 0.2930216103726634, 0.26842753422609467, 0.26842753422609467, 0.26842753422609467, 0.19793211824162005, 0.19793211824162005, 0.19793211824162005, 0.11908750197572804, 0.11908750197572804, 0.11908750197572804, 0.19047866258830826, 0.19047866258830826, 0.19047866258830826, 0.1782142578502468, 0.1782142578502468, 0.1782142578502468, 0.1895815874182576, 0.1895815874182576, 0.1895815874182576, 0.2103446363788859, 0.2103446363788859, 0.2103446363788859, 0.22008737089412433, 0.22008737089412433, 0.22008737089412433, 0.20083727999161405, 0.20083727999161405, 0.20083727999161405, 0.8761703170130687, 0.8761703170130687, 0.8761703170130687, 0.16544150244983158, 0.16544150244983158, 0.16544150244983158, 0.1651798205121584, 0.1651798205121584, 0.1651798205121584, 0.16974521916523722, 0.16974521916523722, 0.16974521916523722, 0.2129302881149343, 0.2129302881149343, 0.2129302881149343, 0.09471707595580792, 0.09471707595580792, 0.09471707595580792, 0.18441624882777063, 0.18441624882777063, 0.18441624882777063, 0.20654605660351266, 0.20654605660351266, 0.20654605660351266, 0.17891400093566334, 0.17891400093566334, 0.17891400093566334, 0.06167689042959412, 0.06167689042959412, 0.06167689042959412, 0.0962173423081022, 0.0962173423081022, 0.0962173423081022, 0.06804454536253945, 0.06804454536253945, 0.06804454536253945]}, "mutation_prompt": null}
{"id": "7a2d7e26-b821-4de4-a824-92affb79801f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c1 = 1.3 + 0.5 * np.random.random()  # Slightly adjusted dynamic cognitive component\n            dynamic_c2 = 1.3 + 0.5 * np.random.random()  # Slightly adjusted dynamic social component\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "HybridPSODE with enhanced dynamic coefficients to better adapt exploration and exploitation phases.", "configspace": "", "generation": 67, "fitness": 0.2858790162985085, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "9a3f061d-f717-4ae5-8ac5-5861e290ae49", "metadata": {"aucs": [0.8031690648143943, 0.8031690648143943, 0.8031690648143943, 0.886184063193505, 0.886184063193505, 0.886184063193505, 0.8142490634979753, 0.8142490634979753, 0.8142490634979753, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.5903247345516578, 0.5903247345516578, 0.5903247345516578, 0.004918306835295483, 0.004918306835295483, 0.004918306835295483, 0.08964476538262223, 0.08964476538262223, 0.08964476538262223, 0.0897031578172971, 0.0897031578172971, 0.0897031578172971, 0.10924192099026964, 0.10924192099026964, 0.10924192099026964, 0.0981810410125723, 0.0981810410125723, 0.0981810410125723, 0.08341892987151445, 0.08341892987151445, 0.08341892987151445, 0.09345530185563788, 0.09345530185563788, 0.09345530185563788, 0.9894160801157794, 0.9894160801157794, 0.9894160801157794, 0.9909700580447265, 0.9909700580447265, 0.9909700580447265, 0.9887604367814566, 0.9887604367814566, 0.9887604367814566, 0.4436173679466927, 0.4436173679466927, 0.4436173679466927, 0.5452974125693043, 0.5452974125693043, 0.5452974125693043, 0.08776044425179208, 0.08776044425179208, 0.08776044425179208, 0.7699404470267028, 0.7699404470267028, 0.7699404470267028, 0.16153553057698733, 0.16153553057698733, 0.16153553057698733, 0.80396400437467, 0.80396400437467, 0.80396400437467, 0.1315308455425146, 0.1315308455425146, 0.1315308455425146, 0.3548852378470142, 0.3548852378470142, 0.3548852378470142, 0.20925722922789514, 0.20925722922789514, 0.20925722922789514, 0.22306184503468163, 0.22306184503468163, 0.22306184503468163, 0.13336173239162652, 0.13336173239162652, 0.13336173239162652, 0.1826398310308146, 0.1826398310308146, 0.1826398310308146, 0.07054849915739614, 0.07054849915739614, 0.07054849915739614, 0.04235110363280836, 0.04235110363280836, 0.04235110363280836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09104147041448107, 0.09104147041448107, 0.09104147041448107, 0.11993129622155196, 0.11993129622155196, 0.11993129622155196, 0.04495496288492795, 0.04495496288492795, 0.04495496288492795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09826018701190897, 0.09826018701190897, 0.09826018701190897, 0.09921228831775641, 0.09921228831775641, 0.09921228831775641, 0.2486513613917426, 0.2486513613917426, 0.2486513613917426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3965505934419623, 0.3965505934419623, 0.3965505934419623, 0.7793604002720858, 0.7793604002720858, 0.7793604002720858, 0.5150071206143634, 0.5150071206143634, 0.5150071206143634, 0.6222603626908988, 0.6222603626908988, 0.6222603626908988, 0.06827907516783727, 0.06827907516783727, 0.06827907516783727, 0.08497175660125689, 0.08497175660125689, 0.08497175660125689, 0.09871239262648357, 0.09871239262648357, 0.09871239262648357, 0.19059323585552157, 0.19059323585552157, 0.19059323585552157, 0.14361219647231316, 0.14361219647231316, 0.14361219647231316, 0.16898829197247955, 0.16898829197247955, 0.16898829197247955, 0.3903197182578386, 0.3903197182578386, 0.3903197182578386, 0.2118208586062792, 0.2118208586062792, 0.2118208586062792, 0.34609504514582856, 0.34609504514582856, 0.34609504514582856, 0.19000661466436364, 0.19000661466436364, 0.19000661466436364, 0.30660900929753254, 0.30660900929753254, 0.30660900929753254, 0.10647975892247652, 0.10647975892247652, 0.10647975892247652, 0.16211774606567908, 0.16211774606567908, 0.16211774606567908, 0.18057065753670232, 0.18057065753670232, 0.18057065753670232, 0.1900885548937591, 0.1900885548937591, 0.1900885548937591, 0.2056840181545716, 0.2056840181545716, 0.2056840181545716, 0.19599167369155868, 0.19599167369155868, 0.19599167369155868, 0.19985260052955378, 0.19985260052955378, 0.19985260052955378, 0.8904285527746928, 0.8904285527746928, 0.8904285527746928, 0.1628018434647891, 0.1628018434647891, 0.1628018434647891, 0.9235156688536716, 0.9235156688536716, 0.9235156688536716, 0.17412155190901635, 0.17412155190901635, 0.17412155190901635, 0.21041630398517197, 0.21041630398517197, 0.21041630398517197, 0.19292938054737063, 0.19292938054737063, 0.19292938054737063, 0.1766963811211415, 0.1766963811211415, 0.1766963811211415, 0.1795285110971674, 0.1795285110971674, 0.1795285110971674, 0.1776195507065087, 0.1776195507065087, 0.1776195507065087, 0.06081979773651458, 0.06081979773651458, 0.06081979773651458, 0.1030125972932674, 0.1030125972932674, 0.1030125972932674, 0.08358733090398107, 0.08358733090398107, 0.08358733090398107]}, "mutation_prompt": null}
{"id": "90a3f2f0-9e7e-49cd-acb5-59226d96c2dc", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()  # Dynamic cognitive component\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive personal component to balance exploration and exploitation.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a3f061d-f717-4ae5-8ac5-5861e290ae49", "metadata": {"aucs": [0.8845173465464313, 0.8845173465464313, 0.8845173465464313, 0.866864789705085, 0.866864789705085, 0.866864789705085, 0.807815059651479, 0.807815059651479, 0.807815059651479, 0.06462132110938723, 0.06462132110938723, 0.06462132110938723, 0.04745623464421622, 0.04745623464421622, 0.04745623464421622, 0.004842907987270717, 0.004842907987270717, 0.004842907987270717, 0.12141664361947335, 0.12141664361947335, 0.12141664361947335, 0.09497650090735354, 0.09497650090735354, 0.09497650090735354, 0.09702824001981714, 0.09702824001981714, 0.09702824001981714, 0.0932395117486019, 0.0932395117486019, 0.0932395117486019, 0.09388091044898572, 0.09388091044898572, 0.09388091044898572, 0.10289960524104935, 0.10289960524104935, 0.10289960524104935, 0.990526978126073, 0.990526978126073, 0.990526978126073, 0.9909740060225444, 0.9909740060225444, 0.9909740060225444, 0.9907859883519884, 0.9907859883519884, 0.9907859883519884, 0.349341234104, 0.349341234104, 0.349341234104, 0.3375443351137033, 0.3375443351137033, 0.3375443351137033, 0.08681118831711787, 0.08681118831711787, 0.08681118831711787, 0.7978695039687819, 0.7978695039687819, 0.7978695039687819, 0.16113467413250215, 0.16113467413250215, 0.16113467413250215, 0.8165839022358148, 0.8165839022358148, 0.8165839022358148, 0.16333668541866186, 0.16333668541866186, 0.16333668541866186, 0.156444553776373, 0.156444553776373, 0.156444553776373, 0.22415535499871575, 0.22415535499871575, 0.22415535499871575, 0.6577837565391855, 0.6577837565391855, 0.6577837565391855, 0.43881649247817145, 0.43881649247817145, 0.43881649247817145, 0.6778555688783932, 0.6778555688783932, 0.6778555688783932, 0.12693594253009743, 0.12693594253009743, 0.12693594253009743, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061549850396177996, 0.061549850396177996, 0.061549850396177996, 0.08301422564214733, 0.08301422564214733, 0.08301422564214733, 0.3100361926605597, 0.3100361926605597, 0.3100361926605597, 0.05059741292796427, 0.05059741292796427, 0.05059741292796427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.5094155523749974, 0.5094155523749974, 0.5094155523749974, 0.18765105888531597, 0.18765105888531597, 0.18765105888531597, 0.3737856018211859, 0.3737856018211859, 0.3737856018211859, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12391351792326644, 0.12391351792326644, 0.12391351792326644, 0.806203335770048, 0.806203335770048, 0.806203335770048, 0.7839735363518134, 0.7839735363518134, 0.7839735363518134, 0.5744696560949507, 0.5744696560949507, 0.5744696560949507, 0.06335422009639746, 0.06335422009639746, 0.06335422009639746, 0.13607546443184382, 0.13607546443184382, 0.13607546443184382, 0.14456156286495347, 0.14456156286495347, 0.14456156286495347, 0.1500234420555112, 0.1500234420555112, 0.1500234420555112, 0.16696908096983099, 0.16696908096983099, 0.16696908096983099, 0.15407984555961196, 0.15407984555961196, 0.15407984555961196, 0.39451153116383, 0.39451153116383, 0.39451153116383, 0.4032432728370291, 0.4032432728370291, 0.4032432728370291, 0.17699158148247685, 0.17699158148247685, 0.17699158148247685, 0.3001793364916372, 0.3001793364916372, 0.3001793364916372, 0.20341188943076538, 0.20341188943076538, 0.20341188943076538, 0.12396425672859313, 0.12396425672859313, 0.12396425672859313, 0.20443165696072274, 0.20443165696072274, 0.20443165696072274, 0.19593042902101676, 0.19593042902101676, 0.19593042902101676, 0.18826376147542512, 0.18826376147542512, 0.18826376147542512, 0.18882197760167485, 0.18882197760167485, 0.18882197760167485, 0.2283851311879106, 0.2283851311879106, 0.2283851311879106, 0.18962293992480228, 0.18962293992480228, 0.18962293992480228, 0.9394041273783242, 0.9394041273783242, 0.9394041273783242, 0.1649264709660445, 0.1649264709660445, 0.1649264709660445, 0.8519768186751342, 0.8519768186751342, 0.8519768186751342, 0.15315174033268064, 0.15315174033268064, 0.15315174033268064, 0.20936485550641948, 0.20936485550641948, 0.20936485550641948, 0.09387739676827, 0.09387739676827, 0.09387739676827, 0.1727917694179414, 0.1727917694179414, 0.1727917694179414, 0.17671420279281735, 0.17671420279281735, 0.17671420279281735, 0.17069066802655652, 0.17069066802655652, 0.17069066802655652, 0.07070772782015355, 0.07070772782015355, 0.07070772782015355, 0.11639234318103231, 0.11639234318103231, 0.11639234318103231, 0.08038664452245015, 0.08038664452245015, 0.08038664452245015]}, "mutation_prompt": null}
{"id": "c265f1bd-2437-4159-b037-e1d366c8ca74", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        def chaotic_sequence(x, a=4.0):\n            return a * x * (1 - x)\n\n        chaos_value = np.random.rand()\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * chaos_value  # Adaptive inertia weight using chaotic sequence\n            dynamic_c1 = 1.2 + 0.6 * r1  # Dynamic cognitive component\n            dynamic_c2 = 1.2 + 0.6 * r2  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * chaos_value  # Dynamic scaling factor using chaotic sequence\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n            chaos_value = chaotic_sequence(chaos_value)\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE by incorporating chaotic sequences for parameter randomness to enhance diversification.", "configspace": "", "generation": 69, "fitness": 0.24912740840748218, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.26.", "error": "", "parent_id": "9a3f061d-f717-4ae5-8ac5-5861e290ae49", "metadata": {"aucs": [0.8615021076161139, 0.8615021076161139, 0.8615021076161139, 0.1576647303137355, 0.1576647303137355, 0.1576647303137355, 0.7593519277896457, 0.7593519277896457, 0.7593519277896457, 0.554117124648225, 0.554117124648225, 0.554117124648225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016128254395049613, 0.016128254395049613, 0.016128254395049613, 0.08728424847959537, 0.08728424847959537, 0.08728424847959537, 0.06628447474617827, 0.06628447474617827, 0.06628447474617827, 0.10741827476487176, 0.10741827476487176, 0.10741827476487176, 0.12245341476215876, 0.12245341476215876, 0.12245341476215876, 0.1557484200015159, 0.1557484200015159, 0.1557484200015159, 0.12267895508562487, 0.12267895508562487, 0.12267895508562487, 0.09993294121262641, 0.09993294121262641, 0.09993294121262641, 0.9915985702127108, 0.9915985702127108, 0.9915985702127108, 0.9910402322066947, 0.9910402322066947, 0.9910402322066947, 0.37334645300252034, 0.37334645300252034, 0.37334645300252034, 0.3607459581301212, 0.3607459581301212, 0.3607459581301212, 0.08950250839844631, 0.08950250839844631, 0.08950250839844631, 0.8770428069568255, 0.8770428069568255, 0.8770428069568255, 0.6265593332721315, 0.6265593332721315, 0.6265593332721315, 0.4260539656726766, 0.4260539656726766, 0.4260539656726766, 0.26389082407999154, 0.26389082407999154, 0.26389082407999154, 0.192295651914708, 0.192295651914708, 0.192295651914708, 0.6787884387871068, 0.6787884387871068, 0.6787884387871068, 0.23481739599173002, 0.23481739599173002, 0.23481739599173002, 0.13547421953355476, 0.13547421953355476, 0.13547421953355476, 0.1356388976597822, 0.1356388976597822, 0.1356388976597822, 0.10029458949668368, 0.10029458949668368, 0.10029458949668368, 0.018952571387937156, 0.018952571387937156, 0.018952571387937156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.24417525712595312, 0.24417525712595312, 0.24417525712595312, 0.10102486153706325, 0.10102486153706325, 0.10102486153706325, 0.034866977039508806, 0.034866977039508806, 0.034866977039508806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07113772732942902, 0.07113772732942902, 0.07113772732942902, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006150572870173399, 0.006150572870173399, 0.006150572870173399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7980188212033403, 0.7980188212033403, 0.7980188212033403, 0.7074051750550838, 0.7074051750550838, 0.7074051750550838, 0.8035727895376109, 0.8035727895376109, 0.8035727895376109, 0.09307281057493288, 0.09307281057493288, 0.09307281057493288, 0.10941720825636425, 0.10941720825636425, 0.10941720825636425, 0.07974355217202445, 0.07974355217202445, 0.07974355217202445, 0.17591109621085455, 0.17591109621085455, 0.17591109621085455, 0.14463030411572275, 0.14463030411572275, 0.14463030411572275, 0.20397094904957302, 0.20397094904957302, 0.20397094904957302, 0.3073080505181005, 0.3073080505181005, 0.3073080505181005, 0.1715485030133057, 0.1715485030133057, 0.1715485030133057, 0.1307582225877002, 0.1307582225877002, 0.1307582225877002, 0.2531230615588208, 0.2531230615588208, 0.2531230615588208, 0.1880557059831095, 0.1880557059831095, 0.1880557059831095, 0.12595152726161918, 0.12595152726161918, 0.12595152726161918, 0.19463723648856246, 0.19463723648856246, 0.19463723648856246, 0.20364295170460933, 0.20364295170460933, 0.20364295170460933, 0.18162885066438983, 0.18162885066438983, 0.18162885066438983, 0.17673873093930925, 0.17673873093930925, 0.17673873093930925, 0.17252258441718882, 0.17252258441718882, 0.17252258441718882, 0.2025370211877071, 0.2025370211877071, 0.2025370211877071, 0.9010694759662713, 0.9010694759662713, 0.9010694759662713, 0.16685006102949063, 0.16685006102949063, 0.16685006102949063, 0.16677442764504635, 0.16677442764504635, 0.16677442764504635, 0.16987152757415802, 0.16987152757415802, 0.16987152757415802, 0.16274181915367913, 0.16274181915367913, 0.16274181915367913, 0.10491089390522956, 0.10491089390522956, 0.10491089390522956, 0.18378084968316133, 0.18378084968316133, 0.18378084968316133, 0.17758456823099789, 0.17758456823099789, 0.17758456823099789, 0.16923551077907928, 0.16923551077907928, 0.16923551077907928, 0.06854829546308205, 0.06854829546308205, 0.06854829546308205, 0.09103017157710092, 0.09103017157710092, 0.09103017157710092, 0.08601796541039985, 0.08601796541039985, 0.08601796541039985]}, "mutation_prompt": null}
{"id": "e8a49ba5-9dd3-4ca8-ab78-181f8b989eff", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()  # Dynamic cognitive component\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive personal component to balance exploration and exploitation.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a3f061d-f717-4ae5-8ac5-5861e290ae49", "metadata": {"aucs": [0.8845173465464313, 0.8845173465464313, 0.8845173465464313, 0.866864789705085, 0.866864789705085, 0.866864789705085, 0.807815059651479, 0.807815059651479, 0.807815059651479, 0.06462132110938723, 0.06462132110938723, 0.06462132110938723, 0.04745623464421622, 0.04745623464421622, 0.04745623464421622, 0.004842907987270717, 0.004842907987270717, 0.004842907987270717, 0.12141664361947335, 0.12141664361947335, 0.12141664361947335, 0.09497650090735354, 0.09497650090735354, 0.09497650090735354, 0.09702824001981714, 0.09702824001981714, 0.09702824001981714, 0.0932395117486019, 0.0932395117486019, 0.0932395117486019, 0.09388091044898572, 0.09388091044898572, 0.09388091044898572, 0.10289960524104935, 0.10289960524104935, 0.10289960524104935, 0.990526978126073, 0.990526978126073, 0.990526978126073, 0.9909740060225444, 0.9909740060225444, 0.9909740060225444, 0.9907859883519884, 0.9907859883519884, 0.9907859883519884, 0.349341234104, 0.349341234104, 0.349341234104, 0.3375443351137033, 0.3375443351137033, 0.3375443351137033, 0.08681118831711787, 0.08681118831711787, 0.08681118831711787, 0.7978695039687819, 0.7978695039687819, 0.7978695039687819, 0.16113467413250215, 0.16113467413250215, 0.16113467413250215, 0.8165839022358148, 0.8165839022358148, 0.8165839022358148, 0.16333668541866186, 0.16333668541866186, 0.16333668541866186, 0.156444553776373, 0.156444553776373, 0.156444553776373, 0.22415535499871575, 0.22415535499871575, 0.22415535499871575, 0.6577837565391855, 0.6577837565391855, 0.6577837565391855, 0.43881649247817145, 0.43881649247817145, 0.43881649247817145, 0.6778555688783932, 0.6778555688783932, 0.6778555688783932, 0.12693594253009743, 0.12693594253009743, 0.12693594253009743, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061549850396177996, 0.061549850396177996, 0.061549850396177996, 0.08301422564214733, 0.08301422564214733, 0.08301422564214733, 0.3100361926605597, 0.3100361926605597, 0.3100361926605597, 0.05059741292796427, 0.05059741292796427, 0.05059741292796427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.5094155523749974, 0.5094155523749974, 0.5094155523749974, 0.18765105888531597, 0.18765105888531597, 0.18765105888531597, 0.3737856018211859, 0.3737856018211859, 0.3737856018211859, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12391351792326644, 0.12391351792326644, 0.12391351792326644, 0.806203335770048, 0.806203335770048, 0.806203335770048, 0.7839735363518134, 0.7839735363518134, 0.7839735363518134, 0.5744696560949507, 0.5744696560949507, 0.5744696560949507, 0.06335422009639746, 0.06335422009639746, 0.06335422009639746, 0.13607546443184382, 0.13607546443184382, 0.13607546443184382, 0.14456156286495347, 0.14456156286495347, 0.14456156286495347, 0.1500234420555112, 0.1500234420555112, 0.1500234420555112, 0.16696908096983099, 0.16696908096983099, 0.16696908096983099, 0.15407984555961196, 0.15407984555961196, 0.15407984555961196, 0.39451153116383, 0.39451153116383, 0.39451153116383, 0.4032432728370291, 0.4032432728370291, 0.4032432728370291, 0.17699158148247685, 0.17699158148247685, 0.17699158148247685, 0.3001793364916372, 0.3001793364916372, 0.3001793364916372, 0.20341188943076538, 0.20341188943076538, 0.20341188943076538, 0.12396425672859313, 0.12396425672859313, 0.12396425672859313, 0.20443165696072274, 0.20443165696072274, 0.20443165696072274, 0.19593042902101676, 0.19593042902101676, 0.19593042902101676, 0.18826376147542512, 0.18826376147542512, 0.18826376147542512, 0.18882197760167485, 0.18882197760167485, 0.18882197760167485, 0.2283851311879106, 0.2283851311879106, 0.2283851311879106, 0.18962293992480228, 0.18962293992480228, 0.18962293992480228, 0.9394041273783242, 0.9394041273783242, 0.9394041273783242, 0.1649264709660445, 0.1649264709660445, 0.1649264709660445, 0.8519768186751342, 0.8519768186751342, 0.8519768186751342, 0.15315174033268064, 0.15315174033268064, 0.15315174033268064, 0.20936485550641948, 0.20936485550641948, 0.20936485550641948, 0.09387739676827, 0.09387739676827, 0.09387739676827, 0.1727917694179414, 0.1727917694179414, 0.1727917694179414, 0.17671420279281735, 0.17671420279281735, 0.17671420279281735, 0.17069066802655652, 0.17069066802655652, 0.17069066802655652, 0.07070772782015355, 0.07070772782015355, 0.07070772782015355, 0.11639234318103231, 0.11639234318103231, 0.11639234318103231, 0.08038664452245015, 0.08038664452245015, 0.08038664452245015]}, "mutation_prompt": null}
{"id": "5b43e6b5-2eb2-4bd6-ae6a-175352468630", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()  # Dynamic cognitive component\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive personal component to balance exploration and exploitation.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a3f061d-f717-4ae5-8ac5-5861e290ae49", "metadata": {"aucs": [0.8845173465464313, 0.8845173465464313, 0.8845173465464313, 0.866864789705085, 0.866864789705085, 0.866864789705085, 0.807815059651479, 0.807815059651479, 0.807815059651479, 0.06462132110938723, 0.06462132110938723, 0.06462132110938723, 0.04745623464421622, 0.04745623464421622, 0.04745623464421622, 0.004842907987270717, 0.004842907987270717, 0.004842907987270717, 0.12141664361947335, 0.12141664361947335, 0.12141664361947335, 0.09497650090735354, 0.09497650090735354, 0.09497650090735354, 0.09702824001981714, 0.09702824001981714, 0.09702824001981714, 0.0932395117486019, 0.0932395117486019, 0.0932395117486019, 0.09388091044898572, 0.09388091044898572, 0.09388091044898572, 0.10289960524104935, 0.10289960524104935, 0.10289960524104935, 0.990526978126073, 0.990526978126073, 0.990526978126073, 0.9909740060225444, 0.9909740060225444, 0.9909740060225444, 0.9907859883519884, 0.9907859883519884, 0.9907859883519884, 0.349341234104, 0.349341234104, 0.349341234104, 0.3375443351137033, 0.3375443351137033, 0.3375443351137033, 0.08681118831711787, 0.08681118831711787, 0.08681118831711787, 0.7978695039687819, 0.7978695039687819, 0.7978695039687819, 0.16113467413250215, 0.16113467413250215, 0.16113467413250215, 0.8165839022358148, 0.8165839022358148, 0.8165839022358148, 0.16333668541866186, 0.16333668541866186, 0.16333668541866186, 0.156444553776373, 0.156444553776373, 0.156444553776373, 0.22415535499871575, 0.22415535499871575, 0.22415535499871575, 0.6577837565391855, 0.6577837565391855, 0.6577837565391855, 0.43881649247817145, 0.43881649247817145, 0.43881649247817145, 0.6778555688783932, 0.6778555688783932, 0.6778555688783932, 0.12693594253009743, 0.12693594253009743, 0.12693594253009743, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061549850396177996, 0.061549850396177996, 0.061549850396177996, 0.08301422564214733, 0.08301422564214733, 0.08301422564214733, 0.3100361926605597, 0.3100361926605597, 0.3100361926605597, 0.05059741292796427, 0.05059741292796427, 0.05059741292796427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.5094155523749974, 0.5094155523749974, 0.5094155523749974, 0.18765105888531597, 0.18765105888531597, 0.18765105888531597, 0.3737856018211859, 0.3737856018211859, 0.3737856018211859, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12391351792326644, 0.12391351792326644, 0.12391351792326644, 0.806203335770048, 0.806203335770048, 0.806203335770048, 0.7839735363518134, 0.7839735363518134, 0.7839735363518134, 0.5744696560949507, 0.5744696560949507, 0.5744696560949507, 0.06335422009639746, 0.06335422009639746, 0.06335422009639746, 0.13607546443184382, 0.13607546443184382, 0.13607546443184382, 0.14456156286495347, 0.14456156286495347, 0.14456156286495347, 0.1500234420555112, 0.1500234420555112, 0.1500234420555112, 0.16696908096983099, 0.16696908096983099, 0.16696908096983099, 0.15407984555961196, 0.15407984555961196, 0.15407984555961196, 0.39451153116383, 0.39451153116383, 0.39451153116383, 0.4032432728370291, 0.4032432728370291, 0.4032432728370291, 0.17699158148247685, 0.17699158148247685, 0.17699158148247685, 0.3001793364916372, 0.3001793364916372, 0.3001793364916372, 0.20341188943076538, 0.20341188943076538, 0.20341188943076538, 0.12396425672859313, 0.12396425672859313, 0.12396425672859313, 0.20443165696072274, 0.20443165696072274, 0.20443165696072274, 0.19593042902101676, 0.19593042902101676, 0.19593042902101676, 0.18826376147542512, 0.18826376147542512, 0.18826376147542512, 0.18882197760167485, 0.18882197760167485, 0.18882197760167485, 0.2283851311879106, 0.2283851311879106, 0.2283851311879106, 0.18962293992480228, 0.18962293992480228, 0.18962293992480228, 0.9394041273783242, 0.9394041273783242, 0.9394041273783242, 0.1649264709660445, 0.1649264709660445, 0.1649264709660445, 0.8519768186751342, 0.8519768186751342, 0.8519768186751342, 0.15315174033268064, 0.15315174033268064, 0.15315174033268064, 0.20936485550641948, 0.20936485550641948, 0.20936485550641948, 0.09387739676827, 0.09387739676827, 0.09387739676827, 0.1727917694179414, 0.1727917694179414, 0.1727917694179414, 0.17671420279281735, 0.17671420279281735, 0.17671420279281735, 0.17069066802655652, 0.17069066802655652, 0.17069066802655652, 0.07070772782015355, 0.07070772782015355, 0.07070772782015355, 0.11639234318103231, 0.11639234318103231, 0.11639234318103231, 0.08038664452245015, 0.08038664452245015, 0.08038664452245015]}, "mutation_prompt": null}
{"id": "4bdebc12-8a0f-4534-a90a-ed9247c25e6f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()  # Dynamic cognitive component\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive personal component to balance exploration and exploitation.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a3f061d-f717-4ae5-8ac5-5861e290ae49", "metadata": {"aucs": [0.8845173465464313, 0.8845173465464313, 0.8845173465464313, 0.866864789705085, 0.866864789705085, 0.866864789705085, 0.807815059651479, 0.807815059651479, 0.807815059651479, 0.06462132110938723, 0.06462132110938723, 0.06462132110938723, 0.04745623464421622, 0.04745623464421622, 0.04745623464421622, 0.004842907987270717, 0.004842907987270717, 0.004842907987270717, 0.12141664361947335, 0.12141664361947335, 0.12141664361947335, 0.09497650090735354, 0.09497650090735354, 0.09497650090735354, 0.09702824001981714, 0.09702824001981714, 0.09702824001981714, 0.0932395117486019, 0.0932395117486019, 0.0932395117486019, 0.09388091044898572, 0.09388091044898572, 0.09388091044898572, 0.10289960524104935, 0.10289960524104935, 0.10289960524104935, 0.990526978126073, 0.990526978126073, 0.990526978126073, 0.9909740060225444, 0.9909740060225444, 0.9909740060225444, 0.9907859883519884, 0.9907859883519884, 0.9907859883519884, 0.349341234104, 0.349341234104, 0.349341234104, 0.3375443351137033, 0.3375443351137033, 0.3375443351137033, 0.08681118831711787, 0.08681118831711787, 0.08681118831711787, 0.7978695039687819, 0.7978695039687819, 0.7978695039687819, 0.16113467413250215, 0.16113467413250215, 0.16113467413250215, 0.8165839022358148, 0.8165839022358148, 0.8165839022358148, 0.16333668541866186, 0.16333668541866186, 0.16333668541866186, 0.156444553776373, 0.156444553776373, 0.156444553776373, 0.22415535499871575, 0.22415535499871575, 0.22415535499871575, 0.6577837565391855, 0.6577837565391855, 0.6577837565391855, 0.43881649247817145, 0.43881649247817145, 0.43881649247817145, 0.6778555688783932, 0.6778555688783932, 0.6778555688783932, 0.12693594253009743, 0.12693594253009743, 0.12693594253009743, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061549850396177996, 0.061549850396177996, 0.061549850396177996, 0.08301422564214733, 0.08301422564214733, 0.08301422564214733, 0.3100361926605597, 0.3100361926605597, 0.3100361926605597, 0.05059741292796427, 0.05059741292796427, 0.05059741292796427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.5094155523749974, 0.5094155523749974, 0.5094155523749974, 0.18765105888531597, 0.18765105888531597, 0.18765105888531597, 0.3737856018211859, 0.3737856018211859, 0.3737856018211859, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12391351792326644, 0.12391351792326644, 0.12391351792326644, 0.806203335770048, 0.806203335770048, 0.806203335770048, 0.7839735363518134, 0.7839735363518134, 0.7839735363518134, 0.5744696560949507, 0.5744696560949507, 0.5744696560949507, 0.06335422009639746, 0.06335422009639746, 0.06335422009639746, 0.13607546443184382, 0.13607546443184382, 0.13607546443184382, 0.14456156286495347, 0.14456156286495347, 0.14456156286495347, 0.1500234420555112, 0.1500234420555112, 0.1500234420555112, 0.16696908096983099, 0.16696908096983099, 0.16696908096983099, 0.15407984555961196, 0.15407984555961196, 0.15407984555961196, 0.39451153116383, 0.39451153116383, 0.39451153116383, 0.4032432728370291, 0.4032432728370291, 0.4032432728370291, 0.17699158148247685, 0.17699158148247685, 0.17699158148247685, 0.3001793364916372, 0.3001793364916372, 0.3001793364916372, 0.20341188943076538, 0.20341188943076538, 0.20341188943076538, 0.12396425672859313, 0.12396425672859313, 0.12396425672859313, 0.20443165696072274, 0.20443165696072274, 0.20443165696072274, 0.19593042902101676, 0.19593042902101676, 0.19593042902101676, 0.18826376147542512, 0.18826376147542512, 0.18826376147542512, 0.18882197760167485, 0.18882197760167485, 0.18882197760167485, 0.2283851311879106, 0.2283851311879106, 0.2283851311879106, 0.18962293992480228, 0.18962293992480228, 0.18962293992480228, 0.9394041273783242, 0.9394041273783242, 0.9394041273783242, 0.1649264709660445, 0.1649264709660445, 0.1649264709660445, 0.8519768186751342, 0.8519768186751342, 0.8519768186751342, 0.15315174033268064, 0.15315174033268064, 0.15315174033268064, 0.20936485550641948, 0.20936485550641948, 0.20936485550641948, 0.09387739676827, 0.09387739676827, 0.09387739676827, 0.1727917694179414, 0.1727917694179414, 0.1727917694179414, 0.17671420279281735, 0.17671420279281735, 0.17671420279281735, 0.17069066802655652, 0.17069066802655652, 0.17069066802655652, 0.07070772782015355, 0.07070772782015355, 0.07070772782015355, 0.11639234318103231, 0.11639234318103231, 0.11639234318103231, 0.08038664452245015, 0.08038664452245015, 0.08038664452245015]}, "mutation_prompt": null}
{"id": "dde20afc-8ce7-4f86-b900-51b51283f949", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            # Adaptive inertia weight based on diversity\n            diversity = np.std(positions, axis=0).mean()\n            adaptive_w = 0.5 + 0.5 * (diversity / (self.max_bound - self.min_bound))\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()  # Dynamic cognitive component\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                # Dynamic scaling factor based on diversity\n                F_dynamic = 0.4 + 0.6 * (diversity / (self.max_bound - self.min_bound))\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive inertia weight and dynamic DE scaling based on population diversity.", "configspace": "", "generation": 73, "fitness": 0.19487114782631887, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "9a3f061d-f717-4ae5-8ac5-5861e290ae49", "metadata": {"aucs": [0.9168462176125312, 0.9168462176125312, 0.9168462176125312, 0.19065157989307158, 0.19065157989307158, 0.19065157989307158, 0.18325312999375498, 0.18325312999375498, 0.18325312999375498, 0.039161175801934234, 0.039161175801934234, 0.039161175801934234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014027591731841649, 0.014027591731841649, 0.014027591731841649, 0.06617927982514515, 0.06617927982514515, 0.06617927982514515, 0.10000055924181672, 0.10000055924181672, 0.10000055924181672, 0.5776838660651, 0.5776838660651, 0.5776838660651, 0.026500129010068263, 0.026500129010068263, 0.026500129010068263, 0.08099762015452905, 0.08099762015452905, 0.08099762015452905, 0.10100978038187114, 0.10100978038187114, 0.10100978038187114, 0.09959672048229973, 0.09959672048229973, 0.09959672048229973, 0.1512907133439999, 0.1512907133439999, 0.1512907133439999, 0.9883429231148422, 0.9883429231148422, 0.9883429231148422, 0.15143596914234803, 0.15143596914234803, 0.15143596914234803, 0.804152536163288, 0.804152536163288, 0.804152536163288, 0.08931707567083247, 0.08931707567083247, 0.08931707567083247, 0.3976540610071395, 0.3976540610071395, 0.3976540610071395, 0.1630525485808425, 0.1630525485808425, 0.1630525485808425, 0.06232771629304046, 0.06232771629304046, 0.06232771629304046, 0.2607761408493726, 0.2607761408493726, 0.2607761408493726, 0.15098154943311204, 0.15098154943311204, 0.15098154943311204, 0.1850157524625039, 0.1850157524625039, 0.1850157524625039, 0.14997308001106413, 0.14997308001106413, 0.14997308001106413, 0.12569511422378654, 0.12569511422378654, 0.12569511422378654, 0.17561168050466136, 0.17561168050466136, 0.17561168050466136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09618870198196872, 0.09618870198196872, 0.09618870198196872, 0.040324488522489044, 0.040324488522489044, 0.040324488522489044, 0.1326231376444743, 0.1326231376444743, 0.1326231376444743, 0.1779229421695281, 0.1779229421695281, 0.1779229421695281, 0.08282256659139897, 0.08282256659139897, 0.08282256659139897, 0.1089835574580662, 0.1089835574580662, 0.1089835574580662, 0.04510352657991257, 0.04510352657991257, 0.04510352657991257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08479666412414644, 0.08479666412414644, 0.08479666412414644, 0.5937561049583815, 0.5937561049583815, 0.5937561049583815, 0.21017578905299306, 0.21017578905299306, 0.21017578905299306, 0.4893677494524703, 0.4893677494524703, 0.4893677494524703, 0.09190210339977967, 0.09190210339977967, 0.09190210339977967, 0.08276855835628771, 0.08276855835628771, 0.08276855835628771, 0.09539967308588093, 0.09539967308588093, 0.09539967308588093, 0.1786170940002697, 0.1786170940002697, 0.1786170940002697, 0.2229641576334631, 0.2229641576334631, 0.2229641576334631, 0.3303769715857553, 0.3303769715857553, 0.3303769715857553, 0.38035001540012303, 0.38035001540012303, 0.38035001540012303, 0.15466803985917466, 0.15466803985917466, 0.15466803985917466, 0.1682632045508834, 0.1682632045508834, 0.1682632045508834, 0.2286952487829187, 0.2286952487829187, 0.2286952487829187, 0.1922069797624475, 0.1922069797624475, 0.1922069797624475, 0.13073368648217243, 0.13073368648217243, 0.13073368648217243, 0.23407472736993162, 0.23407472736993162, 0.23407472736993162, 0.17861374811538555, 0.17861374811538555, 0.17861374811538555, 0.21549110779085312, 0.21549110779085312, 0.21549110779085312, 0.19031264977751272, 0.19031264977751272, 0.19031264977751272, 0.19146552419514318, 0.19146552419514318, 0.19146552419514318, 0.1977890110215058, 0.1977890110215058, 0.1977890110215058, 0.6437524752038775, 0.6437524752038775, 0.6437524752038775, 0.166096636732731, 0.166096636732731, 0.166096636732731, 0.15270629896996069, 0.15270629896996069, 0.15270629896996069, 0.16161934737979322, 0.16161934737979322, 0.16161934737979322, 0.2117037098030513, 0.2117037098030513, 0.2117037098030513, 0.09451841884818046, 0.09451841884818046, 0.09451841884818046, 0.18334016408892084, 0.18334016408892084, 0.18334016408892084, 0.22210353956230244, 0.22210353956230244, 0.22210353956230244, 0.1772123458170236, 0.1772123458170236, 0.1772123458170236, 0.08223428497205953, 0.08223428497205953, 0.08223428497205953, 0.09591672239774707, 0.09591672239774707, 0.09591672239774707, 0.06072645901919804, 0.06072645901919804, 0.06072645901919804]}, "mutation_prompt": null}
{"id": "4ff897d7-4041-43e7-b007-46c057a90932", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # crossover probability\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()  # Adaptive inertia weight\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()  # Dynamic cognitive component\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()  # Dynamic social component\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            # Evaluate PSO positions\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            # DE Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.4 + 0.6 * np.random.random()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive personal component to balance exploration and exploitation.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a3f061d-f717-4ae5-8ac5-5861e290ae49", "metadata": {"aucs": [0.8845173465464313, 0.8845173465464313, 0.8845173465464313, 0.866864789705085, 0.866864789705085, 0.866864789705085, 0.807815059651479, 0.807815059651479, 0.807815059651479, 0.06462132110938723, 0.06462132110938723, 0.06462132110938723, 0.04745623464421622, 0.04745623464421622, 0.04745623464421622, 0.004842907987270717, 0.004842907987270717, 0.004842907987270717, 0.12141664361947335, 0.12141664361947335, 0.12141664361947335, 0.09497650090735354, 0.09497650090735354, 0.09497650090735354, 0.09702824001981714, 0.09702824001981714, 0.09702824001981714, 0.0932395117486019, 0.0932395117486019, 0.0932395117486019, 0.09388091044898572, 0.09388091044898572, 0.09388091044898572, 0.10289960524104935, 0.10289960524104935, 0.10289960524104935, 0.990526978126073, 0.990526978126073, 0.990526978126073, 0.9909740060225444, 0.9909740060225444, 0.9909740060225444, 0.9907859883519884, 0.9907859883519884, 0.9907859883519884, 0.349341234104, 0.349341234104, 0.349341234104, 0.3375443351137033, 0.3375443351137033, 0.3375443351137033, 0.08681118831711787, 0.08681118831711787, 0.08681118831711787, 0.7978695039687819, 0.7978695039687819, 0.7978695039687819, 0.16113467413250215, 0.16113467413250215, 0.16113467413250215, 0.8165839022358148, 0.8165839022358148, 0.8165839022358148, 0.16333668541866186, 0.16333668541866186, 0.16333668541866186, 0.156444553776373, 0.156444553776373, 0.156444553776373, 0.22415535499871575, 0.22415535499871575, 0.22415535499871575, 0.6577837565391855, 0.6577837565391855, 0.6577837565391855, 0.43881649247817145, 0.43881649247817145, 0.43881649247817145, 0.6778555688783932, 0.6778555688783932, 0.6778555688783932, 0.12693594253009743, 0.12693594253009743, 0.12693594253009743, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061549850396177996, 0.061549850396177996, 0.061549850396177996, 0.08301422564214733, 0.08301422564214733, 0.08301422564214733, 0.3100361926605597, 0.3100361926605597, 0.3100361926605597, 0.05059741292796427, 0.05059741292796427, 0.05059741292796427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.5094155523749974, 0.5094155523749974, 0.5094155523749974, 0.18765105888531597, 0.18765105888531597, 0.18765105888531597, 0.3737856018211859, 0.3737856018211859, 0.3737856018211859, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12391351792326644, 0.12391351792326644, 0.12391351792326644, 0.806203335770048, 0.806203335770048, 0.806203335770048, 0.7839735363518134, 0.7839735363518134, 0.7839735363518134, 0.5744696560949507, 0.5744696560949507, 0.5744696560949507, 0.06335422009639746, 0.06335422009639746, 0.06335422009639746, 0.13607546443184382, 0.13607546443184382, 0.13607546443184382, 0.14456156286495347, 0.14456156286495347, 0.14456156286495347, 0.1500234420555112, 0.1500234420555112, 0.1500234420555112, 0.16696908096983099, 0.16696908096983099, 0.16696908096983099, 0.15407984555961196, 0.15407984555961196, 0.15407984555961196, 0.39451153116383, 0.39451153116383, 0.39451153116383, 0.4032432728370291, 0.4032432728370291, 0.4032432728370291, 0.17699158148247685, 0.17699158148247685, 0.17699158148247685, 0.3001793364916372, 0.3001793364916372, 0.3001793364916372, 0.20341188943076538, 0.20341188943076538, 0.20341188943076538, 0.12396425672859313, 0.12396425672859313, 0.12396425672859313, 0.20443165696072274, 0.20443165696072274, 0.20443165696072274, 0.19593042902101676, 0.19593042902101676, 0.19593042902101676, 0.18826376147542512, 0.18826376147542512, 0.18826376147542512, 0.18882197760167485, 0.18882197760167485, 0.18882197760167485, 0.2283851311879106, 0.2283851311879106, 0.2283851311879106, 0.18962293992480228, 0.18962293992480228, 0.18962293992480228, 0.9394041273783242, 0.9394041273783242, 0.9394041273783242, 0.1649264709660445, 0.1649264709660445, 0.1649264709660445, 0.8519768186751342, 0.8519768186751342, 0.8519768186751342, 0.15315174033268064, 0.15315174033268064, 0.15315174033268064, 0.20936485550641948, 0.20936485550641948, 0.20936485550641948, 0.09387739676827, 0.09387739676827, 0.09387739676827, 0.1727917694179414, 0.1727917694179414, 0.1727917694179414, 0.17671420279281735, 0.17671420279281735, 0.17671420279281735, 0.17069066802655652, 0.17069066802655652, 0.17069066802655652, 0.07070772782015355, 0.07070772782015355, 0.07070772782015355, 0.11639234318103231, 0.11639234318103231, 0.11639234318103231, 0.08038664452245015, 0.08038664452245015, 0.08038664452245015]}, "mutation_prompt": null}
{"id": "69948456-89ad-4a6d-8a21-80c29d235730", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()  # Minor change in scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Slightly refined HybridPSODE with dynamic adjustment for exploration and exploitation balance.", "configspace": "", "generation": 75, "fitness": 0.3222260787082458, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.30.", "error": "", "parent_id": "9a3f061d-f717-4ae5-8ac5-5861e290ae49", "metadata": {"aucs": [0.9177551066105156, 0.9177551066105156, 0.9177551066105156, 0.8617146396317444, 0.8617146396317444, 0.8617146396317444, 0.8274671317062952, 0.8274671317062952, 0.8274671317062952, 0.07850641040556872, 0.07850641040556872, 0.07850641040556872, 0.6918151586903882, 0.6918151586903882, 0.6918151586903882, 0.004930059281824661, 0.004930059281824661, 0.004930059281824661, 0.09559266474116068, 0.09559266474116068, 0.09559266474116068, 0.1147168988860634, 0.1147168988860634, 0.1147168988860634, 0.13074601881599068, 0.13074601881599068, 0.13074601881599068, 0.11066636193384471, 0.11066636193384471, 0.11066636193384471, 0.1086577350059823, 0.1086577350059823, 0.1086577350059823, 0.07964269262314427, 0.07964269262314427, 0.07964269262314427, 0.990517383653785, 0.990517383653785, 0.990517383653785, 0.9909760283513813, 0.9909760283513813, 0.9909760283513813, 0.9907879764561028, 0.9907879764561028, 0.9907879764561028, 0.391765812212578, 0.391765812212578, 0.391765812212578, 0.4599075095640768, 0.4599075095640768, 0.4599075095640768, 0.08751835295568111, 0.08751835295568111, 0.08751835295568111, 0.7274280062535243, 0.7274280062535243, 0.7274280062535243, 0.16093320738683703, 0.16093320738683703, 0.16093320738683703, 0.7657712999949625, 0.7657712999949625, 0.7657712999949625, 0.23539884453763138, 0.23539884453763138, 0.23539884453763138, 0.17986739743037727, 0.17986739743037727, 0.17986739743037727, 0.1688232950751306, 0.1688232950751306, 0.1688232950751306, 0.3370581812927552, 0.3370581812927552, 0.3370581812927552, 0.22694710790948325, 0.22694710790948325, 0.22694710790948325, 0.7548587579738704, 0.7548587579738704, 0.7548587579738704, 0.07212969989129758, 0.07212969989129758, 0.07212969989129758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3321006462259044, 0.3321006462259044, 0.3321006462259044, 0.09258004280286258, 0.09258004280286258, 0.09258004280286258, 0.704948077668135, 0.704948077668135, 0.704948077668135, 0.003895187435677294, 0.003895187435677294, 0.003895187435677294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10130917199621958, 0.10130917199621958, 0.10130917199621958, 0.0992688574420798, 0.0992688574420798, 0.0992688574420798, 0.05185898216842799, 0.05185898216842799, 0.05185898216842799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.140673134420634, 0.140673134420634, 0.140673134420634, 0.7042812371669795, 0.7042812371669795, 0.7042812371669795, 0.7840310597531491, 0.7840310597531491, 0.7840310597531491, 0.8061228239157326, 0.8061228239157326, 0.8061228239157326, 0.062755428773964, 0.062755428773964, 0.062755428773964, 0.1355710338524897, 0.1355710338524897, 0.1355710338524897, 0.11285943962709266, 0.11285943962709266, 0.11285943962709266, 0.1890509894194724, 0.1890509894194724, 0.1890509894194724, 0.18585725325660762, 0.18585725325660762, 0.18585725325660762, 0.19342911799004148, 0.19342911799004148, 0.19342911799004148, 0.466144840148746, 0.466144840148746, 0.466144840148746, 0.41715136705716827, 0.41715136705716827, 0.41715136705716827, 0.14727317934114503, 0.14727317934114503, 0.14727317934114503, 0.394878217924287, 0.394878217924287, 0.394878217924287, 0.188861673268635, 0.188861673268635, 0.188861673268635, 0.11835764441681718, 0.11835764441681718, 0.11835764441681718, 0.18742203958945736, 0.18742203958945736, 0.18742203958945736, 0.18417994210458333, 0.18417994210458333, 0.18417994210458333, 0.22298087427400026, 0.22298087427400026, 0.22298087427400026, 0.20643151497754142, 0.20643151497754142, 0.20643151497754142, 0.18150123376038585, 0.18150123376038585, 0.18150123376038585, 0.2084841326632334, 0.2084841326632334, 0.2084841326632334, 0.8960663374722317, 0.8960663374722317, 0.8960663374722317, 0.20120100286063858, 0.20120100286063858, 0.20120100286063858, 0.8662648472298098, 0.8662648472298098, 0.8662648472298098, 0.8952891191115019, 0.8952891191115019, 0.8952891191115019, 0.20732424594362153, 0.20732424594362153, 0.20732424594362153, 0.10328825688309862, 0.10328825688309862, 0.10328825688309862, 0.20418916743030868, 0.20418916743030868, 0.20418916743030868, 0.17506352093505506, 0.17506352093505506, 0.17506352093505506, 0.21415065971629366, 0.21415065971629366, 0.21415065971629366, 0.07514045290338489, 0.07514045290338489, 0.07514045290338489, 0.09345487557059351, 0.09345487557059351, 0.09345487557059351, 0.08138629822369492, 0.08138629822369492, 0.08138629822369492]}, "mutation_prompt": null}
{"id": "fe60fbe9-c99e-4b34-a7ac-a3ada8092c54", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()  # Minor change in scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Slightly refined HybridPSODE with dynamic adjustment for exploration and exploitation balance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.9177551066105156, 0.9177551066105156, 0.9177551066105156, 0.8617146396317444, 0.8617146396317444, 0.8617146396317444, 0.8274671317062952, 0.8274671317062952, 0.8274671317062952, 0.07850641040556872, 0.07850641040556872, 0.07850641040556872, 0.6918151586903882, 0.6918151586903882, 0.6918151586903882, 0.004930059281824661, 0.004930059281824661, 0.004930059281824661, 0.09559266474116068, 0.09559266474116068, 0.09559266474116068, 0.1147168988860634, 0.1147168988860634, 0.1147168988860634, 0.13074601881599068, 0.13074601881599068, 0.13074601881599068, 0.11066636193384471, 0.11066636193384471, 0.11066636193384471, 0.1086577350059823, 0.1086577350059823, 0.1086577350059823, 0.07964269262314427, 0.07964269262314427, 0.07964269262314427, 0.990517383653785, 0.990517383653785, 0.990517383653785, 0.9909760283513813, 0.9909760283513813, 0.9909760283513813, 0.9907879764561028, 0.9907879764561028, 0.9907879764561028, 0.391765812212578, 0.391765812212578, 0.391765812212578, 0.4599075095640768, 0.4599075095640768, 0.4599075095640768, 0.08751835295568111, 0.08751835295568111, 0.08751835295568111, 0.7274280062535243, 0.7274280062535243, 0.7274280062535243, 0.16093320738683703, 0.16093320738683703, 0.16093320738683703, 0.7657712999949625, 0.7657712999949625, 0.7657712999949625, 0.23539884453763138, 0.23539884453763138, 0.23539884453763138, 0.17986739743037727, 0.17986739743037727, 0.17986739743037727, 0.1688232950751306, 0.1688232950751306, 0.1688232950751306, 0.3370581812927552, 0.3370581812927552, 0.3370581812927552, 0.22694710790948325, 0.22694710790948325, 0.22694710790948325, 0.7548587579738704, 0.7548587579738704, 0.7548587579738704, 0.07212969989129758, 0.07212969989129758, 0.07212969989129758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3321006462259044, 0.3321006462259044, 0.3321006462259044, 0.09258004280286258, 0.09258004280286258, 0.09258004280286258, 0.704948077668135, 0.704948077668135, 0.704948077668135, 0.003895187435677294, 0.003895187435677294, 0.003895187435677294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10130917199621958, 0.10130917199621958, 0.10130917199621958, 0.0992688574420798, 0.0992688574420798, 0.0992688574420798, 0.05185898216842799, 0.05185898216842799, 0.05185898216842799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.140673134420634, 0.140673134420634, 0.140673134420634, 0.7042812371669795, 0.7042812371669795, 0.7042812371669795, 0.7840310597531491, 0.7840310597531491, 0.7840310597531491, 0.8061228239157326, 0.8061228239157326, 0.8061228239157326, 0.062755428773964, 0.062755428773964, 0.062755428773964, 0.1355710338524897, 0.1355710338524897, 0.1355710338524897, 0.11285943962709266, 0.11285943962709266, 0.11285943962709266, 0.1890509894194724, 0.1890509894194724, 0.1890509894194724, 0.18585725325660762, 0.18585725325660762, 0.18585725325660762, 0.19342911799004148, 0.19342911799004148, 0.19342911799004148, 0.466144840148746, 0.466144840148746, 0.466144840148746, 0.41715136705716827, 0.41715136705716827, 0.41715136705716827, 0.14727317934114503, 0.14727317934114503, 0.14727317934114503, 0.394878217924287, 0.394878217924287, 0.394878217924287, 0.188861673268635, 0.188861673268635, 0.188861673268635, 0.11835764441681718, 0.11835764441681718, 0.11835764441681718, 0.18742203958945736, 0.18742203958945736, 0.18742203958945736, 0.18417994210458333, 0.18417994210458333, 0.18417994210458333, 0.22298087427400026, 0.22298087427400026, 0.22298087427400026, 0.20643151497754142, 0.20643151497754142, 0.20643151497754142, 0.18150123376038585, 0.18150123376038585, 0.18150123376038585, 0.2084841326632334, 0.2084841326632334, 0.2084841326632334, 0.8960663374722317, 0.8960663374722317, 0.8960663374722317, 0.20120100286063858, 0.20120100286063858, 0.20120100286063858, 0.8662648472298098, 0.8662648472298098, 0.8662648472298098, 0.8952891191115019, 0.8952891191115019, 0.8952891191115019, 0.20732424594362153, 0.20732424594362153, 0.20732424594362153, 0.10328825688309862, 0.10328825688309862, 0.10328825688309862, 0.20418916743030868, 0.20418916743030868, 0.20418916743030868, 0.17506352093505506, 0.17506352093505506, 0.17506352093505506, 0.21415065971629366, 0.21415065971629366, 0.21415065971629366, 0.07514045290338489, 0.07514045290338489, 0.07514045290338489, 0.09345487557059351, 0.09345487557059351, 0.09345487557059351, 0.08138629822369492, 0.08138629822369492, 0.08138629822369492]}, "mutation_prompt": null}
{"id": "868f01f5-556a-456c-aa79-617c0ebc5524", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.3 + 0.7 * np.random.random()  # Adjusted dynamic scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia factor adjustment and adaptive mutation, improving exploration-exploitation balance.", "configspace": "", "generation": 77, "fitness": 0.27859245910856506, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.28.", "error": "", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.7800428597434056, 0.7800428597434056, 0.7800428597434056, 0.19065203527356656, 0.19065203527356656, 0.19065203527356656, 0.8822016710235311, 0.8822016710235311, 0.8822016710235311, 0.7097317930426081, 0.7097317930426081, 0.7097317930426081, 0.001171357267850559, 0.001171357267850559, 0.001171357267850559, 0.004921762483891645, 0.004921762483891645, 0.004921762483891645, 0.10353255072452139, 0.10353255072452139, 0.10353255072452139, 0.1329404715923822, 0.1329404715923822, 0.1329404715923822, 0.09861078971262072, 0.09861078971262072, 0.09861078971262072, 0.0791217247245084, 0.0791217247245084, 0.0791217247245084, 0.10407829259431967, 0.10407829259431967, 0.10407829259431967, 0.1181666781763242, 0.1181666781763242, 0.1181666781763242, 0.9848210138753223, 0.9848210138753223, 0.9848210138753223, 0.9909698117080247, 0.9909698117080247, 0.9909698117080247, 0.9885948783392271, 0.9885948783392271, 0.9885948783392271, 0.5034560680197957, 0.5034560680197957, 0.5034560680197957, 0.15325397275723895, 0.15325397275723895, 0.15325397275723895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.8371120479951252, 0.8371120479951252, 0.8371120479951252, 0.16175166942232932, 0.16175166942232932, 0.16175166942232932, 0.8636067940941985, 0.8636067940941985, 0.8636067940941985, 0.195262485013187, 0.195262485013187, 0.195262485013187, 0.14770371257421244, 0.14770371257421244, 0.14770371257421244, 0.15467466361858095, 0.15467466361858095, 0.15467466361858095, 0.18107059817850613, 0.18107059817850613, 0.18107059817850613, 0.8107175920626712, 0.8107175920626712, 0.8107175920626712, 0.1321033483363615, 0.1321033483363615, 0.1321033483363615, 0.07310669120211877, 0.07310669120211877, 0.07310669120211877, 0.057028900745846656, 0.057028900745846656, 0.057028900745846656, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0658692677248448, 0.0658692677248448, 0.0658692677248448, 0.1183143800501919, 0.1183143800501919, 0.1183143800501919, 0.03315761803408879, 0.03315761803408879, 0.03315761803408879, 0.05673255057287696, 0.05673255057287696, 0.05673255057287696, 0.6159588133963089, 0.6159588133963089, 0.6159588133963089, 0.13746726731174896, 0.13746726731174896, 0.13746726731174896, 0.2640529583038137, 0.2640529583038137, 0.2640529583038137, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08371135435199761, 0.08371135435199761, 0.08371135435199761, 0.7991835209250768, 0.7991835209250768, 0.7991835209250768, 0.28383251060726866, 0.28383251060726866, 0.28383251060726866, 0.5739803029118116, 0.5739803029118116, 0.5739803029118116, 0.09353221760902763, 0.09353221760902763, 0.09353221760902763, 0.10589934542430679, 0.10589934542430679, 0.10589934542430679, 0.10259640187909103, 0.10259640187909103, 0.10259640187909103, 0.1362882785998818, 0.1362882785998818, 0.1362882785998818, 0.19027886233769997, 0.19027886233769997, 0.19027886233769997, 0.14765226455653224, 0.14765226455653224, 0.14765226455653224, 0.33648767808968105, 0.33648767808968105, 0.33648767808968105, 0.2886448977859183, 0.2886448977859183, 0.2886448977859183, 0.41507151904456996, 0.41507151904456996, 0.41507151904456996, 0.278714967919124, 0.278714967919124, 0.278714967919124, 0.1919452401907955, 0.1919452401907955, 0.1919452401907955, 0.11726953997826184, 0.11726953997826184, 0.11726953997826184, 0.18149046585205975, 0.18149046585205975, 0.18149046585205975, 0.17592362475831191, 0.17592362475831191, 0.17592362475831191, 0.19952252310411556, 0.19952252310411556, 0.19952252310411556, 0.17541290314336644, 0.17541290314336644, 0.17541290314336644, 0.24466905235164615, 0.24466905235164615, 0.24466905235164615, 0.20143879017936228, 0.20143879017936228, 0.20143879017936228, 0.8368863727460328, 0.8368863727460328, 0.8368863727460328, 0.16358811466308232, 0.16358811466308232, 0.16358811466308232, 0.7527455092724783, 0.7527455092724783, 0.7527455092724783, 0.1626469115415834, 0.1626469115415834, 0.1626469115415834, 0.19681384962245985, 0.19681384962245985, 0.19681384962245985, 0.08392405070992648, 0.08392405070992648, 0.08392405070992648, 0.18448726737020738, 0.18448726737020738, 0.18448726737020738, 0.1961819638837724, 0.1961819638837724, 0.1961819638837724, 0.17780423002577972, 0.17780423002577972, 0.17780423002577972, 0.08109571110179836, 0.08109571110179836, 0.08109571110179836, 0.07976334610477298, 0.07976334610477298, 0.07976334610477298, 0.08691437747873099, 0.08691437747873099, 0.08691437747873099]}, "mutation_prompt": null}
{"id": "91e1d77e-3e2e-4c8b-88ac-1002fedfde25", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()  # Minor change in scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Slightly refined HybridPSODE with dynamic adjustment for exploration and exploitation balance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.9177551066105156, 0.9177551066105156, 0.9177551066105156, 0.8617146396317444, 0.8617146396317444, 0.8617146396317444, 0.8274671317062952, 0.8274671317062952, 0.8274671317062952, 0.07850641040556872, 0.07850641040556872, 0.07850641040556872, 0.6918151586903882, 0.6918151586903882, 0.6918151586903882, 0.004930059281824661, 0.004930059281824661, 0.004930059281824661, 0.09559266474116068, 0.09559266474116068, 0.09559266474116068, 0.1147168988860634, 0.1147168988860634, 0.1147168988860634, 0.13074601881599068, 0.13074601881599068, 0.13074601881599068, 0.11066636193384471, 0.11066636193384471, 0.11066636193384471, 0.1086577350059823, 0.1086577350059823, 0.1086577350059823, 0.07964269262314427, 0.07964269262314427, 0.07964269262314427, 0.990517383653785, 0.990517383653785, 0.990517383653785, 0.9909760283513813, 0.9909760283513813, 0.9909760283513813, 0.9907879764561028, 0.9907879764561028, 0.9907879764561028, 0.391765812212578, 0.391765812212578, 0.391765812212578, 0.4599075095640768, 0.4599075095640768, 0.4599075095640768, 0.08751835295568111, 0.08751835295568111, 0.08751835295568111, 0.7274280062535243, 0.7274280062535243, 0.7274280062535243, 0.16093320738683703, 0.16093320738683703, 0.16093320738683703, 0.7657712999949625, 0.7657712999949625, 0.7657712999949625, 0.23539884453763138, 0.23539884453763138, 0.23539884453763138, 0.17986739743037727, 0.17986739743037727, 0.17986739743037727, 0.1688232950751306, 0.1688232950751306, 0.1688232950751306, 0.3370581812927552, 0.3370581812927552, 0.3370581812927552, 0.22694710790948325, 0.22694710790948325, 0.22694710790948325, 0.7548587579738704, 0.7548587579738704, 0.7548587579738704, 0.07212969989129758, 0.07212969989129758, 0.07212969989129758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3321006462259044, 0.3321006462259044, 0.3321006462259044, 0.09258004280286258, 0.09258004280286258, 0.09258004280286258, 0.704948077668135, 0.704948077668135, 0.704948077668135, 0.003895187435677294, 0.003895187435677294, 0.003895187435677294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10130917199621958, 0.10130917199621958, 0.10130917199621958, 0.0992688574420798, 0.0992688574420798, 0.0992688574420798, 0.05185898216842799, 0.05185898216842799, 0.05185898216842799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.140673134420634, 0.140673134420634, 0.140673134420634, 0.7042812371669795, 0.7042812371669795, 0.7042812371669795, 0.7840310597531491, 0.7840310597531491, 0.7840310597531491, 0.8061228239157326, 0.8061228239157326, 0.8061228239157326, 0.062755428773964, 0.062755428773964, 0.062755428773964, 0.1355710338524897, 0.1355710338524897, 0.1355710338524897, 0.11285943962709266, 0.11285943962709266, 0.11285943962709266, 0.1890509894194724, 0.1890509894194724, 0.1890509894194724, 0.18585725325660762, 0.18585725325660762, 0.18585725325660762, 0.19342911799004148, 0.19342911799004148, 0.19342911799004148, 0.466144840148746, 0.466144840148746, 0.466144840148746, 0.41715136705716827, 0.41715136705716827, 0.41715136705716827, 0.14727317934114503, 0.14727317934114503, 0.14727317934114503, 0.394878217924287, 0.394878217924287, 0.394878217924287, 0.188861673268635, 0.188861673268635, 0.188861673268635, 0.11835764441681718, 0.11835764441681718, 0.11835764441681718, 0.18742203958945736, 0.18742203958945736, 0.18742203958945736, 0.18417994210458333, 0.18417994210458333, 0.18417994210458333, 0.22298087427400026, 0.22298087427400026, 0.22298087427400026, 0.20643151497754142, 0.20643151497754142, 0.20643151497754142, 0.18150123376038585, 0.18150123376038585, 0.18150123376038585, 0.2084841326632334, 0.2084841326632334, 0.2084841326632334, 0.8960663374722317, 0.8960663374722317, 0.8960663374722317, 0.20120100286063858, 0.20120100286063858, 0.20120100286063858, 0.8662648472298098, 0.8662648472298098, 0.8662648472298098, 0.8952891191115019, 0.8952891191115019, 0.8952891191115019, 0.20732424594362153, 0.20732424594362153, 0.20732424594362153, 0.10328825688309862, 0.10328825688309862, 0.10328825688309862, 0.20418916743030868, 0.20418916743030868, 0.20418916743030868, 0.17506352093505506, 0.17506352093505506, 0.17506352093505506, 0.21415065971629366, 0.21415065971629366, 0.21415065971629366, 0.07514045290338489, 0.07514045290338489, 0.07514045290338489, 0.09345487557059351, 0.09345487557059351, 0.09345487557059351, 0.08138629822369492, 0.08138629822369492, 0.08138629822369492]}, "mutation_prompt": null}
{"id": "17c8647e-5bbd-4316-9ddf-fa22395a42cf", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()  # Minor change in scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Slightly refined HybridPSODE with dynamic adjustment for exploration and exploitation balance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.9177551066105156, 0.9177551066105156, 0.9177551066105156, 0.8617146396317444, 0.8617146396317444, 0.8617146396317444, 0.8274671317062952, 0.8274671317062952, 0.8274671317062952, 0.07850641040556872, 0.07850641040556872, 0.07850641040556872, 0.6918151586903882, 0.6918151586903882, 0.6918151586903882, 0.004930059281824661, 0.004930059281824661, 0.004930059281824661, 0.09559266474116068, 0.09559266474116068, 0.09559266474116068, 0.1147168988860634, 0.1147168988860634, 0.1147168988860634, 0.13074601881599068, 0.13074601881599068, 0.13074601881599068, 0.11066636193384471, 0.11066636193384471, 0.11066636193384471, 0.1086577350059823, 0.1086577350059823, 0.1086577350059823, 0.07964269262314427, 0.07964269262314427, 0.07964269262314427, 0.990517383653785, 0.990517383653785, 0.990517383653785, 0.9909760283513813, 0.9909760283513813, 0.9909760283513813, 0.9907879764561028, 0.9907879764561028, 0.9907879764561028, 0.391765812212578, 0.391765812212578, 0.391765812212578, 0.4599075095640768, 0.4599075095640768, 0.4599075095640768, 0.08751835295568111, 0.08751835295568111, 0.08751835295568111, 0.7274280062535243, 0.7274280062535243, 0.7274280062535243, 0.16093320738683703, 0.16093320738683703, 0.16093320738683703, 0.7657712999949625, 0.7657712999949625, 0.7657712999949625, 0.23539884453763138, 0.23539884453763138, 0.23539884453763138, 0.17986739743037727, 0.17986739743037727, 0.17986739743037727, 0.1688232950751306, 0.1688232950751306, 0.1688232950751306, 0.3370581812927552, 0.3370581812927552, 0.3370581812927552, 0.22694710790948325, 0.22694710790948325, 0.22694710790948325, 0.7548587579738704, 0.7548587579738704, 0.7548587579738704, 0.07212969989129758, 0.07212969989129758, 0.07212969989129758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3321006462259044, 0.3321006462259044, 0.3321006462259044, 0.09258004280286258, 0.09258004280286258, 0.09258004280286258, 0.704948077668135, 0.704948077668135, 0.704948077668135, 0.003895187435677294, 0.003895187435677294, 0.003895187435677294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10130917199621958, 0.10130917199621958, 0.10130917199621958, 0.0992688574420798, 0.0992688574420798, 0.0992688574420798, 0.05185898216842799, 0.05185898216842799, 0.05185898216842799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.140673134420634, 0.140673134420634, 0.140673134420634, 0.7042812371669795, 0.7042812371669795, 0.7042812371669795, 0.7840310597531491, 0.7840310597531491, 0.7840310597531491, 0.8061228239157326, 0.8061228239157326, 0.8061228239157326, 0.062755428773964, 0.062755428773964, 0.062755428773964, 0.1355710338524897, 0.1355710338524897, 0.1355710338524897, 0.11285943962709266, 0.11285943962709266, 0.11285943962709266, 0.1890509894194724, 0.1890509894194724, 0.1890509894194724, 0.18585725325660762, 0.18585725325660762, 0.18585725325660762, 0.19342911799004148, 0.19342911799004148, 0.19342911799004148, 0.466144840148746, 0.466144840148746, 0.466144840148746, 0.41715136705716827, 0.41715136705716827, 0.41715136705716827, 0.14727317934114503, 0.14727317934114503, 0.14727317934114503, 0.394878217924287, 0.394878217924287, 0.394878217924287, 0.188861673268635, 0.188861673268635, 0.188861673268635, 0.11835764441681718, 0.11835764441681718, 0.11835764441681718, 0.18742203958945736, 0.18742203958945736, 0.18742203958945736, 0.18417994210458333, 0.18417994210458333, 0.18417994210458333, 0.22298087427400026, 0.22298087427400026, 0.22298087427400026, 0.20643151497754142, 0.20643151497754142, 0.20643151497754142, 0.18150123376038585, 0.18150123376038585, 0.18150123376038585, 0.2084841326632334, 0.2084841326632334, 0.2084841326632334, 0.8960663374722317, 0.8960663374722317, 0.8960663374722317, 0.20120100286063858, 0.20120100286063858, 0.20120100286063858, 0.8662648472298098, 0.8662648472298098, 0.8662648472298098, 0.8952891191115019, 0.8952891191115019, 0.8952891191115019, 0.20732424594362153, 0.20732424594362153, 0.20732424594362153, 0.10328825688309862, 0.10328825688309862, 0.10328825688309862, 0.20418916743030868, 0.20418916743030868, 0.20418916743030868, 0.17506352093505506, 0.17506352093505506, 0.17506352093505506, 0.21415065971629366, 0.21415065971629366, 0.21415065971629366, 0.07514045290338489, 0.07514045290338489, 0.07514045290338489, 0.09345487557059351, 0.09345487557059351, 0.09345487557059351, 0.08138629822369492, 0.08138629822369492, 0.08138629822369492]}, "mutation_prompt": null}
{"id": "047b7ce2-80b6-4cc7-99fc-900682a26464", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()  # Minor change in scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Slightly refined HybridPSODE with dynamic adjustment for exploration and exploitation balance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.9177551066105156, 0.9177551066105156, 0.9177551066105156, 0.8617146396317444, 0.8617146396317444, 0.8617146396317444, 0.8274671317062952, 0.8274671317062952, 0.8274671317062952, 0.07850641040556872, 0.07850641040556872, 0.07850641040556872, 0.6918151586903882, 0.6918151586903882, 0.6918151586903882, 0.004930059281824661, 0.004930059281824661, 0.004930059281824661, 0.09559266474116068, 0.09559266474116068, 0.09559266474116068, 0.1147168988860634, 0.1147168988860634, 0.1147168988860634, 0.13074601881599068, 0.13074601881599068, 0.13074601881599068, 0.11066636193384471, 0.11066636193384471, 0.11066636193384471, 0.1086577350059823, 0.1086577350059823, 0.1086577350059823, 0.07964269262314427, 0.07964269262314427, 0.07964269262314427, 0.990517383653785, 0.990517383653785, 0.990517383653785, 0.9909760283513813, 0.9909760283513813, 0.9909760283513813, 0.9907879764561028, 0.9907879764561028, 0.9907879764561028, 0.391765812212578, 0.391765812212578, 0.391765812212578, 0.4599075095640768, 0.4599075095640768, 0.4599075095640768, 0.08751835295568111, 0.08751835295568111, 0.08751835295568111, 0.7274280062535243, 0.7274280062535243, 0.7274280062535243, 0.16093320738683703, 0.16093320738683703, 0.16093320738683703, 0.7657712999949625, 0.7657712999949625, 0.7657712999949625, 0.23539884453763138, 0.23539884453763138, 0.23539884453763138, 0.17986739743037727, 0.17986739743037727, 0.17986739743037727, 0.1688232950751306, 0.1688232950751306, 0.1688232950751306, 0.3370581812927552, 0.3370581812927552, 0.3370581812927552, 0.22694710790948325, 0.22694710790948325, 0.22694710790948325, 0.7548587579738704, 0.7548587579738704, 0.7548587579738704, 0.07212969989129758, 0.07212969989129758, 0.07212969989129758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3321006462259044, 0.3321006462259044, 0.3321006462259044, 0.09258004280286258, 0.09258004280286258, 0.09258004280286258, 0.704948077668135, 0.704948077668135, 0.704948077668135, 0.003895187435677294, 0.003895187435677294, 0.003895187435677294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10130917199621958, 0.10130917199621958, 0.10130917199621958, 0.0992688574420798, 0.0992688574420798, 0.0992688574420798, 0.05185898216842799, 0.05185898216842799, 0.05185898216842799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.140673134420634, 0.140673134420634, 0.140673134420634, 0.7042812371669795, 0.7042812371669795, 0.7042812371669795, 0.7840310597531491, 0.7840310597531491, 0.7840310597531491, 0.8061228239157326, 0.8061228239157326, 0.8061228239157326, 0.062755428773964, 0.062755428773964, 0.062755428773964, 0.1355710338524897, 0.1355710338524897, 0.1355710338524897, 0.11285943962709266, 0.11285943962709266, 0.11285943962709266, 0.1890509894194724, 0.1890509894194724, 0.1890509894194724, 0.18585725325660762, 0.18585725325660762, 0.18585725325660762, 0.19342911799004148, 0.19342911799004148, 0.19342911799004148, 0.466144840148746, 0.466144840148746, 0.466144840148746, 0.41715136705716827, 0.41715136705716827, 0.41715136705716827, 0.14727317934114503, 0.14727317934114503, 0.14727317934114503, 0.394878217924287, 0.394878217924287, 0.394878217924287, 0.188861673268635, 0.188861673268635, 0.188861673268635, 0.11835764441681718, 0.11835764441681718, 0.11835764441681718, 0.18742203958945736, 0.18742203958945736, 0.18742203958945736, 0.18417994210458333, 0.18417994210458333, 0.18417994210458333, 0.22298087427400026, 0.22298087427400026, 0.22298087427400026, 0.20643151497754142, 0.20643151497754142, 0.20643151497754142, 0.18150123376038585, 0.18150123376038585, 0.18150123376038585, 0.2084841326632334, 0.2084841326632334, 0.2084841326632334, 0.8960663374722317, 0.8960663374722317, 0.8960663374722317, 0.20120100286063858, 0.20120100286063858, 0.20120100286063858, 0.8662648472298098, 0.8662648472298098, 0.8662648472298098, 0.8952891191115019, 0.8952891191115019, 0.8952891191115019, 0.20732424594362153, 0.20732424594362153, 0.20732424594362153, 0.10328825688309862, 0.10328825688309862, 0.10328825688309862, 0.20418916743030868, 0.20418916743030868, 0.20418916743030868, 0.17506352093505506, 0.17506352093505506, 0.17506352093505506, 0.21415065971629366, 0.21415065971629366, 0.21415065971629366, 0.07514045290338489, 0.07514045290338489, 0.07514045290338489, 0.09345487557059351, 0.09345487557059351, 0.09345487557059351, 0.08138629822369492, 0.08138629822369492, 0.08138629822369492]}, "mutation_prompt": null}
{"id": "b502b0b2-895a-4597-8362-0431c15a4655", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.3 + 0.4 * np.random.random()  # Adjusted range for inertia weight\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()  # Minor change in scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Introduced a random selection of inertia weight from a narrowed range for better exploration-exploitation tradeoff.", "configspace": "", "generation": 81, "fitness": 0.22508680311823787, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.41186311359512506, 0.41186311359512506, 0.41186311359512506, 0.19113591720034562, 0.19113591720034562, 0.19113591720034562, 0.46751259826095726, 0.46751259826095726, 0.46751259826095726, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018922289142792814, 0.018922289142792814, 0.018922289142792814, 0.0516153206634723, 0.0516153206634723, 0.0516153206634723, 0.0901583672151457, 0.0901583672151457, 0.0901583672151457, 0.1277635915021974, 0.1277635915021974, 0.1277635915021974, 0.07251562682994861, 0.07251562682994861, 0.07251562682994861, 0.09184096590545632, 0.09184096590545632, 0.09184096590545632, 0.12228819905744426, 0.12228819905744426, 0.12228819905744426, 0.988332182343756, 0.988332182343756, 0.988332182343756, 0.9891770169426964, 0.9891770169426964, 0.9891770169426964, 0.9884503634106159, 0.9884503634106159, 0.9884503634106159, 0.7871103326766143, 0.7871103326766143, 0.7871103326766143, 0.20486085450876668, 0.20486085450876668, 0.20486085450876668, 0.08851898155175497, 0.08851898155175497, 0.08851898155175497, 0.1561661322302934, 0.1561661322302934, 0.1561661322302934, 0.16209080146018184, 0.16209080146018184, 0.16209080146018184, 0.12578551256509707, 0.12578551256509707, 0.12578551256509707, 0.14565948081698477, 0.14565948081698477, 0.14565948081698477, 0.15582657285591572, 0.15582657285591572, 0.15582657285591572, 0.1358316239945383, 0.1358316239945383, 0.1358316239945383, 0.18137649948219448, 0.18137649948219448, 0.18137649948219448, 0.13187945323306283, 0.13187945323306283, 0.13187945323306283, 0.1888794517420268, 0.1888794517420268, 0.1888794517420268, 0.002604903045140272, 0.002604903045140272, 0.002604903045140272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605187650481295, 0.09605187650481295, 0.09605187650481295, 0.05000927279854239, 0.05000927279854239, 0.05000927279854239, 0.12375673182803659, 0.12375673182803659, 0.12375673182803659, 0.21239012796688328, 0.21239012796688328, 0.21239012796688328, 0.2517175763798455, 0.2517175763798455, 0.2517175763798455, 0.21576645570034925, 0.21576645570034925, 0.21576645570034925, 0.16514234586581655, 0.16514234586581655, 0.16514234586581655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08362614034073745, 0.08362614034073745, 0.08362614034073745, 0.5226712690759707, 0.5226712690759707, 0.5226712690759707, 0.21911989720355074, 0.21911989720355074, 0.21911989720355074, 0.4660501388497833, 0.4660501388497833, 0.4660501388497833, 0.04618979814417201, 0.04618979814417201, 0.04618979814417201, 0.12407520389343041, 0.12407520389343041, 0.12407520389343041, 0.09701079714778826, 0.09701079714778826, 0.09701079714778826, 0.3117341083433579, 0.3117341083433579, 0.3117341083433579, 0.20175097049704505, 0.20175097049704505, 0.20175097049704505, 0.18221615739087715, 0.18221615739087715, 0.18221615739087715, 0.34399268820377016, 0.34399268820377016, 0.34399268820377016, 0.34879291350702146, 0.34879291350702146, 0.34879291350702146, 0.22592992344711582, 0.22592992344711582, 0.22592992344711582, 0.14325642094747215, 0.14325642094747215, 0.14325642094747215, 0.2190525821811914, 0.2190525821811914, 0.2190525821811914, 0.14095278183718396, 0.14095278183718396, 0.14095278183718396, 0.2061994933720953, 0.2061994933720953, 0.2061994933720953, 0.2115242663747774, 0.2115242663747774, 0.2115242663747774, 0.204782860666486, 0.204782860666486, 0.204782860666486, 0.22529533788091716, 0.22529533788091716, 0.22529533788091716, 0.19360012905688662, 0.19360012905688662, 0.19360012905688662, 0.19835801789688012, 0.19835801789688012, 0.19835801789688012, 0.9283335237300852, 0.9283335237300852, 0.9283335237300852, 0.16783350562480415, 0.16783350562480415, 0.16783350562480415, 0.568753844702735, 0.568753844702735, 0.568753844702735, 0.28186383491780576, 0.28186383491780576, 0.28186383491780576, 0.21227414962010083, 0.21227414962010083, 0.21227414962010083, 0.09445096347404802, 0.09445096347404802, 0.09445096347404802, 0.1822880341412163, 0.1822880341412163, 0.1822880341412163, 0.20835895091140277, 0.20835895091140277, 0.20835895091140277, 0.19354841275314516, 0.19354841275314516, 0.19354841275314516, 0.08542554825104576, 0.08542554825104576, 0.08542554825104576, 0.09501729751709975, 0.09501729751709975, 0.09501729751709975, 0.078419323334318, 0.078419323334318, 0.078419323334318]}, "mutation_prompt": null}
{"id": "5d5bef44-f963-44c8-b6fb-85180533d120", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()  # Minor change in scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Slightly refined HybridPSODE with dynamic adjustment for exploration and exploitation balance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.9177551066105156, 0.9177551066105156, 0.9177551066105156, 0.8617146396317444, 0.8617146396317444, 0.8617146396317444, 0.8274671317062952, 0.8274671317062952, 0.8274671317062952, 0.07850641040556872, 0.07850641040556872, 0.07850641040556872, 0.6918151586903882, 0.6918151586903882, 0.6918151586903882, 0.004930059281824661, 0.004930059281824661, 0.004930059281824661, 0.09559266474116068, 0.09559266474116068, 0.09559266474116068, 0.1147168988860634, 0.1147168988860634, 0.1147168988860634, 0.13074601881599068, 0.13074601881599068, 0.13074601881599068, 0.11066636193384471, 0.11066636193384471, 0.11066636193384471, 0.1086577350059823, 0.1086577350059823, 0.1086577350059823, 0.07964269262314427, 0.07964269262314427, 0.07964269262314427, 0.990517383653785, 0.990517383653785, 0.990517383653785, 0.9909760283513813, 0.9909760283513813, 0.9909760283513813, 0.9907879764561028, 0.9907879764561028, 0.9907879764561028, 0.391765812212578, 0.391765812212578, 0.391765812212578, 0.4599075095640768, 0.4599075095640768, 0.4599075095640768, 0.08751835295568111, 0.08751835295568111, 0.08751835295568111, 0.7274280062535243, 0.7274280062535243, 0.7274280062535243, 0.16093320738683703, 0.16093320738683703, 0.16093320738683703, 0.7657712999949625, 0.7657712999949625, 0.7657712999949625, 0.23539884453763138, 0.23539884453763138, 0.23539884453763138, 0.17986739743037727, 0.17986739743037727, 0.17986739743037727, 0.1688232950751306, 0.1688232950751306, 0.1688232950751306, 0.3370581812927552, 0.3370581812927552, 0.3370581812927552, 0.22694710790948325, 0.22694710790948325, 0.22694710790948325, 0.7548587579738704, 0.7548587579738704, 0.7548587579738704, 0.07212969989129758, 0.07212969989129758, 0.07212969989129758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3321006462259044, 0.3321006462259044, 0.3321006462259044, 0.09258004280286258, 0.09258004280286258, 0.09258004280286258, 0.704948077668135, 0.704948077668135, 0.704948077668135, 0.003895187435677294, 0.003895187435677294, 0.003895187435677294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10130917199621958, 0.10130917199621958, 0.10130917199621958, 0.0992688574420798, 0.0992688574420798, 0.0992688574420798, 0.05185898216842799, 0.05185898216842799, 0.05185898216842799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.140673134420634, 0.140673134420634, 0.140673134420634, 0.7042812371669795, 0.7042812371669795, 0.7042812371669795, 0.7840310597531491, 0.7840310597531491, 0.7840310597531491, 0.8061228239157326, 0.8061228239157326, 0.8061228239157326, 0.062755428773964, 0.062755428773964, 0.062755428773964, 0.1355710338524897, 0.1355710338524897, 0.1355710338524897, 0.11285943962709266, 0.11285943962709266, 0.11285943962709266, 0.1890509894194724, 0.1890509894194724, 0.1890509894194724, 0.18585725325660762, 0.18585725325660762, 0.18585725325660762, 0.19342911799004148, 0.19342911799004148, 0.19342911799004148, 0.466144840148746, 0.466144840148746, 0.466144840148746, 0.41715136705716827, 0.41715136705716827, 0.41715136705716827, 0.14727317934114503, 0.14727317934114503, 0.14727317934114503, 0.394878217924287, 0.394878217924287, 0.394878217924287, 0.188861673268635, 0.188861673268635, 0.188861673268635, 0.11835764441681718, 0.11835764441681718, 0.11835764441681718, 0.18742203958945736, 0.18742203958945736, 0.18742203958945736, 0.18417994210458333, 0.18417994210458333, 0.18417994210458333, 0.22298087427400026, 0.22298087427400026, 0.22298087427400026, 0.20643151497754142, 0.20643151497754142, 0.20643151497754142, 0.18150123376038585, 0.18150123376038585, 0.18150123376038585, 0.2084841326632334, 0.2084841326632334, 0.2084841326632334, 0.8960663374722317, 0.8960663374722317, 0.8960663374722317, 0.20120100286063858, 0.20120100286063858, 0.20120100286063858, 0.8662648472298098, 0.8662648472298098, 0.8662648472298098, 0.8952891191115019, 0.8952891191115019, 0.8952891191115019, 0.20732424594362153, 0.20732424594362153, 0.20732424594362153, 0.10328825688309862, 0.10328825688309862, 0.10328825688309862, 0.20418916743030868, 0.20418916743030868, 0.20418916743030868, 0.17506352093505506, 0.17506352093505506, 0.17506352093505506, 0.21415065971629366, 0.21415065971629366, 0.21415065971629366, 0.07514045290338489, 0.07514045290338489, 0.07514045290338489, 0.09345487557059351, 0.09345487557059351, 0.09345487557059351, 0.08138629822369492, 0.08138629822369492, 0.08138629822369492]}, "mutation_prompt": null}
{"id": "5cdc3dc9-b461-485d-8262-5f1bef337e79", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.1 / self.dim)\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE by fine-tuning the velocity update equation and introducing dimension-based adaptive crossover.", "configspace": "", "generation": 83, "fitness": 0.2913329813827183, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.29.", "error": "", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.8636745068228628, 0.8636745068228628, 0.8636745068228628, 0.8935269646651169, 0.8935269646651169, 0.8935269646651169, 0.7898978491241253, 0.7898978491241253, 0.7898978491241253, 0.07779383766210735, 0.07779383766210735, 0.07779383766210735, 0.08483931657121557, 0.08483931657121557, 0.08483931657121557, 0.004894259442712823, 0.004894259442712823, 0.004894259442712823, 0.12021471870333167, 0.12021471870333167, 0.12021471870333167, 0.11417608236935173, 0.11417608236935173, 0.11417608236935173, 0.11997173219284774, 0.11997173219284774, 0.11997173219284774, 0.08452349269049775, 0.08452349269049775, 0.08452349269049775, 0.0861856965694695, 0.0861856965694695, 0.0861856965694695, 0.12437145043335263, 0.12437145043335263, 0.12437145043335263, 0.990517383653785, 0.990517383653785, 0.990517383653785, 0.9909760283513813, 0.9909760283513813, 0.9909760283513813, 0.9907879764561028, 0.9907879764561028, 0.9907879764561028, 0.5248512573340811, 0.5248512573340811, 0.5248512573340811, 0.6916220623695766, 0.6916220623695766, 0.6916220623695766, 0.08777844403544044, 0.08777844403544044, 0.08777844403544044, 0.7227891111554595, 0.7227891111554595, 0.7227891111554595, 0.16141641059472733, 0.16141641059472733, 0.16141641059472733, 0.12932357114169446, 0.12932357114169446, 0.12932357114169446, 0.23288302525270355, 0.23288302525270355, 0.23288302525270355, 0.7330298462384136, 0.7330298462384136, 0.7330298462384136, 0.7279573270911187, 0.7279573270911187, 0.7279573270911187, 0.12244193086474675, 0.12244193086474675, 0.12244193086474675, 0.2169055095727257, 0.2169055095727257, 0.2169055095727257, 0.1771313975514206, 0.1771313975514206, 0.1771313975514206, 0.03934978560511937, 0.03934978560511937, 0.03934978560511937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08016547098157711, 0.08016547098157711, 0.08016547098157711, 0.06667504235839605, 0.06667504235839605, 0.06667504235839605, 0.14015521923766405, 0.14015521923766405, 0.14015521923766405, 0.010040936819379231, 0.010040936819379231, 0.010040936819379231, 0.036627057043903344, 0.036627057043903344, 0.036627057043903344, 0.0972001967610886, 0.0972001967610886, 0.0972001967610886, 0.09482716895263732, 0.09482716895263732, 0.09482716895263732, 0.27496888912168715, 0.27496888912168715, 0.27496888912168715, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08312330472184726, 0.08312330472184726, 0.08312330472184726, 0.7763723775674852, 0.7763723775674852, 0.7763723775674852, 0.2779817511172201, 0.2779817511172201, 0.2779817511172201, 0.684669384188346, 0.684669384188346, 0.684669384188346, 0.067827146747514, 0.067827146747514, 0.067827146747514, 0.12633716221187474, 0.12633716221187474, 0.12633716221187474, 0.12333448912337286, 0.12333448912337286, 0.12333448912337286, 0.22291580969146707, 0.22291580969146707, 0.22291580969146707, 0.14693526451272154, 0.14693526451272154, 0.14693526451272154, 0.1568723674864143, 0.1568723674864143, 0.1568723674864143, 0.4575962740131032, 0.4575962740131032, 0.4575962740131032, 0.4199824909409051, 0.4199824909409051, 0.4199824909409051, 0.38174621271548626, 0.38174621271548626, 0.38174621271548626, 0.30696343732304976, 0.30696343732304976, 0.30696343732304976, 0.18750949325946853, 0.18750949325946853, 0.18750949325946853, 0.14183479487781225, 0.14183479487781225, 0.14183479487781225, 0.169678390073554, 0.169678390073554, 0.169678390073554, 0.18114353979400222, 0.18114353979400222, 0.18114353979400222, 0.16261233269163622, 0.16261233269163622, 0.16261233269163622, 0.17280553054945735, 0.17280553054945735, 0.17280553054945735, 0.5455490952158573, 0.5455490952158573, 0.5455490952158573, 0.17730151920460901, 0.17730151920460901, 0.17730151920460901, 0.8961420554210762, 0.8961420554210762, 0.8961420554210762, 0.1635599278118498, 0.1635599278118498, 0.1635599278118498, 0.1689942156245401, 0.1689942156245401, 0.1689942156245401, 0.888530138674594, 0.888530138674594, 0.888530138674594, 0.20661022137538254, 0.20661022137538254, 0.20661022137538254, 0.19579345678895876, 0.19579345678895876, 0.19579345678895876, 0.17284730456833208, 0.17284730456833208, 0.17284730456833208, 0.191980541230233, 0.191980541230233, 0.191980541230233, 0.17232506788998525, 0.17232506788998525, 0.17232506788998525, 0.08578732460359095, 0.08578732460359095, 0.08578732460359095, 0.09248768829845044, 0.09248768829845044, 0.09248768829845044, 0.06513359344970127, 0.06513359344970127, 0.06513359344970127]}, "mutation_prompt": null}
{"id": "9b9ba543-9e7d-47e7-98c4-bf5f418c1ca1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()  # Minor change in scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Slightly refined HybridPSODE with dynamic adjustment for exploration and exploitation balance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.9177551066105156, 0.9177551066105156, 0.9177551066105156, 0.8617146396317444, 0.8617146396317444, 0.8617146396317444, 0.8274671317062952, 0.8274671317062952, 0.8274671317062952, 0.07850641040556872, 0.07850641040556872, 0.07850641040556872, 0.6918151586903882, 0.6918151586903882, 0.6918151586903882, 0.004930059281824661, 0.004930059281824661, 0.004930059281824661, 0.09559266474116068, 0.09559266474116068, 0.09559266474116068, 0.1147168988860634, 0.1147168988860634, 0.1147168988860634, 0.13074601881599068, 0.13074601881599068, 0.13074601881599068, 0.11066636193384471, 0.11066636193384471, 0.11066636193384471, 0.1086577350059823, 0.1086577350059823, 0.1086577350059823, 0.07964269262314427, 0.07964269262314427, 0.07964269262314427, 0.990517383653785, 0.990517383653785, 0.990517383653785, 0.9909760283513813, 0.9909760283513813, 0.9909760283513813, 0.9907879764561028, 0.9907879764561028, 0.9907879764561028, 0.391765812212578, 0.391765812212578, 0.391765812212578, 0.4599075095640768, 0.4599075095640768, 0.4599075095640768, 0.08751835295568111, 0.08751835295568111, 0.08751835295568111, 0.7274280062535243, 0.7274280062535243, 0.7274280062535243, 0.16093320738683703, 0.16093320738683703, 0.16093320738683703, 0.7657712999949625, 0.7657712999949625, 0.7657712999949625, 0.23539884453763138, 0.23539884453763138, 0.23539884453763138, 0.17986739743037727, 0.17986739743037727, 0.17986739743037727, 0.1688232950751306, 0.1688232950751306, 0.1688232950751306, 0.3370581812927552, 0.3370581812927552, 0.3370581812927552, 0.22694710790948325, 0.22694710790948325, 0.22694710790948325, 0.7548587579738704, 0.7548587579738704, 0.7548587579738704, 0.07212969989129758, 0.07212969989129758, 0.07212969989129758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3321006462259044, 0.3321006462259044, 0.3321006462259044, 0.09258004280286258, 0.09258004280286258, 0.09258004280286258, 0.704948077668135, 0.704948077668135, 0.704948077668135, 0.003895187435677294, 0.003895187435677294, 0.003895187435677294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10130917199621958, 0.10130917199621958, 0.10130917199621958, 0.0992688574420798, 0.0992688574420798, 0.0992688574420798, 0.05185898216842799, 0.05185898216842799, 0.05185898216842799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.140673134420634, 0.140673134420634, 0.140673134420634, 0.7042812371669795, 0.7042812371669795, 0.7042812371669795, 0.7840310597531491, 0.7840310597531491, 0.7840310597531491, 0.8061228239157326, 0.8061228239157326, 0.8061228239157326, 0.062755428773964, 0.062755428773964, 0.062755428773964, 0.1355710338524897, 0.1355710338524897, 0.1355710338524897, 0.11285943962709266, 0.11285943962709266, 0.11285943962709266, 0.1890509894194724, 0.1890509894194724, 0.1890509894194724, 0.18585725325660762, 0.18585725325660762, 0.18585725325660762, 0.19342911799004148, 0.19342911799004148, 0.19342911799004148, 0.466144840148746, 0.466144840148746, 0.466144840148746, 0.41715136705716827, 0.41715136705716827, 0.41715136705716827, 0.14727317934114503, 0.14727317934114503, 0.14727317934114503, 0.394878217924287, 0.394878217924287, 0.394878217924287, 0.188861673268635, 0.188861673268635, 0.188861673268635, 0.11835764441681718, 0.11835764441681718, 0.11835764441681718, 0.18742203958945736, 0.18742203958945736, 0.18742203958945736, 0.18417994210458333, 0.18417994210458333, 0.18417994210458333, 0.22298087427400026, 0.22298087427400026, 0.22298087427400026, 0.20643151497754142, 0.20643151497754142, 0.20643151497754142, 0.18150123376038585, 0.18150123376038585, 0.18150123376038585, 0.2084841326632334, 0.2084841326632334, 0.2084841326632334, 0.8960663374722317, 0.8960663374722317, 0.8960663374722317, 0.20120100286063858, 0.20120100286063858, 0.20120100286063858, 0.8662648472298098, 0.8662648472298098, 0.8662648472298098, 0.8952891191115019, 0.8952891191115019, 0.8952891191115019, 0.20732424594362153, 0.20732424594362153, 0.20732424594362153, 0.10328825688309862, 0.10328825688309862, 0.10328825688309862, 0.20418916743030868, 0.20418916743030868, 0.20418916743030868, 0.17506352093505506, 0.17506352093505506, 0.17506352093505506, 0.21415065971629366, 0.21415065971629366, 0.21415065971629366, 0.07514045290338489, 0.07514045290338489, 0.07514045290338489, 0.09345487557059351, 0.09345487557059351, 0.09345487557059351, 0.08138629822369492, 0.08138629822369492, 0.08138629822369492]}, "mutation_prompt": null}
{"id": "a1a6655c-3d4a-43b8-877f-85bae7bbc8de", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()  # Minor change in scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Slightly refined HybridPSODE with dynamic adjustment for exploration and exploitation balance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.9177551066105156, 0.9177551066105156, 0.9177551066105156, 0.8617146396317444, 0.8617146396317444, 0.8617146396317444, 0.8274671317062952, 0.8274671317062952, 0.8274671317062952, 0.07850641040556872, 0.07850641040556872, 0.07850641040556872, 0.6918151586903882, 0.6918151586903882, 0.6918151586903882, 0.004930059281824661, 0.004930059281824661, 0.004930059281824661, 0.09559266474116068, 0.09559266474116068, 0.09559266474116068, 0.1147168988860634, 0.1147168988860634, 0.1147168988860634, 0.13074601881599068, 0.13074601881599068, 0.13074601881599068, 0.11066636193384471, 0.11066636193384471, 0.11066636193384471, 0.1086577350059823, 0.1086577350059823, 0.1086577350059823, 0.07964269262314427, 0.07964269262314427, 0.07964269262314427, 0.990517383653785, 0.990517383653785, 0.990517383653785, 0.9909760283513813, 0.9909760283513813, 0.9909760283513813, 0.9907879764561028, 0.9907879764561028, 0.9907879764561028, 0.391765812212578, 0.391765812212578, 0.391765812212578, 0.4599075095640768, 0.4599075095640768, 0.4599075095640768, 0.08751835295568111, 0.08751835295568111, 0.08751835295568111, 0.7274280062535243, 0.7274280062535243, 0.7274280062535243, 0.16093320738683703, 0.16093320738683703, 0.16093320738683703, 0.7657712999949625, 0.7657712999949625, 0.7657712999949625, 0.23539884453763138, 0.23539884453763138, 0.23539884453763138, 0.17986739743037727, 0.17986739743037727, 0.17986739743037727, 0.1688232950751306, 0.1688232950751306, 0.1688232950751306, 0.3370581812927552, 0.3370581812927552, 0.3370581812927552, 0.22694710790948325, 0.22694710790948325, 0.22694710790948325, 0.7548587579738704, 0.7548587579738704, 0.7548587579738704, 0.07212969989129758, 0.07212969989129758, 0.07212969989129758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3321006462259044, 0.3321006462259044, 0.3321006462259044, 0.09258004280286258, 0.09258004280286258, 0.09258004280286258, 0.704948077668135, 0.704948077668135, 0.704948077668135, 0.003895187435677294, 0.003895187435677294, 0.003895187435677294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10130917199621958, 0.10130917199621958, 0.10130917199621958, 0.0992688574420798, 0.0992688574420798, 0.0992688574420798, 0.05185898216842799, 0.05185898216842799, 0.05185898216842799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.140673134420634, 0.140673134420634, 0.140673134420634, 0.7042812371669795, 0.7042812371669795, 0.7042812371669795, 0.7840310597531491, 0.7840310597531491, 0.7840310597531491, 0.8061228239157326, 0.8061228239157326, 0.8061228239157326, 0.062755428773964, 0.062755428773964, 0.062755428773964, 0.1355710338524897, 0.1355710338524897, 0.1355710338524897, 0.11285943962709266, 0.11285943962709266, 0.11285943962709266, 0.1890509894194724, 0.1890509894194724, 0.1890509894194724, 0.18585725325660762, 0.18585725325660762, 0.18585725325660762, 0.19342911799004148, 0.19342911799004148, 0.19342911799004148, 0.466144840148746, 0.466144840148746, 0.466144840148746, 0.41715136705716827, 0.41715136705716827, 0.41715136705716827, 0.14727317934114503, 0.14727317934114503, 0.14727317934114503, 0.394878217924287, 0.394878217924287, 0.394878217924287, 0.188861673268635, 0.188861673268635, 0.188861673268635, 0.11835764441681718, 0.11835764441681718, 0.11835764441681718, 0.18742203958945736, 0.18742203958945736, 0.18742203958945736, 0.18417994210458333, 0.18417994210458333, 0.18417994210458333, 0.22298087427400026, 0.22298087427400026, 0.22298087427400026, 0.20643151497754142, 0.20643151497754142, 0.20643151497754142, 0.18150123376038585, 0.18150123376038585, 0.18150123376038585, 0.2084841326632334, 0.2084841326632334, 0.2084841326632334, 0.8960663374722317, 0.8960663374722317, 0.8960663374722317, 0.20120100286063858, 0.20120100286063858, 0.20120100286063858, 0.8662648472298098, 0.8662648472298098, 0.8662648472298098, 0.8952891191115019, 0.8952891191115019, 0.8952891191115019, 0.20732424594362153, 0.20732424594362153, 0.20732424594362153, 0.10328825688309862, 0.10328825688309862, 0.10328825688309862, 0.20418916743030868, 0.20418916743030868, 0.20418916743030868, 0.17506352093505506, 0.17506352093505506, 0.17506352093505506, 0.21415065971629366, 0.21415065971629366, 0.21415065971629366, 0.07514045290338489, 0.07514045290338489, 0.07514045290338489, 0.09345487557059351, 0.09345487557059351, 0.09345487557059351, 0.08138629822369492, 0.08138629822369492, 0.08138629822369492]}, "mutation_prompt": null}
{"id": "3a2f6107-9876-4e60-8681-a20fb1169ade", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()  # Minor change in scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Slightly refined HybridPSODE with dynamic adjustment for exploration and exploitation balance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.9177551066105156, 0.9177551066105156, 0.9177551066105156, 0.8617146396317444, 0.8617146396317444, 0.8617146396317444, 0.8274671317062952, 0.8274671317062952, 0.8274671317062952, 0.07850641040556872, 0.07850641040556872, 0.07850641040556872, 0.6918151586903882, 0.6918151586903882, 0.6918151586903882, 0.004930059281824661, 0.004930059281824661, 0.004930059281824661, 0.09559266474116068, 0.09559266474116068, 0.09559266474116068, 0.1147168988860634, 0.1147168988860634, 0.1147168988860634, 0.13074601881599068, 0.13074601881599068, 0.13074601881599068, 0.11066636193384471, 0.11066636193384471, 0.11066636193384471, 0.1086577350059823, 0.1086577350059823, 0.1086577350059823, 0.07964269262314427, 0.07964269262314427, 0.07964269262314427, 0.990517383653785, 0.990517383653785, 0.990517383653785, 0.9909760283513813, 0.9909760283513813, 0.9909760283513813, 0.9907879764561028, 0.9907879764561028, 0.9907879764561028, 0.391765812212578, 0.391765812212578, 0.391765812212578, 0.4599075095640768, 0.4599075095640768, 0.4599075095640768, 0.08751835295568111, 0.08751835295568111, 0.08751835295568111, 0.7274280062535243, 0.7274280062535243, 0.7274280062535243, 0.16093320738683703, 0.16093320738683703, 0.16093320738683703, 0.7657712999949625, 0.7657712999949625, 0.7657712999949625, 0.23539884453763138, 0.23539884453763138, 0.23539884453763138, 0.17986739743037727, 0.17986739743037727, 0.17986739743037727, 0.1688232950751306, 0.1688232950751306, 0.1688232950751306, 0.3370581812927552, 0.3370581812927552, 0.3370581812927552, 0.22694710790948325, 0.22694710790948325, 0.22694710790948325, 0.7548587579738704, 0.7548587579738704, 0.7548587579738704, 0.07212969989129758, 0.07212969989129758, 0.07212969989129758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3321006462259044, 0.3321006462259044, 0.3321006462259044, 0.09258004280286258, 0.09258004280286258, 0.09258004280286258, 0.704948077668135, 0.704948077668135, 0.704948077668135, 0.003895187435677294, 0.003895187435677294, 0.003895187435677294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10130917199621958, 0.10130917199621958, 0.10130917199621958, 0.0992688574420798, 0.0992688574420798, 0.0992688574420798, 0.05185898216842799, 0.05185898216842799, 0.05185898216842799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.140673134420634, 0.140673134420634, 0.140673134420634, 0.7042812371669795, 0.7042812371669795, 0.7042812371669795, 0.7840310597531491, 0.7840310597531491, 0.7840310597531491, 0.8061228239157326, 0.8061228239157326, 0.8061228239157326, 0.062755428773964, 0.062755428773964, 0.062755428773964, 0.1355710338524897, 0.1355710338524897, 0.1355710338524897, 0.11285943962709266, 0.11285943962709266, 0.11285943962709266, 0.1890509894194724, 0.1890509894194724, 0.1890509894194724, 0.18585725325660762, 0.18585725325660762, 0.18585725325660762, 0.19342911799004148, 0.19342911799004148, 0.19342911799004148, 0.466144840148746, 0.466144840148746, 0.466144840148746, 0.41715136705716827, 0.41715136705716827, 0.41715136705716827, 0.14727317934114503, 0.14727317934114503, 0.14727317934114503, 0.394878217924287, 0.394878217924287, 0.394878217924287, 0.188861673268635, 0.188861673268635, 0.188861673268635, 0.11835764441681718, 0.11835764441681718, 0.11835764441681718, 0.18742203958945736, 0.18742203958945736, 0.18742203958945736, 0.18417994210458333, 0.18417994210458333, 0.18417994210458333, 0.22298087427400026, 0.22298087427400026, 0.22298087427400026, 0.20643151497754142, 0.20643151497754142, 0.20643151497754142, 0.18150123376038585, 0.18150123376038585, 0.18150123376038585, 0.2084841326632334, 0.2084841326632334, 0.2084841326632334, 0.8960663374722317, 0.8960663374722317, 0.8960663374722317, 0.20120100286063858, 0.20120100286063858, 0.20120100286063858, 0.8662648472298098, 0.8662648472298098, 0.8662648472298098, 0.8952891191115019, 0.8952891191115019, 0.8952891191115019, 0.20732424594362153, 0.20732424594362153, 0.20732424594362153, 0.10328825688309862, 0.10328825688309862, 0.10328825688309862, 0.20418916743030868, 0.20418916743030868, 0.20418916743030868, 0.17506352093505506, 0.17506352093505506, 0.17506352093505506, 0.21415065971629366, 0.21415065971629366, 0.21415065971629366, 0.07514045290338489, 0.07514045290338489, 0.07514045290338489, 0.09345487557059351, 0.09345487557059351, 0.09345487557059351, 0.08138629822369492, 0.08138629822369492, 0.08138629822369492]}, "mutation_prompt": null}
{"id": "e9138d35-b11b-4633-974e-b9ebd4004b4c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            pop_diversity = np.std(positions, axis=0).mean()  # Calculate population diversity\n            self.CR = 0.7 + 0.3 * (1 - pop_diversity / (self.max_bound - self.min_bound))  # Dynamic CR based on diversity\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved exploration-exploitation balance by adapting crossover rate dynamically based on population diversity.", "configspace": "", "generation": 87, "fitness": 0.28507733965923887, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.8721736597506068, 0.8721736597506068, 0.8721736597506068, 0.19060273529161642, 0.19060273529161642, 0.19060273529161642, 0.7961747851002463, 0.7961747851002463, 0.7961747851002463, 0.07717657872831829, 0.07717657872831829, 0.07717657872831829, 0.7060718762276055, 0.7060718762276055, 0.7060718762276055, 0.004994125426912577, 0.004994125426912577, 0.004994125426912577, 0.10411928004277582, 0.10411928004277582, 0.10411928004277582, 0.11971068407570962, 0.11971068407570962, 0.11971068407570962, 0.12126472281397749, 0.12126472281397749, 0.12126472281397749, 0.09702413490025774, 0.09702413490025774, 0.09702413490025774, 0.12288480920490441, 0.12288480920490441, 0.12288480920490441, 0.09719795527929875, 0.09719795527929875, 0.09719795527929875, 0.9880087796552269, 0.9880087796552269, 0.9880087796552269, 0.9908046227055565, 0.9908046227055565, 0.9908046227055565, 0.990950433090198, 0.990950433090198, 0.990950433090198, 0.45140859913304443, 0.45140859913304443, 0.45140859913304443, 0.15194689309173626, 0.15194689309173626, 0.15194689309173626, 0.08697776453704775, 0.08697776453704775, 0.08697776453704775, 0.7381491554135551, 0.7381491554135551, 0.7381491554135551, 0.16080757387150768, 0.16080757387150768, 0.16080757387150768, 0.8221481547441898, 0.8221481547441898, 0.8221481547441898, 0.24229001328228028, 0.24229001328228028, 0.24229001328228028, 0.20599151079662914, 0.20599151079662914, 0.20599151079662914, 0.2797454574661222, 0.2797454574661222, 0.2797454574661222, 0.13386870232752057, 0.13386870232752057, 0.13386870232752057, 0.269503585716904, 0.269503585716904, 0.269503585716904, 0.3882834640803746, 0.3882834640803746, 0.3882834640803746, 0.718489289327773, 0.718489289327773, 0.718489289327773, 0.05735739288656916, 0.05735739288656916, 0.05735739288656916, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08990929661304181, 0.08990929661304181, 0.08990929661304181, 0.6382426005769612, 0.6382426005769612, 0.6382426005769612, 0.06042499048274985, 0.06042499048274985, 0.06042499048274985, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09665326724171208, 0.09665326724171208, 0.09665326724171208, 0.10628226982300437, 0.10628226982300437, 0.10628226982300437, 0.3757098499447866, 0.3757098499447866, 0.3757098499447866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08384936580791369, 0.08384936580791369, 0.08384936580791369, 0.7812839176167952, 0.7812839176167952, 0.7812839176167952, 0.18218233918211157, 0.18218233918211157, 0.18218233918211157, 0.7915361807038261, 0.7915361807038261, 0.7915361807038261, 0.06475593113691014, 0.06475593113691014, 0.06475593113691014, 0.14523965226343083, 0.14523965226343083, 0.14523965226343083, 0.10049511738659944, 0.10049511738659944, 0.10049511738659944, 0.1411298905970101, 0.1411298905970101, 0.1411298905970101, 0.10577257698548725, 0.10577257698548725, 0.10577257698548725, 0.14052477974855315, 0.14052477974855315, 0.14052477974855315, 0.3635493128395213, 0.3635493128395213, 0.3635493128395213, 0.37136918850059375, 0.37136918850059375, 0.37136918850059375, 0.17240162402993842, 0.17240162402993842, 0.17240162402993842, 0.25692799710905934, 0.25692799710905934, 0.25692799710905934, 0.17327149880611536, 0.17327149880611536, 0.17327149880611536, 0.14319880874324276, 0.14319880874324276, 0.14319880874324276, 0.18931241336931226, 0.18931241336931226, 0.18931241336931226, 0.19558320272582164, 0.19558320272582164, 0.19558320272582164, 0.19082899002403586, 0.19082899002403586, 0.19082899002403586, 0.19423220907100824, 0.19423220907100824, 0.19423220907100824, 0.18619587258624892, 0.18619587258624892, 0.18619587258624892, 0.1727888388790796, 0.1727888388790796, 0.1727888388790796, 0.9272580470827274, 0.9272580470827274, 0.9272580470827274, 0.1649937540521561, 0.1649937540521561, 0.1649937540521561, 0.16882075407809483, 0.16882075407809483, 0.16882075407809483, 0.1700122684597689, 0.1700122684597689, 0.1700122684597689, 0.6679499401575406, 0.6679499401575406, 0.6679499401575406, 0.09243561609595652, 0.09243561609595652, 0.09243561609595652, 0.17939082032230214, 0.17939082032230214, 0.17939082032230214, 0.18203020672199455, 0.18203020672199455, 0.18203020672199455, 0.19916594067289184, 0.19916594067289184, 0.19916594067289184, 0.08030219246385673, 0.08030219246385673, 0.08030219246385673, 0.1071249915826118, 0.1071249915826118, 0.1071249915826118, 0.08600520201196138, 0.08600520201196138, 0.08600520201196138]}, "mutation_prompt": null}
{"id": "fcdb69f0-672f-48d2-8552-5bde65287bf7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += 0.95 * velocities  # Slight adjustment in velocity scaling\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive velocity scaling for improved convergence.", "configspace": "", "generation": 88, "fitness": 0.31025592059930956, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.28.", "error": "", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.8566425244653351, 0.8566425244653351, 0.8566425244653351, 0.190832669261369, 0.190832669261369, 0.190832669261369, 0.8682069492785427, 0.8682069492785427, 0.8682069492785427, 0.7108031611416752, 0.7108031611416752, 0.7108031611416752, 0.7485215758019695, 0.7485215758019695, 0.7485215758019695, 0.005022443189748649, 0.005022443189748649, 0.005022443189748649, 0.11319169949425745, 0.11319169949425745, 0.11319169949425745, 0.10986620637862599, 0.10986620637862599, 0.10986620637862599, 0.10502355165672739, 0.10502355165672739, 0.10502355165672739, 0.12258317693377596, 0.12258317693377596, 0.12258317693377596, 0.11809013531968937, 0.11809013531968937, 0.11809013531968937, 0.09554949824525683, 0.09554949824525683, 0.09554949824525683, 0.9905121876850113, 0.9905121876850113, 0.9905121876850113, 0.9907485168480923, 0.9907485168480923, 0.9907485168480923, 0.9887566237573133, 0.9887566237573133, 0.9887566237573133, 0.35965368739409864, 0.35965368739409864, 0.35965368739409864, 0.4876646919117814, 0.4876646919117814, 0.4876646919117814, 0.08330848050347339, 0.08330848050347339, 0.08330848050347339, 0.7168049771199121, 0.7168049771199121, 0.7168049771199121, 0.1619292422573595, 0.1619292422573595, 0.1619292422573595, 0.7970280240189009, 0.7970280240189009, 0.7970280240189009, 0.7133560326206598, 0.7133560326206598, 0.7133560326206598, 0.16448960226727827, 0.16448960226727827, 0.16448960226727827, 0.13286391740895376, 0.13286391740895376, 0.13286391740895376, 0.3785263504722196, 0.3785263504722196, 0.3785263504722196, 0.16443528303696509, 0.16443528303696509, 0.16443528303696509, 0.7958111183594534, 0.7958111183594534, 0.7958111183594534, 0.1862172964661838, 0.1862172964661838, 0.1862172964661838, 0.05873362680350458, 0.05873362680350458, 0.05873362680350458, 0.42790501213145804, 0.42790501213145804, 0.42790501213145804, 0.15923590298671375, 0.15923590298671375, 0.15923590298671375, 0.7102941315632041, 0.7102941315632041, 0.7102941315632041, 0.04833217511989063, 0.04833217511989063, 0.04833217511989063, 0.03458571665450905, 0.03458571665450905, 0.03458571665450905, 0.09752208160490283, 0.09752208160490283, 0.09752208160490283, 0.17015818676051075, 0.17015818676051075, 0.17015818676051075, 0.20374877100492939, 0.20374877100492939, 0.20374877100492939, 0.27370352277017973, 0.27370352277017973, 0.27370352277017973, 0.08405766085616873, 0.08405766085616873, 0.08405766085616873, 0.8436823565930621, 0.8436823565930621, 0.8436823565930621, 0.616020604906488, 0.616020604906488, 0.616020604906488, 0.5409766300940895, 0.5409766300940895, 0.5409766300940895, 0.0705111147523465, 0.0705111147523465, 0.0705111147523465, 0.09657455447471708, 0.09657455447471708, 0.09657455447471708, 0.17204912623294166, 0.17204912623294166, 0.17204912623294166, 0.14495301136021066, 0.14495301136021066, 0.14495301136021066, 0.24617337947996099, 0.24617337947996099, 0.24617337947996099, 0.10819334394259983, 0.10819334394259983, 0.10819334394259983, 0.2579813426635892, 0.2579813426635892, 0.2579813426635892, 0.3486225078660352, 0.3486225078660352, 0.3486225078660352, 0.21836361706293106, 0.21836361706293106, 0.21836361706293106, 0.2400878913465384, 0.2400878913465384, 0.2400878913465384, 0.1689950342626224, 0.1689950342626224, 0.1689950342626224, 0.1422189876511033, 0.1422189876511033, 0.1422189876511033, 0.18501544668344072, 0.18501544668344072, 0.18501544668344072, 0.20109372734586362, 0.20109372734586362, 0.20109372734586362, 0.1979847839586637, 0.1979847839586637, 0.1979847839586637, 0.2230336676861533, 0.2230336676861533, 0.2230336676861533, 0.1941628524244603, 0.1941628524244603, 0.1941628524244603, 0.18853534018955043, 0.18853534018955043, 0.18853534018955043, 0.8895540020177577, 0.8895540020177577, 0.8895540020177577, 0.16482281912730234, 0.16482281912730234, 0.16482281912730234, 0.16892427493750362, 0.16892427493750362, 0.16892427493750362, 0.20669186306479037, 0.20669186306479037, 0.20669186306479037, 0.2015824260618353, 0.2015824260618353, 0.2015824260618353, 0.09391796558213283, 0.09391796558213283, 0.09391796558213283, 0.1835969792838016, 0.1835969792838016, 0.1835969792838016, 0.18387498991946272, 0.18387498991946272, 0.18387498991946272, 0.17512212367895041, 0.17512212367895041, 0.17512212367895041, 0.07784235341524237, 0.07784235341524237, 0.07784235341524237, 0.07969419008642142, 0.07969419008642142, 0.07969419008642142, 0.082856563447121, 0.082856563447121, 0.082856563447121]}, "mutation_prompt": null}
{"id": "5a707c0d-3828-4958-8119-dcf9dbbdd8bc", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()  # Minor change in scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Slightly refined HybridPSODE with dynamic adjustment for exploration and exploitation balance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.9177551066105156, 0.9177551066105156, 0.9177551066105156, 0.8617146396317444, 0.8617146396317444, 0.8617146396317444, 0.8274671317062952, 0.8274671317062952, 0.8274671317062952, 0.07850641040556872, 0.07850641040556872, 0.07850641040556872, 0.6918151586903882, 0.6918151586903882, 0.6918151586903882, 0.004930059281824661, 0.004930059281824661, 0.004930059281824661, 0.09559266474116068, 0.09559266474116068, 0.09559266474116068, 0.1147168988860634, 0.1147168988860634, 0.1147168988860634, 0.13074601881599068, 0.13074601881599068, 0.13074601881599068, 0.11066636193384471, 0.11066636193384471, 0.11066636193384471, 0.1086577350059823, 0.1086577350059823, 0.1086577350059823, 0.07964269262314427, 0.07964269262314427, 0.07964269262314427, 0.990517383653785, 0.990517383653785, 0.990517383653785, 0.9909760283513813, 0.9909760283513813, 0.9909760283513813, 0.9907879764561028, 0.9907879764561028, 0.9907879764561028, 0.391765812212578, 0.391765812212578, 0.391765812212578, 0.4599075095640768, 0.4599075095640768, 0.4599075095640768, 0.08751835295568111, 0.08751835295568111, 0.08751835295568111, 0.7274280062535243, 0.7274280062535243, 0.7274280062535243, 0.16093320738683703, 0.16093320738683703, 0.16093320738683703, 0.7657712999949625, 0.7657712999949625, 0.7657712999949625, 0.23539884453763138, 0.23539884453763138, 0.23539884453763138, 0.17986739743037727, 0.17986739743037727, 0.17986739743037727, 0.1688232950751306, 0.1688232950751306, 0.1688232950751306, 0.3370581812927552, 0.3370581812927552, 0.3370581812927552, 0.22694710790948325, 0.22694710790948325, 0.22694710790948325, 0.7548587579738704, 0.7548587579738704, 0.7548587579738704, 0.07212969989129758, 0.07212969989129758, 0.07212969989129758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3321006462259044, 0.3321006462259044, 0.3321006462259044, 0.09258004280286258, 0.09258004280286258, 0.09258004280286258, 0.704948077668135, 0.704948077668135, 0.704948077668135, 0.003895187435677294, 0.003895187435677294, 0.003895187435677294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10130917199621958, 0.10130917199621958, 0.10130917199621958, 0.0992688574420798, 0.0992688574420798, 0.0992688574420798, 0.05185898216842799, 0.05185898216842799, 0.05185898216842799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.140673134420634, 0.140673134420634, 0.140673134420634, 0.7042812371669795, 0.7042812371669795, 0.7042812371669795, 0.7840310597531491, 0.7840310597531491, 0.7840310597531491, 0.8061228239157326, 0.8061228239157326, 0.8061228239157326, 0.062755428773964, 0.062755428773964, 0.062755428773964, 0.1355710338524897, 0.1355710338524897, 0.1355710338524897, 0.11285943962709266, 0.11285943962709266, 0.11285943962709266, 0.1890509894194724, 0.1890509894194724, 0.1890509894194724, 0.18585725325660762, 0.18585725325660762, 0.18585725325660762, 0.19342911799004148, 0.19342911799004148, 0.19342911799004148, 0.466144840148746, 0.466144840148746, 0.466144840148746, 0.41715136705716827, 0.41715136705716827, 0.41715136705716827, 0.14727317934114503, 0.14727317934114503, 0.14727317934114503, 0.394878217924287, 0.394878217924287, 0.394878217924287, 0.188861673268635, 0.188861673268635, 0.188861673268635, 0.11835764441681718, 0.11835764441681718, 0.11835764441681718, 0.18742203958945736, 0.18742203958945736, 0.18742203958945736, 0.18417994210458333, 0.18417994210458333, 0.18417994210458333, 0.22298087427400026, 0.22298087427400026, 0.22298087427400026, 0.20643151497754142, 0.20643151497754142, 0.20643151497754142, 0.18150123376038585, 0.18150123376038585, 0.18150123376038585, 0.2084841326632334, 0.2084841326632334, 0.2084841326632334, 0.8960663374722317, 0.8960663374722317, 0.8960663374722317, 0.20120100286063858, 0.20120100286063858, 0.20120100286063858, 0.8662648472298098, 0.8662648472298098, 0.8662648472298098, 0.8952891191115019, 0.8952891191115019, 0.8952891191115019, 0.20732424594362153, 0.20732424594362153, 0.20732424594362153, 0.10328825688309862, 0.10328825688309862, 0.10328825688309862, 0.20418916743030868, 0.20418916743030868, 0.20418916743030868, 0.17506352093505506, 0.17506352093505506, 0.17506352093505506, 0.21415065971629366, 0.21415065971629366, 0.21415065971629366, 0.07514045290338489, 0.07514045290338489, 0.07514045290338489, 0.09345487557059351, 0.09345487557059351, 0.09345487557059351, 0.08138629822369492, 0.08138629822369492, 0.08138629822369492]}, "mutation_prompt": null}
{"id": "1f43abd1-1863-49cd-802d-73f5faf404a6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()  # Minor change in scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Slightly refined HybridPSODE with dynamic adjustment for exploration and exploitation balance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.9177551066105156, 0.9177551066105156, 0.9177551066105156, 0.8617146396317444, 0.8617146396317444, 0.8617146396317444, 0.8274671317062952, 0.8274671317062952, 0.8274671317062952, 0.07850641040556872, 0.07850641040556872, 0.07850641040556872, 0.6918151586903882, 0.6918151586903882, 0.6918151586903882, 0.004930059281824661, 0.004930059281824661, 0.004930059281824661, 0.09559266474116068, 0.09559266474116068, 0.09559266474116068, 0.1147168988860634, 0.1147168988860634, 0.1147168988860634, 0.13074601881599068, 0.13074601881599068, 0.13074601881599068, 0.11066636193384471, 0.11066636193384471, 0.11066636193384471, 0.1086577350059823, 0.1086577350059823, 0.1086577350059823, 0.07964269262314427, 0.07964269262314427, 0.07964269262314427, 0.990517383653785, 0.990517383653785, 0.990517383653785, 0.9909760283513813, 0.9909760283513813, 0.9909760283513813, 0.9907879764561028, 0.9907879764561028, 0.9907879764561028, 0.391765812212578, 0.391765812212578, 0.391765812212578, 0.4599075095640768, 0.4599075095640768, 0.4599075095640768, 0.08751835295568111, 0.08751835295568111, 0.08751835295568111, 0.7274280062535243, 0.7274280062535243, 0.7274280062535243, 0.16093320738683703, 0.16093320738683703, 0.16093320738683703, 0.7657712999949625, 0.7657712999949625, 0.7657712999949625, 0.23539884453763138, 0.23539884453763138, 0.23539884453763138, 0.17986739743037727, 0.17986739743037727, 0.17986739743037727, 0.1688232950751306, 0.1688232950751306, 0.1688232950751306, 0.3370581812927552, 0.3370581812927552, 0.3370581812927552, 0.22694710790948325, 0.22694710790948325, 0.22694710790948325, 0.7548587579738704, 0.7548587579738704, 0.7548587579738704, 0.07212969989129758, 0.07212969989129758, 0.07212969989129758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3321006462259044, 0.3321006462259044, 0.3321006462259044, 0.09258004280286258, 0.09258004280286258, 0.09258004280286258, 0.704948077668135, 0.704948077668135, 0.704948077668135, 0.003895187435677294, 0.003895187435677294, 0.003895187435677294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10130917199621958, 0.10130917199621958, 0.10130917199621958, 0.0992688574420798, 0.0992688574420798, 0.0992688574420798, 0.05185898216842799, 0.05185898216842799, 0.05185898216842799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.140673134420634, 0.140673134420634, 0.140673134420634, 0.7042812371669795, 0.7042812371669795, 0.7042812371669795, 0.7840310597531491, 0.7840310597531491, 0.7840310597531491, 0.8061228239157326, 0.8061228239157326, 0.8061228239157326, 0.062755428773964, 0.062755428773964, 0.062755428773964, 0.1355710338524897, 0.1355710338524897, 0.1355710338524897, 0.11285943962709266, 0.11285943962709266, 0.11285943962709266, 0.1890509894194724, 0.1890509894194724, 0.1890509894194724, 0.18585725325660762, 0.18585725325660762, 0.18585725325660762, 0.19342911799004148, 0.19342911799004148, 0.19342911799004148, 0.466144840148746, 0.466144840148746, 0.466144840148746, 0.41715136705716827, 0.41715136705716827, 0.41715136705716827, 0.14727317934114503, 0.14727317934114503, 0.14727317934114503, 0.394878217924287, 0.394878217924287, 0.394878217924287, 0.188861673268635, 0.188861673268635, 0.188861673268635, 0.11835764441681718, 0.11835764441681718, 0.11835764441681718, 0.18742203958945736, 0.18742203958945736, 0.18742203958945736, 0.18417994210458333, 0.18417994210458333, 0.18417994210458333, 0.22298087427400026, 0.22298087427400026, 0.22298087427400026, 0.20643151497754142, 0.20643151497754142, 0.20643151497754142, 0.18150123376038585, 0.18150123376038585, 0.18150123376038585, 0.2084841326632334, 0.2084841326632334, 0.2084841326632334, 0.8960663374722317, 0.8960663374722317, 0.8960663374722317, 0.20120100286063858, 0.20120100286063858, 0.20120100286063858, 0.8662648472298098, 0.8662648472298098, 0.8662648472298098, 0.8952891191115019, 0.8952891191115019, 0.8952891191115019, 0.20732424594362153, 0.20732424594362153, 0.20732424594362153, 0.10328825688309862, 0.10328825688309862, 0.10328825688309862, 0.20418916743030868, 0.20418916743030868, 0.20418916743030868, 0.17506352093505506, 0.17506352093505506, 0.17506352093505506, 0.21415065971629366, 0.21415065971629366, 0.21415065971629366, 0.07514045290338489, 0.07514045290338489, 0.07514045290338489, 0.09345487557059351, 0.09345487557059351, 0.09345487557059351, 0.08138629822369492, 0.08138629822369492, 0.08138629822369492]}, "mutation_prompt": null}
{"id": "7bbc7f17-1e3c-4d6a-9792-262742d3333b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()  # Minor change in scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Slightly refined HybridPSODE with dynamic adjustment for exploration and exploitation balance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.9177551066105156, 0.9177551066105156, 0.9177551066105156, 0.8617146396317444, 0.8617146396317444, 0.8617146396317444, 0.8274671317062952, 0.8274671317062952, 0.8274671317062952, 0.07850641040556872, 0.07850641040556872, 0.07850641040556872, 0.6918151586903882, 0.6918151586903882, 0.6918151586903882, 0.004930059281824661, 0.004930059281824661, 0.004930059281824661, 0.09559266474116068, 0.09559266474116068, 0.09559266474116068, 0.1147168988860634, 0.1147168988860634, 0.1147168988860634, 0.13074601881599068, 0.13074601881599068, 0.13074601881599068, 0.11066636193384471, 0.11066636193384471, 0.11066636193384471, 0.1086577350059823, 0.1086577350059823, 0.1086577350059823, 0.07964269262314427, 0.07964269262314427, 0.07964269262314427, 0.990517383653785, 0.990517383653785, 0.990517383653785, 0.9909760283513813, 0.9909760283513813, 0.9909760283513813, 0.9907879764561028, 0.9907879764561028, 0.9907879764561028, 0.391765812212578, 0.391765812212578, 0.391765812212578, 0.4599075095640768, 0.4599075095640768, 0.4599075095640768, 0.08751835295568111, 0.08751835295568111, 0.08751835295568111, 0.7274280062535243, 0.7274280062535243, 0.7274280062535243, 0.16093320738683703, 0.16093320738683703, 0.16093320738683703, 0.7657712999949625, 0.7657712999949625, 0.7657712999949625, 0.23539884453763138, 0.23539884453763138, 0.23539884453763138, 0.17986739743037727, 0.17986739743037727, 0.17986739743037727, 0.1688232950751306, 0.1688232950751306, 0.1688232950751306, 0.3370581812927552, 0.3370581812927552, 0.3370581812927552, 0.22694710790948325, 0.22694710790948325, 0.22694710790948325, 0.7548587579738704, 0.7548587579738704, 0.7548587579738704, 0.07212969989129758, 0.07212969989129758, 0.07212969989129758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3321006462259044, 0.3321006462259044, 0.3321006462259044, 0.09258004280286258, 0.09258004280286258, 0.09258004280286258, 0.704948077668135, 0.704948077668135, 0.704948077668135, 0.003895187435677294, 0.003895187435677294, 0.003895187435677294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10130917199621958, 0.10130917199621958, 0.10130917199621958, 0.0992688574420798, 0.0992688574420798, 0.0992688574420798, 0.05185898216842799, 0.05185898216842799, 0.05185898216842799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.140673134420634, 0.140673134420634, 0.140673134420634, 0.7042812371669795, 0.7042812371669795, 0.7042812371669795, 0.7840310597531491, 0.7840310597531491, 0.7840310597531491, 0.8061228239157326, 0.8061228239157326, 0.8061228239157326, 0.062755428773964, 0.062755428773964, 0.062755428773964, 0.1355710338524897, 0.1355710338524897, 0.1355710338524897, 0.11285943962709266, 0.11285943962709266, 0.11285943962709266, 0.1890509894194724, 0.1890509894194724, 0.1890509894194724, 0.18585725325660762, 0.18585725325660762, 0.18585725325660762, 0.19342911799004148, 0.19342911799004148, 0.19342911799004148, 0.466144840148746, 0.466144840148746, 0.466144840148746, 0.41715136705716827, 0.41715136705716827, 0.41715136705716827, 0.14727317934114503, 0.14727317934114503, 0.14727317934114503, 0.394878217924287, 0.394878217924287, 0.394878217924287, 0.188861673268635, 0.188861673268635, 0.188861673268635, 0.11835764441681718, 0.11835764441681718, 0.11835764441681718, 0.18742203958945736, 0.18742203958945736, 0.18742203958945736, 0.18417994210458333, 0.18417994210458333, 0.18417994210458333, 0.22298087427400026, 0.22298087427400026, 0.22298087427400026, 0.20643151497754142, 0.20643151497754142, 0.20643151497754142, 0.18150123376038585, 0.18150123376038585, 0.18150123376038585, 0.2084841326632334, 0.2084841326632334, 0.2084841326632334, 0.8960663374722317, 0.8960663374722317, 0.8960663374722317, 0.20120100286063858, 0.20120100286063858, 0.20120100286063858, 0.8662648472298098, 0.8662648472298098, 0.8662648472298098, 0.8952891191115019, 0.8952891191115019, 0.8952891191115019, 0.20732424594362153, 0.20732424594362153, 0.20732424594362153, 0.10328825688309862, 0.10328825688309862, 0.10328825688309862, 0.20418916743030868, 0.20418916743030868, 0.20418916743030868, 0.17506352093505506, 0.17506352093505506, 0.17506352093505506, 0.21415065971629366, 0.21415065971629366, 0.21415065971629366, 0.07514045290338489, 0.07514045290338489, 0.07514045290338489, 0.09345487557059351, 0.09345487557059351, 0.09345487557059351, 0.08138629822369492, 0.08138629822369492, 0.08138629822369492]}, "mutation_prompt": null}
{"id": "7615f23e-e50c-47cd-bb5f-b8fd8d68f2bd", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()  # Minor change in scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Slightly refined HybridPSODE with dynamic adjustment for exploration and exploitation balance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.9177551066105156, 0.9177551066105156, 0.9177551066105156, 0.8617146396317444, 0.8617146396317444, 0.8617146396317444, 0.8274671317062952, 0.8274671317062952, 0.8274671317062952, 0.07850641040556872, 0.07850641040556872, 0.07850641040556872, 0.6918151586903882, 0.6918151586903882, 0.6918151586903882, 0.004930059281824661, 0.004930059281824661, 0.004930059281824661, 0.09559266474116068, 0.09559266474116068, 0.09559266474116068, 0.1147168988860634, 0.1147168988860634, 0.1147168988860634, 0.13074601881599068, 0.13074601881599068, 0.13074601881599068, 0.11066636193384471, 0.11066636193384471, 0.11066636193384471, 0.1086577350059823, 0.1086577350059823, 0.1086577350059823, 0.07964269262314427, 0.07964269262314427, 0.07964269262314427, 0.990517383653785, 0.990517383653785, 0.990517383653785, 0.9909760283513813, 0.9909760283513813, 0.9909760283513813, 0.9907879764561028, 0.9907879764561028, 0.9907879764561028, 0.391765812212578, 0.391765812212578, 0.391765812212578, 0.4599075095640768, 0.4599075095640768, 0.4599075095640768, 0.08751835295568111, 0.08751835295568111, 0.08751835295568111, 0.7274280062535243, 0.7274280062535243, 0.7274280062535243, 0.16093320738683703, 0.16093320738683703, 0.16093320738683703, 0.7657712999949625, 0.7657712999949625, 0.7657712999949625, 0.23539884453763138, 0.23539884453763138, 0.23539884453763138, 0.17986739743037727, 0.17986739743037727, 0.17986739743037727, 0.1688232950751306, 0.1688232950751306, 0.1688232950751306, 0.3370581812927552, 0.3370581812927552, 0.3370581812927552, 0.22694710790948325, 0.22694710790948325, 0.22694710790948325, 0.7548587579738704, 0.7548587579738704, 0.7548587579738704, 0.07212969989129758, 0.07212969989129758, 0.07212969989129758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3321006462259044, 0.3321006462259044, 0.3321006462259044, 0.09258004280286258, 0.09258004280286258, 0.09258004280286258, 0.704948077668135, 0.704948077668135, 0.704948077668135, 0.003895187435677294, 0.003895187435677294, 0.003895187435677294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10130917199621958, 0.10130917199621958, 0.10130917199621958, 0.0992688574420798, 0.0992688574420798, 0.0992688574420798, 0.05185898216842799, 0.05185898216842799, 0.05185898216842799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.140673134420634, 0.140673134420634, 0.140673134420634, 0.7042812371669795, 0.7042812371669795, 0.7042812371669795, 0.7840310597531491, 0.7840310597531491, 0.7840310597531491, 0.8061228239157326, 0.8061228239157326, 0.8061228239157326, 0.062755428773964, 0.062755428773964, 0.062755428773964, 0.1355710338524897, 0.1355710338524897, 0.1355710338524897, 0.11285943962709266, 0.11285943962709266, 0.11285943962709266, 0.1890509894194724, 0.1890509894194724, 0.1890509894194724, 0.18585725325660762, 0.18585725325660762, 0.18585725325660762, 0.19342911799004148, 0.19342911799004148, 0.19342911799004148, 0.466144840148746, 0.466144840148746, 0.466144840148746, 0.41715136705716827, 0.41715136705716827, 0.41715136705716827, 0.14727317934114503, 0.14727317934114503, 0.14727317934114503, 0.394878217924287, 0.394878217924287, 0.394878217924287, 0.188861673268635, 0.188861673268635, 0.188861673268635, 0.11835764441681718, 0.11835764441681718, 0.11835764441681718, 0.18742203958945736, 0.18742203958945736, 0.18742203958945736, 0.18417994210458333, 0.18417994210458333, 0.18417994210458333, 0.22298087427400026, 0.22298087427400026, 0.22298087427400026, 0.20643151497754142, 0.20643151497754142, 0.20643151497754142, 0.18150123376038585, 0.18150123376038585, 0.18150123376038585, 0.2084841326632334, 0.2084841326632334, 0.2084841326632334, 0.8960663374722317, 0.8960663374722317, 0.8960663374722317, 0.20120100286063858, 0.20120100286063858, 0.20120100286063858, 0.8662648472298098, 0.8662648472298098, 0.8662648472298098, 0.8952891191115019, 0.8952891191115019, 0.8952891191115019, 0.20732424594362153, 0.20732424594362153, 0.20732424594362153, 0.10328825688309862, 0.10328825688309862, 0.10328825688309862, 0.20418916743030868, 0.20418916743030868, 0.20418916743030868, 0.17506352093505506, 0.17506352093505506, 0.17506352093505506, 0.21415065971629366, 0.21415065971629366, 0.21415065971629366, 0.07514045290338489, 0.07514045290338489, 0.07514045290338489, 0.09345487557059351, 0.09345487557059351, 0.09345487557059351, 0.08138629822369492, 0.08138629822369492, 0.08138629822369492]}, "mutation_prompt": null}
{"id": "eb8eb6ea-00e6-400a-8957-d55ffd6e1d00", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()  # Minor change in scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive mutation strategies for improved convergence efficiency.", "configspace": "", "generation": 93, "fitness": 0.3222260787082458, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.30.", "error": "", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.9177551066105156, 0.9177551066105156, 0.9177551066105156, 0.8617146396317444, 0.8617146396317444, 0.8617146396317444, 0.8274671317062952, 0.8274671317062952, 0.8274671317062952, 0.07850641040556872, 0.07850641040556872, 0.07850641040556872, 0.6918151586903882, 0.6918151586903882, 0.6918151586903882, 0.004930059281824661, 0.004930059281824661, 0.004930059281824661, 0.09559266474116068, 0.09559266474116068, 0.09559266474116068, 0.1147168988860634, 0.1147168988860634, 0.1147168988860634, 0.13074601881599068, 0.13074601881599068, 0.13074601881599068, 0.11066636193384471, 0.11066636193384471, 0.11066636193384471, 0.1086577350059823, 0.1086577350059823, 0.1086577350059823, 0.07964269262314427, 0.07964269262314427, 0.07964269262314427, 0.990517383653785, 0.990517383653785, 0.990517383653785, 0.9909760283513813, 0.9909760283513813, 0.9909760283513813, 0.9907879764561028, 0.9907879764561028, 0.9907879764561028, 0.391765812212578, 0.391765812212578, 0.391765812212578, 0.4599075095640768, 0.4599075095640768, 0.4599075095640768, 0.08751835295568111, 0.08751835295568111, 0.08751835295568111, 0.7274280062535243, 0.7274280062535243, 0.7274280062535243, 0.16093320738683703, 0.16093320738683703, 0.16093320738683703, 0.7657712999949625, 0.7657712999949625, 0.7657712999949625, 0.23539884453763138, 0.23539884453763138, 0.23539884453763138, 0.17986739743037727, 0.17986739743037727, 0.17986739743037727, 0.1688232950751306, 0.1688232950751306, 0.1688232950751306, 0.3370581812927552, 0.3370581812927552, 0.3370581812927552, 0.22694710790948325, 0.22694710790948325, 0.22694710790948325, 0.7548587579738704, 0.7548587579738704, 0.7548587579738704, 0.07212969989129758, 0.07212969989129758, 0.07212969989129758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3321006462259044, 0.3321006462259044, 0.3321006462259044, 0.09258004280286258, 0.09258004280286258, 0.09258004280286258, 0.704948077668135, 0.704948077668135, 0.704948077668135, 0.003895187435677294, 0.003895187435677294, 0.003895187435677294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10130917199621958, 0.10130917199621958, 0.10130917199621958, 0.0992688574420798, 0.0992688574420798, 0.0992688574420798, 0.05185898216842799, 0.05185898216842799, 0.05185898216842799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.140673134420634, 0.140673134420634, 0.140673134420634, 0.7042812371669795, 0.7042812371669795, 0.7042812371669795, 0.7840310597531491, 0.7840310597531491, 0.7840310597531491, 0.8061228239157326, 0.8061228239157326, 0.8061228239157326, 0.062755428773964, 0.062755428773964, 0.062755428773964, 0.1355710338524897, 0.1355710338524897, 0.1355710338524897, 0.11285943962709266, 0.11285943962709266, 0.11285943962709266, 0.1890509894194724, 0.1890509894194724, 0.1890509894194724, 0.18585725325660762, 0.18585725325660762, 0.18585725325660762, 0.19342911799004148, 0.19342911799004148, 0.19342911799004148, 0.466144840148746, 0.466144840148746, 0.466144840148746, 0.41715136705716827, 0.41715136705716827, 0.41715136705716827, 0.14727317934114503, 0.14727317934114503, 0.14727317934114503, 0.394878217924287, 0.394878217924287, 0.394878217924287, 0.188861673268635, 0.188861673268635, 0.188861673268635, 0.11835764441681718, 0.11835764441681718, 0.11835764441681718, 0.18742203958945736, 0.18742203958945736, 0.18742203958945736, 0.18417994210458333, 0.18417994210458333, 0.18417994210458333, 0.22298087427400026, 0.22298087427400026, 0.22298087427400026, 0.20643151497754142, 0.20643151497754142, 0.20643151497754142, 0.18150123376038585, 0.18150123376038585, 0.18150123376038585, 0.2084841326632334, 0.2084841326632334, 0.2084841326632334, 0.8960663374722317, 0.8960663374722317, 0.8960663374722317, 0.20120100286063858, 0.20120100286063858, 0.20120100286063858, 0.8662648472298098, 0.8662648472298098, 0.8662648472298098, 0.8952891191115019, 0.8952891191115019, 0.8952891191115019, 0.20732424594362153, 0.20732424594362153, 0.20732424594362153, 0.10328825688309862, 0.10328825688309862, 0.10328825688309862, 0.20418916743030868, 0.20418916743030868, 0.20418916743030868, 0.17506352093505506, 0.17506352093505506, 0.17506352093505506, 0.21415065971629366, 0.21415065971629366, 0.21415065971629366, 0.07514045290338489, 0.07514045290338489, 0.07514045290338489, 0.09345487557059351, 0.09345487557059351, 0.09345487557059351, 0.08138629822369492, 0.08138629822369492, 0.08138629822369492]}, "mutation_prompt": null}
{"id": "a5f81100-e667-49f6-a0f4-46ffe74480a4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()  # Minor change in scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Slightly refined HybridPSODE with dynamic adjustment for exploration and exploitation balance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.9177551066105156, 0.9177551066105156, 0.9177551066105156, 0.8617146396317444, 0.8617146396317444, 0.8617146396317444, 0.8274671317062952, 0.8274671317062952, 0.8274671317062952, 0.07850641040556872, 0.07850641040556872, 0.07850641040556872, 0.6918151586903882, 0.6918151586903882, 0.6918151586903882, 0.004930059281824661, 0.004930059281824661, 0.004930059281824661, 0.09559266474116068, 0.09559266474116068, 0.09559266474116068, 0.1147168988860634, 0.1147168988860634, 0.1147168988860634, 0.13074601881599068, 0.13074601881599068, 0.13074601881599068, 0.11066636193384471, 0.11066636193384471, 0.11066636193384471, 0.1086577350059823, 0.1086577350059823, 0.1086577350059823, 0.07964269262314427, 0.07964269262314427, 0.07964269262314427, 0.990517383653785, 0.990517383653785, 0.990517383653785, 0.9909760283513813, 0.9909760283513813, 0.9909760283513813, 0.9907879764561028, 0.9907879764561028, 0.9907879764561028, 0.391765812212578, 0.391765812212578, 0.391765812212578, 0.4599075095640768, 0.4599075095640768, 0.4599075095640768, 0.08751835295568111, 0.08751835295568111, 0.08751835295568111, 0.7274280062535243, 0.7274280062535243, 0.7274280062535243, 0.16093320738683703, 0.16093320738683703, 0.16093320738683703, 0.7657712999949625, 0.7657712999949625, 0.7657712999949625, 0.23539884453763138, 0.23539884453763138, 0.23539884453763138, 0.17986739743037727, 0.17986739743037727, 0.17986739743037727, 0.1688232950751306, 0.1688232950751306, 0.1688232950751306, 0.3370581812927552, 0.3370581812927552, 0.3370581812927552, 0.22694710790948325, 0.22694710790948325, 0.22694710790948325, 0.7548587579738704, 0.7548587579738704, 0.7548587579738704, 0.07212969989129758, 0.07212969989129758, 0.07212969989129758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3321006462259044, 0.3321006462259044, 0.3321006462259044, 0.09258004280286258, 0.09258004280286258, 0.09258004280286258, 0.704948077668135, 0.704948077668135, 0.704948077668135, 0.003895187435677294, 0.003895187435677294, 0.003895187435677294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10130917199621958, 0.10130917199621958, 0.10130917199621958, 0.0992688574420798, 0.0992688574420798, 0.0992688574420798, 0.05185898216842799, 0.05185898216842799, 0.05185898216842799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.140673134420634, 0.140673134420634, 0.140673134420634, 0.7042812371669795, 0.7042812371669795, 0.7042812371669795, 0.7840310597531491, 0.7840310597531491, 0.7840310597531491, 0.8061228239157326, 0.8061228239157326, 0.8061228239157326, 0.062755428773964, 0.062755428773964, 0.062755428773964, 0.1355710338524897, 0.1355710338524897, 0.1355710338524897, 0.11285943962709266, 0.11285943962709266, 0.11285943962709266, 0.1890509894194724, 0.1890509894194724, 0.1890509894194724, 0.18585725325660762, 0.18585725325660762, 0.18585725325660762, 0.19342911799004148, 0.19342911799004148, 0.19342911799004148, 0.466144840148746, 0.466144840148746, 0.466144840148746, 0.41715136705716827, 0.41715136705716827, 0.41715136705716827, 0.14727317934114503, 0.14727317934114503, 0.14727317934114503, 0.394878217924287, 0.394878217924287, 0.394878217924287, 0.188861673268635, 0.188861673268635, 0.188861673268635, 0.11835764441681718, 0.11835764441681718, 0.11835764441681718, 0.18742203958945736, 0.18742203958945736, 0.18742203958945736, 0.18417994210458333, 0.18417994210458333, 0.18417994210458333, 0.22298087427400026, 0.22298087427400026, 0.22298087427400026, 0.20643151497754142, 0.20643151497754142, 0.20643151497754142, 0.18150123376038585, 0.18150123376038585, 0.18150123376038585, 0.2084841326632334, 0.2084841326632334, 0.2084841326632334, 0.8960663374722317, 0.8960663374722317, 0.8960663374722317, 0.20120100286063858, 0.20120100286063858, 0.20120100286063858, 0.8662648472298098, 0.8662648472298098, 0.8662648472298098, 0.8952891191115019, 0.8952891191115019, 0.8952891191115019, 0.20732424594362153, 0.20732424594362153, 0.20732424594362153, 0.10328825688309862, 0.10328825688309862, 0.10328825688309862, 0.20418916743030868, 0.20418916743030868, 0.20418916743030868, 0.17506352093505506, 0.17506352093505506, 0.17506352093505506, 0.21415065971629366, 0.21415065971629366, 0.21415065971629366, 0.07514045290338489, 0.07514045290338489, 0.07514045290338489, 0.09345487557059351, 0.09345487557059351, 0.09345487557059351, 0.08138629822369492, 0.08138629822369492, 0.08138629822369492]}, "mutation_prompt": null}
{"id": "d82928b3-6ef3-4b4e-8065-921e8c938a8a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()  # Minor change in scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n            # Adaptive inertia weight decay\n            self.w *= 0.99\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with adaptive learning rates and inertia weight decay for better convergence.", "configspace": "", "generation": 95, "fitness": 0.3222260787082458, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.30.", "error": "", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.9177551066105156, 0.9177551066105156, 0.9177551066105156, 0.8617146396317444, 0.8617146396317444, 0.8617146396317444, 0.8274671317062952, 0.8274671317062952, 0.8274671317062952, 0.07850641040556872, 0.07850641040556872, 0.07850641040556872, 0.6918151586903882, 0.6918151586903882, 0.6918151586903882, 0.004930059281824661, 0.004930059281824661, 0.004930059281824661, 0.09559266474116068, 0.09559266474116068, 0.09559266474116068, 0.1147168988860634, 0.1147168988860634, 0.1147168988860634, 0.13074601881599068, 0.13074601881599068, 0.13074601881599068, 0.11066636193384471, 0.11066636193384471, 0.11066636193384471, 0.1086577350059823, 0.1086577350059823, 0.1086577350059823, 0.07964269262314427, 0.07964269262314427, 0.07964269262314427, 0.990517383653785, 0.990517383653785, 0.990517383653785, 0.9909760283513813, 0.9909760283513813, 0.9909760283513813, 0.9907879764561028, 0.9907879764561028, 0.9907879764561028, 0.391765812212578, 0.391765812212578, 0.391765812212578, 0.4599075095640768, 0.4599075095640768, 0.4599075095640768, 0.08751835295568111, 0.08751835295568111, 0.08751835295568111, 0.7274280062535243, 0.7274280062535243, 0.7274280062535243, 0.16093320738683703, 0.16093320738683703, 0.16093320738683703, 0.7657712999949625, 0.7657712999949625, 0.7657712999949625, 0.23539884453763138, 0.23539884453763138, 0.23539884453763138, 0.17986739743037727, 0.17986739743037727, 0.17986739743037727, 0.1688232950751306, 0.1688232950751306, 0.1688232950751306, 0.3370581812927552, 0.3370581812927552, 0.3370581812927552, 0.22694710790948325, 0.22694710790948325, 0.22694710790948325, 0.7548587579738704, 0.7548587579738704, 0.7548587579738704, 0.07212969989129758, 0.07212969989129758, 0.07212969989129758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3321006462259044, 0.3321006462259044, 0.3321006462259044, 0.09258004280286258, 0.09258004280286258, 0.09258004280286258, 0.704948077668135, 0.704948077668135, 0.704948077668135, 0.003895187435677294, 0.003895187435677294, 0.003895187435677294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10130917199621958, 0.10130917199621958, 0.10130917199621958, 0.0992688574420798, 0.0992688574420798, 0.0992688574420798, 0.05185898216842799, 0.05185898216842799, 0.05185898216842799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.140673134420634, 0.140673134420634, 0.140673134420634, 0.7042812371669795, 0.7042812371669795, 0.7042812371669795, 0.7840310597531491, 0.7840310597531491, 0.7840310597531491, 0.8061228239157326, 0.8061228239157326, 0.8061228239157326, 0.062755428773964, 0.062755428773964, 0.062755428773964, 0.1355710338524897, 0.1355710338524897, 0.1355710338524897, 0.11285943962709266, 0.11285943962709266, 0.11285943962709266, 0.1890509894194724, 0.1890509894194724, 0.1890509894194724, 0.18585725325660762, 0.18585725325660762, 0.18585725325660762, 0.19342911799004148, 0.19342911799004148, 0.19342911799004148, 0.466144840148746, 0.466144840148746, 0.466144840148746, 0.41715136705716827, 0.41715136705716827, 0.41715136705716827, 0.14727317934114503, 0.14727317934114503, 0.14727317934114503, 0.394878217924287, 0.394878217924287, 0.394878217924287, 0.188861673268635, 0.188861673268635, 0.188861673268635, 0.11835764441681718, 0.11835764441681718, 0.11835764441681718, 0.18742203958945736, 0.18742203958945736, 0.18742203958945736, 0.18417994210458333, 0.18417994210458333, 0.18417994210458333, 0.22298087427400026, 0.22298087427400026, 0.22298087427400026, 0.20643151497754142, 0.20643151497754142, 0.20643151497754142, 0.18150123376038585, 0.18150123376038585, 0.18150123376038585, 0.2084841326632334, 0.2084841326632334, 0.2084841326632334, 0.8960663374722317, 0.8960663374722317, 0.8960663374722317, 0.20120100286063858, 0.20120100286063858, 0.20120100286063858, 0.8662648472298098, 0.8662648472298098, 0.8662648472298098, 0.8952891191115019, 0.8952891191115019, 0.8952891191115019, 0.20732424594362153, 0.20732424594362153, 0.20732424594362153, 0.10328825688309862, 0.10328825688309862, 0.10328825688309862, 0.20418916743030868, 0.20418916743030868, 0.20418916743030868, 0.17506352093505506, 0.17506352093505506, 0.17506352093505506, 0.21415065971629366, 0.21415065971629366, 0.21415065971629366, 0.07514045290338489, 0.07514045290338489, 0.07514045290338489, 0.09345487557059351, 0.09345487557059351, 0.09345487557059351, 0.08138629822369492, 0.08138629822369492, 0.08138629822369492]}, "mutation_prompt": null}
{"id": "c78d9362-5e47-4909-b939-e18dcc056830", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                dynamic_CR = 0.85 + 0.15 * np.random.random()  # Slight increase in variability\n                crossover_mask = np.random.rand(self.dim) < dynamic_CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Introduced randomness in inertia weight and crossover probability for enhanced exploration-exploitation balance.", "configspace": "", "generation": 96, "fitness": 0.23218608903920862, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.26.", "error": "", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.8866345112491975, 0.8866345112491975, 0.8866345112491975, 0.1571575638770184, 0.1571575638770184, 0.1571575638770184, 0.18231420182883962, 0.18231420182883962, 0.18231420182883962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005977026681654007, 0.005977026681654007, 0.005977026681654007, 0.02811073352851745, 0.02811073352851745, 0.02811073352851745, 0.09806433438229012, 0.09806433438229012, 0.09806433438229012, 0.10056879644308847, 0.10056879644308847, 0.10056879644308847, 0.11534381604471, 0.11534381604471, 0.11534381604471, 0.023568371612145755, 0.023568371612145755, 0.023568371612145755, 0.12415827059865203, 0.12415827059865203, 0.12415827059865203, 0.1017910632036868, 0.1017910632036868, 0.1017910632036868, 0.9830788692244053, 0.9830788692244053, 0.9830788692244053, 0.9908682750185541, 0.9908682750185541, 0.9908682750185541, 0.9950451734603811, 0.9950451734603811, 0.9950451734603811, 0.6305178123110767, 0.6305178123110767, 0.6305178123110767, 0.3169263605945686, 0.3169263605945686, 0.3169263605945686, 0.08917115772298823, 0.08917115772298823, 0.08917115772298823, 0.22562274705627583, 0.22562274705627583, 0.22562274705627583, 0.16124176932214052, 0.16124176932214052, 0.16124176932214052, 0.020439125532927593, 0.020439125532927593, 0.020439125532927593, 0.16979182939968762, 0.16979182939968762, 0.16979182939968762, 0.1979151319244402, 0.1979151319244402, 0.1979151319244402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1512450981330028, 0.1512450981330028, 0.1512450981330028, 0.1417922977506494, 0.1417922977506494, 0.1417922977506494, 0.21125082197565048, 0.21125082197565048, 0.21125082197565048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1207172477600772, 0.1207172477600772, 0.1207172477600772, 0.09539900174301619, 0.09539900174301619, 0.09539900174301619, 0.05424071020841714, 0.05424071020841714, 0.05424071020841714, 0.31405541585683705, 0.31405541585683705, 0.31405541585683705, 0.06626705471923666, 0.06626705471923666, 0.06626705471923666, 0.10504830466294357, 0.10504830466294357, 0.10504830466294357, 0.04493928229898958, 0.04493928229898958, 0.04493928229898958, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049840795096521284, 0.049840795096521284, 0.049840795096521284, 0.69231900590912, 0.69231900590912, 0.69231900590912, 0.18282044527851538, 0.18282044527851538, 0.18282044527851538, 0.8652076770007053, 0.8652076770007053, 0.8652076770007053, 0.06229517857108258, 0.06229517857108258, 0.06229517857108258, 0.10797367997851837, 0.10797367997851837, 0.10797367997851837, 0.10025492510762579, 0.10025492510762579, 0.10025492510762579, 0.17417159720078723, 0.17417159720078723, 0.17417159720078723, 0.1730359100013833, 0.1730359100013833, 0.1730359100013833, 0.2070893245837122, 0.2070893245837122, 0.2070893245837122, 0.23905505144679295, 0.23905505144679295, 0.23905505144679295, 0.2040346755755469, 0.2040346755755469, 0.2040346755755469, 0.34615624924199717, 0.34615624924199717, 0.34615624924199717, 0.4576195892894359, 0.4576195892894359, 0.4576195892894359, 0.20601248080773837, 0.20601248080773837, 0.20601248080773837, 0.12613230558153332, 0.12613230558153332, 0.12613230558153332, 0.2029049981285186, 0.2029049981285186, 0.2029049981285186, 0.20834992042364164, 0.20834992042364164, 0.20834992042364164, 0.1959801389646899, 0.1959801389646899, 0.1959801389646899, 0.21311861803150822, 0.21311861803150822, 0.21311861803150822, 0.2060824793972782, 0.2060824793972782, 0.2060824793972782, 0.25090863728868984, 0.25090863728868984, 0.25090863728868984, 0.9565385412949848, 0.9565385412949848, 0.9565385412949848, 0.20703699009106846, 0.20703699009106846, 0.20703699009106846, 0.1644998948970029, 0.1644998948970029, 0.1644998948970029, 0.9193387036202767, 0.9193387036202767, 0.9193387036202767, 0.21253934442360012, 0.21253934442360012, 0.21253934442360012, 0.1036703685893301, 0.1036703685893301, 0.1036703685893301, 0.17945995457439534, 0.17945995457439534, 0.17945995457439534, 0.17551911167118506, 0.17551911167118506, 0.17551911167118506, 0.1796685341647144, 0.1796685341647144, 0.1796685341647144, 0.06882472136563522, 0.06882472136563522, 0.06882472136563522, 0.08285165234489889, 0.08285165234489889, 0.08285165234489889, 0.08622473475451864, 0.08622473475451864, 0.08622473475451864]}, "mutation_prompt": null}
{"id": "5a30e4a4-da1b-488b-abad-833b210eb7f8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += 0.9 * velocities  # Minor adjustment in velocity influence\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()  # Minor change in scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced exploration phase using a dynamic adaptive velocity adjustment with slight modifications.", "configspace": "", "generation": 97, "fitness": 0.3325812756634688, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.31.", "error": "", "parent_id": "69948456-89ad-4a6d-8a21-80c29d235730", "metadata": {"aucs": [0.8665127314835129, 0.8665127314835129, 0.8665127314835129, 0.8838072011902619, 0.8838072011902619, 0.8838072011902619, 0.8798525182654848, 0.8798525182654848, 0.8798525182654848, 0.7463135213113615, 0.7463135213113615, 0.7463135213113615, 0.749636379089885, 0.749636379089885, 0.749636379089885, 0.014196723828560742, 0.014196723828560742, 0.014196723828560742, 0.11020129395993594, 0.11020129395993594, 0.11020129395993594, 0.08182034109499381, 0.08182034109499381, 0.08182034109499381, 0.09710907231529142, 0.09710907231529142, 0.09710907231529142, 0.09937488276817819, 0.09937488276817819, 0.09937488276817819, 0.1241170586534085, 0.1241170586534085, 0.1241170586534085, 0.1069550398500334, 0.1069550398500334, 0.1069550398500334, 0.9904981999241046, 0.9904981999241046, 0.9904981999241046, 0.9907424221766947, 0.9907424221766947, 0.9907424221766947, 0.9885559275543561, 0.9885559275543561, 0.9885559275543561, 0.5415640089037786, 0.5415640089037786, 0.5415640089037786, 0.687668469956232, 0.687668469956232, 0.687668469956232, 0.07333145073415182, 0.07333145073415182, 0.07333145073415182, 0.3250582309321468, 0.3250582309321468, 0.3250582309321468, 0.7662234886579292, 0.7662234886579292, 0.7662234886579292, 0.9098115165929743, 0.9098115165929743, 0.9098115165929743, 0.2218598017011988, 0.2218598017011988, 0.2218598017011988, 0.1315595877012955, 0.1315595877012955, 0.1315595877012955, 0.12926977210267998, 0.12926977210267998, 0.12926977210267998, 0.31806422436506854, 0.31806422436506854, 0.31806422436506854, 0.13175616340983376, 0.13175616340983376, 0.13175616340983376, 0.7616432130024513, 0.7616432130024513, 0.7616432130024513, 0.03319951035695545, 0.03319951035695545, 0.03319951035695545, 0.12156734119310353, 0.12156734119310353, 0.12156734119310353, 0.20684845983233813, 0.20684845983233813, 0.20684845983233813, 0.05825760839443206, 0.05825760839443206, 0.05825760839443206, 0.06488865720109338, 0.06488865720109338, 0.06488865720109338, 0.011811087419799304, 0.011811087419799304, 0.011811087419799304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09793697175362426, 0.09793697175362426, 0.09793697175362426, 0.26996521137786456, 0.26996521137786456, 0.26996521137786456, 0.09731291787801022, 0.09731291787801022, 0.09731291787801022, 0.020184537655067336, 0.020184537655067336, 0.020184537655067336, 0.08207382774388405, 0.08207382774388405, 0.08207382774388405, 0.7708815620963564, 0.7708815620963564, 0.7708815620963564, 0.842208782486054, 0.842208782486054, 0.842208782486054, 0.4956187603942579, 0.4956187603942579, 0.4956187603942579, 0.07483701483113236, 0.07483701483113236, 0.07483701483113236, 0.11412602658359572, 0.11412602658359572, 0.11412602658359572, 0.11035520562811785, 0.11035520562811785, 0.11035520562811785, 0.18874800493379462, 0.18874800493379462, 0.18874800493379462, 0.30274634216100005, 0.30274634216100005, 0.30274634216100005, 0.23142430366590105, 0.23142430366590105, 0.23142430366590105, 0.4576418512266439, 0.4576418512266439, 0.4576418512266439, 0.44045078967193074, 0.44045078967193074, 0.44045078967193074, 0.2162312571475199, 0.2162312571475199, 0.2162312571475199, 0.2803559410941814, 0.2803559410941814, 0.2803559410941814, 0.24389504416968555, 0.24389504416968555, 0.24389504416968555, 0.12812054395729633, 0.12812054395729633, 0.12812054395729633, 0.18217224808897126, 0.18217224808897126, 0.18217224808897126, 0.20517352473506667, 0.20517352473506667, 0.20517352473506667, 0.1797597476756595, 0.1797597476756595, 0.1797597476756595, 0.2102138597535519, 0.2102138597535519, 0.2102138597535519, 0.19387992950159916, 0.19387992950159916, 0.19387992950159916, 0.19986664958426037, 0.19986664958426037, 0.19986664958426037, 0.9067938181314559, 0.9067938181314559, 0.9067938181314559, 0.16565016068718363, 0.16565016068718363, 0.16565016068718363, 0.8883019427252788, 0.8883019427252788, 0.8883019427252788, 0.9386590811414187, 0.9386590811414187, 0.9386590811414187, 0.20687363224687982, 0.20687363224687982, 0.20687363224687982, 0.1856058999005431, 0.1856058999005431, 0.1856058999005431, 0.18161852989761185, 0.18161852989761185, 0.18161852989761185, 0.18202080259425601, 0.18202080259425601, 0.18202080259425601, 0.18262953898501955, 0.18262953898501955, 0.18262953898501955, 0.07265678003151921, 0.07265678003151921, 0.07265678003151921, 0.0956454434087971, 0.0956454434087971, 0.0956454434087971, 0.07903945630123976, 0.07903945630123976, 0.07903945630123976]}, "mutation_prompt": null}
{"id": "d96a30a6-8ce5-47f4-b3c7-ae64b346a5fe", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = ((adaptive_w - evaluations / (2 * self.budget)) * velocities +  # Stochastic inertia weight decay\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += 0.9 * velocities\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Introduced stochastic inertia weight decay to balance exploration and exploitation phases for improved convergence.", "configspace": "", "generation": 98, "fitness": 0.27122631549904125, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.27.", "error": "", "parent_id": "5a30e4a4-da1b-488b-abad-833b210eb7f8", "metadata": {"aucs": [0.9135778576501002, 0.9135778576501002, 0.9135778576501002, 0.9234560647945778, 0.9234560647945778, 0.9234560647945778, 0.9072287930222914, 0.9072287930222914, 0.9072287930222914, 0.43832473466583655, 0.43832473466583655, 0.43832473466583655, 0.06846584923295596, 0.06846584923295596, 0.06846584923295596, 0.00846717914596573, 0.00846717914596573, 0.00846717914596573, 0.11938310790457762, 0.11938310790457762, 0.11938310790457762, 0.09989879613012564, 0.09989879613012564, 0.09989879613012564, 0.11309513479605415, 0.11309513479605415, 0.11309513479605415, 0.13054332586338335, 0.13054332586338335, 0.13054332586338335, 0.08725062120949567, 0.08725062120949567, 0.08725062120949567, 0.11991037462363852, 0.11991037462363852, 0.11991037462363852, 0.990497383449935, 0.990497383449935, 0.990497383449935, 0.9907394828748162, 0.9907394828748162, 0.9907394828748162, 0.9885502555037586, 0.9885502555037586, 0.9885502555037586, 0.5865725106802129, 0.5865725106802129, 0.5865725106802129, 0.6603733232567359, 0.6603733232567359, 0.6603733232567359, 0.08435383113947559, 0.08435383113947559, 0.08435383113947559, 0.2276854017337835, 0.2276854017337835, 0.2276854017337835, 0.15982519073631718, 0.15982519073631718, 0.15982519073631718, 0.2251376755303881, 0.2251376755303881, 0.2251376755303881, 0.20109388670757544, 0.20109388670757544, 0.20109388670757544, 0.09909540663605221, 0.09909540663605221, 0.09909540663605221, 0.1568088346251083, 0.1568088346251083, 0.1568088346251083, 0.15540599801918964, 0.15540599801918964, 0.15540599801918964, 0.13157946617635885, 0.13157946617635885, 0.13157946617635885, 0.3174307120366644, 0.3174307120366644, 0.3174307120366644, 0.08880145684737817, 0.08880145684737817, 0.08880145684737817, 0.03601989770905545, 0.03601989770905545, 0.03601989770905545, 0.0814675448206088, 0.0814675448206088, 0.0814675448206088, 0.10515801471661868, 0.10515801471661868, 0.10515801471661868, 0.1609822316841344, 0.1609822316841344, 0.1609822316841344, 0.06146762764936542, 0.06146762764936542, 0.06146762764936542, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2469497585550381, 0.2469497585550381, 0.2469497585550381, 0.21313268925549833, 0.21313268925549833, 0.21313268925549833, 0.04396260401188101, 0.04396260401188101, 0.04396260401188101, 0.15240290367654996, 0.15240290367654996, 0.15240290367654996, 0.08805734581419933, 0.08805734581419933, 0.08805734581419933, 0.41795199708509667, 0.41795199708509667, 0.41795199708509667, 0.4315962279679487, 0.4315962279679487, 0.4315962279679487, 0.5401265090753877, 0.5401265090753877, 0.5401265090753877, 0.08107187660725834, 0.08107187660725834, 0.08107187660725834, 0.08751875049960978, 0.08751875049960978, 0.08751875049960978, 0.08572801642282524, 0.08572801642282524, 0.08572801642282524, 0.18812119612518308, 0.18812119612518308, 0.18812119612518308, 0.1587650059396517, 0.1587650059396517, 0.1587650059396517, 0.20465485169228337, 0.20465485169228337, 0.20465485169228337, 0.4198921877385894, 0.4198921877385894, 0.4198921877385894, 0.24144544556204184, 0.24144544556204184, 0.24144544556204184, 0.22073595642683563, 0.22073595642683563, 0.22073595642683563, 0.28242143585964397, 0.28242143585964397, 0.28242143585964397, 0.2180476532956982, 0.2180476532956982, 0.2180476532956982, 0.13315007966517567, 0.13315007966517567, 0.13315007966517567, 0.19360539162694212, 0.19360539162694212, 0.19360539162694212, 0.23709734221098766, 0.23709734221098766, 0.23709734221098766, 0.20199127760848645, 0.20199127760848645, 0.20199127760848645, 0.19664785764169723, 0.19664785764169723, 0.19664785764169723, 0.17682804360555315, 0.17682804360555315, 0.17682804360555315, 0.19922477235198222, 0.19922477235198222, 0.19922477235198222, 0.9267472899250662, 0.9267472899250662, 0.9267472899250662, 0.16561634716908524, 0.16561634716908524, 0.16561634716908524, 0.1673077601726647, 0.1673077601726647, 0.1673077601726647, 0.9479432245883314, 0.9479432245883314, 0.9479432245883314, 0.20899652079177244, 0.20899652079177244, 0.20899652079177244, 0.18561710161799816, 0.18561710161799816, 0.18561710161799816, 0.18467077859294911, 0.18467077859294911, 0.18467077859294911, 0.1862112045876868, 0.1862112045876868, 0.1862112045876868, 0.19688153920587903, 0.19688153920587903, 0.19688153920587903, 0.08707537817266531, 0.08707537817266531, 0.08707537817266531, 0.09244004837350361, 0.09244004837350361, 0.09244004837350361, 0.07891237483878855, 0.07891237483878855, 0.07891237483878855]}, "mutation_prompt": null}
{"id": "68b91fd3-09b0-4395-95a6-a6998dc2780e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.min_bound = -5.0\n        self.max_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.min_bound, self.max_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            adaptive_w = 0.4 + 0.5 * np.random.random()\n            dynamic_c1 = 1.2 + 0.6 * np.random.random()\n            dynamic_c2 = 1.2 + 0.6 * np.random.random()\n            velocities = (adaptive_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += 0.9 * velocities  # Minor adjustment in velocity influence\n            positions = np.clip(positions, self.min_bound, self.max_bound)\n\n            scores = np.array([func(x) for x in positions])\n            evaluations += self.population_size\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n\n            if np.min(scores) < global_best_score:\n                global_best_position = positions[np.argmin(scores)]\n                global_best_score = np.min(scores)\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = 0.45 + 0.55 * np.random.random()  # Minor change in scaling factor\n                mutant_vector = np.clip(a + F_dynamic * (b - c), self.min_bound, self.max_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced exploration phase using a dynamic adaptive velocity adjustment with slight modifications.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a30e4a4-da1b-488b-abad-833b210eb7f8", "metadata": {"aucs": [0.8665127314835129, 0.8665127314835129, 0.8665127314835129, 0.8838072011902619, 0.8838072011902619, 0.8838072011902619, 0.8798525182654848, 0.8798525182654848, 0.8798525182654848, 0.7463135213113615, 0.7463135213113615, 0.7463135213113615, 0.749636379089885, 0.749636379089885, 0.749636379089885, 0.014196723828560742, 0.014196723828560742, 0.014196723828560742, 0.11020129395993594, 0.11020129395993594, 0.11020129395993594, 0.08182034109499381, 0.08182034109499381, 0.08182034109499381, 0.09710907231529142, 0.09710907231529142, 0.09710907231529142, 0.09937488276817819, 0.09937488276817819, 0.09937488276817819, 0.1241170586534085, 0.1241170586534085, 0.1241170586534085, 0.1069550398500334, 0.1069550398500334, 0.1069550398500334, 0.9904981999241046, 0.9904981999241046, 0.9904981999241046, 0.9907424221766947, 0.9907424221766947, 0.9907424221766947, 0.9885559275543561, 0.9885559275543561, 0.9885559275543561, 0.5415640089037786, 0.5415640089037786, 0.5415640089037786, 0.687668469956232, 0.687668469956232, 0.687668469956232, 0.07333145073415182, 0.07333145073415182, 0.07333145073415182, 0.3250582309321468, 0.3250582309321468, 0.3250582309321468, 0.7662234886579292, 0.7662234886579292, 0.7662234886579292, 0.9098115165929743, 0.9098115165929743, 0.9098115165929743, 0.2218598017011988, 0.2218598017011988, 0.2218598017011988, 0.1315595877012955, 0.1315595877012955, 0.1315595877012955, 0.12926977210267998, 0.12926977210267998, 0.12926977210267998, 0.31806422436506854, 0.31806422436506854, 0.31806422436506854, 0.13175616340983376, 0.13175616340983376, 0.13175616340983376, 0.7616432130024513, 0.7616432130024513, 0.7616432130024513, 0.03319951035695545, 0.03319951035695545, 0.03319951035695545, 0.12156734119310353, 0.12156734119310353, 0.12156734119310353, 0.20684845983233813, 0.20684845983233813, 0.20684845983233813, 0.05825760839443206, 0.05825760839443206, 0.05825760839443206, 0.06488865720109338, 0.06488865720109338, 0.06488865720109338, 0.011811087419799304, 0.011811087419799304, 0.011811087419799304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09793697175362426, 0.09793697175362426, 0.09793697175362426, 0.26996521137786456, 0.26996521137786456, 0.26996521137786456, 0.09731291787801022, 0.09731291787801022, 0.09731291787801022, 0.020184537655067336, 0.020184537655067336, 0.020184537655067336, 0.08207382774388405, 0.08207382774388405, 0.08207382774388405, 0.7708815620963564, 0.7708815620963564, 0.7708815620963564, 0.842208782486054, 0.842208782486054, 0.842208782486054, 0.4956187603942579, 0.4956187603942579, 0.4956187603942579, 0.07483701483113236, 0.07483701483113236, 0.07483701483113236, 0.11412602658359572, 0.11412602658359572, 0.11412602658359572, 0.11035520562811785, 0.11035520562811785, 0.11035520562811785, 0.18874800493379462, 0.18874800493379462, 0.18874800493379462, 0.30274634216100005, 0.30274634216100005, 0.30274634216100005, 0.23142430366590105, 0.23142430366590105, 0.23142430366590105, 0.4576418512266439, 0.4576418512266439, 0.4576418512266439, 0.44045078967193074, 0.44045078967193074, 0.44045078967193074, 0.2162312571475199, 0.2162312571475199, 0.2162312571475199, 0.2803559410941814, 0.2803559410941814, 0.2803559410941814, 0.24389504416968555, 0.24389504416968555, 0.24389504416968555, 0.12812054395729633, 0.12812054395729633, 0.12812054395729633, 0.18217224808897126, 0.18217224808897126, 0.18217224808897126, 0.20517352473506667, 0.20517352473506667, 0.20517352473506667, 0.1797597476756595, 0.1797597476756595, 0.1797597476756595, 0.2102138597535519, 0.2102138597535519, 0.2102138597535519, 0.19387992950159916, 0.19387992950159916, 0.19387992950159916, 0.19986664958426037, 0.19986664958426037, 0.19986664958426037, 0.9067938181314559, 0.9067938181314559, 0.9067938181314559, 0.16565016068718363, 0.16565016068718363, 0.16565016068718363, 0.8883019427252788, 0.8883019427252788, 0.8883019427252788, 0.9386590811414187, 0.9386590811414187, 0.9386590811414187, 0.20687363224687982, 0.20687363224687982, 0.20687363224687982, 0.1856058999005431, 0.1856058999005431, 0.1856058999005431, 0.18161852989761185, 0.18161852989761185, 0.18161852989761185, 0.18202080259425601, 0.18202080259425601, 0.18202080259425601, 0.18262953898501955, 0.18262953898501955, 0.18262953898501955, 0.07265678003151921, 0.07265678003151921, 0.07265678003151921, 0.0956454434087971, 0.0956454434087971, 0.0956454434087971, 0.07903945630123976, 0.07903945630123976, 0.07903945630123976]}, "mutation_prompt": null}
