{"id": "956f18b0-2186-4f8b-b226-96b91020c4e5", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "92be3d5d-0abb-4d2f-aae2-e6da45b0e94a", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "956f18b0-2186-4f8b-b226-96b91020c4e5", "metadata": {}, "mutation_prompt": null}
{"id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 2, "fitness": 0.19888771090924273, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "956f18b0-2186-4f8b-b226-96b91020c4e5", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "e5bbf2cc-0c5a-413b-83b4-e9afb409b100", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "06dffb03-1e67-4a9f-b1ba-bc03940981c7", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "9ce1c2e4-d07a-4f36-ac35-5b57e8c4e7b4", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "17edfbf9-8ee9-47a0-a775-cf1e74945c30", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "f52ab43e-3909-4e77-ad72-46efd005eae2", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "69dbdff7-e329-4e68-b873-9e2deb756578", "solution": "import numpy as np\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        step_size_history = [0.5, 0.4, 0.3]  # Multi-step mutation sizes\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment with multi-step sizes\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                step_idx = min(len(step_size_history) - 1, int(np.random.uniform(0, len(step_size_history))))\n                self.mutation_step *= step_size_history[step_idx]\n\n        return best_solution", "name": "ImprovedMetaheuristicAlgorithm", "description": "Implementing a multi-step mutation approach to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 8, "fitness": 0.04013825917667363, "feedback": "The algorithm ImprovedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.06.", "error": "", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.08601277602732804, 0.06459897347648635, 0.1573717670576501, 0.01572834196346795, 0.029603451758625443, 0.07897614682347287, 0.05010687745264297, 0.08570382884044503, 0.08734980961700567, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013517664602608281, 9.999999999998899e-05, 9.999999999998899e-05, 0.015122917247156309, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017155406823994412, 0.012567937629459847, 0.018767990704301685, 0.004998147868097824, 0.026944291206957516, 0.03486268992613928, 0.0044845682154586175, 0.02726413160958696, 0.03910715610720328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03986407105994216, 0.008748342661868302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05437358786789159, 0.036648121194604366, 0.014320866245412955, 0.012478216468704173, 9.999999999998899e-05, 9.999999999998899e-05, 0.01940218344134914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23607769353516728, 0.06788725043020116, 0.01391674281295785, 0.010545372507411388, 0.2287497234319903, 0.017510744535381484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08725510147838844, 0.03596373315025081, 0.20103272304569042, 0.07720622733575533, 0.024841508652391764, 0.009864699643785224, 0.10747748022450809, 0.12488813617370031, 0.1315946990189697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002490290906394521, 0.004631989952327054, 0.06497419474760169, 0.095157216999605, 0.15259416923857916, 0.04231493319173607, 0.09700299694480818, 0.1591281127955002, 0.027837285783025467, 0.15693598020166954, 0.08460953125568571, 0.1152315319527879, 0.09896537357332358, 0.10527165055213938, 0.13879364113584125, 0.06987364238564697, 0.11305063668545556, 0.12696694755348414, 0.07726126323125193, 0.09219301019622539, 0.048408801273518653, 0.030208855537245616, 0.03108841248913219, 0.0728167539693837, 0.003591012329168919, 0.05462163225780936, 0.07064654714773111, 0.019409943504928417, 0.021124084050548886, 0.17722198656080013, 0.05087928231738226, 0.12480881119105847, 0.19111765540093073, 0.06557484357559129, 0.07795161876209189, 0.18491381829870324, 0.09293361700519176, 0.12480901463266925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0629690228883848, 0.12786874571563167, 0.05311595038093242, 0.10332426764230351, 0.06307439739251275, 0.055012423193501525, 0.05802419908373069, 0.11533534394396361, 0.10930365123302488, 0.05128130443673107, 0.09387179948739266, 0.016099648335878403, 0.013873139284808933, 0.017243323386953335, 0.0684470756239891, 0.03921889528087508, 0.021683389439455247, 0.06810455188031117, 0.15541521781018908, 0.2310447391185836, 0.1718201575451268, 0.16194924245977382, 0.15069111459709383, 0.19812141037052255, 0.142121681182654, 0.2215304872042244, 0.20600792295178394, 0.012940263995414036, 0.015615890309893632, 0.02860506190891232, 0.02362248028979097, 0.0006699057725505497, 0.023383764203922186, 0.030723595190176645, 0.011593764305751986, 0.037852964853374194]}, "mutation_prompt": null}
{"id": "ea9839fa-76a8-4cae-a6bc-333ea235bb00", "solution": "import numpy as np\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def local_search(self, current_solution, func):\n        best_solution = current_solution\n        best_fitness = func(best_solution)\n\n        for _ in range(10):  # Perform local search for a fixed number of iterations\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution, best_fitness\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                best_solution, best_fitness = self.local_search(best_solution, func)  # Perform local search after successful mutation\n\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "ImprovedMetaheuristicAlgorithm", "description": "Implement a local search phase after each successful mutation to exploit the neighborhood of the current best solution.", "configspace": "", "generation": 9, "fitness": 0.190840431632754, "feedback": "The algorithm ImprovedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.46185507451929775, 0.351010426874628, 0.4044774659271395, 0.43660965771275073, 0.37177049206424595, 0.40207302046347626, 0.44550598556779586, 0.4163530300421232, 0.4360646124627324, 0.0076107247640571085, 9.999999999998899e-05, 9.999999999998899e-05, 0.041071714098012135, 9.999999999998899e-05, 9.999999999998899e-05, 0.04508591192162037, 9.999999999998899e-05, 9.999999999998899e-05, 0.07457698406298419, 0.09127410556574655, 0.0767856805625704, 0.05386643113297884, 0.09658992131696287, 0.0598849390232401, 0.0893898183954438, 0.07481110639469568, 0.08259796263907304, 0.10417805268186964, 0.06774953172021903, 0.05078849085213566, 0.052016112348600485, 0.07775836440061379, 0.05317662071159135, 0.04780174854410402, 0.06379747247790779, 0.07174060130125604, 0.9696740095644767, 0.941142058323863, 0.9475118158679285, 0.9606767964622833, 0.9572552887787918, 0.961568483947195, 0.9325789383085277, 0.9453136775638169, 0.9613088125053957, 0.34187426907910334, 0.2192666255350889, 0.303759158412667, 0.3230638644274493, 0.2737884159783279, 0.2653417757847951, 0.33531959017399526, 0.24028623955895378, 0.2814756478243746, 0.17174769636603282, 0.21712021511903512, 0.16691900666853832, 0.28159342564938084, 0.2800010707222119, 0.2974021628987644, 0.17490143624449905, 0.2372172299610127, 0.18576021135847698, 0.17763608915128282, 0.15827523207670025, 0.14768621030024476, 0.18307593843240133, 0.14110034504062985, 0.15993882165746431, 0.19417066992588117, 0.15913272980468174, 0.18462307468716888, 0.18287739485723353, 0.1296997536764387, 0.13541815964430914, 0.22512010161882534, 0.1441466826673019, 0.15331934763104094, 0.21655759305135625, 0.12589689630792944, 0.14745243973870414, 0.030638551751457244, 0.00835330045809446, 0.04616169321812125, 0.0831096415325332, 9.999999999998899e-05, 9.999999999998899e-05, 0.00011986183447265653, 9.999999999998899e-05, 0.0785637267205449, 0.04885499302362695, 0.09707861432687437, 0.1274662711130864, 0.13132482614840557, 0.025754813972593937, 0.051185273434044554, 0.17059275667240303, 0.0423921555916279, 0.09876725340166193, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820882578882216, 0.07359245377612877, 0.12473435879604389, 0.10477953772212423, 0.07511196998625824, 0.08034078027089031, 0.12114451831137796, 0.0665832611248236, 0.08246612827896027, 0.44541222204687103, 0.36100449451019234, 0.42025490988045666, 0.4383067538531914, 0.3502506141262225, 0.4209994686776647, 0.4401004718700725, 0.34702962596528864, 0.3672798003282526, 0.09899431834705685, 0.08809686880014467, 0.08553016777872946, 0.012362873323006118, 0.09491554426344373, 0.11089657070339032, 0.05619569213402864, 0.09419851463097384, 0.09671016633190377, 0.27941150346509425, 0.16346827571198863, 0.2238232132740965, 0.13375593040643563, 0.1623625289845826, 0.19483456728006598, 0.14145714815732902, 0.16359043731679135, 0.16757883314721278, 0.13436889389941176, 0.23393148572514533, 0.19408166250083692, 0.29249418058286625, 0.2183661389290269, 0.18270084757240124, 0.22012059753377833, 0.2210568798905007, 0.14912027546011508, 0.2367249556572134, 0.14911438056682635, 0.1137777544100973, 0.20451942637320775, 0.19282556086386327, 0.11255239726487398, 0.19284493676655612, 0.11805569878114419, 0.10498182542639622, 0.23371465353474663, 0.2111270109079617, 0.17521526785358565, 0.17028432483717848, 0.183129279843394, 0.2119956004945438, 0.23341674625572373, 0.18580807375831487, 0.1737284289372808, 0.16742503347165927, 0.18316371857693559, 0.17387514615374, 0.17853955862088622, 0.18399992085962358, 0.17424133200703362, 0.16189133168943792, 0.19179002683116486, 0.17287837470178924, 0.12354258386075345, 0.13680562423628284, 0.32136238142432316, 0.17400074768660012, 0.06543097002633858, 0.062065485705167345, 0.10891772943901834, 0.1149796361189499, 0.16896455180211345, 0.6386516017418861, 0.1130186055298904, 0.083094052454739, 0.08279004798841161, 0.2096724096961733, 0.21319186491732034, 0.11344293191584132, 0.1486294389395838, 0.3652546780589422, 0.1858723136869147, 0.18786692052311116, 0.18060642242133396, 0.18114564855205018, 0.1865925365838732, 0.18807427684440559, 0.17980964726754667, 0.18419969711019601, 0.1865251304494968, 0.027201721601057938, 0.08514115863289407, 0.06462000281519997, 0.06659709018670057, 0.06833204711095642, 0.08047669799673163, 0.0866130121622698, 0.06790502987788882, 0.07218283119732583]}, "mutation_prompt": null}
{"id": "f960d9a9-966f-4d6c-aed6-090295f54fdc", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "05e11789-6b4d-46e9-9047-1ed9da2ff06a", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "36d4ab2d-5df6-4543-ba10-a9028ffe82c7", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "e8d4976a-3249-4e07-a8e9-49f62c3d3f48", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "b7c4809d-35e5-4f89-bc30-afbfa5e858ca", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "5f9789ff-98eb-42e7-9bdb-0cb970fe2433", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "2770fdb3-e1e4-4627-b82d-16f9c8d49517", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "31e8b170-be21-43d3-b4e9-33fd8eedb2cd", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "919c381d-6f0c-4060-9192-c910e871488d", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "86eb54f4-4a5e-4b64-8565-b1dcdafc2501", "solution": "import numpy as np\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(3):  # Differential evolution strategy\n                candidate_solution = best_solution + self.mutation_step * (np.random.uniform(-1, 1, self.dim) + np.random.uniform(-1, 1, self.dim))\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "ImprovedMetaheuristicAlgorithm", "description": "Implementing a differential evolution strategy to enhance exploration and exploitation balance for faster convergence speed.", "configspace": "", "generation": 19, "fitness": 0.1859573765751835, "feedback": "The algorithm ImprovedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.3516694140665232, 0.3624177025312971, 0.4069826969512558, 0.3171114877405504, 0.3754449977140716, 0.39409586498939386, 0.35376246253802934, 0.35006048636728815, 0.40011526264547503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013417899335629535, 9.999999999998899e-05, 9.999999999998899e-05, 0.012273525118002504, 9.999999999998899e-05, 0.07918816823637731, 0.10959577056739722, 0.05151374651608054, 0.08044148334160395, 0.05045061526666139, 0.036389398712173504, 0.10112740330117553, 0.11012773486930616, 0.06532193123590879, 0.07133069597095454, 0.06721616825398757, 0.07309037044650868, 0.07689685693136872, 0.08522461933292147, 0.04717636738044384, 0.07911522216464983, 0.11147765500914142, 0.08769423726163006, 0.9867841188092008, 0.9577647642037397, 0.9438304577174305, 0.9823425270446792, 0.9353941872744987, 0.9659600244768247, 0.9653612591641443, 0.9806737909755587, 0.9796383843933465, 0.18873227764348344, 0.25527162088379796, 0.2900997224926932, 0.19738487125070137, 0.24796896146676162, 0.26445974934017236, 0.2036973679193098, 0.24104513542577333, 0.26874579829916134, 0.21452919897227474, 0.2513469082982944, 0.336342943967765, 0.24865377528547394, 0.2889339261426179, 0.2842835173592876, 0.22015410352088538, 0.3088842855822066, 0.23499251135378896, 0.13006600714196015, 0.15990912060480955, 0.14200010515390926, 0.10404460517655134, 0.14857512399579043, 0.1731623070553816, 0.11898645692895715, 0.1431160920118626, 0.14234598701708456, 0.11547524615151994, 0.1432002038682536, 0.11086846986077348, 0.1240795790625625, 0.1397627318721989, 0.16611214850819156, 0.12145578480206165, 0.1574746604882985, 0.14309459993665974, 9.999999999998899e-05, 0.001521020314506294, 0.018550640724273815, 9.999999999998899e-05, 0.03582875670918961, 0.0009463451945823653, 9.999999999998899e-05, 9.999999999998899e-05, 0.0333048039519761, 0.12397772118719863, 0.1562579393377086, 0.19154795144314607, 0.11067892043013539, 0.11521341389304784, 0.02799350112999599, 0.1610019731263499, 0.06767315521124018, 0.1013413573985612, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04514733826661865, 0.06915384774617217, 0.10379616701091887, 0.05119970500006732, 0.07171669468808872, 0.09900567548247019, 0.07098130562832816, 0.06911529709441289, 0.0846345886689045, 0.3107600570152532, 0.3845565111420961, 0.3826009749903725, 0.3230361478745527, 0.3680187782326162, 0.37149155796552114, 0.32171241429780106, 0.35875764469139493, 0.36584849787644436, 0.1130860775783391, 0.11371212581652523, 0.117584694390508, 0.08169460595862965, 0.11447767147132037, 0.11634257119589675, 0.08804932395517029, 0.09491355663327972, 0.11461770164840634, 0.15270683598343116, 0.1510528054265058, 0.21443752502359437, 0.1969224903459863, 0.20885066516568618, 0.17355177687087764, 0.15423516096656908, 0.21104106294654523, 0.2163495938587615, 0.22044657283199753, 0.15646650740020052, 0.13558102878337908, 0.23827760375842133, 0.2316449130132875, 0.21418714186882626, 0.214035785794921, 0.18561232197486888, 0.12410764658235929, 0.20226110449042056, 0.09495628553456392, 0.05938776056588324, 0.19239620997625118, 0.19289389812939062, 0.11897201916763955, 0.15157952012335296, 0.17205015876579421, 0.13742622763967915, 0.21427418623971184, 0.19812576040996233, 0.19562566092837674, 0.19251091824883737, 0.2114064148468231, 0.20023179659766388, 0.23457376005983022, 0.19346503211368404, 0.19970279729029072, 0.1839094528389429, 0.1863276578201869, 0.19700439226297795, 0.18152421925599638, 0.20158596844821608, 0.20173648440344283, 0.17576566238774471, 0.18706810957653486, 0.19221731933049646, 0.14950758628347283, 0.1369583455825243, 0.09875286987625409, 0.19322270133093433, 0.11232448344764001, 0.06205343204176128, 0.10843064751124398, 0.11498890414107532, 0.16888328454435164, 0.42440785116994895, 0.11333989420402757, 0.08324115247908048, 0.0825899672922249, 0.211290667897313, 0.21258645910462382, 0.11353208179071661, 0.16889521538574703, 0.4612396707550722, 0.17519091342969184, 0.1901050692704187, 0.20904417023230104, 0.19132587434097192, 0.19317294664999318, 0.19325181885744136, 0.20361913361846917, 0.1979312396475359, 0.18567534788072848, 0.07762737938428121, 0.1199212932654764, 0.06156871954287313, 0.08589018686058658, 0.07696821986351388, 0.12352257706824732, 0.06184261671223812, 0.0764092750891896, 0.05741043157022463]}, "mutation_prompt": null}
{"id": "a4583569-4de0-47f3-814c-b3dcec028752", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        improvement_count = 0\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                improvement_count += 1\n            \n            # Adaptive mutation step size adjustment\n            if improvement_count > self.dim:  # Dynamic termination condition based on improvement count\n                break\n                \n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing a dynamic probabilistic termination condition based on fitness improvement to accelerate convergence speed.", "configspace": "", "generation": 20, "fitness": 0.03657955737077337, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.10209424017063118, 0.046702785323039286, 0.09884366454418692, 0.0204633501484206, 0.023072553058692602, 0.048859783070822616, 0.05270668430943515, 0.07171618148052583, 0.04271604004781404, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01164069380360544, 0.0, 0.0, 0.004863870074237497, 0.0, 0.0, 0.0031795472048090634, 0.0, 0.0, 0.03717029859794907, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01816811975469046, 0.007126039691111474, 0.0019453032941247894, 0.0035715480856460813, 0.02174465916508339, 0.008138228710462991, 0.0053753025091491935, 0.022374246420870936, 0.009298127451885407, 0.0, 0.0, 0.0, 0.0, 0.03985234931136261, 0.0, 0.0, 0.0, 0.0, 0.09471252234830785, 0.03781696438272597, 0.007370568821635781, 0.09537738220325576, 0.0, 0.0, 0.04430945871607306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03919547186134964, 0.0, 0.0, 0.14900386431752355, 0.01665819785511702, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.044464487610438974, 0.017624972020757412, 0.14763144051488875, 0.08160870749755378, 0.020764114097949427, 0.0, 0.12182912737200058, 0.0946675448429376, 0.07178719134041389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0659747976952676, 0.09258558444934262, 0.20395359771794352, 0.049806859373158874, 0.0967459094485914, 0.13666866953062273, 0.07970664593676247, 0.1714564650068574, 0.07891120333111334, 0.11764863613159227, 0.09069618795795575, 0.10015643555864917, 0.1578030116032162, 0.0847296233853444, 0.11152045157295631, 0.14057605725085975, 0.09011589036511014, 0.09026613110524118, 0.05235288478169553, 0.021526818154162686, 0.02921734791753383, 0.07863312324060245, 0.019092318507892725, 0.059274290985604994, 0.07921188015329861, 0.03056574430048864, 0.020240652096640943, 0.21481015050553198, 0.04871861909943942, 0.12084246089573591, 0.1947646534480315, 0.06124964919556164, 0.09692669249637509, 0.1849879865966083, 0.06259149396626995, 0.1481126020789445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06316169271429717, 0.11401542876439252, 0.05596372491089552, 0.11061606737376073, 0.04246413129975812, 0.034922860110850884, 0.06033923767847371, 0.10988857156148368, 0.0761406561476804, 0.061609725079139976, 0.09830591076808648, 0.012476957119648024, 0.013892974001124325, 0.01401355337314103, 0.020949992423859087, 0.02326091480860104, 0.01912718067689312, 0.06370675221075928, 0.14621596810960036, 0.1838611167517129, 0.12813908459203027, 0.15787673101147537, 0.10236701346411159, 0.20324951498673127, 0.17136272655420126, 0.19497589798756343, 0.15470397332066255, 0.025572110898774425, 0.006565196588049216, 0.03231248794883412, 0.025562639991436265, 0.005153516559129323, 0.007367680223698159, 0.03316922634480013, 0.01580698519179513, 0.04317903266710765]}, "mutation_prompt": null}
{"id": "0aeeacbd-d8a8-4553-bb26-31c87c0c2a84", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "64f4c504-cd7e-42e0-b94d-9546cb3ff061", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "feb5c8f8-4908-4bca-b474-450481151a8a", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "079c66a1-499e-4481-84a6-0a874f005afa", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "4c7bfc72-5671-4a3e-8663-ba718c7ee0aa", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "c9303964-9768-44b7-afab-623a464c8b9c", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "e2d5611a-c093-4ee9-90ce-a1ce9c7ecacf", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "c7fc853d-f762-4668-8b56-d16607a3f956", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def evaluate_candidate(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            for _ in range(self.budget):\n                candidate_solutions = [best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim) for _ in range(4)]\n                candidate_solutions = [np.clip(sol, -5.0, 5.0) for sol in candidate_solutions]\n                \n                candidate_fitnesses = list(executor.map(lambda x: self.evaluate_candidate(func, x), candidate_solutions))\n                \n                best_candidate_idx = np.argmin(candidate_fitnesses)\n                if candidate_fitnesses[best_candidate_idx] < best_fitness:\n                    best_solution = candidate_solutions[best_candidate_idx]\n                    best_fitness = candidate_fitnesses[best_candidate_idx]\n                \n                if np.random.rand() < 0.1:\n                    self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                    self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Implementing a parallel candidate evaluation strategy to speed up optimization by evaluating multiple candidate solutions concurrently.", "configspace": "", "generation": 28, "fitness": 0.1908085626135592, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.3684570711444286, 0.36805612090911655, 0.4069914826179153, 0.36819889263344163, 0.36149909349588194, 0.39159274213542716, 0.3967250208494666, 0.3842253604289001, 0.4368129474279232, 0.00548780015409589, 9.999999999998899e-05, 9.999999999998899e-05, 0.04216889575845928, 0.021370227304928435, 9.999999999998899e-05, 0.024309014282526187, 9.999999999998899e-05, 9.999999999998899e-05, 0.07762704110074814, 0.07709424523547992, 0.04199676638973815, 0.09334044112042084, 0.08800167536270476, 0.04810220085335326, 0.07693323739457159, 0.067773542462775, 0.03449485600353397, 0.08516106160893999, 0.07108163811380053, 0.02080958280228551, 0.0879125467529972, 0.10028071072776312, 0.06873899840061093, 0.0811984795306907, 0.05666927191601112, 0.05172750378754443, 0.9597176269248275, 0.964956983020732, 0.9358793655382355, 0.956967360028689, 0.9540974211380677, 0.9588301215578383, 0.9462568418010878, 0.9664959562048576, 0.970144586535309, 0.24905354700420557, 0.2613059889312068, 0.2644200488040013, 0.2579544948458573, 0.27297732087537563, 0.2581006604875057, 0.26188156971405796, 0.2786307205025893, 0.25911881911534773, 0.14215622918259108, 0.21189132138167788, 0.17822104073150635, 0.22045877994706398, 0.2150213669035791, 0.2587721220477448, 0.24252967972774409, 0.23116819574293135, 0.1775614341822942, 0.15218943362402348, 0.1478840632786128, 0.17622958664082689, 0.11951077718484704, 0.173292922186288, 0.15672049214701023, 0.15817890911457666, 0.183507903773805, 0.15534803836379774, 0.16088832370120876, 0.16221383846756454, 0.10881402921623973, 0.14887137808759177, 0.16227292948809846, 0.15077841226843536, 0.1759020896269281, 0.16748804281802843, 0.12923877420688545, 0.008401752594274559, 9.999999999998899e-05, 0.028181411014720492, 0.008383326068177821, 0.0273416612486862, 0.02913145025263597, 0.010864170348401814, 9.999999999998899e-05, 0.0033903489294346834, 0.11218223455924725, 0.15137341315500596, 0.22686742073987132, 0.10971748552643823, 0.07421988645735422, 0.048679152176576146, 0.13686771757339666, 0.05964296524767965, 0.12280007752501065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714441978931229, 0.10158515565392534, 0.0653716863804571, 0.08308937017969387, 0.0651868753241408, 0.08969441914207021, 0.08180707347340832, 0.10081532387216452, 0.1074427834007784, 0.37921831791918825, 0.35312364233033533, 0.37754380059070447, 0.3848210116575106, 0.3910855742051249, 0.37112107254858784, 0.35798662055266117, 0.3445920006533404, 0.3621350797858448, 0.12634970973231974, 0.08279764718663196, 0.09553574873440629, 0.04779298252757325, 0.09712812455899167, 0.0629794088782124, 0.09072994575693405, 0.13047480058552607, 0.07524869027974723, 0.22108421019722435, 0.14716357925919799, 0.2203712542995494, 0.18595786485653099, 0.23248646479550894, 0.23244176177245246, 0.1951416212052708, 0.22146488941822684, 0.17392579177602507, 0.22785357998120603, 0.1879942024153498, 0.1377486058852101, 0.26363559798431324, 0.21502452216515244, 0.11448774907813786, 0.20494189280264896, 0.1835228473751931, 0.10069302594105012, 0.2021751468926698, 0.10111130255579881, 0.05062388305106813, 0.21751705240259733, 0.20088278863517184, 0.08738458480862665, 0.1753414040867326, 0.1374453046015447, 0.06291978741054682, 0.2213969854516581, 0.2012693443977045, 0.18583997398078034, 0.1945388434249673, 0.19477892828958077, 0.1803335546820457, 0.25443089537089636, 0.1903339333264632, 0.21263341885675535, 0.1740719858974984, 0.1712656963511041, 0.18068712122176767, 0.19130127338753644, 0.18808520539527895, 0.1759197943255536, 0.20728857043155713, 0.1846960790154628, 0.1970864996069449, 0.1877798678485647, 0.13700068230416984, 0.6103209824631988, 0.17342601907671673, 0.11281439276663385, 0.06196577877743947, 0.10873128545834787, 0.11517060378567234, 0.16863916693397063, 0.512423275708804, 0.11323693613786745, 0.08313392983719947, 0.16981725135184111, 0.21164804356124012, 0.21204289486511585, 0.48479798064271296, 0.1303680168536222, 0.4874376147883115, 0.18176076276553144, 0.1920007080983943, 0.17313209785406303, 0.1949642608569997, 0.20264728619247097, 0.1872619235498345, 0.17461855300496887, 0.187839495692955, 0.184647814429865, 0.12108897834800503, 0.08554675396206113, 0.06527871878130898, 0.061845361646156394, 0.06871225632450328, 0.09586760667426808, 0.13687805385298757, 0.06123204870851073, 0.05008952666323219]}, "mutation_prompt": null}
{"id": "c1a2b7ef-c86d-4ce1-ae60-06b0011e54df", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "38252817-0979-43fb-aa1e-525ecf2c3ae7", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "0b4c977c-d29b-4b60-bab6-45f53e7764b1", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "720f123a-804e-4170-a1be-ad6469681d67", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "0f49fded-cd91-4cc1-be7a-51c26438a415", "solution": "import numpy as np\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment per dimension\n            for d in range(self.dim):\n                if np.random.rand() < 0.1:  # Probability of step size adjustment\n                    dimension_mut_step = self.mutation_step * np.exp(0.1 * np.random.uniform(-1, 1))\n                    dimension_mut_step = max(0.1, min(dimension_mut_step, 2.0))\n                    best_solution[d] += dimension_mut_step * np.random.uniform(-1, 1)\n                    best_solution[d] = np.clip(best_solution[d], -5.0, 5.0)\n\n        return best_solution", "name": "ImprovedMetaheuristicAlgorithm", "description": "Implement adaptive selection of mutation step size based on each dimension's fitness improvement individually to accelerate convergence.", "configspace": "", "generation": 33, "fitness": 0.09679991875845291, "feedback": "The algorithm ImprovedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.26796032073757237, 0.2194694669480315, 0.2458963070332264, 0.29966920647925444, 0.2576056377387719, 0.25840079266346705, 0.19311216585567803, 0.29677277503429167, 0.20816748959703546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03696952493262562, 0.041070928547146446, 0.03899811396959085, 0.06817879027858476, 0.0022617907701670825, 0.015731260646704714, 0.05002761998647076, 0.01205988696718796, 0.05947427590220544, 0.039966064626627884, 0.02139626383387072, 0.026201872265075643, 0.05137667968701476, 0.017816444858235303, 0.02422192102173759, 0.0567170989982948, 0.004406406127795748, 0.02055941532231864, 0.07420572124482061, 0.028064891240689782, 0.06906236863216342, 0.1052215408576711, 0.047052467222237326, 0.11243552823669323, 0.10550980898096274, 0.0542323669253334, 0.12075208152895989, 0.11722467582518237, 9.999999999998899e-05, 0.06241035190416755, 0.13571308140120564, 0.07757186797964111, 0.12526906916909042, 9.999999999998899e-05, 0.10598166151782551, 0.1047152222585842, 0.10181411991909084, 0.07948477719024571, 0.0890970181026356, 0.17648479762490754, 0.1108613068139419, 0.12141847223349833, 0.10907575052482277, 0.05178364315563577, 0.07189477804873112, 0.018110390143450616, 0.01872355674999615, 0.06582568267021083, 0.057622104811953845, 0.09447998592464646, 0.025432842819119617, 0.07740034942603558, 0.11378042686429723, 0.08570218285374653, 0.0926219866820891, 9.999999999998899e-05, 0.01250219620504378, 0.04999526043145397, 0.12123595851007263, 0.10643503688487799, 9.999999999998899e-05, 9.999999999998899e-05, 0.04997730005089618, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1388088742357968, 0.06366213900101136, 0.07012276320416622, 0.056235640687360866, 0.011928776710908862, 0.009623336217454703, 0.1434881050754755, 0.0228610647452393, 0.06497280460362787, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039164843910453384, 0.028565566617811733, 9.999999999998899e-05, 0.001483963144119138, 0.0432471227247484, 9.999999999998899e-05, 9.999999999998899e-05, 0.03398696288429037, 0.012231847121043526, 0.1836211293373271, 0.2918984542465092, 0.2361858227505007, 0.26808141902732563, 0.23999487707272593, 0.2734262560913874, 0.24168388488247106, 0.2669852311572265, 0.25248310637330484, 0.04691670316057772, 0.027361914427210254, 0.035876973021485514, 0.07670717747602251, 0.08598728736204708, 0.03688220024909061, 0.0666302255807073, 0.04091681857565577, 0.04926436347455643, 0.1284644491058673, 0.1546615781669357, 0.17133613411198423, 0.18164275059945412, 0.15143476321584837, 0.14491649746500312, 0.1387150979236179, 0.12897062071854037, 0.16040513980829785, 0.1742955661703106, 0.12070533522836813, 0.15901957477243445, 0.15046771628196098, 0.16379518942841043, 0.1264856524493373, 0.1770502538293911, 0.17440515759839548, 0.1455141528706061, 0.11853021986517831, 0.045834221229903216, 0.06201787850867624, 0.12476229122448801, 0.06983824714724285, 0.0823729992031611, 0.1378245996181111, 0.1154352415031159, 0.08981469537109188, 0.17782895832551526, 0.14768785696002795, 0.1377468637250755, 0.19245991301467924, 0.1316383059760068, 0.1499697835901065, 0.18657172922572185, 0.1536931806999946, 0.1640507835078714, 0.14973833619702548, 0.13930151965376658, 0.1599092592783008, 0.15658801517064747, 0.16433971284198046, 0.1489736625003898, 0.1762562682954505, 0.1629573170075892, 0.160095075733928, 0.17010628580631781, 0.13364635131670255, 0.1685044822095726, 0.15685017226530928, 0.14022366191998026, 0.13771477569484214, 0.14044929423264585, 0.15101006060852729, 0.13969535514837883, 0.2263435054262063, 0.11089626402184372, 0.13138477542161142, 0.3027890167290852, 0.11465540559369636, 0.163892528205123, 0.06705198046224925, 0.08308905298307456, 0.12054151453482664, 0.18229887615198925, 0.1816584322514354, 0.19012775796464498, 0.1836097316432881, 0.19496956287425382, 0.18642901914643462, 0.1874556664087419, 0.18373318510178838, 0.20463008083404965, 0.057539873178124035, 0.027712816479773972, 0.04309295918325329, 0.06350484546169133, 0.05376165807660749, 0.0661656116344056, 0.05885149034963233, 0.030703321096835157, 0.04871171074382308]}, "mutation_prompt": null}
{"id": "0dd56b49-e410-4c2a-a62b-d723df1c7e6b", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "3fd4882f-51bc-4bd6-8d00-43b9d02d425b", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "465c17bc-47b3-4fc3-bbf9-220137e5e81c", "solution": "import numpy as np\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for i in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment based on function evaluations\n            if (i+1) % (self.budget // 10) == 0:  # Adjust step size every 10% of the budget\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "ImprovedMetaheuristicAlgorithm", "description": "Implementing a dynamic mutation step based on function evaluations to adaptively adjust exploration and exploitation for faster convergence.", "configspace": "", "generation": 36, "fitness": 0.1835284517324786, "feedback": "The algorithm ImprovedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.384689932493419, 0.34986913596093805, 0.37254031273549826, 0.3821871069049082, 0.3917783249982827, 0.389176780503675, 0.3954801300804326, 0.38111223765500024, 0.3706592847538993, 0.02457706814285665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04079220632324432, 9.999999999998899e-05, 9.999999999998899e-05, 0.004841859222224576, 9.999999999998899e-05, 0.07805572154068319, 0.05006474568471586, 0.02970116156538627, 0.06827318892175804, 0.044840944614521705, 0.04882631820030414, 0.045847128907262724, 0.04226052277970849, 0.06724271281149818, 0.08616338325214623, 0.04247881348047411, 0.016536387590242674, 0.05501580327383815, 0.09253876878913092, 0.08945049749023892, 0.031211019825479025, 0.058327362044539366, 0.08731732787766289, 0.9652901183719007, 0.9542584696944627, 0.9425918581775262, 0.9444740701220143, 0.9289254480955729, 0.9418211804399118, 0.9665870116522541, 0.9562503870618928, 0.9753441052159091, 0.26768998400764576, 0.2543840012466746, 0.3048775720695682, 0.25811431762478154, 0.2645418027305404, 0.24023402691421347, 0.2396150231227806, 0.2873600783336049, 0.24245107331525273, 0.17273361508012908, 0.0843432275655327, 0.12173080336481157, 0.3314632155823085, 0.30891704996250646, 0.2806804943626605, 0.2149856038107083, 0.24918689896044355, 0.1730721827724021, 0.18690684368869237, 0.12854838552266723, 0.1578799076223648, 0.16534689840060635, 0.12267592529151261, 0.14628203638574344, 0.1436204329857539, 0.12709859364653708, 0.15837828756449202, 0.14067561798177308, 0.13208369746221993, 0.11721569968503842, 0.15385075559346884, 0.17186278345070805, 0.16426230775380046, 0.13550550007074347, 0.15567496567324435, 0.14363347600640264, 0.011552409043565803, 9.999999999998899e-05, 0.06613763365936154, 0.00015767821687728834, 9.999999999998899e-05, 0.03014125636928089, 9.999999999998899e-05, 0.0003343809662270658, 0.05817973147730371, 0.10485011163580404, 0.08632511759882078, 0.18504755260404882, 0.0789138892870962, 0.044044722673090675, 0.05811131309285411, 0.16735067570139495, 0.08137447940454201, 0.1627113891726356, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08776720435049445, 0.08648913911843104, 0.07327946582917189, 0.08133630022644445, 0.07766437170411988, 0.05724964698815971, 0.07001354339093391, 0.08129815160890208, 0.09592928018571689, 0.35025557531288376, 0.3462150720938608, 0.3594881875633871, 0.350243705015748, 0.35675166660383906, 0.3760507627942281, 0.3724117453603778, 0.35632674387519203, 0.3579460880586084, 0.0843078435937441, 0.06507306916108313, 0.09899251479698401, 0.06908779203806703, 0.08508686281090216, 0.11820529107930011, 0.09118909516485274, 0.08822757799414849, 0.09909739866996625, 0.2138589567481195, 0.197082508310078, 0.1903362639852323, 0.14589770229895183, 0.19797893341390327, 0.1511290275487709, 0.14170463058313731, 0.21889102098321322, 0.21387657270264782, 0.20652639615408397, 0.14867672148887578, 0.12504363901336657, 0.22769115307091348, 0.1750745735719258, 0.11343012214634018, 0.19601762376942478, 0.19112017084159638, 0.08905100525179677, 0.1955693561961208, 0.13210008451132438, 0.17129484112610338, 0.19482081466816825, 0.1439992761858826, 0.062159413700224486, 0.1682750517173901, 0.10002753125016117, 0.032368769746920045, 0.20768807179677973, 0.18928196911313921, 0.19123970091759734, 0.20450160024404718, 0.20897543905768423, 0.1837350214589435, 0.25432795170581635, 0.1889269800021227, 0.18492070649049597, 0.17581598088271144, 0.18366662864268768, 0.1816488874929708, 0.16945745045741956, 0.19523166478240772, 0.17759329730723783, 0.18732962604360592, 0.18676046953302972, 0.181644231942528, 0.1886273260153456, 0.13698822835179014, 0.6190306905263583, 0.17315358949763937, 0.11266187199800404, 0.06195546883120462, 0.10870044364067522, 0.11509759665232666, 0.16863333256774526, 0.4958321467647073, 0.1134297146806793, 0.08314015612937486, 0.08307624607396813, 0.21255804486211616, 0.21212203639321714, 0.11313209962410242, 0.16432182808809992, 0.40162605667975515, 0.19926570850892278, 0.1852558521874622, 0.1841946451837675, 0.19085426609322143, 0.17737575894580582, 0.1850157816458805, 0.17252938320512656, 0.1761432238558478, 0.18416648740059394, 0.09092632038618409, 0.08849405410584332, 0.06665697248182201, 0.07230111529038696, 0.053824529240590335, 0.11082748247087015, 0.09922027491085827, 0.06731221743527582, 0.05864842547370741]}, "mutation_prompt": null}
{"id": "dfa68089-a91f-4d84-865e-6fd981f9175a", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "ef3c7748-4b54-4531-9127-27a815eb81e3", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "be798263-d063-42a1-b488-799a29cfafaf", "solution": "import numpy as np\n\nclass ImprovedNovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                self.mutation_step *= np.exp(0.1)  # Increase mutation step size\n                \n            else:\n                self.mutation_step /= np.exp(0.1)  # Decrease mutation step size\n\n            self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "ImprovedNovelMetaheuristicAlgorithm", "description": "Implementing a dynamic mutation step size adjustment based on individual fitness improvements to accelerate convergence speed.", "configspace": "", "generation": 39, "fitness": 0.17347786078208907, "feedback": "The algorithm ImprovedNovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.21.", "error": "", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.5030254513622467, 0.5121346020382292, 0.546116786654388, 0.5294113252366575, 0.5103902197476937, 0.5019857733033264, 0.5072312848878648, 0.5116830105449153, 0.5221271708350745, 0.012983971219326484, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310208527053741, 0.05319253750684927, 9.999999999998899e-05, 0.0015158792074370098, 0.03294835865489332, 9.999999999998899e-05, 0.008002695868652654, 9.999999999998899e-05, 9.999999999998899e-05, 0.05049273437926727, 9.999999999998899e-05, 9.999999999998899e-05, 0.026619584132909435, 9.999999999998899e-05, 9.999999999998899e-05, 0.006586906202483034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.8645861778893936, 0.7844054098632021, 0.8262844075074306, 0.8037200030389758, 0.7689621718710562, 0.762376441832948, 0.856801458273267, 0.8556352958816491, 0.92726020808704, 0.3802688726555117, 0.3637900141472964, 0.35547737144055813, 0.3673075825651203, 0.37099115808404426, 0.37662800254279905, 0.35694573181490774, 0.3701569801044311, 0.3766309212406941, 0.08236073360058671, 0.06814916937304061, 0.004902458900283957, 0.139576204037274, 0.15212185426664004, 9.999999999998899e-05, 0.06430302325941772, 0.026333600932033963, 9.999999999998899e-05, 0.24154699359077747, 0.23810740858786617, 0.2259836242815153, 0.21792394149697114, 0.2357674231362915, 0.21959922613498128, 0.2534187560665637, 0.22862961837574258, 0.21906102907514435, 0.22544397106664515, 0.22314118927112758, 0.13487625621984056, 0.2297792566083089, 0.24971965167640542, 0.20631705147919588, 0.2531921407069925, 0.2509225755190231, 0.19371672628591918, 0.08927215409667155, 0.0029791248788464397, 0.020705352465841154, 0.09821609387796137, 0.011926431750324262, 0.09511408700283697, 0.004286888384939291, 0.005594341960551752, 0.09225265579602204, 0.08970240193811185, 0.08830191994914927, 0.25575026025963477, 0.0773982398618056, 0.024980199918594348, 0.023907304976312882, 0.20680601686819222, 0.03821656980231658, 0.1034111545872527, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014676573491276823, 0.00011941169274121144, 9.999999999998899e-05, 9.999999999998899e-05, 0.014794798947568077, 0.01706628051384962, 9.999999999998899e-05, 0.05811614988147262, 0.09989824774535738, 0.10665026840283753, 0.12525657679333058, 0.09474450353573172, 0.10770249683697075, 0.08373591740638509, 0.0989273103528272, 0.09565737179132083, 0.5076019473142441, 0.4769653980335169, 0.4731547948105449, 0.4673634081858494, 0.47339004237225946, 0.482638851825379, 0.47000338567712463, 0.46822309063870626, 0.45929641267546284, 9.999999999998899e-05, 0.017892541913913873, 9.999999999998899e-05, 9.999999999998899e-05, 0.008706233927311957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2376854549052705, 0.09274000031761154, 0.20323860961791307, 0.05558660122213677, 0.12309945223908525, 0.09142978251680056, 0.05616160997892894, 0.201248461473306, 0.09611766139686662, 0.12155902642238547, 0.10581727409243724, 0.10842853416462617, 0.1410677348076752, 0.0672371944002238, 0.11773791661379551, 0.14731432869144678, 0.0804775777418385, 0.09069326876267059, 0.0520371664893684, 0.04292576546489635, 0.03243590608640734, 0.08119474731957999, 0.014315358981607296, 0.08423674689800786, 0.07419091976720915, 0.014064954070392433, 0.022737035269892347, 0.18765270490504227, 0.08001881351099949, 0.1033722048344684, 0.18610312529234785, 0.08684487900805993, 0.10144745021042723, 0.2089377281674908, 0.0890202848064442, 0.12451824147143142, 0.15593448348846883, 0.16584773054345225, 0.1586271271373293, 0.17020621027392446, 0.20431956687724184, 0.15879155520952337, 0.1553652674710544, 0.17423207623175818, 0.17083764940986423, 0.18993171046223778, 0.13790031357238952, 0.8265411095162469, 0.1741256658568302, 0.11274286781189025, 0.06184085557185537, 0.10877519547076975, 0.11544813872331938, 0.16892768343648057, 0.731324171848807, 0.11364857379050786, 0.08334181241467598, 0.08342955396667162, 0.21464127924435872, 0.21288923011827177, 0.11362674966933395, 0.059313306335016525, 0.051692803750170824, 0.18752176359885497, 0.18868574382574566, 0.18216093691353363, 0.18823968124469248, 0.17820976355881268, 0.17838690680139047, 0.2039793016993493, 0.18796098314624465, 0.18301278333423465, 0.03363987373528343, 0.0011278690506469902, 0.029580113259416563, 0.027650442833644595, 0.004148059595047937, 0.016896077813686183, 0.034930537149184815, 0.007781933022105503, 0.03524118138696153]}, "mutation_prompt": null}
{"id": "27b89447-a7be-4a36-b1d9-cd349bdd4508", "solution": "import numpy as np\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                # Dynamic mutation step update based on improvement\n                self.mutation_step *= 0.9 + 0.1 * (best_fitness - candidate_fitness)\n\n        return best_solution", "name": "ImprovedMetaheuristicAlgorithm", "description": "Implementing a dynamic mutation step update based on the current fitness improvement.", "configspace": "", "generation": 40, "fitness": 0.05321250426477677, "feedback": "The algorithm ImprovedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.07.", "error": "", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.11894767351142022, 0.06795081406575332, 0.11742896261463809, 0.03528662070043698, 0.030488501859195605, 0.05212418307599542, 0.07171941139986249, 0.10539293011019057, 0.0557006235468811, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020105783128411492, 9.999999999998899e-05, 9.999999999998899e-05, 0.012042213969376658, 9.999999999998899e-05, 0.006588716428002739, 0.015622545861838644, 9.999999999998899e-05, 9.999999999998899e-05, 0.02362881209584833, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023990665608570882, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02682229363519195, 0.015494686553488624, 0.005957286418652785, 0.015758945088080734, 0.030550358179240122, 0.01815034686893302, 0.016536530929460946, 0.03156851564376162, 0.018018547990116707, 0.08925020206260614, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04190867724618241, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09110882503201956, 0.04357647569134493, 0.02138952754916823, 0.09070725217186537, 9.999999999998899e-05, 9.999999999998899e-05, 0.07655996423521827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09273856340889974, 9.999999999998899e-05, 9.999999999998899e-05, 0.0535080444949364, 9.999999999998899e-05, 9.999999999998899e-05, 0.05672541565562317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06809276256895935, 0.004890978895221276, 0.01139150008953782, 0.20811230473340014, 0.03038675302511329, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10218392397934384, 0.036210825426543525, 0.16966079992128835, 0.09049808167274842, 0.04397733959267902, 0.0027182482600508484, 0.14736829064551327, 0.1288638891061823, 0.08286893592327649, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008848102175209371, 0.0009026619039111949, 0.019479953090635327, 0.029176723932293536, 0.006638062501513553, 0.38992734361257286, 0.1685495672664813, 0.18269503540496868, 0.08693566565720734, 0.16162661402117795, 0.21835776363022963, 0.12342302720184473, 0.1949590333408714, 0.1275389738549877, 0.13526500915020823, 0.10299684039639179, 0.10521951705349131, 0.17046137924474059, 0.0734175316007617, 0.11681995917870558, 0.15994773570367926, 0.09055405657118187, 0.0905704721335433, 0.05982405539303892, 0.041426655134437884, 0.036462463432423986, 0.14294219572357558, 0.005274611347238944, 0.08207744622397017, 0.1089456671376473, 0.02191049982415394, 0.022037080534754727, 0.18862719120733762, 0.09047855741289446, 0.17117496538668164, 0.1945956779399799, 0.09947981932509298, 0.14102153768555503, 0.18576352640631577, 0.10409326564742627, 0.13481597303096882, 0.15630972398798026, 9.999999999998899e-05, 9.999999999998899e-05, 0.15562439740263168, 9.999999999998899e-05, 9.999999999998899e-05, 0.16353097113266324, 9.999999999998899e-05, 9.999999999998899e-05, 0.15371116447766786, 0.13719619988987197, 0.06509269616756197, 0.16860536313964547, 0.08354751820463258, 0.04398644412837116, 0.09132278401916305, 0.11545543219837706, 0.1058788718989756, 0.38417776925189717, 0.10999427249831495, 0.015865223104984172, 0.015219104333221156, 0.021461249572000685, 0.022781721062901994, 0.04240857373483364, 0.03095447910963467, 0.12384267681395045, 0.17777884400351562, 0.18947334743741218, 0.1894675619826789, 0.18793993924878272, 0.19060247503981043, 0.1762140452951455, 0.19044833609594758, 0.18093539759782828, 0.18087479639508164, 0.03204875883248748, 0.024749661378223986, 0.030208921472911765, 0.04363016102553807, 0.007820789134619366, 0.05488847210192094, 0.06689380073419593, 0.00792426950453351, 0.051990538738409864]}, "mutation_prompt": null}
{"id": "449d3e43-045f-4b2f-b617-0cfb8a375bda", "solution": "import numpy as np\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.population_size = 10  # Initial population size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.population_size):\n                candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n            \n            # Dynamic population size adjustment\n            self.population_size = max(2, min(self.population_size + int(np.random.uniform(-2, 2)), 20))\n\n        return best_solution", "name": "ImprovedMetaheuristicAlgorithm", "description": "Implementing a dynamic population size adjustment strategy to enhance exploration and exploitation balance.", "configspace": "", "generation": 41, "fitness": 0.18200934557581738, "feedback": "The algorithm ImprovedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.38340155427724354, 0.37472383362014117, 0.3927232029034783, 0.33798722069405407, 0.3818701662340337, 0.38008686901975197, 0.3506855011392197, 0.3876731276653732, 0.40400462274406934, 9.999999999998899e-05, 0.0031929356938878994, 9.999999999998899e-05, 0.014444845546390583, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023525265943528106, 9.999999999998899e-05, 9.999999999998899e-05, 0.07841665260001596, 0.04425017540029097, 0.01699844649462323, 0.09912012075497456, 0.09670752733945032, 0.03222373364531683, 0.0741186531563961, 0.05580093194675939, 0.054330394699932394, 0.09400120532093625, 0.09672198599879067, 0.008629373969753162, 0.059640904575022025, 0.07799180876832035, 0.03557246445441431, 0.05057291156555932, 0.03518507318400266, 0.05940317786043303, 0.9741528002581804, 0.9690458459897705, 0.9242429960434135, 0.9644234600496779, 0.9535068450715879, 0.9542511368011299, 0.9592889478903606, 0.9706508808932582, 0.9620514639751162, 0.23578760812302624, 0.27757067770767385, 0.25791649344500733, 0.2709252353303083, 0.291476436448451, 0.2564810186634202, 0.22804024002879564, 0.260169449923238, 0.2869005801417496, 0.23539395596613755, 0.14017939788117872, 0.1721753067952524, 0.3105597730345876, 0.19685547664496317, 0.14620163803634623, 0.23099775585979787, 0.3117723661214592, 0.17779461987004286, 0.14888065026966146, 0.15041796370806948, 0.16350323834216018, 0.14692734341226465, 0.1671752787813352, 0.16332659787287884, 0.1450873910474344, 0.17042190576492544, 0.1776569649914218, 0.14715528224860808, 0.1538089710296059, 0.1217727771851036, 0.14830472805322037, 0.16834375147609681, 0.15936040963408382, 0.14158545486333074, 0.14417691307150693, 0.1424588069907894, 9.999999999998899e-05, 9.999999999998899e-05, 0.016458101336706332, 0.00512964210838085, 0.00737830698729558, 0.029702314225853677, 9.999999999998899e-05, 9.999999999998899e-05, 0.03439994617471953, 0.0881231564783238, 0.10037406473938648, 0.11351115469411943, 0.14429573304841137, 0.024928179891894664, 0.05230948009929359, 0.18415766896423613, 0.08609591901752078, 0.1396634890501236, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05519309663887639, 0.06753463910146296, 0.08010939557167673, 0.045900167364469446, 0.0769499537708156, 0.1058886780598225, 0.062320922515317956, 0.06998803837807044, 0.07310713275162983, 0.34021346513996364, 0.3659993620277736, 0.4471904881518597, 0.3599114178992595, 0.36565816830597586, 0.3751820364386642, 0.3393381608209063, 0.37318855739819123, 0.4011337362559595, 0.07131429431688796, 0.05841191878047214, 0.06244324542957491, 0.07311068510428109, 0.13218363317963844, 0.060120338132346296, 0.0863714830449579, 0.10013404970733886, 0.11854422005607268, 0.2102450753751185, 0.1426706194276951, 0.19581876649691488, 0.149160628919478, 0.17400710618016169, 0.16403274287916214, 0.11484000665508409, 0.20344868581907993, 0.24429580281634822, 0.23674978329867902, 0.1816551306701465, 0.1087806300386912, 0.2466744096129082, 0.1866495431592119, 0.11499515801197868, 0.19159853927223147, 0.2548202079542815, 0.08999726745302705, 0.15859057103128704, 0.054000429684277096, 0.0588806227133406, 0.17933614528425712, 0.16333587261166216, 0.07413607528339194, 0.1820313679305149, 0.11180750332995626, 0.021924027952740843, 0.20638534577152345, 0.22243371680657897, 0.16545664739377752, 0.17988217763614067, 0.18277948677403366, 0.20351726643307644, 0.21451824680720766, 0.16479879420442134, 0.20090045662820555, 0.179525855954755, 0.17439182896168404, 0.177475513177068, 0.18324999749804582, 0.186526953304199, 0.16526136431199634, 0.1887425379584442, 0.19012870663712178, 0.16080175650804418, 0.18913594189138727, 0.1367843817811225, 0.6090543166802265, 0.17307281472571812, 0.11267015363696209, 0.06202555353640293, 0.10854900215902819, 0.11513752638750196, 0.16943295377227896, 0.4562421590698621, 0.1133683189461524, 0.08323653240456952, 0.15311556314668873, 0.21165412337346456, 0.21307389696404455, 0.1127433453901393, 0.05919864373719086, 0.444626687823073, 0.17567890628878635, 0.18702506692027698, 0.2161611150736521, 0.18127104767227897, 0.1877361603034443, 0.17919252851477907, 0.16934576854598093, 0.20932268417342192, 0.18597184391193466, 0.057365876805528404, 0.10002224007364346, 0.04796569273723139, 0.07486716623799472, 0.04644339291487509, 0.08170539371192898, 0.06085318607175427, 0.06404651737696221, 0.04678554422636605]}, "mutation_prompt": null}
{"id": "4167281e-3c8d-404a-b5a5-148919db8ded", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "7ea57112-ab1f-415b-b246-33e619a9827d", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "3a2ade8e-e9f7-4e55-b725-929ced932b8d", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment with increased probability\n            if np.random.rand() < 0.2:  # Increased probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Increasing the probability of mutation step size adjustment to accelerate convergence speed.", "configspace": "", "generation": 44, "fitness": 0.19087925512569903, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.350632714630144, 0.45925711555497284, 0.4624616086461686, 0.38792640574564496, 0.4677074597433082, 0.4473958917373446, 0.36899267843663863, 0.46248097589299964, 0.43797154286937756, 0.003952589302186782, 0.00833286352309337, 9.999999999998899e-05, 0.016356495490367884, 0.055616389276817224, 9.999999999998899e-05, 0.017752037860104042, 9.999999999998899e-05, 9.999999999998899e-05, 0.07961163665300997, 0.041684117411730726, 0.02548388710434102, 0.09489552006358504, 0.048113210592073075, 0.0630600778521877, 0.07481151083019999, 0.07769145961865054, 0.0951164575784913, 0.09500744136038453, 0.02007225385643363, 0.04699375182617349, 0.08587452203016344, 0.024357260229191935, 0.06943803420466543, 0.08452082293137042, 0.018936200100373224, 0.06391544756839063, 0.9804966355173572, 0.9728216234454388, 0.957257064037854, 0.9678657517573515, 0.9515682545822045, 0.9673827276228427, 0.9617577470210656, 0.9536224002736005, 0.9751871341948001, 0.23063014153034178, 0.3474177007565076, 0.3202753350669233, 0.25063419092415107, 0.3359228051669392, 0.33420103629445763, 0.241097703276837, 0.3241073300914018, 0.3222389285565854, 0.3239851576756084, 0.10237529792674305, 0.14365557378891936, 0.39327676305137194, 0.11473674762451114, 0.2785679513899796, 0.325778424740247, 0.161259238134141, 0.19199980261208616, 0.16492831322876578, 0.21520797533559688, 0.19336383197208706, 0.15941295810044098, 0.21610733339405563, 0.18895649538356685, 0.11512381759092027, 0.1955965507450953, 0.19059402835978434, 0.14815098260252668, 0.19733762614778094, 0.13164388233883695, 0.14066265458113503, 0.2655767421572084, 0.1326621806577436, 0.1387141319840024, 0.20448296298953228, 0.18200890673123582, 9.999999999998899e-05, 0.0029962902948041936, 0.008511816517409732, 0.0022366451719816327, 0.009856293229935198, 0.005253913803620169, 0.0034208733917620027, 9.999999999998899e-05, 0.04702815723175968, 0.09921621998424546, 0.1254425878198694, 0.2233350822541651, 0.1265990587879764, 0.0402025520040894, 0.035851694674550294, 0.2154197909769957, 0.04176576092487316, 0.10456443418539751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020212530827231623, 9.999999999998899e-05, 0.06337649627316932, 0.0760431462706449, 0.05798078005495022, 0.07893425472023086, 0.10486274606710144, 0.11905054489396771, 0.05787227274939, 0.10769323318494428, 0.09464631258272238, 0.37612335808504205, 0.4384227177923651, 0.43418810724979207, 0.3339156951415746, 0.4371435763386856, 0.40859997556543326, 0.3452080811283684, 0.43989629814366515, 0.4305475463662287, 0.09017208393541909, 0.021038200228216897, 0.12989506684917473, 0.09895590323866943, 0.07976843266294087, 0.08203074365939667, 0.10509584871011501, 0.11811485211455852, 0.09896581934566673, 0.18800743258501385, 0.1333747220330881, 0.18101571316929543, 0.20757750543955045, 0.3212753218581168, 0.2724655816326683, 0.15259598024199572, 0.30380504335111946, 0.17973699203923466, 0.25377507000386434, 0.10031502120630287, 0.14819724256036848, 0.25763393265465573, 0.10694727700585904, 0.12413354225777562, 0.1896381573623387, 0.12712402884617025, 0.09433278082754781, 0.19883585779104207, 0.042563316756965786, 0.08687453765541053, 0.17541657044083492, 0.1967099134243422, 0.12360496197757098, 0.16927889386075912, 0.05735495865573503, 0.039869114620593615, 0.22853523911523665, 0.20031846221831895, 0.20999635103492464, 0.20568941989126044, 0.1935648730106917, 0.22231766489649485, 0.20926375863212154, 0.15662820142139522, 0.20624194601421386, 0.19904724791255846, 0.18541624408748525, 0.22920021963260173, 0.17156246788065987, 0.1773866875057749, 0.21669905299665793, 0.19193439694024383, 0.17968702122498637, 0.21461360738169966, 0.18638085217032352, 0.1377263238068206, 0.09837923870633747, 0.17316081760709134, 0.06602142437247627, 0.06202502010924016, 0.10801307941796845, 0.11537235039585392, 0.16894072174152353, 0.4350064838301664, 0.11348956518214381, 0.08315884855071287, 0.0821284108528122, 0.21408528418045303, 0.21349942675594336, 0.1123069874061855, 0.08401130821723723, 0.4886556256425293, 0.1837587641373859, 0.17796731100240104, 0.19660803151048334, 0.18494863363656144, 0.1794630321538152, 0.19068379772901445, 0.20711821328754754, 0.1776191086216502, 0.1811432442664137, 0.09846789578398696, 0.06916003268674598, 0.06926182227784372, 0.06188444055481035, 0.021236714115488553, 0.09109600026934728, 0.09031487868163968, 0.030361474965936552, 0.05516587089879832]}, "mutation_prompt": null}
{"id": "f0f27227-f7eb-4a24-b782-d603ca20ecc2", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment based on landscape sensitivity\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(-0.2 * (candidate_fitness - best_fitness))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Implementing a dynamic mutation step adaptation based on function landscape sensitivity to enhance convergence speed.", "configspace": "", "generation": 45, "fitness": 0.17172184224170575, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.21.", "error": "", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.5179647606251707, 0.48826762690014514, 0.5254208254577468, 0.5035450014896299, 0.5267785150562296, 0.5153291105119475, 0.5124205361825075, 0.5060696943814917, 0.49863019643368023, 0.033519661626902786, 0.06964778476596489, 9.999999999998899e-05, 0.06534249797917724, 0.04292648823284839, 9.999999999998899e-05, 0.0005257908580313941, 0.0018648712919085986, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01784876242319733, 9.999999999998899e-05, 0.0042647590928136525, 0.014695905936833675, 0.004636757418580939, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.8789721583179261, 0.8418592811869007, 0.8021061760970779, 0.8593971462611559, 0.8467746627321499, 0.8045399259783426, 0.8360732319886952, 0.8445776669323053, 0.9368418281956231, 0.40035597352724095, 0.3461376620786104, 0.3621489575615179, 0.38673585974325264, 0.3933906756898896, 0.39731383759051564, 0.3566954059165043, 0.364776219483146, 0.3573078914951455, 0.05427035622396181, 0.03160055777824833, 0.014308527785872549, 0.0642504891779836, 9.999999999998899e-05, 9.999999999998899e-05, 0.03044653160086841, 9.999999999998899e-05, 9.999999999998899e-05, 0.22147957826552234, 0.2264587748465523, 0.22252557211491808, 0.25681239399001066, 0.22208295713136605, 0.21193853232585358, 0.25452813058681967, 0.22696232517442516, 0.22429525160234998, 0.2386194151506913, 0.22721890312321213, 0.1340221053399706, 0.22000319576127603, 0.28622638284622526, 0.13701933729327753, 0.22286589729988104, 0.19003059813365253, 0.20940775845374715, 0.0894480975897235, 0.00014486422929627096, 0.007562860156115514, 0.05726971298188854, 0.06214873332438253, 0.05297370008908908, 0.003687859805527993, 9.999999999998899e-05, 0.04520595592908083, 0.11142696070106795, 0.07932631800632495, 0.31247485144549114, 0.08956512096500535, 0.04326168374063977, 0.02808104920227328, 0.22410746150296867, 0.029515386779583208, 0.09662132439086513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00042179953185439434, 0.0018812891602001391, 0.005353892946559746, 0.08836875130068622, 0.15418057591541978, 0.11864289958981367, 0.12974895975636647, 0.14596434676211267, 0.11298882271674082, 0.08750168712004902, 0.10180770983695786, 0.11265129412388619, 0.4749919319672695, 0.47558385052673835, 0.470450075209905, 0.46188046847341835, 0.4585749421509464, 0.4658941637158017, 0.49987484142427296, 0.4652943114869046, 0.4759291685834284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005036834901353204, 0.0066389572367852034, 9.999999999998899e-05, 0.029809753840333686, 0.007008538056353375, 0.15588045012050278, 0.12501376461779878, 0.18840852725478752, 0.05977214651088958, 0.13783122891644928, 0.2557175520599382, 0.05281198396459441, 0.20308154268092604, 0.10421247048927995, 0.11494096573702595, 0.09962663868088295, 0.10688992831925426, 0.1407237344820047, 0.07346981835709698, 0.11847188337201098, 0.13470148355867173, 0.07779407313727316, 0.09206689226779274, 0.0507581652431347, 0.03440937065073446, 0.03175282600965912, 0.07646512382955584, 0.00816568971751952, 0.06483927709349135, 0.0734854547331959, 0.016037499711448855, 0.021238247854081016, 0.18861554145645654, 0.08237247231647526, 0.13634474612463143, 0.18439881543151138, 0.09426464142919644, 0.11969034396626432, 0.18547207702569202, 0.12052073524944895, 0.13047329604303304, 0.15320711457906455, 0.1604988972117617, 0.16446260290115955, 0.1590462418884574, 0.19443780276517486, 0.15674038271108748, 0.16372366149791417, 0.16629360208760469, 0.16754461144267974, 0.07307223082808145, 0.1379625039552853, 0.09906356659118754, 0.17378134335635465, 0.06590502587878744, 0.06203334746603195, 0.1086592259191611, 0.11543280418032298, 0.1689088430621256, 0.7121923460676807, 0.11363963411606803, 0.08295078301056713, 0.0832937267066165, 0.21496968565104357, 0.21343521772656127, 0.051386171349014687, 0.05923785836856332, 0.6065125892676815, 0.18576905698023083, 0.1887190255478972, 0.18970815164204136, 0.18380869337455819, 0.1894915444290225, 0.18937104648846925, 0.1919581475740536, 0.19350325460049522, 0.17898618925606002, 0.030713052632809212, 0.013074770248799772, 0.028760239828130807, 0.031523041718385825, 0.005067008219386104, 0.022947648803022136, 0.037296407567878886, 0.012082895768234847, 0.04434703390924699]}, "mutation_prompt": null}
{"id": "f0c3ab14-2a3b-42e1-91cc-a4a00ad14187", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "1388b6bf-f17c-4437-b1f2-ec3292def679", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(5):  # Multi-step mutation\n                candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                    \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Implementing a multi-step mutation strategy to accelerate convergence by allowing larger jumps in the search space.", "configspace": "", "generation": 47, "fitness": 0.189371308529889, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.38283926687131264, 0.396801034976467, 0.36806157248164706, 0.429145090084573, 0.4115050238053253, 0.36551780368640097, 0.38717530390975585, 0.4287559925953548, 0.38383633859963684, 0.04227801131673292, 0.0036479423670844335, 9.999999999998899e-05, 9.999999999998899e-05, 0.0489659549320699, 9.999999999998899e-05, 9.999999999998899e-05, 0.01726770280329526, 9.999999999998899e-05, 0.056005806490220134, 0.04698011361805765, 0.037831116869926906, 0.03448438420807709, 0.05721626565339044, 0.07704219560276393, 0.027110048626394212, 0.05281698700168602, 0.06720529716825918, 0.08632076304520175, 0.02672660888171774, 0.03019503762990461, 0.08922739313564398, 9.999999999998899e-05, 0.06951831868867298, 0.02759288793127035, 0.02068929716736223, 0.0529924509918237, 0.9749120915851212, 0.9724420750984836, 0.9544766468496001, 0.9616785027055116, 0.9478367539682232, 0.9461120772722994, 0.9455325472949868, 0.9644093273263975, 0.9739329143012423, 0.2693100259637655, 0.30941116127656365, 0.2364002539339426, 0.27178601837265726, 0.28152269338539304, 0.2734726573203732, 0.26888921455926573, 0.273073022752198, 0.23143823340843528, 0.17129718629702007, 0.10391592114523096, 0.15654938398065765, 0.3608645412753754, 0.344063066331748, 0.2725061341896503, 0.3602341640579543, 0.2175738265920334, 0.19115855773013024, 0.1645294617428723, 0.1856298954807054, 0.17012759263946864, 0.17775999137112064, 0.17188534174405978, 0.1857236333824066, 0.1979486476029585, 0.18851416338089366, 0.16221690838841551, 0.13063597759700063, 0.17382913065738537, 0.11930951879912477, 0.16139707588196905, 0.18533420272711487, 0.13520021384634073, 0.17194999162846614, 0.15272686744036268, 0.12143216876051988, 0.06016340017630706, 0.0029147140542241656, 0.03726403679935064, 0.033208800812699835, 0.00030549870405216506, 0.00018307656134364247, 0.013359919001057818, 0.00010957179518877869, 0.011591098547324652, 0.11916227164368698, 0.10327544697018298, 0.19873133235859075, 0.1347945431095855, 0.07541655279021708, 0.06136262285670113, 0.1618906731840074, 0.05549463136432009, 0.11722824764606321, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07116075997035531, 0.0792489157415257, 0.04236904533308339, 0.1046769793208463, 0.11292909498106196, 0.09428423041216394, 0.09060467018219298, 0.08615692032849764, 0.06850353124585307, 0.38840803711815874, 0.37676155222914165, 0.35740704990565053, 0.3952274231790147, 0.39261228633716405, 0.4140016302425549, 0.38570398248832993, 0.3896583906333744, 0.3593617989085922, 0.07441013593972512, 0.03920647104258568, 0.10588343032272174, 0.051935983903177885, 0.1175868563489747, 0.09501623595335584, 0.04964881576020763, 0.10675806464675175, 0.08489247141166467, 0.2488692515754467, 0.1521098637431223, 0.19984620666765973, 0.20817656088170444, 0.231553570627699, 0.19084905483328862, 0.16433929869289987, 0.173566096086626, 0.24573819503985594, 0.27592870022547544, 0.11395109324364272, 0.1298884786131943, 0.28563986762568794, 0.20239318278523766, 0.11295218089117842, 0.2072196259790804, 0.15009531126973907, 0.14776968252021394, 0.17802855901018122, 0.06471184471730373, 0.08172991111077099, 0.22151953918255995, 0.18446723992587644, 0.11293379995338759, 0.18524106747712343, 0.09983592844122946, 0.05673716523818617, 0.18140988222949217, 0.18942254384912782, 0.1910193131884993, 0.20256550950521135, 0.21152147825830891, 0.2049511089196525, 0.258980399841793, 0.16017619874330558, 0.2082123740663392, 0.18537254536488212, 0.20818546299975949, 0.17567237432363714, 0.1677946140558617, 0.17656702210476527, 0.1751092058322562, 0.16960467401136325, 0.2088710907102228, 0.18446407751321436, 0.1886475513593584, 0.13709711731327157, 0.593647004179877, 0.1733743811988786, 0.1125278415716583, 0.06209311865632694, 0.10871967147144257, 0.11518389219556424, 0.16894644536537995, 0.571591546751407, 0.1130750357324003, 0.08296108471364039, 0.15679332332771556, 0.21267615570023868, 0.21282113727673357, 0.11336843970037402, 0.16933309926031437, 0.3945210309123661, 0.178124863488059, 0.18530116924619722, 0.1846973224218158, 0.17932496827418054, 0.18108829874704513, 0.19669696962368233, 0.18292198035697282, 0.1752028372789728, 0.18192652724571223, 0.07544408637232791, 0.1065956233509443, 0.06332675346882022, 0.06752159987238082, 0.05244899530447933, 0.07278296891278424, 0.1144985518019992, 0.027157278743321744, 0.06669982393621632]}, "mutation_prompt": null}
{"id": "95a13bdd-de19-49fd-ba90-77a795172b2d", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "16a1bbcb-c064-4a18-9f04-d3bd0f101c8f", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "5110a9d9-f41a-435e-8a82-b037f911c0bc", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "22e5b0af-c6d0-47f3-b3b3-12ed3be876b2", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.standard_cauchy(self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing a different mutation strategy by using a Cauchy distribution to promote larger steps in exploration for faster convergence.", "configspace": "", "generation": 51, "fitness": 0.18744057832347572, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4141812461458233, 0.32707995193530626, 0.27643589260257373, 0.4350970086339142, 0.349402443690948, 0.294864036188343, 0.431810828238291, 0.335780562983265, 0.2905996874075547, 0.03725688098692559, 0.005804757007002115, 9.999999999998899e-05, 0.0007363567607848731, 0.009606607432512293, 9.999999999998899e-05, 0.007103120843153343, 0.017485451253972495, 9.999999999998899e-05, 0.10150807360857195, 0.07635170281866688, 0.06966940666580945, 0.12285216812221333, 0.08498289929054104, 0.07646616147545282, 0.12647017490983448, 0.08750361484270053, 0.08740274337607823, 0.128274798878933, 0.08077213805811656, 0.07590142404066336, 0.08757473422998174, 0.07545632237940025, 0.07099236150150645, 0.12387162847680888, 0.07809741204903387, 0.06386894237775398, 0.9907098283539715, 0.9922821602511548, 0.9755004585143985, 0.9946621563074062, 0.9954935562652402, 0.989920128593369, 0.9904057748287365, 0.9941857667943863, 0.9852063584504466, 0.26380929692049215, 0.2091934587945815, 0.16376047930956994, 0.29369786038650614, 0.20429531624341912, 0.174675525970431, 0.275345178868066, 0.19822417021478367, 0.16117480207455914, 0.3455072126722659, 0.18490533097020756, 0.2405241056542995, 0.2729648653968856, 0.21227619864425273, 0.22721003141550544, 0.22427718971209176, 0.19492542749192354, 0.22905191886180387, 0.1563493716976967, 0.1161107898474717, 0.08987023092423385, 0.15771899313845827, 0.12542724301207475, 0.12488158158258433, 0.13677305523688865, 0.12031587591330173, 0.11931218824840706, 0.1984261429984382, 0.12349302919037342, 0.07766100651166086, 0.14262221748873471, 0.12221370180289681, 0.11430464379754735, 0.15546950727185216, 0.10714659793554016, 0.11048182753920843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02294148547559216, 0.01272399845705563, 9.999999999998899e-05, 0.006808116282739363, 0.0023610460012921664, 9.999999999998899e-05, 0.0914797850092457, 0.11472320204538444, 0.0655363037999459, 0.048804679209850876, 0.01183763955572481, 0.011055709474094289, 0.1832394575203602, 0.062248388388232545, 0.07339396374708484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08723231743568671, 0.028252805982170837, 0.044956939572154075, 0.10734268744056286, 0.0771844433881399, 0.030729111594668623, 0.04837511350399304, 0.0518119461918517, 0.03629051002684214, 0.374219903876699, 0.3235761743922798, 0.2959560223244444, 0.4079346414746291, 0.3602604807317904, 0.28701099057523327, 0.39805635795147254, 0.3566612453161684, 0.3109382531425543, 0.11405268319456696, 0.08612620345671951, 0.07288934035765438, 0.09393022974460563, 0.07810973863901416, 0.06513820370490198, 0.09941661171483196, 0.08103407805798013, 0.08423159082213749, 0.19350936276065756, 0.1540406003169823, 0.14182246927012254, 0.15099356167343359, 0.19359921586657025, 0.14357115210766513, 0.22399003064945655, 0.188003706342043, 0.13032099548473597, 0.2697992758093166, 0.22321700180249182, 0.21650651568056678, 0.2830538043074994, 0.23543860819416307, 0.21966620052728347, 0.20830937726443344, 0.23561140983504736, 0.2141590418622772, 0.2078534566436504, 0.181597278273132, 0.15925176570836064, 0.21928624512958617, 0.14831639085422543, 0.16338181499716897, 0.1801611520693881, 0.15730210217862184, 0.1505917879625902, 0.20514535128610067, 0.19112838113573816, 0.19155045546359628, 0.23108567457958273, 0.17374563186411796, 0.18551960268557532, 0.20900563851852394, 0.15253433059906396, 0.20675877368433893, 0.21368425416705839, 0.1817190179192374, 0.17018988604411533, 0.1922594408857765, 0.18115794242333672, 0.1703512018764637, 0.20841999180769666, 0.18778997095764827, 0.1726423328571871, 0.17776397634988028, 0.13372444691320617, 0.44290719721799177, 0.1702047480320733, 0.15659135008323466, 0.19131925966695174, 0.17042289997380866, 0.1722772938645205, 0.17428240453583566, 0.5970183739657224, 0.1866190324607484, 0.24350804027598882, 0.08305528238272164, 0.3858765486476178, 0.16106469057580108, 0.392085692873559, 0.16395449922794592, 0.19711058385864255, 0.18526713956346963, 0.18334793712803898, 0.18727209883210294, 0.21194583126452948, 0.18804660392375105, 0.18880917497359118, 0.19269324645232222, 0.1869374516300557, 0.19853421559346784, 0.08687731664685638, 0.08240008043085889, 0.06392948942673082, 0.092126769918351, 0.07119301074331708, 0.0751326499514704, 0.07835124106058378, 0.08038235688496698, 0.07149327932250416]}, "mutation_prompt": null}
{"id": "9657fe89-0406-456f-bc0a-174f9aee0794", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "d5db2906-828f-4780-90dc-22d8fd2a0164", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "ac56d601-9740-4b76-a550-d303e2b8ae33", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.population_size = 10\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            population = [best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim) for _ in range(self.population_size)]\n            population = [np.clip(candidate_solution, -5.0, 5.0) for candidate_solution in population]\n            population_fitness = [func(candidate_solution) for candidate_solution in population]\n\n            best_candidate_idx = np.argmin(population_fitness)\n            if population_fitness[best_candidate_idx] < best_fitness:\n                best_solution = population[best_candidate_idx]\n                best_fitness = population_fitness[best_candidate_idx]\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilizing a population of candidate solutions to exploit multiple search directions simultaneously for faster convergence speed.", "configspace": "", "generation": 54, "fitness": 0.18938168155741475, "feedback": "The algorithm EnhancedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4123516115758684, 0.35964482338685977, 0.37481584714832317, 0.3921945346240383, 0.3396413883814937, 0.37054482153028534, 0.4290109411183325, 0.3301600270485233, 0.37040212931690697, 0.028338946684285604, 9.999999999998899e-05, 9.999999999998899e-05, 0.028150263565246858, 0.007745843524423979, 9.999999999998899e-05, 0.0868427065285221, 0.002518536488328338, 9.999999999998899e-05, 0.08205790763344611, 0.07061275788355237, 0.009799219908436463, 0.059949059226206414, 0.06263165355155309, 0.05863602230361942, 0.07503220101841634, 0.07315701209125469, 0.04937567905002338, 0.09608759715478044, 0.06472860526767288, 0.01680080324087152, 0.06031476084303666, 0.07444983030911878, 0.0664218063939952, 0.09232584666675592, 0.08065222854992082, 0.0717227473304114, 0.9768101798271629, 0.9344459683296005, 0.9427839154425844, 0.9351250654681341, 0.948167335401606, 0.9209883625256341, 0.9472666942390539, 0.9539560922486473, 0.9727392116883565, 0.30213220462327695, 0.2426780676931548, 0.2508556035410393, 0.30482739290061955, 0.2619125753844326, 0.23786696410979713, 0.28910001385296336, 0.1996578647312678, 0.2766828093507121, 0.1717469827627508, 0.2134866636979711, 0.11380288792558657, 0.3309121361303494, 0.2596952376391617, 0.16306577423787472, 0.311406953623625, 0.22338805987571764, 0.32081321124676576, 0.185069990803863, 0.136408138295408, 0.1519257751296511, 0.12516925749391172, 0.1453249056465371, 0.13494470159640493, 0.18859690949830388, 0.1311358834276909, 0.12325614971970844, 0.17482794407835267, 0.1431812058234938, 0.15393821015216314, 0.1441629622034557, 0.08649143161675965, 0.1459099233586294, 0.15855304813709814, 0.10591656853149123, 0.14243455877397504, 9.999999999998899e-05, 9.999999999998899e-05, 0.03146572966257333, 0.05770187890912093, 0.01239826498169494, 0.02036395120237755, 0.001413422597309144, 9.999999999998899e-05, 0.007978561721644684, 0.1011797496782132, 0.0846971607337027, 0.242979533910607, 0.11185354847298856, 0.0274001658067331, 0.06784477268236055, 0.24978970116774069, 0.07256970864920453, 0.16630801698975972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08416236824978518, 0.061427690553237935, 0.04734733411930159, 0.08270861516707118, 0.10849280300207154, 0.08562831311161734, 0.08503487464969872, 0.06994817110090457, 0.08969440555875319, 0.3840972416017434, 0.31951476535420087, 0.39006803159917247, 0.38805167178375966, 0.33518637910013016, 0.36687081041740677, 0.3787162846416189, 0.3407206934100899, 0.3599962212060953, 0.11950941768968282, 0.09062995427977039, 0.06864730353168347, 0.06021321615519226, 0.10258509348515821, 0.08074507743447923, 0.09804644395087814, 0.10489956365507802, 0.09992000488051833, 0.23018222866383997, 0.14045754651185494, 0.15849957832046624, 0.23277552852304684, 0.1740119901541639, 0.18697701914768683, 0.16615578357490834, 0.20624495146409771, 0.16992290412227706, 0.2629984106017682, 0.21635163338234942, 0.1165869761669488, 0.27723237930508926, 0.2364483386611853, 0.11494200035335156, 0.2012367273017457, 0.14005636919439424, 0.09280087206598508, 0.20666239666374253, 0.11960315744734185, 0.12343380825394235, 0.21632584700957902, 0.14580871174426158, 0.11606701003669384, 0.18273046171018115, 0.13800445892558744, 0.02986825405111193, 0.2291277256577281, 0.19993946564070986, 0.27517495349011334, 0.2019363321353691, 0.20146304797885017, 0.18657270952804328, 0.2325639336099098, 0.2022871468627525, 0.18223050238778138, 0.18568244643896303, 0.17377671235487813, 0.18766667346941268, 0.17628010184697773, 0.17473471509358174, 0.1694898698947529, 0.16560620179807228, 0.16782466343166924, 0.19103816217510783, 0.18701370830867603, 0.13464137574140878, 0.5286555872253442, 0.17334465434044066, 0.06560453133319011, 0.06183848867388475, 0.10867694806396178, 0.11495209535589967, 0.16848353196564092, 0.5608674344765079, 0.11282199635108048, 0.08260229411082387, 0.155826326619256, 0.20746101969769126, 0.21096891563366815, 0.5501108140334645, 0.15781556711070532, 0.4548628462066261, 0.20422642618589104, 0.19731734987709781, 0.18749655588736303, 0.19866210929572325, 0.17962612197869787, 0.1770734902659289, 0.18573997378517904, 0.18572808139782204, 0.18456628401038289, 0.08988654894662618, 0.08141607003527951, 0.05142792499085824, 0.09904347703314964, 0.07648331935305819, 0.11861820841397408, 0.0847803044853277, 0.06244144931569351, 0.05849380975860763]}, "mutation_prompt": null}
{"id": "6f77a6a3-18d6-4385-b45e-02998126c5a4", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "6214900b-f251-4dc7-8e3b-0efdf04cdc0b", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "0fcdbdf7-8dab-4690-9ebb-d724042423c5", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "344c1a9a-1c75-4059-93ba-7583ad091be0", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "eccb3a6f-8706-4ac9-bb6a-dd809f8aa36a", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "d46f7a56-e718-48ad-927e-d4d84ec05e2d", "solution": "import numpy as np\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.learning_rate = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Dynamic learning rate adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                if candidate_fitness < best_fitness:\n                    self.mutation_step *= np.exp(-self.learning_rate)\n                else:\n                    self.mutation_step *= np.exp(self.learning_rate)\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "ImprovedMetaheuristicAlgorithm", "description": "Implementing a dynamic learning rate scheme to adapt the mutation step size based on the function landscape to accelerate convergence speed.", "configspace": "", "generation": 60, "fitness": 0.16020282078606116, "feedback": "The algorithm ImprovedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.2747950467334316, 0.27262018242344976, 0.27943281607537707, 0.24488074280458028, 0.27135294136894195, 0.2812213116988055, 0.24391046272112615, 0.27500858124779504, 0.27296557357577955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07991863692676593, 0.06186178722552027, 0.06381673742080218, 0.07849856817660528, 0.07233377057629309, 0.0741881495320258, 0.09102708219909961, 0.0753990720940888, 0.07546093195631909, 0.06635741679628149, 0.062395567147136566, 0.06375285307219825, 0.07231360154484534, 0.0627575490839648, 0.06343611248485836, 0.06001571629435909, 0.06960591206272415, 0.06088116027816959, 0.9894254708602053, 0.984116005818271, 0.9754899965849435, 0.9824802117285361, 0.9832873579578046, 0.9831813388122045, 0.9844092712620424, 0.9855247019969472, 0.9906885374476638, 0.174405312739639, 0.15917977217077783, 0.1642185366560125, 0.13585777028963164, 0.19105474422652247, 0.1517255782657354, 0.16043776186041614, 0.13905928243234011, 0.1443916740534663, 0.1931146926087367, 0.19407058562594892, 0.17936492193121778, 0.20485803068735775, 0.19349950956067075, 0.17950445676438398, 0.20148439422609477, 0.22848194632721186, 0.193644004172003, 0.08697370570157237, 0.07396549072887915, 0.10799694417842987, 0.07581788962058, 0.07083893271993025, 0.08124315712778041, 0.08464419608109053, 0.08437349393181559, 0.07867408180513014, 0.08936152698916922, 0.06922695198124873, 0.10347775409585724, 0.07958568452774584, 0.10099494698562139, 0.08979271906390218, 0.08278600409510839, 0.10109184504115387, 0.1077473624972034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05890922422157996, 0.09812303580820969, 0.07422860025643718, 0.11398595634959552, 0.07147864487514799, 0.045444839355604394, 0.06742525742885486, 0.08379895715916186, 0.11330469824196476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031100902421045462, 0.023064597122722574, 0.023810486056752067, 0.03336730180137948, 0.03624092965739523, 0.04285660940129332, 0.03816239404775712, 0.026617573296604635, 0.019138051470629414, 0.26649543914450347, 0.3159814301972378, 0.26386279214880637, 0.25400013396415055, 0.27153949630768015, 0.25675065060413194, 0.27554648672356996, 0.26272711514146063, 0.27476040680553226, 0.0705263398327961, 0.0863215327182979, 0.07853076437289785, 0.08787103191866641, 0.07545369460410178, 0.10007624551142602, 0.07768230203271964, 0.07140644444781208, 0.09268587384472993, 0.13554992154146783, 0.14304462604178736, 0.13447742298450727, 0.12450515358815262, 0.18625443173519873, 0.14309889589755354, 0.17117369175075492, 0.1288061219868537, 0.1388755157486874, 0.20252854236597317, 0.2075374818339525, 0.1986007647898279, 0.2064561801378596, 0.2019287057574809, 0.20284169049623968, 0.20575865596383547, 0.2094823957253349, 0.195863266815406, 0.16422711961516945, 0.139832322922118, 0.1430682680118165, 0.1363973374212334, 0.16175882281388332, 0.15407195395886797, 0.14033188515063943, 0.15303787518929535, 0.12876927729168708, 0.2004172650523378, 0.19136729274563136, 0.18433107094158063, 0.187785585915771, 0.2019932604224195, 0.17085555276480058, 0.18578384499519773, 0.195287448678379, 0.2118103408256451, 0.1708548065221659, 0.1795195911290688, 0.16598068605988736, 0.18419821156970462, 0.17499865875335818, 0.1647113646899232, 0.16815418321151154, 0.17515023385265227, 0.17183675656528175, 0.167679281693636, 0.1241148325406386, 0.16907797975387495, 0.1716628268515331, 0.06570086964593524, 0.06028537843745985, 0.11251017557318488, 0.11374458972064638, 0.23669873205763936, 0.2868770438852478, 0.11005876242243917, 0.11330155070547954, 0.13695534231820405, 0.19860052010200469, 0.20716711754408157, 0.2795809950036955, 0.1658540384736178, 0.2502136627450421, 0.1902522816978488, 0.19537238171692428, 0.1822397336126541, 0.18053909085727593, 0.18961535209934288, 0.2116984390917369, 0.2102486697442164, 0.18346744303067353, 0.19355476611656175, 0.08152551713574607, 0.0775433816357054, 0.07100186291347421, 0.07731572808045528, 0.08405168705032084, 0.07816986822911243, 0.06561618735129726, 0.0777144691040832, 0.06875117156352684]}, "mutation_prompt": null}
{"id": "feda75ef-2395-47c2-8073-be592a87cf39", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "97666e92-d6f4-44c3-a0f0-281396e38499", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "6695c378-c34c-4b46-b8ad-51b45fd5b553", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "ab615106-817f-4ff1-952a-3eb3ba0619b9", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "830f98f7-60f0-48a7-9d35-b709373d2e63", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "46664e4f-fc0d-4155-a1d5-5f41b2dd3fa0", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment based on improvement rate\n            improvement_rate = (best_fitness - candidate_fitness) / best_fitness\n            self.mutation_step *= 1.0 + 0.1 * improvement_rate\n            self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Implementing a dynamic learning rate adjustment mechanism to enhance convergence speed by adaptively scaling the mutation step based on the improvement rate of the candidate solutions.", "configspace": "", "generation": 66, "fitness": 0.1694438858513162, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.21.", "error": "", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4472519613548669, 0.4460517533761268, 0.43152528474177154, 0.39955258767095303, 0.39741252463379173, 0.3796013363083437, 0.3717557274918353, 0.34383642172463946, 0.3595523641370373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038086652377294916, 0.006901173072196287, 9.999999999998899e-05, 9.999999999998899e-05, 0.00832082809758683, 9.999999999998899e-05, 0.09394277212325708, 0.07185145085633338, 0.07236064813720366, 0.022164408309074846, 9.999999999998899e-05, 0.01009996601707186, 0.010075447218754419, 9.999999999998899e-05, 0.007983805381916675, 0.06677943803948894, 0.05707958071377073, 0.057338643282561885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006095304272646929, 0.9657255639683776, 0.9407473296092513, 0.9179489238215542, 0.9413202411355457, 0.9280161654386943, 0.9391494529111806, 0.9523494958774446, 0.9241288757449887, 0.9753786460499697, 0.3855848616341988, 0.36016007810415207, 0.3475436360768982, 0.37114788172726787, 0.3961247237341716, 0.35716059213661233, 0.17908905999430458, 0.14974677453330765, 0.14100165157427091, 0.10163918874844691, 0.05816207390935413, 0.03371916809783049, 0.958844759687145, 0.008462826649999977, 0.043745513215508125, 0.08181491805344288, 0.01721113750832448, 0.0037142636074455337, 0.22246857602151937, 0.23161910719573597, 0.2295129079943905, 0.0687001257807337, 0.14767398299393575, 0.10654345992793846, 0.23965503841863178, 0.2224371413553342, 0.23889901729313356, 0.2082012571345444, 0.21390389839090307, 0.13403796981581217, 0.25120129523815093, 0.2592120993184934, 0.23156539813199817, 0.2410411650253247, 0.19763869951982516, 0.18817061184271755, 0.03154233005263485, 0.0075618405968090885, 0.03986606950154181, 0.11317453250749054, 0.05374774364062618, 0.09472170060201535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08764524427993459, 0.09515238729843845, 0.2439694284917825, 0.06598743795115913, 0.027322928229107535, 0.02375516710412262, 0.19549012212379635, 0.03533285431022837, 0.08394055650021237, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03465787177082347, 9.999999999998899e-05, 0.0005942745293555651, 0.08315969975193893, 0.10513900275343113, 0.1268064623263192, 0.03684927644025737, 0.04770943116035764, 0.04133580124040159, 0.027701045701865934, 0.027340195557893132, 0.027280631579706283, 0.2834031664155954, 0.32827541151279516, 0.3169718392240424, 0.41202254938881977, 0.27309708918345765, 0.33207910218756564, 0.40466548055020835, 0.41116924312566494, 0.4106009103816134, 0.03831963663911464, 0.0059794317953494325, 9.999999999998899e-05, 9.999999999998899e-05, 0.04387044164940779, 0.03366757381209806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11107002925103315, 0.10424704176690736, 0.19964060557398366, 0.1337642295697382, 0.1321339867569763, 0.14544966865021414, 0.12775437887535424, 0.10058746132506458, 0.07017504597775748, 0.21103858662050345, 0.20961547917844492, 0.20023110118218146, 0.14324034484160797, 0.06609710891111176, 0.11872976308395156, 0.18810557492900237, 0.08034508844892208, 0.09067119158065873, 0.05338175303224213, 0.04264802439825233, 0.03240467730965302, 0.08106300375677622, 9.999999999998899e-05, 0.08540026245113153, 0.07987878855512609, 0.011909603456658813, 0.02218083780660085, 0.19034117062851652, 0.1888277495021653, 0.1962275363026844, 0.18868590057720258, 0.18029565177292317, 0.1543828463311374, 0.17794099668269214, 0.154335391731522, 0.16396903242090544, 0.16449732370651782, 0.1776990817690668, 0.17869151199682676, 0.1797952043728448, 0.17809267835374287, 0.1768170655328164, 0.15769396888711484, 0.1696484745322685, 0.18258768235228362, 0.18971789250094073, 0.1378396433990221, 0.7070499186774744, 0.1741728612426281, 0.11291970400845619, 0.062029641336536434, 0.11715406714016663, 0.11656668537451265, 0.27254037091262395, 0.35785300243191365, 0.11158901711515845, 0.08292394110238765, 0.08322579607531189, 0.21287728816980966, 0.2124792003399908, 0.1094799924259573, 0.16250229708559727, 0.268346412779069, 0.17866928261813264, 0.17715138973808608, 0.18246426448382458, 0.20504505374477122, 0.18912527598779094, 0.18630147046732037, 0.17518410788962557, 0.18488084002855243, 0.17379057902371498, 0.03225289220619143, 0.021793755917298596, 0.0320893892121521, 0.028377124769620732, 0.008733354029022533, 0.01952454391112146, 0.029994967054154942, 0.011756345110847555, 0.03091651181567101]}, "mutation_prompt": null}
{"id": "e766db55-9051-49fb-a791-a691d5b2d36b", "solution": "import numpy as np\n\nclass AcceleratedNovelMetaheuristicAlgorithm(NovelMetaheuristicAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.num_steps = 5  # Number of mutation steps\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution.copy()\n            for _ in range(self.num_steps):\n                mutation_step = self.mutation_step * np.random.uniform(0.5, 1.5)\n                candidate_solution += mutation_step * np.random.uniform(-1, 1, self.dim)\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n            \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n            \n            if np.random.rand() < 0.1:\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "AcceleratedNovelMetaheuristicAlgorithm", "description": "Introducing a multi-step mutation approach to accelerate convergence by incorporating multiple mutation steps within each iteration.", "configspace": "", "generation": 67, "fitness": 0.17253943626928872, "feedback": "The algorithm AcceleratedNovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.17.", "error": "", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.2994621807037088, 0.328250320078023, 0.3709519877459606, 0.3109275155467177, 0.3582872839693556, 0.36160206855206234, 0.30921382048823265, 0.3473931003279612, 0.3518398833664562, 9.999999999998899e-05, 0.001318898020284398, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07257142469640476, 0.06571231468034877, 0.05743948266438381, 0.09029949969295992, 0.09829177500813124, 0.07986534415718727, 0.09440546794227755, 0.0650242764783645, 0.06715657408201392, 0.09266334501100304, 0.060722313673277295, 0.0851058041095375, 0.08255236278972478, 0.08033879660152121, 0.08098445982851843, 0.07705889263892818, 0.055070032828438364, 0.09250094014828714, 0.9352938643024016, 0.8650277942465219, 0.7810873740813599, 0.883541848182608, 0.8624714924950989, 0.9170172180015834, 0.8175944655713877, 0.8955536164770999, 0.7789839473143689, 0.19268130569959963, 0.1384286451722071, 0.22545247862578965, 0.16729070576603422, 0.2547732703190312, 0.217649332677179, 0.19999460466006713, 0.2301993345096014, 0.251159977431166, 0.1703295874228694, 0.21196742435626503, 0.23312376195963347, 0.22011701358761815, 0.27760045752289164, 0.2648022509298107, 0.2512205960702715, 0.2335170878413202, 0.22531007166010397, 0.11238510247885025, 0.13493774832348082, 0.13291687540829733, 0.1200643249233273, 0.12202023429417164, 0.1417485640169982, 0.11465941295610937, 0.12834748645069793, 0.12560227166179827, 0.08984427328826727, 0.1277542763624595, 0.09434766111025439, 0.10445385841479116, 0.05007896666809808, 0.11773565640471861, 0.09246587153016717, 0.11067164912452676, 0.13862816777008302, 9.999999999998899e-05, 0.005440417691886634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035712146981781934, 0.0710310125351945, 0.09623038001319806, 0.0737741510803398, 0.08699548718996353, 0.0529571889678917, 0.03573839700704362, 0.13488675676754536, 0.036756170054935144, 0.08541536620012224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04639292829716357, 0.04266747205740884, 0.03140484565917756, 0.0741796645972237, 0.039189871427826595, 0.07999360584674453, 0.053642672155440385, 0.08088842710966837, 0.07717143729918718, 0.2851425155872136, 0.3399630069974712, 0.2775298168426441, 0.32527082512951766, 0.3168936167996875, 0.3424215756877945, 0.30411014895153443, 0.32460738193210414, 0.36095347104669695, 0.08564302544930247, 0.06090671527953195, 0.06240112676787557, 0.08430636662919044, 0.07449143863852659, 0.08371252637378601, 0.08861871568436597, 0.08160774795541015, 0.045639890270894434, 0.13860374443879409, 0.1335073511266064, 0.1806145841616804, 0.17285892793422497, 0.16996336853052796, 0.17764222511558236, 0.16036509201124172, 0.14912614411874725, 0.2143031541387307, 0.21496459196157036, 0.1907284094609215, 0.2107864143514372, 0.2292128350667666, 0.22419605789560126, 0.13855971951375035, 0.18750614303221358, 0.1628891707434883, 0.20832281048509493, 0.153560682980582, 0.17672127012705474, 0.0734673553081231, 0.17056885252544585, 0.17586589677608422, 0.1209413781300529, 0.16258979199287293, 0.13651823955693176, 0.1462877338236762, 0.23137307789240102, 0.17820015086264807, 0.18827420943442597, 0.17450964567416993, 0.24204816978807797, 0.18862794840155883, 0.21700224414465186, 0.22835586226921745, 0.20843214641050567, 0.16601562929878289, 0.198171586183302, 0.18739165012244363, 0.1803762858022817, 0.1936152438540122, 0.18353508370451943, 0.17427270855470833, 0.1699215177520922, 0.17316759663562664, 0.18265142432430748, 0.1310065754797637, 0.4023237624088051, 0.38547435746818814, 0.13338194226757727, 0.09807435889623595, 0.1389128344369337, 0.12072064112197989, 0.16683195736323664, 0.3827497672454446, 0.1122624845803264, 0.0818750849773966, 0.1473210029899541, 0.19126037786131234, 0.21033084081890974, 0.32891779416464584, 0.15526218065096908, 0.34204894266750285, 0.17024156064553986, 0.17812489263518616, 0.19160684495982705, 0.19386907097576644, 0.18808602395042984, 0.1928548135792808, 0.18238313503100168, 0.20747930098684708, 0.19448150866619662, 0.1007761236417406, 0.0910731722034529, 0.07111694768385057, 0.07730654837340867, 0.10121890882596252, 0.10074462951900842, 0.09177930126897305, 0.0884207328157054, 0.08663528172312451]}, "mutation_prompt": null}
{"id": "e48d4549-f5ab-4776-89c8-97fe55c5fb99", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "ab98117d-a4ae-4c45-ad7a-1c23e7d93072", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "5622335f-2b49-432d-9811-8248326fce41", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "aed679ad-f347-4342-bb9c-b4ad85bd182e", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "e19c9e42-a1cf-47fc-af47-c1137845991a", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "2a642a07-308d-4deb-a72e-6621eae2a837", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "6cd4e5cb-7aa8-4a2f-a2fe-f33341a84892", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "3248de52-eec7-4884-80c3-97ea7f348b84", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "bef5a4df-b80c-41c3-9f79-486add2c86fc", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            mutation_prob = np.exp(-0.1 * _ / self.budget)  # Dynamic mutation probability based on progress\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim) * (np.random.rand() < mutation_prob)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Accelerating convergence by introducing a dynamic mutation probability based on fitness improvement.", "configspace": "", "generation": 76, "fitness": 0.1906356195675785, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4181364395146655, 0.3953435211276983, 0.468536408807084, 0.40089416128028954, 0.3830623730382009, 0.4719447265444542, 0.4207053707548004, 0.4157707573208942, 0.497595065283975, 0.0013109138002665999, 9.999999999998899e-05, 9.999999999998899e-05, 0.010596972362116097, 0.018796419134889053, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07942367722420896, 0.06076815139287306, 0.014553821920848864, 0.06471871242977867, 0.07396747523621994, 0.025108439386105075, 0.07684237379649017, 0.06654342332697083, 0.028349034111862403, 0.09653296718306015, 0.08607409592905846, 0.0025350339058896054, 0.053595620757721396, 0.07061608948012876, 0.06965898464399656, 0.0476822157974095, 0.059856045433979266, 0.034900353050938415, 0.9619417125036699, 0.9604235805729613, 0.900525493004529, 0.9429179819260818, 0.9737859500731794, 0.9215090300062699, 0.9299016565012457, 0.9727966540908263, 0.9684983575744117, 0.2828771913905249, 0.25414637375382076, 0.3434363743012797, 0.2780106225377472, 0.2573664885964314, 0.3620956384934718, 0.27942401422914487, 0.25694209233329146, 0.3392040069768387, 0.1744478267774695, 0.25348531613390146, 0.09817783685462311, 0.22068771566371626, 0.31236512772476943, 0.10850927991898784, 0.3061031429103015, 0.3701036483613175, 0.17889165071211865, 0.15982286584838767, 0.15616087338691664, 0.1339430002664871, 0.1783789526968581, 0.18428889666479775, 0.12763267891144092, 0.1573789648855054, 0.14423160203489938, 0.21636816250630153, 0.16223801001418814, 0.1397734608971103, 0.13429027219528544, 0.1808756088217519, 0.14964001169727237, 0.19419214214854252, 0.17637767879181898, 0.13278647873997929, 0.18335351517121923, 0.0009430262115798227, 9.999999999998899e-05, 0.00015363435037485385, 0.010384084235775526, 0.03573075042911389, 0.07344484688762332, 0.0009309338248636445, 9.999999999998899e-05, 0.10935005809797727, 0.1076237186291733, 0.10064542044545288, 0.12980775688922586, 0.09883509063366414, 0.05120761374435767, 0.03436455746970224, 0.18966644067130567, 0.061435561859142895, 0.08169569153383105, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09001205327743877, 0.03991046503581763, 0.06172073743490458, 0.10532594204513157, 0.0821571034344879, 0.09247557991670652, 0.10457868108587376, 0.0868188659003718, 0.12073916972443544, 0.40889870371933534, 0.37609343806727724, 0.4651865946882624, 0.37963211918320483, 0.3661850658739637, 0.45009191251421055, 0.3823126046750823, 0.3604765988110886, 0.45549097006669603, 0.08510621782574801, 0.07351997501783658, 0.055994674351919294, 0.0784068309503505, 0.10070718972200599, 0.04591838884999355, 0.06557744520332731, 0.07645971291726728, 0.029027148282712578, 0.16907024002182913, 0.15356647769438148, 0.29741828939452575, 0.22972917177386964, 0.21875219876805663, 0.12691475666861152, 0.21468540757694587, 0.18984876217140123, 0.18951462442069367, 0.23144150776150818, 0.1623602401417238, 0.10042212617793578, 0.22120552123318726, 0.25975637820259967, 0.11724353448397218, 0.21679249763867037, 0.2345526877309786, 0.09616353819862411, 0.17868438412331777, 0.12006154474092123, 0.03694675296369421, 0.19125589424700862, 0.17117640528483857, 0.08555240920192064, 0.18247857328739414, 0.11573601774677522, 0.023261280784555805, 0.20975171465738462, 0.20216199659299205, 0.15552684370997705, 0.20563720958153175, 0.2119026117954833, 0.1650568091920761, 0.20254450515838718, 0.1926251328451224, 0.1535983881288313, 0.1756839516751756, 0.1728997213207133, 0.18321936554178242, 0.1725929840452327, 0.19431514892451696, 0.1826926051403086, 0.1793716140760514, 0.18995922464018988, 0.17158010356413778, 0.12324743638922542, 0.13731750332610881, 0.09950624978760192, 0.1738052396661306, 0.15327961472459373, 0.062056872229095617, 0.10890991744587664, 0.1259798818595531, 0.16908054502526082, 0.6077492703434941, 0.11327211377918067, 0.08339664326805363, 0.15684082687497536, 0.21103135378389026, 0.21338374642163638, 0.5807149576187896, 0.15147976004785435, 0.5695077259152992, 0.1859505691419343, 0.20220286975883994, 0.18495014369395857, 0.17829648589615243, 0.18498617757919456, 0.2281756850386577, 0.18068890474591104, 0.1802025969438995, 0.19385211844595363, 0.0964606894666089, 0.11423509401910836, 0.044041244856315664, 0.05400768229046171, 0.0762377143200691, 0.046983830938225224, 0.07521781257839188, 0.052889535566003176, 0.04017290171362786]}, "mutation_prompt": null}
{"id": "8e8a1560-6556-47af-91f1-f82d793da319", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.population_size = 10  # Initial population size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(int(self.budget * 1.05)):  # Increase the number of iterations by 5%\n            candidate_solutions = [best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim) for _ in range(self.population_size)]\n            candidate_solutions = np.clip(candidate_solutions, -5.0, 5.0)\n            candidate_fitnesses = [func(candidate) for candidate in candidate_solutions]\n            \n            best_candidate_idx = np.argmin(candidate_fitnesses)\n            if candidate_fitnesses[best_candidate_idx] < best_fitness:\n                best_solution = candidate_solutions[best_candidate_idx]\n                best_fitness = candidate_fitnesses[best_candidate_idx]\n            \n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n            \n            if np.random.rand() < 0.05:  # Probability of population size adjustment\n                self.population_size = max(5, min(self.population_size + int(np.random.normal(0, 1)), 20))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Implementing a dynamic population size adaptation strategy to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 77, "fitness": 0.18934396913194626, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.3548753846591298, 0.40759745922940716, 0.3983236291929063, 0.3468013441279264, 0.3678154594828167, 0.4008086016774335, 0.3694283457907027, 0.3634585378737629, 0.3687643575998636, 0.028799205850271736, 0.002202278418111603, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08531106981279901, 0.0915658658594346, 0.023488913426139124, 0.07947952355392063, 0.06581499495914922, 0.02686954914717843, 0.0737323403529716, 0.04680424322169163, 0.06203911045620203, 0.0956537602397568, 0.03591455486608375, 0.012104908402266301, 0.047292673395768925, 0.07784586762729484, 0.040428349145415265, 0.09013578271094469, 0.08632703603548475, 0.06112867686913048, 0.941681478140439, 0.9371575559514913, 0.9294242935318703, 0.9307331675015695, 0.9500433400422171, 0.9388174357380779, 0.9386763197696016, 0.9536999841020267, 0.9308410222205334, 0.2693827170885499, 0.24621291979438964, 0.2700972502490978, 0.24163967274027087, 0.24758953802101402, 0.2681663051839911, 0.27176529075605105, 0.247943743462246, 0.27029565688592416, 0.28721486496134563, 0.13250036224437134, 0.16630243107306364, 0.33211401972686216, 0.2942222758322538, 0.2997524457894598, 0.3127165366737865, 0.31374623533978907, 0.15067111797419852, 0.1653813680211802, 0.1700530502497417, 0.1790055650262501, 0.12289135440858046, 0.1537180003240457, 0.16586259908734013, 0.14414754684270192, 0.1885968072673223, 0.14059075020722844, 0.15853650062550895, 0.12616183197274344, 0.10988460424972324, 0.1885251849051417, 0.16213502796905688, 0.1332111043883233, 0.15847520574245866, 0.14277476093492025, 0.17013072683943142, 9.999999999998899e-05, 0.0001049665613587214, 0.055874264010236985, 0.03639454873050485, 0.020778108507431003, 0.062389489145258104, 9.999999999998899e-05, 9.999999999998899e-05, 0.029722839155075564, 0.14741662414427414, 0.11506111714013967, 0.1624706355804192, 0.11283327252021502, 0.03992341283400258, 0.04921066122695594, 0.20272971845874233, 0.06203061381424235, 0.11513658475308675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08249911399173071, 0.07018602903580906, 0.04128456068066766, 0.08500286549778269, 0.0884814646919001, 0.09209698515601594, 0.08018080799351068, 0.0699098139500286, 0.09477045161575093, 0.36053500698649454, 0.35182010489824744, 0.383187599230403, 0.3904502336337714, 0.3525143345171655, 0.3825094762648148, 0.3543812495485371, 0.3909820985949446, 0.39045224343499774, 0.07677254612015061, 0.0807510850751827, 0.10873096833528251, 0.07014612066888237, 0.09119802388989773, 0.07202099881579194, 0.05274733017423061, 0.11621452752232764, 0.10913919587268484, 0.19540707643970323, 0.15037855658165122, 0.21035016498589065, 0.20584498138182705, 0.22110724810645654, 0.1628287710944165, 0.1717748579590641, 0.20563425608099506, 0.16680874965877956, 0.20621853335519125, 0.18261723044482203, 0.13305989160316856, 0.25711716093035974, 0.2036186663970001, 0.12124489990627385, 0.2083604054924202, 0.19995173309104297, 0.09279695710174529, 0.1881442493066121, 0.1471981722534167, 0.0610910861615408, 0.2177241512121636, 0.17528660395990225, 0.0843836800648281, 0.17162680103516836, 0.1597792088950959, 0.03126712165785306, 0.24412244299669994, 0.2177056246002932, 0.20624161250047368, 0.17680918583042116, 0.18847443267794228, 0.21126695070069723, 0.23899970876696275, 0.18143769242690522, 0.18052435902285902, 0.17022919794179947, 0.20031577069639062, 0.21055714340898035, 0.1712697099303241, 0.17445495808388, 0.1832725233475201, 0.18922548720158006, 0.16723875456427517, 0.1811546036389201, 0.18840165740449044, 0.13723362211384704, 0.5351263934514419, 0.1725575748479531, 0.06566939965486673, 0.06180482454099423, 0.1086207258968318, 0.11516456372484607, 0.16826629395715986, 0.6589980994193301, 0.11278437749744319, 0.08292413836038048, 0.15518221166880197, 0.2111384027040204, 0.21030733562531967, 0.533848723810624, 0.14555971691679936, 0.4763879716522331, 0.18321864903850427, 0.1924180439317471, 0.1806629022479086, 0.19491165879397454, 0.18175868988681854, 0.1823121271284276, 0.17928424080548666, 0.17141744532717806, 0.18310238768923925, 0.09017645055922274, 0.09419015318759882, 0.053045190879027704, 0.08444789640347172, 0.0680299982556829, 0.08688123398289993, 0.08367319569557008, 0.05224768827003867, 0.054378087056798585]}, "mutation_prompt": null}
{"id": "726f3eaa-1182-45ef-806e-35fc37511e99", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "320633d2-1950-41dd-a615-436ebb99a7b2", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "0d81bd0a-4a12-4015-9ea5-db255f194c9c", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Adaptive mutation step size adjustment\n            if np.random.rand() < 0.1:  # Probability of step size adjustment\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing adaptive mutation step size to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.4779943137796938, 0.359194683664235, 0.49874229834130646, 0.4805019363589329, 0.391766491898752, 0.49797738114453505, 0.48719633195862744, 0.4025976944850511, 0.47450062853175556, 0.014155543504138168, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406394761143583, 9.999999999998899e-05, 9.999999999998899e-05, 0.03924180922670473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0953049205080646, 0.08716696016691317, 0.06514140781875954, 0.039936806312098616, 0.08346782578884815, 0.06672322024035149, 0.06014608835910762, 0.07298546475323697, 0.0681393182720278, 0.08961616706530207, 0.07866026442583629, 0.051091071818925804, 0.06695864132928131, 0.07440395837700997, 0.060147085023680824, 0.08870079329988712, 0.05973501404425585, 0.04933027729999817, 0.9779525675657398, 0.971726945574469, 0.8724764082635914, 0.9548360501351263, 0.9522789420399435, 0.947622830061863, 0.9591362177428466, 0.9626667185683466, 0.9693892937648082, 0.31654928476754873, 0.23891321992846948, 0.3360794429943357, 0.33247366893470776, 0.22663651035472265, 0.3488030722075691, 0.349782321313016, 0.23810743390807765, 0.3179661759592698, 0.6376899578715456, 0.24194426893536825, 0.17366663458622478, 0.3869506114581883, 0.2364758558759067, 0.22685721756536226, 0.17815090119055932, 0.20970488334014503, 0.3460233528706582, 0.24821792575790635, 0.1308085815380624, 0.1843973658097553, 0.21450889458050648, 0.17243376682601608, 0.1933907508419357, 0.2208022389238009, 0.16992472236108802, 0.1887276041269187, 0.19777695931455197, 0.13209796617025626, 0.1315596034581129, 0.19783610040742883, 0.14411974953742301, 0.13039045006663996, 0.17044928315656438, 0.21485326270547656, 0.18710481561353065, 0.06282455025080669, 0.0021176971068249673, 0.03803031628951725, 0.11650192990038555, 9.999999999998899e-05, 0.051430346307148156, 0.006666316659114768, 9.999999999998899e-05, 0.06264559957867677, 0.046815362265174354, 0.08402145902759783, 0.22200315855812291, 0.1518601140003062, 0.045917268261257194, 0.05293301084715163, 0.2613348246085958, 0.04388665193945851, 0.10898606129878574, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707745626185725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09605471400873666, 0.07410532050055207, 0.05400299722304813, 0.10163504513410193, 0.0665174322675055, 0.10452241572642229, 0.11908904566133605, 0.0657469899472859, 0.07559533583978661, 0.43608192197538453, 0.36044048481922675, 0.4126485621749959, 0.43628506465223293, 0.341099550168106, 0.4223491092369449, 0.4490779865638008, 0.35886177958170395, 0.4261473515715217, 0.09154679016809386, 0.09471832939372349, 0.09657661641426607, 0.04857142171881712, 0.08871126822856057, 0.07252205830198488, 0.1056953443439852, 0.09619180544798656, 0.08736025508079781, 0.28133580722181983, 0.17509659224693563, 0.27781130704472534, 0.2801696743486304, 0.21064730452192548, 0.2901914162996484, 0.12960326210854545, 0.17605517737791454, 0.16195487509419104, 0.1292440498711177, 0.16302645837005236, 0.13385923110818398, 0.17620745620535017, 0.23453699466871203, 0.1880613433741094, 0.1770266588680819, 0.2202714218591436, 0.11008769168818666, 0.14169053890198247, 0.147824306464575, 0.1255922312696124, 0.2434202944109627, 0.19568412640058197, 0.12575063673856712, 0.19218525344664394, 0.15898697661618955, 0.09038142107957248, 0.21518351260739832, 0.18343754288012282, 0.17938898313535556, 0.1974092481542561, 0.18319862734696202, 0.18053338209969005, 0.18506752923874037, 0.19628865441044496, 0.18178270412868724, 0.18596177594091445, 0.18108291333068072, 0.1665429711414681, 0.1982190777966193, 0.18154054475608672, 0.18048054322983553, 0.198446002893223, 0.17188291505774667, 0.20215839901641353, 0.1895268598543668, 0.1354067067222302, 0.1392408014175115, 0.1739592150670154, 0.06578006334578534, 0.06208714919556879, 0.10884094919612886, 0.11650191273365507, 0.16901172396512953, 0.615000490644808, 0.11353389513360634, 0.08323891084664681, 0.0833280591016261, 0.21105337996597906, 0.21433645544372537, 0.11351109717314334, 0.1486973099601948, 0.42482854610308196, 0.1769504036974644, 0.1839422506450641, 0.19773394305609304, 0.19801833343840503, 0.17841534188765396, 0.20324951498673127, 0.1813120654948055, 0.19497589798756343, 0.17902135347145398, 0.05960908791179642, 0.0959345559689394, 0.05554057498140941, 0.056986049292867214, 0.06015045039929989, 0.07639838352072348, 0.1283337060540547, 0.06879126516258116, 0.06090443473955964]}, "mutation_prompt": null}
{"id": "f2376e8c-81ad-4b63-b41a-ff9a9fb77d2e", "solution": "import numpy as np\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.mutation_prob = 0.5  # Initial mutation probability\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            if np.random.rand() < self.mutation_prob:\n                candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                \n            # Adaptive mutation probability adjustment\n            self.mutation_prob = max(0.1, min(self.mutation_prob + 0.05 * np.random.uniform(-1, 1), 0.9))\n            self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n            self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "ImprovedMetaheuristicAlgorithm", "description": "Implementing a dynamic mutation probability mechanism to adjust the exploration rate and accelerate convergence.", "configspace": "", "generation": 81, "fitness": 0.20723776139803776, "feedback": "The algorithm ImprovedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "da260946-0543-4c0a-b9a4-2b9fecd3ed07", "metadata": {"aucs": [0.45584357519382723, 0.4616125782076771, 0.4517330220105956, 0.45916547038523947, 0.43143742369262605, 0.47296662985458604, 0.5003240546910992, 0.44908957604312305, 0.48800035587661617, 0.10450964022714093, 0.0, 0.0, 0.0, 0.0026746661031756824, 0.0, 0.0, 0.0, 0.0, 0.08959974504233581, 0.09762133894400582, 0.013622891684382576, 0.0864347400440636, 0.09935860191632895, 0.07835023366388016, 0.08092065184686303, 0.12685189042353062, 0.041202109551983446, 0.07100837470244792, 0.10423388879531137, 0.024608187368099554, 0.11591822311862865, 0.10098026576598862, 0.03344585422034474, 0.08236419157755914, 0.09336471367277588, 0.05354595767177028, 0.9844552609654502, 0.9684421686481995, 0.9366932819659637, 0.9742854882465538, 0.936552534794336, 0.9372882342019162, 0.9732148713907768, 0.9791906606118793, 0.9426205867262578, 0.3653002520932591, 0.3677196276316632, 0.3044937102489572, 0.3387773313233392, 0.31206358228607, 0.3136047008071864, 0.34417809837072777, 0.300957216970572, 0.34190710927416335, 0.2323595590289318, 0.3576182614293192, 0.1949229338207733, 0.28216810329073727, 0.27203343881221775, 0.19419897673639397, 0.1804817621426793, 0.22546258294076693, 0.14574872505426717, 0.2315851184611447, 0.1750177386000149, 0.16746639092204352, 0.21633316499615862, 0.13259084548768119, 0.18717912367431433, 0.1769963302269436, 0.17204950566929678, 0.15406898509335043, 0.17281860476410116, 0.12991158077536313, 0.11254383743162089, 0.20098079114549494, 0.20613653534223741, 0.1768438609126295, 0.1333338545955437, 0.19629332185593318, 0.17297525277361492, 0.05777181264404574, 0.0654030279930401, 0.005990327541413043, 0.110392342251184, 0.07791562523885043, 0.0, 0.0, 0.0, 0.036397753070989025, 0.07852510895344111, 0.07194419994665513, 0.10685612518795029, 0.13704128107913716, 0.030144287819760973, 0.03207680809636437, 0.17887867052198747, 0.03915425839125786, 0.0810958774431616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05519048231584933, 0.11804028908826225, 0.08617936448602637, 0.11771346992410614, 0.11815754338917928, 0.07363296936150077, 0.10228178919123732, 0.10004627120261211, 0.08416110748650607, 0.44444440672502883, 0.4317406813013255, 0.4461111355500862, 0.42988622542823063, 0.39996897667670606, 0.4230554803641725, 0.4351763582599668, 0.39483349028309145, 0.44400481261055924, 0.08447636787206703, 0.15839659471556755, 0.07590312451205083, 0.10320723610906357, 0.09294111842946728, 0.08940729817594295, 0.07046450139117932, 0.14594636852438092, 0.06035670539306959, 0.18243554198184153, 0.1452067429741275, 0.28280026215039544, 0.23122824608880355, 0.17719854384892042, 0.18119752245075738, 0.3163867796730533, 0.17084125677072903, 0.2795765070229953, 0.2289988187914349, 0.27768258792727707, 0.14017630133930592, 0.2761841137997577, 0.20283822525682393, 0.12323940450529847, 0.24273738826656155, 0.28835035586172886, 0.1005998921454051, 0.18975035572326526, 0.18596699526676552, 0.061278781074183275, 0.20047238717343463, 0.19136240144229966, 0.0832179576993296, 0.17585959937055962, 0.1676587250496303, 0.07497858750711606, 0.1929325455321289, 0.17138913782067744, 0.18825646788914274, 0.1833056367570003, 0.22644715611148003, 0.16392017942690496, 0.20426412934403448, 0.1830383561888398, 0.18370760813612963, 0.1770830934396046, 0.19753859525410045, 0.18779324215487891, 0.18942021708757062, 0.2375263037787545, 0.180212603226391, 0.1850898301107653, 0.2047447126313081, 0.17132479257370903, 0.18961306709055215, 0.13712068648526443, 0.4562315795387937, 0.11518603392092353, 0.06583490122540347, 0.062038623356476474, 0.10877019619118178, 0.12570257245207794, 0.16895884935346583, 0.7485318607682866, 0.11319165974588574, 0.6009000154246175, 0.1567760154478729, 0.21246901751610459, 0.21395452696401807, 0.4237043516952401, 0.1675568771300755, 0.5621640826363525, 0.21397429865568351, 0.17972343799955592, 0.17953332140361455, 0.17953045288837566, 0.1887116412134774, 0.18923217188515284, 0.20008809141333828, 0.18469050740034754, 0.19805072806377944, 0.06157698749700524, 0.10618266714365909, 0.06047683393181491, 0.09193898669224077, 0.055028526538848044, 0.06251827682550737, 0.08109348937061045, 0.07779419228020812, 0.030323615421796957]}, "mutation_prompt": null}
{"id": "192612c2-fc38-4570-b44e-1a1835b22320", "solution": "import numpy as np\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.mutation_prob = 0.5  # Initial mutation probability\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            if np.random.rand() < self.mutation_prob:\n                candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                \n            # Adaptive mutation probability adjustment\n            self.mutation_prob = max(0.1, min(self.mutation_prob + 0.05 * np.random.uniform(-1, 1), 0.9))\n            self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n            self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "ImprovedMetaheuristicAlgorithm", "description": "Implementing a dynamic mutation probability mechanism to adjust the exploration rate and accelerate convergence.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2376e8c-81ad-4b63-b41a-ff9a9fb77d2e", "metadata": {"aucs": [0.45584357519382723, 0.4616125782076771, 0.4517330220105956, 0.45916547038523947, 0.43143742369262605, 0.47296662985458604, 0.5003240546910992, 0.44908957604312305, 0.48800035587661617, 0.10450964022714093, 0.0, 0.0, 0.0, 0.0026746661031756824, 0.0, 0.0, 0.0, 0.0, 0.08959974504233581, 0.09762133894400582, 0.013622891684382576, 0.0864347400440636, 0.09935860191632895, 0.07835023366388016, 0.08092065184686303, 0.12685189042353062, 0.041202109551983446, 0.07100837470244792, 0.10423388879531137, 0.024608187368099554, 0.11591822311862865, 0.10098026576598862, 0.03344585422034474, 0.08236419157755914, 0.09336471367277588, 0.05354595767177028, 0.9844552609654502, 0.9684421686481995, 0.9366932819659637, 0.9742854882465538, 0.936552534794336, 0.9372882342019162, 0.9732148713907768, 0.9791906606118793, 0.9426205867262578, 0.3653002520932591, 0.3677196276316632, 0.3044937102489572, 0.3387773313233392, 0.31206358228607, 0.3136047008071864, 0.34417809837072777, 0.300957216970572, 0.34190710927416335, 0.2323595590289318, 0.3576182614293192, 0.1949229338207733, 0.28216810329073727, 0.27203343881221775, 0.19419897673639397, 0.1804817621426793, 0.22546258294076693, 0.14574872505426717, 0.2315851184611447, 0.1750177386000149, 0.16746639092204352, 0.21633316499615862, 0.13259084548768119, 0.18717912367431433, 0.1769963302269436, 0.17204950566929678, 0.15406898509335043, 0.17281860476410116, 0.12991158077536313, 0.11254383743162089, 0.20098079114549494, 0.20613653534223741, 0.1768438609126295, 0.1333338545955437, 0.19629332185593318, 0.17297525277361492, 0.05777181264404574, 0.0654030279930401, 0.005990327541413043, 0.110392342251184, 0.07791562523885043, 0.0, 0.0, 0.0, 0.036397753070989025, 0.07852510895344111, 0.07194419994665513, 0.10685612518795029, 0.13704128107913716, 0.030144287819760973, 0.03207680809636437, 0.17887867052198747, 0.03915425839125786, 0.0810958774431616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05519048231584933, 0.11804028908826225, 0.08617936448602637, 0.11771346992410614, 0.11815754338917928, 0.07363296936150077, 0.10228178919123732, 0.10004627120261211, 0.08416110748650607, 0.44444440672502883, 0.4317406813013255, 0.4461111355500862, 0.42988622542823063, 0.39996897667670606, 0.4230554803641725, 0.4351763582599668, 0.39483349028309145, 0.44400481261055924, 0.08447636787206703, 0.15839659471556755, 0.07590312451205083, 0.10320723610906357, 0.09294111842946728, 0.08940729817594295, 0.07046450139117932, 0.14594636852438092, 0.06035670539306959, 0.18243554198184153, 0.1452067429741275, 0.28280026215039544, 0.23122824608880355, 0.17719854384892042, 0.18119752245075738, 0.3163867796730533, 0.17084125677072903, 0.2795765070229953, 0.2289988187914349, 0.27768258792727707, 0.14017630133930592, 0.2761841137997577, 0.20283822525682393, 0.12323940450529847, 0.24273738826656155, 0.28835035586172886, 0.1005998921454051, 0.18975035572326526, 0.18596699526676552, 0.061278781074183275, 0.20047238717343463, 0.19136240144229966, 0.0832179576993296, 0.17585959937055962, 0.1676587250496303, 0.07497858750711606, 0.1929325455321289, 0.17138913782067744, 0.18825646788914274, 0.1833056367570003, 0.22644715611148003, 0.16392017942690496, 0.20426412934403448, 0.1830383561888398, 0.18370760813612963, 0.1770830934396046, 0.19753859525410045, 0.18779324215487891, 0.18942021708757062, 0.2375263037787545, 0.180212603226391, 0.1850898301107653, 0.2047447126313081, 0.17132479257370903, 0.18961306709055215, 0.13712068648526443, 0.4562315795387937, 0.11518603392092353, 0.06583490122540347, 0.062038623356476474, 0.10877019619118178, 0.12570257245207794, 0.16895884935346583, 0.7485318607682866, 0.11319165974588574, 0.6009000154246175, 0.1567760154478729, 0.21246901751610459, 0.21395452696401807, 0.4237043516952401, 0.1675568771300755, 0.5621640826363525, 0.21397429865568351, 0.17972343799955592, 0.17953332140361455, 0.17953045288837566, 0.1887116412134774, 0.18923217188515284, 0.20008809141333828, 0.18469050740034754, 0.19805072806377944, 0.06157698749700524, 0.10618266714365909, 0.06047683393181491, 0.09193898669224077, 0.055028526538848044, 0.06251827682550737, 0.08109348937061045, 0.07779419228020812, 0.030323615421796957]}, "mutation_prompt": null}
{"id": "cd71b8ed-c55e-4a82-a856-adc3247d08e7", "solution": "import numpy as np\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.mutation_prob = 0.5  # Initial mutation probability\n        self.population_size = 10  # Initial population size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(0, self.budget, self.population_size):  # Adjusted for dynamic population size\n            population_solutions = [best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim) for _ in range(self.population_size)]\n            population_solutions = [np.clip(sol, -5.0, 5.0) for sol in population_solutions]\n            population_fitness = [func(sol) for sol in population_solutions]\n            \n            best_index = np.argmin(population_fitness)\n            if population_fitness[best_index] < best_fitness:\n                best_solution = population_solutions[best_index]\n                best_fitness = population_fitness[best_index]\n\n            self.mutation_prob = max(0.1, min(self.mutation_prob + 0.05 * np.random.uniform(-1, 1), 0.9))\n            self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n            self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n            self.population_size = max(5, min(self.population_size + 1, 20))  # Dynamic population size adjustment\n\n        return best_solution", "name": "ImprovedMetaheuristicAlgorithm", "description": "Utilizing a dynamic population size adjustment to enhance exploration and exploitation capabilities for faster convergence.", "configspace": "", "generation": 83, "fitness": 0.19219573163884254, "feedback": "The algorithm ImprovedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "f2376e8c-81ad-4b63-b41a-ff9a9fb77d2e", "metadata": {"aucs": [0.3549255194793024, 0.36737840232213415, 0.38340200621467946, 0.3825239810530464, 0.36920966713200487, 0.39332338826304936, 0.3573096369405977, 0.39777528346853464, 0.3988303216229827, 0.01262517104751315, 0.019027094377282117, 9.999999999998899e-05, 0.000203683065040261, 0.0065490845621026805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0608694313371243, 0.09460034018849306, 0.023669860310244206, 0.09979047661406837, 0.09966229021748918, 0.06973612935110851, 0.08006933465142851, 0.05656015064953013, 0.09847058378073092, 0.07660192438567359, 0.10356569910606117, 0.020117812699323223, 0.062092776700666596, 0.08708764022897908, 0.07724588364971718, 0.05166826099350452, 0.08856705061934445, 0.056673856651678345, 0.9399186920916449, 0.9426637273744374, 0.9233782518300389, 0.9402051714594418, 0.9450584243099012, 0.9275436058358302, 0.9393897133491129, 0.9447304436911504, 0.9471754900640054, 0.2525084296293141, 0.27518612575322987, 0.26835796084898067, 0.26357655653834267, 0.25856598389973395, 0.2618052532028676, 0.23769158245206545, 0.2591471877933751, 0.2650282914525337, 0.2251806980180695, 0.2227005355574453, 0.4219523806379857, 0.2983890588722119, 0.2984668975332946, 0.3120761111887146, 0.2336234625395236, 0.49018345821243836, 0.17626210623612792, 0.13398522065998497, 0.14459493544215296, 0.18001131764456935, 0.16015274001818147, 0.1679089600253164, 0.17127580600334624, 0.14403237535641222, 0.1575615383552884, 0.1716699233129797, 0.16712282282425606, 0.1492535849987886, 0.10173131084258291, 0.13925075521495123, 0.15687841083686294, 0.15267766432382324, 0.14964902275561176, 0.14865457541165883, 0.1643891278217876, 0.004010612896967025, 0.020507456336744, 0.01906021307932315, 0.019021364618003966, 0.033227049379286666, 0.0007786571517822694, 0.00020835006345365503, 9.999999999998899e-05, 0.027424504876338296, 0.07922056076424466, 0.07282777824746278, 0.19402222549133286, 0.12973149858017552, 0.05005397821866042, 0.03360164315938763, 0.1370341084662352, 0.06972443838078524, 0.121759091819445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08769742535002056, 0.07968201333557356, 0.07309435012784193, 0.06454198528539723, 0.08518627585923788, 0.0883933121656646, 0.05776306269598375, 0.07319956810981387, 0.09961127384609558, 0.3512488337579672, 0.3736299152157412, 0.38139450415837706, 0.33927685014250963, 0.366422791047881, 0.3792630097930101, 0.3452303855058604, 0.3706428704178346, 0.38531894384045384, 0.08843678681185296, 0.09156554773662251, 0.09806111061498413, 0.07778991589565798, 0.09446312884881625, 0.09036199408050283, 0.08709132441235701, 0.09751872424535846, 0.11820608270099497, 0.19915526201881628, 0.1458367820668638, 0.22520880285922862, 0.1420334781995254, 0.22488460886942196, 0.24047188891787596, 0.09458989108113214, 0.17757958249700567, 0.16724581643719505, 0.24727278481325699, 0.2582117791396077, 0.14617311071470007, 0.25364320705569776, 0.2646958136151265, 0.12031091675887273, 0.20087300002918684, 0.24030813658807115, 0.09314476210234757, 0.18189714945000446, 0.17886576896168283, 0.07872740326501249, 0.2053272808950124, 0.1841882495433529, 0.09209492981924083, 0.19897111971137915, 0.1299230728808196, 0.03034649443397519, 0.21230520069117031, 0.21998629769504263, 0.21499130214336826, 0.19811460511620527, 0.19621252082619922, 0.2138401487411048, 0.22605506497564987, 0.18154971664924102, 0.18861279762843852, 0.17229691175900674, 0.19008020365505118, 0.18802984487821706, 0.17114560767017428, 0.19297866835496857, 0.18725916565649336, 0.17918603564607916, 0.18797374907591025, 0.1977395874561284, 0.18770964952275593, 0.13684376769217854, 0.5828001228152184, 0.17247096542563634, 0.06571250363964898, 0.06186548290241045, 0.10848992296844484, 0.11525024877537393, 0.16840351524166342, 0.4748688527401167, 0.11306522672591313, 0.08268087278816749, 0.15508048299034127, 0.21020618246100875, 0.20998134776938782, 0.4213190180219776, 0.16613600060718747, 0.5123953783077067, 0.2310568524890294, 0.19566598717964556, 0.19036174553936913, 0.18475625294162112, 0.18088455411874504, 0.18926112565381292, 0.20987915220336284, 0.20710086496582203, 0.18902524695439415, 0.048748870315332926, 0.08329070342879386, 0.07704917199996764, 0.07026954893325998, 0.08089006887038341, 0.09605677502755294, 0.10678015586876521, 0.08153244774882062, 0.06554649557746561]}, "mutation_prompt": null}
{"id": "f837098f-9f23-403a-8bf9-109b1161d567", "solution": "import numpy as np\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.mutation_prob = 0.5  # Initial mutation probability\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            if np.random.rand() < self.mutation_prob:\n                candidate_solution = best_solution + self.mutation_step * np.random.uniform(-1, 1, self.dim)\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                \n            # Adaptive mutation probability adjustment\n            self.mutation_prob = max(0.1, min(self.mutation_prob + 0.05 * np.random.uniform(-1, 1), 0.9))\n            self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n            self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution", "name": "ImprovedMetaheuristicAlgorithm", "description": "Implementing a dynamic mutation probability mechanism to adjust the exploration rate and accelerate convergence.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2376e8c-81ad-4b63-b41a-ff9a9fb77d2e", "metadata": {"aucs": [0.45584357519382723, 0.4616125782076771, 0.4517330220105956, 0.45916547038523947, 0.43143742369262605, 0.47296662985458604, 0.5003240546910992, 0.44908957604312305, 0.48800035587661617, 0.10450964022714093, 0.0, 0.0, 0.0, 0.0026746661031756824, 0.0, 0.0, 0.0, 0.0, 0.08959974504233581, 0.09762133894400582, 0.013622891684382576, 0.0864347400440636, 0.09935860191632895, 0.07835023366388016, 0.08092065184686303, 0.12685189042353062, 0.041202109551983446, 0.07100837470244792, 0.10423388879531137, 0.024608187368099554, 0.11591822311862865, 0.10098026576598862, 0.03344585422034474, 0.08236419157755914, 0.09336471367277588, 0.05354595767177028, 0.9844552609654502, 0.9684421686481995, 0.9366932819659637, 0.9742854882465538, 0.936552534794336, 0.9372882342019162, 0.9732148713907768, 0.9791906606118793, 0.9426205867262578, 0.3653002520932591, 0.3677196276316632, 0.3044937102489572, 0.3387773313233392, 0.31206358228607, 0.3136047008071864, 0.34417809837072777, 0.300957216970572, 0.34190710927416335, 0.2323595590289318, 0.3576182614293192, 0.1949229338207733, 0.28216810329073727, 0.27203343881221775, 0.19419897673639397, 0.1804817621426793, 0.22546258294076693, 0.14574872505426717, 0.2315851184611447, 0.1750177386000149, 0.16746639092204352, 0.21633316499615862, 0.13259084548768119, 0.18717912367431433, 0.1769963302269436, 0.17204950566929678, 0.15406898509335043, 0.17281860476410116, 0.12991158077536313, 0.11254383743162089, 0.20098079114549494, 0.20613653534223741, 0.1768438609126295, 0.1333338545955437, 0.19629332185593318, 0.17297525277361492, 0.05777181264404574, 0.0654030279930401, 0.005990327541413043, 0.110392342251184, 0.07791562523885043, 0.0, 0.0, 0.0, 0.036397753070989025, 0.07852510895344111, 0.07194419994665513, 0.10685612518795029, 0.13704128107913716, 0.030144287819760973, 0.03207680809636437, 0.17887867052198747, 0.03915425839125786, 0.0810958774431616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05519048231584933, 0.11804028908826225, 0.08617936448602637, 0.11771346992410614, 0.11815754338917928, 0.07363296936150077, 0.10228178919123732, 0.10004627120261211, 0.08416110748650607, 0.44444440672502883, 0.4317406813013255, 0.4461111355500862, 0.42988622542823063, 0.39996897667670606, 0.4230554803641725, 0.4351763582599668, 0.39483349028309145, 0.44400481261055924, 0.08447636787206703, 0.15839659471556755, 0.07590312451205083, 0.10320723610906357, 0.09294111842946728, 0.08940729817594295, 0.07046450139117932, 0.14594636852438092, 0.06035670539306959, 0.18243554198184153, 0.1452067429741275, 0.28280026215039544, 0.23122824608880355, 0.17719854384892042, 0.18119752245075738, 0.3163867796730533, 0.17084125677072903, 0.2795765070229953, 0.2289988187914349, 0.27768258792727707, 0.14017630133930592, 0.2761841137997577, 0.20283822525682393, 0.12323940450529847, 0.24273738826656155, 0.28835035586172886, 0.1005998921454051, 0.18975035572326526, 0.18596699526676552, 0.061278781074183275, 0.20047238717343463, 0.19136240144229966, 0.0832179576993296, 0.17585959937055962, 0.1676587250496303, 0.07497858750711606, 0.1929325455321289, 0.17138913782067744, 0.18825646788914274, 0.1833056367570003, 0.22644715611148003, 0.16392017942690496, 0.20426412934403448, 0.1830383561888398, 0.18370760813612963, 0.1770830934396046, 0.19753859525410045, 0.18779324215487891, 0.18942021708757062, 0.2375263037787545, 0.180212603226391, 0.1850898301107653, 0.2047447126313081, 0.17132479257370903, 0.18961306709055215, 0.13712068648526443, 0.4562315795387937, 0.11518603392092353, 0.06583490122540347, 0.062038623356476474, 0.10877019619118178, 0.12570257245207794, 0.16895884935346583, 0.7485318607682866, 0.11319165974588574, 0.6009000154246175, 0.1567760154478729, 0.21246901751610459, 0.21395452696401807, 0.4237043516952401, 0.1675568771300755, 0.5621640826363525, 0.21397429865568351, 0.17972343799955592, 0.17953332140361455, 0.17953045288837566, 0.1887116412134774, 0.18923217188515284, 0.20008809141333828, 0.18469050740034754, 0.19805072806377944, 0.06157698749700524, 0.10618266714365909, 0.06047683393181491, 0.09193898669224077, 0.055028526538848044, 0.06251827682550737, 0.08109348937061045, 0.07779419228020812, 0.030323615421796957]}, "mutation_prompt": null}
{"id": "8a12625c-c16d-4f77-a83c-f3a725283b62", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.mutation_prob = 0.5  # Initial mutation probability\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            for _ in range(self.budget):\n                future_results = [executor.submit(self.mutate_and_evaluate, func, best_solution) for _ in range(4)]\n                results = [future.result() for future in future_results]\n                \n                for candidate_solution, candidate_fitness in results:\n                    if candidate_fitness < best_fitness:\n                        best_solution = candidate_solution\n                        best_fitness = candidate_fitness\n                \n                # Adaptive mutation probability adjustment\n                self.mutation_prob = max(0.1, min(self.mutation_prob + 0.05 * np.random.uniform(-1, 1), 0.9))\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution\n\n    def mutate_and_evaluate(self, func, solution):\n        mutation = self.mutation_step * np.random.uniform(-1, 1, self.dim)\n        candidate_solution = np.clip(solution + mutation, -5.0, 5.0)\n        candidate_fitness = func(candidate_solution)\n        return candidate_solution, candidate_fitness", "name": "ImprovedMetaheuristicAlgorithm", "description": "Implementing a parallel mutation strategy to explore multiple candidate solutions concurrently for faster convergence.", "configspace": "", "generation": 85, "fitness": 0.20751817246458312, "feedback": "The algorithm ImprovedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "f2376e8c-81ad-4b63-b41a-ff9a9fb77d2e", "metadata": {"aucs": [0.45750778864533515, 0.3598074182986938, 0.4864748864537699, 0.43440125072276714, 0.38049509634093737, 0.4850081191976685, 0.4505640566979574, 0.39266082395230784, 0.4718565601981085, 0.0032780593609353925, 0.018273992192577304, 9.999999999998899e-05, 0.07589063410149888, 0.025536374786094385, 9.999999999998899e-05, 0.02425402772266838, 9.999999999998899e-05, 9.999999999998899e-05, 0.10576521325242816, 0.07440128348511044, 0.0830316479741392, 0.024450819617946595, 0.09794513050471687, 0.06415836833216493, 0.07545613203900525, 0.08571497156443075, 0.08517227736589006, 0.0857799726059586, 0.07379362806471712, 0.06054213680741083, 0.06824285917972761, 0.11089361884483373, 0.07708916147429523, 0.05541565857296005, 0.07360250372114219, 0.07768457332780165, 0.966867792814603, 0.9681816391963616, 0.9708781763705508, 0.9542957933311842, 0.9603398742868788, 0.9698794124879927, 0.9446122357175973, 0.9706675841648497, 0.9747874398002508, 0.3756510473492022, 0.24420097448376943, 0.3329860753751053, 0.31194634848142466, 0.2616618535311481, 0.34377511683094497, 0.3329816222489499, 0.23972850867071727, 0.33571864123932627, 0.22290427927977174, 0.2792045672947895, 0.15211363146104884, 0.268678575865394, 0.2989334711824283, 0.3774234690546986, 0.3670746182246919, 0.30328528899408125, 0.2377246433463428, 0.1674329985659404, 0.16272392376290667, 0.20205447585275638, 0.19264054404793196, 0.15652185442128375, 0.13382004903670508, 0.19706056314142528, 0.15726312842310397, 0.225271606225951, 0.1916091377857514, 0.13796088587384492, 0.1622702819147367, 0.20353452639255842, 0.12488153428589999, 0.2014882744058215, 0.195123549583344, 0.13599669738578102, 0.16847484338644758, 0.04837304019844646, 9.999999999998899e-05, 0.000927761188418641, 0.0677553646132334, 0.0015816506098997873, 0.011107319847675323, 9.999999999998899e-05, 9.999999999998899e-05, 0.022847423986067095, 0.13732301552904969, 0.09025836027477474, 0.18755995642458334, 0.1200173288418509, 0.029721415361140147, 0.050187007880425294, 0.2284055059860396, 0.05496994935720145, 0.10313132521534973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09301188811004646, 0.07204081824504904, 0.07320471853689214, 0.10803552061397115, 0.07363209598845755, 0.0977768136911813, 0.11316537427602069, 0.06860959567363767, 0.13673371804321433, 0.41460297795514145, 0.35712271978869836, 0.4605390231115607, 0.42718514856939604, 0.35887538295097765, 0.4329681377593728, 0.4213553957985974, 0.3423573127376187, 0.4299962924004759, 0.07373321195563598, 0.09250942177315136, 0.09796368438773662, 0.12157412857983385, 0.10878908949541655, 0.10594720410232816, 0.04739110510791411, 0.07473730946297474, 0.12679706437385396, 0.29879102540181957, 0.21349764165363316, 0.2805440639718839, 0.26095030333764835, 0.1671019731891158, 0.19785667332688717, 0.17366356811621464, 0.19489917117455557, 0.18334455737720234, 0.2678937032526133, 0.26345017594855136, 0.11759888456775858, 0.30741311616636924, 0.25742512271972695, 0.13815241035515613, 0.18659062021242812, 0.25350016818857013, 0.10869538018569913, 0.2399741778984925, 0.20380001950841975, 0.08697414624278899, 0.2423933770195592, 0.19688283254546346, 0.08274380065887599, 0.19218346506973827, 0.18576358010154215, 0.037733555136943875, 0.22975442773094834, 0.24571125656754444, 0.19093895845429498, 0.1885037647154889, 0.23959076765443366, 0.2027546170036465, 0.19280343822547252, 0.18491402068000728, 0.23172050002591094, 0.18912657842330072, 0.1993218831352085, 0.23548572670645995, 0.18392152501781012, 0.19144312608999114, 0.17708572842076753, 0.19633528499320307, 0.18029874625339437, 0.17865439500359082, 0.1891669862707267, 0.1359076052525099, 0.7390214178689324, 0.1736927620610884, 0.18666061036350257, 0.061950089329918634, 0.10878233023485484, 0.12666205147777365, 0.16908664066853762, 0.6200956300402656, 0.11294781947312604, 0.08303932322749275, 0.07920894903411757, 0.2099950250470477, 0.21240150893177023, 0.5215890759076133, 0.1661648285248739, 0.5275472893351525, 0.19337046353679133, 0.19384682108452345, 0.17500896614356065, 0.19577237870848618, 0.18025716915603973, 0.19466761099138075, 0.17882130533172602, 0.18885620142359139, 0.18513215721445808, 0.08866060838382106, 0.09964054234174857, 0.05939391540901473, 0.07121653722168453, 0.07676425595119996, 0.12269892373350488, 0.06924997520099974, 0.06534791252561278, 0.06891512672776012]}, "mutation_prompt": null}
{"id": "cc66c569-b0b4-46a3-8f3d-a5e7186fb27b", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.mutation_prob = 0.5  # Initial mutation probability\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            for _ in range(self.budget):\n                future_results = [executor.submit(self.mutate_and_evaluate, func, best_solution) for _ in range(4)]\n                results = [future.result() for future in future_results]\n                \n                for candidate_solution, candidate_fitness in results:\n                    if candidate_fitness < best_fitness:\n                        best_solution = candidate_solution\n                        best_fitness = candidate_fitness\n                \n                # Adaptive mutation probability adjustment\n                self.mutation_prob = max(0.1, min(self.mutation_prob + 0.05 * np.random.uniform(-1, 1), 0.9))\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution\n\n    def mutate_and_evaluate(self, func, solution):\n        mutation = self.mutation_step * np.random.uniform(-1, 1, self.dim)\n        candidate_solution = np.clip(solution + mutation, -5.0, 5.0)\n        candidate_fitness = func(candidate_solution)\n        return candidate_solution, candidate_fitness", "name": "ImprovedMetaheuristicAlgorithm", "description": "Implementing a parallel mutation strategy to explore multiple candidate solutions concurrently for faster convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a12625c-c16d-4f77-a83c-f3a725283b62", "metadata": {"aucs": [0.45750778864533515, 0.3598074182986938, 0.4864748864537699, 0.43440125072276714, 0.38049509634093737, 0.4850081191976685, 0.4505640566979574, 0.39266082395230784, 0.4718565601981085, 0.0032780593609353925, 0.018273992192577304, 9.999999999998899e-05, 0.07589063410149888, 0.025536374786094385, 9.999999999998899e-05, 0.02425402772266838, 9.999999999998899e-05, 9.999999999998899e-05, 0.10576521325242816, 0.07440128348511044, 0.0830316479741392, 0.024450819617946595, 0.09794513050471687, 0.06415836833216493, 0.07545613203900525, 0.08571497156443075, 0.08517227736589006, 0.0857799726059586, 0.07379362806471712, 0.06054213680741083, 0.06824285917972761, 0.11089361884483373, 0.07708916147429523, 0.05541565857296005, 0.07360250372114219, 0.07768457332780165, 0.966867792814603, 0.9681816391963616, 0.9708781763705508, 0.9542957933311842, 0.9603398742868788, 0.9698794124879927, 0.9446122357175973, 0.9706675841648497, 0.9747874398002508, 0.3756510473492022, 0.24420097448376943, 0.3329860753751053, 0.31194634848142466, 0.2616618535311481, 0.34377511683094497, 0.3329816222489499, 0.23972850867071727, 0.33571864123932627, 0.22290427927977174, 0.2792045672947895, 0.15211363146104884, 0.268678575865394, 0.2989334711824283, 0.3774234690546986, 0.3670746182246919, 0.30328528899408125, 0.2377246433463428, 0.1674329985659404, 0.16272392376290667, 0.20205447585275638, 0.19264054404793196, 0.15652185442128375, 0.13382004903670508, 0.19706056314142528, 0.15726312842310397, 0.225271606225951, 0.1916091377857514, 0.13796088587384492, 0.1622702819147367, 0.20353452639255842, 0.12488153428589999, 0.2014882744058215, 0.195123549583344, 0.13599669738578102, 0.16847484338644758, 0.04837304019844646, 9.999999999998899e-05, 0.000927761188418641, 0.0677553646132334, 0.0015816506098997873, 0.011107319847675323, 9.999999999998899e-05, 9.999999999998899e-05, 0.022847423986067095, 0.13732301552904969, 0.09025836027477474, 0.18755995642458334, 0.1200173288418509, 0.029721415361140147, 0.050187007880425294, 0.2284055059860396, 0.05496994935720145, 0.10313132521534973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09301188811004646, 0.07204081824504904, 0.07320471853689214, 0.10803552061397115, 0.07363209598845755, 0.0977768136911813, 0.11316537427602069, 0.06860959567363767, 0.13673371804321433, 0.41460297795514145, 0.35712271978869836, 0.4605390231115607, 0.42718514856939604, 0.35887538295097765, 0.4329681377593728, 0.4213553957985974, 0.3423573127376187, 0.4299962924004759, 0.07373321195563598, 0.09250942177315136, 0.09796368438773662, 0.12157412857983385, 0.10878908949541655, 0.10594720410232816, 0.04739110510791411, 0.07473730946297474, 0.12679706437385396, 0.29879102540181957, 0.21349764165363316, 0.2805440639718839, 0.26095030333764835, 0.1671019731891158, 0.19785667332688717, 0.17366356811621464, 0.19489917117455557, 0.18334455737720234, 0.2678937032526133, 0.26345017594855136, 0.11759888456775858, 0.30741311616636924, 0.25742512271972695, 0.13815241035515613, 0.18659062021242812, 0.25350016818857013, 0.10869538018569913, 0.2399741778984925, 0.20380001950841975, 0.08697414624278899, 0.2423933770195592, 0.19688283254546346, 0.08274380065887599, 0.19218346506973827, 0.18576358010154215, 0.037733555136943875, 0.22975442773094834, 0.24571125656754444, 0.19093895845429498, 0.1885037647154889, 0.23959076765443366, 0.2027546170036465, 0.19280343822547252, 0.18491402068000728, 0.23172050002591094, 0.18912657842330072, 0.1993218831352085, 0.23548572670645995, 0.18392152501781012, 0.19144312608999114, 0.17708572842076753, 0.19633528499320307, 0.18029874625339437, 0.17865439500359082, 0.1891669862707267, 0.1359076052525099, 0.7390214178689324, 0.1736927620610884, 0.18666061036350257, 0.061950089329918634, 0.10878233023485484, 0.12666205147777365, 0.16908664066853762, 0.6200956300402656, 0.11294781947312604, 0.08303932322749275, 0.07920894903411757, 0.2099950250470477, 0.21240150893177023, 0.5215890759076133, 0.1661648285248739, 0.5275472893351525, 0.19337046353679133, 0.19384682108452345, 0.17500896614356065, 0.19577237870848618, 0.18025716915603973, 0.19466761099138075, 0.17882130533172602, 0.18885620142359139, 0.18513215721445808, 0.08866060838382106, 0.09964054234174857, 0.05939391540901473, 0.07121653722168453, 0.07676425595119996, 0.12269892373350488, 0.06924997520099974, 0.06534791252561278, 0.06891512672776012]}, "mutation_prompt": null}
{"id": "3c827ae2-77cc-478d-a4f4-9a50c6588cf7", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.mutation_prob = 0.5  # Initial mutation probability\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            for _ in range(self.budget):\n                future_results = [executor.submit(self.mutate_and_evaluate, func, best_solution) for _ in range(4)]\n                results = [future.result() for future in future_results]\n                \n                for candidate_solution, candidate_fitness in results:\n                    if candidate_fitness < best_fitness:\n                        best_solution = candidate_solution\n                        best_fitness = candidate_fitness\n                \n                # Adaptive mutation probability adjustment\n                self.mutation_prob = max(0.1, min(self.mutation_prob + 0.05 * np.random.uniform(-1, 1), 0.9))\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution\n\n    def mutate_and_evaluate(self, func, solution):\n        mutation = self.mutation_step * np.random.uniform(-1, 1, self.dim)\n        candidate_solution = np.clip(solution + mutation, -5.0, 5.0)\n        candidate_fitness = func(candidate_solution)\n        return candidate_solution, candidate_fitness", "name": "ImprovedMetaheuristicAlgorithm", "description": "Implementing a parallel mutation strategy to explore multiple candidate solutions concurrently for faster convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "8a12625c-c16d-4f77-a83c-f3a725283b62", "metadata": {"aucs": [0.45750778864533515, 0.3598074182986938, 0.4864748864537699, 0.43440125072276714, 0.38049509634093737, 0.4850081191976685, 0.4505640566979574, 0.39266082395230784, 0.4718565601981085, 0.0032780593609353925, 0.018273992192577304, 9.999999999998899e-05, 0.07589063410149888, 0.025536374786094385, 9.999999999998899e-05, 0.02425402772266838, 9.999999999998899e-05, 9.999999999998899e-05, 0.10576521325242816, 0.07440128348511044, 0.0830316479741392, 0.024450819617946595, 0.09794513050471687, 0.06415836833216493, 0.07545613203900525, 0.08571497156443075, 0.08517227736589006, 0.0857799726059586, 0.07379362806471712, 0.06054213680741083, 0.06824285917972761, 0.11089361884483373, 0.07708916147429523, 0.05541565857296005, 0.07360250372114219, 0.07768457332780165, 0.966867792814603, 0.9681816391963616, 0.9708781763705508, 0.9542957933311842, 0.9603398742868788, 0.9698794124879927, 0.9446122357175973, 0.9706675841648497, 0.9747874398002508, 0.3756510473492022, 0.24420097448376943, 0.3329860753751053, 0.31194634848142466, 0.2616618535311481, 0.34377511683094497, 0.3329816222489499, 0.23972850867071727, 0.33571864123932627, 0.22290427927977174, 0.2792045672947895, 0.15211363146104884, 0.268678575865394, 0.2989334711824283, 0.3774234690546986, 0.3670746182246919, 0.30328528899408125, 0.2377246433463428, 0.1674329985659404, 0.16272392376290667, 0.20205447585275638, 0.19264054404793196, 0.15652185442128375, 0.13382004903670508, 0.19706056314142528, 0.15726312842310397, 0.225271606225951, 0.1916091377857514, 0.13796088587384492, 0.1622702819147367, 0.20353452639255842, 0.12488153428589999, 0.2014882744058215, 0.195123549583344, 0.13599669738578102, 0.16847484338644758, 0.04837304019844646, 9.999999999998899e-05, 0.000927761188418641, 0.0677553646132334, 0.0015816506098997873, 0.011107319847675323, 9.999999999998899e-05, 9.999999999998899e-05, 0.022847423986067095, 0.13732301552904969, 0.09025836027477474, 0.18755995642458334, 0.1200173288418509, 0.029721415361140147, 0.050187007880425294, 0.2284055059860396, 0.05496994935720145, 0.10313132521534973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09301188811004646, 0.07204081824504904, 0.07320471853689214, 0.10803552061397115, 0.07363209598845755, 0.0977768136911813, 0.11316537427602069, 0.06860959567363767, 0.13673371804321433, 0.41460297795514145, 0.35712271978869836, 0.4605390231115607, 0.42718514856939604, 0.35887538295097765, 0.4329681377593728, 0.4213553957985974, 0.3423573127376187, 0.4299962924004759, 0.07373321195563598, 0.09250942177315136, 0.09796368438773662, 0.12157412857983385, 0.10878908949541655, 0.10594720410232816, 0.04739110510791411, 0.07473730946297474, 0.12679706437385396, 0.29879102540181957, 0.21349764165363316, 0.2805440639718839, 0.26095030333764835, 0.1671019731891158, 0.19785667332688717, 0.17366356811621464, 0.19489917117455557, 0.18334455737720234, 0.2678937032526133, 0.26345017594855136, 0.11759888456775858, 0.30741311616636924, 0.25742512271972695, 0.13815241035515613, 0.18659062021242812, 0.25350016818857013, 0.10869538018569913, 0.2399741778984925, 0.20380001950841975, 0.08697414624278899, 0.2423933770195592, 0.19688283254546346, 0.08274380065887599, 0.19218346506973827, 0.18576358010154215, 0.037733555136943875, 0.22975442773094834, 0.24571125656754444, 0.19093895845429498, 0.1885037647154889, 0.23959076765443366, 0.2027546170036465, 0.19280343822547252, 0.18491402068000728, 0.23172050002591094, 0.18912657842330072, 0.1993218831352085, 0.23548572670645995, 0.18392152501781012, 0.19144312608999114, 0.17708572842076753, 0.19633528499320307, 0.18029874625339437, 0.17865439500359082, 0.1891669862707267, 0.1359076052525099, 0.7390214178689324, 0.1736927620610884, 0.18666061036350257, 0.061950089329918634, 0.10878233023485484, 0.12666205147777365, 0.16908664066853762, 0.6200956300402656, 0.11294781947312604, 0.08303932322749275, 0.07920894903411757, 0.2099950250470477, 0.21240150893177023, 0.5215890759076133, 0.1661648285248739, 0.5275472893351525, 0.19337046353679133, 0.19384682108452345, 0.17500896614356065, 0.19577237870848618, 0.18025716915603973, 0.19466761099138075, 0.17882130533172602, 0.18885620142359139, 0.18513215721445808, 0.08866060838382106, 0.09964054234174857, 0.05939391540901473, 0.07121653722168453, 0.07676425595119996, 0.12269892373350488, 0.06924997520099974, 0.06534791252561278, 0.06891512672776012]}, "mutation_prompt": null}
{"id": "ee69f703-d6c1-483f-bd0d-239990e9fcc2", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.mutation_prob = 0.5  # Initial mutation probability\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            for _ in range(self.budget):\n                future_results = [executor.submit(self.mutate_and_evaluate, func, best_solution) for _ in range(4)]\n                results = [future.result() for future in future_results]\n                \n                for candidate_solution, candidate_fitness in results:\n                    if candidate_fitness < best_fitness:\n                        best_solution = candidate_solution\n                        best_fitness = candidate_fitness\n                \n                # Adaptive mutation probability adjustment\n                self.mutation_prob = max(0.1, min(self.mutation_prob + 0.05 * np.random.uniform(-1, 1), 0.9))\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution\n\n    def mutate_and_evaluate(self, func, solution):\n        mutation = self.mutation_step * np.random.uniform(-1, 1, self.dim)\n        candidate_solution = np.clip(solution + mutation, -5.0, 5.0)\n        candidate_fitness = func(candidate_solution)\n        return candidate_solution, candidate_fitness", "name": "ImprovedMetaheuristicAlgorithm", "description": "Implementing a parallel mutation strategy to explore multiple candidate solutions concurrently for faster convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a12625c-c16d-4f77-a83c-f3a725283b62", "metadata": {"aucs": [0.45750778864533515, 0.3598074182986938, 0.4864748864537699, 0.43440125072276714, 0.38049509634093737, 0.4850081191976685, 0.4505640566979574, 0.39266082395230784, 0.4718565601981085, 0.0032780593609353925, 0.018273992192577304, 9.999999999998899e-05, 0.07589063410149888, 0.025536374786094385, 9.999999999998899e-05, 0.02425402772266838, 9.999999999998899e-05, 9.999999999998899e-05, 0.10576521325242816, 0.07440128348511044, 0.0830316479741392, 0.024450819617946595, 0.09794513050471687, 0.06415836833216493, 0.07545613203900525, 0.08571497156443075, 0.08517227736589006, 0.0857799726059586, 0.07379362806471712, 0.06054213680741083, 0.06824285917972761, 0.11089361884483373, 0.07708916147429523, 0.05541565857296005, 0.07360250372114219, 0.07768457332780165, 0.966867792814603, 0.9681816391963616, 0.9708781763705508, 0.9542957933311842, 0.9603398742868788, 0.9698794124879927, 0.9446122357175973, 0.9706675841648497, 0.9747874398002508, 0.3756510473492022, 0.24420097448376943, 0.3329860753751053, 0.31194634848142466, 0.2616618535311481, 0.34377511683094497, 0.3329816222489499, 0.23972850867071727, 0.33571864123932627, 0.22290427927977174, 0.2792045672947895, 0.15211363146104884, 0.268678575865394, 0.2989334711824283, 0.3774234690546986, 0.3670746182246919, 0.30328528899408125, 0.2377246433463428, 0.1674329985659404, 0.16272392376290667, 0.20205447585275638, 0.19264054404793196, 0.15652185442128375, 0.13382004903670508, 0.19706056314142528, 0.15726312842310397, 0.225271606225951, 0.1916091377857514, 0.13796088587384492, 0.1622702819147367, 0.20353452639255842, 0.12488153428589999, 0.2014882744058215, 0.195123549583344, 0.13599669738578102, 0.16847484338644758, 0.04837304019844646, 9.999999999998899e-05, 0.000927761188418641, 0.0677553646132334, 0.0015816506098997873, 0.011107319847675323, 9.999999999998899e-05, 9.999999999998899e-05, 0.022847423986067095, 0.13732301552904969, 0.09025836027477474, 0.18755995642458334, 0.1200173288418509, 0.029721415361140147, 0.050187007880425294, 0.2284055059860396, 0.05496994935720145, 0.10313132521534973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09301188811004646, 0.07204081824504904, 0.07320471853689214, 0.10803552061397115, 0.07363209598845755, 0.0977768136911813, 0.11316537427602069, 0.06860959567363767, 0.13673371804321433, 0.41460297795514145, 0.35712271978869836, 0.4605390231115607, 0.42718514856939604, 0.35887538295097765, 0.4329681377593728, 0.4213553957985974, 0.3423573127376187, 0.4299962924004759, 0.07373321195563598, 0.09250942177315136, 0.09796368438773662, 0.12157412857983385, 0.10878908949541655, 0.10594720410232816, 0.04739110510791411, 0.07473730946297474, 0.12679706437385396, 0.29879102540181957, 0.21349764165363316, 0.2805440639718839, 0.26095030333764835, 0.1671019731891158, 0.19785667332688717, 0.17366356811621464, 0.19489917117455557, 0.18334455737720234, 0.2678937032526133, 0.26345017594855136, 0.11759888456775858, 0.30741311616636924, 0.25742512271972695, 0.13815241035515613, 0.18659062021242812, 0.25350016818857013, 0.10869538018569913, 0.2399741778984925, 0.20380001950841975, 0.08697414624278899, 0.2423933770195592, 0.19688283254546346, 0.08274380065887599, 0.19218346506973827, 0.18576358010154215, 0.037733555136943875, 0.22975442773094834, 0.24571125656754444, 0.19093895845429498, 0.1885037647154889, 0.23959076765443366, 0.2027546170036465, 0.19280343822547252, 0.18491402068000728, 0.23172050002591094, 0.18912657842330072, 0.1993218831352085, 0.23548572670645995, 0.18392152501781012, 0.19144312608999114, 0.17708572842076753, 0.19633528499320307, 0.18029874625339437, 0.17865439500359082, 0.1891669862707267, 0.1359076052525099, 0.7390214178689324, 0.1736927620610884, 0.18666061036350257, 0.061950089329918634, 0.10878233023485484, 0.12666205147777365, 0.16908664066853762, 0.6200956300402656, 0.11294781947312604, 0.08303932322749275, 0.07920894903411757, 0.2099950250470477, 0.21240150893177023, 0.5215890759076133, 0.1661648285248739, 0.5275472893351525, 0.19337046353679133, 0.19384682108452345, 0.17500896614356065, 0.19577237870848618, 0.18025716915603973, 0.19466761099138075, 0.17882130533172602, 0.18885620142359139, 0.18513215721445808, 0.08866060838382106, 0.09964054234174857, 0.05939391540901473, 0.07121653722168453, 0.07676425595119996, 0.12269892373350488, 0.06924997520099974, 0.06534791252561278, 0.06891512672776012]}, "mutation_prompt": null}
{"id": "69622b41-2d3e-4f7e-918e-2ff09797a47b", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.mutation_prob = 0.5  # Initial mutation probability\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            for _ in range(self.budget):\n                future_results = [executor.submit(self.mutate_and_evaluate, func, best_solution) for _ in range(4)]\n                results = [future.result() for future in future_results]\n                \n                for candidate_solution, candidate_fitness in results:\n                    if candidate_fitness < best_fitness:\n                        best_solution = candidate_solution\n                        best_fitness = candidate_fitness\n                \n                # Adaptive mutation probability adjustment\n                self.mutation_prob = max(0.1, min(self.mutation_prob + 0.05 * np.random.uniform(-1, 1), 0.9))\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution\n\n    def mutate_and_evaluate(self, func, solution):\n        mutation = self.mutation_step * np.random.uniform(-1, 1, self.dim)\n        candidate_solution = np.clip(solution + mutation, -5.0, 5.0)\n        candidate_fitness = func(candidate_solution)\n        return candidate_solution, candidate_fitness", "name": "ImprovedMetaheuristicAlgorithm", "description": "Implementing a parallel mutation strategy to explore multiple candidate solutions concurrently for faster convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a12625c-c16d-4f77-a83c-f3a725283b62", "metadata": {"aucs": [0.45750778864533515, 0.3598074182986938, 0.4864748864537699, 0.43440125072276714, 0.38049509634093737, 0.4850081191976685, 0.4505640566979574, 0.39266082395230784, 0.4718565601981085, 0.0032780593609353925, 0.018273992192577304, 9.999999999998899e-05, 0.07589063410149888, 0.025536374786094385, 9.999999999998899e-05, 0.02425402772266838, 9.999999999998899e-05, 9.999999999998899e-05, 0.10576521325242816, 0.07440128348511044, 0.0830316479741392, 0.024450819617946595, 0.09794513050471687, 0.06415836833216493, 0.07545613203900525, 0.08571497156443075, 0.08517227736589006, 0.0857799726059586, 0.07379362806471712, 0.06054213680741083, 0.06824285917972761, 0.11089361884483373, 0.07708916147429523, 0.05541565857296005, 0.07360250372114219, 0.07768457332780165, 0.966867792814603, 0.9681816391963616, 0.9708781763705508, 0.9542957933311842, 0.9603398742868788, 0.9698794124879927, 0.9446122357175973, 0.9706675841648497, 0.9747874398002508, 0.3756510473492022, 0.24420097448376943, 0.3329860753751053, 0.31194634848142466, 0.2616618535311481, 0.34377511683094497, 0.3329816222489499, 0.23972850867071727, 0.33571864123932627, 0.22290427927977174, 0.2792045672947895, 0.15211363146104884, 0.268678575865394, 0.2989334711824283, 0.3774234690546986, 0.3670746182246919, 0.30328528899408125, 0.2377246433463428, 0.1674329985659404, 0.16272392376290667, 0.20205447585275638, 0.19264054404793196, 0.15652185442128375, 0.13382004903670508, 0.19706056314142528, 0.15726312842310397, 0.225271606225951, 0.1916091377857514, 0.13796088587384492, 0.1622702819147367, 0.20353452639255842, 0.12488153428589999, 0.2014882744058215, 0.195123549583344, 0.13599669738578102, 0.16847484338644758, 0.04837304019844646, 9.999999999998899e-05, 0.000927761188418641, 0.0677553646132334, 0.0015816506098997873, 0.011107319847675323, 9.999999999998899e-05, 9.999999999998899e-05, 0.022847423986067095, 0.13732301552904969, 0.09025836027477474, 0.18755995642458334, 0.1200173288418509, 0.029721415361140147, 0.050187007880425294, 0.2284055059860396, 0.05496994935720145, 0.10313132521534973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09301188811004646, 0.07204081824504904, 0.07320471853689214, 0.10803552061397115, 0.07363209598845755, 0.0977768136911813, 0.11316537427602069, 0.06860959567363767, 0.13673371804321433, 0.41460297795514145, 0.35712271978869836, 0.4605390231115607, 0.42718514856939604, 0.35887538295097765, 0.4329681377593728, 0.4213553957985974, 0.3423573127376187, 0.4299962924004759, 0.07373321195563598, 0.09250942177315136, 0.09796368438773662, 0.12157412857983385, 0.10878908949541655, 0.10594720410232816, 0.04739110510791411, 0.07473730946297474, 0.12679706437385396, 0.29879102540181957, 0.21349764165363316, 0.2805440639718839, 0.26095030333764835, 0.1671019731891158, 0.19785667332688717, 0.17366356811621464, 0.19489917117455557, 0.18334455737720234, 0.2678937032526133, 0.26345017594855136, 0.11759888456775858, 0.30741311616636924, 0.25742512271972695, 0.13815241035515613, 0.18659062021242812, 0.25350016818857013, 0.10869538018569913, 0.2399741778984925, 0.20380001950841975, 0.08697414624278899, 0.2423933770195592, 0.19688283254546346, 0.08274380065887599, 0.19218346506973827, 0.18576358010154215, 0.037733555136943875, 0.22975442773094834, 0.24571125656754444, 0.19093895845429498, 0.1885037647154889, 0.23959076765443366, 0.2027546170036465, 0.19280343822547252, 0.18491402068000728, 0.23172050002591094, 0.18912657842330072, 0.1993218831352085, 0.23548572670645995, 0.18392152501781012, 0.19144312608999114, 0.17708572842076753, 0.19633528499320307, 0.18029874625339437, 0.17865439500359082, 0.1891669862707267, 0.1359076052525099, 0.7390214178689324, 0.1736927620610884, 0.18666061036350257, 0.061950089329918634, 0.10878233023485484, 0.12666205147777365, 0.16908664066853762, 0.6200956300402656, 0.11294781947312604, 0.08303932322749275, 0.07920894903411757, 0.2099950250470477, 0.21240150893177023, 0.5215890759076133, 0.1661648285248739, 0.5275472893351525, 0.19337046353679133, 0.19384682108452345, 0.17500896614356065, 0.19577237870848618, 0.18025716915603973, 0.19466761099138075, 0.17882130533172602, 0.18885620142359139, 0.18513215721445808, 0.08866060838382106, 0.09964054234174857, 0.05939391540901473, 0.07121653722168453, 0.07676425595119996, 0.12269892373350488, 0.06924997520099974, 0.06534791252561278, 0.06891512672776012]}, "mutation_prompt": null}
{"id": "b5e9ec18-448c-4186-86ff-7e7149675dd7", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.mutation_prob = 0.5  # Initial mutation probability\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            for _ in range(self.budget):\n                future_results = [executor.submit(self.mutate_and_evaluate, func, best_solution) for _ in range(4)]\n                results = [future.result() for future in future_results]\n                \n                for candidate_solution, candidate_fitness in results:\n                    if candidate_fitness < best_fitness:\n                        best_solution = candidate_solution\n                        best_fitness = candidate_fitness\n                \n                # Adaptive mutation probability adjustment\n                self.mutation_prob = max(0.1, min(self.mutation_prob + 0.05 * np.random.uniform(-1, 1), 0.9))\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution\n\n    def mutate_and_evaluate(self, func, solution):\n        mutation = self.mutation_step * np.random.uniform(-1, 1, self.dim)\n        candidate_solution = np.clip(solution + mutation, -5.0, 5.0)\n        candidate_fitness = func(candidate_solution)\n        return candidate_solution, candidate_fitness", "name": "ImprovedMetaheuristicAlgorithm", "description": "Implementing a parallel mutation strategy to explore multiple candidate solutions concurrently for faster convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a12625c-c16d-4f77-a83c-f3a725283b62", "metadata": {"aucs": [0.45750778864533515, 0.3598074182986938, 0.4864748864537699, 0.43440125072276714, 0.38049509634093737, 0.4850081191976685, 0.4505640566979574, 0.39266082395230784, 0.4718565601981085, 0.0032780593609353925, 0.018273992192577304, 9.999999999998899e-05, 0.07589063410149888, 0.025536374786094385, 9.999999999998899e-05, 0.02425402772266838, 9.999999999998899e-05, 9.999999999998899e-05, 0.10576521325242816, 0.07440128348511044, 0.0830316479741392, 0.024450819617946595, 0.09794513050471687, 0.06415836833216493, 0.07545613203900525, 0.08571497156443075, 0.08517227736589006, 0.0857799726059586, 0.07379362806471712, 0.06054213680741083, 0.06824285917972761, 0.11089361884483373, 0.07708916147429523, 0.05541565857296005, 0.07360250372114219, 0.07768457332780165, 0.966867792814603, 0.9681816391963616, 0.9708781763705508, 0.9542957933311842, 0.9603398742868788, 0.9698794124879927, 0.9446122357175973, 0.9706675841648497, 0.9747874398002508, 0.3756510473492022, 0.24420097448376943, 0.3329860753751053, 0.31194634848142466, 0.2616618535311481, 0.34377511683094497, 0.3329816222489499, 0.23972850867071727, 0.33571864123932627, 0.22290427927977174, 0.2792045672947895, 0.15211363146104884, 0.268678575865394, 0.2989334711824283, 0.3774234690546986, 0.3670746182246919, 0.30328528899408125, 0.2377246433463428, 0.1674329985659404, 0.16272392376290667, 0.20205447585275638, 0.19264054404793196, 0.15652185442128375, 0.13382004903670508, 0.19706056314142528, 0.15726312842310397, 0.225271606225951, 0.1916091377857514, 0.13796088587384492, 0.1622702819147367, 0.20353452639255842, 0.12488153428589999, 0.2014882744058215, 0.195123549583344, 0.13599669738578102, 0.16847484338644758, 0.04837304019844646, 9.999999999998899e-05, 0.000927761188418641, 0.0677553646132334, 0.0015816506098997873, 0.011107319847675323, 9.999999999998899e-05, 9.999999999998899e-05, 0.022847423986067095, 0.13732301552904969, 0.09025836027477474, 0.18755995642458334, 0.1200173288418509, 0.029721415361140147, 0.050187007880425294, 0.2284055059860396, 0.05496994935720145, 0.10313132521534973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09301188811004646, 0.07204081824504904, 0.07320471853689214, 0.10803552061397115, 0.07363209598845755, 0.0977768136911813, 0.11316537427602069, 0.06860959567363767, 0.13673371804321433, 0.41460297795514145, 0.35712271978869836, 0.4605390231115607, 0.42718514856939604, 0.35887538295097765, 0.4329681377593728, 0.4213553957985974, 0.3423573127376187, 0.4299962924004759, 0.07373321195563598, 0.09250942177315136, 0.09796368438773662, 0.12157412857983385, 0.10878908949541655, 0.10594720410232816, 0.04739110510791411, 0.07473730946297474, 0.12679706437385396, 0.29879102540181957, 0.21349764165363316, 0.2805440639718839, 0.26095030333764835, 0.1671019731891158, 0.19785667332688717, 0.17366356811621464, 0.19489917117455557, 0.18334455737720234, 0.2678937032526133, 0.26345017594855136, 0.11759888456775858, 0.30741311616636924, 0.25742512271972695, 0.13815241035515613, 0.18659062021242812, 0.25350016818857013, 0.10869538018569913, 0.2399741778984925, 0.20380001950841975, 0.08697414624278899, 0.2423933770195592, 0.19688283254546346, 0.08274380065887599, 0.19218346506973827, 0.18576358010154215, 0.037733555136943875, 0.22975442773094834, 0.24571125656754444, 0.19093895845429498, 0.1885037647154889, 0.23959076765443366, 0.2027546170036465, 0.19280343822547252, 0.18491402068000728, 0.23172050002591094, 0.18912657842330072, 0.1993218831352085, 0.23548572670645995, 0.18392152501781012, 0.19144312608999114, 0.17708572842076753, 0.19633528499320307, 0.18029874625339437, 0.17865439500359082, 0.1891669862707267, 0.1359076052525099, 0.7390214178689324, 0.1736927620610884, 0.18666061036350257, 0.061950089329918634, 0.10878233023485484, 0.12666205147777365, 0.16908664066853762, 0.6200956300402656, 0.11294781947312604, 0.08303932322749275, 0.07920894903411757, 0.2099950250470477, 0.21240150893177023, 0.5215890759076133, 0.1661648285248739, 0.5275472893351525, 0.19337046353679133, 0.19384682108452345, 0.17500896614356065, 0.19577237870848618, 0.18025716915603973, 0.19466761099138075, 0.17882130533172602, 0.18885620142359139, 0.18513215721445808, 0.08866060838382106, 0.09964054234174857, 0.05939391540901473, 0.07121653722168453, 0.07676425595119996, 0.12269892373350488, 0.06924997520099974, 0.06534791252561278, 0.06891512672776012]}, "mutation_prompt": null}
{"id": "f359169e-13a1-4f62-8c10-8315d228af32", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.mutation_prob = 0.5  # Initial mutation probability\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            for _ in range(self.budget):\n                future_results = [executor.submit(self.mutate_and_evaluate, func, best_solution) for _ in range(4)]\n                results = [future.result() for future in future_results]\n                \n                for candidate_solution, candidate_fitness in results:\n                    if candidate_fitness < best_fitness:\n                        best_solution = candidate_solution\n                        best_fitness = candidate_fitness\n                \n                # Adaptive mutation probability adjustment\n                self.mutation_prob = max(0.1, min(self.mutation_prob + 0.05 * np.random.uniform(-1, 1), 0.9))\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution\n\n    def mutate_and_evaluate(self, func, solution):\n        mutation = self.mutation_step * np.random.uniform(-1, 1, self.dim)\n        candidate_solution = np.clip(solution + mutation, -5.0, 5.0)\n        candidate_fitness = func(candidate_solution)\n        return candidate_solution, candidate_fitness", "name": "ImprovedMetaheuristicAlgorithm", "description": "Implementing a parallel mutation strategy to explore multiple candidate solutions concurrently for faster convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a12625c-c16d-4f77-a83c-f3a725283b62", "metadata": {"aucs": [0.45750778864533515, 0.3598074182986938, 0.4864748864537699, 0.43440125072276714, 0.38049509634093737, 0.4850081191976685, 0.4505640566979574, 0.39266082395230784, 0.4718565601981085, 0.0032780593609353925, 0.018273992192577304, 9.999999999998899e-05, 0.07589063410149888, 0.025536374786094385, 9.999999999998899e-05, 0.02425402772266838, 9.999999999998899e-05, 9.999999999998899e-05, 0.10576521325242816, 0.07440128348511044, 0.0830316479741392, 0.024450819617946595, 0.09794513050471687, 0.06415836833216493, 0.07545613203900525, 0.08571497156443075, 0.08517227736589006, 0.0857799726059586, 0.07379362806471712, 0.06054213680741083, 0.06824285917972761, 0.11089361884483373, 0.07708916147429523, 0.05541565857296005, 0.07360250372114219, 0.07768457332780165, 0.966867792814603, 0.9681816391963616, 0.9708781763705508, 0.9542957933311842, 0.9603398742868788, 0.9698794124879927, 0.9446122357175973, 0.9706675841648497, 0.9747874398002508, 0.3756510473492022, 0.24420097448376943, 0.3329860753751053, 0.31194634848142466, 0.2616618535311481, 0.34377511683094497, 0.3329816222489499, 0.23972850867071727, 0.33571864123932627, 0.22290427927977174, 0.2792045672947895, 0.15211363146104884, 0.268678575865394, 0.2989334711824283, 0.3774234690546986, 0.3670746182246919, 0.30328528899408125, 0.2377246433463428, 0.1674329985659404, 0.16272392376290667, 0.20205447585275638, 0.19264054404793196, 0.15652185442128375, 0.13382004903670508, 0.19706056314142528, 0.15726312842310397, 0.225271606225951, 0.1916091377857514, 0.13796088587384492, 0.1622702819147367, 0.20353452639255842, 0.12488153428589999, 0.2014882744058215, 0.195123549583344, 0.13599669738578102, 0.16847484338644758, 0.04837304019844646, 9.999999999998899e-05, 0.000927761188418641, 0.0677553646132334, 0.0015816506098997873, 0.011107319847675323, 9.999999999998899e-05, 9.999999999998899e-05, 0.022847423986067095, 0.13732301552904969, 0.09025836027477474, 0.18755995642458334, 0.1200173288418509, 0.029721415361140147, 0.050187007880425294, 0.2284055059860396, 0.05496994935720145, 0.10313132521534973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09301188811004646, 0.07204081824504904, 0.07320471853689214, 0.10803552061397115, 0.07363209598845755, 0.0977768136911813, 0.11316537427602069, 0.06860959567363767, 0.13673371804321433, 0.41460297795514145, 0.35712271978869836, 0.4605390231115607, 0.42718514856939604, 0.35887538295097765, 0.4329681377593728, 0.4213553957985974, 0.3423573127376187, 0.4299962924004759, 0.07373321195563598, 0.09250942177315136, 0.09796368438773662, 0.12157412857983385, 0.10878908949541655, 0.10594720410232816, 0.04739110510791411, 0.07473730946297474, 0.12679706437385396, 0.29879102540181957, 0.21349764165363316, 0.2805440639718839, 0.26095030333764835, 0.1671019731891158, 0.19785667332688717, 0.17366356811621464, 0.19489917117455557, 0.18334455737720234, 0.2678937032526133, 0.26345017594855136, 0.11759888456775858, 0.30741311616636924, 0.25742512271972695, 0.13815241035515613, 0.18659062021242812, 0.25350016818857013, 0.10869538018569913, 0.2399741778984925, 0.20380001950841975, 0.08697414624278899, 0.2423933770195592, 0.19688283254546346, 0.08274380065887599, 0.19218346506973827, 0.18576358010154215, 0.037733555136943875, 0.22975442773094834, 0.24571125656754444, 0.19093895845429498, 0.1885037647154889, 0.23959076765443366, 0.2027546170036465, 0.19280343822547252, 0.18491402068000728, 0.23172050002591094, 0.18912657842330072, 0.1993218831352085, 0.23548572670645995, 0.18392152501781012, 0.19144312608999114, 0.17708572842076753, 0.19633528499320307, 0.18029874625339437, 0.17865439500359082, 0.1891669862707267, 0.1359076052525099, 0.7390214178689324, 0.1736927620610884, 0.18666061036350257, 0.061950089329918634, 0.10878233023485484, 0.12666205147777365, 0.16908664066853762, 0.6200956300402656, 0.11294781947312604, 0.08303932322749275, 0.07920894903411757, 0.2099950250470477, 0.21240150893177023, 0.5215890759076133, 0.1661648285248739, 0.5275472893351525, 0.19337046353679133, 0.19384682108452345, 0.17500896614356065, 0.19577237870848618, 0.18025716915603973, 0.19466761099138075, 0.17882130533172602, 0.18885620142359139, 0.18513215721445808, 0.08866060838382106, 0.09964054234174857, 0.05939391540901473, 0.07121653722168453, 0.07676425595119996, 0.12269892373350488, 0.06924997520099974, 0.06534791252561278, 0.06891512672776012]}, "mutation_prompt": null}
{"id": "cf8492ba-2711-47a6-b146-aee1f06bd24a", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.mutation_prob = 0.5  # Initial mutation probability\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            for _ in range(self.budget):\n                future_results = [executor.submit(self.mutate_and_evaluate, func, best_solution) for _ in range(4)]\n                results = [future.result() for future in future_results]\n                \n                for candidate_solution, candidate_fitness in results:\n                    if candidate_fitness < best_fitness:\n                        best_solution = candidate_solution\n                        best_fitness = candidate_fitness\n                \n                # Adaptive mutation probability adjustment\n                self.mutation_prob = max(0.1, min(self.mutation_prob + 0.05 * np.random.uniform(-1, 1), 0.9))\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution\n\n    def mutate_and_evaluate(self, func, solution):\n        mutation = self.mutation_step * np.random.uniform(-1, 1, self.dim)\n        candidate_solution = np.clip(solution + mutation, -5.0, 5.0)\n        candidate_fitness = func(candidate_solution)\n        return candidate_solution, candidate_fitness", "name": "ImprovedMetaheuristicAlgorithm", "description": "Implementing a parallel mutation strategy to explore multiple candidate solutions concurrently for faster convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a12625c-c16d-4f77-a83c-f3a725283b62", "metadata": {"aucs": [0.45750778864533515, 0.3598074182986938, 0.4864748864537699, 0.43440125072276714, 0.38049509634093737, 0.4850081191976685, 0.4505640566979574, 0.39266082395230784, 0.4718565601981085, 0.0032780593609353925, 0.018273992192577304, 9.999999999998899e-05, 0.07589063410149888, 0.025536374786094385, 9.999999999998899e-05, 0.02425402772266838, 9.999999999998899e-05, 9.999999999998899e-05, 0.10576521325242816, 0.07440128348511044, 0.0830316479741392, 0.024450819617946595, 0.09794513050471687, 0.06415836833216493, 0.07545613203900525, 0.08571497156443075, 0.08517227736589006, 0.0857799726059586, 0.07379362806471712, 0.06054213680741083, 0.06824285917972761, 0.11089361884483373, 0.07708916147429523, 0.05541565857296005, 0.07360250372114219, 0.07768457332780165, 0.966867792814603, 0.9681816391963616, 0.9708781763705508, 0.9542957933311842, 0.9603398742868788, 0.9698794124879927, 0.9446122357175973, 0.9706675841648497, 0.9747874398002508, 0.3756510473492022, 0.24420097448376943, 0.3329860753751053, 0.31194634848142466, 0.2616618535311481, 0.34377511683094497, 0.3329816222489499, 0.23972850867071727, 0.33571864123932627, 0.22290427927977174, 0.2792045672947895, 0.15211363146104884, 0.268678575865394, 0.2989334711824283, 0.3774234690546986, 0.3670746182246919, 0.30328528899408125, 0.2377246433463428, 0.1674329985659404, 0.16272392376290667, 0.20205447585275638, 0.19264054404793196, 0.15652185442128375, 0.13382004903670508, 0.19706056314142528, 0.15726312842310397, 0.225271606225951, 0.1916091377857514, 0.13796088587384492, 0.1622702819147367, 0.20353452639255842, 0.12488153428589999, 0.2014882744058215, 0.195123549583344, 0.13599669738578102, 0.16847484338644758, 0.04837304019844646, 9.999999999998899e-05, 0.000927761188418641, 0.0677553646132334, 0.0015816506098997873, 0.011107319847675323, 9.999999999998899e-05, 9.999999999998899e-05, 0.022847423986067095, 0.13732301552904969, 0.09025836027477474, 0.18755995642458334, 0.1200173288418509, 0.029721415361140147, 0.050187007880425294, 0.2284055059860396, 0.05496994935720145, 0.10313132521534973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09301188811004646, 0.07204081824504904, 0.07320471853689214, 0.10803552061397115, 0.07363209598845755, 0.0977768136911813, 0.11316537427602069, 0.06860959567363767, 0.13673371804321433, 0.41460297795514145, 0.35712271978869836, 0.4605390231115607, 0.42718514856939604, 0.35887538295097765, 0.4329681377593728, 0.4213553957985974, 0.3423573127376187, 0.4299962924004759, 0.07373321195563598, 0.09250942177315136, 0.09796368438773662, 0.12157412857983385, 0.10878908949541655, 0.10594720410232816, 0.04739110510791411, 0.07473730946297474, 0.12679706437385396, 0.29879102540181957, 0.21349764165363316, 0.2805440639718839, 0.26095030333764835, 0.1671019731891158, 0.19785667332688717, 0.17366356811621464, 0.19489917117455557, 0.18334455737720234, 0.2678937032526133, 0.26345017594855136, 0.11759888456775858, 0.30741311616636924, 0.25742512271972695, 0.13815241035515613, 0.18659062021242812, 0.25350016818857013, 0.10869538018569913, 0.2399741778984925, 0.20380001950841975, 0.08697414624278899, 0.2423933770195592, 0.19688283254546346, 0.08274380065887599, 0.19218346506973827, 0.18576358010154215, 0.037733555136943875, 0.22975442773094834, 0.24571125656754444, 0.19093895845429498, 0.1885037647154889, 0.23959076765443366, 0.2027546170036465, 0.19280343822547252, 0.18491402068000728, 0.23172050002591094, 0.18912657842330072, 0.1993218831352085, 0.23548572670645995, 0.18392152501781012, 0.19144312608999114, 0.17708572842076753, 0.19633528499320307, 0.18029874625339437, 0.17865439500359082, 0.1891669862707267, 0.1359076052525099, 0.7390214178689324, 0.1736927620610884, 0.18666061036350257, 0.061950089329918634, 0.10878233023485484, 0.12666205147777365, 0.16908664066853762, 0.6200956300402656, 0.11294781947312604, 0.08303932322749275, 0.07920894903411757, 0.2099950250470477, 0.21240150893177023, 0.5215890759076133, 0.1661648285248739, 0.5275472893351525, 0.19337046353679133, 0.19384682108452345, 0.17500896614356065, 0.19577237870848618, 0.18025716915603973, 0.19466761099138075, 0.17882130533172602, 0.18885620142359139, 0.18513215721445808, 0.08866060838382106, 0.09964054234174857, 0.05939391540901473, 0.07121653722168453, 0.07676425595119996, 0.12269892373350488, 0.06924997520099974, 0.06534791252561278, 0.06891512672776012]}, "mutation_prompt": null}
{"id": "ef907496-390b-44ff-a86c-f537b2a24370", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.mutation_prob = 0.5  # Initial mutation probability\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            for _ in range(self.budget):\n                future_results = [executor.submit(self.mutate_and_evaluate, func, best_solution) for _ in range(4)]\n                results = [future.result() for future in future_results]\n                \n                for candidate_solution, candidate_fitness in results:\n                    if candidate_fitness < best_fitness:\n                        best_solution = candidate_solution\n                        best_fitness = candidate_fitness\n                \n                # Adaptive mutation probability adjustment\n                self.mutation_prob = max(0.1, min(self.mutation_prob + 0.05 * np.random.uniform(-1, 1), 0.9))\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n        return best_solution\n\n    def mutate_and_evaluate(self, func, solution):\n        mutation = self.mutation_step * np.random.uniform(-1, 1, self.dim)\n        candidate_solution = np.clip(solution + mutation, -5.0, 5.0)\n        candidate_fitness = func(candidate_solution)\n        return candidate_solution, candidate_fitness", "name": "ImprovedMetaheuristicAlgorithm", "description": "Implementing a parallel mutation strategy to explore multiple candidate solutions concurrently for faster convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a12625c-c16d-4f77-a83c-f3a725283b62", "metadata": {"aucs": [0.45750778864533515, 0.3598074182986938, 0.4864748864537699, 0.43440125072276714, 0.38049509634093737, 0.4850081191976685, 0.4505640566979574, 0.39266082395230784, 0.4718565601981085, 0.0032780593609353925, 0.018273992192577304, 9.999999999998899e-05, 0.07589063410149888, 0.025536374786094385, 9.999999999998899e-05, 0.02425402772266838, 9.999999999998899e-05, 9.999999999998899e-05, 0.10576521325242816, 0.07440128348511044, 0.0830316479741392, 0.024450819617946595, 0.09794513050471687, 0.06415836833216493, 0.07545613203900525, 0.08571497156443075, 0.08517227736589006, 0.0857799726059586, 0.07379362806471712, 0.06054213680741083, 0.06824285917972761, 0.11089361884483373, 0.07708916147429523, 0.05541565857296005, 0.07360250372114219, 0.07768457332780165, 0.966867792814603, 0.9681816391963616, 0.9708781763705508, 0.9542957933311842, 0.9603398742868788, 0.9698794124879927, 0.9446122357175973, 0.9706675841648497, 0.9747874398002508, 0.3756510473492022, 0.24420097448376943, 0.3329860753751053, 0.31194634848142466, 0.2616618535311481, 0.34377511683094497, 0.3329816222489499, 0.23972850867071727, 0.33571864123932627, 0.22290427927977174, 0.2792045672947895, 0.15211363146104884, 0.268678575865394, 0.2989334711824283, 0.3774234690546986, 0.3670746182246919, 0.30328528899408125, 0.2377246433463428, 0.1674329985659404, 0.16272392376290667, 0.20205447585275638, 0.19264054404793196, 0.15652185442128375, 0.13382004903670508, 0.19706056314142528, 0.15726312842310397, 0.225271606225951, 0.1916091377857514, 0.13796088587384492, 0.1622702819147367, 0.20353452639255842, 0.12488153428589999, 0.2014882744058215, 0.195123549583344, 0.13599669738578102, 0.16847484338644758, 0.04837304019844646, 9.999999999998899e-05, 0.000927761188418641, 0.0677553646132334, 0.0015816506098997873, 0.011107319847675323, 9.999999999998899e-05, 9.999999999998899e-05, 0.022847423986067095, 0.13732301552904969, 0.09025836027477474, 0.18755995642458334, 0.1200173288418509, 0.029721415361140147, 0.050187007880425294, 0.2284055059860396, 0.05496994935720145, 0.10313132521534973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09301188811004646, 0.07204081824504904, 0.07320471853689214, 0.10803552061397115, 0.07363209598845755, 0.0977768136911813, 0.11316537427602069, 0.06860959567363767, 0.13673371804321433, 0.41460297795514145, 0.35712271978869836, 0.4605390231115607, 0.42718514856939604, 0.35887538295097765, 0.4329681377593728, 0.4213553957985974, 0.3423573127376187, 0.4299962924004759, 0.07373321195563598, 0.09250942177315136, 0.09796368438773662, 0.12157412857983385, 0.10878908949541655, 0.10594720410232816, 0.04739110510791411, 0.07473730946297474, 0.12679706437385396, 0.29879102540181957, 0.21349764165363316, 0.2805440639718839, 0.26095030333764835, 0.1671019731891158, 0.19785667332688717, 0.17366356811621464, 0.19489917117455557, 0.18334455737720234, 0.2678937032526133, 0.26345017594855136, 0.11759888456775858, 0.30741311616636924, 0.25742512271972695, 0.13815241035515613, 0.18659062021242812, 0.25350016818857013, 0.10869538018569913, 0.2399741778984925, 0.20380001950841975, 0.08697414624278899, 0.2423933770195592, 0.19688283254546346, 0.08274380065887599, 0.19218346506973827, 0.18576358010154215, 0.037733555136943875, 0.22975442773094834, 0.24571125656754444, 0.19093895845429498, 0.1885037647154889, 0.23959076765443366, 0.2027546170036465, 0.19280343822547252, 0.18491402068000728, 0.23172050002591094, 0.18912657842330072, 0.1993218831352085, 0.23548572670645995, 0.18392152501781012, 0.19144312608999114, 0.17708572842076753, 0.19633528499320307, 0.18029874625339437, 0.17865439500359082, 0.1891669862707267, 0.1359076052525099, 0.7390214178689324, 0.1736927620610884, 0.18666061036350257, 0.061950089329918634, 0.10878233023485484, 0.12666205147777365, 0.16908664066853762, 0.6200956300402656, 0.11294781947312604, 0.08303932322749275, 0.07920894903411757, 0.2099950250470477, 0.21240150893177023, 0.5215890759076133, 0.1661648285248739, 0.5275472893351525, 0.19337046353679133, 0.19384682108452345, 0.17500896614356065, 0.19577237870848618, 0.18025716915603973, 0.19466761099138075, 0.17882130533172602, 0.18885620142359139, 0.18513215721445808, 0.08866060838382106, 0.09964054234174857, 0.05939391540901473, 0.07121653722168453, 0.07676425595119996, 0.12269892373350488, 0.06924997520099974, 0.06534791252561278, 0.06891512672776012]}, "mutation_prompt": null}
{"id": "59f1d1a6-276e-4883-9ae8-c700ca20ed3b", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.mutation_prob = 0.5  # Initial mutation probability\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            for _ in range(self.budget):\n                future_results = [executor.submit(self.mutate_and_evaluate, func, best_solution) for _ in range(4)]\n                results = [future.result() for future in future_results]\n                \n                mean_fitness_improvement = np.mean([best_fitness - candidate_fitness for _, candidate_fitness in results])\n                self.mutation_prob = max(0.1, min(self.mutation_prob + 0.05 * mean_fitness_improvement, 0.9))\n                self.mutation_step *= np.exp(0.1 * mean_fitness_improvement)\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n\n                for candidate_solution, candidate_fitness in results:\n                    if candidate_fitness < best_fitness:\n                        best_solution = candidate_solution\n                        best_fitness = candidate_fitness\n\n        return best_solution\n\n    def mutate_and_evaluate(self, func, solution):\n        mutation = self.mutation_step * np.random.uniform(-1, 1, self.dim)\n        candidate_solution = np.clip(solution + mutation, -5.0, 5.0)\n        candidate_fitness = func(candidate_solution)\n        return candidate_solution, candidate_fitness", "name": "ImprovedMetaheuristicAlgorithm", "description": "Introducing parameter adaptation based on the mean fitness improvement to dynamically adjust mutation parameters.", "configspace": "", "generation": 94, "fitness": 0.1701752748730722, "feedback": "The algorithm ImprovedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.21.", "error": "", "parent_id": "8a12625c-c16d-4f77-a83c-f3a725283b62", "metadata": {"aucs": [0.4998401260770954, 0.49462631276494884, 0.5468902340965937, 0.48995737313820287, 0.5444762314825395, 0.511730898057525, 0.48100992951821264, 0.49660253985850045, 0.5071859929627853, 0.06423261522263624, 9.999999999998899e-05, 9.999999999998899e-05, 0.06663082835859824, 0.037416456449126945, 9.999999999998899e-05, 0.11377347251796233, 0.057843026088905014, 9.999999999998899e-05, 0.022859683089271665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01711598403999126, 9.999999999998899e-05, 9.999999999998899e-05, 0.02507208196312316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9203126800614584, 0.7593745759389708, 0.8208496383695392, 0.8112257088926655, 0.7337773270577223, 0.7639740446084851, 0.823904750800643, 0.83509742466655, 0.8742535784043761, 0.3592935695636694, 0.38125751266312513, 0.3518666999482093, 0.363292837702911, 0.3859389071645364, 0.36485995507155444, 0.37009337865203584, 0.3775419757572194, 0.36374589330104046, 0.06868410276480441, 9.999999999998899e-05, 9.999999999998899e-05, 0.06316957208129148, 9.999999999998899e-05, 9.999999999998899e-05, 0.04419129999341109, 9.999999999998899e-05, 9.999999999998899e-05, 0.20941523065031087, 0.16318175904080268, 0.18684009359139386, 0.20869926566810315, 0.22332713421399608, 0.22109055460012428, 0.21925637547545052, 0.2216191922099816, 0.13305106270734723, 0.23205922971871373, 0.1337070482832884, 0.20271629834450267, 0.24549677588583096, 0.1330717780058427, 0.22502004675383191, 0.24616814989991842, 0.20581358146012785, 0.133418624642049, 9.999999999998899e-05, 0.04914029900157124, 0.0025195399158095544, 0.03987020500849847, 0.005098934944794964, 0.018560276040862522, 0.00613890874851053, 0.0009065397621863536, 0.0477101869901293, 0.09967269076576413, 0.048862495339303647, 0.13459225667279828, 0.08099720745332728, 0.018953943285208497, 0.024750790720081906, 0.19724528708909872, 0.03495912204459073, 0.09920084182658051, 0.00232416307806127, 0.019922374168119705, 9.999999999998899e-05, 9.999999999998899e-05, 0.00040848730982911974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00016534216435903915, 0.07108486273521253, 0.08584596342659767, 0.15392699789366782, 0.14648270160885768, 0.10932903567044527, 0.10000800293535372, 0.10592298607268635, 0.1178477292457426, 0.08541378335479499, 0.4806254208804842, 0.48312579373637, 0.4980682031320395, 0.48448111451929676, 0.4840669276726314, 0.4684462474897434, 0.46299137861741535, 0.4822662880242845, 0.45927884680550335, 0.008647634765270418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1512584789244925, 0.15593356076808418, 0.2016248949811914, 0.05937026246233168, 0.09435276061017017, 0.09126594884406913, 0.06032503469294792, 0.12807374243293557, 0.12987334980314313, 0.11492129753006686, 0.10419658342738325, 0.10760094009005583, 0.1386576530012973, 0.0810450988475876, 0.11876235764090015, 0.1440595937716973, 0.08094094697073673, 0.09389667951123903, 0.0585797558035851, 0.040084514379032266, 0.04107360471311494, 0.08216731398688626, 0.015284584327549977, 0.07388324347148101, 0.07312324431836792, 0.01072467470145222, 0.024440246852062808, 0.17552034281358342, 0.09926260850387003, 0.13018841015961358, 0.16849756066746668, 0.09645927943794286, 0.10696533785566675, 0.1908113532303699, 0.08541464648762087, 0.12204674296488971, 0.15958108290160322, 0.1668537409903318, 0.18344522703645072, 0.1777600900266818, 0.16718833522984056, 0.1765658562636634, 0.17215190693206206, 0.1718437555222665, 0.17414588506552897, 0.18960640286947894, 0.13739097654026333, 0.8232831913695733, 0.17420445117185557, 0.1124351898402901, 0.06186723647187742, 0.10853412680255425, 0.1154126689912015, 0.16909727341201464, 0.798131119819073, 0.11354116904310774, 0.08325737097724228, 0.15549179840671734, 0.21349224051611582, 0.03640364655477568, 0.6687355116305372, 0.05930721483695145, 0.05161331375774347, 0.17803629552814149, 0.18854731880715347, 0.20179806326182192, 0.176444109893807, 0.17217326966743207, 0.18716248023239568, 0.17910243786113023, 0.18485003341401385, 0.19181756110780557, 0.041640606646070055, 0.008566214646350656, 0.033010978837626825, 0.040046826225993204, 0.018228373658529584, 0.016512941624229227, 0.034930537149184815, 0.01647325707148395, 0.03480940376800701]}, "mutation_prompt": null}
{"id": "57ad2acd-ff20-4696-bade-8ccb51a14e4f", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.mutation_prob = 0.5  # Initial mutation probability\n        self.population_size = 4  # Initial population size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            for _ in range(self.budget):\n                future_results = [executor.submit(self.mutate_and_evaluate, func, best_solution) for _ in range(self.population_size)]\n                results = [future.result() for future in future_results]\n                \n                for candidate_solution, candidate_fitness in results:\n                    if candidate_fitness < best_fitness:\n                        best_solution = candidate_solution\n                        best_fitness = candidate_fitness\n                \n                # Adaptive mutation probability adjustment\n                self.mutation_prob = max(0.1, min(self.mutation_prob + 0.05 * np.random.uniform(-1, 1), 0.9))\n                self.mutation_step *= np.exp(0.1 * np.random.uniform(-1, 1))\n                self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n                \n                # Dynamic population size adjustment\n                self.population_size = max(2, min(self.population_size + np.random.choice([-1, 1]), 8))\n\n        return best_solution\n\n    def mutate_and_evaluate(self, func, solution):\n        mutation = self.mutation_step * np.random.uniform(-1, 1, self.dim)\n        candidate_solution = np.clip(solution + mutation, -5.0, 5.0)\n        candidate_fitness = func(candidate_solution)\n        return candidate_solution, candidate_fitness", "name": "ImprovedMetaheuristicAlgorithm", "description": "Implementing dynamic population size adjustment to adaptively increase or decrease the number of candidate solutions explored in parallel for faster convergence.", "configspace": "", "generation": 95, "fitness": 0.2003238939247074, "feedback": "The algorithm ImprovedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "8a12625c-c16d-4f77-a83c-f3a725283b62", "metadata": {"aucs": [0.4723708107062352, 0.4706603903915504, 0.4007135831130464, 0.4730809631533123, 0.458847586174828, 0.37737712878578056, 0.48839592708246204, 0.4909633194426528, 0.4001446596802827, 0.02553454788946452, 0.03491173239700074, 9.999999999998899e-05, 0.0329629342373835, 0.057534088249041604, 9.999999999998899e-05, 0.0563829374354089, 9.999999999998899e-05, 9.999999999998899e-05, 0.06162594940575161, 0.03391117633924312, 0.10021847675152418, 0.097311252181147, 0.08724277810405145, 0.08654569231571363, 0.07343629385645511, 0.06302286949349678, 0.07904220142230056, 0.05364263678803671, 0.024452047340010497, 0.07497846138619935, 0.0906693722296199, 0.03511038951233769, 0.06708978341157545, 0.07286422651177382, 0.060670230152941595, 0.07320268285711196, 0.935207512702748, 0.9415349039804923, 0.9574723115224265, 0.9256488715864571, 0.9241061638395728, 0.9325172465825381, 0.9195207248618623, 0.9614172576915739, 0.9676764342655448, 0.3246429937458666, 0.34847767220998527, 0.27974961133096266, 0.3351010379292063, 0.34227620838516404, 0.25548590126016846, 0.3282191213160909, 0.35218126491146473, 0.2560985664362946, 0.1661446993523772, 0.0810285969668113, 0.2568425916402104, 0.2710419863919745, 0.21123498089774595, 0.2137606327813094, 0.23648774364687308, 0.894827817152305, 0.2764594901464499, 0.22890257632171107, 0.2045654526030739, 0.14670696927631544, 0.20734906196762326, 0.17979847814493255, 0.1539978709652955, 0.19196253561466514, 0.21354937320631884, 0.16972282729082921, 0.1987096911184727, 0.15641072858621285, 0.12453435088485965, 0.1859591121749642, 0.19464912816780666, 0.15552765856897055, 0.20937719068217175, 0.22021754643696512, 0.14236691198037565, 0.0003373589394232157, 9.999999999998899e-05, 0.00031281864393317704, 0.06483141056654462, 0.06355897826610357, 0.01690850136528499, 0.0006392579373110108, 9.999999999998899e-05, 0.005646108734623012, 0.1158882954065702, 0.07870321813557457, 0.19622028403586944, 0.0857676328985939, 0.03715595147766415, 0.04079635181217656, 0.17267118707568352, 0.03832408210651195, 0.09765392457831057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07039867338169603, 0.12112424769075536, 0.07521174363992611, 0.10880432872151946, 0.13758242412362964, 0.07202038585840476, 0.1142318159758905, 0.11748058775301562, 0.06748003887224363, 0.4411605786135364, 0.44494313992737433, 0.37441411843811445, 0.43674189622082604, 0.4339775923223792, 0.365575401310258, 0.47526583129295263, 0.43716954414651954, 0.35991096596275574, 0.13580138935860175, 0.07586208721721632, 0.10269759274024548, 0.05232656279439529, 0.06962043440044996, 0.10063446874076143, 0.06640112309843793, 0.08057340161371462, 0.0891959717369546, 0.28037860879398335, 0.15450758042700596, 0.14768174189025196, 0.27865234596012034, 0.1463828056257902, 0.17144060234047065, 0.3081933245929108, 0.17302562858411186, 0.2429605839198623, 0.13167612363050263, 0.10459749813212871, 0.13691064547738807, 0.23044689758008352, 0.3097095530115098, 0.24043451636490187, 0.2183510839268511, 0.09246488131351671, 0.2135710980337423, 0.22851005508861044, 0.05015978887995354, 0.1649179978626093, 0.2224647559123214, 0.08909067988967323, 0.0702105469428268, 0.19740093715167006, 0.11995554020831845, 0.16722518552949406, 0.22423666523437447, 0.17926495452321156, 0.21434536041591834, 0.18989917339879525, 0.1347788853275379, 0.20719408137925543, 0.2287884326769678, 0.1735443778182405, 0.2088350373940696, 0.18564327183786444, 0.19356833499238146, 0.1739699200575816, 0.1714035951339976, 0.17245393934835884, 0.16863316043715315, 0.18500949326006477, 0.1722781541023516, 0.1792508561671844, 0.18951160005817203, 0.13744043894507008, 0.16144220718262547, 0.17394876173084362, 0.11260790968706424, 0.06178320717421193, 0.10888511559608194, 0.11533107996231773, 0.1690101292813453, 0.6704452519614343, 0.11327210064535098, 0.08310770056195538, 0.15672967614539124, 0.211864722092588, 0.2109738568365187, 0.5969602773374247, 0.0590975283141244, 0.347336875468251, 0.18370192364509141, 0.1863076008507233, 0.18302491083354522, 0.19255068331870573, 0.18331226764218567, 0.1877976887608266, 0.177300066967229, 0.18724586265831455, 0.18246939279950536, 0.051900849647659064, 0.08526151229458834, 0.07623295838180877, 0.048550537531930615, 0.02232972594329674, 0.11181952535459627, 0.07224417268089967, 0.03216867241505861, 0.07366695219760822]}, "mutation_prompt": null}
{"id": "33457577-a6c0-47ef-bbbe-3226161b98f3", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.mutation_prob = 0.5  # Initial mutation probability\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            for _ in range(self.budget):\n                future_results = [executor.submit(self.mutate_and_evaluate, func, best_solution, self.mutation_step) for _ in range(4)]\n                results = [future.result() for future in future_results]\n                \n                for candidate_solution, candidate_fitness in results:\n                    if candidate_fitness < best_fitness:\n                        best_solution = candidate_solution\n                        best_fitness = candidate_fitness\n                        self.mutation_step *= 1.1  # Dynamic mutation step adjustment\n                        \n                        # Ensure mutation step stays within bounds\n                        self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n                    else:\n                        self.mutation_step *= 0.9  # Reduce mutation step if no fitness improvement\n                \n                # Adaptive mutation probability adjustment\n                self.mutation_prob = max(0.1, min(self.mutation_prob + 0.05 * np.random.uniform(-1, 1), 0.9))\n\n        return best_solution\n\n    def mutate_and_evaluate(self, func, solution, mutation_step):\n        mutation = mutation_step * np.random.uniform(-1, 1, self.dim)\n        candidate_solution = np.clip(solution + mutation, -5.0, 5.0)\n        candidate_fitness = func(candidate_solution)\n        return candidate_solution, candidate_fitness", "name": "ImprovedMetaheuristicAlgorithm", "description": "Utilizing a dynamic mutation step adjustment based on fitness improvement to expedite convergence speed.", "configspace": "", "generation": 96, "fitness": 0.2159391872607564, "feedback": "The algorithm ImprovedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.27.", "error": "", "parent_id": "8a12625c-c16d-4f77-a83c-f3a725283b62", "metadata": {"aucs": [0.9510826357587644, 0.9458458612072919, 0.9621135571224979, 0.9249698673341366, 0.9110822868740979, 0.9243252472419534, 0.9370347776594746, 0.958649279325862, 0.9414961240774957, 0.027858386170905414, 0.009253572350594208, 9.999999999998899e-05, 0.039569671300538345, 0.054375615730579585, 9.999999999998899e-05, 0.05370474332000996, 0.010028961241781653, 9.999999999998899e-05, 0.04701068542683695, 9.999999999998899e-05, 9.999999999998899e-05, 0.004846958902314347, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020732958351649122, 9.999999999998899e-05, 9.999999999998899e-05, 0.025416759976110037, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011743423992723878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.6736243993012063, 0.5122149472412167, 0.6407632739837273, 0.6974083297234139, 0.6037092077942303, 0.5857134643850348, 0.7024706176073845, 0.7303507136402275, 0.7911807117858857, 0.8418256746755011, 0.7720006137912989, 0.7556859714494576, 0.8367334188606933, 0.8458792994160339, 0.8244034913910765, 0.8288756054671762, 0.7754652125629166, 0.8430332712043455, 0.06824812811917813, 9.999999999998899e-05, 0.002528175373415098, 0.014426003385925479, 9.999999999998899e-05, 9.999999999998899e-05, 0.07746817087733904, 9.999999999998899e-05, 9.999999999998899e-05, 0.2571449269719427, 0.22392999671340907, 0.23385973901576285, 0.24110357113006653, 0.24764875341946968, 0.22796966863769863, 0.27696545092111113, 0.23940008511145183, 0.24250444652841974, 0.2657015913030061, 0.23997273454823065, 0.13645238772520407, 0.2567882377798776, 0.3260815956286558, 0.24627041959606855, 0.25625089620676067, 0.2568989116027959, 0.23466695638087454, 0.06006782476070183, 0.0004983375308418303, 0.08613488920868129, 0.04161182319899748, 0.06021781049999986, 0.07881001948669075, 0.003252791562218027, 9.999999999998899e-05, 0.09543435374417875, 0.07299958334918355, 0.060289006273067436, 0.14922769416195447, 0.08008506499401868, 0.01885604297855259, 0.027379034251090006, 0.15742217641633982, 0.024298339605104635, 0.08731578441951571, 0.32444466078353906, 0.0502252108470127, 0.2074653106569927, 0.13445222154111036, 0.20911123087726258, 0.1125558549699397, 0.1518761804454125, 0.1497820989593569, 0.0914341618581126, 0.08198431410355966, 0.13152451674278653, 0.13119656198315244, 0.10627165567573482, 0.16790629819201308, 0.07079094591386004, 0.08461375492610046, 0.08636753295865551, 0.09094988457282904, 0.5791664029717452, 0.5485443612492459, 0.5926443404789483, 0.6176145954219101, 0.5430915313222118, 0.5558982877384886, 0.5717831336089716, 0.5749741822375104, 0.5549466222921178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004871081591704907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11023612233544333, 0.10080419144236208, 0.1828670066516247, 0.05887025157810566, 0.08461356940734532, 0.07471929946622058, 0.054962400594461225, 0.11961005178590489, 0.13786634250408514, 0.11506726170153503, 0.09867378032916496, 0.10767968735569988, 0.14147303458545435, 0.0671190444402231, 0.11856119585653235, 0.1351310339127525, 0.08080846817878029, 0.09971648178912806, 0.05829915907512584, 0.040521470892320055, 0.031956317783496724, 0.08496141347890984, 0.018366835038386875, 0.0738697535369005, 0.0708476326519969, 0.011422059038750598, 0.028334647822595205, 0.16788870343270423, 0.051768197077490696, 0.11088834383972312, 0.17483496855161795, 0.05562041413859564, 0.08535560580954393, 0.15860659613039008, 0.06795068653765901, 0.11417533894286447, 0.14815991291853026, 0.1701504966092935, 0.16802881626354715, 0.1585466912962391, 0.17713197783737145, 0.167230449413017, 0.15544795216731522, 0.162123075102246, 0.17041633757244923, 0.189367664845433, 0.13769043224956035, 0.9538707707813088, 0.1736376639997197, 0.1124421490858245, 0.06179210830845028, 0.10870996570999536, 0.11536026102679331, 0.16804503058370424, 0.8164331046649359, 0.11347240689342508, 0.0817578877771652, 0.16821930468186397, 0.20956355117648195, 0.2105883132581765, 0.7290966372650284, 0.05877908524415065, 0.05137027651555637, 0.24126649300774405, 0.21948851389775814, 0.20051810814377347, 0.20778702641061686, 0.1927739746909659, 0.1898441526459923, 0.22415954946711558, 0.2529432480182281, 0.23998022034422883, 0.031100496254138466, 0.024275683252474978, 0.03413581792577025, 0.043182415155566534, 0.003095720075726005, 0.021187563028337686, 0.03702059958443715, 0.009976138601425544, 0.03932982500300308]}, "mutation_prompt": null}
{"id": "016690f1-5ab3-476a-96ca-dd64927c5622", "solution": "from concurrent.futures import ProcessPoolExecutor\n\nclass ParallelImprovedMetaheuristicAlgorithm(ImprovedMetaheuristicAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ProcessPoolExecutor() as executor:\n            for _ in range(self.budget):\n                future_results = [executor.submit(self.mutate_and_evaluate, func, best_solution, self.mutation_step) for _ in range(4)]\n                results = [future.result() for future in future_results]\n                \n                for candidate_solution, candidate_fitness in results:\n                    if candidate_fitness < best_fitness:\n                        best_solution = candidate_solution\n                        best_fitness = candidate_fitness\n                        self.mutation_step *= 1.1  # Dynamic mutation step adjustment\n                        self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n                    else:\n                        self.mutation_step *= 0.9  # Reduce mutation step if no fitness improvement\n                \n                self.mutation_prob = max(0.1, min(self.mutation_prob + 0.05 * np.random.uniform(-1, 1), 0.9))\n\n        return best_solution", "name": "ParallelImprovedMetaheuristicAlgorithm", "description": "Implementing a parallelized mutation and evaluation strategy to increase exploration and exploit multiple solutions concurrently.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "An exception occurred: BlockingIOError(11, 'Resource temporarily unavailable').", "error": "BlockingIOError(11, 'Resource temporarily unavailable')", "parent_id": "33457577-a6c0-47ef-bbbe-3226161b98f3", "metadata": {}, "mutation_prompt": null}
{"id": "b103da6c-3bc8-4f95-87f4-5ce9490d4c77", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.mutation_prob = 0.5  # Initial mutation probability\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            for _ in range(self.budget):\n                future_results = [executor.submit(self.mutate_and_evaluate, func, best_solution, self.mutation_step) for _ in range(4)]\n                results = [future.result() for future in future_results]\n                \n                for candidate_solution, candidate_fitness in results:\n                    if candidate_fitness < best_fitness:\n                        best_solution = candidate_solution\n                        best_fitness = candidate_fitness\n                        self.mutation_step *= 1.1  # Dynamic mutation step adjustment\n                        \n                        # Ensure mutation step stays within bounds\n                        self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n                    else:\n                        self.mutation_step *= 0.9  # Reduce mutation step if no fitness improvement\n                \n                # Adaptive mutation probability adjustment\n                self.mutation_prob = max(0.1, min(self.mutation_prob + 0.05 * np.random.uniform(-1, 1), 0.9))\n\n        return best_solution\n\n    def mutate_and_evaluate(self, func, solution, mutation_step):\n        mutation = mutation_step * np.random.uniform(-1, 1, self.dim)\n        candidate_solution = np.clip(solution + mutation, -5.0, 5.0)\n        candidate_fitness = func(candidate_solution)\n        return candidate_solution, candidate_fitness", "name": "ImprovedMetaheuristicAlgorithm", "description": "Utilizing a dynamic mutation step adjustment based on fitness improvement to expedite convergence speed.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "33457577-a6c0-47ef-bbbe-3226161b98f3", "metadata": {"aucs": [0.9510826357587644, 0.9458458612072919, 0.9621135571224979, 0.9249698673341366, 0.9110822868740979, 0.9243252472419534, 0.9370347776594746, 0.958649279325862, 0.9414961240774957, 0.027858386170905414, 0.009253572350594208, 9.999999999998899e-05, 0.039569671300538345, 0.054375615730579585, 9.999999999998899e-05, 0.05370474332000996, 0.010028961241781653, 9.999999999998899e-05, 0.04701068542683695, 9.999999999998899e-05, 9.999999999998899e-05, 0.004846958902314347, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020732958351649122, 9.999999999998899e-05, 9.999999999998899e-05, 0.025416759976110037, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011743423992723878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.6736243993012063, 0.5122149472412167, 0.6407632739837273, 0.6974083297234139, 0.6037092077942303, 0.5857134643850348, 0.7024706176073845, 0.7303507136402275, 0.7911807117858857, 0.8418256746755011, 0.7720006137912989, 0.7556859714494576, 0.8367334188606933, 0.8458792994160339, 0.8244034913910765, 0.8288756054671762, 0.7754652125629166, 0.8430332712043455, 0.06824812811917813, 9.999999999998899e-05, 0.002528175373415098, 0.014426003385925479, 9.999999999998899e-05, 9.999999999998899e-05, 0.07746817087733904, 9.999999999998899e-05, 9.999999999998899e-05, 0.2571449269719427, 0.22392999671340907, 0.23385973901576285, 0.24110357113006653, 0.24764875341946968, 0.22796966863769863, 0.27696545092111113, 0.23940008511145183, 0.24250444652841974, 0.2657015913030061, 0.23997273454823065, 0.13645238772520407, 0.2567882377798776, 0.3260815956286558, 0.24627041959606855, 0.25625089620676067, 0.2568989116027959, 0.23466695638087454, 0.06006782476070183, 0.0004983375308418303, 0.08613488920868129, 0.04161182319899748, 0.06021781049999986, 0.07881001948669075, 0.003252791562218027, 9.999999999998899e-05, 0.09543435374417875, 0.07299958334918355, 0.060289006273067436, 0.14922769416195447, 0.08008506499401868, 0.01885604297855259, 0.027379034251090006, 0.15742217641633982, 0.024298339605104635, 0.08731578441951571, 0.32444466078353906, 0.0502252108470127, 0.2074653106569927, 0.13445222154111036, 0.20911123087726258, 0.1125558549699397, 0.1518761804454125, 0.1497820989593569, 0.0914341618581126, 0.08198431410355966, 0.13152451674278653, 0.13119656198315244, 0.10627165567573482, 0.16790629819201308, 0.07079094591386004, 0.08461375492610046, 0.08636753295865551, 0.09094988457282904, 0.5791664029717452, 0.5485443612492459, 0.5926443404789483, 0.6176145954219101, 0.5430915313222118, 0.5558982877384886, 0.5717831336089716, 0.5749741822375104, 0.5549466222921178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004871081591704907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11023612233544333, 0.10080419144236208, 0.1828670066516247, 0.05887025157810566, 0.08461356940734532, 0.07471929946622058, 0.054962400594461225, 0.11961005178590489, 0.13786634250408514, 0.11506726170153503, 0.09867378032916496, 0.10767968735569988, 0.14147303458545435, 0.0671190444402231, 0.11856119585653235, 0.1351310339127525, 0.08080846817878029, 0.09971648178912806, 0.05829915907512584, 0.040521470892320055, 0.031956317783496724, 0.08496141347890984, 0.018366835038386875, 0.0738697535369005, 0.0708476326519969, 0.011422059038750598, 0.028334647822595205, 0.16788870343270423, 0.051768197077490696, 0.11088834383972312, 0.17483496855161795, 0.05562041413859564, 0.08535560580954393, 0.15860659613039008, 0.06795068653765901, 0.11417533894286447, 0.14815991291853026, 0.1701504966092935, 0.16802881626354715, 0.1585466912962391, 0.17713197783737145, 0.167230449413017, 0.15544795216731522, 0.162123075102246, 0.17041633757244923, 0.189367664845433, 0.13769043224956035, 0.9538707707813088, 0.1736376639997197, 0.1124421490858245, 0.06179210830845028, 0.10870996570999536, 0.11536026102679331, 0.16804503058370424, 0.8164331046649359, 0.11347240689342508, 0.0817578877771652, 0.16821930468186397, 0.20956355117648195, 0.2105883132581765, 0.7290966372650284, 0.05877908524415065, 0.05137027651555637, 0.24126649300774405, 0.21948851389775814, 0.20051810814377347, 0.20778702641061686, 0.1927739746909659, 0.1898441526459923, 0.22415954946711558, 0.2529432480182281, 0.23998022034422883, 0.031100496254138466, 0.024275683252474978, 0.03413581792577025, 0.043182415155566534, 0.003095720075726005, 0.021187563028337686, 0.03702059958443715, 0.009976138601425544, 0.03932982500300308]}, "mutation_prompt": null}
{"id": "fb2a593f-41ab-4069-b65c-7e752bf552c9", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5  # Initial mutation step size\n        self.mutation_prob = 0.5  # Initial mutation probability\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            for _ in range(self.budget):\n                future_results = [executor.submit(self.mutate_and_evaluate, func, best_solution, self.mutation_step) for _ in range(4)]\n                results = [future.result() for future in future_results]\n                \n                for candidate_solution, candidate_fitness in results:\n                    if candidate_fitness < best_fitness:\n                        best_solution = candidate_solution\n                        best_fitness = candidate_fitness\n                        self.mutation_step *= 1.1  # Dynamic mutation step adjustment\n                        \n                        # Ensure mutation step stays within bounds\n                        self.mutation_step = max(0.1, min(self.mutation_step, 2.0))\n                    else:\n                        self.mutation_step *= 0.9  # Reduce mutation step if no fitness improvement\n                \n                # Adaptive mutation probability adjustment\n                self.mutation_prob = max(0.1, min(self.mutation_prob + 0.05 * np.random.uniform(-1, 1), 0.9))\n\n        return best_solution\n\n    def mutate_and_evaluate(self, func, solution, mutation_step):\n        mutation = mutation_step * np.random.uniform(-1, 1, self.dim)\n        candidate_solution = np.clip(solution + mutation, -5.0, 5.0)\n        candidate_fitness = func(candidate_solution)\n        return candidate_solution, candidate_fitness", "name": "ImprovedMetaheuristicAlgorithm", "description": "Utilizing a dynamic mutation step adjustment based on fitness improvement to expedite convergence speed.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "33457577-a6c0-47ef-bbbe-3226161b98f3", "metadata": {"aucs": [0.9510826357587644, 0.9458458612072919, 0.9621135571224979, 0.9249698673341366, 0.9110822868740979, 0.9243252472419534, 0.9370347776594746, 0.958649279325862, 0.9414961240774957, 0.027858386170905414, 0.009253572350594208, 9.999999999998899e-05, 0.039569671300538345, 0.054375615730579585, 9.999999999998899e-05, 0.05370474332000996, 0.010028961241781653, 9.999999999998899e-05, 0.04701068542683695, 9.999999999998899e-05, 9.999999999998899e-05, 0.004846958902314347, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020732958351649122, 9.999999999998899e-05, 9.999999999998899e-05, 0.025416759976110037, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011743423992723878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.6736243993012063, 0.5122149472412167, 0.6407632739837273, 0.6974083297234139, 0.6037092077942303, 0.5857134643850348, 0.7024706176073845, 0.7303507136402275, 0.7911807117858857, 0.8418256746755011, 0.7720006137912989, 0.7556859714494576, 0.8367334188606933, 0.8458792994160339, 0.8244034913910765, 0.8288756054671762, 0.7754652125629166, 0.8430332712043455, 0.06824812811917813, 9.999999999998899e-05, 0.002528175373415098, 0.014426003385925479, 9.999999999998899e-05, 9.999999999998899e-05, 0.07746817087733904, 9.999999999998899e-05, 9.999999999998899e-05, 0.2571449269719427, 0.22392999671340907, 0.23385973901576285, 0.24110357113006653, 0.24764875341946968, 0.22796966863769863, 0.27696545092111113, 0.23940008511145183, 0.24250444652841974, 0.2657015913030061, 0.23997273454823065, 0.13645238772520407, 0.2567882377798776, 0.3260815956286558, 0.24627041959606855, 0.25625089620676067, 0.2568989116027959, 0.23466695638087454, 0.06006782476070183, 0.0004983375308418303, 0.08613488920868129, 0.04161182319899748, 0.06021781049999986, 0.07881001948669075, 0.003252791562218027, 9.999999999998899e-05, 0.09543435374417875, 0.07299958334918355, 0.060289006273067436, 0.14922769416195447, 0.08008506499401868, 0.01885604297855259, 0.027379034251090006, 0.15742217641633982, 0.024298339605104635, 0.08731578441951571, 0.32444466078353906, 0.0502252108470127, 0.2074653106569927, 0.13445222154111036, 0.20911123087726258, 0.1125558549699397, 0.1518761804454125, 0.1497820989593569, 0.0914341618581126, 0.08198431410355966, 0.13152451674278653, 0.13119656198315244, 0.10627165567573482, 0.16790629819201308, 0.07079094591386004, 0.08461375492610046, 0.08636753295865551, 0.09094988457282904, 0.5791664029717452, 0.5485443612492459, 0.5926443404789483, 0.6176145954219101, 0.5430915313222118, 0.5558982877384886, 0.5717831336089716, 0.5749741822375104, 0.5549466222921178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004871081591704907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11023612233544333, 0.10080419144236208, 0.1828670066516247, 0.05887025157810566, 0.08461356940734532, 0.07471929946622058, 0.054962400594461225, 0.11961005178590489, 0.13786634250408514, 0.11506726170153503, 0.09867378032916496, 0.10767968735569988, 0.14147303458545435, 0.0671190444402231, 0.11856119585653235, 0.1351310339127525, 0.08080846817878029, 0.09971648178912806, 0.05829915907512584, 0.040521470892320055, 0.031956317783496724, 0.08496141347890984, 0.018366835038386875, 0.0738697535369005, 0.0708476326519969, 0.011422059038750598, 0.028334647822595205, 0.16788870343270423, 0.051768197077490696, 0.11088834383972312, 0.17483496855161795, 0.05562041413859564, 0.08535560580954393, 0.15860659613039008, 0.06795068653765901, 0.11417533894286447, 0.14815991291853026, 0.1701504966092935, 0.16802881626354715, 0.1585466912962391, 0.17713197783737145, 0.167230449413017, 0.15544795216731522, 0.162123075102246, 0.17041633757244923, 0.189367664845433, 0.13769043224956035, 0.9538707707813088, 0.1736376639997197, 0.1124421490858245, 0.06179210830845028, 0.10870996570999536, 0.11536026102679331, 0.16804503058370424, 0.8164331046649359, 0.11347240689342508, 0.0817578877771652, 0.16821930468186397, 0.20956355117648195, 0.2105883132581765, 0.7290966372650284, 0.05877908524415065, 0.05137027651555637, 0.24126649300774405, 0.21948851389775814, 0.20051810814377347, 0.20778702641061686, 0.1927739746909659, 0.1898441526459923, 0.22415954946711558, 0.2529432480182281, 0.23998022034422883, 0.031100496254138466, 0.024275683252474978, 0.03413581792577025, 0.043182415155566534, 0.003095720075726005, 0.021187563028337686, 0.03702059958443715, 0.009976138601425544, 0.03932982500300308]}, "mutation_prompt": null}
