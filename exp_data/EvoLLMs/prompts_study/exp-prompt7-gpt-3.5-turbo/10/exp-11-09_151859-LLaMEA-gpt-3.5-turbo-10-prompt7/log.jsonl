{"id": "daccb454-8073-45aa-82c1-6e29a3348a00", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 19, in __call__\nUnboundLocalError: local variable 'velocity' referenced before assignment\n.", "error": "UnboundLocalError(\"local variable 'velocity' referenced before assignment\")Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 19, in __call__\nUnboundLocalError: local variable 'velocity' referenced before assignment\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "88c394f8-7eac-4bfc-994e-d1bf8ca77c48", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "d489806b-604e-45d1-a76d-6d306911d594", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "1ad340bd-a79c-4d9d-9f88-ea64b6cc20e4", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA with dynamically adjusted mutation rate\n            self.mutation_rate = max(0.01, 0.1 - 0.09 * _ / self.budget)  # Dynamic mutation rate adjustment\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improve convergence speed by dynamically adjusting the mutation rate based on population fitness.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'velocity' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'velocity' referenced before assignment\")", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "e2f1490f-eff1-42f6-b3d4-9a344fe6b0ec", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "56ff05d0-2892-45d1-8d53-fab73304e0d5", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "167e7870-c8d5-4244-a2dd-8f7af087c75d", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "4d229971-ba83-4f3f-bdc0-dac9d20f6a25", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "02993126-c97a-446e-8465-3f5b0aebca92", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "cc668dcb-a4cd-4170-a374-e1fbc62aa084", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "cf8fc44b-9dd1-4a4a-9fcb-ba97e8c6bc8c", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "04670251-c5b6-4c43-b782-a3b31177b426", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "e8c720cb-5961-4dc6-8726-f736b5eda6b8", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO with dynamic inertia weight adjustment\n            dynamic_inertia_weight = max(0.4, self.inertia_weight - 0.4 * _ / self.budget)  # Dynamic adjustment\n            velocity = dynamic_inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Introducing dynamic adjustment of inertia weight to improve convergence speed by adapting velocity updates.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'best_individual' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'best_individual' referenced before assignment\")", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "6233a6a6-7523-4af3-af6a-09bc9c26d543", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            if np.random.rand() < 0.1:\n                self.mutation_rate = 0.1 + 0.9 * np.random.rand()  # Dynamic mutation rate update\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Update the algorithm to utilize a dynamic mutation rate that adapts based on the current fitness landscape to enhance exploration and exploitation trade-off.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'velocity' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'velocity' referenced before assignment\")", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "e5b3f099-6ecb-412c-ba09-d60fdf9fb7b7", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "d382cb8a-c88c-4154-a2f9-1832efed310e", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "4262184f-b428-4f70-8d33-861a93da13f8", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        mutation_update_rate = 0.05  # Dynamic mutation rate update factor\n        best_fitness = np.min(fitness)\n        \n        for _ in range(self.budget):\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamic mutation rate update\n            new_fitness = np.array([func(ind) for ind in population])\n            if np.min(new_fitness) < best_fitness:\n                self.mutation_rate += mutation_update_rate\n            else:\n                self.mutation_rate -= mutation_update_rate\n            \n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = new_fitness\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n            best_fitness = np.min(fitness)\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Implementing a dynamic mutation strategy in which the mutation rate adapts based on the fitness improvement to accelerate convergence speed.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'velocity' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'velocity' referenced before assignment\")", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "bee8e165-2d02-4470-9eb2-8b7cf5ced2c0", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "18ca7aae-e420-416e-a43b-6ed582f09250", "solution": "class HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_fitness = np.min(fitness)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n            \n            # Update velocity based on PSO with dynamic learning rate\n            learning_rate = 1 / (1 + best_fitness - np.min(fitness))\n            velocity = self.inertia_weight * velocity + learning_rate * (self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population))\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Introducing a dynamic learning rate based on the current fitness improvement to adjust the velocity update in the HybridGA_PSO algorithm.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'velocity' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'velocity' referenced before assignment\")", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "efcf1f01-6364-42fe-92e9-122586228f9c", "solution": "class HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        adaptive_inertia = self.inertia_weight  # Adaptive inertia weight\n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = adaptive_inertia * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n            \n            # Update adaptive inertia weight\n            adaptive_inertia = max(0.4, adaptive_inertia - 0.05)\n\n        return global_best", "name": "HybridGA_PSO", "description": "Introducing adaptive inertia weight to enhance the convergence speed.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'velocity' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'velocity' referenced before assignment\")", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "cfbfc921-c293-4de0-a12a-85e791dcf431", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO with adaptive inertia weight\n            adaptive_inertia_weight = max(0.4, self.inertia_weight - 0.001)\n            velocity = adaptive_inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improve convergence speed by adding adaptive inertia weight in the PSO component of the algorithm.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'velocity' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'velocity' referenced before assignment\")", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "271ec15f-3bae-415a-b943-2a6bf7d6a5c0", "solution": "class HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        inertia_decay = 0.95  # New adaptive inertia weight decay factor\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n            \n            self.inertia_weight *= inertia_decay  # Dynamic inertia weight update\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Introducing adaptive inertia weight to dynamically adjust the exploration-exploitation trade-off in the hybrid algorithm.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'velocity' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'velocity' referenced before assignment\")", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "2a183d6a-2ee4-4314-aee0-7eba9288cb25", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "0c23cea1-57f9-4ff6-a26d-b52dc1194791", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "c34187e5-f220-43e0-b891-0e3daf584adf", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "747a3819-3fe0-4667-8f79-c2f57b675ad0", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "db1fb067-5469-4758-b071-55da65cd776e", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "3cda8ba1-09e2-405b-9e58-47006dcb9c81", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "c1d20792-cdc5-4433-b6ec-f5695a196bc4", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "094c52a3-398b-4f30-9c5d-e9df8b7a767f", "solution": "import numpy as np\n\nclass ImprovedHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO with adaptive inertia weight\n            adaptive_inertia_weight = 0.5 + 0.5 * np.cos((np.pi * _) / self.budget)\n            velocity = adaptive_inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "ImprovedHybridGA_PSO", "description": "Introducing adaptive inertia weight to dynamically adjust exploration and exploitation balance during optimization.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'best_individual' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'best_individual' referenced before assignment\")", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "97a05898-28ed-4afa-a758-040894941dd7", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO with adaptive inertia weight\n            adaptive_inertia_weight = self.inertia_weight + (_ / self.budget) * (1 - self.inertia_weight)\n            velocity = adaptive_inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Implement adaptive inertia weight in the HybridGA_PSO algorithm to enhance convergence speed by dynamically adjusting the influence of velocity in the search space exploration.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'velocity' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'velocity' referenced before assignment\")", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "59b45d3b-48bb-41b0-b13c-90265c6ba963", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "485c9464-bcf9-4315-b8c1-a542616e750a", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "7907ea1e-2b58-42a8-b59f-71092c18ebb0", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "60d24d9b-498f-447d-940b-17489e0c49c0", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "b42749a2-d3cc-4718-a198-fbee2fd507b6", "solution": "import numpy as np\nfrom joblib import Parallel, delayed\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO in parallel\n            velocity = Parallel(n_jobs=-1)(\n                delayed(self.update_velocity)(ind, population, fitness) for ind in population\n            )\n            \n            # Mutate based on GA in parallel\n            mutated_population = Parallel(n_jobs=-1)(\n                delayed(self.mutate_individual)(ind) for ind in population\n            )\n            \n            population = np.array(mutated_population)\n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best\n\n    def update_velocity(self, ind, population, fitness):\n        return self.inertia_weight * ind + self.cognitive_weight * np.random.rand() * (population[np.argmin(fitness)] - ind) + self.social_weight * np.random.rand() * (population[np.argmin(fitness)] - ind)\n\n    def mutate_individual(self, ind):\n        mutation_mask = np.random.rand(self.dim) < self.mutation_rate\n        return ind + np.random.uniform(-1.0, 1.0, self.dim) * mutation_mask", "name": "HybridGA_PSO", "description": "Implement parallel computation for updating velocities and mutating individuals in each iteration to enhance optimization speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'joblib'\").", "error": "ModuleNotFoundError(\"No module named 'joblib'\")", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "7b04b437-cb53-47c0-9a4b-72ffd8897f0c", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "6d3f43da-1982-4a20-b2d8-a4d67c7d33df", "solution": "import numpy as np\nimport concurrent.futures\n\nclass HybridGA_PSO_Parallel:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            with concurrent.futures.ThreadPoolExecutor() as executor:\n                futures = [executor.submit(self._update_individual, ind, func) for ind in population]\n                results = [future.result() for future in futures]\n                population = np.array(results)\n        \n        return population[np.argmin([func(ind) for ind in population])]\n\n    def _update_individual(self, individual, func):\n        # Update velocity based on PSO\n        velocity = self.inertia_weight * np.random.rand() + self.cognitive_weight * np.random.rand() * (best_individual - individual) + self.social_weight * np.random.rand() * (global_best - individual)\n        individual += velocity\n        \n        # Mutate based on GA\n        mutation_mask = np.random.rand(self.dim) < self.mutation_rate\n        individual = individual + np.random.uniform(-1.0, 1.0, self.dim) * mutation_mask\n        \n        return individual", "name": "HybridGA_PSO_Parallel", "description": "Utilize a parallelized computation approach to update the population simultaneously, improving optimization speed.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "An exception occurred: RuntimeError(\"can't start new thread\").", "error": "RuntimeError(\"can't start new thread\")", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "c65add77-33b6-4335-b9f1-73960bd8361c", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "cf693c91-0b56-4538-8299-8d6d0efe4ace", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Update inertia weight dynamically\n            self.inertia_weight = max(0.4, self.inertia_weight - 0.02)\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Implementing a dynamic inertia weight update strategy to enhance convergence speed by adjusting the inertia weight based on individual fitness improvements.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'velocity' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'velocity' referenced before assignment\")", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "b09285b4-ffdb-4ec5-89c0-0cadd650f964", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "6b99e508-d6d4-4856-b5b4-43c24575e404", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "66a51ca9-66b9-42b6-9d27-14feff69fa3a", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "f3a4fe84-c699-4452-be4e-a916f9bb52a3", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "3322724d-02b7-4fd9-858e-be6309fbb067", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "5c8a872f-3156-48e0-80e9-8fa8271adeff", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        inertia_decay = 0.95  # Introduce inertia weight decay\n        \n        for _ in range(self.budget):\n            inertia_weight = max(0.4, inertia_weight * inertia_decay)  # Update inertia weight\n            velocity = inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Introducing adaptive inertia weight to dynamically adjust exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'inertia_weight' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'inertia_weight' referenced before assignment\")", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "03d3241e-b69f-45f0-b11c-e5b1dd2dbca3", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "53db18de-cc65-48c3-b822-a8a296c7ca76", "solution": "class HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        mutation_rate = self.mutation_rate\n\n        for _ in range(self.budget):\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n\n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n\n            mutation_rate = max(0.01, mutation_rate * 0.99)  # Dynamic mutation rate decrease over time\n\n        return global_best", "name": "HybridGA_PSO", "description": "Improve convergence speed by applying a dynamic mutation rate that decreases over time during the optimization process, encouraging exploration in the initial stages and exploitation in later stages.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'velocity' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'velocity' referenced before assignment\")", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "7993bf8b-7d54-4791-b2ae-3969738e6ccc", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, initial_inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, inertia_decay=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = initial_inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.inertia_decay = inertia_decay\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO with dynamic inertia weight\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n            self.inertia_weight *= self.inertia_decay\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Utilizing a dynamic inertia weight strategy to adjust the inertia weight during the optimization process based on population diversity.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'velocity' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'velocity' referenced before assignment\")", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "2ea91798-8936-43bf-8f1c-8aecba86c63b", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "27eab999-9f2b-4c10-b9aa-05e97a6b08a5", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {}, "mutation_prompt": null}
{"id": "1c0c37d7-5494-4d56-bda9-0d340aa48390", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improved convergence speed by updating velocity initialization and calculation within the loop.", "configspace": "", "generation": 51, "fitness": 0.1902405220097378, "feedback": "The algorithm HybridGA_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "daccb454-8073-45aa-82c1-6e29a3348a00", "metadata": {"aucs": [0.36496915958980514, 0.37474228930748443, 0.40729010583416925, 0.33916075595207473, 0.39283819865015945, 0.3595596101005194, 0.3958629620543338, 0.44881980950717304, 0.380636641201588, 0.041579081489147574, 0.03526781988822425, 9.999999999998899e-05, 0.055654707920559265, 0.06317333121903379, 0.04213437223422101, 0.05457091648167556, 0.035558184825417394, 0.021258857109791807, 0.07232186076971792, 0.09739184180051541, 0.08576346984242722, 0.11504450298252555, 0.10403845174654525, 0.07156442037354849, 0.08820393695082018, 0.09702228369795918, 0.08412066428739073, 0.07835142541991913, 0.06677605933885677, 0.07990162274860435, 0.07685303625858053, 0.08990911866696805, 0.09027148589367129, 0.08067299424160301, 0.07416117981870973, 0.07983050255001123, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.1726943614502141, 0.2182768994382388, 0.20679230032215923, 0.24954823062316378, 0.2477752831548954, 0.22999029080364586, 0.21757703874560397, 0.24912329374332465, 0.23756445202631304, 0.24691894763904743, 0.277458776070868, 0.2637859030799452, 0.26567510793589855, 0.2455544803949974, 0.27604047081434757, 0.26736681318428723, 0.23233666192804892, 0.16094680116268978, 0.19350327952386004, 0.18136989618013788, 9.999999999998899e-05, 0.1435142874629033, 0.18291401177928202, 0.1915922736349337, 0.12496510376235259, 0.12105662611258872, 0.1558390202657225, 0.13160099191012364, 0.139577517911589, 0.17367411759488371, 0.15285305412969863, 0.13559576797680528, 0.1414378266767894, 0.039198001336645194, 0.09123793019306847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032289747884886033, 9.999999999998899e-05, 0.05467254439743752, 0.0008251397388646664, 0.05969933266476879, 0.0026817895486328513, 0.0012496532114373293, 0.005353965921753634, 0.04151473160424579, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09186946234252713, 0.07997817172590582, 0.08998671048422369, 0.08118279363940506, 0.08737505606947416, 0.08492972987028258, 0.0636606838754813, 0.08971308868576344, 0.06904706112372883, 0.3789154131038285, 0.3436478527706921, 0.3635075373979636, 0.3404256878144457, 0.3781287883813438, 0.3492192773241297, 0.4007954004438776, 0.36493742084213665, 0.35793358267612574, 0.06788019190035666, 0.06858186902722063, 0.06999350431635898, 0.0944541969143996, 0.09091566873908308, 0.09686027024333854, 0.07686636061282004, 0.09202911311093687, 0.09826489988361942, 0.16269339025941187, 0.1450125031877667, 0.14233764746304112, 0.14791014849241324, 0.16880457530428816, 0.22305735294568718, 0.19049698673964188, 0.12520010601222598, 0.14822581271650326, 0.2319341216610289, 0.2247127211060661, 0.2574914629188957, 0.19030404334847395, 0.22457355381560673, 0.22087779090799564, 0.2200123505492555, 0.23024923173707368, 0.2652224078884281, 0.17444889113414452, 0.19247545053225112, 0.18895281937950126, 0.16123670801285628, 0.16972273707521468, 0.15812175683550356, 0.21627039655194258, 0.1668419575735577, 0.16182745870835735, 0.16840957628707454, 0.21025880880383152, 0.17413863596207224, 0.16832007513095437, 0.17560521468394186, 0.19630590917474577, 0.21082129869084, 0.19088297740713567, 0.19302080614959827, 0.18831864529459408, 0.18545980656589633, 0.18795661479985581, 0.18948116854990082, 0.19245719369358472, 0.19341566821888923, 0.1820439100255974, 0.19566988898456927, 0.18370888312845146, 0.1790948569821187, 0.12550637561485634, 0.15188582858381983, 0.22669410492968034, 0.19761171457874616, 0.1296984099046522, 0.12189600912504372, 0.16266005455476074, 0.5845576026779236, 0.44859765983899513, 0.20733378125266066, 0.07336993442488293, 0.10587041875198089, 0.46733233266530827, 0.15362552338755464, 0.4437922165401491, 0.13887072214582108, 0.49125294213426174, 0.16909979757332605, 0.16144354177128029, 0.17347739898214642, 0.1718627496203844, 0.16538930113753814, 0.1752683077519801, 0.17186059893354633, 0.20087278288161503, 0.1778234650735374, 0.06951912473105437, 0.0689114612762598, 0.0800421352111893, 0.08324991620615307, 0.07669714181259712, 0.06851606904426566, 0.06249446432192274, 0.0906478827092293, 0.07220738315826858]}, "mutation_prompt": null}
{"id": "68d55c7f-2dd6-4365-b48c-996a7640a534", "solution": "class HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        for i in range(self.budget):\n            # Update dynamic mutation rate\n            dynamic_mutation_rate = 0.1 + 0.3 * (1 - i / self.budget)\n            \n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA with dynamic mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < dynamic_mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Utilizing a dynamic mutation rate based on the current fitness progress to enhance exploration and potentially speed up convergence.", "configspace": "", "generation": 52, "fitness": 0.16519979046661978, "feedback": "The algorithm HybridGA_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "1c0c37d7-5494-4d56-bda9-0d340aa48390", "metadata": {"aucs": [0.28280779405709544, 0.35356450647917315, 0.3010906981430811, 0.31784583325994353, 0.3039866912383682, 0.292940308996695, 0.31081366240842856, 0.312932678251439, 0.30458449209120153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08705436269285294, 0.07505637195923665, 0.06784741765388769, 0.0889926231914453, 0.06826075429377199, 0.07008346326416903, 0.06714937632195728, 0.10049501565153329, 0.07401233708577948, 0.06251012328897942, 0.06713510705128445, 0.056105493897086856, 0.07477289992768144, 0.07161310483276717, 0.06179492044452528, 0.0667546650229075, 0.0847085496557296, 0.06472997687462889, 0.9907488569204534, 0.9771842788706632, 0.9905015833803695, 0.9820610209393436, 0.9864153813661428, 0.9677023179919837, 0.9906073346283998, 0.9774156860965486, 0.9861365955022577, 0.17915667764559928, 0.14908174261376228, 0.16942581652103705, 0.17254963241552124, 0.1668738909640689, 0.1589676601657215, 0.15148643580525545, 0.1673450278774038, 0.1647714894535871, 0.21361760876634195, 0.2071746728831153, 0.21419079065173674, 0.2070651408748737, 0.22523103997121074, 0.21392409923995537, 0.19226111970136572, 0.24404843612204064, 0.2357007492407207, 0.09098588462747681, 0.09989792617465976, 0.08716379749310088, 0.02060889114673259, 0.07056121048468633, 0.11427537190219095, 0.09041310487654342, 0.10344431443294111, 0.0928000719202231, 0.10069665292256924, 0.10437781925424083, 0.09229890574405053, 0.10118070993090023, 0.09336669170333056, 0.1162985967296003, 0.1139680781524901, 0.016943211341892472, 0.10583540204914266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00576547316175402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025314962349267667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04407773009885951, 0.04950122243980182, 0.04889366718523125, 0.037761573797576276, 0.032910299311047164, 0.054598446599820494, 0.04390404807663362, 0.052679895541619226, 0.048431517160021365, 0.3073606169008729, 0.3128302297608744, 0.30155636120894136, 0.29502236369920043, 0.31085812557420345, 0.31493979775834113, 0.29386056132105043, 0.37031222399949837, 0.30632039729017, 0.061158861265678044, 0.07300156861887519, 0.08111145710947654, 0.06905512353823229, 0.06309531561917425, 0.0808352362500977, 0.07061364765864542, 0.08475410484410983, 0.09732079414330908, 0.13880846950696213, 0.1298022395196956, 0.1647005857363878, 0.14071088786610653, 0.14665575990962643, 0.13050297991661386, 0.12289767109591443, 0.1278060774694768, 0.15817311311852134, 0.21345304362344963, 0.2136403763949991, 0.21394196111894637, 0.19118133382949176, 0.19165569077475497, 0.2017266886080349, 0.19624223794919826, 0.20540678208649532, 0.21921786600805682, 0.1629095762999705, 0.15586749160908553, 0.1595357195191922, 0.1369440780555098, 0.1655986129091198, 0.16157002652902264, 0.15154596780849028, 0.14949372508442194, 0.16596369869534133, 0.18109248158440894, 0.17610742720958805, 0.16499973672755153, 0.18367636276776889, 0.17690549160433677, 0.16866540195505897, 0.14899502169314438, 0.1573246555290101, 0.16376247661366594, 0.1782064464848514, 0.17555804069360348, 0.17707877266954186, 0.16693636872884632, 0.1652619405977297, 0.16924887672168387, 0.1722393366879118, 0.17838197289224988, 0.17652957957799276, 0.15919964056168068, 0.16135590826709778, 0.15055311166942997, 0.2773986248095832, 0.1684402716093788, 0.1606602715265968, 0.14247098832243577, 0.16974594557470413, 0.34183314113977625, 0.3276903447007542, 0.19075931229154086, 0.2935581301133806, 0.3328794332960643, 0.34791652968030384, 0.1774997924362346, 0.14735799187333054, 0.3164744936544097, 0.12240050274313885, 0.16740180119244485, 0.18333575330684737, 0.1809515115902508, 0.159841555322366, 0.1730882604519851, 0.18028142409792725, 0.17377673577007713, 0.18393541559504833, 0.17891752864163069, 0.06231175827656621, 0.0719093591199238, 0.06929419601336773, 0.06788760336980626, 0.06356469033350298, 0.06594970065128458, 0.07977720367908281, 0.06826806093636717, 0.06267758468977969]}, "mutation_prompt": null}
{"id": "f4a78a25-5ef1-4e36-a3b5-4bd65a31870c", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improved convergence speed by updating velocity initialization and calculation within the loop.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c0c37d7-5494-4d56-bda9-0d340aa48390", "metadata": {"aucs": [0.36496915958980514, 0.37474228930748443, 0.40729010583416925, 0.33916075595207473, 0.39283819865015945, 0.3595596101005194, 0.3958629620543338, 0.44881980950717304, 0.380636641201588, 0.041579081489147574, 0.03526781988822425, 9.999999999998899e-05, 0.055654707920559265, 0.06317333121903379, 0.04213437223422101, 0.05457091648167556, 0.035558184825417394, 0.021258857109791807, 0.07232186076971792, 0.09739184180051541, 0.08576346984242722, 0.11504450298252555, 0.10403845174654525, 0.07156442037354849, 0.08820393695082018, 0.09702228369795918, 0.08412066428739073, 0.07835142541991913, 0.06677605933885677, 0.07990162274860435, 0.07685303625858053, 0.08990911866696805, 0.09027148589367129, 0.08067299424160301, 0.07416117981870973, 0.07983050255001123, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.1726943614502141, 0.2182768994382388, 0.20679230032215923, 0.24954823062316378, 0.2477752831548954, 0.22999029080364586, 0.21757703874560397, 0.24912329374332465, 0.23756445202631304, 0.24691894763904743, 0.277458776070868, 0.2637859030799452, 0.26567510793589855, 0.2455544803949974, 0.27604047081434757, 0.26736681318428723, 0.23233666192804892, 0.16094680116268978, 0.19350327952386004, 0.18136989618013788, 9.999999999998899e-05, 0.1435142874629033, 0.18291401177928202, 0.1915922736349337, 0.12496510376235259, 0.12105662611258872, 0.1558390202657225, 0.13160099191012364, 0.139577517911589, 0.17367411759488371, 0.15285305412969863, 0.13559576797680528, 0.1414378266767894, 0.039198001336645194, 0.09123793019306847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032289747884886033, 9.999999999998899e-05, 0.05467254439743752, 0.0008251397388646664, 0.05969933266476879, 0.0026817895486328513, 0.0012496532114373293, 0.005353965921753634, 0.04151473160424579, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09186946234252713, 0.07997817172590582, 0.08998671048422369, 0.08118279363940506, 0.08737505606947416, 0.08492972987028258, 0.0636606838754813, 0.08971308868576344, 0.06904706112372883, 0.3789154131038285, 0.3436478527706921, 0.3635075373979636, 0.3404256878144457, 0.3781287883813438, 0.3492192773241297, 0.4007954004438776, 0.36493742084213665, 0.35793358267612574, 0.06788019190035666, 0.06858186902722063, 0.06999350431635898, 0.0944541969143996, 0.09091566873908308, 0.09686027024333854, 0.07686636061282004, 0.09202911311093687, 0.09826489988361942, 0.16269339025941187, 0.1450125031877667, 0.14233764746304112, 0.14791014849241324, 0.16880457530428816, 0.22305735294568718, 0.19049698673964188, 0.12520010601222598, 0.14822581271650326, 0.2319341216610289, 0.2247127211060661, 0.2574914629188957, 0.19030404334847395, 0.22457355381560673, 0.22087779090799564, 0.2200123505492555, 0.23024923173707368, 0.2652224078884281, 0.17444889113414452, 0.19247545053225112, 0.18895281937950126, 0.16123670801285628, 0.16972273707521468, 0.15812175683550356, 0.21627039655194258, 0.1668419575735577, 0.16182745870835735, 0.16840957628707454, 0.21025880880383152, 0.17413863596207224, 0.16832007513095437, 0.17560521468394186, 0.19630590917474577, 0.21082129869084, 0.19088297740713567, 0.19302080614959827, 0.18831864529459408, 0.18545980656589633, 0.18795661479985581, 0.18948116854990082, 0.19245719369358472, 0.19341566821888923, 0.1820439100255974, 0.19566988898456927, 0.18370888312845146, 0.1790948569821187, 0.12550637561485634, 0.15188582858381983, 0.22669410492968034, 0.19761171457874616, 0.1296984099046522, 0.12189600912504372, 0.16266005455476074, 0.5845576026779236, 0.44859765983899513, 0.20733378125266066, 0.07336993442488293, 0.10587041875198089, 0.46733233266530827, 0.15362552338755464, 0.4437922165401491, 0.13887072214582108, 0.49125294213426174, 0.16909979757332605, 0.16144354177128029, 0.17347739898214642, 0.1718627496203844, 0.16538930113753814, 0.1752683077519801, 0.17186059893354633, 0.20087278288161503, 0.1778234650735374, 0.06951912473105437, 0.0689114612762598, 0.0800421352111893, 0.08324991620615307, 0.07669714181259712, 0.06851606904426566, 0.06249446432192274, 0.0906478827092293, 0.07220738315826858]}, "mutation_prompt": null}
{"id": "267ed690-16c1-4633-983b-c3bedda0f81d", "solution": "import numpy as np\nfrom joblib import Parallel, delayed\n\nclass ParallelHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        for _ in range(0, self.budget, self.population_size):\n            batch_fitness = Parallel(n_jobs=-1)(delayed(func)(ind) for ind in population)\n            for i, fit in enumerate(batch_fitness):\n                if fit < fitness[i]:\n                    fitness[i] = fit\n                    best_individual = population[i]\n            best_idx = np.argmin(fitness)\n            global_best = population[best_idx]\n            \n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n        \n        return global_best", "name": "ParallelHybridGA_PSO", "description": "Utilizing a parallel processing approach to update population in batches for faster convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'joblib'\").", "error": "ModuleNotFoundError(\"No module named 'joblib'\")", "parent_id": "1c0c37d7-5494-4d56-bda9-0d340aa48390", "metadata": {}, "mutation_prompt": null}
{"id": "6125ef51-a22b-43e3-95ff-38cad0103e71", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improved convergence speed by updating velocity initialization and calculation within the loop.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c0c37d7-5494-4d56-bda9-0d340aa48390", "metadata": {"aucs": [0.36496915958980514, 0.37474228930748443, 0.40729010583416925, 0.33916075595207473, 0.39283819865015945, 0.3595596101005194, 0.3958629620543338, 0.44881980950717304, 0.380636641201588, 0.041579081489147574, 0.03526781988822425, 9.999999999998899e-05, 0.055654707920559265, 0.06317333121903379, 0.04213437223422101, 0.05457091648167556, 0.035558184825417394, 0.021258857109791807, 0.07232186076971792, 0.09739184180051541, 0.08576346984242722, 0.11504450298252555, 0.10403845174654525, 0.07156442037354849, 0.08820393695082018, 0.09702228369795918, 0.08412066428739073, 0.07835142541991913, 0.06677605933885677, 0.07990162274860435, 0.07685303625858053, 0.08990911866696805, 0.09027148589367129, 0.08067299424160301, 0.07416117981870973, 0.07983050255001123, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.1726943614502141, 0.2182768994382388, 0.20679230032215923, 0.24954823062316378, 0.2477752831548954, 0.22999029080364586, 0.21757703874560397, 0.24912329374332465, 0.23756445202631304, 0.24691894763904743, 0.277458776070868, 0.2637859030799452, 0.26567510793589855, 0.2455544803949974, 0.27604047081434757, 0.26736681318428723, 0.23233666192804892, 0.16094680116268978, 0.19350327952386004, 0.18136989618013788, 9.999999999998899e-05, 0.1435142874629033, 0.18291401177928202, 0.1915922736349337, 0.12496510376235259, 0.12105662611258872, 0.1558390202657225, 0.13160099191012364, 0.139577517911589, 0.17367411759488371, 0.15285305412969863, 0.13559576797680528, 0.1414378266767894, 0.039198001336645194, 0.09123793019306847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032289747884886033, 9.999999999998899e-05, 0.05467254439743752, 0.0008251397388646664, 0.05969933266476879, 0.0026817895486328513, 0.0012496532114373293, 0.005353965921753634, 0.04151473160424579, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09186946234252713, 0.07997817172590582, 0.08998671048422369, 0.08118279363940506, 0.08737505606947416, 0.08492972987028258, 0.0636606838754813, 0.08971308868576344, 0.06904706112372883, 0.3789154131038285, 0.3436478527706921, 0.3635075373979636, 0.3404256878144457, 0.3781287883813438, 0.3492192773241297, 0.4007954004438776, 0.36493742084213665, 0.35793358267612574, 0.06788019190035666, 0.06858186902722063, 0.06999350431635898, 0.0944541969143996, 0.09091566873908308, 0.09686027024333854, 0.07686636061282004, 0.09202911311093687, 0.09826489988361942, 0.16269339025941187, 0.1450125031877667, 0.14233764746304112, 0.14791014849241324, 0.16880457530428816, 0.22305735294568718, 0.19049698673964188, 0.12520010601222598, 0.14822581271650326, 0.2319341216610289, 0.2247127211060661, 0.2574914629188957, 0.19030404334847395, 0.22457355381560673, 0.22087779090799564, 0.2200123505492555, 0.23024923173707368, 0.2652224078884281, 0.17444889113414452, 0.19247545053225112, 0.18895281937950126, 0.16123670801285628, 0.16972273707521468, 0.15812175683550356, 0.21627039655194258, 0.1668419575735577, 0.16182745870835735, 0.16840957628707454, 0.21025880880383152, 0.17413863596207224, 0.16832007513095437, 0.17560521468394186, 0.19630590917474577, 0.21082129869084, 0.19088297740713567, 0.19302080614959827, 0.18831864529459408, 0.18545980656589633, 0.18795661479985581, 0.18948116854990082, 0.19245719369358472, 0.19341566821888923, 0.1820439100255974, 0.19566988898456927, 0.18370888312845146, 0.1790948569821187, 0.12550637561485634, 0.15188582858381983, 0.22669410492968034, 0.19761171457874616, 0.1296984099046522, 0.12189600912504372, 0.16266005455476074, 0.5845576026779236, 0.44859765983899513, 0.20733378125266066, 0.07336993442488293, 0.10587041875198089, 0.46733233266530827, 0.15362552338755464, 0.4437922165401491, 0.13887072214582108, 0.49125294213426174, 0.16909979757332605, 0.16144354177128029, 0.17347739898214642, 0.1718627496203844, 0.16538930113753814, 0.1752683077519801, 0.17186059893354633, 0.20087278288161503, 0.1778234650735374, 0.06951912473105437, 0.0689114612762598, 0.0800421352111893, 0.08324991620615307, 0.07669714181259712, 0.06851606904426566, 0.06249446432192274, 0.0906478827092293, 0.07220738315826858]}, "mutation_prompt": null}
{"id": "cc83ca84-1913-451c-a470-40c703e6f0e6", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improved convergence speed by updating velocity initialization and calculation within the loop.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c0c37d7-5494-4d56-bda9-0d340aa48390", "metadata": {"aucs": [0.36496915958980514, 0.37474228930748443, 0.40729010583416925, 0.33916075595207473, 0.39283819865015945, 0.3595596101005194, 0.3958629620543338, 0.44881980950717304, 0.380636641201588, 0.041579081489147574, 0.03526781988822425, 9.999999999998899e-05, 0.055654707920559265, 0.06317333121903379, 0.04213437223422101, 0.05457091648167556, 0.035558184825417394, 0.021258857109791807, 0.07232186076971792, 0.09739184180051541, 0.08576346984242722, 0.11504450298252555, 0.10403845174654525, 0.07156442037354849, 0.08820393695082018, 0.09702228369795918, 0.08412066428739073, 0.07835142541991913, 0.06677605933885677, 0.07990162274860435, 0.07685303625858053, 0.08990911866696805, 0.09027148589367129, 0.08067299424160301, 0.07416117981870973, 0.07983050255001123, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.1726943614502141, 0.2182768994382388, 0.20679230032215923, 0.24954823062316378, 0.2477752831548954, 0.22999029080364586, 0.21757703874560397, 0.24912329374332465, 0.23756445202631304, 0.24691894763904743, 0.277458776070868, 0.2637859030799452, 0.26567510793589855, 0.2455544803949974, 0.27604047081434757, 0.26736681318428723, 0.23233666192804892, 0.16094680116268978, 0.19350327952386004, 0.18136989618013788, 9.999999999998899e-05, 0.1435142874629033, 0.18291401177928202, 0.1915922736349337, 0.12496510376235259, 0.12105662611258872, 0.1558390202657225, 0.13160099191012364, 0.139577517911589, 0.17367411759488371, 0.15285305412969863, 0.13559576797680528, 0.1414378266767894, 0.039198001336645194, 0.09123793019306847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032289747884886033, 9.999999999998899e-05, 0.05467254439743752, 0.0008251397388646664, 0.05969933266476879, 0.0026817895486328513, 0.0012496532114373293, 0.005353965921753634, 0.04151473160424579, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09186946234252713, 0.07997817172590582, 0.08998671048422369, 0.08118279363940506, 0.08737505606947416, 0.08492972987028258, 0.0636606838754813, 0.08971308868576344, 0.06904706112372883, 0.3789154131038285, 0.3436478527706921, 0.3635075373979636, 0.3404256878144457, 0.3781287883813438, 0.3492192773241297, 0.4007954004438776, 0.36493742084213665, 0.35793358267612574, 0.06788019190035666, 0.06858186902722063, 0.06999350431635898, 0.0944541969143996, 0.09091566873908308, 0.09686027024333854, 0.07686636061282004, 0.09202911311093687, 0.09826489988361942, 0.16269339025941187, 0.1450125031877667, 0.14233764746304112, 0.14791014849241324, 0.16880457530428816, 0.22305735294568718, 0.19049698673964188, 0.12520010601222598, 0.14822581271650326, 0.2319341216610289, 0.2247127211060661, 0.2574914629188957, 0.19030404334847395, 0.22457355381560673, 0.22087779090799564, 0.2200123505492555, 0.23024923173707368, 0.2652224078884281, 0.17444889113414452, 0.19247545053225112, 0.18895281937950126, 0.16123670801285628, 0.16972273707521468, 0.15812175683550356, 0.21627039655194258, 0.1668419575735577, 0.16182745870835735, 0.16840957628707454, 0.21025880880383152, 0.17413863596207224, 0.16832007513095437, 0.17560521468394186, 0.19630590917474577, 0.21082129869084, 0.19088297740713567, 0.19302080614959827, 0.18831864529459408, 0.18545980656589633, 0.18795661479985581, 0.18948116854990082, 0.19245719369358472, 0.19341566821888923, 0.1820439100255974, 0.19566988898456927, 0.18370888312845146, 0.1790948569821187, 0.12550637561485634, 0.15188582858381983, 0.22669410492968034, 0.19761171457874616, 0.1296984099046522, 0.12189600912504372, 0.16266005455476074, 0.5845576026779236, 0.44859765983899513, 0.20733378125266066, 0.07336993442488293, 0.10587041875198089, 0.46733233266530827, 0.15362552338755464, 0.4437922165401491, 0.13887072214582108, 0.49125294213426174, 0.16909979757332605, 0.16144354177128029, 0.17347739898214642, 0.1718627496203844, 0.16538930113753814, 0.1752683077519801, 0.17186059893354633, 0.20087278288161503, 0.1778234650735374, 0.06951912473105437, 0.0689114612762598, 0.0800421352111893, 0.08324991620615307, 0.07669714181259712, 0.06851606904426566, 0.06249446432192274, 0.0906478827092293, 0.07220738315826858]}, "mutation_prompt": null}
{"id": "b8bedd5f-6fbd-4fda-acad-5cb23a396647", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Mutate based on GA with adaptive mutation rates\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate * np.power(np.log10(_ + 1), -0.5)\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Enhance convergence speed by optimizing the mutation process in GA by incorporating adaptive mutation rates based on individual fitness.", "configspace": "", "generation": 57, "fitness": 0.1883695693401732, "feedback": "The algorithm HybridGA_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "1c0c37d7-5494-4d56-bda9-0d340aa48390", "metadata": {"aucs": [0.404789399286989, 0.4288212437592681, 0.4486210748274957, 0.42075562565001, 0.44679306615761716, 0.40792746451477135, 0.41266311385627186, 0.41608416871392506, 0.42329751790796244, 0.047809682186133795, 0.07759119799397307, 0.047464227303028905, 0.11085380866589134, 0.13582509739311466, 0.1234742116043741, 0.01824040530225901, 0.1443857642831523, 0.0537455085980415, 0.0804413021293705, 0.10399116098091599, 0.08797874900594671, 0.09048658820782862, 0.0843334965191247, 0.08664440058468659, 0.07268868073008583, 0.09478998827940233, 0.08338582996972221, 0.09449357427715588, 0.06997729499897609, 0.12554958723057918, 0.08970289015955824, 0.0725045709189217, 0.07981707689602535, 0.07237186003838236, 0.08127189399453749, 0.0699448183414264, 0.9908615303732117, 0.9818315366895608, 0.9904849386270642, 0.9817665638776697, 0.9863962747982011, 0.9757613675730737, 0.9908551206497044, 0.9778743553300792, 0.9822230217663697, 0.2089696862605217, 0.23763954236163076, 0.20394938615193037, 0.2085976015205525, 0.20495574328902932, 0.2294460054491938, 0.25478719816254614, 0.21170737098135228, 0.22429771472035898, 0.23773933223635524, 0.24965770577207602, 0.3286918651869283, 0.21860708525024797, 0.24804367451762788, 0.2541774694785929, 0.23156797759138015, 0.20989980278840648, 0.5525238339154457, 0.1574563764293464, 0.08562843907914008, 0.15196118370359113, 0.14698853824229463, 0.1204798381913984, 0.1586157004650104, 0.14382994733815535, 0.12356148786594257, 0.18018824801494715, 0.22411928434509787, 0.1282886411118931, 0.2285322791632105, 0.14423607590916687, 0.09164803052832082, 0.15047839212652547, 0.1470325172185285, 0.04590275867682181, 0.11684277270722887, 9.999999999998899e-05, 9.999999999998899e-05, 0.03786667302676938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006198969821549216, 9.999999999998899e-05, 0.05265565869851707, 0.0028371357449675783, 0.010045963755401677, 0.04527590950060112, 9.999999999998899e-05, 0.012543115247588998, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00027786011941299815, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018848411866719816, 0.07430475940734504, 0.0767684145283658, 0.08562631783020114, 0.07721490220682858, 0.0858329899211947, 0.09979955216578129, 0.08231586711411931, 0.0744198089441368, 0.10554100370714892, 0.4030353962734402, 0.37026446482348796, 0.35171717053129026, 0.4193034195172698, 0.3962447869873451, 0.3917793106230355, 0.37433498605645255, 0.3595182112059987, 0.4086740930532573, 0.08032214025348328, 0.08425218682940028, 0.10219480466043973, 0.06269070240462316, 0.07560514243621497, 0.07516132058487068, 0.07173219373847384, 0.07392689271525632, 0.09569882520455197, 0.16476342928310073, 0.15796558428247842, 0.14921547538673474, 0.16315287196105566, 0.1251751198547827, 0.16339926820420314, 0.16155483585407016, 0.2080741384485365, 0.18606231452415145, 0.2686373172034744, 0.20035162075700286, 0.2353184286028691, 0.2572336651220398, 0.18288077958241233, 0.1846880056403144, 0.2097032523998088, 0.24113742470525557, 0.17376412242267436, 0.14200296855013783, 0.1260559525617445, 0.18752661518370328, 0.17013056354741218, 0.1522261645110995, 0.15587298155219853, 0.15914298770008084, 0.1647115998682701, 0.17256356135264506, 0.15900526228332967, 0.15643531494826535, 0.1941967126977876, 0.17944060614199753, 0.18409004367712511, 0.1794371736852055, 0.18319322077402844, 0.17571310730852496, 0.17358829156697375, 0.18390057709431884, 0.18887658033433474, 0.18197128182141864, 0.18220557691093386, 0.20911544475740051, 0.19050943975895507, 0.18282156986484344, 0.1858054866552764, 0.1779627531699809, 0.18096764704252122, 0.12561944115925616, 0.15310795791159815, 0.11584608834744159, 0.16446267304123807, 0.19822025478671368, 0.11115347805640063, 0.1647195233939539, 0.11745859876144604, 0.1521268865389237, 0.2084849179355096, 0.07323577541965642, 0.20913595289603237, 0.16860710177622917, 0.15289270774153263, 0.14536632030777874, 0.15238421119421486, 0.5334312719702694, 0.1645257362198418, 0.21072335430431544, 0.16728215786986111, 0.1654440377291736, 0.1869730421809186, 0.17082424964513943, 0.1848997134696101, 0.1747132933900022, 0.18801633863767542, 0.07708024096635979, 0.07047760453385543, 0.06725081373953723, 0.06434081249411772, 0.08898571021754254, 0.06918356931312497, 0.0782556564305179, 0.0810147522943595, 0.06632831755903612]}, "mutation_prompt": null}
{"id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate\n            mutation_rate_adjustment = 0.1 * np.exp(-_ / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improved convergence speed by applying dynamic adjustment of mutation rate during optimization iterations.", "configspace": "", "generation": 58, "fitness": 0.1909936413786824, "feedback": "The algorithm HybridGA_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "1c0c37d7-5494-4d56-bda9-0d340aa48390", "metadata": {"aucs": [0.35762711093264044, 0.3690576429901343, 0.3587246699734421, 0.36435083568093585, 0.37566291610879554, 0.3936055209802801, 0.4126394543354962, 0.43096776677381543, 0.3941259027700539, 0.02456317423525689, 0.04335839322574098, 0.029350017262280592, 0.055654707920559265, 0.02648936830422921, 0.06177518557855943, 0.0786312841074136, 0.013807993639643468, 0.03001955722715577, 0.08207280427202146, 0.09065185324798875, 0.08655531335779942, 0.11504450298252555, 0.10403845174654525, 0.08554810531908719, 0.0867182791441331, 0.09826922913293579, 0.08199768243055428, 0.06611775043607226, 0.06406688483359668, 0.08826352892680134, 0.0659574095005715, 0.08983199579562895, 0.08731963759636419, 0.08258602870489973, 0.0675925535406483, 0.08547733244558675, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.23868683244213318, 0.22102312344892094, 0.2197440818525077, 0.2436661910034752, 0.20994835573913817, 0.22999029080364586, 0.23025149427792668, 0.21284206756298318, 0.21321369119344158, 0.2462983020145827, 0.2389034134003366, 0.23673893412321811, 0.3059553699958534, 0.26729039513040975, 0.25956011885443075, 0.19162494300292132, 0.21561229347054656, 0.15472082230730755, 0.18908477480611674, 0.18174732834444196, 9.999999999998899e-05, 0.16651722517261036, 0.16238618689822215, 0.1915922736349337, 0.11796171863745863, 0.1524031078171758, 0.15351357243396924, 0.138074454300656, 0.1462506670977859, 0.1669179320893841, 0.16783319262995466, 0.1362216515554846, 0.14945894607380183, 0.039198001336645194, 0.09009320022154566, 0.003190124652267534, 0.011075733980328017, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024911811358331315, 0.050342704472354116, 0.0010846210521845423, 0.06934931419313584, 9.999999999998899e-05, 0.000331608021583607, 0.004020303140508941, 0.02845493831033985, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08736417291755139, 0.0840013272620923, 0.11600346616819956, 0.0933892163769906, 0.09317714058495641, 0.09469561685596617, 0.07473306443829042, 0.07413552462460826, 0.0642362550178015, 0.3630123148394354, 0.33968994173854083, 0.3681121672670724, 0.34818833848515773, 0.3836048238062494, 0.35030846497428425, 0.4007954004438776, 0.35632602955739057, 0.3581104255148657, 0.07177161009300037, 0.07090572456252253, 0.09582839065238402, 0.07931075453848135, 0.09247356272707252, 0.09790172522131035, 0.07049407148889875, 0.09216147104853556, 0.09592427908517953, 0.19161223593625398, 0.19504830231884052, 0.20898803619799078, 0.13828837385651682, 0.19616499441961321, 0.21988222989561046, 0.20632278901805645, 0.16088951163309595, 0.15989583563329557, 0.23665704505545893, 0.23296112451958884, 0.25871518409497196, 0.20675292516308708, 0.21339966785306352, 0.22149913510636454, 0.2200123505492555, 0.21130253054342008, 0.2652224078884281, 0.18382224719155316, 0.19100582795503618, 0.18515542857331746, 0.1725523459644459, 0.1774766485524133, 0.15904614397469719, 0.17748738292013333, 0.16645203871338055, 0.18468365470311932, 0.1686373336747633, 0.19938789767029685, 0.17460568571644686, 0.18134887661629184, 0.17061140367438044, 0.19575441093165336, 0.21082129869084, 0.20211640575014567, 0.18413827545939243, 0.19140556594546476, 0.18345116848747856, 0.1881783533854553, 0.19229118690428382, 0.19360618492234338, 0.1845966619741154, 0.18786884774275237, 0.19196186786503722, 0.18195940158894586, 0.1667217831424287, 0.12551311334320558, 0.15186200492140434, 0.22669410492968034, 0.1973291027828652, 0.12984295313772343, 0.12190132670544374, 0.1627461476470764, 0.5707524697508651, 0.4366588121256917, 0.20691242123752196, 0.07343858991395569, 0.10587041875198089, 0.4326321264031052, 0.15342653038142706, 0.47293785760778717, 0.1386553697270425, 0.5201209375051299, 0.16609269613757738, 0.16602084869610845, 0.18358049497702478, 0.17225996977415725, 0.16538930113753814, 0.18092806787071636, 0.17216932837701693, 0.16376476941031948, 0.1778234650735374, 0.06951912473105437, 0.06678130552024975, 0.0800421352111893, 0.074341746457662, 0.07613772288075393, 0.07298768173088233, 0.06630488833657311, 0.0906478827092293, 0.07446833064771641]}, "mutation_prompt": null}
{"id": "54a2601c-abfc-4861-a61f-9b3fb29c77f8", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate\n            mutation_rate_adjustment = 0.1 * np.exp(-_ / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improved convergence speed by applying dynamic adjustment of mutation rate during optimization iterations.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {"aucs": [0.35762711093264044, 0.3690576429901343, 0.3587246699734421, 0.36435083568093585, 0.37566291610879554, 0.3936055209802801, 0.4126394543354962, 0.43096776677381543, 0.3941259027700539, 0.02456317423525689, 0.04335839322574098, 0.029350017262280592, 0.055654707920559265, 0.02648936830422921, 0.06177518557855943, 0.0786312841074136, 0.013807993639643468, 0.03001955722715577, 0.08207280427202146, 0.09065185324798875, 0.08655531335779942, 0.11504450298252555, 0.10403845174654525, 0.08554810531908719, 0.0867182791441331, 0.09826922913293579, 0.08199768243055428, 0.06611775043607226, 0.06406688483359668, 0.08826352892680134, 0.0659574095005715, 0.08983199579562895, 0.08731963759636419, 0.08258602870489973, 0.0675925535406483, 0.08547733244558675, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.23868683244213318, 0.22102312344892094, 0.2197440818525077, 0.2436661910034752, 0.20994835573913817, 0.22999029080364586, 0.23025149427792668, 0.21284206756298318, 0.21321369119344158, 0.2462983020145827, 0.2389034134003366, 0.23673893412321811, 0.3059553699958534, 0.26729039513040975, 0.25956011885443075, 0.19162494300292132, 0.21561229347054656, 0.15472082230730755, 0.18908477480611674, 0.18174732834444196, 9.999999999998899e-05, 0.16651722517261036, 0.16238618689822215, 0.1915922736349337, 0.11796171863745863, 0.1524031078171758, 0.15351357243396924, 0.138074454300656, 0.1462506670977859, 0.1669179320893841, 0.16783319262995466, 0.1362216515554846, 0.14945894607380183, 0.039198001336645194, 0.09009320022154566, 0.003190124652267534, 0.011075733980328017, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024911811358331315, 0.050342704472354116, 0.0010846210521845423, 0.06934931419313584, 9.999999999998899e-05, 0.000331608021583607, 0.004020303140508941, 0.02845493831033985, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08736417291755139, 0.0840013272620923, 0.11600346616819956, 0.0933892163769906, 0.09317714058495641, 0.09469561685596617, 0.07473306443829042, 0.07413552462460826, 0.0642362550178015, 0.3630123148394354, 0.33968994173854083, 0.3681121672670724, 0.34818833848515773, 0.3836048238062494, 0.35030846497428425, 0.4007954004438776, 0.35632602955739057, 0.3581104255148657, 0.07177161009300037, 0.07090572456252253, 0.09582839065238402, 0.07931075453848135, 0.09247356272707252, 0.09790172522131035, 0.07049407148889875, 0.09216147104853556, 0.09592427908517953, 0.19161223593625398, 0.19504830231884052, 0.20898803619799078, 0.13828837385651682, 0.19616499441961321, 0.21988222989561046, 0.20632278901805645, 0.16088951163309595, 0.15989583563329557, 0.23665704505545893, 0.23296112451958884, 0.25871518409497196, 0.20675292516308708, 0.21339966785306352, 0.22149913510636454, 0.2200123505492555, 0.21130253054342008, 0.2652224078884281, 0.18382224719155316, 0.19100582795503618, 0.18515542857331746, 0.1725523459644459, 0.1774766485524133, 0.15904614397469719, 0.17748738292013333, 0.16645203871338055, 0.18468365470311932, 0.1686373336747633, 0.19938789767029685, 0.17460568571644686, 0.18134887661629184, 0.17061140367438044, 0.19575441093165336, 0.21082129869084, 0.20211640575014567, 0.18413827545939243, 0.19140556594546476, 0.18345116848747856, 0.1881783533854553, 0.19229118690428382, 0.19360618492234338, 0.1845966619741154, 0.18786884774275237, 0.19196186786503722, 0.18195940158894586, 0.1667217831424287, 0.12551311334320558, 0.15186200492140434, 0.22669410492968034, 0.1973291027828652, 0.12984295313772343, 0.12190132670544374, 0.1627461476470764, 0.5707524697508651, 0.4366588121256917, 0.20691242123752196, 0.07343858991395569, 0.10587041875198089, 0.4326321264031052, 0.15342653038142706, 0.47293785760778717, 0.1386553697270425, 0.5201209375051299, 0.16609269613757738, 0.16602084869610845, 0.18358049497702478, 0.17225996977415725, 0.16538930113753814, 0.18092806787071636, 0.17216932837701693, 0.16376476941031948, 0.1778234650735374, 0.06951912473105437, 0.06678130552024975, 0.0800421352111893, 0.074341746457662, 0.07613772288075393, 0.07298768173088233, 0.06630488833657311, 0.0906478827092293, 0.07446833064771641]}, "mutation_prompt": null}
{"id": "3c787094-d06a-4e81-a582-15f3650b75ac", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate\n            mutation_rate_adjustment = 0.1 * np.exp(-_ / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improved convergence speed by applying dynamic adjustment of mutation rate during optimization iterations.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {"aucs": [0.35762711093264044, 0.3690576429901343, 0.3587246699734421, 0.36435083568093585, 0.37566291610879554, 0.3936055209802801, 0.4126394543354962, 0.43096776677381543, 0.3941259027700539, 0.02456317423525689, 0.04335839322574098, 0.029350017262280592, 0.055654707920559265, 0.02648936830422921, 0.06177518557855943, 0.0786312841074136, 0.013807993639643468, 0.03001955722715577, 0.08207280427202146, 0.09065185324798875, 0.08655531335779942, 0.11504450298252555, 0.10403845174654525, 0.08554810531908719, 0.0867182791441331, 0.09826922913293579, 0.08199768243055428, 0.06611775043607226, 0.06406688483359668, 0.08826352892680134, 0.0659574095005715, 0.08983199579562895, 0.08731963759636419, 0.08258602870489973, 0.0675925535406483, 0.08547733244558675, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.23868683244213318, 0.22102312344892094, 0.2197440818525077, 0.2436661910034752, 0.20994835573913817, 0.22999029080364586, 0.23025149427792668, 0.21284206756298318, 0.21321369119344158, 0.2462983020145827, 0.2389034134003366, 0.23673893412321811, 0.3059553699958534, 0.26729039513040975, 0.25956011885443075, 0.19162494300292132, 0.21561229347054656, 0.15472082230730755, 0.18908477480611674, 0.18174732834444196, 9.999999999998899e-05, 0.16651722517261036, 0.16238618689822215, 0.1915922736349337, 0.11796171863745863, 0.1524031078171758, 0.15351357243396924, 0.138074454300656, 0.1462506670977859, 0.1669179320893841, 0.16783319262995466, 0.1362216515554846, 0.14945894607380183, 0.039198001336645194, 0.09009320022154566, 0.003190124652267534, 0.011075733980328017, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024911811358331315, 0.050342704472354116, 0.0010846210521845423, 0.06934931419313584, 9.999999999998899e-05, 0.000331608021583607, 0.004020303140508941, 0.02845493831033985, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08736417291755139, 0.0840013272620923, 0.11600346616819956, 0.0933892163769906, 0.09317714058495641, 0.09469561685596617, 0.07473306443829042, 0.07413552462460826, 0.0642362550178015, 0.3630123148394354, 0.33968994173854083, 0.3681121672670724, 0.34818833848515773, 0.3836048238062494, 0.35030846497428425, 0.4007954004438776, 0.35632602955739057, 0.3581104255148657, 0.07177161009300037, 0.07090572456252253, 0.09582839065238402, 0.07931075453848135, 0.09247356272707252, 0.09790172522131035, 0.07049407148889875, 0.09216147104853556, 0.09592427908517953, 0.19161223593625398, 0.19504830231884052, 0.20898803619799078, 0.13828837385651682, 0.19616499441961321, 0.21988222989561046, 0.20632278901805645, 0.16088951163309595, 0.15989583563329557, 0.23665704505545893, 0.23296112451958884, 0.25871518409497196, 0.20675292516308708, 0.21339966785306352, 0.22149913510636454, 0.2200123505492555, 0.21130253054342008, 0.2652224078884281, 0.18382224719155316, 0.19100582795503618, 0.18515542857331746, 0.1725523459644459, 0.1774766485524133, 0.15904614397469719, 0.17748738292013333, 0.16645203871338055, 0.18468365470311932, 0.1686373336747633, 0.19938789767029685, 0.17460568571644686, 0.18134887661629184, 0.17061140367438044, 0.19575441093165336, 0.21082129869084, 0.20211640575014567, 0.18413827545939243, 0.19140556594546476, 0.18345116848747856, 0.1881783533854553, 0.19229118690428382, 0.19360618492234338, 0.1845966619741154, 0.18786884774275237, 0.19196186786503722, 0.18195940158894586, 0.1667217831424287, 0.12551311334320558, 0.15186200492140434, 0.22669410492968034, 0.1973291027828652, 0.12984295313772343, 0.12190132670544374, 0.1627461476470764, 0.5707524697508651, 0.4366588121256917, 0.20691242123752196, 0.07343858991395569, 0.10587041875198089, 0.4326321264031052, 0.15342653038142706, 0.47293785760778717, 0.1386553697270425, 0.5201209375051299, 0.16609269613757738, 0.16602084869610845, 0.18358049497702478, 0.17225996977415725, 0.16538930113753814, 0.18092806787071636, 0.17216932837701693, 0.16376476941031948, 0.1778234650735374, 0.06951912473105437, 0.06678130552024975, 0.0800421352111893, 0.074341746457662, 0.07613772288075393, 0.07298768173088233, 0.06630488833657311, 0.0906478827092293, 0.07446833064771641]}, "mutation_prompt": null}
{"id": "2b15f371-e38d-498d-8687-d4c6ad378174", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate\n            mutation_rate_adjustment = 0.1 * np.exp(-_ / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improved convergence speed by applying dynamic adjustment of mutation rate during optimization iterations.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {"aucs": [0.35762711093264044, 0.3690576429901343, 0.3587246699734421, 0.36435083568093585, 0.37566291610879554, 0.3936055209802801, 0.4126394543354962, 0.43096776677381543, 0.3941259027700539, 0.02456317423525689, 0.04335839322574098, 0.029350017262280592, 0.055654707920559265, 0.02648936830422921, 0.06177518557855943, 0.0786312841074136, 0.013807993639643468, 0.03001955722715577, 0.08207280427202146, 0.09065185324798875, 0.08655531335779942, 0.11504450298252555, 0.10403845174654525, 0.08554810531908719, 0.0867182791441331, 0.09826922913293579, 0.08199768243055428, 0.06611775043607226, 0.06406688483359668, 0.08826352892680134, 0.0659574095005715, 0.08983199579562895, 0.08731963759636419, 0.08258602870489973, 0.0675925535406483, 0.08547733244558675, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.23868683244213318, 0.22102312344892094, 0.2197440818525077, 0.2436661910034752, 0.20994835573913817, 0.22999029080364586, 0.23025149427792668, 0.21284206756298318, 0.21321369119344158, 0.2462983020145827, 0.2389034134003366, 0.23673893412321811, 0.3059553699958534, 0.26729039513040975, 0.25956011885443075, 0.19162494300292132, 0.21561229347054656, 0.15472082230730755, 0.18908477480611674, 0.18174732834444196, 9.999999999998899e-05, 0.16651722517261036, 0.16238618689822215, 0.1915922736349337, 0.11796171863745863, 0.1524031078171758, 0.15351357243396924, 0.138074454300656, 0.1462506670977859, 0.1669179320893841, 0.16783319262995466, 0.1362216515554846, 0.14945894607380183, 0.039198001336645194, 0.09009320022154566, 0.003190124652267534, 0.011075733980328017, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024911811358331315, 0.050342704472354116, 0.0010846210521845423, 0.06934931419313584, 9.999999999998899e-05, 0.000331608021583607, 0.004020303140508941, 0.02845493831033985, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08736417291755139, 0.0840013272620923, 0.11600346616819956, 0.0933892163769906, 0.09317714058495641, 0.09469561685596617, 0.07473306443829042, 0.07413552462460826, 0.0642362550178015, 0.3630123148394354, 0.33968994173854083, 0.3681121672670724, 0.34818833848515773, 0.3836048238062494, 0.35030846497428425, 0.4007954004438776, 0.35632602955739057, 0.3581104255148657, 0.07177161009300037, 0.07090572456252253, 0.09582839065238402, 0.07931075453848135, 0.09247356272707252, 0.09790172522131035, 0.07049407148889875, 0.09216147104853556, 0.09592427908517953, 0.19161223593625398, 0.19504830231884052, 0.20898803619799078, 0.13828837385651682, 0.19616499441961321, 0.21988222989561046, 0.20632278901805645, 0.16088951163309595, 0.15989583563329557, 0.23665704505545893, 0.23296112451958884, 0.25871518409497196, 0.20675292516308708, 0.21339966785306352, 0.22149913510636454, 0.2200123505492555, 0.21130253054342008, 0.2652224078884281, 0.18382224719155316, 0.19100582795503618, 0.18515542857331746, 0.1725523459644459, 0.1774766485524133, 0.15904614397469719, 0.17748738292013333, 0.16645203871338055, 0.18468365470311932, 0.1686373336747633, 0.19938789767029685, 0.17460568571644686, 0.18134887661629184, 0.17061140367438044, 0.19575441093165336, 0.21082129869084, 0.20211640575014567, 0.18413827545939243, 0.19140556594546476, 0.18345116848747856, 0.1881783533854553, 0.19229118690428382, 0.19360618492234338, 0.1845966619741154, 0.18786884774275237, 0.19196186786503722, 0.18195940158894586, 0.1667217831424287, 0.12551311334320558, 0.15186200492140434, 0.22669410492968034, 0.1973291027828652, 0.12984295313772343, 0.12190132670544374, 0.1627461476470764, 0.5707524697508651, 0.4366588121256917, 0.20691242123752196, 0.07343858991395569, 0.10587041875198089, 0.4326321264031052, 0.15342653038142706, 0.47293785760778717, 0.1386553697270425, 0.5201209375051299, 0.16609269613757738, 0.16602084869610845, 0.18358049497702478, 0.17225996977415725, 0.16538930113753814, 0.18092806787071636, 0.17216932837701693, 0.16376476941031948, 0.1778234650735374, 0.06951912473105437, 0.06678130552024975, 0.0800421352111893, 0.074341746457662, 0.07613772288075393, 0.07298768173088233, 0.06630488833657311, 0.0906478827092293, 0.07446833064771641]}, "mutation_prompt": null}
{"id": "315a8b11-3ce1-4c29-b58c-21854a23cfda", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate\n            mutation_rate_adjustment = 0.1 * np.exp(-_ / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improved convergence speed by applying dynamic adjustment of mutation rate during optimization iterations.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {"aucs": [0.35762711093264044, 0.3690576429901343, 0.3587246699734421, 0.36435083568093585, 0.37566291610879554, 0.3936055209802801, 0.4126394543354962, 0.43096776677381543, 0.3941259027700539, 0.02456317423525689, 0.04335839322574098, 0.029350017262280592, 0.055654707920559265, 0.02648936830422921, 0.06177518557855943, 0.0786312841074136, 0.013807993639643468, 0.03001955722715577, 0.08207280427202146, 0.09065185324798875, 0.08655531335779942, 0.11504450298252555, 0.10403845174654525, 0.08554810531908719, 0.0867182791441331, 0.09826922913293579, 0.08199768243055428, 0.06611775043607226, 0.06406688483359668, 0.08826352892680134, 0.0659574095005715, 0.08983199579562895, 0.08731963759636419, 0.08258602870489973, 0.0675925535406483, 0.08547733244558675, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.23868683244213318, 0.22102312344892094, 0.2197440818525077, 0.2436661910034752, 0.20994835573913817, 0.22999029080364586, 0.23025149427792668, 0.21284206756298318, 0.21321369119344158, 0.2462983020145827, 0.2389034134003366, 0.23673893412321811, 0.3059553699958534, 0.26729039513040975, 0.25956011885443075, 0.19162494300292132, 0.21561229347054656, 0.15472082230730755, 0.18908477480611674, 0.18174732834444196, 9.999999999998899e-05, 0.16651722517261036, 0.16238618689822215, 0.1915922736349337, 0.11796171863745863, 0.1524031078171758, 0.15351357243396924, 0.138074454300656, 0.1462506670977859, 0.1669179320893841, 0.16783319262995466, 0.1362216515554846, 0.14945894607380183, 0.039198001336645194, 0.09009320022154566, 0.003190124652267534, 0.011075733980328017, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024911811358331315, 0.050342704472354116, 0.0010846210521845423, 0.06934931419313584, 9.999999999998899e-05, 0.000331608021583607, 0.004020303140508941, 0.02845493831033985, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08736417291755139, 0.0840013272620923, 0.11600346616819956, 0.0933892163769906, 0.09317714058495641, 0.09469561685596617, 0.07473306443829042, 0.07413552462460826, 0.0642362550178015, 0.3630123148394354, 0.33968994173854083, 0.3681121672670724, 0.34818833848515773, 0.3836048238062494, 0.35030846497428425, 0.4007954004438776, 0.35632602955739057, 0.3581104255148657, 0.07177161009300037, 0.07090572456252253, 0.09582839065238402, 0.07931075453848135, 0.09247356272707252, 0.09790172522131035, 0.07049407148889875, 0.09216147104853556, 0.09592427908517953, 0.19161223593625398, 0.19504830231884052, 0.20898803619799078, 0.13828837385651682, 0.19616499441961321, 0.21988222989561046, 0.20632278901805645, 0.16088951163309595, 0.15989583563329557, 0.23665704505545893, 0.23296112451958884, 0.25871518409497196, 0.20675292516308708, 0.21339966785306352, 0.22149913510636454, 0.2200123505492555, 0.21130253054342008, 0.2652224078884281, 0.18382224719155316, 0.19100582795503618, 0.18515542857331746, 0.1725523459644459, 0.1774766485524133, 0.15904614397469719, 0.17748738292013333, 0.16645203871338055, 0.18468365470311932, 0.1686373336747633, 0.19938789767029685, 0.17460568571644686, 0.18134887661629184, 0.17061140367438044, 0.19575441093165336, 0.21082129869084, 0.20211640575014567, 0.18413827545939243, 0.19140556594546476, 0.18345116848747856, 0.1881783533854553, 0.19229118690428382, 0.19360618492234338, 0.1845966619741154, 0.18786884774275237, 0.19196186786503722, 0.18195940158894586, 0.1667217831424287, 0.12551311334320558, 0.15186200492140434, 0.22669410492968034, 0.1973291027828652, 0.12984295313772343, 0.12190132670544374, 0.1627461476470764, 0.5707524697508651, 0.4366588121256917, 0.20691242123752196, 0.07343858991395569, 0.10587041875198089, 0.4326321264031052, 0.15342653038142706, 0.47293785760778717, 0.1386553697270425, 0.5201209375051299, 0.16609269613757738, 0.16602084869610845, 0.18358049497702478, 0.17225996977415725, 0.16538930113753814, 0.18092806787071636, 0.17216932837701693, 0.16376476941031948, 0.1778234650735374, 0.06951912473105437, 0.06678130552024975, 0.0800421352111893, 0.074341746457662, 0.07613772288075393, 0.07298768173088233, 0.06630488833657311, 0.0906478827092293, 0.07446833064771641]}, "mutation_prompt": null}
{"id": "581696af-4258-4084-9260-548c95c59f35", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate\n            mutation_rate_adjustment = 0.1 * np.exp(-_ / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improved convergence speed by applying dynamic adjustment of mutation rate during optimization iterations.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {"aucs": [0.35762711093264044, 0.3690576429901343, 0.3587246699734421, 0.36435083568093585, 0.37566291610879554, 0.3936055209802801, 0.4126394543354962, 0.43096776677381543, 0.3941259027700539, 0.02456317423525689, 0.04335839322574098, 0.029350017262280592, 0.055654707920559265, 0.02648936830422921, 0.06177518557855943, 0.0786312841074136, 0.013807993639643468, 0.03001955722715577, 0.08207280427202146, 0.09065185324798875, 0.08655531335779942, 0.11504450298252555, 0.10403845174654525, 0.08554810531908719, 0.0867182791441331, 0.09826922913293579, 0.08199768243055428, 0.06611775043607226, 0.06406688483359668, 0.08826352892680134, 0.0659574095005715, 0.08983199579562895, 0.08731963759636419, 0.08258602870489973, 0.0675925535406483, 0.08547733244558675, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.23868683244213318, 0.22102312344892094, 0.2197440818525077, 0.2436661910034752, 0.20994835573913817, 0.22999029080364586, 0.23025149427792668, 0.21284206756298318, 0.21321369119344158, 0.2462983020145827, 0.2389034134003366, 0.23673893412321811, 0.3059553699958534, 0.26729039513040975, 0.25956011885443075, 0.19162494300292132, 0.21561229347054656, 0.15472082230730755, 0.18908477480611674, 0.18174732834444196, 9.999999999998899e-05, 0.16651722517261036, 0.16238618689822215, 0.1915922736349337, 0.11796171863745863, 0.1524031078171758, 0.15351357243396924, 0.138074454300656, 0.1462506670977859, 0.1669179320893841, 0.16783319262995466, 0.1362216515554846, 0.14945894607380183, 0.039198001336645194, 0.09009320022154566, 0.003190124652267534, 0.011075733980328017, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024911811358331315, 0.050342704472354116, 0.0010846210521845423, 0.06934931419313584, 9.999999999998899e-05, 0.000331608021583607, 0.004020303140508941, 0.02845493831033985, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08736417291755139, 0.0840013272620923, 0.11600346616819956, 0.0933892163769906, 0.09317714058495641, 0.09469561685596617, 0.07473306443829042, 0.07413552462460826, 0.0642362550178015, 0.3630123148394354, 0.33968994173854083, 0.3681121672670724, 0.34818833848515773, 0.3836048238062494, 0.35030846497428425, 0.4007954004438776, 0.35632602955739057, 0.3581104255148657, 0.07177161009300037, 0.07090572456252253, 0.09582839065238402, 0.07931075453848135, 0.09247356272707252, 0.09790172522131035, 0.07049407148889875, 0.09216147104853556, 0.09592427908517953, 0.19161223593625398, 0.19504830231884052, 0.20898803619799078, 0.13828837385651682, 0.19616499441961321, 0.21988222989561046, 0.20632278901805645, 0.16088951163309595, 0.15989583563329557, 0.23665704505545893, 0.23296112451958884, 0.25871518409497196, 0.20675292516308708, 0.21339966785306352, 0.22149913510636454, 0.2200123505492555, 0.21130253054342008, 0.2652224078884281, 0.18382224719155316, 0.19100582795503618, 0.18515542857331746, 0.1725523459644459, 0.1774766485524133, 0.15904614397469719, 0.17748738292013333, 0.16645203871338055, 0.18468365470311932, 0.1686373336747633, 0.19938789767029685, 0.17460568571644686, 0.18134887661629184, 0.17061140367438044, 0.19575441093165336, 0.21082129869084, 0.20211640575014567, 0.18413827545939243, 0.19140556594546476, 0.18345116848747856, 0.1881783533854553, 0.19229118690428382, 0.19360618492234338, 0.1845966619741154, 0.18786884774275237, 0.19196186786503722, 0.18195940158894586, 0.1667217831424287, 0.12551311334320558, 0.15186200492140434, 0.22669410492968034, 0.1973291027828652, 0.12984295313772343, 0.12190132670544374, 0.1627461476470764, 0.5707524697508651, 0.4366588121256917, 0.20691242123752196, 0.07343858991395569, 0.10587041875198089, 0.4326321264031052, 0.15342653038142706, 0.47293785760778717, 0.1386553697270425, 0.5201209375051299, 0.16609269613757738, 0.16602084869610845, 0.18358049497702478, 0.17225996977415725, 0.16538930113753814, 0.18092806787071636, 0.17216932837701693, 0.16376476941031948, 0.1778234650735374, 0.06951912473105437, 0.06678130552024975, 0.0800421352111893, 0.074341746457662, 0.07613772288075393, 0.07298768173088233, 0.06630488833657311, 0.0906478827092293, 0.07446833064771641]}, "mutation_prompt": null}
{"id": "229ee2c7-0665-447d-a92d-4cbb0446d776", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate\n            mutation_rate_adjustment = 0.1 * np.exp(-_ / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improved convergence speed by applying dynamic adjustment of mutation rate during optimization iterations.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {"aucs": [0.35762711093264044, 0.3690576429901343, 0.3587246699734421, 0.36435083568093585, 0.37566291610879554, 0.3936055209802801, 0.4126394543354962, 0.43096776677381543, 0.3941259027700539, 0.02456317423525689, 0.04335839322574098, 0.029350017262280592, 0.055654707920559265, 0.02648936830422921, 0.06177518557855943, 0.0786312841074136, 0.013807993639643468, 0.03001955722715577, 0.08207280427202146, 0.09065185324798875, 0.08655531335779942, 0.11504450298252555, 0.10403845174654525, 0.08554810531908719, 0.0867182791441331, 0.09826922913293579, 0.08199768243055428, 0.06611775043607226, 0.06406688483359668, 0.08826352892680134, 0.0659574095005715, 0.08983199579562895, 0.08731963759636419, 0.08258602870489973, 0.0675925535406483, 0.08547733244558675, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.23868683244213318, 0.22102312344892094, 0.2197440818525077, 0.2436661910034752, 0.20994835573913817, 0.22999029080364586, 0.23025149427792668, 0.21284206756298318, 0.21321369119344158, 0.2462983020145827, 0.2389034134003366, 0.23673893412321811, 0.3059553699958534, 0.26729039513040975, 0.25956011885443075, 0.19162494300292132, 0.21561229347054656, 0.15472082230730755, 0.18908477480611674, 0.18174732834444196, 9.999999999998899e-05, 0.16651722517261036, 0.16238618689822215, 0.1915922736349337, 0.11796171863745863, 0.1524031078171758, 0.15351357243396924, 0.138074454300656, 0.1462506670977859, 0.1669179320893841, 0.16783319262995466, 0.1362216515554846, 0.14945894607380183, 0.039198001336645194, 0.09009320022154566, 0.003190124652267534, 0.011075733980328017, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024911811358331315, 0.050342704472354116, 0.0010846210521845423, 0.06934931419313584, 9.999999999998899e-05, 0.000331608021583607, 0.004020303140508941, 0.02845493831033985, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08736417291755139, 0.0840013272620923, 0.11600346616819956, 0.0933892163769906, 0.09317714058495641, 0.09469561685596617, 0.07473306443829042, 0.07413552462460826, 0.0642362550178015, 0.3630123148394354, 0.33968994173854083, 0.3681121672670724, 0.34818833848515773, 0.3836048238062494, 0.35030846497428425, 0.4007954004438776, 0.35632602955739057, 0.3581104255148657, 0.07177161009300037, 0.07090572456252253, 0.09582839065238402, 0.07931075453848135, 0.09247356272707252, 0.09790172522131035, 0.07049407148889875, 0.09216147104853556, 0.09592427908517953, 0.19161223593625398, 0.19504830231884052, 0.20898803619799078, 0.13828837385651682, 0.19616499441961321, 0.21988222989561046, 0.20632278901805645, 0.16088951163309595, 0.15989583563329557, 0.23665704505545893, 0.23296112451958884, 0.25871518409497196, 0.20675292516308708, 0.21339966785306352, 0.22149913510636454, 0.2200123505492555, 0.21130253054342008, 0.2652224078884281, 0.18382224719155316, 0.19100582795503618, 0.18515542857331746, 0.1725523459644459, 0.1774766485524133, 0.15904614397469719, 0.17748738292013333, 0.16645203871338055, 0.18468365470311932, 0.1686373336747633, 0.19938789767029685, 0.17460568571644686, 0.18134887661629184, 0.17061140367438044, 0.19575441093165336, 0.21082129869084, 0.20211640575014567, 0.18413827545939243, 0.19140556594546476, 0.18345116848747856, 0.1881783533854553, 0.19229118690428382, 0.19360618492234338, 0.1845966619741154, 0.18786884774275237, 0.19196186786503722, 0.18195940158894586, 0.1667217831424287, 0.12551311334320558, 0.15186200492140434, 0.22669410492968034, 0.1973291027828652, 0.12984295313772343, 0.12190132670544374, 0.1627461476470764, 0.5707524697508651, 0.4366588121256917, 0.20691242123752196, 0.07343858991395569, 0.10587041875198089, 0.4326321264031052, 0.15342653038142706, 0.47293785760778717, 0.1386553697270425, 0.5201209375051299, 0.16609269613757738, 0.16602084869610845, 0.18358049497702478, 0.17225996977415725, 0.16538930113753814, 0.18092806787071636, 0.17216932837701693, 0.16376476941031948, 0.1778234650735374, 0.06951912473105437, 0.06678130552024975, 0.0800421352111893, 0.074341746457662, 0.07613772288075393, 0.07298768173088233, 0.06630488833657311, 0.0906478827092293, 0.07446833064771641]}, "mutation_prompt": null}
{"id": "b8e5ef4f-123c-4bf6-834e-b3c47b0dfdae", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate\n            mutation_rate_adjustment = 0.1 * np.exp(-_ / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improved convergence speed by applying dynamic adjustment of mutation rate during optimization iterations.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {"aucs": [0.35762711093264044, 0.3690576429901343, 0.3587246699734421, 0.36435083568093585, 0.37566291610879554, 0.3936055209802801, 0.4126394543354962, 0.43096776677381543, 0.3941259027700539, 0.02456317423525689, 0.04335839322574098, 0.029350017262280592, 0.055654707920559265, 0.02648936830422921, 0.06177518557855943, 0.0786312841074136, 0.013807993639643468, 0.03001955722715577, 0.08207280427202146, 0.09065185324798875, 0.08655531335779942, 0.11504450298252555, 0.10403845174654525, 0.08554810531908719, 0.0867182791441331, 0.09826922913293579, 0.08199768243055428, 0.06611775043607226, 0.06406688483359668, 0.08826352892680134, 0.0659574095005715, 0.08983199579562895, 0.08731963759636419, 0.08258602870489973, 0.0675925535406483, 0.08547733244558675, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.23868683244213318, 0.22102312344892094, 0.2197440818525077, 0.2436661910034752, 0.20994835573913817, 0.22999029080364586, 0.23025149427792668, 0.21284206756298318, 0.21321369119344158, 0.2462983020145827, 0.2389034134003366, 0.23673893412321811, 0.3059553699958534, 0.26729039513040975, 0.25956011885443075, 0.19162494300292132, 0.21561229347054656, 0.15472082230730755, 0.18908477480611674, 0.18174732834444196, 9.999999999998899e-05, 0.16651722517261036, 0.16238618689822215, 0.1915922736349337, 0.11796171863745863, 0.1524031078171758, 0.15351357243396924, 0.138074454300656, 0.1462506670977859, 0.1669179320893841, 0.16783319262995466, 0.1362216515554846, 0.14945894607380183, 0.039198001336645194, 0.09009320022154566, 0.003190124652267534, 0.011075733980328017, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024911811358331315, 0.050342704472354116, 0.0010846210521845423, 0.06934931419313584, 9.999999999998899e-05, 0.000331608021583607, 0.004020303140508941, 0.02845493831033985, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08736417291755139, 0.0840013272620923, 0.11600346616819956, 0.0933892163769906, 0.09317714058495641, 0.09469561685596617, 0.07473306443829042, 0.07413552462460826, 0.0642362550178015, 0.3630123148394354, 0.33968994173854083, 0.3681121672670724, 0.34818833848515773, 0.3836048238062494, 0.35030846497428425, 0.4007954004438776, 0.35632602955739057, 0.3581104255148657, 0.07177161009300037, 0.07090572456252253, 0.09582839065238402, 0.07931075453848135, 0.09247356272707252, 0.09790172522131035, 0.07049407148889875, 0.09216147104853556, 0.09592427908517953, 0.19161223593625398, 0.19504830231884052, 0.20898803619799078, 0.13828837385651682, 0.19616499441961321, 0.21988222989561046, 0.20632278901805645, 0.16088951163309595, 0.15989583563329557, 0.23665704505545893, 0.23296112451958884, 0.25871518409497196, 0.20675292516308708, 0.21339966785306352, 0.22149913510636454, 0.2200123505492555, 0.21130253054342008, 0.2652224078884281, 0.18382224719155316, 0.19100582795503618, 0.18515542857331746, 0.1725523459644459, 0.1774766485524133, 0.15904614397469719, 0.17748738292013333, 0.16645203871338055, 0.18468365470311932, 0.1686373336747633, 0.19938789767029685, 0.17460568571644686, 0.18134887661629184, 0.17061140367438044, 0.19575441093165336, 0.21082129869084, 0.20211640575014567, 0.18413827545939243, 0.19140556594546476, 0.18345116848747856, 0.1881783533854553, 0.19229118690428382, 0.19360618492234338, 0.1845966619741154, 0.18786884774275237, 0.19196186786503722, 0.18195940158894586, 0.1667217831424287, 0.12551311334320558, 0.15186200492140434, 0.22669410492968034, 0.1973291027828652, 0.12984295313772343, 0.12190132670544374, 0.1627461476470764, 0.5707524697508651, 0.4366588121256917, 0.20691242123752196, 0.07343858991395569, 0.10587041875198089, 0.4326321264031052, 0.15342653038142706, 0.47293785760778717, 0.1386553697270425, 0.5201209375051299, 0.16609269613757738, 0.16602084869610845, 0.18358049497702478, 0.17225996977415725, 0.16538930113753814, 0.18092806787071636, 0.17216932837701693, 0.16376476941031948, 0.1778234650735374, 0.06951912473105437, 0.06678130552024975, 0.0800421352111893, 0.074341746457662, 0.07613772288075393, 0.07298768173088233, 0.06630488833657311, 0.0906478827092293, 0.07446833064771641]}, "mutation_prompt": null}
{"id": "2926d692-ad1a-4447-80b6-6bb96574219a", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate\n            mutation_rate_adjustment = 0.1 * np.exp(-_ / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improved convergence speed by applying dynamic adjustment of mutation rate during optimization iterations.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {"aucs": [0.35762711093264044, 0.3690576429901343, 0.3587246699734421, 0.36435083568093585, 0.37566291610879554, 0.3936055209802801, 0.4126394543354962, 0.43096776677381543, 0.3941259027700539, 0.02456317423525689, 0.04335839322574098, 0.029350017262280592, 0.055654707920559265, 0.02648936830422921, 0.06177518557855943, 0.0786312841074136, 0.013807993639643468, 0.03001955722715577, 0.08207280427202146, 0.09065185324798875, 0.08655531335779942, 0.11504450298252555, 0.10403845174654525, 0.08554810531908719, 0.0867182791441331, 0.09826922913293579, 0.08199768243055428, 0.06611775043607226, 0.06406688483359668, 0.08826352892680134, 0.0659574095005715, 0.08983199579562895, 0.08731963759636419, 0.08258602870489973, 0.0675925535406483, 0.08547733244558675, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.23868683244213318, 0.22102312344892094, 0.2197440818525077, 0.2436661910034752, 0.20994835573913817, 0.22999029080364586, 0.23025149427792668, 0.21284206756298318, 0.21321369119344158, 0.2462983020145827, 0.2389034134003366, 0.23673893412321811, 0.3059553699958534, 0.26729039513040975, 0.25956011885443075, 0.19162494300292132, 0.21561229347054656, 0.15472082230730755, 0.18908477480611674, 0.18174732834444196, 9.999999999998899e-05, 0.16651722517261036, 0.16238618689822215, 0.1915922736349337, 0.11796171863745863, 0.1524031078171758, 0.15351357243396924, 0.138074454300656, 0.1462506670977859, 0.1669179320893841, 0.16783319262995466, 0.1362216515554846, 0.14945894607380183, 0.039198001336645194, 0.09009320022154566, 0.003190124652267534, 0.011075733980328017, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024911811358331315, 0.050342704472354116, 0.0010846210521845423, 0.06934931419313584, 9.999999999998899e-05, 0.000331608021583607, 0.004020303140508941, 0.02845493831033985, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08736417291755139, 0.0840013272620923, 0.11600346616819956, 0.0933892163769906, 0.09317714058495641, 0.09469561685596617, 0.07473306443829042, 0.07413552462460826, 0.0642362550178015, 0.3630123148394354, 0.33968994173854083, 0.3681121672670724, 0.34818833848515773, 0.3836048238062494, 0.35030846497428425, 0.4007954004438776, 0.35632602955739057, 0.3581104255148657, 0.07177161009300037, 0.07090572456252253, 0.09582839065238402, 0.07931075453848135, 0.09247356272707252, 0.09790172522131035, 0.07049407148889875, 0.09216147104853556, 0.09592427908517953, 0.19161223593625398, 0.19504830231884052, 0.20898803619799078, 0.13828837385651682, 0.19616499441961321, 0.21988222989561046, 0.20632278901805645, 0.16088951163309595, 0.15989583563329557, 0.23665704505545893, 0.23296112451958884, 0.25871518409497196, 0.20675292516308708, 0.21339966785306352, 0.22149913510636454, 0.2200123505492555, 0.21130253054342008, 0.2652224078884281, 0.18382224719155316, 0.19100582795503618, 0.18515542857331746, 0.1725523459644459, 0.1774766485524133, 0.15904614397469719, 0.17748738292013333, 0.16645203871338055, 0.18468365470311932, 0.1686373336747633, 0.19938789767029685, 0.17460568571644686, 0.18134887661629184, 0.17061140367438044, 0.19575441093165336, 0.21082129869084, 0.20211640575014567, 0.18413827545939243, 0.19140556594546476, 0.18345116848747856, 0.1881783533854553, 0.19229118690428382, 0.19360618492234338, 0.1845966619741154, 0.18786884774275237, 0.19196186786503722, 0.18195940158894586, 0.1667217831424287, 0.12551311334320558, 0.15186200492140434, 0.22669410492968034, 0.1973291027828652, 0.12984295313772343, 0.12190132670544374, 0.1627461476470764, 0.5707524697508651, 0.4366588121256917, 0.20691242123752196, 0.07343858991395569, 0.10587041875198089, 0.4326321264031052, 0.15342653038142706, 0.47293785760778717, 0.1386553697270425, 0.5201209375051299, 0.16609269613757738, 0.16602084869610845, 0.18358049497702478, 0.17225996977415725, 0.16538930113753814, 0.18092806787071636, 0.17216932837701693, 0.16376476941031948, 0.1778234650735374, 0.06951912473105437, 0.06678130552024975, 0.0800421352111893, 0.074341746457662, 0.07613772288075393, 0.07298768173088233, 0.06630488833657311, 0.0906478827092293, 0.07446833064771641]}, "mutation_prompt": null}
{"id": "b9f0bc8a-d3cc-497e-b9e5-6f7fdc81f85a", "solution": "import numpy as np\nfrom joblib import Parallel, delayed\n\nclass ParallelHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array(Parallel(n_jobs=-1)(delayed(func)(ind) for ind in population))\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for _ in range(self.budget):\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            mutation_rate_adjustment = 0.1 * np.exp(-_ / self.budget)\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array(Parallel(n_jobs=-1)(delayed(func)(ind) for ind in population))\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "ParallelHybridGA_PSO", "description": "Utilizing a parallel processing approach to update the population and velocities simultaneously for faster convergence speed.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'joblib'\").", "error": "ModuleNotFoundError(\"No module named 'joblib'\")", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {}, "mutation_prompt": null}
{"id": "b389e75f-e032-45d4-b5d2-12752997dd3e", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate\n            mutation_rate_adjustment = 0.1 * np.exp(-_ / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improved convergence speed by applying dynamic adjustment of mutation rate during optimization iterations.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {"aucs": [0.35762711093264044, 0.3690576429901343, 0.3587246699734421, 0.36435083568093585, 0.37566291610879554, 0.3936055209802801, 0.4126394543354962, 0.43096776677381543, 0.3941259027700539, 0.02456317423525689, 0.04335839322574098, 0.029350017262280592, 0.055654707920559265, 0.02648936830422921, 0.06177518557855943, 0.0786312841074136, 0.013807993639643468, 0.03001955722715577, 0.08207280427202146, 0.09065185324798875, 0.08655531335779942, 0.11504450298252555, 0.10403845174654525, 0.08554810531908719, 0.0867182791441331, 0.09826922913293579, 0.08199768243055428, 0.06611775043607226, 0.06406688483359668, 0.08826352892680134, 0.0659574095005715, 0.08983199579562895, 0.08731963759636419, 0.08258602870489973, 0.0675925535406483, 0.08547733244558675, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.23868683244213318, 0.22102312344892094, 0.2197440818525077, 0.2436661910034752, 0.20994835573913817, 0.22999029080364586, 0.23025149427792668, 0.21284206756298318, 0.21321369119344158, 0.2462983020145827, 0.2389034134003366, 0.23673893412321811, 0.3059553699958534, 0.26729039513040975, 0.25956011885443075, 0.19162494300292132, 0.21561229347054656, 0.15472082230730755, 0.18908477480611674, 0.18174732834444196, 9.999999999998899e-05, 0.16651722517261036, 0.16238618689822215, 0.1915922736349337, 0.11796171863745863, 0.1524031078171758, 0.15351357243396924, 0.138074454300656, 0.1462506670977859, 0.1669179320893841, 0.16783319262995466, 0.1362216515554846, 0.14945894607380183, 0.039198001336645194, 0.09009320022154566, 0.003190124652267534, 0.011075733980328017, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024911811358331315, 0.050342704472354116, 0.0010846210521845423, 0.06934931419313584, 9.999999999998899e-05, 0.000331608021583607, 0.004020303140508941, 0.02845493831033985, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08736417291755139, 0.0840013272620923, 0.11600346616819956, 0.0933892163769906, 0.09317714058495641, 0.09469561685596617, 0.07473306443829042, 0.07413552462460826, 0.0642362550178015, 0.3630123148394354, 0.33968994173854083, 0.3681121672670724, 0.34818833848515773, 0.3836048238062494, 0.35030846497428425, 0.4007954004438776, 0.35632602955739057, 0.3581104255148657, 0.07177161009300037, 0.07090572456252253, 0.09582839065238402, 0.07931075453848135, 0.09247356272707252, 0.09790172522131035, 0.07049407148889875, 0.09216147104853556, 0.09592427908517953, 0.19161223593625398, 0.19504830231884052, 0.20898803619799078, 0.13828837385651682, 0.19616499441961321, 0.21988222989561046, 0.20632278901805645, 0.16088951163309595, 0.15989583563329557, 0.23665704505545893, 0.23296112451958884, 0.25871518409497196, 0.20675292516308708, 0.21339966785306352, 0.22149913510636454, 0.2200123505492555, 0.21130253054342008, 0.2652224078884281, 0.18382224719155316, 0.19100582795503618, 0.18515542857331746, 0.1725523459644459, 0.1774766485524133, 0.15904614397469719, 0.17748738292013333, 0.16645203871338055, 0.18468365470311932, 0.1686373336747633, 0.19938789767029685, 0.17460568571644686, 0.18134887661629184, 0.17061140367438044, 0.19575441093165336, 0.21082129869084, 0.20211640575014567, 0.18413827545939243, 0.19140556594546476, 0.18345116848747856, 0.1881783533854553, 0.19229118690428382, 0.19360618492234338, 0.1845966619741154, 0.18786884774275237, 0.19196186786503722, 0.18195940158894586, 0.1667217831424287, 0.12551311334320558, 0.15186200492140434, 0.22669410492968034, 0.1973291027828652, 0.12984295313772343, 0.12190132670544374, 0.1627461476470764, 0.5707524697508651, 0.4366588121256917, 0.20691242123752196, 0.07343858991395569, 0.10587041875198089, 0.4326321264031052, 0.15342653038142706, 0.47293785760778717, 0.1386553697270425, 0.5201209375051299, 0.16609269613757738, 0.16602084869610845, 0.18358049497702478, 0.17225996977415725, 0.16538930113753814, 0.18092806787071636, 0.17216932837701693, 0.16376476941031948, 0.1778234650735374, 0.06951912473105437, 0.06678130552024975, 0.0800421352111893, 0.074341746457662, 0.07613772288075393, 0.07298768173088233, 0.06630488833657311, 0.0906478827092293, 0.07446833064771641]}, "mutation_prompt": null}
{"id": "d0cf9148-936b-4f95-b750-cd4e1ef24984", "solution": "import numpy as np\n\nclass MultiSwarmHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, num_swarms=5, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.num_swarms = num_swarms\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.population_size, self.dim)) for _ in range(self.num_swarms)]\n        global_bests = [swarm[np.argmin([func(ind) for ind in swarm])] for swarm in swarms]\n        velocities = [np.zeros((self.population_size, self.dim)) for _ in range(self.num_swarms)]\n\n        mutation_rate_adjustment = 0.1\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                best_individual = swarms[i][np.argmin([func(ind) for ind in swarms[i]])]\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_individual - swarms[i]) + self.social_weight * np.random.rand() * (global_bests[i] - swarms[i])\n                swarms[i] += velocities[i]\n                mutation_rate_adjustment = 0.1 * np.exp(-_ / self.budget)\n                mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n                swarms[i] = swarms[i] + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n\n                if func(swarms[i][np.argmin([func(ind) for ind in swarms[i]])]) < func(global_bests[i]):\n                    global_bests[i] = swarms[i][np.argmin([func(ind) for ind in swarms[i]])]\n\n        return global_bests[np.argmin([func(ind) for ind in global_bests])]", "name": "MultiSwarmHybridGA_PSO", "description": "Utilize a multi-swarm approach to enhance exploration and exploitation, improving convergence speed.", "configspace": "", "generation": 69, "fitness": 0.14340250028509247, "feedback": "The algorithm MultiSwarmHybridGA_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.18.", "error": "", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {"aucs": [0.23856279267906577, 0.25553675353469596, 0.236137633209889, 0.2271103484009218, 0.21975376065443997, 0.23875757529070274, 0.24918447227434593, 0.2145990244236512, 0.2285644265145621, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06285303993748204, 0.054699230044735536, 0.060420140337179684, 0.062189500617226945, 0.0559296516519604, 0.06728999042071826, 0.05385559979108634, 0.054487346969792294, 0.06790140953974022, 0.04929969982018301, 0.049510173709881755, 0.05145224157144235, 0.05435382739041328, 0.042984134493095016, 0.04223889543979509, 0.04783331540469282, 0.06150355758792736, 0.07373257539544542, 0.9427780518862139, 0.9573839359864381, 0.9568714508365466, 0.8905848325576956, 0.9264212557144124, 0.9422484358233701, 0.9576947845455808, 0.9067686390678277, 0.9569716014922875, 0.10889641546827566, 0.10057712886212944, 0.14369782196611292, 0.09862435843818673, 0.10988884692352308, 0.10032104693373367, 0.1032049370899677, 0.09242183509393453, 0.1525165999141751, 0.18070361987121564, 0.16412994605538422, 0.19943012837284058, 0.1594257226059379, 0.15636452610905271, 0.1869560328797092, 0.13272598462479068, 0.15113206944826274, 0.1706723360694501, 0.06818346933323316, 0.08689903878690197, 0.07317386629142042, 0.049311010453310544, 0.057736637955670855, 0.03648167041223027, 0.05244945862991013, 0.06774575739780297, 0.07367222909752436, 0.04960148794537855, 0.03623195379609656, 0.07583829172837286, 0.053950208159537216, 0.06743578006452411, 0.08251690739796991, 0.053520787369224276, 0.050653630008296924, 0.06574917580119677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023962111943521824, 9.999999999998899e-05, 0.006123306871940959, 0.07781845807220311, 0.06708318482591347, 0.045147594568216265, 0.09257910845418915, 0.02098850193787072, 0.037298740336537795, 0.04798330863069733, 0.06760366548311247, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01346967577450775, 0.01003838750242425, 0.02047394763802135, 0.010423338817198924, 0.008064899551399662, 0.014501035484046798, 0.007077939411323175, 0.03747702788033036, 0.012367493061005597, 0.2424255743104703, 0.25648185428483306, 0.24275478268540396, 0.21351585869155065, 0.2735743662543013, 0.2543061435471352, 0.2583190939498491, 0.23761547914343484, 0.25446575027487583, 0.05015262710256829, 0.05266182244793016, 0.05637966289399332, 0.05900017953477543, 0.05475289509971604, 0.0825463055335629, 0.05916335733167888, 0.060861425667993574, 0.06202035013390028, 0.14612164342278955, 0.15060839800828618, 0.14577732643979435, 0.15452575825246695, 0.17679516899971315, 0.15755303190111025, 0.1275545849194798, 0.1139628683134728, 0.10285955091578558, 0.1801712423430294, 0.1513419027863594, 0.2113465320152519, 0.19881900775578065, 0.1949756882290783, 0.19953047548240344, 0.15772540119289646, 0.19566360869547794, 0.2004200824568697, 0.12677817313705886, 0.11996641172204525, 0.12189142527388808, 0.13891689403326268, 0.16533576748717982, 0.1402907246997871, 0.14119085372467666, 0.15657971481352562, 0.12179658610141197, 0.1455779579999522, 0.16043892556876926, 0.15790461717677895, 0.1494250665236968, 0.19091898452347755, 0.17854544177203935, 0.1725561112580739, 0.1632964400271516, 0.18370887458158014, 0.15333704457920594, 0.1617463521424215, 0.17808146889845122, 0.15134554565934377, 0.16485031660332294, 0.16220379081559455, 0.15070659820629262, 0.1604048704211094, 0.1755110240558614, 0.13562310069033479, 0.16321219325113945, 0.1643735937667078, 0.1559056609866588, 0.1641397535389455, 0.16319310031683254, 0.16067493733955618, 0.23883990164104985, 0.16493570943196978, 0.19228991039501908, 0.1717783829514541, 0.2765585867223447, 0.22166479284137308, 0.12485918428063214, 0.1600366876128303, 0.16556252892295886, 0.20150573907051483, 0.17895007867445656, 0.16837064813786506, 0.18557804420351098, 0.15701115477040917, 0.16326770549378566, 0.16590368337887829, 0.16236740008737616, 0.16567633202531673, 0.1753961697598313, 0.18057896185855682, 0.05158365771499507, 0.05135714908957634, 0.07627176988543616, 0.05453605419864238, 0.06619945514385506, 0.05557823367821524, 0.06407416080837725, 0.06575330961626946, 0.05845589860429756]}, "mutation_prompt": null}
{"id": "906dbe3e-f505-4471-a722-22c7e9f22a57", "solution": "import numpy as np\n\nclass AdaptiveMutHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        for i in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate based on fitness\n            mutation_rate_adjustment = 0.1 + 0.4 / (1 + np.exp(-0.1 * (np.mean(fitness) - np.min(fitness))))  # Sigmoid-based mutation rate adjustment\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "AdaptiveMutHybridGA_PSO", "description": "Utilizing an adaptive mutation mechanism based on fitness to enhance exploration-exploitation balance and accelerate convergence speed.", "configspace": "", "generation": 70, "fitness": 0.16237767623033164, "feedback": "The algorithm AdaptiveMutHybridGA_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {"aucs": [0.3421518307720325, 0.3151734566165374, 0.3664065865613191, 0.3054072835022228, 0.3095543482762402, 0.3087934765911745, 0.3000158655216778, 0.31605819782505284, 0.3121363160567947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07962802193775464, 0.06421902487872899, 0.07625248890691105, 0.06729508517337635, 0.08008761401287101, 0.06421774822831061, 0.08011022835320969, 0.07692731443361422, 0.10064961991629207, 0.06424762289486752, 0.08500649584337894, 0.07813832183301728, 0.05556325304666865, 0.05810711034218219, 0.08868451238122199, 0.07462883216908889, 0.06646157524573992, 0.07249971651223563, 0.9907519303260174, 0.9771178354021668, 0.9905037463480548, 0.9804069216242702, 0.9861227428825345, 0.9686163623507872, 0.9908726866551069, 0.9774145777598545, 0.9848052290736553, 0.14723874913096702, 0.13722902239587642, 0.14931422872365308, 0.1651669641470207, 0.15370072549658276, 0.14398703433938786, 0.1606884017329563, 0.18939341567360268, 0.14410839179753343, 0.21521453326663542, 0.18995930234299963, 0.23398530361628778, 0.19278104844776334, 0.2537671481414885, 0.20319916526107684, 0.1857778279069855, 0.20617637680029244, 0.20727063885669117, 0.0971167850289194, 0.07011740387113241, 0.09742290925690356, 0.00013888503600467672, 0.06902662656612502, 0.09999733880246675, 0.11736341277134887, 0.08880488084335625, 0.10033801467136305, 0.07023303936358538, 0.09742055011370576, 0.08475171624767441, 0.10332881878730327, 0.08174981511500135, 0.09295245030878974, 0.09223693049298831, 0.03168689430161409, 0.07793826538051385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033731477143773, 0.02374034417244708, 0.03578218290291446, 0.03060625891373492, 0.03345945498456715, 0.02929711162462212, 0.03184021905228951, 0.025337518570131556, 0.02693058580268748, 0.3327577415410655, 0.29314908686686336, 0.30246171525921395, 0.32384621216612075, 0.30571710452234624, 0.3195698682112941, 0.30971417350452424, 0.30508040307837503, 0.3243485989228365, 0.0918919477574145, 0.08116459386319552, 0.07365276599108639, 0.07235184355560087, 0.0639851079949556, 0.06680223717491385, 0.07267886708032623, 0.07223660860404257, 0.06285408372410506, 0.1121423350599502, 0.13228325820805809, 0.12548707254626823, 0.12690402845327242, 0.14153154123932576, 0.13717767935866, 0.11710363749079256, 0.12145398520955497, 0.1317096101767029, 0.2212213531243047, 0.19929443000292868, 0.21958457662859132, 0.21942702273120407, 0.20564624100669593, 0.19952846499574928, 0.21159379999289263, 0.20449332576066614, 0.22734083528533988, 0.1677570648017036, 0.14705518504084192, 0.14914613501926233, 0.1493364440029321, 0.13919770246588892, 0.12441852840633605, 0.1595947693907679, 0.1647216024919842, 0.14918768246669056, 0.17562487806714688, 0.17334709181844432, 0.16816647111472305, 0.1996484160956815, 0.1552514547174092, 0.18631101546721884, 0.19227759963768776, 0.1547157164063181, 0.16886195556671268, 0.18764525105022156, 0.17029383035351187, 0.17285864125072947, 0.164464434959951, 0.20098247971276495, 0.17098997054943355, 0.17344582373798367, 0.17482911856958494, 0.20339818580250668, 0.21343290459758768, 0.162519659671861, 0.1490118086738128, 0.3565442545752002, 0.1628033014918845, 0.4150050329242838, 0.1657866103328235, 0.13861845926244187, 0.379772816568543, 0.15362110885273672, 0.1901209064230781, 0.1857313140134278, 0.1383020498064479, 0.11676591123766777, 0.19926875487711193, 0.16348944312902514, 0.1568720329884138, 0.27718299940099256, 0.17139657900095406, 0.17677232019302047, 0.17303513720336738, 0.19449403088304607, 0.1734360036655076, 0.16077189237618272, 0.16573655071577342, 0.17682906804534337, 0.17376373209536233, 0.06607319957095392, 0.06729029254780927, 0.06300463119265365, 0.0670463745579758, 0.0740681444785194, 0.07225525518244214, 0.0776271242677622, 0.07463280104245607, 0.06783980539276091]}, "mutation_prompt": null}
{"id": "d8b19bf6-2cf7-45ce-8ec5-4b06a5077e5d", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate\n            mutation_rate_adjustment = 0.1 * np.exp(-_ / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improved convergence speed by applying dynamic adjustment of mutation rate during optimization iterations.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {"aucs": [0.35762711093264044, 0.3690576429901343, 0.3587246699734421, 0.36435083568093585, 0.37566291610879554, 0.3936055209802801, 0.4126394543354962, 0.43096776677381543, 0.3941259027700539, 0.02456317423525689, 0.04335839322574098, 0.029350017262280592, 0.055654707920559265, 0.02648936830422921, 0.06177518557855943, 0.0786312841074136, 0.013807993639643468, 0.03001955722715577, 0.08207280427202146, 0.09065185324798875, 0.08655531335779942, 0.11504450298252555, 0.10403845174654525, 0.08554810531908719, 0.0867182791441331, 0.09826922913293579, 0.08199768243055428, 0.06611775043607226, 0.06406688483359668, 0.08826352892680134, 0.0659574095005715, 0.08983199579562895, 0.08731963759636419, 0.08258602870489973, 0.0675925535406483, 0.08547733244558675, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.23868683244213318, 0.22102312344892094, 0.2197440818525077, 0.2436661910034752, 0.20994835573913817, 0.22999029080364586, 0.23025149427792668, 0.21284206756298318, 0.21321369119344158, 0.2462983020145827, 0.2389034134003366, 0.23673893412321811, 0.3059553699958534, 0.26729039513040975, 0.25956011885443075, 0.19162494300292132, 0.21561229347054656, 0.15472082230730755, 0.18908477480611674, 0.18174732834444196, 9.999999999998899e-05, 0.16651722517261036, 0.16238618689822215, 0.1915922736349337, 0.11796171863745863, 0.1524031078171758, 0.15351357243396924, 0.138074454300656, 0.1462506670977859, 0.1669179320893841, 0.16783319262995466, 0.1362216515554846, 0.14945894607380183, 0.039198001336645194, 0.09009320022154566, 0.003190124652267534, 0.011075733980328017, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024911811358331315, 0.050342704472354116, 0.0010846210521845423, 0.06934931419313584, 9.999999999998899e-05, 0.000331608021583607, 0.004020303140508941, 0.02845493831033985, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08736417291755139, 0.0840013272620923, 0.11600346616819956, 0.0933892163769906, 0.09317714058495641, 0.09469561685596617, 0.07473306443829042, 0.07413552462460826, 0.0642362550178015, 0.3630123148394354, 0.33968994173854083, 0.3681121672670724, 0.34818833848515773, 0.3836048238062494, 0.35030846497428425, 0.4007954004438776, 0.35632602955739057, 0.3581104255148657, 0.07177161009300037, 0.07090572456252253, 0.09582839065238402, 0.07931075453848135, 0.09247356272707252, 0.09790172522131035, 0.07049407148889875, 0.09216147104853556, 0.09592427908517953, 0.19161223593625398, 0.19504830231884052, 0.20898803619799078, 0.13828837385651682, 0.19616499441961321, 0.21988222989561046, 0.20632278901805645, 0.16088951163309595, 0.15989583563329557, 0.23665704505545893, 0.23296112451958884, 0.25871518409497196, 0.20675292516308708, 0.21339966785306352, 0.22149913510636454, 0.2200123505492555, 0.21130253054342008, 0.2652224078884281, 0.18382224719155316, 0.19100582795503618, 0.18515542857331746, 0.1725523459644459, 0.1774766485524133, 0.15904614397469719, 0.17748738292013333, 0.16645203871338055, 0.18468365470311932, 0.1686373336747633, 0.19938789767029685, 0.17460568571644686, 0.18134887661629184, 0.17061140367438044, 0.19575441093165336, 0.21082129869084, 0.20211640575014567, 0.18413827545939243, 0.19140556594546476, 0.18345116848747856, 0.1881783533854553, 0.19229118690428382, 0.19360618492234338, 0.1845966619741154, 0.18786884774275237, 0.19196186786503722, 0.18195940158894586, 0.1667217831424287, 0.12551311334320558, 0.15186200492140434, 0.22669410492968034, 0.1973291027828652, 0.12984295313772343, 0.12190132670544374, 0.1627461476470764, 0.5707524697508651, 0.4366588121256917, 0.20691242123752196, 0.07343858991395569, 0.10587041875198089, 0.4326321264031052, 0.15342653038142706, 0.47293785760778717, 0.1386553697270425, 0.5201209375051299, 0.16609269613757738, 0.16602084869610845, 0.18358049497702478, 0.17225996977415725, 0.16538930113753814, 0.18092806787071636, 0.17216932837701693, 0.16376476941031948, 0.1778234650735374, 0.06951912473105437, 0.06678130552024975, 0.0800421352111893, 0.074341746457662, 0.07613772288075393, 0.07298768173088233, 0.06630488833657311, 0.0906478827092293, 0.07446833064771641]}, "mutation_prompt": null}
{"id": "876e6c9d-0ec6-4fad-af50-d3726322f88f", "solution": "import numpy as np\n\nclass HybridGA_PSO_Elitism:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, elitism_ratio=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.elitism_ratio = elitism_ratio\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate\n            mutation_rate_adjustment = 0.1 * np.exp(-_ / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n            \n            # Elitism: Retain top individuals\n            num_elites = int(self.elitism_ratio * self.population_size)\n            elite_idx = np.argsort(fitness)[:num_elites]\n            population[elite_idx] = population[elite_idx]\n\n        return global_best", "name": "HybridGA_PSO_Elitism", "description": "Introducing elitism to retain top individuals across iterations for enhanced convergence speed.", "configspace": "", "generation": 72, "fitness": 0.1909936413786824, "feedback": "The algorithm HybridGA_PSO_Elitism got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {"aucs": [0.35762711093264044, 0.3690576429901343, 0.3587246699734421, 0.36435083568093585, 0.37566291610879554, 0.3936055209802801, 0.4126394543354962, 0.43096776677381543, 0.3941259027700539, 0.02456317423525689, 0.04335839322574098, 0.029350017262280592, 0.055654707920559265, 0.02648936830422921, 0.06177518557855943, 0.0786312841074136, 0.013807993639643468, 0.03001955722715577, 0.08207280427202146, 0.09065185324798875, 0.08655531335779942, 0.11504450298252555, 0.10403845174654525, 0.08554810531908719, 0.0867182791441331, 0.09826922913293579, 0.08199768243055428, 0.06611775043607226, 0.06406688483359668, 0.08826352892680134, 0.0659574095005715, 0.08983199579562895, 0.08731963759636419, 0.08258602870489973, 0.0675925535406483, 0.08547733244558675, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.23868683244213318, 0.22102312344892094, 0.2197440818525077, 0.2436661910034752, 0.20994835573913817, 0.22999029080364586, 0.23025149427792668, 0.21284206756298318, 0.21321369119344158, 0.2462983020145827, 0.2389034134003366, 0.23673893412321811, 0.3059553699958534, 0.26729039513040975, 0.25956011885443075, 0.19162494300292132, 0.21561229347054656, 0.15472082230730755, 0.18908477480611674, 0.18174732834444196, 9.999999999998899e-05, 0.16651722517261036, 0.16238618689822215, 0.1915922736349337, 0.11796171863745863, 0.1524031078171758, 0.15351357243396924, 0.138074454300656, 0.1462506670977859, 0.1669179320893841, 0.16783319262995466, 0.1362216515554846, 0.14945894607380183, 0.039198001336645194, 0.09009320022154566, 0.003190124652267534, 0.011075733980328017, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024911811358331315, 0.050342704472354116, 0.0010846210521845423, 0.06934931419313584, 9.999999999998899e-05, 0.000331608021583607, 0.004020303140508941, 0.02845493831033985, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08736417291755139, 0.0840013272620923, 0.11600346616819956, 0.0933892163769906, 0.09317714058495641, 0.09469561685596617, 0.07473306443829042, 0.07413552462460826, 0.0642362550178015, 0.3630123148394354, 0.33968994173854083, 0.3681121672670724, 0.34818833848515773, 0.3836048238062494, 0.35030846497428425, 0.4007954004438776, 0.35632602955739057, 0.3581104255148657, 0.07177161009300037, 0.07090572456252253, 0.09582839065238402, 0.07931075453848135, 0.09247356272707252, 0.09790172522131035, 0.07049407148889875, 0.09216147104853556, 0.09592427908517953, 0.19161223593625398, 0.19504830231884052, 0.20898803619799078, 0.13828837385651682, 0.19616499441961321, 0.21988222989561046, 0.20632278901805645, 0.16088951163309595, 0.15989583563329557, 0.23665704505545893, 0.23296112451958884, 0.25871518409497196, 0.20675292516308708, 0.21339966785306352, 0.22149913510636454, 0.2200123505492555, 0.21130253054342008, 0.2652224078884281, 0.18382224719155316, 0.19100582795503618, 0.18515542857331746, 0.1725523459644459, 0.1774766485524133, 0.15904614397469719, 0.17748738292013333, 0.16645203871338055, 0.18468365470311932, 0.1686373336747633, 0.19938789767029685, 0.17460568571644686, 0.18134887661629184, 0.17061140367438044, 0.19575441093165336, 0.21082129869084, 0.20211640575014567, 0.18413827545939243, 0.19140556594546476, 0.18345116848747856, 0.1881783533854553, 0.19229118690428382, 0.19360618492234338, 0.1845966619741154, 0.18786884774275237, 0.19196186786503722, 0.18195940158894586, 0.1667217831424287, 0.12551311334320558, 0.15186200492140434, 0.22669410492968034, 0.1973291027828652, 0.12984295313772343, 0.12190132670544374, 0.1627461476470764, 0.5707524697508651, 0.4366588121256917, 0.20691242123752196, 0.07343858991395569, 0.10587041875198089, 0.4326321264031052, 0.15342653038142706, 0.47293785760778717, 0.1386553697270425, 0.5201209375051299, 0.16609269613757738, 0.16602084869610845, 0.18358049497702478, 0.17225996977415725, 0.16538930113753814, 0.18092806787071636, 0.17216932837701693, 0.16376476941031948, 0.1778234650735374, 0.06951912473105437, 0.06678130552024975, 0.0800421352111893, 0.074341746457662, 0.07613772288075393, 0.07298768173088233, 0.06630488833657311, 0.0906478827092293, 0.07446833064771641]}, "mutation_prompt": null}
{"id": "c6d7b86c-2280-4288-b1c0-5c18b158b630", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate\n            mutation_rate_adjustment = 0.1 * np.exp(-_ / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improved convergence speed by applying dynamic adjustment of mutation rate during optimization iterations.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {"aucs": [0.35762711093264044, 0.3690576429901343, 0.3587246699734421, 0.36435083568093585, 0.37566291610879554, 0.3936055209802801, 0.4126394543354962, 0.43096776677381543, 0.3941259027700539, 0.02456317423525689, 0.04335839322574098, 0.029350017262280592, 0.055654707920559265, 0.02648936830422921, 0.06177518557855943, 0.0786312841074136, 0.013807993639643468, 0.03001955722715577, 0.08207280427202146, 0.09065185324798875, 0.08655531335779942, 0.11504450298252555, 0.10403845174654525, 0.08554810531908719, 0.0867182791441331, 0.09826922913293579, 0.08199768243055428, 0.06611775043607226, 0.06406688483359668, 0.08826352892680134, 0.0659574095005715, 0.08983199579562895, 0.08731963759636419, 0.08258602870489973, 0.0675925535406483, 0.08547733244558675, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.23868683244213318, 0.22102312344892094, 0.2197440818525077, 0.2436661910034752, 0.20994835573913817, 0.22999029080364586, 0.23025149427792668, 0.21284206756298318, 0.21321369119344158, 0.2462983020145827, 0.2389034134003366, 0.23673893412321811, 0.3059553699958534, 0.26729039513040975, 0.25956011885443075, 0.19162494300292132, 0.21561229347054656, 0.15472082230730755, 0.18908477480611674, 0.18174732834444196, 9.999999999998899e-05, 0.16651722517261036, 0.16238618689822215, 0.1915922736349337, 0.11796171863745863, 0.1524031078171758, 0.15351357243396924, 0.138074454300656, 0.1462506670977859, 0.1669179320893841, 0.16783319262995466, 0.1362216515554846, 0.14945894607380183, 0.039198001336645194, 0.09009320022154566, 0.003190124652267534, 0.011075733980328017, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024911811358331315, 0.050342704472354116, 0.0010846210521845423, 0.06934931419313584, 9.999999999998899e-05, 0.000331608021583607, 0.004020303140508941, 0.02845493831033985, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08736417291755139, 0.0840013272620923, 0.11600346616819956, 0.0933892163769906, 0.09317714058495641, 0.09469561685596617, 0.07473306443829042, 0.07413552462460826, 0.0642362550178015, 0.3630123148394354, 0.33968994173854083, 0.3681121672670724, 0.34818833848515773, 0.3836048238062494, 0.35030846497428425, 0.4007954004438776, 0.35632602955739057, 0.3581104255148657, 0.07177161009300037, 0.07090572456252253, 0.09582839065238402, 0.07931075453848135, 0.09247356272707252, 0.09790172522131035, 0.07049407148889875, 0.09216147104853556, 0.09592427908517953, 0.19161223593625398, 0.19504830231884052, 0.20898803619799078, 0.13828837385651682, 0.19616499441961321, 0.21988222989561046, 0.20632278901805645, 0.16088951163309595, 0.15989583563329557, 0.23665704505545893, 0.23296112451958884, 0.25871518409497196, 0.20675292516308708, 0.21339966785306352, 0.22149913510636454, 0.2200123505492555, 0.21130253054342008, 0.2652224078884281, 0.18382224719155316, 0.19100582795503618, 0.18515542857331746, 0.1725523459644459, 0.1774766485524133, 0.15904614397469719, 0.17748738292013333, 0.16645203871338055, 0.18468365470311932, 0.1686373336747633, 0.19938789767029685, 0.17460568571644686, 0.18134887661629184, 0.17061140367438044, 0.19575441093165336, 0.21082129869084, 0.20211640575014567, 0.18413827545939243, 0.19140556594546476, 0.18345116848747856, 0.1881783533854553, 0.19229118690428382, 0.19360618492234338, 0.1845966619741154, 0.18786884774275237, 0.19196186786503722, 0.18195940158894586, 0.1667217831424287, 0.12551311334320558, 0.15186200492140434, 0.22669410492968034, 0.1973291027828652, 0.12984295313772343, 0.12190132670544374, 0.1627461476470764, 0.5707524697508651, 0.4366588121256917, 0.20691242123752196, 0.07343858991395569, 0.10587041875198089, 0.4326321264031052, 0.15342653038142706, 0.47293785760778717, 0.1386553697270425, 0.5201209375051299, 0.16609269613757738, 0.16602084869610845, 0.18358049497702478, 0.17225996977415725, 0.16538930113753814, 0.18092806787071636, 0.17216932837701693, 0.16376476941031948, 0.1778234650735374, 0.06951912473105437, 0.06678130552024975, 0.0800421352111893, 0.074341746457662, 0.07613772288075393, 0.07298768173088233, 0.06630488833657311, 0.0906478827092293, 0.07446833064771641]}, "mutation_prompt": null}
{"id": "f264f7b5-5354-4ca7-b061-23a7d35f30f1", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate\n            mutation_rate_adjustment = 0.1 * np.exp(-_ / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improved convergence speed by applying dynamic adjustment of mutation rate during optimization iterations.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {"aucs": [0.35762711093264044, 0.3690576429901343, 0.3587246699734421, 0.36435083568093585, 0.37566291610879554, 0.3936055209802801, 0.4126394543354962, 0.43096776677381543, 0.3941259027700539, 0.02456317423525689, 0.04335839322574098, 0.029350017262280592, 0.055654707920559265, 0.02648936830422921, 0.06177518557855943, 0.0786312841074136, 0.013807993639643468, 0.03001955722715577, 0.08207280427202146, 0.09065185324798875, 0.08655531335779942, 0.11504450298252555, 0.10403845174654525, 0.08554810531908719, 0.0867182791441331, 0.09826922913293579, 0.08199768243055428, 0.06611775043607226, 0.06406688483359668, 0.08826352892680134, 0.0659574095005715, 0.08983199579562895, 0.08731963759636419, 0.08258602870489973, 0.0675925535406483, 0.08547733244558675, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.23868683244213318, 0.22102312344892094, 0.2197440818525077, 0.2436661910034752, 0.20994835573913817, 0.22999029080364586, 0.23025149427792668, 0.21284206756298318, 0.21321369119344158, 0.2462983020145827, 0.2389034134003366, 0.23673893412321811, 0.3059553699958534, 0.26729039513040975, 0.25956011885443075, 0.19162494300292132, 0.21561229347054656, 0.15472082230730755, 0.18908477480611674, 0.18174732834444196, 9.999999999998899e-05, 0.16651722517261036, 0.16238618689822215, 0.1915922736349337, 0.11796171863745863, 0.1524031078171758, 0.15351357243396924, 0.138074454300656, 0.1462506670977859, 0.1669179320893841, 0.16783319262995466, 0.1362216515554846, 0.14945894607380183, 0.039198001336645194, 0.09009320022154566, 0.003190124652267534, 0.011075733980328017, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024911811358331315, 0.050342704472354116, 0.0010846210521845423, 0.06934931419313584, 9.999999999998899e-05, 0.000331608021583607, 0.004020303140508941, 0.02845493831033985, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08736417291755139, 0.0840013272620923, 0.11600346616819956, 0.0933892163769906, 0.09317714058495641, 0.09469561685596617, 0.07473306443829042, 0.07413552462460826, 0.0642362550178015, 0.3630123148394354, 0.33968994173854083, 0.3681121672670724, 0.34818833848515773, 0.3836048238062494, 0.35030846497428425, 0.4007954004438776, 0.35632602955739057, 0.3581104255148657, 0.07177161009300037, 0.07090572456252253, 0.09582839065238402, 0.07931075453848135, 0.09247356272707252, 0.09790172522131035, 0.07049407148889875, 0.09216147104853556, 0.09592427908517953, 0.19161223593625398, 0.19504830231884052, 0.20898803619799078, 0.13828837385651682, 0.19616499441961321, 0.21988222989561046, 0.20632278901805645, 0.16088951163309595, 0.15989583563329557, 0.23665704505545893, 0.23296112451958884, 0.25871518409497196, 0.20675292516308708, 0.21339966785306352, 0.22149913510636454, 0.2200123505492555, 0.21130253054342008, 0.2652224078884281, 0.18382224719155316, 0.19100582795503618, 0.18515542857331746, 0.1725523459644459, 0.1774766485524133, 0.15904614397469719, 0.17748738292013333, 0.16645203871338055, 0.18468365470311932, 0.1686373336747633, 0.19938789767029685, 0.17460568571644686, 0.18134887661629184, 0.17061140367438044, 0.19575441093165336, 0.21082129869084, 0.20211640575014567, 0.18413827545939243, 0.19140556594546476, 0.18345116848747856, 0.1881783533854553, 0.19229118690428382, 0.19360618492234338, 0.1845966619741154, 0.18786884774275237, 0.19196186786503722, 0.18195940158894586, 0.1667217831424287, 0.12551311334320558, 0.15186200492140434, 0.22669410492968034, 0.1973291027828652, 0.12984295313772343, 0.12190132670544374, 0.1627461476470764, 0.5707524697508651, 0.4366588121256917, 0.20691242123752196, 0.07343858991395569, 0.10587041875198089, 0.4326321264031052, 0.15342653038142706, 0.47293785760778717, 0.1386553697270425, 0.5201209375051299, 0.16609269613757738, 0.16602084869610845, 0.18358049497702478, 0.17225996977415725, 0.16538930113753814, 0.18092806787071636, 0.17216932837701693, 0.16376476941031948, 0.1778234650735374, 0.06951912473105437, 0.06678130552024975, 0.0800421352111893, 0.074341746457662, 0.07613772288075393, 0.07298768173088233, 0.06630488833657311, 0.0906478827092293, 0.07446833064771641]}, "mutation_prompt": null}
{"id": "47968e2b-c677-422c-968f-5a5a0d15fc36", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate\n            mutation_rate_adjustment = 0.1 * np.exp(-_ / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improved convergence speed by applying dynamic adjustment of mutation rate during optimization iterations.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {"aucs": [0.35762711093264044, 0.3690576429901343, 0.3587246699734421, 0.36435083568093585, 0.37566291610879554, 0.3936055209802801, 0.4126394543354962, 0.43096776677381543, 0.3941259027700539, 0.02456317423525689, 0.04335839322574098, 0.029350017262280592, 0.055654707920559265, 0.02648936830422921, 0.06177518557855943, 0.0786312841074136, 0.013807993639643468, 0.03001955722715577, 0.08207280427202146, 0.09065185324798875, 0.08655531335779942, 0.11504450298252555, 0.10403845174654525, 0.08554810531908719, 0.0867182791441331, 0.09826922913293579, 0.08199768243055428, 0.06611775043607226, 0.06406688483359668, 0.08826352892680134, 0.0659574095005715, 0.08983199579562895, 0.08731963759636419, 0.08258602870489973, 0.0675925535406483, 0.08547733244558675, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.23868683244213318, 0.22102312344892094, 0.2197440818525077, 0.2436661910034752, 0.20994835573913817, 0.22999029080364586, 0.23025149427792668, 0.21284206756298318, 0.21321369119344158, 0.2462983020145827, 0.2389034134003366, 0.23673893412321811, 0.3059553699958534, 0.26729039513040975, 0.25956011885443075, 0.19162494300292132, 0.21561229347054656, 0.15472082230730755, 0.18908477480611674, 0.18174732834444196, 9.999999999998899e-05, 0.16651722517261036, 0.16238618689822215, 0.1915922736349337, 0.11796171863745863, 0.1524031078171758, 0.15351357243396924, 0.138074454300656, 0.1462506670977859, 0.1669179320893841, 0.16783319262995466, 0.1362216515554846, 0.14945894607380183, 0.039198001336645194, 0.09009320022154566, 0.003190124652267534, 0.011075733980328017, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024911811358331315, 0.050342704472354116, 0.0010846210521845423, 0.06934931419313584, 9.999999999998899e-05, 0.000331608021583607, 0.004020303140508941, 0.02845493831033985, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08736417291755139, 0.0840013272620923, 0.11600346616819956, 0.0933892163769906, 0.09317714058495641, 0.09469561685596617, 0.07473306443829042, 0.07413552462460826, 0.0642362550178015, 0.3630123148394354, 0.33968994173854083, 0.3681121672670724, 0.34818833848515773, 0.3836048238062494, 0.35030846497428425, 0.4007954004438776, 0.35632602955739057, 0.3581104255148657, 0.07177161009300037, 0.07090572456252253, 0.09582839065238402, 0.07931075453848135, 0.09247356272707252, 0.09790172522131035, 0.07049407148889875, 0.09216147104853556, 0.09592427908517953, 0.19161223593625398, 0.19504830231884052, 0.20898803619799078, 0.13828837385651682, 0.19616499441961321, 0.21988222989561046, 0.20632278901805645, 0.16088951163309595, 0.15989583563329557, 0.23665704505545893, 0.23296112451958884, 0.25871518409497196, 0.20675292516308708, 0.21339966785306352, 0.22149913510636454, 0.2200123505492555, 0.21130253054342008, 0.2652224078884281, 0.18382224719155316, 0.19100582795503618, 0.18515542857331746, 0.1725523459644459, 0.1774766485524133, 0.15904614397469719, 0.17748738292013333, 0.16645203871338055, 0.18468365470311932, 0.1686373336747633, 0.19938789767029685, 0.17460568571644686, 0.18134887661629184, 0.17061140367438044, 0.19575441093165336, 0.21082129869084, 0.20211640575014567, 0.18413827545939243, 0.19140556594546476, 0.18345116848747856, 0.1881783533854553, 0.19229118690428382, 0.19360618492234338, 0.1845966619741154, 0.18786884774275237, 0.19196186786503722, 0.18195940158894586, 0.1667217831424287, 0.12551311334320558, 0.15186200492140434, 0.22669410492968034, 0.1973291027828652, 0.12984295313772343, 0.12190132670544374, 0.1627461476470764, 0.5707524697508651, 0.4366588121256917, 0.20691242123752196, 0.07343858991395569, 0.10587041875198089, 0.4326321264031052, 0.15342653038142706, 0.47293785760778717, 0.1386553697270425, 0.5201209375051299, 0.16609269613757738, 0.16602084869610845, 0.18358049497702478, 0.17225996977415725, 0.16538930113753814, 0.18092806787071636, 0.17216932837701693, 0.16376476941031948, 0.1778234650735374, 0.06951912473105437, 0.06678130552024975, 0.0800421352111893, 0.074341746457662, 0.07613772288075393, 0.07298768173088233, 0.06630488833657311, 0.0906478827092293, 0.07446833064771641]}, "mutation_prompt": null}
{"id": "74b82b1f-bb88-4d5c-9de1-ef96ea5cdf4b", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate\n            mutation_rate_adjustment = 0.1 * np.exp(-_ / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improved convergence speed by applying dynamic adjustment of mutation rate during optimization iterations.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {"aucs": [0.35762711093264044, 0.3690576429901343, 0.3587246699734421, 0.36435083568093585, 0.37566291610879554, 0.3936055209802801, 0.4126394543354962, 0.43096776677381543, 0.3941259027700539, 0.02456317423525689, 0.04335839322574098, 0.029350017262280592, 0.055654707920559265, 0.02648936830422921, 0.06177518557855943, 0.0786312841074136, 0.013807993639643468, 0.03001955722715577, 0.08207280427202146, 0.09065185324798875, 0.08655531335779942, 0.11504450298252555, 0.10403845174654525, 0.08554810531908719, 0.0867182791441331, 0.09826922913293579, 0.08199768243055428, 0.06611775043607226, 0.06406688483359668, 0.08826352892680134, 0.0659574095005715, 0.08983199579562895, 0.08731963759636419, 0.08258602870489973, 0.0675925535406483, 0.08547733244558675, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.23868683244213318, 0.22102312344892094, 0.2197440818525077, 0.2436661910034752, 0.20994835573913817, 0.22999029080364586, 0.23025149427792668, 0.21284206756298318, 0.21321369119344158, 0.2462983020145827, 0.2389034134003366, 0.23673893412321811, 0.3059553699958534, 0.26729039513040975, 0.25956011885443075, 0.19162494300292132, 0.21561229347054656, 0.15472082230730755, 0.18908477480611674, 0.18174732834444196, 9.999999999998899e-05, 0.16651722517261036, 0.16238618689822215, 0.1915922736349337, 0.11796171863745863, 0.1524031078171758, 0.15351357243396924, 0.138074454300656, 0.1462506670977859, 0.1669179320893841, 0.16783319262995466, 0.1362216515554846, 0.14945894607380183, 0.039198001336645194, 0.09009320022154566, 0.003190124652267534, 0.011075733980328017, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024911811358331315, 0.050342704472354116, 0.0010846210521845423, 0.06934931419313584, 9.999999999998899e-05, 0.000331608021583607, 0.004020303140508941, 0.02845493831033985, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08736417291755139, 0.0840013272620923, 0.11600346616819956, 0.0933892163769906, 0.09317714058495641, 0.09469561685596617, 0.07473306443829042, 0.07413552462460826, 0.0642362550178015, 0.3630123148394354, 0.33968994173854083, 0.3681121672670724, 0.34818833848515773, 0.3836048238062494, 0.35030846497428425, 0.4007954004438776, 0.35632602955739057, 0.3581104255148657, 0.07177161009300037, 0.07090572456252253, 0.09582839065238402, 0.07931075453848135, 0.09247356272707252, 0.09790172522131035, 0.07049407148889875, 0.09216147104853556, 0.09592427908517953, 0.19161223593625398, 0.19504830231884052, 0.20898803619799078, 0.13828837385651682, 0.19616499441961321, 0.21988222989561046, 0.20632278901805645, 0.16088951163309595, 0.15989583563329557, 0.23665704505545893, 0.23296112451958884, 0.25871518409497196, 0.20675292516308708, 0.21339966785306352, 0.22149913510636454, 0.2200123505492555, 0.21130253054342008, 0.2652224078884281, 0.18382224719155316, 0.19100582795503618, 0.18515542857331746, 0.1725523459644459, 0.1774766485524133, 0.15904614397469719, 0.17748738292013333, 0.16645203871338055, 0.18468365470311932, 0.1686373336747633, 0.19938789767029685, 0.17460568571644686, 0.18134887661629184, 0.17061140367438044, 0.19575441093165336, 0.21082129869084, 0.20211640575014567, 0.18413827545939243, 0.19140556594546476, 0.18345116848747856, 0.1881783533854553, 0.19229118690428382, 0.19360618492234338, 0.1845966619741154, 0.18786884774275237, 0.19196186786503722, 0.18195940158894586, 0.1667217831424287, 0.12551311334320558, 0.15186200492140434, 0.22669410492968034, 0.1973291027828652, 0.12984295313772343, 0.12190132670544374, 0.1627461476470764, 0.5707524697508651, 0.4366588121256917, 0.20691242123752196, 0.07343858991395569, 0.10587041875198089, 0.4326321264031052, 0.15342653038142706, 0.47293785760778717, 0.1386553697270425, 0.5201209375051299, 0.16609269613757738, 0.16602084869610845, 0.18358049497702478, 0.17225996977415725, 0.16538930113753814, 0.18092806787071636, 0.17216932837701693, 0.16376476941031948, 0.1778234650735374, 0.06951912473105437, 0.06678130552024975, 0.0800421352111893, 0.074341746457662, 0.07613772288075393, 0.07298768173088233, 0.06630488833657311, 0.0906478827092293, 0.07446833064771641]}, "mutation_prompt": null}
{"id": "351665b1-880c-443c-b860-c8bfc5447f72", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate\n            mutation_rate_adjustment = 0.1 * np.exp(-_ / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improved convergence speed by applying dynamic adjustment of mutation rate during optimization iterations.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {"aucs": [0.35762711093264044, 0.3690576429901343, 0.3587246699734421, 0.36435083568093585, 0.37566291610879554, 0.3936055209802801, 0.4126394543354962, 0.43096776677381543, 0.3941259027700539, 0.02456317423525689, 0.04335839322574098, 0.029350017262280592, 0.055654707920559265, 0.02648936830422921, 0.06177518557855943, 0.0786312841074136, 0.013807993639643468, 0.03001955722715577, 0.08207280427202146, 0.09065185324798875, 0.08655531335779942, 0.11504450298252555, 0.10403845174654525, 0.08554810531908719, 0.0867182791441331, 0.09826922913293579, 0.08199768243055428, 0.06611775043607226, 0.06406688483359668, 0.08826352892680134, 0.0659574095005715, 0.08983199579562895, 0.08731963759636419, 0.08258602870489973, 0.0675925535406483, 0.08547733244558675, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.23868683244213318, 0.22102312344892094, 0.2197440818525077, 0.2436661910034752, 0.20994835573913817, 0.22999029080364586, 0.23025149427792668, 0.21284206756298318, 0.21321369119344158, 0.2462983020145827, 0.2389034134003366, 0.23673893412321811, 0.3059553699958534, 0.26729039513040975, 0.25956011885443075, 0.19162494300292132, 0.21561229347054656, 0.15472082230730755, 0.18908477480611674, 0.18174732834444196, 9.999999999998899e-05, 0.16651722517261036, 0.16238618689822215, 0.1915922736349337, 0.11796171863745863, 0.1524031078171758, 0.15351357243396924, 0.138074454300656, 0.1462506670977859, 0.1669179320893841, 0.16783319262995466, 0.1362216515554846, 0.14945894607380183, 0.039198001336645194, 0.09009320022154566, 0.003190124652267534, 0.011075733980328017, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024911811358331315, 0.050342704472354116, 0.0010846210521845423, 0.06934931419313584, 9.999999999998899e-05, 0.000331608021583607, 0.004020303140508941, 0.02845493831033985, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08736417291755139, 0.0840013272620923, 0.11600346616819956, 0.0933892163769906, 0.09317714058495641, 0.09469561685596617, 0.07473306443829042, 0.07413552462460826, 0.0642362550178015, 0.3630123148394354, 0.33968994173854083, 0.3681121672670724, 0.34818833848515773, 0.3836048238062494, 0.35030846497428425, 0.4007954004438776, 0.35632602955739057, 0.3581104255148657, 0.07177161009300037, 0.07090572456252253, 0.09582839065238402, 0.07931075453848135, 0.09247356272707252, 0.09790172522131035, 0.07049407148889875, 0.09216147104853556, 0.09592427908517953, 0.19161223593625398, 0.19504830231884052, 0.20898803619799078, 0.13828837385651682, 0.19616499441961321, 0.21988222989561046, 0.20632278901805645, 0.16088951163309595, 0.15989583563329557, 0.23665704505545893, 0.23296112451958884, 0.25871518409497196, 0.20675292516308708, 0.21339966785306352, 0.22149913510636454, 0.2200123505492555, 0.21130253054342008, 0.2652224078884281, 0.18382224719155316, 0.19100582795503618, 0.18515542857331746, 0.1725523459644459, 0.1774766485524133, 0.15904614397469719, 0.17748738292013333, 0.16645203871338055, 0.18468365470311932, 0.1686373336747633, 0.19938789767029685, 0.17460568571644686, 0.18134887661629184, 0.17061140367438044, 0.19575441093165336, 0.21082129869084, 0.20211640575014567, 0.18413827545939243, 0.19140556594546476, 0.18345116848747856, 0.1881783533854553, 0.19229118690428382, 0.19360618492234338, 0.1845966619741154, 0.18786884774275237, 0.19196186786503722, 0.18195940158894586, 0.1667217831424287, 0.12551311334320558, 0.15186200492140434, 0.22669410492968034, 0.1973291027828652, 0.12984295313772343, 0.12190132670544374, 0.1627461476470764, 0.5707524697508651, 0.4366588121256917, 0.20691242123752196, 0.07343858991395569, 0.10587041875198089, 0.4326321264031052, 0.15342653038142706, 0.47293785760778717, 0.1386553697270425, 0.5201209375051299, 0.16609269613757738, 0.16602084869610845, 0.18358049497702478, 0.17225996977415725, 0.16538930113753814, 0.18092806787071636, 0.17216932837701693, 0.16376476941031948, 0.1778234650735374, 0.06951912473105437, 0.06678130552024975, 0.0800421352111893, 0.074341746457662, 0.07613772288075393, 0.07298768173088233, 0.06630488833657311, 0.0906478827092293, 0.07446833064771641]}, "mutation_prompt": null}
{"id": "0b4e0562-7636-4971-9ea9-38850769918e", "solution": "import numpy as np\n\nclass ImprovedHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # New adaptive mutation strategy\n            mutation_rate_adjustment = 0.1 * np.exp(-_ / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n            \n            # Adaptive mutation rate update based on population diversity\n            mean_individual = np.mean(population, axis=0)\n            std_individual = np.std(population, axis=0)\n            mutation_rate_adjustment = np.clip(0.1 + 0.1 * np.mean(std_individual), 0.1, 0.9)\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n        \n        return global_best", "name": "ImprovedHybridGA_PSO", "description": "Increased population diversity by introducing a new adaptive mutation strategy to enhance exploration capabilities.", "configspace": "", "generation": 78, "fitness": 0.18145599288832923, "feedback": "The algorithm ImprovedHybridGA_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {"aucs": [0.34440218195176453, 0.38063835529742296, 0.3459526942551463, 0.33723538547972387, 0.35974408825870174, 0.35736051199940244, 0.35845784173489903, 0.3770524761310894, 0.351077253122723, 9.999999999998899e-05, 0.010750586607328305, 0.021756736771226137, 9.999999999998899e-05, 0.018919321176398607, 9.999999999998899e-05, 0.00029869519063407957, 9.999999999998899e-05, 9.999999999998899e-05, 0.09059980722322747, 0.08674439711973558, 0.06610002339389753, 0.07796367431774165, 0.08025969821412038, 0.06914444466754399, 0.08079091654161019, 0.07555263960762237, 0.09465195212762267, 0.10895559055249071, 0.06781548120859893, 0.058002975394435996, 0.08411336486103371, 0.07880643953213384, 0.07695726072020603, 0.08175386984546718, 0.07369247384229671, 0.05909432462632358, 0.9908547217146776, 0.9684313507572774, 0.989763239627265, 0.9780794582962081, 0.9818915328896959, 0.9734010480702497, 0.9905184421366984, 0.9818360692260284, 0.9861661699186964, 0.20370299535999115, 0.17248235434692982, 0.20694303100734013, 0.21550909760569736, 0.21576214117964854, 0.20146079519080673, 0.20019009363181273, 0.22073408235322045, 0.22778072945606676, 0.23818461990672468, 0.305810924175527, 0.2435216622744476, 0.2673162364274909, 0.26373563591478544, 0.21897383418956373, 0.27913498196371644, 0.2356277468108825, 0.22014943251350594, 0.08494582633601366, 0.05907844467455192, 0.10333782973284455, 0.03010590185482087, 0.15335067017308335, 0.13644652390991419, 0.14012250121848668, 0.15769889557670524, 0.1125197802631428, 0.1220050170185274, 0.12578827200136278, 0.11697071313623453, 0.11946811972265292, 0.13250404652639614, 0.15048756329275526, 0.13077389013466634, 0.00022526525557553523, 0.12092737087707306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040244510043427884, 9.999999999998899e-05, 9.999999999998899e-05, 0.02405454361510273, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017085407173215161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07301303179016994, 0.06703152459478856, 0.07231357218236789, 0.07625286752069316, 0.06248578860351606, 0.05915254378764334, 0.06570602552791094, 0.0891060866179112, 0.08479311803802281, 0.3353650872193279, 0.3387633707656522, 0.34502523738125546, 0.34887631895227744, 0.32781003210762294, 0.3311287146180796, 0.34698271318163965, 0.358191778480773, 0.3510282726944741, 0.07557615343925095, 0.07431003711896633, 0.07979134699710799, 0.07053578507778369, 0.10028482946998774, 0.08429425187748985, 0.08687465459928057, 0.10004774343617706, 0.07794834351960034, 0.13627752370076596, 0.14151147204414427, 0.17866052349737915, 0.15639685726881603, 0.20536747207666217, 0.17469008949687992, 0.11718929799275934, 0.14464564197272134, 0.1487237693297453, 0.2323632911552771, 0.23757791756397229, 0.24581604709502503, 0.23469676260000183, 0.23568627116074226, 0.19640324419521404, 0.24024832105692662, 0.22347236147193594, 0.2096401793302426, 0.16777054422235504, 0.1745084060357942, 0.17022723194436806, 0.16735344529532847, 0.18542993647574701, 0.17504423103014766, 0.17092089117888987, 0.1709385511710234, 0.1640412092369623, 0.2552867565097908, 0.17177663585812952, 0.21842969238977483, 0.1899926258996072, 0.1746039672131421, 0.18852271858146352, 0.17977207380062754, 0.19654825873407322, 0.20499099329163806, 0.1853976656993146, 0.1875860049984095, 0.18391239637310708, 0.19322380691433194, 0.20021870513871787, 0.17591428239451412, 0.1911751901652451, 0.18243968678952305, 0.18225372928570516, 0.17929105991602445, 0.12595500065637366, 0.15082997783600183, 0.5227316554425814, 0.19704974233121297, 0.12707180119250916, 0.14166566756247834, 0.15857336724259752, 0.2130717850199051, 0.40123975866105677, 0.20947046741330277, 0.1100474396702239, 0.3963469386948284, 0.4187714595735619, 0.15061072316846735, 0.44079001137455, 0.10301638681260428, 0.26574363223670083, 0.17049623405383796, 0.18684051899129706, 0.1624850103902018, 0.166945256345006, 0.16698895993619933, 0.16795278673809422, 0.17722264415665412, 0.17533411532256482, 0.1813846148057856, 0.06198681381938698, 0.08318925177339809, 0.07030435246122813, 0.07001183170395087, 0.07463526624297867, 0.08887224668912186, 0.08454329386079029, 0.06556248419111455, 0.05885388355763266]}, "mutation_prompt": null}
{"id": "a6e010a2-bdc9-48f7-ab60-f13b7e68c976", "solution": "import numpy as np\n\nclass HybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for _ in range(self.budget):\n            # Update velocity based on PSO\n            velocity = self.inertia_weight * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate\n            mutation_rate_adjustment = 0.1 * np.exp(-_ / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "HybridGA_PSO", "description": "Improved convergence speed by applying dynamic adjustment of mutation rate during optimization iterations.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {"aucs": [0.35762711093264044, 0.3690576429901343, 0.3587246699734421, 0.36435083568093585, 0.37566291610879554, 0.3936055209802801, 0.4126394543354962, 0.43096776677381543, 0.3941259027700539, 0.02456317423525689, 0.04335839322574098, 0.029350017262280592, 0.055654707920559265, 0.02648936830422921, 0.06177518557855943, 0.0786312841074136, 0.013807993639643468, 0.03001955722715577, 0.08207280427202146, 0.09065185324798875, 0.08655531335779942, 0.11504450298252555, 0.10403845174654525, 0.08554810531908719, 0.0867182791441331, 0.09826922913293579, 0.08199768243055428, 0.06611775043607226, 0.06406688483359668, 0.08826352892680134, 0.0659574095005715, 0.08983199579562895, 0.08731963759636419, 0.08258602870489973, 0.0675925535406483, 0.08547733244558675, 0.9908547217146776, 0.9753604418541992, 0.990277351016142, 0.981997659392741, 0.9863157249725013, 0.9729628301982148, 0.9906083531556794, 0.9783093558883232, 0.9860767091387992, 0.21325793526266457, 0.23868683244213318, 0.22102312344892094, 0.2197440818525077, 0.2436661910034752, 0.20994835573913817, 0.22999029080364586, 0.23025149427792668, 0.21284206756298318, 0.21321369119344158, 0.2462983020145827, 0.2389034134003366, 0.23673893412321811, 0.3059553699958534, 0.26729039513040975, 0.25956011885443075, 0.19162494300292132, 0.21561229347054656, 0.15472082230730755, 0.18908477480611674, 0.18174732834444196, 9.999999999998899e-05, 0.16651722517261036, 0.16238618689822215, 0.1915922736349337, 0.11796171863745863, 0.1524031078171758, 0.15351357243396924, 0.138074454300656, 0.1462506670977859, 0.1669179320893841, 0.16783319262995466, 0.1362216515554846, 0.14945894607380183, 0.039198001336645194, 0.09009320022154566, 0.003190124652267534, 0.011075733980328017, 9.999999999998899e-05, 0.023457072414925784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024911811358331315, 0.050342704472354116, 0.0010846210521845423, 0.06934931419313584, 9.999999999998899e-05, 0.000331608021583607, 0.004020303140508941, 0.02845493831033985, 9.999999999998899e-05, 0.0017085407173215161, 0.0036851787610712172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08736417291755139, 0.0840013272620923, 0.11600346616819956, 0.0933892163769906, 0.09317714058495641, 0.09469561685596617, 0.07473306443829042, 0.07413552462460826, 0.0642362550178015, 0.3630123148394354, 0.33968994173854083, 0.3681121672670724, 0.34818833848515773, 0.3836048238062494, 0.35030846497428425, 0.4007954004438776, 0.35632602955739057, 0.3581104255148657, 0.07177161009300037, 0.07090572456252253, 0.09582839065238402, 0.07931075453848135, 0.09247356272707252, 0.09790172522131035, 0.07049407148889875, 0.09216147104853556, 0.09592427908517953, 0.19161223593625398, 0.19504830231884052, 0.20898803619799078, 0.13828837385651682, 0.19616499441961321, 0.21988222989561046, 0.20632278901805645, 0.16088951163309595, 0.15989583563329557, 0.23665704505545893, 0.23296112451958884, 0.25871518409497196, 0.20675292516308708, 0.21339966785306352, 0.22149913510636454, 0.2200123505492555, 0.21130253054342008, 0.2652224078884281, 0.18382224719155316, 0.19100582795503618, 0.18515542857331746, 0.1725523459644459, 0.1774766485524133, 0.15904614397469719, 0.17748738292013333, 0.16645203871338055, 0.18468365470311932, 0.1686373336747633, 0.19938789767029685, 0.17460568571644686, 0.18134887661629184, 0.17061140367438044, 0.19575441093165336, 0.21082129869084, 0.20211640575014567, 0.18413827545939243, 0.19140556594546476, 0.18345116848747856, 0.1881783533854553, 0.19229118690428382, 0.19360618492234338, 0.1845966619741154, 0.18786884774275237, 0.19196186786503722, 0.18195940158894586, 0.1667217831424287, 0.12551311334320558, 0.15186200492140434, 0.22669410492968034, 0.1973291027828652, 0.12984295313772343, 0.12190132670544374, 0.1627461476470764, 0.5707524697508651, 0.4366588121256917, 0.20691242123752196, 0.07343858991395569, 0.10587041875198089, 0.4326321264031052, 0.15342653038142706, 0.47293785760778717, 0.1386553697270425, 0.5201209375051299, 0.16609269613757738, 0.16602084869610845, 0.18358049497702478, 0.17225996977415725, 0.16538930113753814, 0.18092806787071636, 0.17216932837701693, 0.16376476941031948, 0.1778234650735374, 0.06951912473105437, 0.06678130552024975, 0.0800421352111893, 0.074341746457662, 0.07613772288075393, 0.07298768173088233, 0.06630488833657311, 0.0906478827092293, 0.07446833064771641]}, "mutation_prompt": null}
{"id": "6fbd25a3-95fc-4926-91d7-d5bae95242ea", "solution": "import numpy as np\n\nclass DynamicInertiaHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for t in range(1, self.budget+1):\n            # Update velocity based on PSO\n            dynamic_inertia = self.inertia_weight * (1 - t/self.budget)  # Dynamic inertia weight\n            velocity = dynamic_inertia * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate\n            mutation_rate_adjustment = 0.1 * np.exp(-t / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "DynamicInertiaHybridGA_PSO", "description": "Enhanced convergence speed by introducing a dynamic inertia weight that gradually decreases during optimization iterations.", "configspace": "", "generation": 80, "fitness": 0.1913139539933802, "feedback": "The algorithm DynamicInertiaHybridGA_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "ba8af5c2-56a0-4c30-a016-caf4a47a8c6c", "metadata": {"aucs": [0.3855954440624533, 0.43681856244503914, 0.3716618505055733, 0.43332522583027033, 0.3626637690370007, 0.39166736275552894, 0.40305263143013204, 0.4329913809701862, 0.3789893907815085, 0.06320389656614844, 0.030305145100953057, 0.05806919869878113, 0.05540395432347156, 0.06220660128090294, 0.010038825633407744, 0.04348844741433755, 0.0651525953738632, 0.04663795167484275, 0.0927377876352109, 0.08187558436423992, 0.0839156893827041, 0.09418161871506547, 0.11199805501884419, 0.10457874583174276, 0.08097104737002248, 0.07339716316761136, 0.0953839569013164, 0.05935844657190259, 0.0749752684300442, 0.07975487706560858, 0.08242739214913364, 0.0913406121208713, 0.08496387988492238, 0.07952171102460837, 0.06442883930681687, 0.0809302938997487, 0.9908547217146776, 0.9753592518349146, 0.9902772166212604, 0.9819977697340101, 0.9863157569134107, 0.972962711823239, 0.9906083595951416, 0.9783082983778191, 0.9860766355512971, 0.20900929341142316, 0.1829108025429088, 0.19877725978676808, 0.18874773963950597, 0.22360983239554444, 0.24812538405830842, 0.24050308300330947, 0.22140160377638685, 0.22415568752351223, 0.24187895897465606, 0.27877698503570114, 0.2507723520837526, 0.2528670385693995, 0.2650936845733044, 0.24627548738165594, 0.23926949675249554, 0.21691590629646318, 0.2916237057483635, 0.16744447866852896, 0.17570491702008206, 0.17038536283190586, 9.999999999998899e-05, 0.14457437499401582, 0.14455549704772497, 0.1530449334598798, 0.13305608176010042, 0.1563231824743423, 0.16508722148695487, 0.14662992322846513, 0.1286163350844346, 0.1392971178273047, 0.15234426531547307, 0.16740621716999649, 0.15872312495192187, 0.032065847973300365, 0.09751347820656231, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0054914478393522925, 9.999999999998899e-05, 9.999999999998899e-05, 0.013066416561996808, 0.018186119106528564, 0.055543928276787335, 0.0002393526597770368, 9.999999999998899e-05, 0.004194594031899035, 0.013447133441813808, 9.999999999998899e-05, 0.0017085407173215161, 0.01426081861253281, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021009426835778555, 0.06534011847878829, 0.09378603961271714, 0.08678283504457085, 0.09276489410172961, 0.08371727440638022, 0.09953573683217143, 0.08788643413943886, 0.07956609581721497, 0.07226475657949594, 0.42158457250113723, 0.37070310619035773, 0.3807192037649705, 0.3809234006514055, 0.3845357204689678, 0.3525005997936883, 0.41091002233444873, 0.37526722272352886, 0.35320484167370325, 0.06672242810813056, 0.06888643053266641, 0.08478668894162655, 0.07141007339319416, 0.10111229581373937, 0.06745341104358926, 0.0695875792235654, 0.08850948478147491, 0.06713763914025161, 0.2037310472459145, 0.15884125715828634, 0.15565231683098957, 0.17571711235479037, 0.19289844047754112, 0.21617186650024856, 0.19366387468212265, 0.17317196686774383, 0.18196951543024897, 0.2181453196133074, 0.22292026167136247, 0.24491753052694332, 0.21267970779451806, 0.257737512426369, 0.18344790872152805, 0.22550126947876992, 0.24367573196735204, 0.2549228345076118, 0.1980661757029082, 0.16195905019181323, 0.18148278304789445, 0.20186221598504162, 0.17861882793578365, 0.18242023513416938, 0.16124586178426847, 0.1597844684901969, 0.1917656766460707, 0.17653895086993654, 0.1800190311068156, 0.18991399267016873, 0.14888674665988655, 0.1836759275856883, 0.1841651681169566, 0.18764472608412575, 0.17173057046344853, 0.18410258817601277, 0.1833578071709503, 0.1849879813637909, 0.22739901393207573, 0.18918419993906377, 0.19233722113885487, 0.20313014863543066, 0.19803343740699242, 0.22527485374195788, 0.18502383379862697, 0.16676102257293945, 0.12543424956913773, 0.1518309044299433, 0.22675939359045594, 0.19825382188423102, 0.12978739189612765, 0.12151532159034817, 0.1628125864517036, 0.562089027561292, 0.377534017976094, 0.20902386447703514, 0.07344323760429561, 0.10780261702867633, 0.44591645406004177, 0.15416115221168825, 0.4605038634399038, 0.13642643371976704, 0.49088205932582374, 0.19507032416526704, 0.16421968389076724, 0.1709290356032247, 0.16989812675431315, 0.17288579806905635, 0.18932844032071328, 0.16683274909047052, 0.17969928711335947, 0.16388835430971727, 0.06788520261046127, 0.0632224076876482, 0.07139930405144912, 0.0762395778331093, 0.06913577645222757, 0.07153425567968019, 0.06510260033064874, 0.09140595521269046, 0.08392401000166261]}, "mutation_prompt": null}
{"id": "5eeb90c7-7dba-49d4-abb7-5b0769bed5fa", "solution": "import numpy as np\n\nclass DynamicInertiaHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        mutation_rate_adjustment = 0.1\n        for t in range(1, self.budget+1):\n            # Update velocity based on PSO\n            dynamic_inertia = self.inertia_weight * (1 - t/self.budget)  # Dynamic inertia weight\n            velocity = dynamic_inertia * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate\n            mutation_rate_adjustment = 0.1 * np.exp(-t / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "DynamicInertiaHybridGA_PSO", "description": "Enhanced convergence speed by introducing a dynamic inertia weight that gradually decreases during optimization iterations.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6fbd25a3-95fc-4926-91d7-d5bae95242ea", "metadata": {"aucs": [0.3855954440624533, 0.43681856244503914, 0.3716618505055733, 0.43332522583027033, 0.3626637690370007, 0.39166736275552894, 0.40305263143013204, 0.4329913809701862, 0.3789893907815085, 0.06320389656614844, 0.030305145100953057, 0.05806919869878113, 0.05540395432347156, 0.06220660128090294, 0.010038825633407744, 0.04348844741433755, 0.0651525953738632, 0.04663795167484275, 0.0927377876352109, 0.08187558436423992, 0.0839156893827041, 0.09418161871506547, 0.11199805501884419, 0.10457874583174276, 0.08097104737002248, 0.07339716316761136, 0.0953839569013164, 0.05935844657190259, 0.0749752684300442, 0.07975487706560858, 0.08242739214913364, 0.0913406121208713, 0.08496387988492238, 0.07952171102460837, 0.06442883930681687, 0.0809302938997487, 0.9908547217146776, 0.9753592518349146, 0.9902772166212604, 0.9819977697340101, 0.9863157569134107, 0.972962711823239, 0.9906083595951416, 0.9783082983778191, 0.9860766355512971, 0.20900929341142316, 0.1829108025429088, 0.19877725978676808, 0.18874773963950597, 0.22360983239554444, 0.24812538405830842, 0.24050308300330947, 0.22140160377638685, 0.22415568752351223, 0.24187895897465606, 0.27877698503570114, 0.2507723520837526, 0.2528670385693995, 0.2650936845733044, 0.24627548738165594, 0.23926949675249554, 0.21691590629646318, 0.2916237057483635, 0.16744447866852896, 0.17570491702008206, 0.17038536283190586, 9.999999999998899e-05, 0.14457437499401582, 0.14455549704772497, 0.1530449334598798, 0.13305608176010042, 0.1563231824743423, 0.16508722148695487, 0.14662992322846513, 0.1286163350844346, 0.1392971178273047, 0.15234426531547307, 0.16740621716999649, 0.15872312495192187, 0.032065847973300365, 0.09751347820656231, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0054914478393522925, 9.999999999998899e-05, 9.999999999998899e-05, 0.013066416561996808, 0.018186119106528564, 0.055543928276787335, 0.0002393526597770368, 9.999999999998899e-05, 0.004194594031899035, 0.013447133441813808, 9.999999999998899e-05, 0.0017085407173215161, 0.01426081861253281, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021009426835778555, 0.06534011847878829, 0.09378603961271714, 0.08678283504457085, 0.09276489410172961, 0.08371727440638022, 0.09953573683217143, 0.08788643413943886, 0.07956609581721497, 0.07226475657949594, 0.42158457250113723, 0.37070310619035773, 0.3807192037649705, 0.3809234006514055, 0.3845357204689678, 0.3525005997936883, 0.41091002233444873, 0.37526722272352886, 0.35320484167370325, 0.06672242810813056, 0.06888643053266641, 0.08478668894162655, 0.07141007339319416, 0.10111229581373937, 0.06745341104358926, 0.0695875792235654, 0.08850948478147491, 0.06713763914025161, 0.2037310472459145, 0.15884125715828634, 0.15565231683098957, 0.17571711235479037, 0.19289844047754112, 0.21617186650024856, 0.19366387468212265, 0.17317196686774383, 0.18196951543024897, 0.2181453196133074, 0.22292026167136247, 0.24491753052694332, 0.21267970779451806, 0.257737512426369, 0.18344790872152805, 0.22550126947876992, 0.24367573196735204, 0.2549228345076118, 0.1980661757029082, 0.16195905019181323, 0.18148278304789445, 0.20186221598504162, 0.17861882793578365, 0.18242023513416938, 0.16124586178426847, 0.1597844684901969, 0.1917656766460707, 0.17653895086993654, 0.1800190311068156, 0.18991399267016873, 0.14888674665988655, 0.1836759275856883, 0.1841651681169566, 0.18764472608412575, 0.17173057046344853, 0.18410258817601277, 0.1833578071709503, 0.1849879813637909, 0.22739901393207573, 0.18918419993906377, 0.19233722113885487, 0.20313014863543066, 0.19803343740699242, 0.22527485374195788, 0.18502383379862697, 0.16676102257293945, 0.12543424956913773, 0.1518309044299433, 0.22675939359045594, 0.19825382188423102, 0.12978739189612765, 0.12151532159034817, 0.1628125864517036, 0.562089027561292, 0.377534017976094, 0.20902386447703514, 0.07344323760429561, 0.10780261702867633, 0.44591645406004177, 0.15416115221168825, 0.4605038634399038, 0.13642643371976704, 0.49088205932582374, 0.19507032416526704, 0.16421968389076724, 0.1709290356032247, 0.16989812675431315, 0.17288579806905635, 0.18932844032071328, 0.16683274909047052, 0.17969928711335947, 0.16388835430971727, 0.06788520261046127, 0.0632224076876482, 0.07139930405144912, 0.0762395778331093, 0.06913577645222757, 0.07153425567968019, 0.06510260033064874, 0.09140595521269046, 0.08392401000166261]}, "mutation_prompt": null}
{"id": "4fd48ea0-50d0-410c-9855-82b48d11aa76", "solution": "import numpy as np\n\nclass ModifiedDynamicInertiaHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.chaos_param = 0.1  # Chaos parameter for chaotic map perturbation\n\n    def chaotic_map_perturbation(self, population, chaos_param):\n        return 2 * chaos_param * (population - np.floor(population))\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n\n        mutation_rate_adjustment = 0.1\n        for t in range(1, self.budget+1):\n            # Update velocity based on PSO with chaotic map perturbation\n            dynamic_inertia = self.inertia_weight * (1 - t/self.budget)  # Dynamic inertia weight\n            velocity = dynamic_inertia * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            velocity += self.chaotic_map_perturbation(velocity, self.chaos_param)  # Integrate chaotic map perturbation\n            population += velocity\n\n            # Dynamically adjust mutation rate\n            mutation_rate_adjustment = 0.1 * np.exp(-t / self.budget)  # Exponential decay of mutation rate\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n\n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n\n        return global_best", "name": "ModifiedDynamicInertiaHybridGA_PSO", "description": "Introducing a chaotic map-based perturbation to enhance exploration and exploit the search space more effectively.", "configspace": "", "generation": 82, "fitness": 0.17071768191068598, "feedback": "The algorithm ModifiedDynamicInertiaHybridGA_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "6fbd25a3-95fc-4926-91d7-d5bae95242ea", "metadata": {"aucs": [0.3353319016023958, 0.3420132652066933, 0.3528177723977738, 0.4171159283785282, 0.3411940701423697, 0.3500757530055363, 0.33001005067122935, 0.337724525046909, 0.35614326657754125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07903886002588167, 0.08446105562757344, 0.07765389169631565, 0.06895592090590386, 0.09080617875628827, 0.06613403480496727, 0.07097829872329442, 0.07905583222739587, 0.05601148357161423, 0.08795208758951645, 0.062465147703890556, 0.07180123991425935, 0.06628398124499568, 0.08307630629975593, 0.059545286072539616, 0.0824538811781591, 0.08294061241584072, 0.06913803780264538, 0.9908718480235271, 0.9770089760074245, 0.9905046665627771, 0.9819586754634516, 0.9861991820086022, 0.972916087318391, 0.990586144904056, 0.9768565799227203, 0.9857415801356672, 0.21700946823371103, 0.1900899748778505, 0.17209463913926248, 0.1725755489968287, 0.21300243066935998, 0.18572911085866628, 0.1864267596520024, 0.1985965168137771, 0.18361751767770196, 0.2235977242295497, 0.25313797368376145, 0.21603311654594148, 0.22630296750096912, 0.23704329200724517, 0.24495525025436404, 0.1838086556388726, 0.19607658638379066, 0.1985517362531466, 0.04703507891907699, 0.06228258801810804, 0.11940496235890419, 0.006176890658565415, 0.08910798023645461, 0.07184160109786786, 0.1533031068951023, 0.06234606152263311, 0.07639540108372345, 0.11085026179181856, 0.08482460623382526, 0.07328974851978087, 0.09438223002361446, 0.11056355969130038, 0.16421251655401248, 0.12260409226534064, 9.999999999998899e-05, 0.11752590423736764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005431778460942782, 0.05053040196235192, 0.036045782104888735, 0.045002470220745994, 9.999999999998899e-05, 9.999999999998899e-05, 0.01683562193347321, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06520068228227993, 0.029667118734905684, 0.04850966986016225, 0.058495123079181366, 0.05512624405029942, 0.049111916227940644, 0.05498359584884205, 0.05375152669474881, 0.05327221802456694, 0.3184895548622907, 0.3237719820701147, 0.3370743056921752, 0.3061085552332059, 0.3165152599149966, 0.34137081355927057, 0.3577161941350203, 0.3359833170659222, 0.33094865335616075, 0.09639525145096794, 0.06282721374490119, 0.07477463724662625, 0.083760570059902, 0.0675251573406278, 0.07702503490699109, 0.08686025729056224, 0.056440035295118984, 0.06850286055222876, 0.11512574963562039, 0.14264076937429893, 0.12169385993360915, 0.1335638147411119, 0.16025893691794713, 0.1728439989245406, 0.14445099768854475, 0.11110961250100082, 0.11310603796130214, 0.1440454719311468, 0.22164220354509856, 0.213013231653424, 0.1751536931897697, 0.1827411334771044, 0.16861248288627428, 0.20016402270820788, 0.22719252502198817, 0.23867934199670593, 0.16638187435072416, 0.1446511332514394, 0.16393271817540844, 0.15702042295110064, 0.12732439845403842, 0.14257881301451691, 0.15421179736501467, 0.16942871384764946, 0.14285345856512266, 0.19728542516885583, 0.16493473918113122, 0.1691561233648483, 0.16219929407457345, 0.18432719409683995, 0.19695132446431918, 0.18030393353074325, 0.16705988073685507, 0.2050566229956905, 0.1711658328102329, 0.18870988859379612, 0.19236084515646423, 0.17109900432777014, 0.17410050027831203, 0.19354281370424387, 0.19227379929643684, 0.18300779539650103, 0.17863138550236235, 0.18505438655397688, 0.4613476503048316, 0.1522321077907971, 0.39147464550741573, 0.194919244655267, 0.1287054585789248, 0.1311012720670215, 0.18194986626726573, 0.4172617223583326, 0.32935113066660127, 0.16744585769903753, 0.10673415595043567, 0.10275537925283074, 0.3384212904011673, 0.1463598661533808, 0.3375194712392072, 0.08075702834774345, 0.33300220705540906, 0.1639641475122895, 0.19195464975720566, 0.1798613634029954, 0.17748746755002087, 0.16317067821302422, 0.1625503252869166, 0.1697457533001403, 0.18008635154368113, 0.16424608870839807, 0.07931065740780818, 0.07048763405442227, 0.062399063580008574, 0.056786482658543025, 0.08557920501225869, 0.06954221598540467, 0.05895940048007664, 0.07239355565276295, 0.06764182228674531]}, "mutation_prompt": null}
{"id": "45b9dbb9-4dac-41b2-baf1-fb678c872082", "solution": "import numpy as np\n\nclass DynamicInertiaHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n\n        for t in range(1, self.budget+1):\n            # Update velocity based on PSO\n            dynamic_inertia = self.inertia_weight * (1 - t/self.budget)  # Dynamic inertia weight\n            velocity = dynamic_inertia * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate based on individual fitness\n            mutation_rate_adjustment = 0.1 * np.exp(-np.mean(fitness) / np.max(fitness))  # Mutation rate based on mean fitness\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "DynamicInertiaHybridGA_PSO", "description": "Improved convergence speed by introducing a novel mutation strategy that adaptively adjusts the mutation rate based on individual fitness evaluations to accelerate exploration and exploitation.", "configspace": "", "generation": 83, "fitness": 0.1957438469195569, "feedback": "The algorithm DynamicInertiaHybridGA_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.21.", "error": "", "parent_id": "6fbd25a3-95fc-4926-91d7-d5bae95242ea", "metadata": {"aucs": [0.48878672100880705, 0.4925841717924305, 0.5791599286026545, 0.5250197681208089, 0.4964475470416827, 0.5418831930068099, 0.4576239937491252, 0.49497418622314426, 0.48822977617067675, 0.07412194670299865, 0.03777500555842306, 0.06866991810914203, 0.058528747370089174, 0.061874307371803994, 0.042145429846789595, 0.04146061793721478, 0.058192983047160696, 0.008741797314758104, 0.07970537052885229, 0.09828419536708932, 0.10752412830308056, 0.0910845242824051, 0.08578218004888316, 0.09262803372593376, 0.12593036303023475, 0.0863400693152494, 0.11118344552043746, 0.07555447363324619, 0.07779460595998566, 0.0753110048521668, 0.08574727344720634, 0.08337898183443537, 0.06663092003415005, 0.07372712969444295, 0.09214512992676338, 0.08200282691733496, 0.9908547217146776, 0.9751588606913554, 0.9902772166212604, 0.9813274021646949, 0.9862141995275548, 0.9586084017804681, 0.9906083595951416, 0.982518594803537, 0.9860759263216554, 0.24683931375882895, 0.19246420988058022, 0.23701132527490765, 0.23236046691633438, 0.228019366743191, 0.23542767039782075, 0.21428793892884146, 0.20376111180863976, 0.22151550717003954, 0.22743094788940765, 0.2319306878344396, 0.19410501885926557, 0.23590434325701615, 0.5587540565516783, 0.22870673470241432, 0.31760477042324264, 0.24350736522771443, 0.28215201555517555, 0.17939841700369874, 0.11240625121104053, 0.15027300185463632, 9.999999999998899e-05, 0.12447628940671163, 0.11654642823071337, 0.10880149096309144, 0.09176746001947744, 0.12613476050965777, 0.17083628620984292, 0.18905379752915596, 0.13223653981589012, 0.1752596927879977, 0.1434792082966474, 0.14206732800480437, 0.17943982948387693, 0.035008617332589864, 0.09317734082177742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013663571755666237, 0.06961990992670508, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024650474430245595, 9.999999999998899e-05, 9.999999999998899e-05, 0.05574982676612761, 9.999999999998899e-05, 0.08258140916909595, 0.011950629657281775, 0.015815161629715524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09015186931720487, 0.09830959245794224, 0.08820490781839996, 0.09100728815362669, 0.06482336438788372, 0.10769190580993382, 0.04739592895915523, 0.0425374246988407, 0.0531665106072291, 0.4612348376371266, 0.45311073294380466, 0.4455125093400786, 0.46381912540792103, 0.4167019064794638, 0.41468488933904113, 0.462624300659613, 0.4414466339016534, 0.469383275693779, 0.06191586400753135, 0.04249877254137702, 0.0841992469865861, 0.07246361429401726, 0.0666955281402577, 0.0765462431258882, 0.07604002375694885, 0.0740399491568855, 0.10230869877177551, 0.1260793738938395, 0.12874369638150018, 0.1919073683176744, 0.1562295865026977, 0.12412391907988785, 0.30563537647866845, 0.18489214005776844, 0.12415131286169889, 0.21762240214948092, 0.2124849090004266, 0.2003086139023611, 0.22553882367756872, 0.22320780217912428, 0.16658567982859562, 0.1815961866856065, 0.17030647751595074, 0.21325386353305187, 0.28459191342975043, 0.17649405265300755, 0.15696728766325418, 0.16224063238034336, 0.14776510331270165, 0.171167428234127, 0.19484907782328087, 0.18333165597046108, 0.14812668286302488, 0.18792197605107253, 0.21720616849696595, 0.18897174580420628, 0.1746167117812205, 0.15648657509872077, 0.18590662110485723, 0.2031219855848111, 0.18892825908885258, 0.1622338032537084, 0.17400513972977205, 0.1677115308201692, 0.18958912956638074, 0.18048666730067653, 0.18652317105389693, 0.20494692536258297, 0.18845422295192593, 0.18706773692653644, 0.199811342280372, 0.19240200663926132, 0.12161478095579803, 0.125060696010163, 0.15178083281055932, 0.16401243963226375, 0.19787433660354325, 0.12953169501463513, 0.1418129493872633, 0.15794823404035963, 0.1773047443539153, 0.6208870971912787, 0.20723563583045912, 0.07332788636982512, 0.10431595972068886, 0.5865448853250703, 0.1528452498870574, 0.155618396859601, 0.1504985617725908, 0.44990637183867643, 0.18204545202524347, 0.1701960672944297, 0.17918627721885405, 0.17070908079469604, 0.16312776327440737, 0.1749270243047586, 0.20729993778102407, 0.17759061118477237, 0.1687754691719301, 0.06207790463322904, 0.06183200552346657, 0.07027851165544052, 0.07362575852946807, 0.08099609184540191, 0.06295108427779961, 0.0681001639429284, 0.07440733905732655, 0.07660608321402762]}, "mutation_prompt": null}
{"id": "6e60cd35-efa8-42e8-be31-00c53d28e57d", "solution": "import numpy as np\n\nclass DynamicInertiaHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n\n        for t in range(1, self.budget+1):\n            # Update velocity based on PSO\n            dynamic_inertia = self.inertia_weight * (1 - t/self.budget)  # Dynamic inertia weight\n            velocity = dynamic_inertia * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate based on individual fitness\n            mutation_rate_adjustment = 0.1 * np.exp(-np.mean(fitness) / np.max(fitness))  # Mutation rate based on mean fitness\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "DynamicInertiaHybridGA_PSO", "description": "Improved convergence speed by introducing a novel mutation strategy that adaptively adjusts the mutation rate based on individual fitness evaluations to accelerate exploration and exploitation.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45b9dbb9-4dac-41b2-baf1-fb678c872082", "metadata": {"aucs": [0.48878672100880705, 0.4925841717924305, 0.5791599286026545, 0.5250197681208089, 0.4964475470416827, 0.5418831930068099, 0.4576239937491252, 0.49497418622314426, 0.48822977617067675, 0.07412194670299865, 0.03777500555842306, 0.06866991810914203, 0.058528747370089174, 0.061874307371803994, 0.042145429846789595, 0.04146061793721478, 0.058192983047160696, 0.008741797314758104, 0.07970537052885229, 0.09828419536708932, 0.10752412830308056, 0.0910845242824051, 0.08578218004888316, 0.09262803372593376, 0.12593036303023475, 0.0863400693152494, 0.11118344552043746, 0.07555447363324619, 0.07779460595998566, 0.0753110048521668, 0.08574727344720634, 0.08337898183443537, 0.06663092003415005, 0.07372712969444295, 0.09214512992676338, 0.08200282691733496, 0.9908547217146776, 0.9751588606913554, 0.9902772166212604, 0.9813274021646949, 0.9862141995275548, 0.9586084017804681, 0.9906083595951416, 0.982518594803537, 0.9860759263216554, 0.24683931375882895, 0.19246420988058022, 0.23701132527490765, 0.23236046691633438, 0.228019366743191, 0.23542767039782075, 0.21428793892884146, 0.20376111180863976, 0.22151550717003954, 0.22743094788940765, 0.2319306878344396, 0.19410501885926557, 0.23590434325701615, 0.5587540565516783, 0.22870673470241432, 0.31760477042324264, 0.24350736522771443, 0.28215201555517555, 0.17939841700369874, 0.11240625121104053, 0.15027300185463632, 9.999999999998899e-05, 0.12447628940671163, 0.11654642823071337, 0.10880149096309144, 0.09176746001947744, 0.12613476050965777, 0.17083628620984292, 0.18905379752915596, 0.13223653981589012, 0.1752596927879977, 0.1434792082966474, 0.14206732800480437, 0.17943982948387693, 0.035008617332589864, 0.09317734082177742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013663571755666237, 0.06961990992670508, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024650474430245595, 9.999999999998899e-05, 9.999999999998899e-05, 0.05574982676612761, 9.999999999998899e-05, 0.08258140916909595, 0.011950629657281775, 0.015815161629715524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09015186931720487, 0.09830959245794224, 0.08820490781839996, 0.09100728815362669, 0.06482336438788372, 0.10769190580993382, 0.04739592895915523, 0.0425374246988407, 0.0531665106072291, 0.4612348376371266, 0.45311073294380466, 0.4455125093400786, 0.46381912540792103, 0.4167019064794638, 0.41468488933904113, 0.462624300659613, 0.4414466339016534, 0.469383275693779, 0.06191586400753135, 0.04249877254137702, 0.0841992469865861, 0.07246361429401726, 0.0666955281402577, 0.0765462431258882, 0.07604002375694885, 0.0740399491568855, 0.10230869877177551, 0.1260793738938395, 0.12874369638150018, 0.1919073683176744, 0.1562295865026977, 0.12412391907988785, 0.30563537647866845, 0.18489214005776844, 0.12415131286169889, 0.21762240214948092, 0.2124849090004266, 0.2003086139023611, 0.22553882367756872, 0.22320780217912428, 0.16658567982859562, 0.1815961866856065, 0.17030647751595074, 0.21325386353305187, 0.28459191342975043, 0.17649405265300755, 0.15696728766325418, 0.16224063238034336, 0.14776510331270165, 0.171167428234127, 0.19484907782328087, 0.18333165597046108, 0.14812668286302488, 0.18792197605107253, 0.21720616849696595, 0.18897174580420628, 0.1746167117812205, 0.15648657509872077, 0.18590662110485723, 0.2031219855848111, 0.18892825908885258, 0.1622338032537084, 0.17400513972977205, 0.1677115308201692, 0.18958912956638074, 0.18048666730067653, 0.18652317105389693, 0.20494692536258297, 0.18845422295192593, 0.18706773692653644, 0.199811342280372, 0.19240200663926132, 0.12161478095579803, 0.125060696010163, 0.15178083281055932, 0.16401243963226375, 0.19787433660354325, 0.12953169501463513, 0.1418129493872633, 0.15794823404035963, 0.1773047443539153, 0.6208870971912787, 0.20723563583045912, 0.07332788636982512, 0.10431595972068886, 0.5865448853250703, 0.1528452498870574, 0.155618396859601, 0.1504985617725908, 0.44990637183867643, 0.18204545202524347, 0.1701960672944297, 0.17918627721885405, 0.17070908079469604, 0.16312776327440737, 0.1749270243047586, 0.20729993778102407, 0.17759061118477237, 0.1687754691719301, 0.06207790463322904, 0.06183200552346657, 0.07027851165544052, 0.07362575852946807, 0.08099609184540191, 0.06295108427779961, 0.0681001639429284, 0.07440733905732655, 0.07660608321402762]}, "mutation_prompt": null}
{"id": "852b2597-8490-44c3-964b-1ae1733de2e8", "solution": "import numpy as np\n\nclass OppositeDynamicInertiaHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n\n        for t in range(1, self.budget+1):\n            # Update velocity based on PSO with opposite solutions\n            dynamic_inertia = self.inertia_weight * (1 - t/self.budget)  # Dynamic inertia weight\n            velocity = dynamic_inertia * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate based on individual fitness\n            mutation_rate_adjustment = 0.1 * np.exp(-np.mean(fitness) / np.max(fitness))  # Mutation rate based on mean fitness\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            # Incorporate opposite solutions for exploration\n            opposite_population = 2 * global_best - population\n            opposite_fitness = np.array([func(ind) for ind in opposite_population])\n            population[opposite_fitness < fitness] = opposite_population[opposite_fitness < fitness]\n            fitness = np.array([func(ind) for ind in population])\n            \n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "OppositeDynamicInertiaHybridGA_PSO", "description": "Utilizing the concept of opposition-based learning to enhance exploration and exploitation by generating opposite solutions and updating the population based on their performance.", "configspace": "", "generation": 85, "fitness": 0.17268409066164112, "feedback": "The algorithm OppositeDynamicInertiaHybridGA_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "45b9dbb9-4dac-41b2-baf1-fb678c872082", "metadata": {"aucs": [0.3997720461648542, 0.31616166679243185, 0.3760967024614794, 0.45661964111379016, 0.3125467409991397, 0.4289979257986096, 0.3928915706623758, 0.33243584386292957, 0.48008512140374016, 0.01159941735501957, 9.999999999998899e-05, 0.00040485354950636765, 0.011549747395597332, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05738903811424134, 0.07706280114635211, 0.055174782765286756, 0.05950510794581221, 0.06928835064395011, 0.0902416615642514, 0.08484169683689702, 0.05197801049106765, 0.0695479870961413, 0.06529052573561656, 0.053957449528545975, 0.07358386501275727, 0.07285541471294477, 0.05661124347593427, 0.06362446268911903, 0.06778771379628656, 0.07210603578242825, 0.07187522344417119, 0.9808412284038688, 0.9788215423204355, 0.9780502386302309, 0.9761942401368167, 0.9764903953392196, 0.934284101016958, 0.9771539645229175, 0.9765696459384179, 0.9742871183697774, 0.19385299964119185, 0.15742397888108628, 0.17302034922974252, 0.1747003105376045, 0.17805266843777445, 0.17318946885529019, 0.07056232570230736, 0.14807488378340827, 0.20376794225742278, 0.2631249702048504, 0.19885896786308788, 0.24885435299832404, 0.21106206287976703, 0.23503594423083474, 0.2967476885294905, 0.21621653416377273, 0.22522906450657332, 0.244896764622889, 0.10120919798800665, 0.1010950191186002, 0.1232092281578624, 0.06498284755370964, 0.07244600189297723, 0.11474726073229691, 0.09553217661814672, 0.053928632601243254, 0.1441447569778317, 0.03640975042505057, 0.09382881696118206, 0.11543438983270116, 0.10473185067154978, 0.0242951558038349, 0.14495493641288726, 0.07572434690349472, 0.03351727823787565, 0.12959446192986757, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052239716081965204, 9.999999999998899e-05, 0.08747764246639778, 0.019564485297258183, 9.999999999998899e-05, 0.04421310362237585, 0.10843890845862136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06254301910460547, 0.05750722767490879, 0.07801584466791989, 0.06877819159557452, 0.051143154083317155, 0.06324050724382924, 0.04692573560691693, 0.03358391051616161, 0.10351633813202721, 0.3238144154907865, 0.32848692753612563, 0.3590017777372857, 0.33982980778652505, 0.29066399604399484, 0.3522629158903685, 0.39043752110522256, 0.34993412431912607, 0.41938009339224736, 0.07807432549782911, 0.07352272337580468, 0.06329347845417055, 0.05562615956944306, 0.04487486392732987, 0.06426270887134122, 0.06833395118100538, 0.07208383615058522, 0.06441314668792308, 0.14997932815054826, 0.10945501117942091, 0.13657840980934977, 0.1052418862477098, 0.20802935669971456, 0.11752786907547708, 0.10207344016533115, 0.12826766659366817, 0.1449901371933362, 0.21225104995560318, 0.16895636921355128, 0.2474923133641871, 0.24748489989525402, 0.22107256528859187, 0.20751499988942668, 0.18575811663101716, 0.2726651117910238, 0.23880915170235606, 0.14957255910196798, 0.08478513473425064, 0.17084888553621003, 0.17222652929162763, 0.1569580845081684, 0.1805671759956673, 0.17427248040260968, 0.15025379946911877, 0.152904779894803, 0.19188897300960006, 0.16984668714993678, 0.19298720581989393, 0.19103816906955073, 0.14615386180873846, 0.17301403857687125, 0.17149467640790295, 0.14555068825092532, 0.16925584263033921, 0.19966822256257355, 0.16286160448877451, 0.18168141610394728, 0.18545236783292296, 0.16037473315798556, 0.186642185834348, 0.16598545684228283, 0.18486272976278517, 0.1693522193659821, 0.15556138366535543, 0.17564481124541964, 0.1492623423205448, 0.15254344552218568, 0.14898796053971963, 0.19112042363577209, 0.1387696637961422, 0.15851566944943585, 0.6443500575939685, 0.5106652403037975, 0.16756928614324063, 0.44093764427768456, 0.1115887479545763, 0.17187418700341206, 0.14243895393841233, 0.06511113450750128, 0.11844487529605507, 0.46780764148262866, 0.17937115485561894, 0.15802036704597888, 0.1948331421345808, 0.15664725587964534, 0.17280413940897799, 0.17082278635270198, 0.15821149593790484, 0.15995775280479807, 0.1624838071246013, 0.0631230406144061, 0.06587328586906693, 0.06689512786173835, 0.050743495184365384, 0.05897670647248632, 0.07327948044844101, 0.06845585556029932, 0.07260216177240686, 0.06550380172180781]}, "mutation_prompt": null}
{"id": "f777f074-cc16-4580-afc2-8eb69e61bbe9", "solution": "import numpy as np\n\nclass DynamicInertiaHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n\n        for t in range(1, self.budget+1):\n            # Update velocity based on PSO with chaotic optimization\n            dynamic_inertia = self.inertia_weight * (1 - t/self.budget)  # Dynamic inertia weight\n            chaos = np.sin(population) * np.cos(population)  # Chaotic optimization adjustment\n            velocity = dynamic_inertia * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population) + chaos\n            population += velocity\n            \n            # Dynamically adjust mutation rate based on individual fitness with chaos\n            mutation_rate_adjustment = 0.1 * np.exp(-np.mean(fitness) / np.max(fitness)) + chaos  # Mutation rate based on mean fitness with chaos\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "DynamicInertiaHybridGA_PSO", "description": "Introducing a chaotic optimization strategy to enhance exploration and exploitation capabilities for faster convergence speed.", "configspace": "", "generation": 86, "fitness": 0.15843747696137558, "feedback": "The algorithm DynamicInertiaHybridGA_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "45b9dbb9-4dac-41b2-baf1-fb678c872082", "metadata": {"aucs": [0.2673039324784868, 0.2801701494860005, 0.2885171155792041, 0.2868191772743821, 0.25621430278183, 0.2829679167803858, 0.2821469993347552, 0.28062240260906346, 0.24543388140877764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07983321249620134, 0.08273312640190922, 0.06693903530978185, 0.08845541297173698, 0.07975367974842484, 0.06845286828116337, 0.07225726372798547, 0.07130742034055237, 0.07351782495286607, 0.06787403072490983, 0.0767809874630544, 0.06879651198307712, 0.06872780293648428, 0.05031907031605043, 0.07749811350455782, 0.058517026461848975, 0.06142313636328223, 0.06347343521819382, 0.990841839712763, 0.9772542716006312, 0.9905544757719197, 0.9821025069617412, 0.9822174873735146, 0.9708491157150416, 0.9872618310593115, 0.9771808953219336, 0.9862017683409114, 0.14931268174640866, 0.15578258267243728, 0.20134703845075375, 0.14081478841511197, 0.1626466667427312, 0.15304304609189345, 0.11937218395780325, 0.1216647705507341, 0.1347217005411483, 0.18369612860568008, 0.19909835498964135, 0.1808364779676226, 0.22168019053231902, 0.24678155375549105, 0.2561954047331838, 0.1735670520161091, 0.2422076912211193, 0.24626553073755353, 0.020369453286948724, 0.07743708389085646, 0.10623075306210139, 0.0555385416002413, 0.08816273415250309, 0.08789885073097625, 0.1277542353505121, 0.0658125363596378, 0.11249296827102284, 0.11528438526658646, 0.06421978694090924, 0.05957494701075006, 0.09175610409051438, 0.02833460948480715, 0.07069727208687926, 0.07379287976242, 9.999999999998899e-05, 0.0476706729447498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03991271991934586, 0.021828398411777417, 0.027790615530069007, 0.029578812848864433, 0.027513184336728225, 0.021979735139487144, 0.027577633817339464, 0.0341448609156374, 0.031579671906080464, 0.3101407488546106, 0.3028761479402987, 0.28706085875663034, 0.2734073873173801, 0.2509797579910632, 0.27743764977843877, 0.29707173004329146, 0.29367141895581217, 0.29991209775682315, 0.08411132397193233, 0.06365137963037959, 0.08793031811873553, 0.08617145293758588, 0.0702876539575602, 0.06725107383605389, 0.06760244845892793, 0.06106875711431492, 0.06892418197004258, 0.12796925140794368, 0.14030038127311273, 0.122338663473477, 0.14036158406458688, 0.17943707621604132, 0.1236012450595616, 0.13704233781690345, 0.16099051147108745, 0.15318464860939207, 0.20092195485772757, 0.20062513508794877, 0.23977922258749407, 0.21199352277154693, 0.18383874151444857, 0.213973972130435, 0.2127341955097951, 0.19585099196697187, 0.2083033667455262, 0.14781391387234255, 0.16453399409946978, 0.17368474371434983, 0.17541276997947464, 0.14858221972119723, 0.1253631293942341, 0.16291288892338274, 0.1528554001857546, 0.14565996277217785, 0.16965220271792592, 0.1643826796589084, 0.19656424780707094, 0.19913135042467933, 0.18945548497597886, 0.1697940459192343, 0.18086688255025085, 0.18340346747277714, 0.17209551838230452, 0.17876332825485974, 0.16468455203924315, 0.18206648204342912, 0.18455110428670773, 0.17177550051954404, 0.1748335606752658, 0.17579455461000304, 0.17662534312880684, 0.17313182240016667, 0.1658900891053574, 0.16201737278739292, 0.14077790568499715, 0.13958271520433974, 0.16681481471298898, 0.13960569472415174, 0.2557070028687809, 0.27965867680929235, 0.3173707888370092, 0.17334810584096705, 0.18177842192213778, 0.1681346564868592, 0.1636732955584359, 0.2107733976826187, 0.284735873828176, 0.13740677931658862, 0.15206668799111356, 0.27671833104772503, 0.1712314343585547, 0.17590381333559546, 0.17147753012535338, 0.18445240620617898, 0.21295742090384473, 0.1624009859454152, 0.17066262126510534, 0.1759476570059083, 0.18236547261259306, 0.06814455397524322, 0.06384208750969189, 0.058749025181152326, 0.07627504779519911, 0.06934429357206229, 0.06365896524908854, 0.09394488123336364, 0.07509196405506846, 0.08380259279713265]}, "mutation_prompt": null}
{"id": "6bc7fc56-b87a-439d-afaa-d42d68a5da8a", "solution": "import numpy as np\n\nclass DynamicInertiaHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n\n        for t in range(1, self.budget+1):\n            # Update velocity based on PSO\n            dynamic_inertia = self.inertia_weight * (1 - t/self.budget)  # Dynamic inertia weight\n            velocity = dynamic_inertia * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate based on individual fitness\n            mutation_rate_adjustment = 0.1 * np.exp(-np.mean(fitness) / np.max(fitness))  # Mutation rate based on mean fitness\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "DynamicInertiaHybridGA_PSO", "description": "Improved convergence speed by introducing a novel mutation strategy that adaptively adjusts the mutation rate based on individual fitness evaluations to accelerate exploration and exploitation.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45b9dbb9-4dac-41b2-baf1-fb678c872082", "metadata": {"aucs": [0.48878672100880705, 0.4925841717924305, 0.5791599286026545, 0.5250197681208089, 0.4964475470416827, 0.5418831930068099, 0.4576239937491252, 0.49497418622314426, 0.48822977617067675, 0.07412194670299865, 0.03777500555842306, 0.06866991810914203, 0.058528747370089174, 0.061874307371803994, 0.042145429846789595, 0.04146061793721478, 0.058192983047160696, 0.008741797314758104, 0.07970537052885229, 0.09828419536708932, 0.10752412830308056, 0.0910845242824051, 0.08578218004888316, 0.09262803372593376, 0.12593036303023475, 0.0863400693152494, 0.11118344552043746, 0.07555447363324619, 0.07779460595998566, 0.0753110048521668, 0.08574727344720634, 0.08337898183443537, 0.06663092003415005, 0.07372712969444295, 0.09214512992676338, 0.08200282691733496, 0.9908547217146776, 0.9751588606913554, 0.9902772166212604, 0.9813274021646949, 0.9862141995275548, 0.9586084017804681, 0.9906083595951416, 0.982518594803537, 0.9860759263216554, 0.24683931375882895, 0.19246420988058022, 0.23701132527490765, 0.23236046691633438, 0.228019366743191, 0.23542767039782075, 0.21428793892884146, 0.20376111180863976, 0.22151550717003954, 0.22743094788940765, 0.2319306878344396, 0.19410501885926557, 0.23590434325701615, 0.5587540565516783, 0.22870673470241432, 0.31760477042324264, 0.24350736522771443, 0.28215201555517555, 0.17939841700369874, 0.11240625121104053, 0.15027300185463632, 9.999999999998899e-05, 0.12447628940671163, 0.11654642823071337, 0.10880149096309144, 0.09176746001947744, 0.12613476050965777, 0.17083628620984292, 0.18905379752915596, 0.13223653981589012, 0.1752596927879977, 0.1434792082966474, 0.14206732800480437, 0.17943982948387693, 0.035008617332589864, 0.09317734082177742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013663571755666237, 0.06961990992670508, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024650474430245595, 9.999999999998899e-05, 9.999999999998899e-05, 0.05574982676612761, 9.999999999998899e-05, 0.08258140916909595, 0.011950629657281775, 0.015815161629715524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09015186931720487, 0.09830959245794224, 0.08820490781839996, 0.09100728815362669, 0.06482336438788372, 0.10769190580993382, 0.04739592895915523, 0.0425374246988407, 0.0531665106072291, 0.4612348376371266, 0.45311073294380466, 0.4455125093400786, 0.46381912540792103, 0.4167019064794638, 0.41468488933904113, 0.462624300659613, 0.4414466339016534, 0.469383275693779, 0.06191586400753135, 0.04249877254137702, 0.0841992469865861, 0.07246361429401726, 0.0666955281402577, 0.0765462431258882, 0.07604002375694885, 0.0740399491568855, 0.10230869877177551, 0.1260793738938395, 0.12874369638150018, 0.1919073683176744, 0.1562295865026977, 0.12412391907988785, 0.30563537647866845, 0.18489214005776844, 0.12415131286169889, 0.21762240214948092, 0.2124849090004266, 0.2003086139023611, 0.22553882367756872, 0.22320780217912428, 0.16658567982859562, 0.1815961866856065, 0.17030647751595074, 0.21325386353305187, 0.28459191342975043, 0.17649405265300755, 0.15696728766325418, 0.16224063238034336, 0.14776510331270165, 0.171167428234127, 0.19484907782328087, 0.18333165597046108, 0.14812668286302488, 0.18792197605107253, 0.21720616849696595, 0.18897174580420628, 0.1746167117812205, 0.15648657509872077, 0.18590662110485723, 0.2031219855848111, 0.18892825908885258, 0.1622338032537084, 0.17400513972977205, 0.1677115308201692, 0.18958912956638074, 0.18048666730067653, 0.18652317105389693, 0.20494692536258297, 0.18845422295192593, 0.18706773692653644, 0.199811342280372, 0.19240200663926132, 0.12161478095579803, 0.125060696010163, 0.15178083281055932, 0.16401243963226375, 0.19787433660354325, 0.12953169501463513, 0.1418129493872633, 0.15794823404035963, 0.1773047443539153, 0.6208870971912787, 0.20723563583045912, 0.07332788636982512, 0.10431595972068886, 0.5865448853250703, 0.1528452498870574, 0.155618396859601, 0.1504985617725908, 0.44990637183867643, 0.18204545202524347, 0.1701960672944297, 0.17918627721885405, 0.17070908079469604, 0.16312776327440737, 0.1749270243047586, 0.20729993778102407, 0.17759061118477237, 0.1687754691719301, 0.06207790463322904, 0.06183200552346657, 0.07027851165544052, 0.07362575852946807, 0.08099609184540191, 0.06295108427779961, 0.0681001639429284, 0.07440733905732655, 0.07660608321402762]}, "mutation_prompt": null}
{"id": "9c6bdf12-8a36-479a-99e6-34e0f2b258ec", "solution": "import numpy as np\n\nclass DynamicInertiaHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n\n        for t in range(1, self.budget+1):\n            # Update velocity based on PSO\n            dynamic_inertia = self.inertia_weight * (1 - t/self.budget)  # Dynamic inertia weight\n            velocity = dynamic_inertia * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate based on individual fitness\n            mutation_rate_adjustment = 0.1 * np.exp(-np.mean(fitness) / np.max(fitness))  # Mutation rate based on mean fitness\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "DynamicInertiaHybridGA_PSO", "description": "Improved convergence speed by introducing a novel mutation strategy that adaptively adjusts the mutation rate based on individual fitness evaluations to accelerate exploration and exploitation.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45b9dbb9-4dac-41b2-baf1-fb678c872082", "metadata": {"aucs": [0.48878672100880705, 0.4925841717924305, 0.5791599286026545, 0.5250197681208089, 0.4964475470416827, 0.5418831930068099, 0.4576239937491252, 0.49497418622314426, 0.48822977617067675, 0.07412194670299865, 0.03777500555842306, 0.06866991810914203, 0.058528747370089174, 0.061874307371803994, 0.042145429846789595, 0.04146061793721478, 0.058192983047160696, 0.008741797314758104, 0.07970537052885229, 0.09828419536708932, 0.10752412830308056, 0.0910845242824051, 0.08578218004888316, 0.09262803372593376, 0.12593036303023475, 0.0863400693152494, 0.11118344552043746, 0.07555447363324619, 0.07779460595998566, 0.0753110048521668, 0.08574727344720634, 0.08337898183443537, 0.06663092003415005, 0.07372712969444295, 0.09214512992676338, 0.08200282691733496, 0.9908547217146776, 0.9751588606913554, 0.9902772166212604, 0.9813274021646949, 0.9862141995275548, 0.9586084017804681, 0.9906083595951416, 0.982518594803537, 0.9860759263216554, 0.24683931375882895, 0.19246420988058022, 0.23701132527490765, 0.23236046691633438, 0.228019366743191, 0.23542767039782075, 0.21428793892884146, 0.20376111180863976, 0.22151550717003954, 0.22743094788940765, 0.2319306878344396, 0.19410501885926557, 0.23590434325701615, 0.5587540565516783, 0.22870673470241432, 0.31760477042324264, 0.24350736522771443, 0.28215201555517555, 0.17939841700369874, 0.11240625121104053, 0.15027300185463632, 9.999999999998899e-05, 0.12447628940671163, 0.11654642823071337, 0.10880149096309144, 0.09176746001947744, 0.12613476050965777, 0.17083628620984292, 0.18905379752915596, 0.13223653981589012, 0.1752596927879977, 0.1434792082966474, 0.14206732800480437, 0.17943982948387693, 0.035008617332589864, 0.09317734082177742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013663571755666237, 0.06961990992670508, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024650474430245595, 9.999999999998899e-05, 9.999999999998899e-05, 0.05574982676612761, 9.999999999998899e-05, 0.08258140916909595, 0.011950629657281775, 0.015815161629715524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09015186931720487, 0.09830959245794224, 0.08820490781839996, 0.09100728815362669, 0.06482336438788372, 0.10769190580993382, 0.04739592895915523, 0.0425374246988407, 0.0531665106072291, 0.4612348376371266, 0.45311073294380466, 0.4455125093400786, 0.46381912540792103, 0.4167019064794638, 0.41468488933904113, 0.462624300659613, 0.4414466339016534, 0.469383275693779, 0.06191586400753135, 0.04249877254137702, 0.0841992469865861, 0.07246361429401726, 0.0666955281402577, 0.0765462431258882, 0.07604002375694885, 0.0740399491568855, 0.10230869877177551, 0.1260793738938395, 0.12874369638150018, 0.1919073683176744, 0.1562295865026977, 0.12412391907988785, 0.30563537647866845, 0.18489214005776844, 0.12415131286169889, 0.21762240214948092, 0.2124849090004266, 0.2003086139023611, 0.22553882367756872, 0.22320780217912428, 0.16658567982859562, 0.1815961866856065, 0.17030647751595074, 0.21325386353305187, 0.28459191342975043, 0.17649405265300755, 0.15696728766325418, 0.16224063238034336, 0.14776510331270165, 0.171167428234127, 0.19484907782328087, 0.18333165597046108, 0.14812668286302488, 0.18792197605107253, 0.21720616849696595, 0.18897174580420628, 0.1746167117812205, 0.15648657509872077, 0.18590662110485723, 0.2031219855848111, 0.18892825908885258, 0.1622338032537084, 0.17400513972977205, 0.1677115308201692, 0.18958912956638074, 0.18048666730067653, 0.18652317105389693, 0.20494692536258297, 0.18845422295192593, 0.18706773692653644, 0.199811342280372, 0.19240200663926132, 0.12161478095579803, 0.125060696010163, 0.15178083281055932, 0.16401243963226375, 0.19787433660354325, 0.12953169501463513, 0.1418129493872633, 0.15794823404035963, 0.1773047443539153, 0.6208870971912787, 0.20723563583045912, 0.07332788636982512, 0.10431595972068886, 0.5865448853250703, 0.1528452498870574, 0.155618396859601, 0.1504985617725908, 0.44990637183867643, 0.18204545202524347, 0.1701960672944297, 0.17918627721885405, 0.17070908079469604, 0.16312776327440737, 0.1749270243047586, 0.20729993778102407, 0.17759061118477237, 0.1687754691719301, 0.06207790463322904, 0.06183200552346657, 0.07027851165544052, 0.07362575852946807, 0.08099609184540191, 0.06295108427779961, 0.0681001639429284, 0.07440733905732655, 0.07660608321402762]}, "mutation_prompt": null}
{"id": "a4cbc9da-bb1f-44a6-87b8-e4df3c8b56ee", "solution": "import numpy as np\n\nclass DynamicInertiaHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n\n        for t in range(1, self.budget+1):\n            # Update velocity based on PSO\n            dynamic_inertia = self.inertia_weight * (1 - t/self.budget)  # Dynamic inertia weight\n            velocity = dynamic_inertia * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate based on individual fitness\n            mutation_rate_adjustment = 0.1 * np.exp(-np.mean(fitness) / np.max(fitness))  # Mutation rate based on mean fitness\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "DynamicInertiaHybridGA_PSO", "description": "Improved convergence speed by introducing a novel mutation strategy that adaptively adjusts the mutation rate based on individual fitness evaluations to accelerate exploration and exploitation.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45b9dbb9-4dac-41b2-baf1-fb678c872082", "metadata": {"aucs": [0.48878672100880705, 0.4925841717924305, 0.5791599286026545, 0.5250197681208089, 0.4964475470416827, 0.5418831930068099, 0.4576239937491252, 0.49497418622314426, 0.48822977617067675, 0.07412194670299865, 0.03777500555842306, 0.06866991810914203, 0.058528747370089174, 0.061874307371803994, 0.042145429846789595, 0.04146061793721478, 0.058192983047160696, 0.008741797314758104, 0.07970537052885229, 0.09828419536708932, 0.10752412830308056, 0.0910845242824051, 0.08578218004888316, 0.09262803372593376, 0.12593036303023475, 0.0863400693152494, 0.11118344552043746, 0.07555447363324619, 0.07779460595998566, 0.0753110048521668, 0.08574727344720634, 0.08337898183443537, 0.06663092003415005, 0.07372712969444295, 0.09214512992676338, 0.08200282691733496, 0.9908547217146776, 0.9751588606913554, 0.9902772166212604, 0.9813274021646949, 0.9862141995275548, 0.9586084017804681, 0.9906083595951416, 0.982518594803537, 0.9860759263216554, 0.24683931375882895, 0.19246420988058022, 0.23701132527490765, 0.23236046691633438, 0.228019366743191, 0.23542767039782075, 0.21428793892884146, 0.20376111180863976, 0.22151550717003954, 0.22743094788940765, 0.2319306878344396, 0.19410501885926557, 0.23590434325701615, 0.5587540565516783, 0.22870673470241432, 0.31760477042324264, 0.24350736522771443, 0.28215201555517555, 0.17939841700369874, 0.11240625121104053, 0.15027300185463632, 9.999999999998899e-05, 0.12447628940671163, 0.11654642823071337, 0.10880149096309144, 0.09176746001947744, 0.12613476050965777, 0.17083628620984292, 0.18905379752915596, 0.13223653981589012, 0.1752596927879977, 0.1434792082966474, 0.14206732800480437, 0.17943982948387693, 0.035008617332589864, 0.09317734082177742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013663571755666237, 0.06961990992670508, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024650474430245595, 9.999999999998899e-05, 9.999999999998899e-05, 0.05574982676612761, 9.999999999998899e-05, 0.08258140916909595, 0.011950629657281775, 0.015815161629715524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09015186931720487, 0.09830959245794224, 0.08820490781839996, 0.09100728815362669, 0.06482336438788372, 0.10769190580993382, 0.04739592895915523, 0.0425374246988407, 0.0531665106072291, 0.4612348376371266, 0.45311073294380466, 0.4455125093400786, 0.46381912540792103, 0.4167019064794638, 0.41468488933904113, 0.462624300659613, 0.4414466339016534, 0.469383275693779, 0.06191586400753135, 0.04249877254137702, 0.0841992469865861, 0.07246361429401726, 0.0666955281402577, 0.0765462431258882, 0.07604002375694885, 0.0740399491568855, 0.10230869877177551, 0.1260793738938395, 0.12874369638150018, 0.1919073683176744, 0.1562295865026977, 0.12412391907988785, 0.30563537647866845, 0.18489214005776844, 0.12415131286169889, 0.21762240214948092, 0.2124849090004266, 0.2003086139023611, 0.22553882367756872, 0.22320780217912428, 0.16658567982859562, 0.1815961866856065, 0.17030647751595074, 0.21325386353305187, 0.28459191342975043, 0.17649405265300755, 0.15696728766325418, 0.16224063238034336, 0.14776510331270165, 0.171167428234127, 0.19484907782328087, 0.18333165597046108, 0.14812668286302488, 0.18792197605107253, 0.21720616849696595, 0.18897174580420628, 0.1746167117812205, 0.15648657509872077, 0.18590662110485723, 0.2031219855848111, 0.18892825908885258, 0.1622338032537084, 0.17400513972977205, 0.1677115308201692, 0.18958912956638074, 0.18048666730067653, 0.18652317105389693, 0.20494692536258297, 0.18845422295192593, 0.18706773692653644, 0.199811342280372, 0.19240200663926132, 0.12161478095579803, 0.125060696010163, 0.15178083281055932, 0.16401243963226375, 0.19787433660354325, 0.12953169501463513, 0.1418129493872633, 0.15794823404035963, 0.1773047443539153, 0.6208870971912787, 0.20723563583045912, 0.07332788636982512, 0.10431595972068886, 0.5865448853250703, 0.1528452498870574, 0.155618396859601, 0.1504985617725908, 0.44990637183867643, 0.18204545202524347, 0.1701960672944297, 0.17918627721885405, 0.17070908079469604, 0.16312776327440737, 0.1749270243047586, 0.20729993778102407, 0.17759061118477237, 0.1687754691719301, 0.06207790463322904, 0.06183200552346657, 0.07027851165544052, 0.07362575852946807, 0.08099609184540191, 0.06295108427779961, 0.0681001639429284, 0.07440733905732655, 0.07660608321402762]}, "mutation_prompt": null}
{"id": "9a7f7d78-2b8b-4322-8548-566abbbc21a7", "solution": "import numpy as np\n\nclass DynamicMutationHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n\n        for t in range(1, self.budget+1):\n            # Update velocity based on PSO\n            dynamic_inertia = self.inertia_weight * (1 - t/self.budget)  # Dynamic inertia weight\n            velocity = dynamic_inertia * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate based on individual fitness\n            mutation_rate_adjustment = 0.1 * np.exp(-np.mean(fitness) / np.max(fitness))  # Mutation rate based on mean fitness\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "DynamicMutationHybridGA_PSO", "description": "Implementing a dynamic mutation strategy to adaptively adjust mutation rates based on individual fitness evaluations to enhance exploration and exploitation, accelerating convergence speed.", "configspace": "", "generation": 90, "fitness": 0.1957438469195569, "feedback": "The algorithm DynamicMutationHybridGA_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.21.", "error": "", "parent_id": "45b9dbb9-4dac-41b2-baf1-fb678c872082", "metadata": {"aucs": [0.48878672100880705, 0.4925841717924305, 0.5791599286026545, 0.5250197681208089, 0.4964475470416827, 0.5418831930068099, 0.4576239937491252, 0.49497418622314426, 0.48822977617067675, 0.07412194670299865, 0.03777500555842306, 0.06866991810914203, 0.058528747370089174, 0.061874307371803994, 0.042145429846789595, 0.04146061793721478, 0.058192983047160696, 0.008741797314758104, 0.07970537052885229, 0.09828419536708932, 0.10752412830308056, 0.0910845242824051, 0.08578218004888316, 0.09262803372593376, 0.12593036303023475, 0.0863400693152494, 0.11118344552043746, 0.07555447363324619, 0.07779460595998566, 0.0753110048521668, 0.08574727344720634, 0.08337898183443537, 0.06663092003415005, 0.07372712969444295, 0.09214512992676338, 0.08200282691733496, 0.9908547217146776, 0.9751588606913554, 0.9902772166212604, 0.9813274021646949, 0.9862141995275548, 0.9586084017804681, 0.9906083595951416, 0.982518594803537, 0.9860759263216554, 0.24683931375882895, 0.19246420988058022, 0.23701132527490765, 0.23236046691633438, 0.228019366743191, 0.23542767039782075, 0.21428793892884146, 0.20376111180863976, 0.22151550717003954, 0.22743094788940765, 0.2319306878344396, 0.19410501885926557, 0.23590434325701615, 0.5587540565516783, 0.22870673470241432, 0.31760477042324264, 0.24350736522771443, 0.28215201555517555, 0.17939841700369874, 0.11240625121104053, 0.15027300185463632, 9.999999999998899e-05, 0.12447628940671163, 0.11654642823071337, 0.10880149096309144, 0.09176746001947744, 0.12613476050965777, 0.17083628620984292, 0.18905379752915596, 0.13223653981589012, 0.1752596927879977, 0.1434792082966474, 0.14206732800480437, 0.17943982948387693, 0.035008617332589864, 0.09317734082177742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013663571755666237, 0.06961990992670508, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024650474430245595, 9.999999999998899e-05, 9.999999999998899e-05, 0.05574982676612761, 9.999999999998899e-05, 0.08258140916909595, 0.011950629657281775, 0.015815161629715524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09015186931720487, 0.09830959245794224, 0.08820490781839996, 0.09100728815362669, 0.06482336438788372, 0.10769190580993382, 0.04739592895915523, 0.0425374246988407, 0.0531665106072291, 0.4612348376371266, 0.45311073294380466, 0.4455125093400786, 0.46381912540792103, 0.4167019064794638, 0.41468488933904113, 0.462624300659613, 0.4414466339016534, 0.469383275693779, 0.06191586400753135, 0.04249877254137702, 0.0841992469865861, 0.07246361429401726, 0.0666955281402577, 0.0765462431258882, 0.07604002375694885, 0.0740399491568855, 0.10230869877177551, 0.1260793738938395, 0.12874369638150018, 0.1919073683176744, 0.1562295865026977, 0.12412391907988785, 0.30563537647866845, 0.18489214005776844, 0.12415131286169889, 0.21762240214948092, 0.2124849090004266, 0.2003086139023611, 0.22553882367756872, 0.22320780217912428, 0.16658567982859562, 0.1815961866856065, 0.17030647751595074, 0.21325386353305187, 0.28459191342975043, 0.17649405265300755, 0.15696728766325418, 0.16224063238034336, 0.14776510331270165, 0.171167428234127, 0.19484907782328087, 0.18333165597046108, 0.14812668286302488, 0.18792197605107253, 0.21720616849696595, 0.18897174580420628, 0.1746167117812205, 0.15648657509872077, 0.18590662110485723, 0.2031219855848111, 0.18892825908885258, 0.1622338032537084, 0.17400513972977205, 0.1677115308201692, 0.18958912956638074, 0.18048666730067653, 0.18652317105389693, 0.20494692536258297, 0.18845422295192593, 0.18706773692653644, 0.199811342280372, 0.19240200663926132, 0.12161478095579803, 0.125060696010163, 0.15178083281055932, 0.16401243963226375, 0.19787433660354325, 0.12953169501463513, 0.1418129493872633, 0.15794823404035963, 0.1773047443539153, 0.6208870971912787, 0.20723563583045912, 0.07332788636982512, 0.10431595972068886, 0.5865448853250703, 0.1528452498870574, 0.155618396859601, 0.1504985617725908, 0.44990637183867643, 0.18204545202524347, 0.1701960672944297, 0.17918627721885405, 0.17070908079469604, 0.16312776327440737, 0.1749270243047586, 0.20729993778102407, 0.17759061118477237, 0.1687754691719301, 0.06207790463322904, 0.06183200552346657, 0.07027851165544052, 0.07362575852946807, 0.08099609184540191, 0.06295108427779961, 0.0681001639429284, 0.07440733905732655, 0.07660608321402762]}, "mutation_prompt": null}
{"id": "5beef8a2-9260-49c4-97e6-bd6d29cd6aa7", "solution": "import numpy as np\n\nclass DynamicPopulationResize_InertiaHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.init_population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population_size = self.init_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((population_size, self.dim))  # Initialize velocity\n\n        for t in range(1, self.budget+1):\n            # Update velocity based on PSO\n            dynamic_inertia = self.inertia_weight * (1 - t/self.budget)  # Dynamic inertia weight\n            velocity = dynamic_inertia * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate based on individual fitness\n            mutation_rate_adjustment = 0.1 * np.exp(-np.mean(fitness) / np.max(fitness))  # Mutation rate based on mean fitness\n            mutation_mask = np.random.rand(population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n            \n            # Dynamic population resizing\n            if t % (self.budget // 10) == 0:\n                population_size = int(np.clip(population_size * 1.1, self.init_population_size, 1e6))\n                population = np.vstack((population, np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim)))\n                velocity = np.vstack((velocity, np.zeros((population_size - len(velocity), self.dim)))\n        \n        return global_best", "name": "DynamicPopulationResize_InertiaHybridGA_PSO", "description": "Utilize a dynamic population resizing strategy to improve convergence speed.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 43, 17, '                velocity = np.vstack((velocity, np.zeros((population_size - len(velocity), self.dim)))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 43, 17, '                velocity = np.vstack((velocity, np.zeros((population_size - len(velocity), self.dim)))\\n'))", "parent_id": "45b9dbb9-4dac-41b2-baf1-fb678c872082", "metadata": {}, "mutation_prompt": null}
{"id": "c8ccb9c5-8d8a-4041-837b-0b0aef91c7dc", "solution": "import numpy as np\n\nclass DynamicInertiaHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n\n        for t in range(1, self.budget+1):\n            # Dynamic population size adjustment\n            if t % (self.budget // 5) == 0:\n                self.population_size += 10\n                population = np.vstack((population, np.random.uniform(-5.0, 5.0, (10, self.dim))))\n                velocity = np.vstack((velocity, np.zeros((10, self.dim))))\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in population[-10:]])))\n\n            # Update velocity based on PSO\n            dynamic_inertia = self.inertia_weight * (1 - t/self.budget)  # Dynamic inertia weight\n            velocity = dynamic_inertia * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate based on individual fitness\n            mutation_rate_adjustment = 0.1 * np.exp(-np.mean(fitness) / np.max(fitness))  # Mutation rate based on mean fitness\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "DynamicInertiaHybridGA_PSO", "description": "Increasing the population size dynamically during the optimization process to improve exploration and convergence speed.", "configspace": "", "generation": 92, "fitness": 0.1957438469195569, "feedback": "The algorithm DynamicInertiaHybridGA_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.21.", "error": "", "parent_id": "45b9dbb9-4dac-41b2-baf1-fb678c872082", "metadata": {"aucs": [0.48878672100880705, 0.4925841717924305, 0.5791599286026545, 0.5250197681208089, 0.4964475470416827, 0.5418831930068099, 0.4576239937491252, 0.49497418622314426, 0.48822977617067675, 0.07412194670299865, 0.03777500555842306, 0.06866991810914203, 0.058528747370089174, 0.061874307371803994, 0.042145429846789595, 0.04146061793721478, 0.058192983047160696, 0.008741797314758104, 0.07970537052885229, 0.09828419536708932, 0.10752412830308056, 0.0910845242824051, 0.08578218004888316, 0.09262803372593376, 0.12593036303023475, 0.0863400693152494, 0.11118344552043746, 0.07555447363324619, 0.07779460595998566, 0.0753110048521668, 0.08574727344720634, 0.08337898183443537, 0.06663092003415005, 0.07372712969444295, 0.09214512992676338, 0.08200282691733496, 0.9908547217146776, 0.9751588606913554, 0.9902772166212604, 0.9813274021646949, 0.9862141995275548, 0.9586084017804681, 0.9906083595951416, 0.982518594803537, 0.9860759263216554, 0.24683931375882895, 0.19246420988058022, 0.23701132527490765, 0.23236046691633438, 0.228019366743191, 0.23542767039782075, 0.21428793892884146, 0.20376111180863976, 0.22151550717003954, 0.22743094788940765, 0.2319306878344396, 0.19410501885926557, 0.23590434325701615, 0.5587540565516783, 0.22870673470241432, 0.31760477042324264, 0.24350736522771443, 0.28215201555517555, 0.17939841700369874, 0.11240625121104053, 0.15027300185463632, 9.999999999998899e-05, 0.12447628940671163, 0.11654642823071337, 0.10880149096309144, 0.09176746001947744, 0.12613476050965777, 0.17083628620984292, 0.18905379752915596, 0.13223653981589012, 0.1752596927879977, 0.1434792082966474, 0.14206732800480437, 0.17943982948387693, 0.035008617332589864, 0.09317734082177742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013663571755666237, 0.06961990992670508, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024650474430245595, 9.999999999998899e-05, 9.999999999998899e-05, 0.05574982676612761, 9.999999999998899e-05, 0.08258140916909595, 0.011950629657281775, 0.015815161629715524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09015186931720487, 0.09830959245794224, 0.08820490781839996, 0.09100728815362669, 0.06482336438788372, 0.10769190580993382, 0.04739592895915523, 0.0425374246988407, 0.0531665106072291, 0.4612348376371266, 0.45311073294380466, 0.4455125093400786, 0.46381912540792103, 0.4167019064794638, 0.41468488933904113, 0.462624300659613, 0.4414466339016534, 0.469383275693779, 0.06191586400753135, 0.04249877254137702, 0.0841992469865861, 0.07246361429401726, 0.0666955281402577, 0.0765462431258882, 0.07604002375694885, 0.0740399491568855, 0.10230869877177551, 0.1260793738938395, 0.12874369638150018, 0.1919073683176744, 0.1562295865026977, 0.12412391907988785, 0.30563537647866845, 0.18489214005776844, 0.12415131286169889, 0.21762240214948092, 0.2124849090004266, 0.2003086139023611, 0.22553882367756872, 0.22320780217912428, 0.16658567982859562, 0.1815961866856065, 0.17030647751595074, 0.21325386353305187, 0.28459191342975043, 0.17649405265300755, 0.15696728766325418, 0.16224063238034336, 0.14776510331270165, 0.171167428234127, 0.19484907782328087, 0.18333165597046108, 0.14812668286302488, 0.18792197605107253, 0.21720616849696595, 0.18897174580420628, 0.1746167117812205, 0.15648657509872077, 0.18590662110485723, 0.2031219855848111, 0.18892825908885258, 0.1622338032537084, 0.17400513972977205, 0.1677115308201692, 0.18958912956638074, 0.18048666730067653, 0.18652317105389693, 0.20494692536258297, 0.18845422295192593, 0.18706773692653644, 0.199811342280372, 0.19240200663926132, 0.12161478095579803, 0.125060696010163, 0.15178083281055932, 0.16401243963226375, 0.19787433660354325, 0.12953169501463513, 0.1418129493872633, 0.15794823404035963, 0.1773047443539153, 0.6208870971912787, 0.20723563583045912, 0.07332788636982512, 0.10431595972068886, 0.5865448853250703, 0.1528452498870574, 0.155618396859601, 0.1504985617725908, 0.44990637183867643, 0.18204545202524347, 0.1701960672944297, 0.17918627721885405, 0.17070908079469604, 0.16312776327440737, 0.1749270243047586, 0.20729993778102407, 0.17759061118477237, 0.1687754691719301, 0.06207790463322904, 0.06183200552346657, 0.07027851165544052, 0.07362575852946807, 0.08099609184540191, 0.06295108427779961, 0.0681001639429284, 0.07440733905732655, 0.07660608321402762]}, "mutation_prompt": null}
{"id": "7c058ab8-d8b5-4419-b386-19222f39fe0f", "solution": "import numpy as np\n\nclass DynamicPopulationResizingHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n\n        for t in range(1, self.budget+1):\n            # Update velocity based on PSO\n            dynamic_inertia = self.inertia_weight * (1 - t/self.budget)  # Dynamic inertia weight\n            velocity = dynamic_inertia * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate based on individual fitness\n            mutation_rate_adjustment = 0.1 * np.exp(-np.mean(fitness) / np.max(fitness))  # Mutation rate based on mean fitness\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n            \n            # Dynamic resizing of the population\n            if t % 100 == 0:  # Resize every 100 iterations\n                if np.random.rand() < 0.5:  # Randomly decide to increase or decrease population size\n                    population = np.concatenate((population, np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))), axis=0)\n                    fitness = np.concatenate((fitness, np.array([func(ind) for ind in population[-self.population_size:]])))\n                else:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    \n                    best_idx = np.argmin(fitness)\n                    best_individual = population[best_idx]\n                    global_best = population[best_idx]\n        \n        return global_best", "name": "DynamicPopulationResizingHybridGA_PSO", "description": "Implementing a dynamic population resizing strategy to adaptively adjust the number of individuals in the population during optimization to enhance convergence speed.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (50,5) (49,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (50,5) (49,5) ')", "parent_id": "45b9dbb9-4dac-41b2-baf1-fb678c872082", "metadata": {}, "mutation_prompt": null}
{"id": "8496ce8a-b843-4e64-b68d-877e3684d9ec", "solution": "import numpy as np\n\nclass DynamicInertiaHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n\n        for t in range(1, self.budget+1):\n            # Update velocity based on PSO\n            dynamic_inertia = self.inertia_weight * (1 - t/self.budget)  # Dynamic inertia weight\n            velocity = dynamic_inertia * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate based on individual fitness\n            mutation_rate_adjustment = 0.1 * np.exp(-np.mean(fitness) / np.max(fitness))  # Mutation rate based on mean fitness\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "DynamicInertiaHybridGA_PSO", "description": "Improved convergence speed by introducing a novel mutation strategy that adaptively adjusts the mutation rate based on individual fitness evaluations to accelerate exploration and exploitation.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45b9dbb9-4dac-41b2-baf1-fb678c872082", "metadata": {"aucs": [0.48878672100880705, 0.4925841717924305, 0.5791599286026545, 0.5250197681208089, 0.4964475470416827, 0.5418831930068099, 0.4576239937491252, 0.49497418622314426, 0.48822977617067675, 0.07412194670299865, 0.03777500555842306, 0.06866991810914203, 0.058528747370089174, 0.061874307371803994, 0.042145429846789595, 0.04146061793721478, 0.058192983047160696, 0.008741797314758104, 0.07970537052885229, 0.09828419536708932, 0.10752412830308056, 0.0910845242824051, 0.08578218004888316, 0.09262803372593376, 0.12593036303023475, 0.0863400693152494, 0.11118344552043746, 0.07555447363324619, 0.07779460595998566, 0.0753110048521668, 0.08574727344720634, 0.08337898183443537, 0.06663092003415005, 0.07372712969444295, 0.09214512992676338, 0.08200282691733496, 0.9908547217146776, 0.9751588606913554, 0.9902772166212604, 0.9813274021646949, 0.9862141995275548, 0.9586084017804681, 0.9906083595951416, 0.982518594803537, 0.9860759263216554, 0.24683931375882895, 0.19246420988058022, 0.23701132527490765, 0.23236046691633438, 0.228019366743191, 0.23542767039782075, 0.21428793892884146, 0.20376111180863976, 0.22151550717003954, 0.22743094788940765, 0.2319306878344396, 0.19410501885926557, 0.23590434325701615, 0.5587540565516783, 0.22870673470241432, 0.31760477042324264, 0.24350736522771443, 0.28215201555517555, 0.17939841700369874, 0.11240625121104053, 0.15027300185463632, 9.999999999998899e-05, 0.12447628940671163, 0.11654642823071337, 0.10880149096309144, 0.09176746001947744, 0.12613476050965777, 0.17083628620984292, 0.18905379752915596, 0.13223653981589012, 0.1752596927879977, 0.1434792082966474, 0.14206732800480437, 0.17943982948387693, 0.035008617332589864, 0.09317734082177742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013663571755666237, 0.06961990992670508, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024650474430245595, 9.999999999998899e-05, 9.999999999998899e-05, 0.05574982676612761, 9.999999999998899e-05, 0.08258140916909595, 0.011950629657281775, 0.015815161629715524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09015186931720487, 0.09830959245794224, 0.08820490781839996, 0.09100728815362669, 0.06482336438788372, 0.10769190580993382, 0.04739592895915523, 0.0425374246988407, 0.0531665106072291, 0.4612348376371266, 0.45311073294380466, 0.4455125093400786, 0.46381912540792103, 0.4167019064794638, 0.41468488933904113, 0.462624300659613, 0.4414466339016534, 0.469383275693779, 0.06191586400753135, 0.04249877254137702, 0.0841992469865861, 0.07246361429401726, 0.0666955281402577, 0.0765462431258882, 0.07604002375694885, 0.0740399491568855, 0.10230869877177551, 0.1260793738938395, 0.12874369638150018, 0.1919073683176744, 0.1562295865026977, 0.12412391907988785, 0.30563537647866845, 0.18489214005776844, 0.12415131286169889, 0.21762240214948092, 0.2124849090004266, 0.2003086139023611, 0.22553882367756872, 0.22320780217912428, 0.16658567982859562, 0.1815961866856065, 0.17030647751595074, 0.21325386353305187, 0.28459191342975043, 0.17649405265300755, 0.15696728766325418, 0.16224063238034336, 0.14776510331270165, 0.171167428234127, 0.19484907782328087, 0.18333165597046108, 0.14812668286302488, 0.18792197605107253, 0.21720616849696595, 0.18897174580420628, 0.1746167117812205, 0.15648657509872077, 0.18590662110485723, 0.2031219855848111, 0.18892825908885258, 0.1622338032537084, 0.17400513972977205, 0.1677115308201692, 0.18958912956638074, 0.18048666730067653, 0.18652317105389693, 0.20494692536258297, 0.18845422295192593, 0.18706773692653644, 0.199811342280372, 0.19240200663926132, 0.12161478095579803, 0.125060696010163, 0.15178083281055932, 0.16401243963226375, 0.19787433660354325, 0.12953169501463513, 0.1418129493872633, 0.15794823404035963, 0.1773047443539153, 0.6208870971912787, 0.20723563583045912, 0.07332788636982512, 0.10431595972068886, 0.5865448853250703, 0.1528452498870574, 0.155618396859601, 0.1504985617725908, 0.44990637183867643, 0.18204545202524347, 0.1701960672944297, 0.17918627721885405, 0.17070908079469604, 0.16312776327440737, 0.1749270243047586, 0.20729993778102407, 0.17759061118477237, 0.1687754691719301, 0.06207790463322904, 0.06183200552346657, 0.07027851165544052, 0.07362575852946807, 0.08099609184540191, 0.06295108427779961, 0.0681001639429284, 0.07440733905732655, 0.07660608321402762]}, "mutation_prompt": null}
{"id": "b110701f-82fb-4139-86c5-d45f8c5bf9a7", "solution": "import numpy as np\n\nclass DynamicInertiaHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n\n        for t in range(1, self.budget+1):\n            # Update velocity based on PSO\n            dynamic_inertia = self.inertia_weight * (1 - t/self.budget)  # Dynamic inertia weight\n            velocity = dynamic_inertia * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate based on individual fitness\n            mutation_rate_adjustment = 0.1 * np.exp(-np.mean(fitness) / np.max(fitness))  # Mutation rate based on mean fitness\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "DynamicInertiaHybridGA_PSO", "description": "Improved convergence speed by introducing a novel mutation strategy that adaptively adjusts the mutation rate based on individual fitness evaluations to accelerate exploration and exploitation.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45b9dbb9-4dac-41b2-baf1-fb678c872082", "metadata": {"aucs": [0.48878672100880705, 0.4925841717924305, 0.5791599286026545, 0.5250197681208089, 0.4964475470416827, 0.5418831930068099, 0.4576239937491252, 0.49497418622314426, 0.48822977617067675, 0.07412194670299865, 0.03777500555842306, 0.06866991810914203, 0.058528747370089174, 0.061874307371803994, 0.042145429846789595, 0.04146061793721478, 0.058192983047160696, 0.008741797314758104, 0.07970537052885229, 0.09828419536708932, 0.10752412830308056, 0.0910845242824051, 0.08578218004888316, 0.09262803372593376, 0.12593036303023475, 0.0863400693152494, 0.11118344552043746, 0.07555447363324619, 0.07779460595998566, 0.0753110048521668, 0.08574727344720634, 0.08337898183443537, 0.06663092003415005, 0.07372712969444295, 0.09214512992676338, 0.08200282691733496, 0.9908547217146776, 0.9751588606913554, 0.9902772166212604, 0.9813274021646949, 0.9862141995275548, 0.9586084017804681, 0.9906083595951416, 0.982518594803537, 0.9860759263216554, 0.24683931375882895, 0.19246420988058022, 0.23701132527490765, 0.23236046691633438, 0.228019366743191, 0.23542767039782075, 0.21428793892884146, 0.20376111180863976, 0.22151550717003954, 0.22743094788940765, 0.2319306878344396, 0.19410501885926557, 0.23590434325701615, 0.5587540565516783, 0.22870673470241432, 0.31760477042324264, 0.24350736522771443, 0.28215201555517555, 0.17939841700369874, 0.11240625121104053, 0.15027300185463632, 9.999999999998899e-05, 0.12447628940671163, 0.11654642823071337, 0.10880149096309144, 0.09176746001947744, 0.12613476050965777, 0.17083628620984292, 0.18905379752915596, 0.13223653981589012, 0.1752596927879977, 0.1434792082966474, 0.14206732800480437, 0.17943982948387693, 0.035008617332589864, 0.09317734082177742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013663571755666237, 0.06961990992670508, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024650474430245595, 9.999999999998899e-05, 9.999999999998899e-05, 0.05574982676612761, 9.999999999998899e-05, 0.08258140916909595, 0.011950629657281775, 0.015815161629715524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09015186931720487, 0.09830959245794224, 0.08820490781839996, 0.09100728815362669, 0.06482336438788372, 0.10769190580993382, 0.04739592895915523, 0.0425374246988407, 0.0531665106072291, 0.4612348376371266, 0.45311073294380466, 0.4455125093400786, 0.46381912540792103, 0.4167019064794638, 0.41468488933904113, 0.462624300659613, 0.4414466339016534, 0.469383275693779, 0.06191586400753135, 0.04249877254137702, 0.0841992469865861, 0.07246361429401726, 0.0666955281402577, 0.0765462431258882, 0.07604002375694885, 0.0740399491568855, 0.10230869877177551, 0.1260793738938395, 0.12874369638150018, 0.1919073683176744, 0.1562295865026977, 0.12412391907988785, 0.30563537647866845, 0.18489214005776844, 0.12415131286169889, 0.21762240214948092, 0.2124849090004266, 0.2003086139023611, 0.22553882367756872, 0.22320780217912428, 0.16658567982859562, 0.1815961866856065, 0.17030647751595074, 0.21325386353305187, 0.28459191342975043, 0.17649405265300755, 0.15696728766325418, 0.16224063238034336, 0.14776510331270165, 0.171167428234127, 0.19484907782328087, 0.18333165597046108, 0.14812668286302488, 0.18792197605107253, 0.21720616849696595, 0.18897174580420628, 0.1746167117812205, 0.15648657509872077, 0.18590662110485723, 0.2031219855848111, 0.18892825908885258, 0.1622338032537084, 0.17400513972977205, 0.1677115308201692, 0.18958912956638074, 0.18048666730067653, 0.18652317105389693, 0.20494692536258297, 0.18845422295192593, 0.18706773692653644, 0.199811342280372, 0.19240200663926132, 0.12161478095579803, 0.125060696010163, 0.15178083281055932, 0.16401243963226375, 0.19787433660354325, 0.12953169501463513, 0.1418129493872633, 0.15794823404035963, 0.1773047443539153, 0.6208870971912787, 0.20723563583045912, 0.07332788636982512, 0.10431595972068886, 0.5865448853250703, 0.1528452498870574, 0.155618396859601, 0.1504985617725908, 0.44990637183867643, 0.18204545202524347, 0.1701960672944297, 0.17918627721885405, 0.17070908079469604, 0.16312776327440737, 0.1749270243047586, 0.20729993778102407, 0.17759061118477237, 0.1687754691719301, 0.06207790463322904, 0.06183200552346657, 0.07027851165544052, 0.07362575852946807, 0.08099609184540191, 0.06295108427779961, 0.0681001639429284, 0.07440733905732655, 0.07660608321402762]}, "mutation_prompt": null}
{"id": "605bfe1f-97db-441b-ac47-07635fd33d2c", "solution": "import numpy as np\n\nclass DynamicInertiaHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n\n        for t in range(1, self.budget+1):\n            # Update velocity based on PSO\n            dynamic_inertia = self.inertia_weight * (1 - t/self.budget)  # Dynamic inertia weight\n            velocity = dynamic_inertia * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate based on individual fitness\n            mutation_rate_adjustment = 0.1 * np.exp(-np.mean(fitness) / np.max(fitness))  # Mutation rate based on mean fitness\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "DynamicInertiaHybridGA_PSO", "description": "Improved convergence speed by introducing a novel mutation strategy that adaptively adjusts the mutation rate based on individual fitness evaluations to accelerate exploration and exploitation.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45b9dbb9-4dac-41b2-baf1-fb678c872082", "metadata": {"aucs": [0.48878672100880705, 0.4925841717924305, 0.5791599286026545, 0.5250197681208089, 0.4964475470416827, 0.5418831930068099, 0.4576239937491252, 0.49497418622314426, 0.48822977617067675, 0.07412194670299865, 0.03777500555842306, 0.06866991810914203, 0.058528747370089174, 0.061874307371803994, 0.042145429846789595, 0.04146061793721478, 0.058192983047160696, 0.008741797314758104, 0.07970537052885229, 0.09828419536708932, 0.10752412830308056, 0.0910845242824051, 0.08578218004888316, 0.09262803372593376, 0.12593036303023475, 0.0863400693152494, 0.11118344552043746, 0.07555447363324619, 0.07779460595998566, 0.0753110048521668, 0.08574727344720634, 0.08337898183443537, 0.06663092003415005, 0.07372712969444295, 0.09214512992676338, 0.08200282691733496, 0.9908547217146776, 0.9751588606913554, 0.9902772166212604, 0.9813274021646949, 0.9862141995275548, 0.9586084017804681, 0.9906083595951416, 0.982518594803537, 0.9860759263216554, 0.24683931375882895, 0.19246420988058022, 0.23701132527490765, 0.23236046691633438, 0.228019366743191, 0.23542767039782075, 0.21428793892884146, 0.20376111180863976, 0.22151550717003954, 0.22743094788940765, 0.2319306878344396, 0.19410501885926557, 0.23590434325701615, 0.5587540565516783, 0.22870673470241432, 0.31760477042324264, 0.24350736522771443, 0.28215201555517555, 0.17939841700369874, 0.11240625121104053, 0.15027300185463632, 9.999999999998899e-05, 0.12447628940671163, 0.11654642823071337, 0.10880149096309144, 0.09176746001947744, 0.12613476050965777, 0.17083628620984292, 0.18905379752915596, 0.13223653981589012, 0.1752596927879977, 0.1434792082966474, 0.14206732800480437, 0.17943982948387693, 0.035008617332589864, 0.09317734082177742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013663571755666237, 0.06961990992670508, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024650474430245595, 9.999999999998899e-05, 9.999999999998899e-05, 0.05574982676612761, 9.999999999998899e-05, 0.08258140916909595, 0.011950629657281775, 0.015815161629715524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09015186931720487, 0.09830959245794224, 0.08820490781839996, 0.09100728815362669, 0.06482336438788372, 0.10769190580993382, 0.04739592895915523, 0.0425374246988407, 0.0531665106072291, 0.4612348376371266, 0.45311073294380466, 0.4455125093400786, 0.46381912540792103, 0.4167019064794638, 0.41468488933904113, 0.462624300659613, 0.4414466339016534, 0.469383275693779, 0.06191586400753135, 0.04249877254137702, 0.0841992469865861, 0.07246361429401726, 0.0666955281402577, 0.0765462431258882, 0.07604002375694885, 0.0740399491568855, 0.10230869877177551, 0.1260793738938395, 0.12874369638150018, 0.1919073683176744, 0.1562295865026977, 0.12412391907988785, 0.30563537647866845, 0.18489214005776844, 0.12415131286169889, 0.21762240214948092, 0.2124849090004266, 0.2003086139023611, 0.22553882367756872, 0.22320780217912428, 0.16658567982859562, 0.1815961866856065, 0.17030647751595074, 0.21325386353305187, 0.28459191342975043, 0.17649405265300755, 0.15696728766325418, 0.16224063238034336, 0.14776510331270165, 0.171167428234127, 0.19484907782328087, 0.18333165597046108, 0.14812668286302488, 0.18792197605107253, 0.21720616849696595, 0.18897174580420628, 0.1746167117812205, 0.15648657509872077, 0.18590662110485723, 0.2031219855848111, 0.18892825908885258, 0.1622338032537084, 0.17400513972977205, 0.1677115308201692, 0.18958912956638074, 0.18048666730067653, 0.18652317105389693, 0.20494692536258297, 0.18845422295192593, 0.18706773692653644, 0.199811342280372, 0.19240200663926132, 0.12161478095579803, 0.125060696010163, 0.15178083281055932, 0.16401243963226375, 0.19787433660354325, 0.12953169501463513, 0.1418129493872633, 0.15794823404035963, 0.1773047443539153, 0.6208870971912787, 0.20723563583045912, 0.07332788636982512, 0.10431595972068886, 0.5865448853250703, 0.1528452498870574, 0.155618396859601, 0.1504985617725908, 0.44990637183867643, 0.18204545202524347, 0.1701960672944297, 0.17918627721885405, 0.17070908079469604, 0.16312776327440737, 0.1749270243047586, 0.20729993778102407, 0.17759061118477237, 0.1687754691719301, 0.06207790463322904, 0.06183200552346657, 0.07027851165544052, 0.07362575852946807, 0.08099609184540191, 0.06295108427779961, 0.0681001639429284, 0.07440733905732655, 0.07660608321402762]}, "mutation_prompt": null}
{"id": "839f9e2f-71dc-4eff-bd1d-743bafea279b", "solution": "class DynamicPopulationSizeHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        \n        for t in range(1, self.budget+1):\n            # Update velocity based on PSO\n            dynamic_inertia = self.inertia_weight * (1 - t/self.budget)  # Dynamic inertia weight\n            velocity = dynamic_inertia * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate based on individual fitness\n            mutation_rate_adjustment = 0.1 * np.exp(-np.mean(fitness) / np.max(fitness))  # Mutation rate based on mean fitness\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n            \n            # Dynamic population size adjustment\n            if t % (self.budget // 10) == 0:  # Adjust population size every 10% of the budget\n                self.population_size = max(10, min(100, self.population_size + np.random.randint(-10, 11)))\n                population = np.vstack((population, np.random.uniform(-5.0, 5.0, (self.population_size - population.shape[0], self.dim))))\n                fitness = np.array([func(ind) for ind in population])\n        \n        return global_best", "name": "DynamicPopulationSizeHybridGA_PSO", "description": "Introducing dynamic population size adjustment to improve exploration and convergence speed.", "configspace": "", "generation": 97, "fitness": 0.1957438469195569, "feedback": "The algorithm DynamicPopulationSizeHybridGA_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.21.", "error": "", "parent_id": "45b9dbb9-4dac-41b2-baf1-fb678c872082", "metadata": {"aucs": [0.48878672100880705, 0.4925841717924305, 0.5791599286026545, 0.5250197681208089, 0.4964475470416827, 0.5418831930068099, 0.4576239937491252, 0.49497418622314426, 0.48822977617067675, 0.07412194670299865, 0.03777500555842306, 0.06866991810914203, 0.058528747370089174, 0.061874307371803994, 0.042145429846789595, 0.04146061793721478, 0.058192983047160696, 0.008741797314758104, 0.07970537052885229, 0.09828419536708932, 0.10752412830308056, 0.0910845242824051, 0.08578218004888316, 0.09262803372593376, 0.12593036303023475, 0.0863400693152494, 0.11118344552043746, 0.07555447363324619, 0.07779460595998566, 0.0753110048521668, 0.08574727344720634, 0.08337898183443537, 0.06663092003415005, 0.07372712969444295, 0.09214512992676338, 0.08200282691733496, 0.9908547217146776, 0.9751588606913554, 0.9902772166212604, 0.9813274021646949, 0.9862141995275548, 0.9586084017804681, 0.9906083595951416, 0.982518594803537, 0.9860759263216554, 0.24683931375882895, 0.19246420988058022, 0.23701132527490765, 0.23236046691633438, 0.228019366743191, 0.23542767039782075, 0.21428793892884146, 0.20376111180863976, 0.22151550717003954, 0.22743094788940765, 0.2319306878344396, 0.19410501885926557, 0.23590434325701615, 0.5587540565516783, 0.22870673470241432, 0.31760477042324264, 0.24350736522771443, 0.28215201555517555, 0.17939841700369874, 0.11240625121104053, 0.15027300185463632, 9.999999999998899e-05, 0.12447628940671163, 0.11654642823071337, 0.10880149096309144, 0.09176746001947744, 0.12613476050965777, 0.17083628620984292, 0.18905379752915596, 0.13223653981589012, 0.1752596927879977, 0.1434792082966474, 0.14206732800480437, 0.17943982948387693, 0.035008617332589864, 0.09317734082177742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013663571755666237, 0.06961990992670508, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024650474430245595, 9.999999999998899e-05, 9.999999999998899e-05, 0.05574982676612761, 9.999999999998899e-05, 0.08258140916909595, 0.011950629657281775, 0.015815161629715524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09015186931720487, 0.09830959245794224, 0.08820490781839996, 0.09100728815362669, 0.06482336438788372, 0.10769190580993382, 0.04739592895915523, 0.0425374246988407, 0.0531665106072291, 0.4612348376371266, 0.45311073294380466, 0.4455125093400786, 0.46381912540792103, 0.4167019064794638, 0.41468488933904113, 0.462624300659613, 0.4414466339016534, 0.469383275693779, 0.06191586400753135, 0.04249877254137702, 0.0841992469865861, 0.07246361429401726, 0.0666955281402577, 0.0765462431258882, 0.07604002375694885, 0.0740399491568855, 0.10230869877177551, 0.1260793738938395, 0.12874369638150018, 0.1919073683176744, 0.1562295865026977, 0.12412391907988785, 0.30563537647866845, 0.18489214005776844, 0.12415131286169889, 0.21762240214948092, 0.2124849090004266, 0.2003086139023611, 0.22553882367756872, 0.22320780217912428, 0.16658567982859562, 0.1815961866856065, 0.17030647751595074, 0.21325386353305187, 0.28459191342975043, 0.17649405265300755, 0.15696728766325418, 0.16224063238034336, 0.14776510331270165, 0.171167428234127, 0.19484907782328087, 0.18333165597046108, 0.14812668286302488, 0.18792197605107253, 0.21720616849696595, 0.18897174580420628, 0.1746167117812205, 0.15648657509872077, 0.18590662110485723, 0.2031219855848111, 0.18892825908885258, 0.1622338032537084, 0.17400513972977205, 0.1677115308201692, 0.18958912956638074, 0.18048666730067653, 0.18652317105389693, 0.20494692536258297, 0.18845422295192593, 0.18706773692653644, 0.199811342280372, 0.19240200663926132, 0.12161478095579803, 0.125060696010163, 0.15178083281055932, 0.16401243963226375, 0.19787433660354325, 0.12953169501463513, 0.1418129493872633, 0.15794823404035963, 0.1773047443539153, 0.6208870971912787, 0.20723563583045912, 0.07332788636982512, 0.10431595972068886, 0.5865448853250703, 0.1528452498870574, 0.155618396859601, 0.1504985617725908, 0.44990637183867643, 0.18204545202524347, 0.1701960672944297, 0.17918627721885405, 0.17070908079469604, 0.16312776327440737, 0.1749270243047586, 0.20729993778102407, 0.17759061118477237, 0.1687754691719301, 0.06207790463322904, 0.06183200552346657, 0.07027851165544052, 0.07362575852946807, 0.08099609184540191, 0.06295108427779961, 0.0681001639429284, 0.07440733905732655, 0.07660608321402762]}, "mutation_prompt": null}
{"id": "44aeb88d-e8ba-49a1-9bf4-f373ace9779f", "solution": "import numpy as np\n\nclass AcceleratedDynamicInertiaHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n        prev_best_individual = np.copy(best_individual)\n\n        for t in range(1, self.budget+1):\n            dynamic_inertia = self.inertia_weight * (1 - t/self.budget)  # Dynamic inertia weight\n            velocity = dynamic_inertia * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            \n            # Additional velocity update\n            additional_velocity = 0.2 * (best_individual - prev_best_individual)  # Encourage exploration towards promising regions\n            velocity += additional_velocity\n            \n            population += velocity\n            mutation_rate_adjustment = 0.1 * np.exp(-np.mean(fitness) / np.max(fitness))  \n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n            prev_best_individual = np.copy(best_individual)\n        \n        return global_best", "name": "AcceleratedDynamicInertiaHybridGA_PSO", "description": "Accelerating convergence by introducing an additional velocity update based on the difference between the current and previous best individual to encourage exploration towards promising regions.", "configspace": "", "generation": 98, "fitness": 0.1957438469195569, "feedback": "The algorithm AcceleratedDynamicInertiaHybridGA_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.21.", "error": "", "parent_id": "45b9dbb9-4dac-41b2-baf1-fb678c872082", "metadata": {"aucs": [0.48878672100880705, 0.4925841717924305, 0.5791599286026545, 0.5250197681208089, 0.4964475470416827, 0.5418831930068099, 0.4576239937491252, 0.49497418622314426, 0.48822977617067675, 0.07412194670299865, 0.03777500555842306, 0.06866991810914203, 0.058528747370089174, 0.061874307371803994, 0.042145429846789595, 0.04146061793721478, 0.058192983047160696, 0.008741797314758104, 0.07970537052885229, 0.09828419536708932, 0.10752412830308056, 0.0910845242824051, 0.08578218004888316, 0.09262803372593376, 0.12593036303023475, 0.0863400693152494, 0.11118344552043746, 0.07555447363324619, 0.07779460595998566, 0.0753110048521668, 0.08574727344720634, 0.08337898183443537, 0.06663092003415005, 0.07372712969444295, 0.09214512992676338, 0.08200282691733496, 0.9908547217146776, 0.9751588606913554, 0.9902772166212604, 0.9813274021646949, 0.9862141995275548, 0.9586084017804681, 0.9906083595951416, 0.982518594803537, 0.9860759263216554, 0.24683931375882895, 0.19246420988058022, 0.23701132527490765, 0.23236046691633438, 0.228019366743191, 0.23542767039782075, 0.21428793892884146, 0.20376111180863976, 0.22151550717003954, 0.22743094788940765, 0.2319306878344396, 0.19410501885926557, 0.23590434325701615, 0.5587540565516783, 0.22870673470241432, 0.31760477042324264, 0.24350736522771443, 0.28215201555517555, 0.17939841700369874, 0.11240625121104053, 0.15027300185463632, 9.999999999998899e-05, 0.12447628940671163, 0.11654642823071337, 0.10880149096309144, 0.09176746001947744, 0.12613476050965777, 0.17083628620984292, 0.18905379752915596, 0.13223653981589012, 0.1752596927879977, 0.1434792082966474, 0.14206732800480437, 0.17943982948387693, 0.035008617332589864, 0.09317734082177742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013663571755666237, 0.06961990992670508, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024650474430245595, 9.999999999998899e-05, 9.999999999998899e-05, 0.05574982676612761, 9.999999999998899e-05, 0.08258140916909595, 0.011950629657281775, 0.015815161629715524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09015186931720487, 0.09830959245794224, 0.08820490781839996, 0.09100728815362669, 0.06482336438788372, 0.10769190580993382, 0.04739592895915523, 0.0425374246988407, 0.0531665106072291, 0.4612348376371266, 0.45311073294380466, 0.4455125093400786, 0.46381912540792103, 0.4167019064794638, 0.41468488933904113, 0.462624300659613, 0.4414466339016534, 0.469383275693779, 0.06191586400753135, 0.04249877254137702, 0.0841992469865861, 0.07246361429401726, 0.0666955281402577, 0.0765462431258882, 0.07604002375694885, 0.0740399491568855, 0.10230869877177551, 0.1260793738938395, 0.12874369638150018, 0.1919073683176744, 0.1562295865026977, 0.12412391907988785, 0.30563537647866845, 0.18489214005776844, 0.12415131286169889, 0.21762240214948092, 0.2124849090004266, 0.2003086139023611, 0.22553882367756872, 0.22320780217912428, 0.16658567982859562, 0.1815961866856065, 0.17030647751595074, 0.21325386353305187, 0.28459191342975043, 0.17649405265300755, 0.15696728766325418, 0.16224063238034336, 0.14776510331270165, 0.171167428234127, 0.19484907782328087, 0.18333165597046108, 0.14812668286302488, 0.18792197605107253, 0.21720616849696595, 0.18897174580420628, 0.1746167117812205, 0.15648657509872077, 0.18590662110485723, 0.2031219855848111, 0.18892825908885258, 0.1622338032537084, 0.17400513972977205, 0.1677115308201692, 0.18958912956638074, 0.18048666730067653, 0.18652317105389693, 0.20494692536258297, 0.18845422295192593, 0.18706773692653644, 0.199811342280372, 0.19240200663926132, 0.12161478095579803, 0.125060696010163, 0.15178083281055932, 0.16401243963226375, 0.19787433660354325, 0.12953169501463513, 0.1418129493872633, 0.15794823404035963, 0.1773047443539153, 0.6208870971912787, 0.20723563583045912, 0.07332788636982512, 0.10431595972068886, 0.5865448853250703, 0.1528452498870574, 0.155618396859601, 0.1504985617725908, 0.44990637183867643, 0.18204545202524347, 0.1701960672944297, 0.17918627721885405, 0.17070908079469604, 0.16312776327440737, 0.1749270243047586, 0.20729993778102407, 0.17759061118477237, 0.1687754691719301, 0.06207790463322904, 0.06183200552346657, 0.07027851165544052, 0.07362575852946807, 0.08099609184540191, 0.06295108427779961, 0.0681001639429284, 0.07440733905732655, 0.07660608321402762]}, "mutation_prompt": null}
{"id": "b1adedf6-c379-4c68-b4f8-867092810a7b", "solution": "import numpy as np\n\nclass DynamicInertiaHybridGA_PSO:\n    def __init__(self, budget, dim, population_size=50, mutation_rate=0.1, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_rate = mutation_rate\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        global_best = population[best_idx]\n        velocity = np.zeros((self.population_size, self.dim))  # Initialize velocity\n\n        for t in range(1, self.budget+1):\n            # Update velocity based on PSO\n            dynamic_inertia = self.inertia_weight * (1 - t/self.budget)  # Dynamic inertia weight\n            velocity = dynamic_inertia * velocity + self.cognitive_weight * np.random.rand() * (best_individual - population) + self.social_weight * np.random.rand() * (global_best - population)\n            population += velocity\n            \n            # Dynamically adjust mutation rate based on individual fitness\n            mutation_rate_adjustment = 0.1 * np.exp(-np.mean(fitness) / np.max(fitness))  # Mutation rate based on mean fitness\n            mutation_mask = np.random.rand(self.population_size, self.dim) < mutation_rate_adjustment\n            population = population + np.random.uniform(-1.0, 1.0, (self.population_size, self.dim)) * mutation_mask\n            \n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            global_best = population[np.argmin(fitness)]\n        \n        return global_best", "name": "DynamicInertiaHybridGA_PSO", "description": "Improved convergence speed by introducing a novel mutation strategy that adaptively adjusts the mutation rate based on individual fitness evaluations to accelerate exploration and exploitation.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45b9dbb9-4dac-41b2-baf1-fb678c872082", "metadata": {"aucs": [0.48878672100880705, 0.4925841717924305, 0.5791599286026545, 0.5250197681208089, 0.4964475470416827, 0.5418831930068099, 0.4576239937491252, 0.49497418622314426, 0.48822977617067675, 0.07412194670299865, 0.03777500555842306, 0.06866991810914203, 0.058528747370089174, 0.061874307371803994, 0.042145429846789595, 0.04146061793721478, 0.058192983047160696, 0.008741797314758104, 0.07970537052885229, 0.09828419536708932, 0.10752412830308056, 0.0910845242824051, 0.08578218004888316, 0.09262803372593376, 0.12593036303023475, 0.0863400693152494, 0.11118344552043746, 0.07555447363324619, 0.07779460595998566, 0.0753110048521668, 0.08574727344720634, 0.08337898183443537, 0.06663092003415005, 0.07372712969444295, 0.09214512992676338, 0.08200282691733496, 0.9908547217146776, 0.9751588606913554, 0.9902772166212604, 0.9813274021646949, 0.9862141995275548, 0.9586084017804681, 0.9906083595951416, 0.982518594803537, 0.9860759263216554, 0.24683931375882895, 0.19246420988058022, 0.23701132527490765, 0.23236046691633438, 0.228019366743191, 0.23542767039782075, 0.21428793892884146, 0.20376111180863976, 0.22151550717003954, 0.22743094788940765, 0.2319306878344396, 0.19410501885926557, 0.23590434325701615, 0.5587540565516783, 0.22870673470241432, 0.31760477042324264, 0.24350736522771443, 0.28215201555517555, 0.17939841700369874, 0.11240625121104053, 0.15027300185463632, 9.999999999998899e-05, 0.12447628940671163, 0.11654642823071337, 0.10880149096309144, 0.09176746001947744, 0.12613476050965777, 0.17083628620984292, 0.18905379752915596, 0.13223653981589012, 0.1752596927879977, 0.1434792082966474, 0.14206732800480437, 0.17943982948387693, 0.035008617332589864, 0.09317734082177742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013663571755666237, 0.06961990992670508, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024650474430245595, 9.999999999998899e-05, 9.999999999998899e-05, 0.05574982676612761, 9.999999999998899e-05, 0.08258140916909595, 0.011950629657281775, 0.015815161629715524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09015186931720487, 0.09830959245794224, 0.08820490781839996, 0.09100728815362669, 0.06482336438788372, 0.10769190580993382, 0.04739592895915523, 0.0425374246988407, 0.0531665106072291, 0.4612348376371266, 0.45311073294380466, 0.4455125093400786, 0.46381912540792103, 0.4167019064794638, 0.41468488933904113, 0.462624300659613, 0.4414466339016534, 0.469383275693779, 0.06191586400753135, 0.04249877254137702, 0.0841992469865861, 0.07246361429401726, 0.0666955281402577, 0.0765462431258882, 0.07604002375694885, 0.0740399491568855, 0.10230869877177551, 0.1260793738938395, 0.12874369638150018, 0.1919073683176744, 0.1562295865026977, 0.12412391907988785, 0.30563537647866845, 0.18489214005776844, 0.12415131286169889, 0.21762240214948092, 0.2124849090004266, 0.2003086139023611, 0.22553882367756872, 0.22320780217912428, 0.16658567982859562, 0.1815961866856065, 0.17030647751595074, 0.21325386353305187, 0.28459191342975043, 0.17649405265300755, 0.15696728766325418, 0.16224063238034336, 0.14776510331270165, 0.171167428234127, 0.19484907782328087, 0.18333165597046108, 0.14812668286302488, 0.18792197605107253, 0.21720616849696595, 0.18897174580420628, 0.1746167117812205, 0.15648657509872077, 0.18590662110485723, 0.2031219855848111, 0.18892825908885258, 0.1622338032537084, 0.17400513972977205, 0.1677115308201692, 0.18958912956638074, 0.18048666730067653, 0.18652317105389693, 0.20494692536258297, 0.18845422295192593, 0.18706773692653644, 0.199811342280372, 0.19240200663926132, 0.12161478095579803, 0.125060696010163, 0.15178083281055932, 0.16401243963226375, 0.19787433660354325, 0.12953169501463513, 0.1418129493872633, 0.15794823404035963, 0.1773047443539153, 0.6208870971912787, 0.20723563583045912, 0.07332788636982512, 0.10431595972068886, 0.5865448853250703, 0.1528452498870574, 0.155618396859601, 0.1504985617725908, 0.44990637183867643, 0.18204545202524347, 0.1701960672944297, 0.17918627721885405, 0.17070908079469604, 0.16312776327440737, 0.1749270243047586, 0.20729993778102407, 0.17759061118477237, 0.1687754691719301, 0.06207790463322904, 0.06183200552346657, 0.07027851165544052, 0.07362575852946807, 0.08099609184540191, 0.06295108427779961, 0.0681001639429284, 0.07440733905732655, 0.07660608321402762]}, "mutation_prompt": null}
