{"id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 0, "fitness": 0.26213722837644987, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.19.", "error": "", "parent_id": null, "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "ac62cf81-2e5c-4557-a3dd-ccc966c43ec9", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "c08ef388-86a6-4aec-a288-86db80985a57", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "e6a89a96-1c22-4e8e-990b-1a6d4ef17a06", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "18f84fea-3c62-46b7-8278-feeff5ae0d47", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "63fee89c-028e-4de0-b48f-5ca46c484fed", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "228d6b03-f885-46f4-9689-cdd8c203ab29", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "8fb7a938-19a9-4882-b321-2145f37501ef", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "4e6fe3d2-8cc8-4e37-af66-09dc257dc159", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "ce947583-82ef-4212-a0bf-406378f070ab", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "0a9404bb-0520-408b-ae7a-f58f5f752cc8", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "4aed3bb3-9b91-4526-9562-b66c74e36d86", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "50cddcb3-d6fd-416b-b429-5c0b262f31a7", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "c89b9150-f937-4a2f-9efb-07839c4dcdc3", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "4f2d03d0-8b40-49c6-97b5-6b42f92d73b3", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "2b7da592-5dee-421c-9815-bbc609ed884b", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "0359b1c7-64e0-442f-b4ee-e2bc2703536a", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "e63e93a8-0eb2-43c4-a407-dc0785900898", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n        stagnation_threshold = 0.01\n        best_fitness = np.min(fitness)\n        stagnation_count = 0\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation with adaptive factor\n                F = 0.5 + 0.3 * np.random.rand()\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Early stopping criterion\n                current_best_fitness = np.min(fitness)\n                if abs(best_fitness - current_best_fitness) < stagnation_threshold:\n                    stagnation_count += 1\n                else:\n                    stagnation_count = 0\n                best_fitness = current_best_fitness\n\n                if stagnation_count > 5:  # Early stopping if no improvement\n                    return population[np.argmin(fitness)]\n                \n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Enhanced DE with Adaptive Mutation and Early Stopping to improve convergence speed and efficiency.", "configspace": "", "generation": 17, "fitness": 0.052469091077633506, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.11860917256239101, 0.12014318361367826, 0.0916041897440597, 0.13103955980024673, 0.10741076274618722, 0.11033114211644335, 0.09975734614470277, 0.07544469168504953, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.04058478519417552, 0.018813459769204233, 0.010544468052148481, 0.006493004426635474, 0.006570620486303191, 0.028711934597124622, 0.009918935566686882, 0.010575797721399605, 0.0, 0.018081260046793668, 0.011307823610296475, 0.019501673109847295, 0.00039528563299850994, 0.0, 0.014664865741570998, 0.0, 0.0, 0.045084250649534585, 0.058716332515958314, 0.058141240247040926, 0.054782746657569104, 0.053221356437489376, 0.04855619561912483, 0.06387700170275912, 0.057709755334132806, 0.05340007253595469, 0.06265423285317939, 0.02898177405942537, 0.018797761135708635, 0.03700598756977125, 0.03914083941533808, 0.0, 0.0, 0.01657700280651897, 0.0, 0.1001868586914183, 0.0821548355402063, 0.05973037536276371, 0.06661749824786911, 0.07275849405212154, 0.08123739143306086, 0.04927146655654635, 0.05921649636366422, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007528193044260889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12530995864276007, 0.15748132322755004, 0.1630032329592912, 0.11290837971452783, 0.10265315387628593, 0.13175415891859443, 0.16104568613219816, 0.12639624065450605, 0.12096781838999704, 0.013640910311869647, 0.023061441357176915, 0.021886321886608107, 0.0325721299095072, 0.0007381158042131242, 0.01750168379108641, 0.005832772591550017, 0.02185026629168696, 0.02666833626569931, 0.08484849337016587, 0.08600231476351294, 0.11833361437130174, 0.13757644454574725, 0.1350323393253442, 0.10789794917811213, 0.08799080449358876, 0.08090029113184061, 0.07978027219983652, 0.1197634921421421, 0.12235416835124091, 0.16130937881362284, 0.1379205218140116, 0.13620502999557915, 0.1617723759158778, 0.12187060846021125, 0.17369512487615557, 0.11535598085832555, 0.05976163112617183, 0.05874832341178393, 0.08389423256590178, 0.06277006213208702, 0.06624274507053929, 0.09784532092633325, 0.08364015581209883, 0.09968109929816094, 0.0675678376656269, 0.11934558904189418, 0.10482363617162227, 0.13336421106438578, 0.11542560921130718, 0.10239522617085317, 0.10887980745480186, 0.12237199858757519, 0.10192819487496041, 0.12610897469223914, 0.0, 0.0, 0.0, 0.0, 0.12671825863833852, 0.0, 0.0, 0.13700166074101927, 0.1619951724166745, 0.10621516635738681, 0.08958410382055226, 0.10152388188400496, 0.09351712941326829, 0.1207035396655618, 0.06986593107999339, 0.10692837481480588, 0.10502535409825287, 0.06926818844989102, 0.11031370369950688, 0.10829912054017621, 0.06922728298844572, 0.08050084289570181, 0.03728632333816162, 0.07939520915676224, 0.0736724244050796, 0.053368711629321997, 0.04689717706218344, 0.13471522306136396, 0.16077757872901843, 0.1480388243708598, 0.14543725022082632, 0.13668040171393858, 0.13985688431065968, 0.14961211855402412, 0.15300068442950432, 0.14680476350940774, 0.026909789535618067, 0.024716210845035724, 0.03129662407793532, 0.02691798931623468, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962604]}, "mutation_prompt": null}
{"id": "a5afab0e-8f83-42fa-940d-eb6d96680e45", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "4964e813-38da-4e3d-968f-77fca01b9aeb", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "0a79a46e-5f43-42e0-a59a-ec0ebb0457e4", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "156a03b8-41e8-417e-b244-3659101a6fc5", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "f8115fbb-ae05-48d0-a17a-0f89b56b80b0", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "431544d2-4e99-4eb7-8c72-05f8bb35aaad", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "899aee3a-b8b9-4569-80ae-008e7980f14a", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "7904313c-5218-4e69-886c-2faf6078055d", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "7f120c89-0961-400b-91d5-1461ba1863a8", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "72203005-f58a-4d72-b692-8fa68648882d", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "fcbb5ab6-1111-4671-96d6-ed8655b1b394", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "045e4d32-32fc-4306-9a48-0857c7a05c25", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "65de63e8-bb56-4aad-956e-1fe220f5f8b0", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "625a17d4-4c45-4358-8f3d-c61525390844", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "58c041f9-900f-419c-912c-128880e7be32", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "9b02cb81-1552-4e88-b43d-8e61ae05eba5", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "7f79fad5-2309-4324-a3cd-3c27ed892a9e", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "5411c915-eb86-446c-80b3-64895e480d86", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "981a42b0-9484-4929-9271-abc30d09cf62", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "7631e5c4-c9e0-418b-b912-c65b6339e5e5", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "2c162f36-2b5c-4732-add0-2c4086c65706", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "01d9429c-eabe-4404-a507-96e609a33b2f", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "227aee4c-14c4-466a-b42c-9a6d75d1a06f", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "3175c1de-8f37-49b1-aef5-61dc965b7ffe", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "3d90cb8e-532b-4747-b11a-fb9937bc3871", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "f34668a5-9fbb-4c58-893a-9915d5d2e2e2", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pop_size = min(100, self.budget // self.dim)\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size\n\n        F_min, F_max = 0.4, 0.9  # Range for dynamic F\n        CR_min, CR_max = 0.8, 1.0  # Range for dynamic CR\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                F = F_min + (F_max - F_min) * np.random.rand()  # Dynamic F\n                CR = CR_min + (CR_max - CR_min) * np.random.rand()  # Dynamic CR\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Enhanced Differential Evolution by introducing dynamic F and CR for better adaptability to diverse optimization landscapes.", "configspace": "", "generation": 43, "fitness": 0.2244108694425915, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.18.", "error": "", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.5106617811171, 0.5069180975676405, 0.501252300382907, 0.548137511075601, 0.5300999835727034, 0.5357014247291647, 0.5349730263009292, 0.5224425432582622, 0.5171388449292001, 0.24870448800905565, 0.2523568280389892, 0.225289943140215, 0.2173138518025901, 0.23747845274902213, 0.23517156151809682, 0.21479292051407461, 0.250780751910993, 0.24648847517449535, 0.09898503903934341, 0.09705831540600263, 0.10003429299278921, 0.093119829383157, 0.09218009147292872, 0.10537386920512981, 0.10117017669861561, 0.08364493562011488, 0.10966558067268128, 0.07867010461632329, 0.07670479003869546, 0.08131494768437464, 0.07683751920554682, 0.07330318269680591, 0.08572911304819786, 0.08891140715927648, 0.07810769721792366, 0.08188334578059397, 0.903280688974934, 0.9366538365558532, 0.8181656706982443, 0.8886389378703179, 0.9140462472135777, 0.9143468292915724, 0.8856196178575948, 0.9242934966923857, 0.893006956671866, 0.18729298539054795, 0.23396472707377547, 0.22265863688512177, 0.23497169819464714, 0.2183300704412835, 0.22056218897749869, 0.22080260050383171, 0.22477051051960284, 0.23931556021387523, 0.3719289013891074, 0.31253522435125414, 0.3757662672409302, 0.3949600091863126, 0.4475424087962828, 0.4156043827676985, 0.4183548374340912, 0.4880201282910651, 0.4667445160302651, 0.16231207664002756, 0.13784270987649982, 0.14310331793925002, 0.12461345525289436, 0.12867640308777828, 0.1523001119655455, 0.15662211334422604, 0.1477102702414722, 0.12557751745403634, 0.14853488944113413, 0.10988967119948867, 0.09977505244574736, 0.15086358303905945, 0.15361718690894233, 0.15013239454172922, 0.13446220082257276, 0.14126103464462336, 0.14028010322231343, 0.09708487491636042, 0.070779770148104, 0.09873000530728537, 0.08213396701220588, 0.08407735327454868, 0.061641664854561684, 0.0688573632844145, 0.08851353221240588, 0.0857881212228796, 0.20401766492111129, 0.19824179377524864, 0.21357114619641304, 0.21903510681018123, 0.1975902073561936, 0.19040803367886971, 0.2298960696656771, 0.2318790467116597, 0.24013308345905793, 0.021763957527172306, 0.01934816829511221, 0.0075780868654977684, 0.017409146403833287, 0.019983621560026532, 0.010502236577961455, 0.017570966347682182, 0.01292326707538538, 0.019865464602128347, 0.1146056249745252, 0.12120482391572418, 0.12657400206856706, 0.11364891247244158, 0.1259185680260121, 0.1210050214371573, 0.12654520214637954, 0.1316426617498524, 0.1256893323730417, 0.4024147739337749, 0.42010520882572966, 0.4189856012917973, 0.42270626465955663, 0.4175976078603114, 0.4492353608550378, 0.4351080901294946, 0.4313313260196421, 0.40377183869520683, 0.08658206375519206, 0.08541104544262812, 0.10781644600221008, 0.07827587000583314, 0.07974639189294652, 0.09011179704135652, 0.07095025581970749, 0.087901661054688, 0.09476718487421731, 0.1361298685806549, 0.13400727937360624, 0.16564685775090915, 0.16575617008470223, 0.15721857896967772, 0.1688979557983492, 0.12852247171777453, 0.1485868264727731, 0.14467835990118438, 0.25245111391797814, 0.24694348755640172, 0.26931095141083017, 0.2505706672141462, 0.255286884525765, 0.260411094604187, 0.26842417668918905, 0.27772100946666756, 0.2452224767538015, 0.21427483448834517, 0.1948109991094592, 0.18781600168951618, 0.18203799203962312, 0.19540546011694993, 0.18829712136618226, 0.22288618912376956, 0.21064957784378413, 0.19664404595392615, 0.1836752409133996, 0.1810718687518139, 0.21090614364003402, 0.18969150864884954, 0.1900315883742143, 0.1922328128397558, 0.1815473449729218, 0.18576152584447914, 0.18727223502566592, 0.18386548991157692, 0.17184119379688678, 0.18722867181636915, 0.17454171119333095, 0.17925309516166799, 0.17157522374906498, 0.18076656316993756, 0.18557757918541418, 0.17851702478233678, 0.3075325630138892, 0.24316422120592207, 0.3031876117391318, 0.21154951937513622, 0.17625580547466724, 0.16885686112081078, 0.197962052699036, 0.2534187333360648, 0.17529281303531952, 0.1889415525039757, 0.196605576857951, 0.1907109517131209, 0.19110464414196826, 0.1869140836550207, 0.34624989689538865, 0.2030896500521595, 0.19796930807234547, 0.3970283528343568, 0.213149463733037, 0.18024779020856607, 0.17639884538637485, 0.17960046453069822, 0.18934175968921385, 0.18722977009023356, 0.17543718405962827, 0.1914144121727802, 0.18110645502478218, 0.06961004361153178, 0.07191548912125922, 0.07059885447585856, 0.08360875511510546, 0.0718620629933866, 0.06677796950199155, 0.07316315880452495, 0.08143341925384284, 0.07292672110738363]}, "mutation_prompt": null}
{"id": "2dbdf32e-51a1-4d1c-935c-bfff462023a3", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "e80330c9-db5a-4a9b-aa0d-81744f167eea", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "6e4ef11c-f0a0-4a9a-ac2d-c1a4a1135275", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "f4c82513-edd3-403c-b66e-07df292d671e", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "d2dd9425-c6e5-43b7-aea9-06fb43e85ab0", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "b9e484db-0136-4557-a636-41d0f2c91f35", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "53ad79bc-0fc4-4d50-9df9-2f2786e8cc9b", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "512d5863-ab7e-4510-be84-572bfb0adc09", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "ec872e2a-2ee6-446f-a634-5370caf86f3f", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "76a0d15d-9405-4d9c-9c6e-b630cc8d1c9f", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "84c7b6e8-05f1-446f-9452-f44b1659a265", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "5cf681a7-59a4-4ac9-81e7-90fcc74ae3e2", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "00347698-4325-4560-a420-12f465f6d15d", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "df317307-aff4-4f7b-b7e9-08a3405c6a56", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "d96c527f-fd47-4743-b3dc-dc55884dc818", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "e1ec768d-b65d-4611-9e04-9480462dc7cc", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "b4f68efc-57a0-47b3-838c-96d9c3a24b2c", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "A Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategy for solving BBOB test suite functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6438444504476555, 0.6067559451963428, 0.6146872419893609, 0.6251272152787747, 0.6252926226558702, 0.6359800058448292, 0.6364437790793525, 0.6138156827042769, 0.6226925202880493, 0.3571982246658213, 0.3509493793600279, 0.3763041536480951, 0.3468475215222373, 0.3672700258314736, 0.35825129557379554, 0.3579950607365576, 0.37418881065291376, 0.36133277548739384, 0.09975924870809105, 0.10472809025101615, 0.105552600502546, 0.09752999307526056, 0.1002068138801222, 0.10809190335341823, 0.09549761475629748, 0.0925613149511566, 0.09709409318063733, 0.08832931426230861, 0.08064822866023591, 0.10286785983067437, 0.08337522425914135, 0.09580716642069853, 0.09505370953131564, 0.0835767836756639, 0.0917820079434587, 0.08668282643273528, 0.8024989040512696, 0.9147103999584776, 0.9187402838178396, 0.8347344001632796, 0.8501429626290672, 0.8160166569084629, 0.7862825478122127, 0.821170904427489, 0.9060153883516203, 0.2964466448201142, 0.2631366746924909, 0.26691411212396865, 0.28187271709224937, 0.2941269133164085, 0.2605032906435536, 0.24291853985911316, 0.29042940393217154, 0.2803498242776731, 0.5402150217118242, 0.5104812760940665, 0.5347827993494964, 0.5514436678687038, 0.5571985971844287, 0.6169334381273686, 0.5980354505041519, 0.5914879812294417, 0.5621027967482266, 0.2065637189000218, 0.15293764100860918, 0.1689987269698211, 0.18606328593564236, 0.1678175661565232, 0.15543350102851605, 0.17165928782616469, 0.15733931498055354, 0.17026974140586149, 0.20764597451680178, 0.1441952694117239, 0.16401898689956562, 0.18718865210539648, 0.17644434553970112, 0.19170251116480563, 0.14998621009015312, 0.16054541117514987, 0.18921390129759685, 0.1517010872313529, 0.1413098362591949, 0.15835239056981887, 0.13982398438873822, 0.14774573660477452, 0.17722127016139033, 0.19769612076036702, 0.17755614041756795, 0.16359444354725405, 0.2907645302662387, 0.287152557154139, 0.31227378179262055, 0.2524326252672815, 0.2550545622113366, 0.27189134861746267, 0.3191674899180378, 0.31565954808540475, 0.2826130431291517, 0.0589379259480689, 0.04664831282695836, 0.044411422207777274, 0.03973836157210475, 0.047025762814286276, 0.06663976659466431, 0.05368382908872604, 0.05719665175408917, 0.0785603598081267, 0.16417812477736948, 0.1635029751814302, 0.1600527324579082, 0.1828891516440614, 0.17618083227707304, 0.15550089647859, 0.16996901957421195, 0.16636605214779587, 0.1634448962876346, 0.5065019757383523, 0.490964001148789, 0.49381134113103675, 0.4953696825111239, 0.5031543749646539, 0.502886724812513, 0.517931432320333, 0.48646620803911433, 0.5128759068158761, 0.0916141806525631, 0.08633968562061722, 0.10044161677682151, 0.10120553471517946, 0.09884008809021672, 0.09665565263771259, 0.08798743937672604, 0.08601500949546426, 0.08460755138982679, 0.1395898382195937, 0.13625240971171626, 0.15606392123533697, 0.15162496247747326, 0.1483585538031914, 0.19159121011209712, 0.1668455873987187, 0.12213986318980896, 0.1449512293973756, 0.3057919512114694, 0.2986182448821295, 0.2922896483954369, 0.2941375647043707, 0.2991963638892896, 0.28991388136350194, 0.314741183734797, 0.31065530044537015, 0.3126220271118757, 0.2359513548859472, 0.22939114232832258, 0.23557706533752376, 0.22004509972867892, 0.21810131011770095, 0.21519755396329898, 0.2372359256102592, 0.23533097389472923, 0.2429415563651317, 0.18160836553933624, 0.20205987722581809, 0.19545720942440448, 0.18324005414106137, 0.18599478934064406, 0.18892801405967086, 0.1827570721831604, 0.18637705772489643, 0.19818230726528752, 0.17905556448115445, 0.18240534043169743, 0.18141461370374068, 0.18976161085495047, 0.1788930670135842, 0.17652869308607444, 0.17861221903191382, 0.17367002800586928, 0.1843343231729092, 0.18746583301232034, 0.1784215042199434, 0.20339669211881573, 0.39646836347021686, 0.24295675421952623, 0.17990933069805037, 0.3076221433403078, 0.16269605363098094, 0.3048955007582016, 0.3977274180375113, 0.19629929741688668, 0.43814521607280665, 0.1933323182004929, 0.15422448368516728, 0.35333177731510046, 0.19616693708823674, 0.19296010312348755, 0.20114154201132262, 0.18421557038029812, 0.18126386738825429, 0.19763488956627984, 0.20086811454632225, 0.19231705401402177, 0.1911300488833927, 0.18886331701404824, 0.19684240614031423, 0.17895880175939616, 0.07741679988107664, 0.06847404212603925, 0.07057076697247977, 0.08355671279774157, 0.07892225090699378, 0.0787510464925224, 0.07268740941247309, 0.07679371862286644, 0.07833418898265176]}, "mutation_prompt": null}
{"id": "4becb607-d36e-4874-af08-9b03c0c99693", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n                \n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Enhanced Hybrid Differential Evolution with Adaptive Scaling for improved convergence in black box optimization.", "configspace": "", "generation": 61, "fitness": 0.27540263367810974, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.20.", "error": "", "parent_id": "d529a3e4-ff82-4019-9dbd-eb150600ec46", "metadata": {"aucs": [0.6318765800482264, 0.6383634092430148, 0.6486344909058389, 0.666855196881482, 0.6432110936962419, 0.6531999633593637, 0.6495287889477119, 0.6450731856741432, 0.6679367764210822, 0.3783283842127185, 0.38282819899804377, 0.41011691338965683, 0.40065529378392506, 0.4024860181410036, 0.37577786707041383, 0.38669203153469434, 0.4184486288894518, 0.3931314347241217, 0.09572778829112394, 0.09773845971963524, 0.11058275436484821, 0.10198337779643629, 0.09522397194747922, 0.14313225715541134, 0.10487526176885298, 0.11505245952990939, 0.10166182447936734, 0.09003026322879792, 0.09119435225667616, 0.08202844021232869, 0.09562834257933117, 0.09277516598585567, 0.08952786461152862, 0.09074867384138852, 0.1177810734148943, 0.09491921733678732, 0.6673561600858448, 0.9142376070355283, 0.9131790205132426, 0.7798407358744486, 0.8767436392116987, 0.8619388261475515, 0.7862867613460587, 0.7224888410859233, 0.8975778522011627, 0.2669185225431391, 0.27924701274108144, 0.2661026815668054, 0.25946402214433806, 0.2866713024316747, 0.28746175738629454, 0.2785920231138975, 0.30472349497222506, 0.2796396369342794, 0.5715354018979621, 0.5731840311391707, 0.5422721778183635, 0.6352201863045738, 0.6344329953935881, 0.6581892570957406, 0.6143380012698922, 0.6086471821719492, 0.6373470215139447, 0.16767021049844388, 0.1271816012140916, 0.18026276756327186, 0.1412916039023896, 0.19150247728435144, 0.2269339644246683, 0.18259374976488174, 0.17504466011406694, 0.1921694832253643, 0.15902778258940675, 0.24496027366115702, 0.2070150460491006, 0.191876699049349, 0.1868527827657931, 0.1584468467468636, 0.1454222448920811, 0.1865705660617334, 0.17466536639140062, 0.16929722544710823, 0.16755879372674554, 0.14744543560677326, 0.20501908913662437, 0.15230123076291313, 0.16506765335971918, 0.23990753864125325, 0.16926421104488454, 0.19778862848555812, 0.3089304312115789, 0.31494660827608356, 0.2845957592281003, 0.28783106795552515, 0.2791434407583967, 0.24882141820825532, 0.3206669559422769, 0.34104605809376676, 0.3265125604528637, 0.1051282284164543, 0.07082043887678013, 0.05922172661587044, 0.07691820672586724, 0.0711024009223924, 0.066447416612891, 0.04408825079399825, 0.07035599678851145, 0.08231491408487257, 0.19692775240047844, 0.16998466981182792, 0.1540424913420516, 0.1891903407771559, 0.19871499721319386, 0.19022022308190534, 0.1754252240883205, 0.1704680967518385, 0.16442872020936206, 0.5161647491169629, 0.49267793625447254, 0.5038434994102237, 0.5171720988803736, 0.5324278544296595, 0.5235313808221207, 0.5311909053872583, 0.5277994442905163, 0.5384830476555111, 0.08496804078683595, 0.08679129998393031, 0.09555759537314312, 0.08485231517247993, 0.09187584493379652, 0.0842271599361053, 0.10931718524882106, 0.08958817648305051, 0.09679533792158768, 0.15543658527690718, 0.18101543337927273, 0.16298194596165794, 0.15002458425530363, 0.15663373190593866, 0.1739135003782638, 0.13944108761226104, 0.170366744242053, 0.13387753659302304, 0.30758572617636515, 0.28571767112363455, 0.31447240709023283, 0.304422963611483, 0.30444648136948904, 0.30165134228198054, 0.32385435199434254, 0.3410386885671346, 0.31517952944002237, 0.2426261764630976, 0.22871587329062548, 0.24949542377429001, 0.23521830843783487, 0.22600173738025586, 0.21797693558122133, 0.25293170207540305, 0.2578298028025715, 0.2557927310690633, 0.1908400249111415, 0.18137810328348947, 0.18487731021496412, 0.18945218730556246, 0.19228718207895523, 0.21123639092379032, 0.18642974252056532, 0.199107942416754, 0.19671687722588027, 0.18367298200226712, 0.1813914504537102, 0.18705836245209762, 0.18822501528217117, 0.1751387449664389, 0.18536247406693518, 0.1835985908450023, 0.18079581172850123, 0.17859040754627853, 0.41948302725253384, 0.17005819675034695, 0.25108859237840353, 0.22706983182111895, 0.24660975996605927, 0.31860742234069217, 0.39800534745147487, 0.3649562529667686, 0.30937734731153843, 0.19069114557140843, 0.4140524009057466, 0.5426524078149589, 0.4916949531476964, 0.17091195871458276, 0.18283605059333108, 0.20271307886384038, 0.32854470859203433, 0.20123792712310018, 0.17481261818902982, 0.20045182463228117, 0.1856995153505312, 0.17998384540578682, 0.19265519496144778, 0.17482824541389796, 0.19450009448736694, 0.17785742105196245, 0.1785536674261481, 0.07328471128278813, 0.07719357327474752, 0.07371603713103181, 0.07811925505848516, 0.08568622789644409, 0.0775975656647232, 0.07879580485621152, 0.07147774397652884, 0.08026835996878368]}, "mutation_prompt": null}
{"id": "7d3698e4-0a96-4763-960f-215f3bbbaaf3", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n                \n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Enhanced Hybrid Differential Evolution with Adaptive Scaling for improved convergence in black box optimization.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4becb607-d36e-4874-af08-9b03c0c99693", "metadata": {"aucs": [0.6318765800482264, 0.6383634092430148, 0.6486344909058389, 0.666855196881482, 0.6432110936962419, 0.6531999633593637, 0.6495287889477119, 0.6450731856741432, 0.6679367764210822, 0.3783283842127185, 0.38282819899804377, 0.41011691338965683, 0.40065529378392506, 0.4024860181410036, 0.37577786707041383, 0.38669203153469434, 0.4184486288894518, 0.3931314347241217, 0.09572778829112394, 0.09773845971963524, 0.11058275436484821, 0.10198337779643629, 0.09522397194747922, 0.14313225715541134, 0.10487526176885298, 0.11505245952990939, 0.10166182447936734, 0.09003026322879792, 0.09119435225667616, 0.08202844021232869, 0.09562834257933117, 0.09277516598585567, 0.08952786461152862, 0.09074867384138852, 0.1177810734148943, 0.09491921733678732, 0.6673561600858448, 0.9142376070355283, 0.9131790205132426, 0.7798407358744486, 0.8767436392116987, 0.8619388261475515, 0.7862867613460587, 0.7224888410859233, 0.8975778522011627, 0.2669185225431391, 0.27924701274108144, 0.2661026815668054, 0.25946402214433806, 0.2866713024316747, 0.28746175738629454, 0.2785920231138975, 0.30472349497222506, 0.2796396369342794, 0.5715354018979621, 0.5731840311391707, 0.5422721778183635, 0.6352201863045738, 0.6344329953935881, 0.6581892570957406, 0.6143380012698922, 0.6086471821719492, 0.6373470215139447, 0.16767021049844388, 0.1271816012140916, 0.18026276756327186, 0.1412916039023896, 0.19150247728435144, 0.2269339644246683, 0.18259374976488174, 0.17504466011406694, 0.1921694832253643, 0.15902778258940675, 0.24496027366115702, 0.2070150460491006, 0.191876699049349, 0.1868527827657931, 0.1584468467468636, 0.1454222448920811, 0.1865705660617334, 0.17466536639140062, 0.16929722544710823, 0.16755879372674554, 0.14744543560677326, 0.20501908913662437, 0.15230123076291313, 0.16506765335971918, 0.23990753864125325, 0.16926421104488454, 0.19778862848555812, 0.3089304312115789, 0.31494660827608356, 0.2845957592281003, 0.28783106795552515, 0.2791434407583967, 0.24882141820825532, 0.3206669559422769, 0.34104605809376676, 0.3265125604528637, 0.1051282284164543, 0.07082043887678013, 0.05922172661587044, 0.07691820672586724, 0.0711024009223924, 0.066447416612891, 0.04408825079399825, 0.07035599678851145, 0.08231491408487257, 0.19692775240047844, 0.16998466981182792, 0.1540424913420516, 0.1891903407771559, 0.19871499721319386, 0.19022022308190534, 0.1754252240883205, 0.1704680967518385, 0.16442872020936206, 0.5161647491169629, 0.49267793625447254, 0.5038434994102237, 0.5171720988803736, 0.5324278544296595, 0.5235313808221207, 0.5311909053872583, 0.5277994442905163, 0.5384830476555111, 0.08496804078683595, 0.08679129998393031, 0.09555759537314312, 0.08485231517247993, 0.09187584493379652, 0.0842271599361053, 0.10931718524882106, 0.08958817648305051, 0.09679533792158768, 0.15543658527690718, 0.18101543337927273, 0.16298194596165794, 0.15002458425530363, 0.15663373190593866, 0.1739135003782638, 0.13944108761226104, 0.170366744242053, 0.13387753659302304, 0.30758572617636515, 0.28571767112363455, 0.31447240709023283, 0.304422963611483, 0.30444648136948904, 0.30165134228198054, 0.32385435199434254, 0.3410386885671346, 0.31517952944002237, 0.2426261764630976, 0.22871587329062548, 0.24949542377429001, 0.23521830843783487, 0.22600173738025586, 0.21797693558122133, 0.25293170207540305, 0.2578298028025715, 0.2557927310690633, 0.1908400249111415, 0.18137810328348947, 0.18487731021496412, 0.18945218730556246, 0.19228718207895523, 0.21123639092379032, 0.18642974252056532, 0.199107942416754, 0.19671687722588027, 0.18367298200226712, 0.1813914504537102, 0.18705836245209762, 0.18822501528217117, 0.1751387449664389, 0.18536247406693518, 0.1835985908450023, 0.18079581172850123, 0.17859040754627853, 0.41948302725253384, 0.17005819675034695, 0.25108859237840353, 0.22706983182111895, 0.24660975996605927, 0.31860742234069217, 0.39800534745147487, 0.3649562529667686, 0.30937734731153843, 0.19069114557140843, 0.4140524009057466, 0.5426524078149589, 0.4916949531476964, 0.17091195871458276, 0.18283605059333108, 0.20271307886384038, 0.32854470859203433, 0.20123792712310018, 0.17481261818902982, 0.20045182463228117, 0.1856995153505312, 0.17998384540578682, 0.19265519496144778, 0.17482824541389796, 0.19450009448736694, 0.17785742105196245, 0.1785536674261481, 0.07328471128278813, 0.07719357327474752, 0.07371603713103181, 0.07811925505848516, 0.08568622789644409, 0.0775975656647232, 0.07879580485621152, 0.07147774397652884, 0.08026835996878368]}, "mutation_prompt": null}
{"id": "0b936800-a7bd-4729-9a37-8e956e47e288", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n                \n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Enhanced Hybrid Differential Evolution with Adaptive Scaling for improved convergence in black box optimization.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4becb607-d36e-4874-af08-9b03c0c99693", "metadata": {"aucs": [0.6318765800482264, 0.6383634092430148, 0.6486344909058389, 0.666855196881482, 0.6432110936962419, 0.6531999633593637, 0.6495287889477119, 0.6450731856741432, 0.6679367764210822, 0.3783283842127185, 0.38282819899804377, 0.41011691338965683, 0.40065529378392506, 0.4024860181410036, 0.37577786707041383, 0.38669203153469434, 0.4184486288894518, 0.3931314347241217, 0.09572778829112394, 0.09773845971963524, 0.11058275436484821, 0.10198337779643629, 0.09522397194747922, 0.14313225715541134, 0.10487526176885298, 0.11505245952990939, 0.10166182447936734, 0.09003026322879792, 0.09119435225667616, 0.08202844021232869, 0.09562834257933117, 0.09277516598585567, 0.08952786461152862, 0.09074867384138852, 0.1177810734148943, 0.09491921733678732, 0.6673561600858448, 0.9142376070355283, 0.9131790205132426, 0.7798407358744486, 0.8767436392116987, 0.8619388261475515, 0.7862867613460587, 0.7224888410859233, 0.8975778522011627, 0.2669185225431391, 0.27924701274108144, 0.2661026815668054, 0.25946402214433806, 0.2866713024316747, 0.28746175738629454, 0.2785920231138975, 0.30472349497222506, 0.2796396369342794, 0.5715354018979621, 0.5731840311391707, 0.5422721778183635, 0.6352201863045738, 0.6344329953935881, 0.6581892570957406, 0.6143380012698922, 0.6086471821719492, 0.6373470215139447, 0.16767021049844388, 0.1271816012140916, 0.18026276756327186, 0.1412916039023896, 0.19150247728435144, 0.2269339644246683, 0.18259374976488174, 0.17504466011406694, 0.1921694832253643, 0.15902778258940675, 0.24496027366115702, 0.2070150460491006, 0.191876699049349, 0.1868527827657931, 0.1584468467468636, 0.1454222448920811, 0.1865705660617334, 0.17466536639140062, 0.16929722544710823, 0.16755879372674554, 0.14744543560677326, 0.20501908913662437, 0.15230123076291313, 0.16506765335971918, 0.23990753864125325, 0.16926421104488454, 0.19778862848555812, 0.3089304312115789, 0.31494660827608356, 0.2845957592281003, 0.28783106795552515, 0.2791434407583967, 0.24882141820825532, 0.3206669559422769, 0.34104605809376676, 0.3265125604528637, 0.1051282284164543, 0.07082043887678013, 0.05922172661587044, 0.07691820672586724, 0.0711024009223924, 0.066447416612891, 0.04408825079399825, 0.07035599678851145, 0.08231491408487257, 0.19692775240047844, 0.16998466981182792, 0.1540424913420516, 0.1891903407771559, 0.19871499721319386, 0.19022022308190534, 0.1754252240883205, 0.1704680967518385, 0.16442872020936206, 0.5161647491169629, 0.49267793625447254, 0.5038434994102237, 0.5171720988803736, 0.5324278544296595, 0.5235313808221207, 0.5311909053872583, 0.5277994442905163, 0.5384830476555111, 0.08496804078683595, 0.08679129998393031, 0.09555759537314312, 0.08485231517247993, 0.09187584493379652, 0.0842271599361053, 0.10931718524882106, 0.08958817648305051, 0.09679533792158768, 0.15543658527690718, 0.18101543337927273, 0.16298194596165794, 0.15002458425530363, 0.15663373190593866, 0.1739135003782638, 0.13944108761226104, 0.170366744242053, 0.13387753659302304, 0.30758572617636515, 0.28571767112363455, 0.31447240709023283, 0.304422963611483, 0.30444648136948904, 0.30165134228198054, 0.32385435199434254, 0.3410386885671346, 0.31517952944002237, 0.2426261764630976, 0.22871587329062548, 0.24949542377429001, 0.23521830843783487, 0.22600173738025586, 0.21797693558122133, 0.25293170207540305, 0.2578298028025715, 0.2557927310690633, 0.1908400249111415, 0.18137810328348947, 0.18487731021496412, 0.18945218730556246, 0.19228718207895523, 0.21123639092379032, 0.18642974252056532, 0.199107942416754, 0.19671687722588027, 0.18367298200226712, 0.1813914504537102, 0.18705836245209762, 0.18822501528217117, 0.1751387449664389, 0.18536247406693518, 0.1835985908450023, 0.18079581172850123, 0.17859040754627853, 0.41948302725253384, 0.17005819675034695, 0.25108859237840353, 0.22706983182111895, 0.24660975996605927, 0.31860742234069217, 0.39800534745147487, 0.3649562529667686, 0.30937734731153843, 0.19069114557140843, 0.4140524009057466, 0.5426524078149589, 0.4916949531476964, 0.17091195871458276, 0.18283605059333108, 0.20271307886384038, 0.32854470859203433, 0.20123792712310018, 0.17481261818902982, 0.20045182463228117, 0.1856995153505312, 0.17998384540578682, 0.19265519496144778, 0.17482824541389796, 0.19450009448736694, 0.17785742105196245, 0.1785536674261481, 0.07328471128278813, 0.07719357327474752, 0.07371603713103181, 0.07811925505848516, 0.08568622789644409, 0.0775975656647232, 0.07879580485621152, 0.07147774397652884, 0.08026835996878368]}, "mutation_prompt": null}
{"id": "eb5b541e-ddc5-44ca-92c7-8b842587555f", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n                \n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Enhanced Hybrid Differential Evolution with Adaptive Scaling for improved convergence in black box optimization.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4becb607-d36e-4874-af08-9b03c0c99693", "metadata": {"aucs": [0.6318765800482264, 0.6383634092430148, 0.6486344909058389, 0.666855196881482, 0.6432110936962419, 0.6531999633593637, 0.6495287889477119, 0.6450731856741432, 0.6679367764210822, 0.3783283842127185, 0.38282819899804377, 0.41011691338965683, 0.40065529378392506, 0.4024860181410036, 0.37577786707041383, 0.38669203153469434, 0.4184486288894518, 0.3931314347241217, 0.09572778829112394, 0.09773845971963524, 0.11058275436484821, 0.10198337779643629, 0.09522397194747922, 0.14313225715541134, 0.10487526176885298, 0.11505245952990939, 0.10166182447936734, 0.09003026322879792, 0.09119435225667616, 0.08202844021232869, 0.09562834257933117, 0.09277516598585567, 0.08952786461152862, 0.09074867384138852, 0.1177810734148943, 0.09491921733678732, 0.6673561600858448, 0.9142376070355283, 0.9131790205132426, 0.7798407358744486, 0.8767436392116987, 0.8619388261475515, 0.7862867613460587, 0.7224888410859233, 0.8975778522011627, 0.2669185225431391, 0.27924701274108144, 0.2661026815668054, 0.25946402214433806, 0.2866713024316747, 0.28746175738629454, 0.2785920231138975, 0.30472349497222506, 0.2796396369342794, 0.5715354018979621, 0.5731840311391707, 0.5422721778183635, 0.6352201863045738, 0.6344329953935881, 0.6581892570957406, 0.6143380012698922, 0.6086471821719492, 0.6373470215139447, 0.16767021049844388, 0.1271816012140916, 0.18026276756327186, 0.1412916039023896, 0.19150247728435144, 0.2269339644246683, 0.18259374976488174, 0.17504466011406694, 0.1921694832253643, 0.15902778258940675, 0.24496027366115702, 0.2070150460491006, 0.191876699049349, 0.1868527827657931, 0.1584468467468636, 0.1454222448920811, 0.1865705660617334, 0.17466536639140062, 0.16929722544710823, 0.16755879372674554, 0.14744543560677326, 0.20501908913662437, 0.15230123076291313, 0.16506765335971918, 0.23990753864125325, 0.16926421104488454, 0.19778862848555812, 0.3089304312115789, 0.31494660827608356, 0.2845957592281003, 0.28783106795552515, 0.2791434407583967, 0.24882141820825532, 0.3206669559422769, 0.34104605809376676, 0.3265125604528637, 0.1051282284164543, 0.07082043887678013, 0.05922172661587044, 0.07691820672586724, 0.0711024009223924, 0.066447416612891, 0.04408825079399825, 0.07035599678851145, 0.08231491408487257, 0.19692775240047844, 0.16998466981182792, 0.1540424913420516, 0.1891903407771559, 0.19871499721319386, 0.19022022308190534, 0.1754252240883205, 0.1704680967518385, 0.16442872020936206, 0.5161647491169629, 0.49267793625447254, 0.5038434994102237, 0.5171720988803736, 0.5324278544296595, 0.5235313808221207, 0.5311909053872583, 0.5277994442905163, 0.5384830476555111, 0.08496804078683595, 0.08679129998393031, 0.09555759537314312, 0.08485231517247993, 0.09187584493379652, 0.0842271599361053, 0.10931718524882106, 0.08958817648305051, 0.09679533792158768, 0.15543658527690718, 0.18101543337927273, 0.16298194596165794, 0.15002458425530363, 0.15663373190593866, 0.1739135003782638, 0.13944108761226104, 0.170366744242053, 0.13387753659302304, 0.30758572617636515, 0.28571767112363455, 0.31447240709023283, 0.304422963611483, 0.30444648136948904, 0.30165134228198054, 0.32385435199434254, 0.3410386885671346, 0.31517952944002237, 0.2426261764630976, 0.22871587329062548, 0.24949542377429001, 0.23521830843783487, 0.22600173738025586, 0.21797693558122133, 0.25293170207540305, 0.2578298028025715, 0.2557927310690633, 0.1908400249111415, 0.18137810328348947, 0.18487731021496412, 0.18945218730556246, 0.19228718207895523, 0.21123639092379032, 0.18642974252056532, 0.199107942416754, 0.19671687722588027, 0.18367298200226712, 0.1813914504537102, 0.18705836245209762, 0.18822501528217117, 0.1751387449664389, 0.18536247406693518, 0.1835985908450023, 0.18079581172850123, 0.17859040754627853, 0.41948302725253384, 0.17005819675034695, 0.25108859237840353, 0.22706983182111895, 0.24660975996605927, 0.31860742234069217, 0.39800534745147487, 0.3649562529667686, 0.30937734731153843, 0.19069114557140843, 0.4140524009057466, 0.5426524078149589, 0.4916949531476964, 0.17091195871458276, 0.18283605059333108, 0.20271307886384038, 0.32854470859203433, 0.20123792712310018, 0.17481261818902982, 0.20045182463228117, 0.1856995153505312, 0.17998384540578682, 0.19265519496144778, 0.17482824541389796, 0.19450009448736694, 0.17785742105196245, 0.1785536674261481, 0.07328471128278813, 0.07719357327474752, 0.07371603713103181, 0.07811925505848516, 0.08568622789644409, 0.0775975656647232, 0.07879580485621152, 0.07147774397652884, 0.08026835996878368]}, "mutation_prompt": null}
{"id": "c1757a02-b93f-43a2-9611-092680e8e7a4", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n                \n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Enhanced Hybrid Differential Evolution with Adaptive Scaling for improved convergence in black box optimization.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4becb607-d36e-4874-af08-9b03c0c99693", "metadata": {"aucs": [0.6318765800482264, 0.6383634092430148, 0.6486344909058389, 0.666855196881482, 0.6432110936962419, 0.6531999633593637, 0.6495287889477119, 0.6450731856741432, 0.6679367764210822, 0.3783283842127185, 0.38282819899804377, 0.41011691338965683, 0.40065529378392506, 0.4024860181410036, 0.37577786707041383, 0.38669203153469434, 0.4184486288894518, 0.3931314347241217, 0.09572778829112394, 0.09773845971963524, 0.11058275436484821, 0.10198337779643629, 0.09522397194747922, 0.14313225715541134, 0.10487526176885298, 0.11505245952990939, 0.10166182447936734, 0.09003026322879792, 0.09119435225667616, 0.08202844021232869, 0.09562834257933117, 0.09277516598585567, 0.08952786461152862, 0.09074867384138852, 0.1177810734148943, 0.09491921733678732, 0.6673561600858448, 0.9142376070355283, 0.9131790205132426, 0.7798407358744486, 0.8767436392116987, 0.8619388261475515, 0.7862867613460587, 0.7224888410859233, 0.8975778522011627, 0.2669185225431391, 0.27924701274108144, 0.2661026815668054, 0.25946402214433806, 0.2866713024316747, 0.28746175738629454, 0.2785920231138975, 0.30472349497222506, 0.2796396369342794, 0.5715354018979621, 0.5731840311391707, 0.5422721778183635, 0.6352201863045738, 0.6344329953935881, 0.6581892570957406, 0.6143380012698922, 0.6086471821719492, 0.6373470215139447, 0.16767021049844388, 0.1271816012140916, 0.18026276756327186, 0.1412916039023896, 0.19150247728435144, 0.2269339644246683, 0.18259374976488174, 0.17504466011406694, 0.1921694832253643, 0.15902778258940675, 0.24496027366115702, 0.2070150460491006, 0.191876699049349, 0.1868527827657931, 0.1584468467468636, 0.1454222448920811, 0.1865705660617334, 0.17466536639140062, 0.16929722544710823, 0.16755879372674554, 0.14744543560677326, 0.20501908913662437, 0.15230123076291313, 0.16506765335971918, 0.23990753864125325, 0.16926421104488454, 0.19778862848555812, 0.3089304312115789, 0.31494660827608356, 0.2845957592281003, 0.28783106795552515, 0.2791434407583967, 0.24882141820825532, 0.3206669559422769, 0.34104605809376676, 0.3265125604528637, 0.1051282284164543, 0.07082043887678013, 0.05922172661587044, 0.07691820672586724, 0.0711024009223924, 0.066447416612891, 0.04408825079399825, 0.07035599678851145, 0.08231491408487257, 0.19692775240047844, 0.16998466981182792, 0.1540424913420516, 0.1891903407771559, 0.19871499721319386, 0.19022022308190534, 0.1754252240883205, 0.1704680967518385, 0.16442872020936206, 0.5161647491169629, 0.49267793625447254, 0.5038434994102237, 0.5171720988803736, 0.5324278544296595, 0.5235313808221207, 0.5311909053872583, 0.5277994442905163, 0.5384830476555111, 0.08496804078683595, 0.08679129998393031, 0.09555759537314312, 0.08485231517247993, 0.09187584493379652, 0.0842271599361053, 0.10931718524882106, 0.08958817648305051, 0.09679533792158768, 0.15543658527690718, 0.18101543337927273, 0.16298194596165794, 0.15002458425530363, 0.15663373190593866, 0.1739135003782638, 0.13944108761226104, 0.170366744242053, 0.13387753659302304, 0.30758572617636515, 0.28571767112363455, 0.31447240709023283, 0.304422963611483, 0.30444648136948904, 0.30165134228198054, 0.32385435199434254, 0.3410386885671346, 0.31517952944002237, 0.2426261764630976, 0.22871587329062548, 0.24949542377429001, 0.23521830843783487, 0.22600173738025586, 0.21797693558122133, 0.25293170207540305, 0.2578298028025715, 0.2557927310690633, 0.1908400249111415, 0.18137810328348947, 0.18487731021496412, 0.18945218730556246, 0.19228718207895523, 0.21123639092379032, 0.18642974252056532, 0.199107942416754, 0.19671687722588027, 0.18367298200226712, 0.1813914504537102, 0.18705836245209762, 0.18822501528217117, 0.1751387449664389, 0.18536247406693518, 0.1835985908450023, 0.18079581172850123, 0.17859040754627853, 0.41948302725253384, 0.17005819675034695, 0.25108859237840353, 0.22706983182111895, 0.24660975996605927, 0.31860742234069217, 0.39800534745147487, 0.3649562529667686, 0.30937734731153843, 0.19069114557140843, 0.4140524009057466, 0.5426524078149589, 0.4916949531476964, 0.17091195871458276, 0.18283605059333108, 0.20271307886384038, 0.32854470859203433, 0.20123792712310018, 0.17481261818902982, 0.20045182463228117, 0.1856995153505312, 0.17998384540578682, 0.19265519496144778, 0.17482824541389796, 0.19450009448736694, 0.17785742105196245, 0.1785536674261481, 0.07328471128278813, 0.07719357327474752, 0.07371603713103181, 0.07811925505848516, 0.08568622789644409, 0.0775975656647232, 0.07879580485621152, 0.07147774397652884, 0.08026835996878368]}, "mutation_prompt": null}
{"id": "8249d0b9-3453-4e32-8bf3-e74e7fec6a4d", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n                \n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Enhanced Hybrid Differential Evolution with Adaptive Scaling for improved convergence in black box optimization.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4becb607-d36e-4874-af08-9b03c0c99693", "metadata": {"aucs": [0.6318765800482264, 0.6383634092430148, 0.6486344909058389, 0.666855196881482, 0.6432110936962419, 0.6531999633593637, 0.6495287889477119, 0.6450731856741432, 0.6679367764210822, 0.3783283842127185, 0.38282819899804377, 0.41011691338965683, 0.40065529378392506, 0.4024860181410036, 0.37577786707041383, 0.38669203153469434, 0.4184486288894518, 0.3931314347241217, 0.09572778829112394, 0.09773845971963524, 0.11058275436484821, 0.10198337779643629, 0.09522397194747922, 0.14313225715541134, 0.10487526176885298, 0.11505245952990939, 0.10166182447936734, 0.09003026322879792, 0.09119435225667616, 0.08202844021232869, 0.09562834257933117, 0.09277516598585567, 0.08952786461152862, 0.09074867384138852, 0.1177810734148943, 0.09491921733678732, 0.6673561600858448, 0.9142376070355283, 0.9131790205132426, 0.7798407358744486, 0.8767436392116987, 0.8619388261475515, 0.7862867613460587, 0.7224888410859233, 0.8975778522011627, 0.2669185225431391, 0.27924701274108144, 0.2661026815668054, 0.25946402214433806, 0.2866713024316747, 0.28746175738629454, 0.2785920231138975, 0.30472349497222506, 0.2796396369342794, 0.5715354018979621, 0.5731840311391707, 0.5422721778183635, 0.6352201863045738, 0.6344329953935881, 0.6581892570957406, 0.6143380012698922, 0.6086471821719492, 0.6373470215139447, 0.16767021049844388, 0.1271816012140916, 0.18026276756327186, 0.1412916039023896, 0.19150247728435144, 0.2269339644246683, 0.18259374976488174, 0.17504466011406694, 0.1921694832253643, 0.15902778258940675, 0.24496027366115702, 0.2070150460491006, 0.191876699049349, 0.1868527827657931, 0.1584468467468636, 0.1454222448920811, 0.1865705660617334, 0.17466536639140062, 0.16929722544710823, 0.16755879372674554, 0.14744543560677326, 0.20501908913662437, 0.15230123076291313, 0.16506765335971918, 0.23990753864125325, 0.16926421104488454, 0.19778862848555812, 0.3089304312115789, 0.31494660827608356, 0.2845957592281003, 0.28783106795552515, 0.2791434407583967, 0.24882141820825532, 0.3206669559422769, 0.34104605809376676, 0.3265125604528637, 0.1051282284164543, 0.07082043887678013, 0.05922172661587044, 0.07691820672586724, 0.0711024009223924, 0.066447416612891, 0.04408825079399825, 0.07035599678851145, 0.08231491408487257, 0.19692775240047844, 0.16998466981182792, 0.1540424913420516, 0.1891903407771559, 0.19871499721319386, 0.19022022308190534, 0.1754252240883205, 0.1704680967518385, 0.16442872020936206, 0.5161647491169629, 0.49267793625447254, 0.5038434994102237, 0.5171720988803736, 0.5324278544296595, 0.5235313808221207, 0.5311909053872583, 0.5277994442905163, 0.5384830476555111, 0.08496804078683595, 0.08679129998393031, 0.09555759537314312, 0.08485231517247993, 0.09187584493379652, 0.0842271599361053, 0.10931718524882106, 0.08958817648305051, 0.09679533792158768, 0.15543658527690718, 0.18101543337927273, 0.16298194596165794, 0.15002458425530363, 0.15663373190593866, 0.1739135003782638, 0.13944108761226104, 0.170366744242053, 0.13387753659302304, 0.30758572617636515, 0.28571767112363455, 0.31447240709023283, 0.304422963611483, 0.30444648136948904, 0.30165134228198054, 0.32385435199434254, 0.3410386885671346, 0.31517952944002237, 0.2426261764630976, 0.22871587329062548, 0.24949542377429001, 0.23521830843783487, 0.22600173738025586, 0.21797693558122133, 0.25293170207540305, 0.2578298028025715, 0.2557927310690633, 0.1908400249111415, 0.18137810328348947, 0.18487731021496412, 0.18945218730556246, 0.19228718207895523, 0.21123639092379032, 0.18642974252056532, 0.199107942416754, 0.19671687722588027, 0.18367298200226712, 0.1813914504537102, 0.18705836245209762, 0.18822501528217117, 0.1751387449664389, 0.18536247406693518, 0.1835985908450023, 0.18079581172850123, 0.17859040754627853, 0.41948302725253384, 0.17005819675034695, 0.25108859237840353, 0.22706983182111895, 0.24660975996605927, 0.31860742234069217, 0.39800534745147487, 0.3649562529667686, 0.30937734731153843, 0.19069114557140843, 0.4140524009057466, 0.5426524078149589, 0.4916949531476964, 0.17091195871458276, 0.18283605059333108, 0.20271307886384038, 0.32854470859203433, 0.20123792712310018, 0.17481261818902982, 0.20045182463228117, 0.1856995153505312, 0.17998384540578682, 0.19265519496144778, 0.17482824541389796, 0.19450009448736694, 0.17785742105196245, 0.1785536674261481, 0.07328471128278813, 0.07719357327474752, 0.07371603713103181, 0.07811925505848516, 0.08568622789644409, 0.0775975656647232, 0.07879580485621152, 0.07147774397652884, 0.08026835996878368]}, "mutation_prompt": null}
{"id": "8d40d052-e1a6-4e13-af0e-c25b3ce12cd2", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n                \n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Enhanced Hybrid Differential Evolution with Adaptive Scaling for improved convergence in black box optimization.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4becb607-d36e-4874-af08-9b03c0c99693", "metadata": {"aucs": [0.6318765800482264, 0.6383634092430148, 0.6486344909058389, 0.666855196881482, 0.6432110936962419, 0.6531999633593637, 0.6495287889477119, 0.6450731856741432, 0.6679367764210822, 0.3783283842127185, 0.38282819899804377, 0.41011691338965683, 0.40065529378392506, 0.4024860181410036, 0.37577786707041383, 0.38669203153469434, 0.4184486288894518, 0.3931314347241217, 0.09572778829112394, 0.09773845971963524, 0.11058275436484821, 0.10198337779643629, 0.09522397194747922, 0.14313225715541134, 0.10487526176885298, 0.11505245952990939, 0.10166182447936734, 0.09003026322879792, 0.09119435225667616, 0.08202844021232869, 0.09562834257933117, 0.09277516598585567, 0.08952786461152862, 0.09074867384138852, 0.1177810734148943, 0.09491921733678732, 0.6673561600858448, 0.9142376070355283, 0.9131790205132426, 0.7798407358744486, 0.8767436392116987, 0.8619388261475515, 0.7862867613460587, 0.7224888410859233, 0.8975778522011627, 0.2669185225431391, 0.27924701274108144, 0.2661026815668054, 0.25946402214433806, 0.2866713024316747, 0.28746175738629454, 0.2785920231138975, 0.30472349497222506, 0.2796396369342794, 0.5715354018979621, 0.5731840311391707, 0.5422721778183635, 0.6352201863045738, 0.6344329953935881, 0.6581892570957406, 0.6143380012698922, 0.6086471821719492, 0.6373470215139447, 0.16767021049844388, 0.1271816012140916, 0.18026276756327186, 0.1412916039023896, 0.19150247728435144, 0.2269339644246683, 0.18259374976488174, 0.17504466011406694, 0.1921694832253643, 0.15902778258940675, 0.24496027366115702, 0.2070150460491006, 0.191876699049349, 0.1868527827657931, 0.1584468467468636, 0.1454222448920811, 0.1865705660617334, 0.17466536639140062, 0.16929722544710823, 0.16755879372674554, 0.14744543560677326, 0.20501908913662437, 0.15230123076291313, 0.16506765335971918, 0.23990753864125325, 0.16926421104488454, 0.19778862848555812, 0.3089304312115789, 0.31494660827608356, 0.2845957592281003, 0.28783106795552515, 0.2791434407583967, 0.24882141820825532, 0.3206669559422769, 0.34104605809376676, 0.3265125604528637, 0.1051282284164543, 0.07082043887678013, 0.05922172661587044, 0.07691820672586724, 0.0711024009223924, 0.066447416612891, 0.04408825079399825, 0.07035599678851145, 0.08231491408487257, 0.19692775240047844, 0.16998466981182792, 0.1540424913420516, 0.1891903407771559, 0.19871499721319386, 0.19022022308190534, 0.1754252240883205, 0.1704680967518385, 0.16442872020936206, 0.5161647491169629, 0.49267793625447254, 0.5038434994102237, 0.5171720988803736, 0.5324278544296595, 0.5235313808221207, 0.5311909053872583, 0.5277994442905163, 0.5384830476555111, 0.08496804078683595, 0.08679129998393031, 0.09555759537314312, 0.08485231517247993, 0.09187584493379652, 0.0842271599361053, 0.10931718524882106, 0.08958817648305051, 0.09679533792158768, 0.15543658527690718, 0.18101543337927273, 0.16298194596165794, 0.15002458425530363, 0.15663373190593866, 0.1739135003782638, 0.13944108761226104, 0.170366744242053, 0.13387753659302304, 0.30758572617636515, 0.28571767112363455, 0.31447240709023283, 0.304422963611483, 0.30444648136948904, 0.30165134228198054, 0.32385435199434254, 0.3410386885671346, 0.31517952944002237, 0.2426261764630976, 0.22871587329062548, 0.24949542377429001, 0.23521830843783487, 0.22600173738025586, 0.21797693558122133, 0.25293170207540305, 0.2578298028025715, 0.2557927310690633, 0.1908400249111415, 0.18137810328348947, 0.18487731021496412, 0.18945218730556246, 0.19228718207895523, 0.21123639092379032, 0.18642974252056532, 0.199107942416754, 0.19671687722588027, 0.18367298200226712, 0.1813914504537102, 0.18705836245209762, 0.18822501528217117, 0.1751387449664389, 0.18536247406693518, 0.1835985908450023, 0.18079581172850123, 0.17859040754627853, 0.41948302725253384, 0.17005819675034695, 0.25108859237840353, 0.22706983182111895, 0.24660975996605927, 0.31860742234069217, 0.39800534745147487, 0.3649562529667686, 0.30937734731153843, 0.19069114557140843, 0.4140524009057466, 0.5426524078149589, 0.4916949531476964, 0.17091195871458276, 0.18283605059333108, 0.20271307886384038, 0.32854470859203433, 0.20123792712310018, 0.17481261818902982, 0.20045182463228117, 0.1856995153505312, 0.17998384540578682, 0.19265519496144778, 0.17482824541389796, 0.19450009448736694, 0.17785742105196245, 0.1785536674261481, 0.07328471128278813, 0.07719357327474752, 0.07371603713103181, 0.07811925505848516, 0.08568622789644409, 0.0775975656647232, 0.07879580485621152, 0.07147774397652884, 0.08026835996878368]}, "mutation_prompt": null}
{"id": "50e5ff94-3c54-4566-a7fe-7c04dba76d3e", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n                \n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Enhanced Hybrid Differential Evolution with Adaptive Scaling for improved convergence in black box optimization.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4becb607-d36e-4874-af08-9b03c0c99693", "metadata": {"aucs": [0.6318765800482264, 0.6383634092430148, 0.6486344909058389, 0.666855196881482, 0.6432110936962419, 0.6531999633593637, 0.6495287889477119, 0.6450731856741432, 0.6679367764210822, 0.3783283842127185, 0.38282819899804377, 0.41011691338965683, 0.40065529378392506, 0.4024860181410036, 0.37577786707041383, 0.38669203153469434, 0.4184486288894518, 0.3931314347241217, 0.09572778829112394, 0.09773845971963524, 0.11058275436484821, 0.10198337779643629, 0.09522397194747922, 0.14313225715541134, 0.10487526176885298, 0.11505245952990939, 0.10166182447936734, 0.09003026322879792, 0.09119435225667616, 0.08202844021232869, 0.09562834257933117, 0.09277516598585567, 0.08952786461152862, 0.09074867384138852, 0.1177810734148943, 0.09491921733678732, 0.6673561600858448, 0.9142376070355283, 0.9131790205132426, 0.7798407358744486, 0.8767436392116987, 0.8619388261475515, 0.7862867613460587, 0.7224888410859233, 0.8975778522011627, 0.2669185225431391, 0.27924701274108144, 0.2661026815668054, 0.25946402214433806, 0.2866713024316747, 0.28746175738629454, 0.2785920231138975, 0.30472349497222506, 0.2796396369342794, 0.5715354018979621, 0.5731840311391707, 0.5422721778183635, 0.6352201863045738, 0.6344329953935881, 0.6581892570957406, 0.6143380012698922, 0.6086471821719492, 0.6373470215139447, 0.16767021049844388, 0.1271816012140916, 0.18026276756327186, 0.1412916039023896, 0.19150247728435144, 0.2269339644246683, 0.18259374976488174, 0.17504466011406694, 0.1921694832253643, 0.15902778258940675, 0.24496027366115702, 0.2070150460491006, 0.191876699049349, 0.1868527827657931, 0.1584468467468636, 0.1454222448920811, 0.1865705660617334, 0.17466536639140062, 0.16929722544710823, 0.16755879372674554, 0.14744543560677326, 0.20501908913662437, 0.15230123076291313, 0.16506765335971918, 0.23990753864125325, 0.16926421104488454, 0.19778862848555812, 0.3089304312115789, 0.31494660827608356, 0.2845957592281003, 0.28783106795552515, 0.2791434407583967, 0.24882141820825532, 0.3206669559422769, 0.34104605809376676, 0.3265125604528637, 0.1051282284164543, 0.07082043887678013, 0.05922172661587044, 0.07691820672586724, 0.0711024009223924, 0.066447416612891, 0.04408825079399825, 0.07035599678851145, 0.08231491408487257, 0.19692775240047844, 0.16998466981182792, 0.1540424913420516, 0.1891903407771559, 0.19871499721319386, 0.19022022308190534, 0.1754252240883205, 0.1704680967518385, 0.16442872020936206, 0.5161647491169629, 0.49267793625447254, 0.5038434994102237, 0.5171720988803736, 0.5324278544296595, 0.5235313808221207, 0.5311909053872583, 0.5277994442905163, 0.5384830476555111, 0.08496804078683595, 0.08679129998393031, 0.09555759537314312, 0.08485231517247993, 0.09187584493379652, 0.0842271599361053, 0.10931718524882106, 0.08958817648305051, 0.09679533792158768, 0.15543658527690718, 0.18101543337927273, 0.16298194596165794, 0.15002458425530363, 0.15663373190593866, 0.1739135003782638, 0.13944108761226104, 0.170366744242053, 0.13387753659302304, 0.30758572617636515, 0.28571767112363455, 0.31447240709023283, 0.304422963611483, 0.30444648136948904, 0.30165134228198054, 0.32385435199434254, 0.3410386885671346, 0.31517952944002237, 0.2426261764630976, 0.22871587329062548, 0.24949542377429001, 0.23521830843783487, 0.22600173738025586, 0.21797693558122133, 0.25293170207540305, 0.2578298028025715, 0.2557927310690633, 0.1908400249111415, 0.18137810328348947, 0.18487731021496412, 0.18945218730556246, 0.19228718207895523, 0.21123639092379032, 0.18642974252056532, 0.199107942416754, 0.19671687722588027, 0.18367298200226712, 0.1813914504537102, 0.18705836245209762, 0.18822501528217117, 0.1751387449664389, 0.18536247406693518, 0.1835985908450023, 0.18079581172850123, 0.17859040754627853, 0.41948302725253384, 0.17005819675034695, 0.25108859237840353, 0.22706983182111895, 0.24660975996605927, 0.31860742234069217, 0.39800534745147487, 0.3649562529667686, 0.30937734731153843, 0.19069114557140843, 0.4140524009057466, 0.5426524078149589, 0.4916949531476964, 0.17091195871458276, 0.18283605059333108, 0.20271307886384038, 0.32854470859203433, 0.20123792712310018, 0.17481261818902982, 0.20045182463228117, 0.1856995153505312, 0.17998384540578682, 0.19265519496144778, 0.17482824541389796, 0.19450009448736694, 0.17785742105196245, 0.1785536674261481, 0.07328471128278813, 0.07719357327474752, 0.07371603713103181, 0.07811925505848516, 0.08568622789644409, 0.0775975656647232, 0.07879580485621152, 0.07147774397652884, 0.08026835996878368]}, "mutation_prompt": null}
{"id": "ccaac205-14b3-474f-808a-6823d694111c", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n                \n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Enhanced Hybrid Differential Evolution with Adaptive Scaling for improved convergence in black box optimization.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4becb607-d36e-4874-af08-9b03c0c99693", "metadata": {"aucs": [0.6318765800482264, 0.6383634092430148, 0.6486344909058389, 0.666855196881482, 0.6432110936962419, 0.6531999633593637, 0.6495287889477119, 0.6450731856741432, 0.6679367764210822, 0.3783283842127185, 0.38282819899804377, 0.41011691338965683, 0.40065529378392506, 0.4024860181410036, 0.37577786707041383, 0.38669203153469434, 0.4184486288894518, 0.3931314347241217, 0.09572778829112394, 0.09773845971963524, 0.11058275436484821, 0.10198337779643629, 0.09522397194747922, 0.14313225715541134, 0.10487526176885298, 0.11505245952990939, 0.10166182447936734, 0.09003026322879792, 0.09119435225667616, 0.08202844021232869, 0.09562834257933117, 0.09277516598585567, 0.08952786461152862, 0.09074867384138852, 0.1177810734148943, 0.09491921733678732, 0.6673561600858448, 0.9142376070355283, 0.9131790205132426, 0.7798407358744486, 0.8767436392116987, 0.8619388261475515, 0.7862867613460587, 0.7224888410859233, 0.8975778522011627, 0.2669185225431391, 0.27924701274108144, 0.2661026815668054, 0.25946402214433806, 0.2866713024316747, 0.28746175738629454, 0.2785920231138975, 0.30472349497222506, 0.2796396369342794, 0.5715354018979621, 0.5731840311391707, 0.5422721778183635, 0.6352201863045738, 0.6344329953935881, 0.6581892570957406, 0.6143380012698922, 0.6086471821719492, 0.6373470215139447, 0.16767021049844388, 0.1271816012140916, 0.18026276756327186, 0.1412916039023896, 0.19150247728435144, 0.2269339644246683, 0.18259374976488174, 0.17504466011406694, 0.1921694832253643, 0.15902778258940675, 0.24496027366115702, 0.2070150460491006, 0.191876699049349, 0.1868527827657931, 0.1584468467468636, 0.1454222448920811, 0.1865705660617334, 0.17466536639140062, 0.16929722544710823, 0.16755879372674554, 0.14744543560677326, 0.20501908913662437, 0.15230123076291313, 0.16506765335971918, 0.23990753864125325, 0.16926421104488454, 0.19778862848555812, 0.3089304312115789, 0.31494660827608356, 0.2845957592281003, 0.28783106795552515, 0.2791434407583967, 0.24882141820825532, 0.3206669559422769, 0.34104605809376676, 0.3265125604528637, 0.1051282284164543, 0.07082043887678013, 0.05922172661587044, 0.07691820672586724, 0.0711024009223924, 0.066447416612891, 0.04408825079399825, 0.07035599678851145, 0.08231491408487257, 0.19692775240047844, 0.16998466981182792, 0.1540424913420516, 0.1891903407771559, 0.19871499721319386, 0.19022022308190534, 0.1754252240883205, 0.1704680967518385, 0.16442872020936206, 0.5161647491169629, 0.49267793625447254, 0.5038434994102237, 0.5171720988803736, 0.5324278544296595, 0.5235313808221207, 0.5311909053872583, 0.5277994442905163, 0.5384830476555111, 0.08496804078683595, 0.08679129998393031, 0.09555759537314312, 0.08485231517247993, 0.09187584493379652, 0.0842271599361053, 0.10931718524882106, 0.08958817648305051, 0.09679533792158768, 0.15543658527690718, 0.18101543337927273, 0.16298194596165794, 0.15002458425530363, 0.15663373190593866, 0.1739135003782638, 0.13944108761226104, 0.170366744242053, 0.13387753659302304, 0.30758572617636515, 0.28571767112363455, 0.31447240709023283, 0.304422963611483, 0.30444648136948904, 0.30165134228198054, 0.32385435199434254, 0.3410386885671346, 0.31517952944002237, 0.2426261764630976, 0.22871587329062548, 0.24949542377429001, 0.23521830843783487, 0.22600173738025586, 0.21797693558122133, 0.25293170207540305, 0.2578298028025715, 0.2557927310690633, 0.1908400249111415, 0.18137810328348947, 0.18487731021496412, 0.18945218730556246, 0.19228718207895523, 0.21123639092379032, 0.18642974252056532, 0.199107942416754, 0.19671687722588027, 0.18367298200226712, 0.1813914504537102, 0.18705836245209762, 0.18822501528217117, 0.1751387449664389, 0.18536247406693518, 0.1835985908450023, 0.18079581172850123, 0.17859040754627853, 0.41948302725253384, 0.17005819675034695, 0.25108859237840353, 0.22706983182111895, 0.24660975996605927, 0.31860742234069217, 0.39800534745147487, 0.3649562529667686, 0.30937734731153843, 0.19069114557140843, 0.4140524009057466, 0.5426524078149589, 0.4916949531476964, 0.17091195871458276, 0.18283605059333108, 0.20271307886384038, 0.32854470859203433, 0.20123792712310018, 0.17481261818902982, 0.20045182463228117, 0.1856995153505312, 0.17998384540578682, 0.19265519496144778, 0.17482824541389796, 0.19450009448736694, 0.17785742105196245, 0.1785536674261481, 0.07328471128278813, 0.07719357327474752, 0.07371603713103181, 0.07811925505848516, 0.08568622789644409, 0.0775975656647232, 0.07879580485621152, 0.07147774397652884, 0.08026835996878368]}, "mutation_prompt": null}
{"id": "099509de-c75c-4d5d-99a6-e5a546f6438b", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n                \n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Enhanced Hybrid Differential Evolution with Adaptive Scaling for improved convergence in black box optimization.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4becb607-d36e-4874-af08-9b03c0c99693", "metadata": {"aucs": [0.6318765800482264, 0.6383634092430148, 0.6486344909058389, 0.666855196881482, 0.6432110936962419, 0.6531999633593637, 0.6495287889477119, 0.6450731856741432, 0.6679367764210822, 0.3783283842127185, 0.38282819899804377, 0.41011691338965683, 0.40065529378392506, 0.4024860181410036, 0.37577786707041383, 0.38669203153469434, 0.4184486288894518, 0.3931314347241217, 0.09572778829112394, 0.09773845971963524, 0.11058275436484821, 0.10198337779643629, 0.09522397194747922, 0.14313225715541134, 0.10487526176885298, 0.11505245952990939, 0.10166182447936734, 0.09003026322879792, 0.09119435225667616, 0.08202844021232869, 0.09562834257933117, 0.09277516598585567, 0.08952786461152862, 0.09074867384138852, 0.1177810734148943, 0.09491921733678732, 0.6673561600858448, 0.9142376070355283, 0.9131790205132426, 0.7798407358744486, 0.8767436392116987, 0.8619388261475515, 0.7862867613460587, 0.7224888410859233, 0.8975778522011627, 0.2669185225431391, 0.27924701274108144, 0.2661026815668054, 0.25946402214433806, 0.2866713024316747, 0.28746175738629454, 0.2785920231138975, 0.30472349497222506, 0.2796396369342794, 0.5715354018979621, 0.5731840311391707, 0.5422721778183635, 0.6352201863045738, 0.6344329953935881, 0.6581892570957406, 0.6143380012698922, 0.6086471821719492, 0.6373470215139447, 0.16767021049844388, 0.1271816012140916, 0.18026276756327186, 0.1412916039023896, 0.19150247728435144, 0.2269339644246683, 0.18259374976488174, 0.17504466011406694, 0.1921694832253643, 0.15902778258940675, 0.24496027366115702, 0.2070150460491006, 0.191876699049349, 0.1868527827657931, 0.1584468467468636, 0.1454222448920811, 0.1865705660617334, 0.17466536639140062, 0.16929722544710823, 0.16755879372674554, 0.14744543560677326, 0.20501908913662437, 0.15230123076291313, 0.16506765335971918, 0.23990753864125325, 0.16926421104488454, 0.19778862848555812, 0.3089304312115789, 0.31494660827608356, 0.2845957592281003, 0.28783106795552515, 0.2791434407583967, 0.24882141820825532, 0.3206669559422769, 0.34104605809376676, 0.3265125604528637, 0.1051282284164543, 0.07082043887678013, 0.05922172661587044, 0.07691820672586724, 0.0711024009223924, 0.066447416612891, 0.04408825079399825, 0.07035599678851145, 0.08231491408487257, 0.19692775240047844, 0.16998466981182792, 0.1540424913420516, 0.1891903407771559, 0.19871499721319386, 0.19022022308190534, 0.1754252240883205, 0.1704680967518385, 0.16442872020936206, 0.5161647491169629, 0.49267793625447254, 0.5038434994102237, 0.5171720988803736, 0.5324278544296595, 0.5235313808221207, 0.5311909053872583, 0.5277994442905163, 0.5384830476555111, 0.08496804078683595, 0.08679129998393031, 0.09555759537314312, 0.08485231517247993, 0.09187584493379652, 0.0842271599361053, 0.10931718524882106, 0.08958817648305051, 0.09679533792158768, 0.15543658527690718, 0.18101543337927273, 0.16298194596165794, 0.15002458425530363, 0.15663373190593866, 0.1739135003782638, 0.13944108761226104, 0.170366744242053, 0.13387753659302304, 0.30758572617636515, 0.28571767112363455, 0.31447240709023283, 0.304422963611483, 0.30444648136948904, 0.30165134228198054, 0.32385435199434254, 0.3410386885671346, 0.31517952944002237, 0.2426261764630976, 0.22871587329062548, 0.24949542377429001, 0.23521830843783487, 0.22600173738025586, 0.21797693558122133, 0.25293170207540305, 0.2578298028025715, 0.2557927310690633, 0.1908400249111415, 0.18137810328348947, 0.18487731021496412, 0.18945218730556246, 0.19228718207895523, 0.21123639092379032, 0.18642974252056532, 0.199107942416754, 0.19671687722588027, 0.18367298200226712, 0.1813914504537102, 0.18705836245209762, 0.18822501528217117, 0.1751387449664389, 0.18536247406693518, 0.1835985908450023, 0.18079581172850123, 0.17859040754627853, 0.41948302725253384, 0.17005819675034695, 0.25108859237840353, 0.22706983182111895, 0.24660975996605927, 0.31860742234069217, 0.39800534745147487, 0.3649562529667686, 0.30937734731153843, 0.19069114557140843, 0.4140524009057466, 0.5426524078149589, 0.4916949531476964, 0.17091195871458276, 0.18283605059333108, 0.20271307886384038, 0.32854470859203433, 0.20123792712310018, 0.17481261818902982, 0.20045182463228117, 0.1856995153505312, 0.17998384540578682, 0.19265519496144778, 0.17482824541389796, 0.19450009448736694, 0.17785742105196245, 0.1785536674261481, 0.07328471128278813, 0.07719357327474752, 0.07371603713103181, 0.07811925505848516, 0.08568622789644409, 0.0775975656647232, 0.07879580485621152, 0.07147774397652884, 0.08026835996878368]}, "mutation_prompt": null}
{"id": "26b583f0-547d-47bb-acd1-08885906f72e", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n                \n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Enhanced Hybrid Differential Evolution with Adaptive Scaling for improved convergence in black box optimization.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4becb607-d36e-4874-af08-9b03c0c99693", "metadata": {"aucs": [0.6318765800482264, 0.6383634092430148, 0.6486344909058389, 0.666855196881482, 0.6432110936962419, 0.6531999633593637, 0.6495287889477119, 0.6450731856741432, 0.6679367764210822, 0.3783283842127185, 0.38282819899804377, 0.41011691338965683, 0.40065529378392506, 0.4024860181410036, 0.37577786707041383, 0.38669203153469434, 0.4184486288894518, 0.3931314347241217, 0.09572778829112394, 0.09773845971963524, 0.11058275436484821, 0.10198337779643629, 0.09522397194747922, 0.14313225715541134, 0.10487526176885298, 0.11505245952990939, 0.10166182447936734, 0.09003026322879792, 0.09119435225667616, 0.08202844021232869, 0.09562834257933117, 0.09277516598585567, 0.08952786461152862, 0.09074867384138852, 0.1177810734148943, 0.09491921733678732, 0.6673561600858448, 0.9142376070355283, 0.9131790205132426, 0.7798407358744486, 0.8767436392116987, 0.8619388261475515, 0.7862867613460587, 0.7224888410859233, 0.8975778522011627, 0.2669185225431391, 0.27924701274108144, 0.2661026815668054, 0.25946402214433806, 0.2866713024316747, 0.28746175738629454, 0.2785920231138975, 0.30472349497222506, 0.2796396369342794, 0.5715354018979621, 0.5731840311391707, 0.5422721778183635, 0.6352201863045738, 0.6344329953935881, 0.6581892570957406, 0.6143380012698922, 0.6086471821719492, 0.6373470215139447, 0.16767021049844388, 0.1271816012140916, 0.18026276756327186, 0.1412916039023896, 0.19150247728435144, 0.2269339644246683, 0.18259374976488174, 0.17504466011406694, 0.1921694832253643, 0.15902778258940675, 0.24496027366115702, 0.2070150460491006, 0.191876699049349, 0.1868527827657931, 0.1584468467468636, 0.1454222448920811, 0.1865705660617334, 0.17466536639140062, 0.16929722544710823, 0.16755879372674554, 0.14744543560677326, 0.20501908913662437, 0.15230123076291313, 0.16506765335971918, 0.23990753864125325, 0.16926421104488454, 0.19778862848555812, 0.3089304312115789, 0.31494660827608356, 0.2845957592281003, 0.28783106795552515, 0.2791434407583967, 0.24882141820825532, 0.3206669559422769, 0.34104605809376676, 0.3265125604528637, 0.1051282284164543, 0.07082043887678013, 0.05922172661587044, 0.07691820672586724, 0.0711024009223924, 0.066447416612891, 0.04408825079399825, 0.07035599678851145, 0.08231491408487257, 0.19692775240047844, 0.16998466981182792, 0.1540424913420516, 0.1891903407771559, 0.19871499721319386, 0.19022022308190534, 0.1754252240883205, 0.1704680967518385, 0.16442872020936206, 0.5161647491169629, 0.49267793625447254, 0.5038434994102237, 0.5171720988803736, 0.5324278544296595, 0.5235313808221207, 0.5311909053872583, 0.5277994442905163, 0.5384830476555111, 0.08496804078683595, 0.08679129998393031, 0.09555759537314312, 0.08485231517247993, 0.09187584493379652, 0.0842271599361053, 0.10931718524882106, 0.08958817648305051, 0.09679533792158768, 0.15543658527690718, 0.18101543337927273, 0.16298194596165794, 0.15002458425530363, 0.15663373190593866, 0.1739135003782638, 0.13944108761226104, 0.170366744242053, 0.13387753659302304, 0.30758572617636515, 0.28571767112363455, 0.31447240709023283, 0.304422963611483, 0.30444648136948904, 0.30165134228198054, 0.32385435199434254, 0.3410386885671346, 0.31517952944002237, 0.2426261764630976, 0.22871587329062548, 0.24949542377429001, 0.23521830843783487, 0.22600173738025586, 0.21797693558122133, 0.25293170207540305, 0.2578298028025715, 0.2557927310690633, 0.1908400249111415, 0.18137810328348947, 0.18487731021496412, 0.18945218730556246, 0.19228718207895523, 0.21123639092379032, 0.18642974252056532, 0.199107942416754, 0.19671687722588027, 0.18367298200226712, 0.1813914504537102, 0.18705836245209762, 0.18822501528217117, 0.1751387449664389, 0.18536247406693518, 0.1835985908450023, 0.18079581172850123, 0.17859040754627853, 0.41948302725253384, 0.17005819675034695, 0.25108859237840353, 0.22706983182111895, 0.24660975996605927, 0.31860742234069217, 0.39800534745147487, 0.3649562529667686, 0.30937734731153843, 0.19069114557140843, 0.4140524009057466, 0.5426524078149589, 0.4916949531476964, 0.17091195871458276, 0.18283605059333108, 0.20271307886384038, 0.32854470859203433, 0.20123792712310018, 0.17481261818902982, 0.20045182463228117, 0.1856995153505312, 0.17998384540578682, 0.19265519496144778, 0.17482824541389796, 0.19450009448736694, 0.17785742105196245, 0.1785536674261481, 0.07328471128278813, 0.07719357327474752, 0.07371603713103181, 0.07811925505848516, 0.08568622789644409, 0.0775975656647232, 0.07879580485621152, 0.07147774397652884, 0.08026835996878368]}, "mutation_prompt": null}
{"id": "41d0ca66-4213-48be-9e90-2af5dfdcb751", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n                \n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Enhanced Hybrid Differential Evolution with Adaptive Scaling for improved convergence in black box optimization.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4becb607-d36e-4874-af08-9b03c0c99693", "metadata": {"aucs": [0.6318765800482264, 0.6383634092430148, 0.6486344909058389, 0.666855196881482, 0.6432110936962419, 0.6531999633593637, 0.6495287889477119, 0.6450731856741432, 0.6679367764210822, 0.3783283842127185, 0.38282819899804377, 0.41011691338965683, 0.40065529378392506, 0.4024860181410036, 0.37577786707041383, 0.38669203153469434, 0.4184486288894518, 0.3931314347241217, 0.09572778829112394, 0.09773845971963524, 0.11058275436484821, 0.10198337779643629, 0.09522397194747922, 0.14313225715541134, 0.10487526176885298, 0.11505245952990939, 0.10166182447936734, 0.09003026322879792, 0.09119435225667616, 0.08202844021232869, 0.09562834257933117, 0.09277516598585567, 0.08952786461152862, 0.09074867384138852, 0.1177810734148943, 0.09491921733678732, 0.6673561600858448, 0.9142376070355283, 0.9131790205132426, 0.7798407358744486, 0.8767436392116987, 0.8619388261475515, 0.7862867613460587, 0.7224888410859233, 0.8975778522011627, 0.2669185225431391, 0.27924701274108144, 0.2661026815668054, 0.25946402214433806, 0.2866713024316747, 0.28746175738629454, 0.2785920231138975, 0.30472349497222506, 0.2796396369342794, 0.5715354018979621, 0.5731840311391707, 0.5422721778183635, 0.6352201863045738, 0.6344329953935881, 0.6581892570957406, 0.6143380012698922, 0.6086471821719492, 0.6373470215139447, 0.16767021049844388, 0.1271816012140916, 0.18026276756327186, 0.1412916039023896, 0.19150247728435144, 0.2269339644246683, 0.18259374976488174, 0.17504466011406694, 0.1921694832253643, 0.15902778258940675, 0.24496027366115702, 0.2070150460491006, 0.191876699049349, 0.1868527827657931, 0.1584468467468636, 0.1454222448920811, 0.1865705660617334, 0.17466536639140062, 0.16929722544710823, 0.16755879372674554, 0.14744543560677326, 0.20501908913662437, 0.15230123076291313, 0.16506765335971918, 0.23990753864125325, 0.16926421104488454, 0.19778862848555812, 0.3089304312115789, 0.31494660827608356, 0.2845957592281003, 0.28783106795552515, 0.2791434407583967, 0.24882141820825532, 0.3206669559422769, 0.34104605809376676, 0.3265125604528637, 0.1051282284164543, 0.07082043887678013, 0.05922172661587044, 0.07691820672586724, 0.0711024009223924, 0.066447416612891, 0.04408825079399825, 0.07035599678851145, 0.08231491408487257, 0.19692775240047844, 0.16998466981182792, 0.1540424913420516, 0.1891903407771559, 0.19871499721319386, 0.19022022308190534, 0.1754252240883205, 0.1704680967518385, 0.16442872020936206, 0.5161647491169629, 0.49267793625447254, 0.5038434994102237, 0.5171720988803736, 0.5324278544296595, 0.5235313808221207, 0.5311909053872583, 0.5277994442905163, 0.5384830476555111, 0.08496804078683595, 0.08679129998393031, 0.09555759537314312, 0.08485231517247993, 0.09187584493379652, 0.0842271599361053, 0.10931718524882106, 0.08958817648305051, 0.09679533792158768, 0.15543658527690718, 0.18101543337927273, 0.16298194596165794, 0.15002458425530363, 0.15663373190593866, 0.1739135003782638, 0.13944108761226104, 0.170366744242053, 0.13387753659302304, 0.30758572617636515, 0.28571767112363455, 0.31447240709023283, 0.304422963611483, 0.30444648136948904, 0.30165134228198054, 0.32385435199434254, 0.3410386885671346, 0.31517952944002237, 0.2426261764630976, 0.22871587329062548, 0.24949542377429001, 0.23521830843783487, 0.22600173738025586, 0.21797693558122133, 0.25293170207540305, 0.2578298028025715, 0.2557927310690633, 0.1908400249111415, 0.18137810328348947, 0.18487731021496412, 0.18945218730556246, 0.19228718207895523, 0.21123639092379032, 0.18642974252056532, 0.199107942416754, 0.19671687722588027, 0.18367298200226712, 0.1813914504537102, 0.18705836245209762, 0.18822501528217117, 0.1751387449664389, 0.18536247406693518, 0.1835985908450023, 0.18079581172850123, 0.17859040754627853, 0.41948302725253384, 0.17005819675034695, 0.25108859237840353, 0.22706983182111895, 0.24660975996605927, 0.31860742234069217, 0.39800534745147487, 0.3649562529667686, 0.30937734731153843, 0.19069114557140843, 0.4140524009057466, 0.5426524078149589, 0.4916949531476964, 0.17091195871458276, 0.18283605059333108, 0.20271307886384038, 0.32854470859203433, 0.20123792712310018, 0.17481261818902982, 0.20045182463228117, 0.1856995153505312, 0.17998384540578682, 0.19265519496144778, 0.17482824541389796, 0.19450009448736694, 0.17785742105196245, 0.1785536674261481, 0.07328471128278813, 0.07719357327474752, 0.07371603713103181, 0.07811925505848516, 0.08568622789644409, 0.0775975656647232, 0.07879580485621152, 0.07147774397652884, 0.08026835996878368]}, "mutation_prompt": null}
{"id": "457a420c-4128-42b5-97d0-f1f8324d854e", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 73, "fitness": 0.27659130576358015, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.20.", "error": "", "parent_id": "4becb607-d36e-4874-af08-9b03c0c99693", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "019c92e1-e341-4509-a46b-042100f26b00", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "100741c9-34a0-4777-96a1-6a1c014d5b18", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "94e0ff8d-3f09-4488-afe6-d4f0268627cf", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "60c563a5-f4ce-4e12-8983-dd04352ad5c7", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "40e1f7d5-2abd-49e5-8c5f-1be2f90c6aea", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "ced5ccba-9bc7-4a48-b265-4e19797e709f", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "48e2f724-45ab-4c74-9039-25fadb935bf6", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "a9942679-304b-48f4-a45c-990b1f093a58", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "b6a432a5-cfbb-4047-b5fc-801464dcca2c", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "8099dcb4-640c-4333-924a-7cd958c9249a", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "0c7f8efb-6c0b-4f9d-882e-28399c88d862", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "985cb09c-9916-484a-a663-c2d97862e3ce", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "54e7d051-94b7-4c4f-9da2-b26b07ba2129", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "fb078e5b-93bb-462c-8914-e0f673d69775", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "01971ad3-b387-4bea-9e9f-922730c8f3d6", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "5c3ccff2-4f15-403c-9dbb-ad0bdb591376", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "a7bdcbf0-4953-417a-a7b7-d9447ae822f4", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "c20fd133-c929-4dd5-8a35-061c836d9f8d", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "78b62832-d6d3-4a76-a644-cdc9e761250d", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "a6389ab0-6cd8-4e87-b8e4-db66e4bf974b", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "4882eb6b-ab5a-4eee-ab40-040951478b64", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "a6add96b-d1f1-453e-9e56-16c20fcef16c", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "d431d599-7c97-4354-bfb1-a549d7027a8f", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "089ba690-c2a7-47eb-a0c1-3c4f06f23454", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "5be75565-dcea-4a8c-812d-91e7282eb185", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
{"id": "5a4d3ada-5a53-42ac-a7ba-bc676e850cc1", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Population size\n        pop_size = min(100, self.budget // self.dim)\n        # Generate initial population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = pop_size  # Initial evaluations\n\n        # DE control parameters\n        F = 0.5  # mutation factor\n        CR = 0.9  # crossover probability\n\n        while eval_count < self.budget:\n            for i in range(pop_size):\n                # Mutation\n                indices = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive scaling adjustment\n                if eval_count % (pop_size // 2) == 0:\n                    F = 0.4 + 0.1 * (1 - eval_count / self.budget)\n\n                # Restart strategy\n                if eval_count % (self.budget // 4) == 0:\n                    worst_idx = np.argmax(fitness)\n                    population[worst_idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n                    fitness[worst_idx] = func(population[worst_idx])\n                    eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Factor and Restart Strategy for Enhanced Global Search.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "457a420c-4128-42b5-97d0-f1f8324d854e", "metadata": {"aucs": [0.6350367961718362, 0.6406112652730831, 0.639839962774445, 0.6519284404788711, 0.6577443524362805, 0.6652113675423104, 0.6472748098659689, 0.6098013325716393, 0.6454839604514987, 0.38709370723075, 0.37083400551168777, 0.4222866141523023, 0.40122714986155006, 0.38435826231242565, 0.374244328300677, 0.39689125738360276, 0.4097793254595121, 0.4312908177414655, 0.10111254279510651, 0.10297768486998304, 0.11628400780529702, 0.0980807716855503, 0.1065951229921126, 0.0935328392332343, 0.10283565471538825, 0.10348702763776108, 0.09780262391193939, 0.09145948239557855, 0.08431286988021891, 0.09071512590700681, 0.08857587314473891, 0.08725188589005306, 0.09250319137157148, 0.09785161474241355, 0.09306705207671839, 0.09392271916489903, 0.7350934179187549, 0.9142376070355283, 0.9131790205132426, 0.7956715920535004, 0.8767436392116987, 0.8619388261475515, 0.786221945011808, 0.6970228245837938, 0.8975778522011627, 0.2647098982491972, 0.2869294154794728, 0.267580291241695, 0.292984634888531, 0.2800083292303154, 0.2886230348731792, 0.2691319417938327, 0.330480775554413, 0.28237315422957154, 0.6024878219661287, 0.6257986530862046, 0.6383758426418273, 0.6510950637031399, 0.6471979748940399, 0.6086119926264968, 0.5873628794332847, 0.6257200407978046, 0.6202746641853847, 0.17523621937267742, 0.1467283531948569, 0.17606646140857718, 0.14760889098489482, 0.19212128387331417, 0.19117408963331262, 0.18706736952639635, 0.1568711137896568, 0.1657767433997689, 0.18569094537002306, 0.21727452840724149, 0.22517313830960883, 0.17938667946040987, 0.1765090544297162, 0.17849088687677084, 0.15909499302757701, 0.1466416712045313, 0.155327492650557, 0.17825904091731792, 0.18567822868670547, 0.1482363783931434, 0.17189519681850196, 0.18181845610639769, 0.14034577752693111, 0.21430431772512315, 0.18273115122614636, 0.18085712640885188, 0.3028704638366079, 0.2815830310712599, 0.31108431279135984, 0.2966786218925743, 0.27600926199234166, 0.27307987203693207, 0.3240476618082937, 0.3203638147250477, 0.32282173905730605, 0.06035887444618493, 0.05666024182495988, 0.06363456154031388, 0.0844164368126552, 0.07067329252997001, 0.06315013272708458, 0.06509210580140712, 0.09600019632656154, 0.06665862627371388, 0.183504856903407, 0.16590063276259737, 0.1696450101148772, 0.18393459839934434, 0.1844939620153595, 0.19804787126270573, 0.1728063519294808, 0.17108093695563753, 0.18458684149839133, 0.5159601256974684, 0.5081119001822727, 0.53484008304848, 0.5238570228000797, 0.5331214426829131, 0.5170583738736131, 0.5303235075094095, 0.511103535702611, 0.5298523337931362, 0.08486833566282259, 0.08912853013279509, 0.10057872172993432, 0.09509197178404138, 0.0878033785361757, 0.08597192826344602, 0.08095564952130241, 0.08781627685798143, 0.10075933864977415, 0.1563061340972829, 0.14276512067798552, 0.19099209506910886, 0.1573157098781297, 0.15663373190593866, 0.17333390834776297, 0.1303383429455931, 0.170366744242053, 0.13563008502092977, 0.304705621810368, 0.2926228282828006, 0.3219870970851465, 0.31389815735664284, 0.29915781379031003, 0.30749349496988887, 0.3213874778160589, 0.35090852234571324, 0.32473514566934325, 0.2508274444504559, 0.23051994971849454, 0.23901465075560768, 0.24046509548864847, 0.2281188080840777, 0.24174590424045572, 0.2545022772030239, 0.251317760818904, 0.24719537915137346, 0.20090536769822165, 0.17850369102773678, 0.19613868039720506, 0.17770584941532708, 0.19180879447484567, 0.21481575675063214, 0.1825599458767586, 0.20142431882959, 0.19224147833945215, 0.18218925302767952, 0.1743565447785702, 0.17497468401751815, 0.18603557058944353, 0.18690775986408703, 0.17647015204046734, 0.1814823868310642, 0.18832868838498062, 0.18168871938205577, 0.41618228985354255, 0.1704029654499305, 0.2306160569344664, 0.19564849305487997, 0.18462645240955788, 0.2341535735207212, 0.4000974821139802, 0.4126489721645251, 0.3779398913927322, 0.19084755113853002, 0.4227864921243416, 0.5473414127576034, 0.4865610889359978, 0.18287354708333015, 0.3555195844205926, 0.20271604148516575, 0.4011725445568569, 0.20124305650397845, 0.17551673525040767, 0.200446359694193, 0.18381115287563443, 0.18448301683321233, 0.19265519496144778, 0.17363476797041422, 0.1944962732005321, 0.17674148207283902, 0.1797036435017182, 0.0716951820978442, 0.07593761245301334, 0.07259893533918116, 0.08077538870690437, 0.08568622789644409, 0.07778983137966611, 0.0758576087958851, 0.07268224945089952, 0.07951860981993164]}, "mutation_prompt": null}
