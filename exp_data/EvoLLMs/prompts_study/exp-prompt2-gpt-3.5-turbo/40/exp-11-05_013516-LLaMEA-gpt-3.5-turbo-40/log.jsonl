{"id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "8543e958-dfa2-44e5-85cc-e66bd5d2c2a0", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "ecffe923-21cc-4b6c-bf4d-3939a67510e4", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "2db2c838-f47f-4bd5-b4f1-4da1dd3ef429", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "77f4a27d-343c-48ae-8e57-e026504ec2fe", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "5e873c24-6e58-438f-abcd-9fb6c5561365", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "5ddcea20-592e-40f8-ab1e-b9b8f60e21eb", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "d57cc0cf-345f-462c-906b-ae9d66b9a8a2", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.crossover_rate = 0.9\n        self.scale_factor = 0.8\n        self.max_velocity = 0.2\n        self.w = 0.5\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def de_mutate(population, target_idx):\n            candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            return clip(population[a] + self.scale_factor * (population[b] - population[c]))\n\n        def pso_update_position(position, velocity):\n            return clip(position + velocity)\n\n        def pso_update_velocity(velocity, particle_position, global_best_position):\n            r1 = np.random.random(self.dim)\n            r2 = np.random.random(self.dim)\n            cognitive = self.c1 * r1 * (particle_position - position)\n            social = self.c2 * r2 * (global_best_position - position)\n            return np.clip(self.w * velocity + cognitive + social, -self.max_velocity, self.max_velocity)\n\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness_values = [func(individual) for individual in population]\n        global_best_position = population[np.argmin(fitness_values)]\n        global_best_fitness = np.min(fitness_values)\n\n        for _ in range(self.budget - self.population_size):\n            new_population = []\n            new_fitness_values = []\n            for i in range(self.population_size):\n                mutated = de_mutate(population, i)\n                velocity = pso_update_velocity(np.zeros(self.dim), population[i], global_best_position)\n                position = pso_update_position(population[i], velocity)\n                new_fitness = func(position)\n                if new_fitness < fitness_values[i]:\n                    population[i] = position\n                    fitness_values[i] = new_fitness\n                if new_fitness < global_best_fitness:\n                    global_best_position = position\n                    global_best_fitness = new_fitness\n\n        return global_best_position", "name": "HybridDEPSO", "description": "Utilizing a hybrid approach by combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) for enhanced exploration and exploitation capabilities in black box optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"free variable 'position' referenced before assignment in enclosing scope\").", "error": "NameError(\"free variable 'position' referenced before assignment in enclosing scope\")", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "bc1261b2-cf76-4145-b065-d34c2f18a3a4", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "27b229f2-a39a-40f0-9513-fdf54e3589a9", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "f73c644e-424e-470a-b775-b1c3ea4ecd8a", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "d795aaf3-8db8-4c23-bfd1-af23229321ea", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "b5b386b6-b2be-4e6a-863d-b6a6b1aae823", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "cd979c49-6adb-4d3f-89f1-46bae8cb483f", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "de00b36f-1650-43f3-8b49-18c79175fa9d", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "37ff6606-4256-4f63-b667-1a82e22cfdbd", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "e1160d89-0fc6-4214-b74d-0b00f0a3e8f1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iters = 100\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.3\n    \n    def init_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n    \n    def mutate(self, population, target_idx):\n        r1, r2, r3 = np.random.choice(len(population), 3, replace=False)\n        mutant = population[r1] + self.F * (population[r2] - population[r3])\n        return mutant\n    \n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.rand() > self.CR:\n                trial[i] = mutant[i]\n        return trial\n    \n    def optimize(self, func):\n        population = self.init_population()\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.max_iters):\n            for i in range(self.population_size):\n                target = population[i]\n                mutant = self.mutate(population, i)\n                trial = self.crossover(target, mutant)\n                \n                target_fitness = func(target)\n                trial_fitness = func(trial)\n                \n                if trial_fitness < target_fitness:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n                \n                if np.sum(fitness_values) >= self.budget:\n                    break\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        return best_solution", "name": "HybridPSODE", "description": "Utilizing a hybrid approach combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to enhance exploration and exploitation capabilities in black box optimization.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'HybridPSODE' object is not callable\").", "error": "TypeError(\"'HybridPSODE' object is not callable\")", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "fd244617-264b-416a-b63a-c994b4e80570", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "501a8413-df3a-4434-83a9-a2dce59c5e51", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "cd6c64f0-edd0-4e12-98d8-254e53a149e4", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "60373852-daed-4d45-99cc-b3dc5ff799ce", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "c5e0393b-f4ba-49f7-96ff-f322a54b031d", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "a5266a8e-2472-43de-9174-e3b6937b54d0", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "35f8b9d1-6ca8-4f34-a308-44b0614d5b0d", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "98762201-3d98-447f-9130-4b63ba5cc9c9", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "225d7ef7-0e52-4167-8497-25592937a19e", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {}, "mutation_prompt": null}
{"id": "43d09cc6-a306-495d-a5ba-dfc1cf77a65a", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w=0.5, c1=1.5, c2=2.0):\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T=1.0, alpha=0.9):\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "HybridPSOSA", "description": "A novel algorithm that combines particle swarm optimization (PSO) with simulated annealing (SA) for enhanced exploration and exploitation capabilities.", "configspace": "", "generation": 26, "fitness": 0.18716780566070332, "feedback": "The algorithm HybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.16.", "error": "", "parent_id": "353ebccf-09b0-4098-be7c-1fa807cab8a2", "metadata": {"aucs": [0.43269323734710685, 0.44608723295886743, 0.4342897163636841, 0.4259692336582599, 0.4200164768662419, 0.41234542790061546, 0.4067783462082596, 0.43028542003405523, 0.4208724693105652, 0.05302531882980965, 0.09655570493908705, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10006540585796353, 0.0921682650255421, 0.09233340091476117, 0.0680924491921483, 0.10717545101611725, 0.1028071458212122, 0.08520884654678029, 0.08680998561506781, 0.08494027276017801, 0.09099214493136643, 0.08317342318472709, 0.0815982961888263, 0.1022822470454059, 0.09715332852972247, 0.05140060275334801, 0.0784832354288737, 0.08032759913435761, 0.0992190789407712, 0.6640665092392681, 0.5909295245134434, 0.6318859852292209, 0.5219740199850957, 0.5948861183000949, 0.6143065602318486, 0.6347418188288247, 0.14828756163109647, 0.14615722674195153, 0.25917397365830386, 0.22511008828519685, 0.29200862237114567, 0.32626931626786915, 0.2806522095900231, 0.30176184910764803, 0.30371605318227035, 0.2544036107960608, 0.27880340176913865, 0.20592729146846667, 0.14678331969583958, 0.13445133177486746, 0.17007784403848747, 0.22945120718032885, 0.18588858472652559, 0.1466966700283252, 0.14491122116656974, 0.16880230482963665, 0.1668221707958243, 0.22449443469887675, 0.10179913299690801, 0.22788402960270437, 0.18396032083626124, 0.1023760108285211, 0.25020910365754334, 0.1519640241842226, 0.1357449137519603, 0.19828770189647238, 0.1614088142398279, 0.11834507849074694, 0.1463696163072109, 0.13866609881348235, 0.14049230423136905, 0.14174201716860102, 0.12519793405905766, 0.19656721349974737, 0.01969875789810116, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006047994293175374, 0.0, 0.0, 0.1239509391731215, 0.07376060742485757, 0.07763533514777121, 0.0259950334109873, 0.0067234133580901245, 0.038189963545503636, 0.1565687190777415, 0.06969844505006317, 0.15864696534832168, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1056856469856986, 0.06493661275282825, 0.0851594627597898, 0.06265794131979041, 0.10766673572391627, 0.07146525395611059, 0.0685492818237412, 0.10137099088435175, 0.08932257475001826, 0.41566181084770326, 0.3934550874139643, 0.42444574403331303, 0.40761715924002384, 0.3789599443318633, 0.3763587098744198, 0.4219991066078972, 0.3836327413197743, 0.43389777055909384, 0.040806847571152494, 0.025440336120687412, 0.005137987954993317, 0.09418934409067603, 0.09053826896378048, 0.09744216341107381, 0.06411006242453898, 0.12359514052485898, 0.07823118310196842, 0.25747774294438663, 0.27966999305210805, 0.18514916453509345, 0.1704280032372517, 0.25340431846534084, 0.14603927109513626, 0.20031477435191736, 0.172290198895653, 0.16618363640604006, 0.14740690715348215, 0.2651871209274328, 0.19139143923732804, 0.292354670284812, 0.24105300191001922, 0.31296820930429525, 0.16311112880486978, 0.2618943475807002, 0.1556865650321999, 0.17610852501473562, 0.20265713217751313, 0.1301828449409912, 0.1947845885961389, 0.19529505274698566, 0.1693424450639588, 0.1698663902720018, 0.14503902039023997, 0.15069895873143035, 0.2000937919941036, 0.174439452378072, 0.2095916116982709, 0.2159762786014977, 0.19964946508972303, 0.2084452623453581, 0.2071838906043647, 0.1936197258890865, 0.20089412022251252, 0.1943027763715387, 0.1934241575301634, 0.16946218318161377, 0.17209986257572796, 0.17421804119641315, 0.1764109163285117, 0.1687792851604163, 0.18639474561684333, 0.16220658415854594, 0.12207830634845485, 0.11931797445914838, 0.17799297438387107, 0.6412958575558637, 0.19694314820518155, 0.6721725461089803, 0.09801438763980719, 0.6411209758057912, 0.6516557815619957, 0.4225299842511747, 0.1540825513404781, 0.37154351175118117, 0.5110914982704859, 0.19669362639945098, 0.5490119970431255, 0.31024815663385585, 0.35944021426165795, 0.28644826433295967, 0.19573589963701055, 0.1777007562283548, 0.18106291446241485, 0.18134057642722645, 0.16562477184001778, 0.18702461929395509, 0.17009033157741438, 0.17744794600843894, 0.18904025884842846, 0.07511530302115565, 0.07985335787834447, 0.06427020027324437, 0.07159099930223256, 0.08490687545046571, 0.07602677872683705, 0.07996568896450773, 0.07409038012457037, 0.06564401512263973]}, "mutation_prompt": null}
{"id": "d5f2d382-8005-4c1d-9d9e-bcdbdad0e0af", "solution": "import numpy as np\n\nclass RefineHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            r1, r2 = np.random.rand(2, self.dim)\n            w = w_max - (((self.max_iter - i) / self.max_iter) * (w_max - w_min))\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T=1.0, alpha=0.9):\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for i in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "RefineHybridPSOSA", "description": "Refining the algorithm by introducing a dynamic inertia weight and a mutation operator for enhanced exploration.", "configspace": "", "generation": 27, "fitness": 0.18561901480698015, "feedback": "The algorithm RefineHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "43d09cc6-a306-495d-a5ba-dfc1cf77a65a", "metadata": {"aucs": [0.43608089419018536, 0.42752043330741996, 0.4581308554273803, 0.3991771638166245, 0.4048422767743418, 0.4113380553740542, 0.44654915865169253, 0.46471843901038135, 0.4329687838092031, 0.1044887086457198, 0.08833134254344399, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0932302765983064, 0.12120398163588908, 0.0584098620051684, 0.09044131464707694, 0.0933825643440932, 0.10379477056770015, 0.08477570590196415, 0.09844725475292182, 0.1267881133966292, 0.06700085415337509, 0.10533163179737837, 0.07550719374405968, 0.10511209564197088, 0.10293826385085791, 0.05683282099778175, 0.05977916335341926, 0.07347597022983443, 0.09680376136612645, 0.691180579304994, 0.620728772413361, 0.614699798179069, 0.21754930707817433, 0.6520707412991904, 0.5905530948194964, 0.5900835563907463, 0.1270709794236583, 0.12645944445875013, 0.2890381905792474, 0.25537267176721334, 0.2929347780903808, 0.3257326855320716, 0.2976413140742079, 0.28643912271933925, 0.29472696660573505, 0.2763046155493155, 0.24570553200887957, 0.18839992994715216, 0.14992078876860582, 0.13109914545336598, 0.2599148552301237, 0.11543960009303877, 0.14532730339779298, 0.12797958754176564, 0.14357739221298838, 0.14331329811754367, 0.16668661773456916, 0.12315085878726151, 0.21769381137167176, 0.23369267689570894, 0.1973215058025497, 0.15779081744323853, 0.22566523349607526, 0.10959028610324406, 0.1474017667415064, 0.1691604615981248, 0.13357275187643114, 0.2198758046016006, 0.13743008982441274, 0.13780982304189582, 0.14181001673842308, 0.1723949375771221, 0.10478564595407225, 0.22484095922193048, 0.0, 0.0, 0.0, 0.05508917965484994, 0.0, 0.0, 0.0, 0.0, 0.03905299660196526, 0.13441257015126606, 0.06254538035587898, 0.10662596608485275, 0.05350151144180659, 0.007256898540701884, 0.03908788633136606, 0.12750456431017387, 0.0540815735714405, 0.12494596006868319, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10848659260812599, 0.1315442841142247, 0.10314109696551355, 0.05938923879090274, 0.10426498396827866, 0.06580398615827521, 0.07513091036640596, 0.11115561639198512, 0.07812983989229139, 0.3936793227368296, 0.4335806647514633, 0.3895581584413689, 0.41004231535502966, 0.37124188952471426, 0.3926134267667305, 0.4151247253464643, 0.3988696058701109, 0.3986807366180105, 0.03651996513961564, 0.04049851269729843, 0.0, 0.08532901535500792, 0.08572479786003784, 0.0835320844559988, 0.1249452915502548, 0.08744280259442616, 0.07603159196178255, 0.18362990373137156, 0.26022989620926473, 0.1672930155511172, 0.19126776518355093, 0.26000091475749154, 0.19315998304149284, 0.26312399625077654, 0.2088177320272473, 0.1543671293084441, 0.1619588242151191, 0.21636384613581194, 0.183761464877347, 0.29329793601224063, 0.20759918348368644, 0.24175863784034046, 0.21543558539708496, 0.2859616652518131, 0.16156489947395836, 0.17490419608738483, 0.22827508574471234, 0.13163907337598868, 0.1707994408993505, 0.16321463008388493, 0.15343431776387118, 0.16589267586477707, 0.14752727453182302, 0.13639723346567112, 0.20809415344875948, 0.18350518014669703, 0.19147191114654216, 0.17901931553179562, 0.22584530919529056, 0.20383731562308005, 0.1878940963932758, 0.19684688957719598, 0.19881747565364327, 0.16375116071590456, 0.19225879551519864, 0.18556423513186782, 0.16714982163179737, 0.21054727011838148, 0.1859090261095958, 0.16605049064973643, 0.17967636588849623, 0.15597123270014723, 0.12228265019798767, 0.12273157104988985, 0.1655597238933071, 0.6243271410871678, 0.19682538119642445, 0.6629546478786815, 0.09832912932342075, 0.6265592018946515, 0.6022450233444119, 0.39814134586239036, 0.1540079228568818, 0.4566185030433736, 0.4388720423693043, 0.1952341888437641, 0.5715606997847424, 0.2902847725344212, 0.3584842499718538, 0.3191752364165179, 0.18998540319666568, 0.17663857685451967, 0.16708960432552844, 0.1747436292027924, 0.1661484522578437, 0.18098676667494162, 0.19319892148364037, 0.16680837514357916, 0.19281862775102443, 0.06662862084531807, 0.05314776364145257, 0.06990650733637305, 0.06926258632271165, 0.07829701226483632, 0.07260720598248771, 0.06720375327974759, 0.07150106624301678, 0.05674877241383436]}, "mutation_prompt": null}
{"id": "ec97dba2-f8f4-4ae5-990c-b23aef98f7a6", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w=0.5, c1=1.5, c2=2.0):\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T=1.0, alpha=0.9):\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "HybridPSOSA", "description": "A novel algorithm that combines particle swarm optimization (PSO) with simulated annealing (SA) for enhanced exploration and exploitation capabilities.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43d09cc6-a306-495d-a5ba-dfc1cf77a65a", "metadata": {"aucs": [0.43269323734710685, 0.44608723295886743, 0.4342897163636841, 0.4259692336582599, 0.4200164768662419, 0.41234542790061546, 0.4067783462082596, 0.43028542003405523, 0.4208724693105652, 0.05302531882980965, 0.09655570493908705, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10006540585796353, 0.0921682650255421, 0.09233340091476117, 0.0680924491921483, 0.10717545101611725, 0.1028071458212122, 0.08520884654678029, 0.08680998561506781, 0.08494027276017801, 0.09099214493136643, 0.08317342318472709, 0.0815982961888263, 0.1022822470454059, 0.09715332852972247, 0.05140060275334801, 0.0784832354288737, 0.08032759913435761, 0.0992190789407712, 0.6640665092392681, 0.5909295245134434, 0.6318859852292209, 0.5219740199850957, 0.5948861183000949, 0.6143065602318486, 0.6347418188288247, 0.14828756163109647, 0.14615722674195153, 0.25917397365830386, 0.22511008828519685, 0.29200862237114567, 0.32626931626786915, 0.2806522095900231, 0.30176184910764803, 0.30371605318227035, 0.2544036107960608, 0.27880340176913865, 0.20592729146846667, 0.14678331969583958, 0.13445133177486746, 0.17007784403848747, 0.22945120718032885, 0.18588858472652559, 0.1466966700283252, 0.14491122116656974, 0.16880230482963665, 0.1668221707958243, 0.22449443469887675, 0.10179913299690801, 0.22788402960270437, 0.18396032083626124, 0.1023760108285211, 0.25020910365754334, 0.1519640241842226, 0.1357449137519603, 0.19828770189647238, 0.1614088142398279, 0.11834507849074694, 0.1463696163072109, 0.13866609881348235, 0.14049230423136905, 0.14174201716860102, 0.12519793405905766, 0.19656721349974737, 0.01969875789810116, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006047994293175374, 0.0, 0.0, 0.1239509391731215, 0.07376060742485757, 0.07763533514777121, 0.0259950334109873, 0.0067234133580901245, 0.038189963545503636, 0.1565687190777415, 0.06969844505006317, 0.15864696534832168, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1056856469856986, 0.06493661275282825, 0.0851594627597898, 0.06265794131979041, 0.10766673572391627, 0.07146525395611059, 0.0685492818237412, 0.10137099088435175, 0.08932257475001826, 0.41566181084770326, 0.3934550874139643, 0.42444574403331303, 0.40761715924002384, 0.3789599443318633, 0.3763587098744198, 0.4219991066078972, 0.3836327413197743, 0.43389777055909384, 0.040806847571152494, 0.025440336120687412, 0.005137987954993317, 0.09418934409067603, 0.09053826896378048, 0.09744216341107381, 0.06411006242453898, 0.12359514052485898, 0.07823118310196842, 0.25747774294438663, 0.27966999305210805, 0.18514916453509345, 0.1704280032372517, 0.25340431846534084, 0.14603927109513626, 0.20031477435191736, 0.172290198895653, 0.16618363640604006, 0.14740690715348215, 0.2651871209274328, 0.19139143923732804, 0.292354670284812, 0.24105300191001922, 0.31296820930429525, 0.16311112880486978, 0.2618943475807002, 0.1556865650321999, 0.17610852501473562, 0.20265713217751313, 0.1301828449409912, 0.1947845885961389, 0.19529505274698566, 0.1693424450639588, 0.1698663902720018, 0.14503902039023997, 0.15069895873143035, 0.2000937919941036, 0.174439452378072, 0.2095916116982709, 0.2159762786014977, 0.19964946508972303, 0.2084452623453581, 0.2071838906043647, 0.1936197258890865, 0.20089412022251252, 0.1943027763715387, 0.1934241575301634, 0.16946218318161377, 0.17209986257572796, 0.17421804119641315, 0.1764109163285117, 0.1687792851604163, 0.18639474561684333, 0.16220658415854594, 0.12207830634845485, 0.11931797445914838, 0.17799297438387107, 0.6412958575558637, 0.19694314820518155, 0.6721725461089803, 0.09801438763980719, 0.6411209758057912, 0.6516557815619957, 0.4225299842511747, 0.1540825513404781, 0.37154351175118117, 0.5110914982704859, 0.19669362639945098, 0.5490119970431255, 0.31024815663385585, 0.35944021426165795, 0.28644826433295967, 0.19573589963701055, 0.1777007562283548, 0.18106291446241485, 0.18134057642722645, 0.16562477184001778, 0.18702461929395509, 0.17009033157741438, 0.17744794600843894, 0.18904025884842846, 0.07511530302115565, 0.07985335787834447, 0.06427020027324437, 0.07159099930223256, 0.08490687545046571, 0.07602677872683705, 0.07996568896450773, 0.07409038012457037, 0.06564401512263973]}, "mutation_prompt": null}
{"id": "5a751ded-19d3-4a8c-888c-16dd51251003", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 29, "fitness": 0.18928792356716304, "feedback": "The algorithm EnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.16.", "error": "", "parent_id": "43d09cc6-a306-495d-a5ba-dfc1cf77a65a", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "051296fb-3238-4f40-8b4a-337e970ffc75", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSAImproved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def dynamic_mutation(position, mutation_rate=0.1):\n            mutated_position = position + mutation_rate * np.random.randn(self.dim)\n            return np.clip(mutated_position, -5.0, 5.0)\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                \n                if np.random.rand() < 0.2:  # 20% chance of applying the mutation\n                    particles[i] = dynamic_mutation(particles[i])\n\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSAImproved", "description": "Enhancing EnhancedHybridPSOSA by introducing a novel dynamic mutation operator for improved exploration in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'simulated_annealing' is not defined\").", "error": "NameError(\"name 'simulated_annealing' is not defined\")", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {}, "mutation_prompt": null}
{"id": "b8a4c78c-25fe-452d-9b17-34992a477b91", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "d7644ff9-5395-48c6-aba5-5d6db6fddb58", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "21fcab71-e5ca-4529-b524-d818cc1e3d8b", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSARefined:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i] = np.clip(particles[i] + levy_flight(self.dim), -5.0, 5.0)\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSARefined", "description": "Enhancing EnhancedHybridPSOSA by introducing a novel mutation operator based on Levy flights to promote more diverse exploration in the search space.", "configspace": "", "generation": 33, "fitness": 0.18674153105684374, "feedback": "The algorithm EnhancedHybridPSOSARefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.45218062907418055, 0.4246598101096638, 0.43696784480375683, 0.3999903414327729, 0.4079776443489084, 0.4205318734790304, 0.4479504310462685, 0.4149709673298836, 0.43666909596510695, 0.0376138728526304, 0.09976365833623968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10486635536555955, 0.11695880071490317, 0.07733240558195431, 0.11918549800088496, 0.10302112228502625, 0.10008547582263272, 0.09140785086970449, 0.07087986979639005, 0.08340552530025747, 0.06506640325239677, 0.07689850104613216, 0.07172959665764811, 0.10244771304924394, 0.09754773609597045, 0.07601491443799424, 0.08696523047379923, 0.06295089373561169, 0.07957003530410733, 0.7312843837352498, 0.5644506616511648, 0.617498008819629, 0.5949354711898408, 0.6075821021091177, 0.5676144007823976, 0.5939639293565222, 0.5395527215692983, 0.1401388455690662, 0.2795321025419829, 0.26097714609437794, 0.2794045222736977, 0.334801124743648, 0.27626423212881035, 0.28121747080919646, 0.29032937034927153, 0.28392323052189194, 0.27269393380550155, 0.23974492033390393, 0.14736749525597004, 0.12464582472978802, 0.2711665649708421, 0.2522259804672148, 0.19126912682520392, 0.12803742572400512, 0.14225184987333628, 0.1431718643188864, 0.17815305338038268, 0.10842075620592573, 0.11960224343720405, 0.19700679722973413, 0.16915044844385796, 0.08226745429907223, 0.19268098720325344, 0.13050315918984667, 0.14478176293434042, 0.14560222761190011, 0.16223831507000464, 0.18854515871625277, 0.14845710481695573, 0.12486725232241003, 0.12077470180127625, 0.17608157252929924, 0.10200130031761978, 0.13642615455814633, 0.006203101800261734, 0.0, 0.010227751641147198, 0.03178873195891796, 0.021253343201215302, 0.003567914822190099, 0.0008851639093725439, 0.0, 0.0, 0.1490253626748248, 0.0707677560003438, 0.05736147977509465, 0.05954965011055957, 0.01862835528990836, 0.015668926932316585, 0.07856365554914013, 0.05809339865638652, 0.10050756818101103, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10452191085806994, 0.07025472132558497, 0.11509297346147995, 0.060754888246784544, 0.08151080179764214, 0.10684406598943674, 0.08283649579747976, 0.08466821185748719, 0.07459448226027876, 0.43977295120598214, 0.4215059810886128, 0.4188505615488104, 0.39711869104815756, 0.3942221765428421, 0.3836811679092432, 0.41147242463370726, 0.37453897693873006, 0.40649712164827834, 0.05366704846050163, 0.03170852516705469, 0.024192819772138274, 0.05686511386784865, 0.07307909417222325, 0.09612065310669493, 0.09347314002697837, 0.1409048969157478, 0.0891853767826688, 0.22628334318761756, 0.15544479194543814, 0.27780836726348723, 0.25885950751283604, 0.2458287255626197, 0.1859604748878917, 0.2603144071011295, 0.1597919865632914, 0.2245977510421454, 0.17482530050230105, 0.15817954774157061, 0.18553900749579044, 0.21661484601696324, 0.22302789115612254, 0.26872650077106697, 0.22852305295568764, 0.2961155044870575, 0.15202933523318485, 0.1131461210375444, 0.21112410462817877, 0.17107460621077897, 0.16563849628516292, 0.19197182033052362, 0.1778133921605668, 0.1201629688623943, 0.18256236337908427, 0.10009414705789355, 0.21226028631690563, 0.1944016860382487, 0.23149529878884678, 0.22604379614048464, 0.1771164551652531, 0.2163855881654374, 0.2294144630080669, 0.2587484953538569, 0.19142506161752249, 0.1750852358154087, 0.17734329867250775, 0.17826976725437793, 0.19872526140640578, 0.17459144240105506, 0.19861162589911963, 0.18975885271776638, 0.19747686713085566, 0.16076827748573508, 0.12432293598500377, 0.12299792251691288, 0.178949626510304, 0.6716444279755066, 0.19757563290901892, 0.6486083285638553, 0.09858164156618021, 0.6031725826627721, 0.1623696505834319, 0.4896059422651222, 0.1534657936569641, 0.5480203686138126, 0.1945309709957802, 0.19609235353617716, 0.4982040022547719, 0.25178064912581544, 0.41511697804712777, 0.29467249790347927, 0.17830601631155607, 0.20255267609985572, 0.1941160143220093, 0.17936120143628143, 0.180048649219393, 0.18876482619128288, 0.18488454426112066, 0.20101048862192616, 0.20213169508009743, 0.08640648131816686, 0.0748096486500548, 0.09462028771530662, 0.07571439009588155, 0.0821628270747029, 0.07482051512118049, 0.09273043975758488, 0.07925582350838523, 0.07553906694613544]}, "mutation_prompt": null}
{"id": "c84ae92b-cca9-4cf4-a524-5f53619a66be", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "748616b5-2de0-4df3-b898-b92870caa2ee", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "a1ef6c00-0f84-4727-b1d2-4264785f3dba", "solution": "import numpy as np\n\nclass DynamicPopSizeEnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "DynamicPopSizeEnhancedHybridPSOSA", "description": "Improving EnhancedHybridPSOSA by introducing a dynamic population size adaptation mechanism based on fitness diversity to enhance exploration and exploitation in optimization.", "configspace": "", "generation": 36, "fitness": 0.18928792356716304, "feedback": "The algorithm DynamicPopSizeEnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.16.", "error": "", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "c92d880b-bb3c-4cb6-bee1-b2120f7d92f0", "solution": "import numpy as np\n\nclass DynamicPopSizeHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n            if iter % 10 == 0:  # Dynamic population size adjustment\n                if np.random.rand() < 0.4:\n                    particles = np.vstack((particles, np.random.uniform(-5.0, 5.0, size=(1, self.dim))))\n                    velocities = np.vstack((velocities, np.zeros(self.dim)))\n                    pbest = np.vstack((pbest, np.zeros(self.dim)))\n                    pbest_costs = np.append(pbest_costs, func(particles[-1]))\n\n        return gbest", "name": "DynamicPopSizeHybridPSOSA", "description": "Improving EnhancedHybridPSOSA by introducing a dynamic population size adjustment mechanism to enhance diversity and adaptability during optimization.", "configspace": "", "generation": 37, "fitness": 0.18836440600148188, "feedback": "The algorithm DynamicPopSizeHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.16.", "error": "", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4315795476199764, 0.48596415339871846, 0.4369644361184222, 0.42024424159648277, 0.4152171499298771, 0.42522777495322184, 0.43548989152056894, 0.4416944751610066, 0.4506161516380527, 0.003198498789567794, 0.05296873442120542, 4.075800039460287e-05, 0.0, 0.0, 0.03030436945814785, 0.0, 0.0, 0.0, 0.09971597086671569, 0.11534022289528878, 0.0849935849178397, 0.08335064021499583, 0.1288753747139575, 0.11928484209550638, 0.09254375301626094, 0.08508877081589905, 0.11385423245470261, 0.0991192963882841, 0.08923222003435094, 0.09531101130953101, 0.10125843388446087, 0.057328966423823124, 0.04027959688076921, 0.023394448815335256, 0.06840926114477586, 0.04366301080947266, 0.7174559290749933, 0.654319247746371, 0.707448452408961, 0.513373484741412, 0.5844622219536206, 0.7043737921529916, 0.6899122334145269, 0.14585765156512898, 0.5378124434277631, 0.2970053737094579, 0.27229732214995694, 0.32687757746529766, 0.2988689541758689, 0.2991750180524475, 0.2822647562489278, 0.3102193267291322, 0.27643109406587396, 0.2836004548506207, 0.2091208684931084, 0.16168175356280157, 0.13173690424024243, 0.25912074063904567, 0.19199162743203324, 0.17520659829230878, 0.1675296875385407, 0.1679761941624751, 0.145081010475949, 0.1530124571234457, 0.12110456259026303, 0.13608891443344495, 0.1332578780929532, 0.18115312551400298, 0.13423613278745217, 0.24701311942043636, 0.16876828598067217, 0.15302045628524352, 0.2191113979669912, 0.15934461846804437, 0.18610477335483444, 0.17872677317802188, 0.15080192791097657, 0.12106300188990538, 0.1188015788430894, 0.11925276929766004, 0.1409391185226716, 0.005927583016605786, 0.026631009708125153, 0.024698247995746492, 0.047170151645040126, 0.0, 0.003552860736747987, 0.025687199363028435, 0.0, 0.0, 0.12728167211932118, 0.09215662523066948, 0.053733016821805535, 0.02727430392238528, 0.008453710456544972, 0.016620723182037556, 0.0859180382603445, 0.07185189372431011, 0.036063437434625256, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09008937270180506, 0.03435361721230035, 0.07248126146968392, 0.04806265940150478, 0.10589506641769308, 0.06724892899577495, 0.08098461791442202, 0.079710612291098, 0.08334050275049543, 0.4146115007495631, 0.4094133751227027, 0.407682766935204, 0.4152665405311762, 0.37761851982329353, 0.4237547021953143, 0.42946961392177596, 0.38275858736505797, 0.43869431412971316, 0.04635159833647484, 0.06248000736011439, 0.006761880629307826, 0.11720271313093922, 0.0867962826020866, 0.05741099230690849, 0.0757634876436265, 0.10529365106633304, 0.06114038940766875, 0.206551939625357, 0.28470813576229403, 0.16798670935509108, 0.1622528285923036, 0.21707796993164097, 0.1877389481228624, 0.18587036544548607, 0.12851961996523864, 0.2475298877223635, 0.16790985872270825, 0.2442533219254176, 0.20661067678221334, 0.2909931529964921, 0.21153939683812917, 0.29237911551606943, 0.22993669478775935, 0.29355001885238596, 0.15662168540139698, 0.1914142143622134, 0.17439527816030098, 0.1841233508338993, 0.20133987043269574, 0.18838119785844554, 0.21062377694452827, 0.15920869506087787, 0.2125636960138112, 0.11988600675211403, 0.2061710465630271, 0.1896414016278406, 0.18187568770102713, 0.21018700107270016, 0.22181950448267573, 0.18047503459454184, 0.28889189220584444, 0.2129034357289844, 0.22990465994144615, 0.16806581568077295, 0.1724242212283711, 0.17467298152228372, 0.1839866453619361, 0.19058901721199895, 0.17845403155262196, 0.1774040309489202, 0.2280452134742501, 0.19260954167054956, 0.12479704199550501, 0.12252002537728768, 0.1477164315198748, 0.6418506222383833, 0.1964710920057492, 0.6513234611907579, 0.11814961261781409, 0.16727671229585173, 0.6541766032437306, 0.5043691199627443, 0.15431353441660045, 0.36565229922206, 0.5061271749454557, 0.16239201196843567, 0.5217416977109173, 0.29129710924055296, 0.10116081719234549, 0.29889254455075265, 0.18640630512672995, 0.1733510084335823, 0.188059204536293, 0.20655397429067957, 0.17524111076739723, 0.20057869830426056, 0.1739436753702397, 0.17016303469148475, 0.18342412056471313, 0.058005904021205756, 0.06317953308652335, 0.07298198415121349, 0.07796924251307791, 0.060089678270533686, 0.05943984404431579, 0.08854067371841046, 0.07291843674783138, 0.09633631390593456]}, "mutation_prompt": null}
{"id": "b024dcbd-b20a-4faf-84ef-960a67856d77", "solution": "import numpy as np\n\nclass EnhancedImprovedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def levy_flight(self, position):\n        beta = 1.5\n        sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v) ** (1 / beta)\n        new_position = position + 0.01 * step\n        return np.clip(new_position, -5.0, 5.0)\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n                if np.random.rand() < 0.4:  # Levy flight as a local search mechanism\n                    particles[i] = self.levy_flight(particles[i])\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedImprovedHybridPSOSA", "description": "Improving exploration by introducing Levy flight as a local search mechanism to escape local optima.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {}, "mutation_prompt": null}
{"id": "a6e7e915-d436-422e-8f3e-cc458754e47c", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "b8742e81-f35c-4519-8ddf-1d86020231dd", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "b95221f7-f7fc-4606-b3c8-9f04c5a9622e", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "316a8f19-5f26-43d1-a076-4481815db723", "solution": "import numpy as np\n\nclass EnhancedDynamicPopSizePSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedDynamicPopSizePSOSA", "description": "Introducing a dynamic population size adaptation mechanism based on fitness diversity to enhance exploration in the optimization process.", "configspace": "", "generation": 42, "fitness": 0.18928792356716304, "feedback": "The algorithm EnhancedDynamicPopSizePSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.16.", "error": "", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "07ba1dc3-07ee-4ef3-92d8-141508ae4a2a", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass EnhancedPSOWithDE:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Differential Evolution Local Search\n                bounds = [(-5.0, 5.0)] * self.dim\n                result = differential_evolution(func, bounds, args=(particles[i],), updating='deferred')\n                particles[i] = result.x\n\n                pbest_costs[i] = func(particles[i])\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedPSOWithDE", "description": "Enhancing PSO with Dynamic Inertia Weight and Local Search using Differential Evolution for improved solution quality and convergence speed.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: RuntimeError(\"The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'\").", "error": "RuntimeError(\"The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'\")", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {}, "mutation_prompt": null}
{"id": "2e942bee-6e68-4a2c-aa0e-7f74e9380447", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        def opposition_based_learning(position):\n            return -1.0 * position\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Introducing a Novel Opposition-based Learning Strategy to Enhance HybridPSOSA Optimization Algorithm", "configspace": "", "generation": 44, "fitness": 0.18928792356716304, "feedback": "The algorithm EnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.16.", "error": "", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "9b775e34-d6df-43bf-bb19-a0b28414375c", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "779e396c-f815-4ebd-afe4-8e111d65a23c", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "67484c8c-b881-4436-af51-08e0707b0b37", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n            if iter % (self.max_iter // 10) == 0:\n                if np.random.rand() < 0.4:\n                    new_num_particles = max(10, min(100, int(np.round(self.num_particles * np.random.uniform(0.8, 1.2)))))\n                    if new_num_particles != self.num_particles:\n                        self.num_particles = new_num_particles\n                        particles = np.vstack((particles, initialize_particles()[:new_num_particles - self.num_particles]))\n                        velocities = np.vstack((velocities, np.zeros((new_num_particles - self.num_particles, self.dim)))\n                        pbest = np.vstack((pbest, particles[-new_num_particles:, :]))\n                        pbest_costs = np.hstack((pbest_costs, np.array([func(p) for p in particles[-new_num_particles:, :])))\n            \n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing EnhancedHybridPSOSA algorithm by introducing dynamic population size adaptation based on the solution quality to improve convergence speed and solution accuracy.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 61, 25, '                        pbest = np.vstack((pbest, particles[-new_num_particles:, :]))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 61, 25, '                        pbest = np.vstack((pbest, particles[-new_num_particles:, :]))\\n'))", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {}, "mutation_prompt": null}
{"id": "9562d85f-e4eb-449e-9c9d-d95de1117463", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "c63a89be-b8ed-4f28-b312-dac3acdd9ac3", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        def mutation(particles, mutation_rate=0.05):\n            mutated_particles = particles.copy()\n            for i in range(len(mutated_particles)):\n                if np.random.rand() < mutation_rate:\n                    mutated_particles[i] += np.random.normal(0, 0.1, size=self.dim)\n                    mutated_particles[i] = np.clip(mutated_particles[i], -5.0, 5.0)\n            return mutated_particles\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            particles = mutation(particles)  # Introducing the mutation operator\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing EnhancedHybridPSOSA by incorporating a novel mutation operator to introduce diversity and escape local optima during the optimization process.", "configspace": "", "generation": 49, "fitness": 0.18757205401507596, "feedback": "The algorithm EnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.16.", "error": "", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.430551326084992, 0.43326221367264994, 0.4447849852869651, 0.43711711141386245, 0.4115600754203004, 0.4216412309019001, 0.424835096093811, 0.4443114750747904, 0.42819958116892287, 0.13893358502992692, 0.07189278281965339, 0.0, 0.0, 0.00012178884415658953, 0.0, 0.0, 0.0, 0.0, 0.1196234570362753, 0.11941337446510991, 0.09906174319000915, 0.08856494522329061, 0.09825270282567489, 0.09989600970369905, 0.07538899856842507, 0.09791113494174275, 0.08044635568496594, 0.08833297556070452, 0.08975688887894206, 0.06530201292730198, 0.09650766250493692, 0.08601004946482682, 0.05253930355931824, 0.1184343219890589, 0.06458468188292132, 0.038655809662039964, 0.6602850980299035, 0.6983592359617723, 0.6522568804837776, 0.17180470825917982, 0.5971521234843282, 0.5251690880712803, 0.6408633455055259, 0.607103302602214, 0.5353797094610854, 0.29154775562715063, 0.26609499899025524, 0.31103370341756686, 0.31815608521027705, 0.2933239320514057, 0.3104543171053812, 0.2904156304435074, 0.24663248665932247, 0.26375660191566863, 0.1584585464316831, 0.15188578012437648, 0.13097580578056478, 0.2090434284111634, 0.24364920767161835, 0.19251539264130424, 0.1441431746426478, 0.12522136005932516, 0.2198943769497791, 0.18666586329098667, 0.1165315659826196, 0.11147943403136962, 0.1539123056206929, 0.12730581956506848, 0.12738748472860684, 0.17516260464786226, 0.11891379409117275, 0.15129017140683532, 0.18150350902898016, 0.1211210937095486, 0.11999547368894359, 0.12109621570943341, 0.12549312995276174, 0.21840717386033226, 0.11804935662950955, 0.08546917275636623, 0.1531571923155639, 0.03463383589547153, 0.0, 0.0, 0.012277251264806499, 0.004699330432185844, 0.0, 0.04858413963930219, 0.0, 0.0, 0.1580009461747095, 0.0723367847966907, 0.09702814121056669, 0.06851840796673936, 0.014142283559185675, 0.05011711400396235, 0.07675312252502009, 0.09160435370196907, 0.06338785578852424, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0028285966078596125, 0.0, 0.0, 0.0, 0.10050171294799237, 0.07250777189553448, 0.11531689108117693, 0.025131154699734926, 0.06425205938744316, 0.060481101730601616, 0.06122128490232004, 0.10265560546580332, 0.07681991857841386, 0.41708340002996247, 0.4071138345674741, 0.4155810879869055, 0.41739793604881614, 0.389166760833522, 0.3576030719943013, 0.41044548884150667, 0.38639682352962723, 0.40400379562091016, 0.06459645070703324, 0.0387165145642302, 0.021435891888037406, 0.15161088433163772, 0.07728763182995935, 0.1379822322213744, 0.08265463492414182, 0.11490955237940614, 0.06557797996808734, 0.1652575129669367, 0.2595925362419471, 0.16950115417330858, 0.17822082301889097, 0.26460319111734254, 0.21468840047497806, 0.21204261177821593, 0.12183859258574481, 0.18065781017532723, 0.15270249183881135, 0.30455119822136967, 0.19312902087698935, 0.23151076374766522, 0.20821155403234315, 0.30597005289275736, 0.21146245473417202, 0.2958009782031722, 0.20276253088257135, 0.17724730981656034, 0.19037504035627373, 0.1456303910966963, 0.2330132829281364, 0.17694069184614436, 0.2227214582685949, 0.1961002651835071, 0.21445987049069626, 0.13709368138924916, 0.2032286185951825, 0.1832011423879507, 0.1927590672108933, 0.21701748532195075, 0.21251688024543125, 0.20093217029468358, 0.19244749332635447, 0.24214854989550771, 0.19640196243199293, 0.16037160028804176, 0.1701615704563817, 0.16235045474847032, 0.17876969667556808, 0.19672737608052127, 0.20040145032207823, 0.16521517242683603, 0.17310466894781984, 0.16747590398144307, 0.12382404449060525, 0.1236131080149735, 0.14684655526571677, 0.6723836494974065, 0.19672849160361605, 0.6308665635376463, 0.1160106035239391, 0.616667361299335, 0.6384953984398268, 0.44300253281993573, 0.15253730180513925, 0.38156038241879753, 0.19257605752781748, 0.19438536817280438, 0.5392904659455084, 0.3058085334164631, 0.1618765777122173, 0.282955921775234, 0.1971151497439383, 0.16948116973860616, 0.1749389777249809, 0.19943138592181975, 0.17191688731516952, 0.17118741556779837, 0.17788411495619405, 0.1657784394480757, 0.18008118094866643, 0.07279284400793584, 0.0775574400872614, 0.08919949619414469, 0.0915912101262526, 0.08646223095768946, 0.0698852329455425, 0.11540780245343685, 0.07230429731777754, 0.06402778814578691]}, "mutation_prompt": null}
{"id": "65a21cc2-d0da-44e6-bf6d-fa6e1d29ea17", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "2cc44634-aa9a-4e62-b519-418b8853ddef", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "6317334a-c67b-46de-8d8f-7a96aea60eb8", "solution": "import numpy as np\n\nclass EnhancedDynamicSearchSpaceHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n            if iter % 10 == 0:  # Adjusting the search space based on individual particle performance\n                for j in range(self.num_particles):\n                    if pbest_costs[j] < func(pbest[j]):\n                        diff = np.abs(pbest[j] - particles[j])\n                        particles[j] = np.clip(particles[j] + 0.1 * diff, -5.0, 5.0)\n\n        return gbest", "name": "EnhancedDynamicSearchSpaceHybridPSOSA", "description": "Enhancing EnhancedHybridPSOSA by incorporating a dynamic adjustment of search space based on individual particle performance for improved exploration and exploitation in optimization.", "configspace": "", "generation": 52, "fitness": 0.1870777497684969, "feedback": "The algorithm EnhancedDynamicSearchSpaceHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.16.", "error": "", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4430732837044734, 0.4314214270511558, 0.45423762575784987, 0.41069865077975887, 0.40883374490580937, 0.4272397870615253, 0.4039707712556009, 0.42504401894538246, 0.4684035214250838, 0.03359620456334411, 0.0713110299539752, 0.0, 0.0, 0.0, 0.0033839219674198784, 0.0, 0.0, 0.0, 0.09821001173458677, 0.10796415840615625, 0.09682751408388723, 0.08882904115218138, 0.10687413410278457, 0.08792017830099352, 0.07540494970016587, 0.08437758204298751, 0.09529240330224453, 0.10422093054342696, 0.09635425214241256, 0.05906161099578944, 0.08398484612832491, 0.07847289239250099, 0.03901406457289125, 0.06183538738823113, 0.06635992387864098, 0.06701381335451884, 0.6722857072348165, 0.5764927372263576, 0.661579769119637, 0.4804125094065065, 0.5911305508427909, 0.6221342408297903, 0.6605707082043701, 0.6052595393756682, 0.5382040022210977, 0.3040188779401155, 0.262551248052562, 0.27892814565372437, 0.29326737329038033, 0.2781855154236035, 0.3072291759364263, 0.2917935623538418, 0.2576532488134369, 0.278264566167974, 0.17538753176909794, 0.13574199123687591, 0.1300306881493425, 0.2649107123326293, 0.16743027722826742, 0.18682488253045781, 0.14555821596736573, 0.16612095941638216, 0.1712658521875957, 0.1719530507298257, 0.16852966757360177, 0.09991741758299466, 0.13734704140578635, 0.14664547127094085, 0.11112340728832792, 0.24386820265406117, 0.12140581003709394, 0.16872463891877854, 0.13611052529862988, 0.16519797736589537, 0.1101325574054437, 0.15856284949040567, 0.16797271283942405, 0.1185828188496838, 0.14119134673844858, 0.1440329787329072, 0.1637679717559678, 0.002054378251939104, 0.0, 0.0, 0.018085508735535716, 0.0, 0.0, 0.008259116162405045, 0.0, 0.0, 0.1083604985658041, 0.03784082035167391, 0.09033901701365399, 0.0234786705951312, 0.007549355576045302, 0.02978662661799536, 0.08795956785419146, 0.06292467603138507, 0.10383831445080904, 0.0, 0.05080800049283318, 0.0, 0.0, 0.023986951496855924, 0.0, 0.0, 0.0, 0.0, 0.10610050435935958, 0.0664154387678294, 0.11279531896278228, 0.05262055516719266, 0.10354208841955714, 0.08198474780525555, 0.07499271446656641, 0.11170468904711073, 0.0930495653610326, 0.40663779415619006, 0.4124515949287547, 0.3842172474415957, 0.39986147168972075, 0.40188095992113415, 0.3828317741908195, 0.4188673642093882, 0.3949862584316898, 0.4308407383505731, 0.03980551788348985, 0.03909658878436473, 0.0022175181735992755, 0.13494249647833312, 0.082851269479007, 0.09709474180493383, 0.08126608869721819, 0.09827981498019422, 0.07451306523071821, 0.17297903600693276, 0.24517339357943058, 0.13571301749835618, 0.19888483085879338, 0.16639562861911472, 0.15909069874370385, 0.16922344665661004, 0.2695029507118084, 0.25224039634456874, 0.15516569638345445, 0.2232814493661348, 0.18972673543343266, 0.25881554542688867, 0.18839935949172326, 0.29348401379806577, 0.20341964658408418, 0.267526888132987, 0.15720503569833122, 0.1418709259644817, 0.16265608220168015, 0.1844088625995277, 0.21341998010649144, 0.14269558431658136, 0.1650191271202046, 0.18095348806784117, 0.20332891647533902, 0.14131406241891875, 0.202644906294839, 0.17982588239990038, 0.20240759499583438, 0.20719037538404994, 0.200778723852314, 0.19700771301653985, 0.2062687968723601, 0.19075036216052654, 0.19718125873106418, 0.17592598515389568, 0.18485446232658231, 0.17625383667173133, 0.18351759912873988, 0.17242375982454738, 0.175617467680656, 0.17295072164174619, 0.1858089102284144, 0.1625547280687264, 0.1211972248641221, 0.11918708211305185, 0.14642656613067373, 0.6254369150360661, 0.19584082405086234, 0.6475297522260459, 0.09838324134933374, 0.6095629296470017, 0.6114023570813654, 0.5127838936261142, 0.15401212589176283, 0.5184798198950548, 0.19192235528228885, 0.1973212223255092, 0.47359953825950807, 0.09076675646018406, 0.44023137496783815, 0.29681118317460475, 0.17115559931872137, 0.1668172996517947, 0.16055930871444812, 0.18443996327580547, 0.19531624658643865, 0.18473602959226865, 0.16911327964293055, 0.18983208424813958, 0.1932354937473425, 0.08885123315984622, 0.07916271305164413, 0.06731457806974683, 0.09227515702900857, 0.07989424411110757, 0.07954017046778694, 0.09438141597286864, 0.07154504174944487, 0.07522090035854112]}, "mutation_prompt": null}
{"id": "ac66172a-9ab1-4f56-9a8e-c9e52abfb5b4", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "06179d5e-225d-4c66-8758-c6bc6d28ecdf", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "b2a7d8f0-68cd-49ad-922e-5dd52607c15d", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "622b1bc4-a5ac-42e2-b1ac-38c35453f39c", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "1624da4d-bd4a-424a-b0d0-b6e221bfed1b", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA_Opposition:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        def opposition(position):\n            return -position\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i] = opposition(particles[i])  # Introduce opposition-based learning\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA_Opposition", "description": "Optimizing the exploration and exploitation balance by incorporating a novel opposition-based learning mechanism to improve convergence speed and solution quality.", "configspace": "", "generation": 57, "fitness": 0.09135784043994262, "feedback": "The algorithm EnhancedHybridPSOSA_Opposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.22643190591804485, 0.1756395871291876, 0.2501772380966917, 0.08943128444451964, 0.08638809477640319, 0.10416902260892735, 0.18690864477543567, 0.09445431717912944, 0.09277954464994742, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04950369375675423, 0.04338858569132842, 0.0390444821118876, 0.05336040412237597, 0.06405803339324356, 0.05133539245299412, 0.051883414792035176, 0.03528016905619957, 0.08439977579096247, 0.035413317937566524, 0.037493218546557405, 0.03913207569882071, 0.05136279918872533, 0.038479493295523026, 0.028318799435295694, 0.03096147331821919, 0.05399274131039822, 0.02014819411651403, 0.04508425064952992, 0.04778489197617486, 0.042782050486198764, 0.05324558914827682, 0.04678013722712837, 0.037332462972912484, 0.06379241875035768, 0.04889164439375926, 0.03910579656888746, 0.02645547655886693, 0.07666134045481632, 0.05913099240390218, 0.0729730601722709, 0.085256455002095, 0.058667586968136676, 0.043640557530748136, 0.014796031654078945, 0.0, 0.16239826898578757, 0.19924405211870977, 0.13307445593770573, 0.0771487764932266, 0.1424099978131771, 0.0502560224603138, 0.11778410396744621, 0.11242382590089928, 0.13046405807467, 0.049229733278704946, 0.012490691630089867, 0.09466506752259118, 0.02469608347131702, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10589590967110729, 0.1460092977576154, 0.08674202150241328, 0.084159809210136, 0.10082842313385298, 0.0990770041945872, 0.08675569100490033, 0.09312895129114218, 0.13180761277201725, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0459039689176407, 0.07003872367174513, 0.08488257834807844, 0.015909130367409152, 0.041593220746157566, 0.04171217819681439, 0.03828009033265767, 0.04235987678766251, 0.08191996115857458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19893457950908922, 0.18678107696834778, 0.16460047828326785, 0.16145027638504417, 0.1485834028031261, 0.12273397909927897, 0.1925017060640397, 0.19278081960906557, 0.186666447521035, 0.017199714168676494, 0.018392286808862957, 0.021518708839387335, 0.05371008562489987, 0.060069405608662474, 0.04886573375869885, 0.03962442209056427, 0.05804828805504514, 0.04542229607386361, 0.11357067389382469, 0.13152416529771982, 0.12716934438120042, 0.09932973565558312, 0.11427905607197719, 0.1191562942128025, 0.16173019877753358, 0.12092743598991185, 0.12340757046932926, 0.15738759333284547, 0.15420501865126168, 0.1575120870407536, 0.18451925907190914, 0.1873743879159745, 0.1820765381376689, 0.15675931101859386, 0.19486775297138792, 0.16457133837966176, 0.08665153650570645, 0.0821148547832321, 0.10072972180057205, 0.11491328587809402, 0.14624320162165516, 0.14816541275415251, 0.10333354420502328, 0.14055330587372916, 0.12900926516993005, 0.2733689017939569, 0.19882076002904536, 0.21078032692603788, 0.23857384798755898, 0.2319377963382937, 0.22130468693611105, 0.25708110328906164, 0.2303627898220335, 0.2359336447052327, 0.15151056862710355, 0.1493287618419239, 0.15486670408877945, 0.17449931299641253, 0.13852590513087182, 0.14706202282297853, 0.15299751200637324, 0.1552869053718039, 0.15607468068235286, 0.13687211576265834, 0.15023971916120704, 0.10099422539615321, 0.11038936489841011, 0.14171311721862712, 0.2220569298788685, 0.1113846170167031, 0.10217863102625102, 0.10994251025626034, 0.16296867627711376, 0.2535311929437801, 0.16079831003847755, 0.18888786797654766, 0.1562050466353807, 0.09821635858461597, 0.2561858571978122, 0.2126459918298984, 0.11661653478735245, 0.172323526952893, 0.18556420314637367, 0.17331273523744806, 0.1775667817065787, 0.17546475714359255, 0.1792556487022281, 0.1955284727640113, 0.16773231499931174, 0.17735175035611772, 0.08426463261307926, 0.05645660740772396, 0.060073229472959455, 0.06870959980159219, 0.06808290433482089, 0.053188675462635726, 0.05958676513304162, 0.0578600276229696, 0.05125597352420663]}, "mutation_prompt": null}
{"id": "2074352f-7d20-4f0f-b507-a7f7cd01732f", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "b199140b-9e92-438b-b5a2-d8efbdd53b0f", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "6fe6f306-cbce-48fd-9ae1-8806536d90e4", "solution": "import numpy as np\n\nclass DynamicPopSizeHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "DynamicPopSizeHybridPSOSA", "description": "Introducing a dynamic population size adjustment mechanism based on fitness and diversity to enhance exploration and exploitation in optimization.", "configspace": "", "generation": 60, "fitness": 0.18928792356716304, "feedback": "The algorithm DynamicPopSizeHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.16.", "error": "", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "494eb2eb-e315-442a-b79c-d44b54899cea", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "90171de9-60eb-4758-9b7a-242c61f675c9", "solution": "import numpy as np\n\nclass EnhancedDynamicPopSizeHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedDynamicPopSizeHybridPSOSA", "description": "Enhancing the EnhancedHybridPSOSA algorithm by introducing a dynamic population size adaptation mechanism based on fitness diversity to improve convergence and avoid premature convergence.", "configspace": "", "generation": 62, "fitness": 0.18928792356716304, "feedback": "The algorithm EnhancedDynamicPopSizeHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.16.", "error": "", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "efbb5882-6690-4627-81bb-3209046b4612", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "b5251954-c128-4bed-a68c-4da2875361a6", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "ecbb6e89-1f46-4c28-92b9-0b8e14ae68fc", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "0bc98b9e-583f-4556-952e-8beb36a8790f", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "9c5d3108-d066-4f37-a440-4c62c4b3a1a8", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA_Levy:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n\n            # Integrate Levy flight for enhanced exploration\n            beta = 1.5\n            sigma = (math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            s = np.random.normal(0, sigma, size=self.dim)\n            levy = 0.01 * s / (abs(s) ** (1 / beta))\n\n            return np.clip(new_velocity + levy, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA_Levy", "description": "Introducing Levy flight for enhanced exploration capability in optimization.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'math' is not defined\").", "error": "NameError(\"name 'math' is not defined\")", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {}, "mutation_prompt": null}
{"id": "519d34a9-6a41-4e5e-b490-600de6414029", "solution": "import numpy as np\n\nclass DynamicPopSizeEnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles(num_particles):\n            return np.random.uniform(-5.0, 5.0, size=(num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles(self.num_particles)\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n            # Dynamic population size adaptation\n            if iter % 10 == 0 and iter > 0:\n                if np.random.rand() < 0.5:\n                    self.num_particles += 5\n                    new_particles = initialize_particles(5)\n                    particles = np.vstack((particles, new_particles))\n                    velocities = np.vstack((velocities, np.zeros((5, self.dim)))\n                    pbest = np.vstack((pbest, new_particles))\n                    pbest_costs = np.hstack((pbest_costs, np.array([func(p) for p in new_particles]))\n\n        return gbest", "name": "DynamicPopSizeEnhancedHybridPSOSA", "description": "Enhancing the EnhancedHybridPSOSA algorithm by incorporating a dynamic population size adaptation mechanism to dynamically adjust the number of particles based on the optimization progress.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 61, 21, '                    pbest = np.vstack((pbest, new_particles))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 61, 21, '                    pbest = np.vstack((pbest, new_particles))\\n'))", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {}, "mutation_prompt": null}
{"id": "2ed4aff7-0914-44f9-b71c-adb35ff9aa06", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "11534560-c7d7-410b-9869-79d8464243e2", "solution": "import numpy as np\n\nclass DynamicPopSizeHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n            if iter % 10 == 0:  # Dynamic population size adjustment\n                if np.random.rand() < 0.2:  # 20% chance of adjusting population size\n                    if func(particles[i]) > np.mean(pbest_costs):\n                        particles = np.vstack((particles, np.random.uniform(-5.0, 5.0, size=(1, self.dim))))\n                        velocities = np.vstack((velocities, np.zeros(self.dim)))\n                        pbest = np.vstack((pbest, particles[-1]))\n                        pbest_costs = np.append(pbest_costs, func(particles[-1]))\n\n        return gbest", "name": "DynamicPopSizeHybridPSOSA", "description": "Introducing a dynamic population size adjustment mechanism based on the performance of individual particles to enhance exploration and exploitation in optimization.", "configspace": "", "generation": 70, "fitness": 0.1846523713384473, "feedback": "The algorithm DynamicPopSizeHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.16.", "error": "", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4348863288182676, 0.43514862353403205, 0.47425141348231625, 0.4070202703189931, 0.4031089227090794, 0.4063639557001645, 0.4273218783834223, 0.41695950690875916, 0.42486545138090326, 0.09313365075245894, 0.05296127486195834, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10083344989651455, 0.08353457272459397, 0.07355864997053718, 0.08416456252806837, 0.1137831704635619, 0.13616460753848147, 0.08983214764654657, 0.0840389667223792, 0.11447913671672283, 0.11514854457221757, 0.07283965125397263, 0.07289417503219886, 0.10256214720763879, 0.07577338335385086, 0.04027959688076921, 0.023393059450266818, 0.06401747153375181, 0.07452529754877579, 0.7208951171857256, 0.6749154940456943, 0.7073527318243154, 0.16259362519553355, 0.5820800930316641, 0.7041854968708632, 0.6870925443391764, 0.14322866395695533, 0.48639611895976664, 0.3130370682652438, 0.26041028784522335, 0.3062661447341114, 0.3095050687447677, 0.30181444581705563, 0.2877548160970601, 0.3042682204474447, 0.2676460647828176, 0.2886182446736111, 0.2186178101577767, 0.16168175356280157, 0.12718996708827512, 0.25910832885412904, 0.2449947058816495, 0.1779545778436049, 0.14106130453693333, 0.1679761941624751, 0.17254137354599952, 0.15756944773957215, 0.11987660572815018, 0.18331780556880495, 0.13261181713606307, 0.1513399144181512, 0.23010612088288962, 0.18071994831090343, 0.1790100859955368, 0.16595062348702871, 0.2005298752628354, 0.1508678084254812, 0.1128568602372303, 0.1159526218042265, 0.15608622734456368, 0.12168502258463854, 0.17880657990106352, 0.12459161245602168, 0.14656620779173968, 0.0, 0.0, 0.02429334532718952, 0.05035064597846972, 0.0, 0.0, 0.026993658892199734, 0.0, 0.0, 0.14486729453379155, 0.09503421934892087, 0.07481992757958211, 0.02365137187786237, 0.011487979853067709, 0.018620240906987773, 0.08558619495094189, 0.06088154898294629, 0.032489172468369576, 0.0, 0.0, 0.009297052624062996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08809827146432603, 0.057554965164680505, 0.10929476640490243, 0.05905790865933491, 0.10426460691150641, 0.08996314768468583, 0.06721566261450085, 0.09084486971245243, 0.08099050892796766, 0.38497489840901833, 0.403548089076018, 0.3990654512630494, 0.4824703734728557, 0.3946973869517144, 0.4305565359277823, 0.4294247254170136, 0.41190130600129904, 0.42123878697094674, 0.06201429807491099, 0.06165337903977253, 0.01835464074330706, 0.08495812385134383, 0.0954009882610819, 0.10368361740156429, 0.053559840166396144, 0.1046033284411827, 0.06047230478921006, 0.243523245161416, 0.23953337859370527, 0.16797052432315962, 0.17798906800680014, 0.21447549590124437, 0.18412114019960168, 0.18598256534268065, 0.1333981480661499, 0.18271106203846688, 0.17918151999361476, 0.1903884170148532, 0.20190253481814557, 0.29445300408229647, 0.2180896755352727, 0.3115351690078867, 0.21885260547746654, 0.2991942896267059, 0.14921983127066485, 0.19192332865106165, 0.17380643901685766, 0.19747898184312251, 0.18037298324686257, 0.19047386236795882, 0.1522817620817808, 0.17548426953306118, 0.2125636960138112, 0.10669028089242749, 0.19884392508190518, 0.21048281278578684, 0.1818697390720292, 0.1893013794666787, 0.1967045300495872, 0.18153625191497813, 0.2497081952400958, 0.18797078783883225, 0.22988168382607221, 0.18454407222143432, 0.1721696711441345, 0.1889782960050307, 0.17142003600828026, 0.19050810836749965, 0.18001084155573754, 0.17549733626898067, 0.23572223009078863, 0.1669778769738085, 0.12425559214949355, 0.12238007523663186, 0.14682727265338325, 0.629965614208392, 0.1964987049072402, 0.7465097025313517, 0.1181637095541801, 0.167269226558716, 0.6573731890525796, 0.6093261449117313, 0.15426658529418746, 0.3828686375363146, 0.1885461132948545, 0.16248449910953422, 0.532763192505114, 0.10136119811112898, 0.10116392866027812, 0.29019337681598967, 0.17650967220616454, 0.1733466873817182, 0.19920428650200406, 0.17939818325215728, 0.17524111076739723, 0.17751078855234503, 0.17422597160187958, 0.16908585765996664, 0.18342412056471313, 0.08484976061825289, 0.07086395037980997, 0.06448966964369907, 0.09546195725188322, 0.06096216906959728, 0.06974722905181518, 0.07920664617997786, 0.06800498324921134, 0.09172659951819351]}, "mutation_prompt": null}
{"id": "7be86797-b741-499e-99b7-68c0df5e7b86", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "37249431-317c-4706-9673-da9393deca0d", "solution": "import numpy as np\n\nclass ChaoticEnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def chaotic_map(self, x):\n        return 3.9 * x * (1 - x)\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n            # Introducing chaotic mapping for exploration enhancement\n            for i in range(self.num_particles):\n                particles[i] = np.clip(self.chaotic_map(particles[i]), -5.0, 5.0)\n\n        return gbest", "name": "ChaoticEnhancedHybridPSOSA", "description": "Introducing a chaotic mapping to enhance the exploration capability of the EnhancedHybridPSOSA algorithm.", "configspace": "", "generation": 72, "fitness": 0.0455804086148684, "feedback": "The algorithm ChaoticEnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.08765692947017378, 0.06566704906952725, 0.09191479351278797, 0.08943128444451964, 0.06288754896546356, 0.08769556728782368, 0.11820875962670252, 0.07799035606457727, 0.10699522387590055, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014796379626571099, 0.007963460166119707, 0.010544468052146483, 0.001118763234930542, 0.011548343034348707, 0.018150078853194973, 0.0, 0.01057579772145878, 0.0, 0.0, 0.0, 0.019501673109890705, 0.007764850454999195, 0.0, 0.0, 0.0, 0.0, 0.04508425064952992, 0.04210363830173136, 0.042782050486198764, 0.05324558914827682, 0.04678013722712837, 0.0469907213992623, 0.06474674806099923, 0.061536785329518895, 0.06281413592113239, 0.0, 0.0, 0.0, 0.0, 0.0003524083577701731, 0.01737790887330881, 0.0, 0.01119445381188322, 0.0, 0.10018685869136312, 0.044388140813076626, 0.05213904648218648, 0.09472650330788857, 0.02715768825078435, 0.002431600435984227, 0.04405361143714148, 0.059216496363723836, 0.01931018397460904, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.023891085702517967, 0.0, 0.019290421752604536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10958855763598663, 0.13871047537962455, 0.15105521921744425, 0.09461410617771238, 0.0969983589269734, 0.09632631780940715, 0.16211905291525075, 0.09707379230407098, 0.12271895091511864, 0.0, 0.0, 0.0, 0.011242306624372755, 0.0, 0.017501683791123157, 0.0006982092544258744, 0.0, 0.0435207733307037, 0.0910820455934841, 0.0935220382719637, 0.10181811293387366, 0.14519841883850626, 0.14108863434197816, 0.13693343846175743, 0.12049356185957227, 0.11918315121757883, 0.10668128754130934, 0.10798302385074043, 0.09803317504437614, 0.14344245626177377, 0.13792052181395775, 0.11653732796924998, 0.11113151008807931, 0.1272817997592518, 0.17369512487622318, 0.11354482774808783, 0.06479360226528419, 0.03391154036137645, 0.05454200626549266, 0.05686290051001519, 0.06932041692608804, 0.06333484497582031, 0.08364015581205408, 0.0996810992981525, 0.06403167692629175, 0.12261122416977055, 0.09379139630452937, 0.13336421106437624, 0.10384686784109076, 0.08183716246727613, 0.09297976061353364, 0.12237199858750303, 0.07863718186210245, 0.12610897469217996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.055893416168597665, 0.07735023140710184, 0.09250710070328627, 0.06972052320704569, 0.12360957003038509, 0.07078082059872248, 0.07269015173713855, 0.09634568763969875, 0.06973819703062023, 0.11031370369946258, 0.10214801461897771, 0.02203017431255394, 0.06110182728592772, 0.03850071725594428, 0.04541561500213287, 0.04837071533072734, 0.04023658539378616, 0.04133833534605069, 0.1696599044490671, 0.17682576931214522, 0.17103947209362236, 0.20467655989559408, 0.2075616796945572, 0.1834186566651177, 0.1812859316729809, 0.15697132931468583, 0.2042197084183205, 0.02173431388872049, 0.015817976510929088, 0.034297042171891334, 0.028110334221862265, 0.0347640582279517, 0.019947514614607975, 0.02684928362877803, 0.005520463402094888, 0.01895980281381704]}, "mutation_prompt": null}
{"id": "41e0149d-b676-43f0-9ea8-acd521360a3c", "solution": "import numpy as np\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def diversity_maintenance(particles):\n            for i in range(self.num_particles):\n                for j in range(i + 1, self.num_particles):\n                    if np.linalg.norm(particles[i] - particles[j]) < 0.1:\n                        particles[j] = np.random.uniform(-5.0, 5.0, size=self.dim)\n            return particles\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles = diversity_maintenance(particles)  # Integrate diversity maintenance\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "ImprovedHybridPSOSA", "description": "Improving EnhancedHybridPSOSA by introducing a novel diversity maintenance mechanism to enhance population diversity for better exploration during the optimization process.", "configspace": "", "generation": 73, "fitness": 0.03957744531347008, "feedback": "The algorithm ImprovedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.0876569294702243, 0.06423415049944448, 0.09160418974404927, 0.08943128444455051, 0.06204510195656443, 0.07700439226566502, 0.0778619486825406, 0.07422043020492763, 0.06854154161075221, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014572254733955403, 0.005275638633502555, 0.010544468052147593, 0.0011187632350074805, 0.006570620486287426, 0.018150078853234275, 0.0, 0.010575797721407487, 0.0, 0.0, 0.0, 0.019501673109863393, 0.00039528563300550434, 0.0, 0.0, 0.0, 0.0, 0.0450842506495166, 0.04210363830177122, 0.04278205048614858, 0.05324558914822175, 0.046780137227090735, 0.03733246297292536, 0.06379241875030617, 0.0488916443937234, 0.039105796568915885, 0.0, 0.0, 0.0, 0.0, 0.000215518095079692, 0.0, 0.0, 0.01119445381186357, 0.0, 0.10018685869139698, 0.03765971698870285, 0.05213904648220358, 0.06661749824787111, 0.027157688250810996, 0.0, 0.026181922062060714, 0.05921649636367421, 0.009809447265878402, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10879119250398783, 0.13871047537959236, 0.1482953767371098, 0.09416865854238798, 0.09699835892694753, 0.09571399605654407, 0.16104568613219672, 0.09707379230405366, 0.12096781839000559, 0.0, 0.0, 0.0, 0.006002370323320405, 0.0, 0.01750168379106798, 0.0, 0.0, 0.02666833626570153, 0.0702824612268691, 0.08600231476352782, 0.059234889255186496, 0.09846289938817132, 0.10844057434014942, 0.056336845919273904, 0.0879908044936013, 0.060551132385629036, 0.0771716547623662, 0.09597227240619599, 0.0961601813401094, 0.14344245626177088, 0.13792052181401382, 0.1137187550761708, 0.10242428921379576, 0.12019368026038613, 0.1736951248761619, 0.113544827748143, 0.03803356537719482, 0.033911540361427295, 0.05454200626552175, 0.05686290050998288, 0.0639758839699931, 0.06333484497579156, 0.08364015581210738, 0.09968109929815694, 0.06403167692627898, 0.11934558904189163, 0.09379139630449596, 0.13336421106438934, 0.1028008393912927, 0.07846030762822487, 0.09297976061356783, 0.12237199858756498, 0.07863718186215951, 0.12610897469224003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05559179745859333, 0.07457348599177915, 0.08157840845421993, 0.06709542404814961, 0.1207035396655658, 0.06652066617622332, 0.0723629269250472, 0.09634568763970985, 0.06926818844989668, 0.11031370369950455, 0.10042736099168104, 0.020478899054975908, 0.05059085346353165, 0.03728632333818027, 0.04541561500212721, 0.04680845216491436, 0.04009445607429207, 0.04133833534603437, 0.13471522306137507, 0.12828496744989426, 0.14754498426871399, 0.11590646924168413, 0.11393539758802329, 0.12456358843520887, 0.14961211855402057, 0.11374351346331657, 0.14680476350942395, 0.007041984983930716, 0.015817976510880016, 0.031296624077951085, 0.026917989316216695, 0.03415436066355837, 0.019947514614568562, 0.01612999899171541, 0.0, 0.01735804137261787]}, "mutation_prompt": null}
{"id": "5998c0cb-0151-43df-a709-ea733672572a", "solution": "import numpy as np\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "ImprovedHybridPSOSA", "description": "Improving EnhancedHybridPSOSA by introducing a dynamic population size adaptation mechanism based on fitness diversity to enhance solution exploration.", "configspace": "", "generation": 74, "fitness": 0.18928792356716304, "feedback": "The algorithm ImprovedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.16.", "error": "", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "1d0e8020-f31f-4112-b58d-fcb01dd23db4", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "913faa55-336f-4f90-9759-72464e3cd3f9", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "d3383e9f-24d1-4dc2-ac88-49d714bc4fb8", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing EnhancedHybridPSOSA by incorporating a dynamic bounding strategy to improve exploration and exploitation in optimization.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'update_velocity' is not defined\").", "error": "NameError(\"name 'update_velocity' is not defined\")", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {}, "mutation_prompt": null}
{"id": "a741952f-d665-4f4e-9cee-1c90026a7d55", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "417fc531-71aa-436f-90ed-e660fe99ea5a", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "bfa8c2b8-158f-4a83-b41e-9c2fa1cab6a1", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "96cb0c5c-995a-4170-8aba-9e5cb3ff2e6e", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "8c2a11c6-5c71-45b7-b8ab-e576e078dae0", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def levy_flight(position, scale=0.1):\n            beta = 1.5\n            sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=self.dim)\n            v = np.random.normal(0, 1, size=self.dim)\n            step = u / abs(v) ** (1 / beta)\n            step *= scale\n            new_position = position + step\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + levy_flight(current_pos, scale=0.05)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Utilizing a dynamic mutation strategy based on the concept of Levy flights to enhance exploration capability in optimization.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {}, "mutation_prompt": null}
{"id": "66ef2e38-7e42-4413-a0ee-d19b0011d6d0", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "545738af-46ca-47e3-989a-458f9f5774c6", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "3ed666ba-7ad5-442c-92be-a1523f8dece3", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSAImproved:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        # Dynamic population size adaptation based on performance\n        if iter % 5 == 0:  # Adjust population size every 5 iterations\n            if np.random.rand() < 0.1 and self.num_particles > 10:\n                self.num_particles -= 5\n            elif np.random.rand() < 0.1:\n                self.num_particles += 5\n            particles = np.vstack((particles, np.random.uniform(-5.0, 5.0, size=(10, self.dim))))\n\n        return gbest", "name": "EnhancedHybridPSOSAImproved", "description": "Improving EnhancedHybridPSOSA by introducing a dynamic population size adaptation mechanism based on performance and adding a diversity maintenance strategy to enhance exploration.", "configspace": "", "generation": 85, "fitness": 0.18928792356716304, "feedback": "The algorithm EnhancedHybridPSOSAImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.16.", "error": "", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "5c5d5d9e-d216-45d5-8652-9f18fe424dac", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "9092fb1d-0fae-44f6-a992-caa04c94ed09", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def simulated_annealing(current_pos, current_cost, best_pos, best_cost, T_max=1.0, T_min=0.001, alpha=0.9):\n            T = T_max * (T_min / T_max) ** (iter / self.max_iter)\n            candidate_pos = current_pos + np.random.uniform(-0.1, 0.1, size=self.dim)\n            candidate_pos = np.clip(candidate_pos, -5.0, 5.0)\n\n            candidate_cost = func(candidate_pos)\n            if candidate_cost < current_cost or np.exp((current_cost - candidate_cost) / T) > np.random.rand():\n                return candidate_pos, candidate_cost\n            return current_pos, current_cost\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = simulated_annealing(particles[i], pbest_costs[i], pbest[i], pbest_costs[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight and adaptive simulated annealing temperature control for improved exploration and exploitation in optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.4459790911065127, 0.4353539534725913, 0.45844760928292805, 0.41464080335514086, 0.4139486804938699, 0.43226902848695814, 0.4075091730990107, 0.42826549201028397, 0.4729578249616474, 0.034623587695403746, 0.07241246605084539, 0.0, 0.0, 0.0, 0.0035045301841793997, 0.0, 0.0, 0.0, 0.09892849688916827, 0.10889110240773936, 0.09738594876250495, 0.08935999035246556, 0.107778334919303, 0.0885010285287754, 0.07589953837351038, 0.08499528181974059, 0.09596385569719423, 0.10522358551162903, 0.09711481823630586, 0.05964627396979971, 0.08467728543053221, 0.07906249438691104, 0.03932588090520517, 0.06237266413945619, 0.06728452413028241, 0.0677616607482785, 0.6882853731178197, 0.5974690759569596, 0.67811071458713, 0.5065121045159723, 0.6121134232464066, 0.6405692427424232, 0.676690170206413, 0.6241716274563717, 0.5615595374909998, 0.30845018354699016, 0.26717510344241546, 0.2820837404509986, 0.29639111458352163, 0.28171286838319254, 0.311382917582654, 0.29528040882983353, 0.262209967642576, 0.28206395702169307, 0.17573980572071068, 0.1363243773220405, 0.13042420742024385, 0.26625717564166096, 0.16814037055546616, 0.18857712183320818, 0.14610495063486983, 0.16702484225322112, 0.17181174113198028, 0.17357072743642077, 0.17010541131715695, 0.10158452386516037, 0.13937085539182936, 0.14850772711979665, 0.11444633140048466, 0.24645642506094778, 0.12223560850384785, 0.17154603998905804, 0.13767925423095762, 0.16734501013238257, 0.11113503938985891, 0.16100786010749912, 0.1701863549690883, 0.11976195634736941, 0.1434790363237607, 0.14706484108133844, 0.1656485897490143, 0.002221400874047874, 0.0, 0.0, 0.01878700344189288, 0.0, 0.0, 0.00874553725996774, 0.0, 0.0, 0.10940734175485489, 0.038323670937610355, 0.09098378968612231, 0.023848990741138887, 0.00771355780252958, 0.030262427097623057, 0.08852596571728222, 0.06346218411627191, 0.10465695293893573, 0.0, 0.05159878649270688, 0.0, 0.0, 0.025147610440248713, 0.0, 0.0, 0.0, 0.0, 0.10782609686173183, 0.06723841706901201, 0.1146422932470792, 0.05344085811098487, 0.10527642443035168, 0.08315127028804459, 0.07612892512968994, 0.11300852985591503, 0.09411478515392846, 0.4096661137434905, 0.4155719254455118, 0.38612118844777543, 0.40315293876579705, 0.4062860429417885, 0.3866138864145885, 0.4209743890808605, 0.39794175260739084, 0.4335605292816904, 0.04000110770986043, 0.03952084118416099, 0.0022418231793555066, 0.13636975913806404, 0.08347753061203544, 0.09801877724783081, 0.08185148275848808, 0.09936059647967432, 0.07497347861429904, 0.17405150690725624, 0.2471894920176756, 0.13615077616486726, 0.20156931952819146, 0.16730377385231188, 0.159868618552923, 0.16957090116196016, 0.2733163870216876, 0.2555237965997418, 0.1557857364922116, 0.2246438723559454, 0.1901598918309776, 0.25980601525917413, 0.1891531766265676, 0.2955043700550294, 0.20394596878001103, 0.2698447898106795, 0.15742809841439664, 0.14263819246229925, 0.16377512001867944, 0.1876788631228008, 0.21489721291551245, 0.14328652104890338, 0.16561920495738902, 0.18182936798759475, 0.20464507870262083, 0.14309554407209357, 0.20337408610217622, 0.18073165867128338, 0.20305408356235244, 0.2078675544309544, 0.2016291065021769, 0.19753324985192833, 0.20742162911270345, 0.19187212432970358, 0.19745162025419338, 0.17672075200767556, 0.18655597635440435, 0.1770143893979388, 0.18440046979282498, 0.1731007948581762, 0.17639551908629147, 0.17384090301062294, 0.1866351948464492, 0.16334025119287365, 0.12157747296700616, 0.11962316671225304, 0.1469126009684576, 0.6318717591074985, 0.19623720908527098, 0.6520635799541572, 0.09849457131369455, 0.6152937516743595, 0.6178374169592062, 0.5176058263363034, 0.15427408201219917, 0.5257070047696706, 0.1932346293523004, 0.19841996583834542, 0.479976546471203, 0.09102226227627819, 0.446891268035169, 0.3018527182335302, 0.17144250560152574, 0.16712035775621858, 0.1606929796485056, 0.185671144367345, 0.19550662263095553, 0.1849912385079191, 0.16951804802328319, 0.19014539392482677, 0.19369991972039569, 0.08933964448177689, 0.0795359183810801, 0.0676448312239698, 0.09282657235073655, 0.08065164269452996, 0.08010466518210779, 0.095374174518572, 0.07201890442067449, 0.07572043067910961]}, "mutation_prompt": null}
{"id": "8e648c5b-a7c4-4844-a9ae-363425ae0fd7", "solution": "import numpy as np\n\nclass ImprovedHybridPSO_DE:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def differential_evolution(current_pos, F=0.5, CR=0.9):\n            candidates = np.random.permutation(particles)\n            mutant = current_pos + F * (candidates[0] - candidates[1])\n            trial = np.where(np.random.rand(self.dim) < CR, mutant, current_pos)\n            trial = np.clip(trial, -5.0, 5.0)\n            \n            trial_cost = func(trial)\n            if trial_cost < func(current_pos):\n                return trial, trial_cost\n            return current_pos, func(current_pos)\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = differential_evolution(particles[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "ImprovedHybridPSO_DE", "description": "Improving Hybrid Particle Swarm Optimization with Differential Evolution for enhanced exploration and exploitation in optimization.", "configspace": "", "generation": 88, "fitness": 0.2447431152957881, "feedback": "The algorithm ImprovedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "5a751ded-19d3-4a8c-888c-16dd51251003", "metadata": {"aucs": [0.6170882718377632, 0.5771419778608107, 0.5667359911494645, 0.570344597062455, 0.5777157901234771, 0.5688648444278933, 0.5725154489894573, 0.6059650870352574, 0.5737552293787787, 0.22282932781195208, 0.20902371273724862, 0.25789932669245363, 0.23217662464006528, 0.25706863654566536, 0.24035753864329557, 0.1557857970707338, 0.25308479531165307, 0.24172402647537505, 0.12418013434277386, 0.12078802317079518, 0.1274509718385447, 0.11105508408787446, 0.10263481360912463, 0.13686841290773755, 0.13499818349595694, 0.13584789215027882, 0.13169515872715032, 0.09708099554124106, 0.09258289509271422, 0.06376155577906883, 0.09408377229049569, 0.07138077879287885, 0.05571973639118588, 0.10124453679227141, 0.08406541709428217, 0.08458703111372068, 0.9589099631939028, 0.8036898107943105, 0.814709136684566, 0.8745414465938594, 0.8709521964918059, 0.8565502586549157, 0.860725982986156, 0.862574463182755, 0.7896442860157721, 0.3300044420553283, 0.3143829915812688, 0.3459974195067179, 0.3408318017001848, 0.33630028646281906, 0.32462047968049723, 0.32747377575803593, 0.31683092368576493, 0.32263750126943735, 0.6129960957182521, 0.6565301202056021, 0.5909680999859876, 0.42224850546185677, 0.18489959768583497, 0.19863574187966593, 0.1706760617048474, 0.48692447360533364, 0.22650175429981678, 0.1616408256579911, 0.17761354971548715, 0.16132152983163905, 0.1876692903316195, 0.10964584571507019, 0.15435333021719966, 0.16082948370001537, 0.16008503048397726, 0.15592303095825333, 0.16141455127080406, 0.160421617357011, 0.3037622093718185, 0.12167595378499496, 0.17570242537930003, 0.1642048252313585, 0.13036445766512172, 0.15780528402180094, 0.1709515651337561, 0.00010051080724549077, 0.006279444692977809, 0.03738786277536843, 0.052170103499944664, 0.021149861591392982, 0.020675754446533356, 0.05164188061894659, 0.035574246025098955, 0.007156632966063614, 0.10267165335725947, 0.09301923275755308, 0.14070520668576358, 0.11449491090372899, 0.04318642860974575, 0.10540989736990236, 0.12036001383936057, 0.1281634895352105, 0.07926696850206372, 0.06471962580655377, 0.07591959823706407, 0.021619816430548222, 0.035713751448479325, 0.0635656139995886, 0.0519668254121769, 0.0562150396903619, 0.047090416191836626, 0.038131476018624544, 0.12531714545929684, 0.1460577823571535, 0.1096494769964298, 0.1819026711611248, 0.07900112324229047, 0.08828087541336704, 0.06805191085846496, 0.15519991227471397, 0.0712006306837033, 0.44767745615265253, 0.44154720929460345, 0.4323982039475972, 0.4755314276349515, 0.4296374784823991, 0.42969250483134436, 0.44539644666835143, 0.4203645951103471, 0.4579707601384161, 0.10174764005237025, 0.08703589845319382, 0.08357132628819308, 0.11288173503860122, 0.1307466125419221, 0.11612976996201474, 0.13835100545777257, 0.12469343029623903, 0.10958210933571044, 0.1653738734761211, 0.1263578789701918, 0.16747613871273004, 0.17221180099127653, 0.22715439498727608, 0.16497124901177507, 0.2529092418893555, 0.1611648448676657, 0.13037403497632272, 0.3123164629542605, 0.26484928259582075, 0.3027497172212035, 0.2553023427711094, 0.22380816265542336, 0.26560921458655773, 0.33450928828558313, 0.28557234562401146, 0.2854578007019746, 0.21260048195443648, 0.25583109285030914, 0.2095935503224161, 0.18448725123552612, 0.2004277626037675, 0.26894303336004444, 0.19165282998735433, 0.2006172118420031, 0.2460365678951838, 0.1934758960427274, 0.20894396171558194, 0.19400888467762767, 0.208717746601374, 0.19417194176100805, 0.19441784769906167, 0.18223274606898654, 0.21014570541581845, 0.21006127891532733, 0.1837102704433049, 0.18057559106062693, 0.18566312044651312, 0.16944909389440932, 0.18601628578555474, 0.18843172883406412, 0.17213222960796648, 0.1860508840128422, 0.19011122326591245, 0.17536713995704145, 0.17578694253716098, 0.1934611613989482, 0.7198153441800792, 0.1920731723452619, 0.6967026339041218, 0.6622964153631614, 0.6592536519775956, 0.40342054147837625, 0.48739376295401493, 0.14973931504450588, 0.4340015825312229, 0.4210026045820737, 0.24716602111179875, 0.20681162081790094, 0.3899360082208959, 0.31823471419278215, 0.5113745970412142, 0.19198034078993398, 0.17643176864140586, 0.19235417819151823, 0.19850727353969744, 0.18310175431153042, 0.17137033438092109, 0.17601437621913807, 0.17217718415133476, 0.18867132934731534, 0.08184594379826049, 0.06894641624544018, 0.08257960603682202, 0.07841479571355159, 0.07788049937820596, 0.08597670681568759, 0.07939632040485789, 0.06912896747419839, 0.068005345196823]}, "mutation_prompt": null}
{"id": "e3944d63-e589-44ee-8cb4-50af0e38724e", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def differential_evolution(current_pos, F=0.5, CR=0.9):\n            F_adaptive = F + np.random.normal(0, 0.1)  # Adaptive mutation strength\n            candidates = np.random.permutation(particles)\n            mutant = current_pos + F_adaptive * (candidates[0] - candidates[1])\n            trial = np.where(np.random.rand(self.dim) < CR, mutant, current_pos)\n            trial = np.clip(trial, -5.0, 5.0)\n            \n            trial_cost = func(trial)\n            if trial_cost < func(current_pos):\n                return trial, trial_cost\n            return current_pos, func(current_pos)\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = differential_evolution(particles[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSO_DE", "description": "Enhancing exploration by adding adaptive mutation strength in Differential Evolution to improve convergence speed.", "configspace": "", "generation": 89, "fitness": 0.24226961808598682, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "8e648c5b-a7c4-4844-a9ae-363425ae0fd7", "metadata": {"aucs": [0.6160071061474817, 0.5775367744695965, 0.5883716496656379, 0.5893759856649532, 0.5895610232861965, 0.6047135313532711, 0.5975255737941949, 0.6082460263583165, 0.5831034264751367, 0.22304261088838861, 0.20600061868801833, 0.2573193394156864, 0.24703760246706974, 0.24546193209829292, 0.1853072739882139, 0.19471521883480147, 0.2295040297542602, 0.18483256924826763, 0.12780727351095844, 0.10274368324265248, 0.1548275562642384, 0.10613806872445242, 0.3069375396197188, 0.10252167315707683, 0.132063120766298, 0.12516281044216082, 0.13512923186932946, 0.11506364365734822, 0.09209550520633025, 0.06913231703181677, 0.09534082711349934, 0.09318945945190449, 0.07568984861310513, 0.10582533954059004, 0.09148631217208125, 0.06341301260484722, 0.8164695156296065, 0.832925507873123, 0.823774185992767, 0.8679544311040501, 0.778774663593806, 0.7847978202653411, 0.8031579031128078, 0.806283617597785, 0.8451565881291937, 0.33832689080792444, 0.34857274227586643, 0.3076301129726905, 0.32381776749096847, 0.31348558993878917, 0.3512172090621608, 0.3103270702644628, 0.3126496604192046, 0.3185274067550723, 0.6172986518601854, 0.5934855543992116, 0.5010995968381065, 0.5630573920163171, 0.20416542614875377, 0.45269603494758026, 0.21300984742985363, 0.33635992428430905, 0.21689380565738714, 0.1695811516249256, 0.12141241250079582, 0.15129117810324044, 0.20586352179593714, 0.15156154788244003, 0.13569170221823135, 0.20889590926411594, 0.19735706932531094, 0.12589203569255603, 0.1919925504280683, 0.16526541558391905, 0.11755121363848864, 0.17208850627595784, 0.1733332857166181, 0.12076630086121753, 0.12928417410584114, 0.1678997989457397, 0.18155280758461534, 0.0557476209067701, 0.04399704156897388, 0.04404714494735851, 0.009412020256343911, 0.02589952669709783, 0.022610100566189395, 0.021448943434524526, 0.05561424850605201, 9.999999999998899e-05, 0.12060512567045223, 0.06270754368033138, 0.13715527631318414, 0.11927827119752943, 0.045865793100227314, 0.05212163675695214, 0.12605941457218106, 0.15605779059230995, 0.08331752342555943, 0.07924879855665201, 0.043348050487492906, 0.07823577133677029, 0.04735648057562447, 0.06571868279476456, 0.028441892688925274, 0.07087464845255731, 0.059257830093447095, 0.03073695468328075, 0.07764833469958576, 0.05196795867575987, 0.07550124495357324, 0.05869312400337423, 0.14974738516569397, 0.1336389622149774, 0.1515491955872611, 0.06994310113340019, 0.07750117210183893, 0.4444979441840008, 0.45757986292353636, 0.453491944342166, 0.42419050108083367, 0.42184468646937756, 0.42346358833075215, 0.45470369230357677, 0.4483815346881034, 0.47127930006465557, 0.0969757825310984, 0.09688813166935484, 0.06311684742429224, 0.11490674836870007, 0.11518938357972786, 0.1142500412367593, 0.11300665331470283, 0.12004827587595679, 0.1217238973328334, 0.14496189797095504, 0.17193545426767887, 0.16548576732081743, 0.20658351888580173, 0.2312733619298032, 0.19800154772484602, 0.2369254641958456, 0.16712873988717292, 0.17407325948886987, 0.23972146888887413, 0.30925691957698165, 0.26451102638830426, 0.325273414369466, 0.3112199993185172, 0.329201016836567, 0.30283927993365556, 0.3518639532239026, 0.313938611925751, 0.19606425769443125, 0.21289955578400288, 0.16464817727143655, 0.2607155028060907, 0.2420743798252355, 0.23938290956979313, 0.1954751317760164, 0.21919239548493608, 0.20623915439804363, 0.19591746202966465, 0.18513434098120152, 0.21646323656355715, 0.1984562902996626, 0.21809078600665266, 0.2154432758724929, 0.17359484490793342, 0.19910053522619053, 0.20079625126935996, 0.1807897002259906, 0.21575409332600626, 0.17730503174148948, 0.16424964350910654, 0.1795189525844898, 0.18272513298480664, 0.20012048451903586, 0.18407959359467996, 0.18180755924055725, 0.17059931523195027, 0.1593326928212433, 0.1836057771884544, 0.7539294975279751, 0.19730579453239372, 0.684402814065858, 0.6602103148301526, 0.14038303199453117, 0.3766270496531212, 0.5819844764370864, 0.19336199200193294, 0.4696578168538209, 0.34127835177297494, 0.18879284902147042, 0.4984519862408435, 0.10283632551144295, 0.36364251910518086, 0.23386241356714688, 0.17287385312038062, 0.1732191376065506, 0.19459548939854998, 0.18892535421350165, 0.1819846374857087, 0.17803971844834054, 0.1873057794600328, 0.17670108344886415, 0.1758809098693297, 0.08007227426986396, 0.08174056061776136, 0.1109645241758932, 0.07912329201282642, 0.08141847010951098, 0.08609758574727733, 0.083856066640559, 0.08332556465492347, 0.08519636519004847]}, "mutation_prompt": null}
{"id": "75e1c8f6-eeeb-41b8-82d3-be5d3639246b", "solution": "import numpy as np\n\nclass ImprovedHybridPSO_DE:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def differential_evolution(current_pos, F=0.5, CR=0.9):\n            candidates = np.random.permutation(particles)\n            mutant = current_pos + F * (candidates[0] - candidates[1])\n            trial = np.where(np.random.rand(self.dim) < CR, mutant, current_pos)\n            trial = np.clip(trial, -5.0, 5.0)\n            \n            trial_cost = func(trial)\n            if trial_cost < func(current_pos):\n                return trial, trial_cost\n            return current_pos, func(current_pos)\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = differential_evolution(particles[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "ImprovedHybridPSO_DE", "description": "Improving Hybrid Particle Swarm Optimization with Differential Evolution for enhanced exploration and exploitation in optimization.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e648c5b-a7c4-4844-a9ae-363425ae0fd7", "metadata": {"aucs": [0.6170882718377632, 0.5771419778608107, 0.5667359911494645, 0.570344597062455, 0.5777157901234771, 0.5688648444278933, 0.5725154489894573, 0.6059650870352574, 0.5737552293787787, 0.22282932781195208, 0.20902371273724862, 0.25789932669245363, 0.23217662464006528, 0.25706863654566536, 0.24035753864329557, 0.1557857970707338, 0.25308479531165307, 0.24172402647537505, 0.12418013434277386, 0.12078802317079518, 0.1274509718385447, 0.11105508408787446, 0.10263481360912463, 0.13686841290773755, 0.13499818349595694, 0.13584789215027882, 0.13169515872715032, 0.09708099554124106, 0.09258289509271422, 0.06376155577906883, 0.09408377229049569, 0.07138077879287885, 0.05571973639118588, 0.10124453679227141, 0.08406541709428217, 0.08458703111372068, 0.9589099631939028, 0.8036898107943105, 0.814709136684566, 0.8745414465938594, 0.8709521964918059, 0.8565502586549157, 0.860725982986156, 0.862574463182755, 0.7896442860157721, 0.3300044420553283, 0.3143829915812688, 0.3459974195067179, 0.3408318017001848, 0.33630028646281906, 0.32462047968049723, 0.32747377575803593, 0.31683092368576493, 0.32263750126943735, 0.6129960957182521, 0.6565301202056021, 0.5909680999859876, 0.42224850546185677, 0.18489959768583497, 0.19863574187966593, 0.1706760617048474, 0.48692447360533364, 0.22650175429981678, 0.1616408256579911, 0.17761354971548715, 0.16132152983163905, 0.1876692903316195, 0.10964584571507019, 0.15435333021719966, 0.16082948370001537, 0.16008503048397726, 0.15592303095825333, 0.16141455127080406, 0.160421617357011, 0.3037622093718185, 0.12167595378499496, 0.17570242537930003, 0.1642048252313585, 0.13036445766512172, 0.15780528402180094, 0.1709515651337561, 0.00010051080724549077, 0.006279444692977809, 0.03738786277536843, 0.052170103499944664, 0.021149861591392982, 0.020675754446533356, 0.05164188061894659, 0.035574246025098955, 0.007156632966063614, 0.10267165335725947, 0.09301923275755308, 0.14070520668576358, 0.11449491090372899, 0.04318642860974575, 0.10540989736990236, 0.12036001383936057, 0.1281634895352105, 0.07926696850206372, 0.06471962580655377, 0.07591959823706407, 0.021619816430548222, 0.035713751448479325, 0.0635656139995886, 0.0519668254121769, 0.0562150396903619, 0.047090416191836626, 0.038131476018624544, 0.12531714545929684, 0.1460577823571535, 0.1096494769964298, 0.1819026711611248, 0.07900112324229047, 0.08828087541336704, 0.06805191085846496, 0.15519991227471397, 0.0712006306837033, 0.44767745615265253, 0.44154720929460345, 0.4323982039475972, 0.4755314276349515, 0.4296374784823991, 0.42969250483134436, 0.44539644666835143, 0.4203645951103471, 0.4579707601384161, 0.10174764005237025, 0.08703589845319382, 0.08357132628819308, 0.11288173503860122, 0.1307466125419221, 0.11612976996201474, 0.13835100545777257, 0.12469343029623903, 0.10958210933571044, 0.1653738734761211, 0.1263578789701918, 0.16747613871273004, 0.17221180099127653, 0.22715439498727608, 0.16497124901177507, 0.2529092418893555, 0.1611648448676657, 0.13037403497632272, 0.3123164629542605, 0.26484928259582075, 0.3027497172212035, 0.2553023427711094, 0.22380816265542336, 0.26560921458655773, 0.33450928828558313, 0.28557234562401146, 0.2854578007019746, 0.21260048195443648, 0.25583109285030914, 0.2095935503224161, 0.18448725123552612, 0.2004277626037675, 0.26894303336004444, 0.19165282998735433, 0.2006172118420031, 0.2460365678951838, 0.1934758960427274, 0.20894396171558194, 0.19400888467762767, 0.208717746601374, 0.19417194176100805, 0.19441784769906167, 0.18223274606898654, 0.21014570541581845, 0.21006127891532733, 0.1837102704433049, 0.18057559106062693, 0.18566312044651312, 0.16944909389440932, 0.18601628578555474, 0.18843172883406412, 0.17213222960796648, 0.1860508840128422, 0.19011122326591245, 0.17536713995704145, 0.17578694253716098, 0.1934611613989482, 0.7198153441800792, 0.1920731723452619, 0.6967026339041218, 0.6622964153631614, 0.6592536519775956, 0.40342054147837625, 0.48739376295401493, 0.14973931504450588, 0.4340015825312229, 0.4210026045820737, 0.24716602111179875, 0.20681162081790094, 0.3899360082208959, 0.31823471419278215, 0.5113745970412142, 0.19198034078993398, 0.17643176864140586, 0.19235417819151823, 0.19850727353969744, 0.18310175431153042, 0.17137033438092109, 0.17601437621913807, 0.17217718415133476, 0.18867132934731534, 0.08184594379826049, 0.06894641624544018, 0.08257960603682202, 0.07841479571355159, 0.07788049937820596, 0.08597670681568759, 0.07939632040485789, 0.06912896747419839, 0.068005345196823]}, "mutation_prompt": null}
{"id": "6bd2245d-c9c9-4fe1-9ca0-4a2fb84e210a", "solution": "import numpy as np\n\nclass ImprovedHybridPSO_DE:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def differential_evolution(current_pos, F=0.5, CR=0.9):\n            candidates = np.random.permutation(particles)\n            mutant = current_pos + F * (candidates[0] - candidates[1])\n            trial = np.where(np.random.rand(self.dim) < CR, mutant, current_pos)\n            trial = np.clip(trial, -5.0, 5.0)\n            \n            trial_cost = func(trial)\n            if trial_cost < func(current_pos):\n                return trial, trial_cost\n            return current_pos, func(current_pos)\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = differential_evolution(particles[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "ImprovedHybridPSO_DE", "description": "Improving Hybrid Particle Swarm Optimization with Differential Evolution for enhanced exploration and exploitation in optimization.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e648c5b-a7c4-4844-a9ae-363425ae0fd7", "metadata": {"aucs": [0.6170882718377632, 0.5771419778608107, 0.5667359911494645, 0.570344597062455, 0.5777157901234771, 0.5688648444278933, 0.5725154489894573, 0.6059650870352574, 0.5737552293787787, 0.22282932781195208, 0.20902371273724862, 0.25789932669245363, 0.23217662464006528, 0.25706863654566536, 0.24035753864329557, 0.1557857970707338, 0.25308479531165307, 0.24172402647537505, 0.12418013434277386, 0.12078802317079518, 0.1274509718385447, 0.11105508408787446, 0.10263481360912463, 0.13686841290773755, 0.13499818349595694, 0.13584789215027882, 0.13169515872715032, 0.09708099554124106, 0.09258289509271422, 0.06376155577906883, 0.09408377229049569, 0.07138077879287885, 0.05571973639118588, 0.10124453679227141, 0.08406541709428217, 0.08458703111372068, 0.9589099631939028, 0.8036898107943105, 0.814709136684566, 0.8745414465938594, 0.8709521964918059, 0.8565502586549157, 0.860725982986156, 0.862574463182755, 0.7896442860157721, 0.3300044420553283, 0.3143829915812688, 0.3459974195067179, 0.3408318017001848, 0.33630028646281906, 0.32462047968049723, 0.32747377575803593, 0.31683092368576493, 0.32263750126943735, 0.6129960957182521, 0.6565301202056021, 0.5909680999859876, 0.42224850546185677, 0.18489959768583497, 0.19863574187966593, 0.1706760617048474, 0.48692447360533364, 0.22650175429981678, 0.1616408256579911, 0.17761354971548715, 0.16132152983163905, 0.1876692903316195, 0.10964584571507019, 0.15435333021719966, 0.16082948370001537, 0.16008503048397726, 0.15592303095825333, 0.16141455127080406, 0.160421617357011, 0.3037622093718185, 0.12167595378499496, 0.17570242537930003, 0.1642048252313585, 0.13036445766512172, 0.15780528402180094, 0.1709515651337561, 0.00010051080724549077, 0.006279444692977809, 0.03738786277536843, 0.052170103499944664, 0.021149861591392982, 0.020675754446533356, 0.05164188061894659, 0.035574246025098955, 0.007156632966063614, 0.10267165335725947, 0.09301923275755308, 0.14070520668576358, 0.11449491090372899, 0.04318642860974575, 0.10540989736990236, 0.12036001383936057, 0.1281634895352105, 0.07926696850206372, 0.06471962580655377, 0.07591959823706407, 0.021619816430548222, 0.035713751448479325, 0.0635656139995886, 0.0519668254121769, 0.0562150396903619, 0.047090416191836626, 0.038131476018624544, 0.12531714545929684, 0.1460577823571535, 0.1096494769964298, 0.1819026711611248, 0.07900112324229047, 0.08828087541336704, 0.06805191085846496, 0.15519991227471397, 0.0712006306837033, 0.44767745615265253, 0.44154720929460345, 0.4323982039475972, 0.4755314276349515, 0.4296374784823991, 0.42969250483134436, 0.44539644666835143, 0.4203645951103471, 0.4579707601384161, 0.10174764005237025, 0.08703589845319382, 0.08357132628819308, 0.11288173503860122, 0.1307466125419221, 0.11612976996201474, 0.13835100545777257, 0.12469343029623903, 0.10958210933571044, 0.1653738734761211, 0.1263578789701918, 0.16747613871273004, 0.17221180099127653, 0.22715439498727608, 0.16497124901177507, 0.2529092418893555, 0.1611648448676657, 0.13037403497632272, 0.3123164629542605, 0.26484928259582075, 0.3027497172212035, 0.2553023427711094, 0.22380816265542336, 0.26560921458655773, 0.33450928828558313, 0.28557234562401146, 0.2854578007019746, 0.21260048195443648, 0.25583109285030914, 0.2095935503224161, 0.18448725123552612, 0.2004277626037675, 0.26894303336004444, 0.19165282998735433, 0.2006172118420031, 0.2460365678951838, 0.1934758960427274, 0.20894396171558194, 0.19400888467762767, 0.208717746601374, 0.19417194176100805, 0.19441784769906167, 0.18223274606898654, 0.21014570541581845, 0.21006127891532733, 0.1837102704433049, 0.18057559106062693, 0.18566312044651312, 0.16944909389440932, 0.18601628578555474, 0.18843172883406412, 0.17213222960796648, 0.1860508840128422, 0.19011122326591245, 0.17536713995704145, 0.17578694253716098, 0.1934611613989482, 0.7198153441800792, 0.1920731723452619, 0.6967026339041218, 0.6622964153631614, 0.6592536519775956, 0.40342054147837625, 0.48739376295401493, 0.14973931504450588, 0.4340015825312229, 0.4210026045820737, 0.24716602111179875, 0.20681162081790094, 0.3899360082208959, 0.31823471419278215, 0.5113745970412142, 0.19198034078993398, 0.17643176864140586, 0.19235417819151823, 0.19850727353969744, 0.18310175431153042, 0.17137033438092109, 0.17601437621913807, 0.17217718415133476, 0.18867132934731534, 0.08184594379826049, 0.06894641624544018, 0.08257960603682202, 0.07841479571355159, 0.07788049937820596, 0.08597670681568759, 0.07939632040485789, 0.06912896747419839, 0.068005345196823]}, "mutation_prompt": null}
{"id": "a318e2d6-a5be-4f29-950f-d1526b1fbe99", "solution": "import numpy as np\n\nclass ImprovedHybridPSO_DE:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def differential_evolution(current_pos, F=0.5, CR=0.9):\n            candidates = np.random.permutation(particles)\n            mutant = current_pos + F * (candidates[0] - candidates[1])\n            trial = np.where(np.random.rand(self.dim) < CR, mutant, current_pos)\n            trial = np.clip(trial, -5.0, 5.0)\n            \n            trial_cost = func(trial)\n            if trial_cost < func(current_pos):\n                return trial, trial_cost\n            return current_pos, func(current_pos)\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = differential_evolution(particles[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "ImprovedHybridPSO_DE", "description": "Improving Hybrid Particle Swarm Optimization with Differential Evolution for enhanced exploration and exploitation in optimization.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e648c5b-a7c4-4844-a9ae-363425ae0fd7", "metadata": {"aucs": [0.6170882718377632, 0.5771419778608107, 0.5667359911494645, 0.570344597062455, 0.5777157901234771, 0.5688648444278933, 0.5725154489894573, 0.6059650870352574, 0.5737552293787787, 0.22282932781195208, 0.20902371273724862, 0.25789932669245363, 0.23217662464006528, 0.25706863654566536, 0.24035753864329557, 0.1557857970707338, 0.25308479531165307, 0.24172402647537505, 0.12418013434277386, 0.12078802317079518, 0.1274509718385447, 0.11105508408787446, 0.10263481360912463, 0.13686841290773755, 0.13499818349595694, 0.13584789215027882, 0.13169515872715032, 0.09708099554124106, 0.09258289509271422, 0.06376155577906883, 0.09408377229049569, 0.07138077879287885, 0.05571973639118588, 0.10124453679227141, 0.08406541709428217, 0.08458703111372068, 0.9589099631939028, 0.8036898107943105, 0.814709136684566, 0.8745414465938594, 0.8709521964918059, 0.8565502586549157, 0.860725982986156, 0.862574463182755, 0.7896442860157721, 0.3300044420553283, 0.3143829915812688, 0.3459974195067179, 0.3408318017001848, 0.33630028646281906, 0.32462047968049723, 0.32747377575803593, 0.31683092368576493, 0.32263750126943735, 0.6129960957182521, 0.6565301202056021, 0.5909680999859876, 0.42224850546185677, 0.18489959768583497, 0.19863574187966593, 0.1706760617048474, 0.48692447360533364, 0.22650175429981678, 0.1616408256579911, 0.17761354971548715, 0.16132152983163905, 0.1876692903316195, 0.10964584571507019, 0.15435333021719966, 0.16082948370001537, 0.16008503048397726, 0.15592303095825333, 0.16141455127080406, 0.160421617357011, 0.3037622093718185, 0.12167595378499496, 0.17570242537930003, 0.1642048252313585, 0.13036445766512172, 0.15780528402180094, 0.1709515651337561, 0.00010051080724549077, 0.006279444692977809, 0.03738786277536843, 0.052170103499944664, 0.021149861591392982, 0.020675754446533356, 0.05164188061894659, 0.035574246025098955, 0.007156632966063614, 0.10267165335725947, 0.09301923275755308, 0.14070520668576358, 0.11449491090372899, 0.04318642860974575, 0.10540989736990236, 0.12036001383936057, 0.1281634895352105, 0.07926696850206372, 0.06471962580655377, 0.07591959823706407, 0.021619816430548222, 0.035713751448479325, 0.0635656139995886, 0.0519668254121769, 0.0562150396903619, 0.047090416191836626, 0.038131476018624544, 0.12531714545929684, 0.1460577823571535, 0.1096494769964298, 0.1819026711611248, 0.07900112324229047, 0.08828087541336704, 0.06805191085846496, 0.15519991227471397, 0.0712006306837033, 0.44767745615265253, 0.44154720929460345, 0.4323982039475972, 0.4755314276349515, 0.4296374784823991, 0.42969250483134436, 0.44539644666835143, 0.4203645951103471, 0.4579707601384161, 0.10174764005237025, 0.08703589845319382, 0.08357132628819308, 0.11288173503860122, 0.1307466125419221, 0.11612976996201474, 0.13835100545777257, 0.12469343029623903, 0.10958210933571044, 0.1653738734761211, 0.1263578789701918, 0.16747613871273004, 0.17221180099127653, 0.22715439498727608, 0.16497124901177507, 0.2529092418893555, 0.1611648448676657, 0.13037403497632272, 0.3123164629542605, 0.26484928259582075, 0.3027497172212035, 0.2553023427711094, 0.22380816265542336, 0.26560921458655773, 0.33450928828558313, 0.28557234562401146, 0.2854578007019746, 0.21260048195443648, 0.25583109285030914, 0.2095935503224161, 0.18448725123552612, 0.2004277626037675, 0.26894303336004444, 0.19165282998735433, 0.2006172118420031, 0.2460365678951838, 0.1934758960427274, 0.20894396171558194, 0.19400888467762767, 0.208717746601374, 0.19417194176100805, 0.19441784769906167, 0.18223274606898654, 0.21014570541581845, 0.21006127891532733, 0.1837102704433049, 0.18057559106062693, 0.18566312044651312, 0.16944909389440932, 0.18601628578555474, 0.18843172883406412, 0.17213222960796648, 0.1860508840128422, 0.19011122326591245, 0.17536713995704145, 0.17578694253716098, 0.1934611613989482, 0.7198153441800792, 0.1920731723452619, 0.6967026339041218, 0.6622964153631614, 0.6592536519775956, 0.40342054147837625, 0.48739376295401493, 0.14973931504450588, 0.4340015825312229, 0.4210026045820737, 0.24716602111179875, 0.20681162081790094, 0.3899360082208959, 0.31823471419278215, 0.5113745970412142, 0.19198034078993398, 0.17643176864140586, 0.19235417819151823, 0.19850727353969744, 0.18310175431153042, 0.17137033438092109, 0.17601437621913807, 0.17217718415133476, 0.18867132934731534, 0.08184594379826049, 0.06894641624544018, 0.08257960603682202, 0.07841479571355159, 0.07788049937820596, 0.08597670681568759, 0.07939632040485789, 0.06912896747419839, 0.068005345196823]}, "mutation_prompt": null}
{"id": "9f09f369-abfb-4781-86e7-979e77174cb9", "solution": "import numpy as np\n\nclass ImprovedHybridPSO_DE_Refined:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def differential_evolution(current_pos, F=0.5, CR=0.9):\n            candidates = np.random.permutation(particles)\n            mutant = current_pos + F * (candidates[0] - candidates[1])\n            trial = np.where(np.random.rand(self.dim) < CR, mutant, current_pos)\n            trial = np.clip(trial, -5.0, 5.0)\n            \n            trial_cost = func(trial)\n            if trial_cost < func(current_pos):\n                return trial, trial_cost\n            return current_pos, func(current_pos)\n\n        def local_search(position, epsilon=0.01):\n            new_position = position + epsilon * np.random.randn(self.dim)\n            new_position = np.clip(new_position, -5.0, 5.0)\n            return new_position\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = differential_evolution(particles[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n                # Integrate local search\n                new_particle = local_search(particles[i])\n                new_cost = func(new_particle)\n                if new_cost < pbest_costs[i]:\n                    particles[i] = new_particle\n                    pbest_costs[i] = new_cost\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "ImprovedHybridPSO_DE_Refined", "description": "Improving Hybrid Particle Swarm Optimization with Differential Evolution and Local Search for enhanced exploration and exploitation in optimization.", "configspace": "", "generation": 93, "fitness": 0.2263138077781583, "feedback": "The algorithm ImprovedHybridPSO_DE_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.18.", "error": "", "parent_id": "8e648c5b-a7c4-4844-a9ae-363425ae0fd7", "metadata": {"aucs": [0.510431062481244, 0.5105207928874382, 0.535846611509968, 0.49326662883670525, 0.49837473890370243, 0.5398469332470002, 0.5209428530589955, 0.45895680314878307, 0.48986780382513495, 0.1404379240105762, 0.13852922488059938, 0.17603293637245532, 0.14724563263167878, 0.13509094498413177, 0.1024613560079608, 0.13490050632788841, 0.12220255601548691, 0.14835687955079624, 0.12066887901695678, 0.12807187704253864, 0.10349298024975762, 0.11452428082274013, 0.09479951845818069, 0.12261409783381172, 0.07691313331549243, 0.08039868043130283, 0.08900990802407305, 0.08042697884361982, 0.07665567144006857, 0.08910902117058872, 0.10063301957082726, 0.08491780888658484, 0.08913830455581573, 0.08568579267225851, 0.0969245383246583, 0.09192910107336771, 0.7499880841277393, 0.7675933841570153, 0.7288447963619639, 0.7355278116515742, 0.8198182403445933, 0.8342634849163666, 0.7566526214318967, 0.7855050892875001, 0.7525880242367455, 0.28548442530904317, 0.25833853601913814, 0.25967197875274517, 0.28541596471956154, 0.2705021772184163, 0.3164990291846157, 0.25570497474131737, 0.2522008014017457, 0.2927028151370863, 0.5787777016716078, 0.5773436012655121, 0.19270577906567177, 0.20053137792898823, 0.6043818611096963, 0.20034127236947208, 0.1649818625494257, 0.21427136473624286, 0.31314013382346007, 0.1923769447790642, 0.18241058761561113, 0.15622041262037256, 0.15986052201317746, 0.19807188348181148, 0.14483025065472188, 0.28263856664083276, 0.19846725900188233, 0.1625371545715827, 0.16959690545996076, 0.10243747341808251, 0.18019959496262328, 0.1552448506080486, 0.18800332144037224, 0.12340298438741537, 0.19681948966456464, 0.14820580598214694, 0.12792668210384905, 0.045115263348732726, 0.0462053641058221, 0.03403982901586, 0.0012273274947245394, 0.06159510881781116, 0.04094869276566626, 0.020025046265197854, 0.026110325578449167, 0.01310785121077429, 0.10798705527745045, 0.12286621928778463, 0.1154371119575569, 0.10156426217723824, 0.08633949309997857, 0.12492588053346754, 0.1244599807140705, 0.10454433819136444, 0.14718021094366285, 0.04307927441061887, 0.02521611514265365, 0.008208117513573088, 0.03554388182732959, 0.01549576995096924, 0.055922148941951355, 0.02152788217975199, 0.031236846858103906, 0.018858002520161565, 0.09998709012126472, 0.1392789106535436, 0.10281746535329916, 0.06730064171789696, 0.060701972267722004, 0.08891296361045586, 0.09376877143980145, 0.12978819410175457, 0.06501835486332763, 0.4315216896127885, 0.41841257450834135, 0.43688743447479794, 0.40502166262511063, 0.42756354670110464, 0.4203045919828098, 0.45224246798774215, 0.4057490789576108, 0.4300153529896422, 0.08553373319743318, 0.10862605522254976, 0.10754971736314634, 0.1001088662557319, 0.11262200014785795, 0.11954833507148344, 0.10901872703658078, 0.10806882774504267, 0.08315068492578226, 0.14570739934277643, 0.147746751015026, 0.1618980136608541, 0.1519347321810004, 0.21422246457547345, 0.13992205412310776, 0.14713913615480945, 0.14719188204354017, 0.20137803524894848, 0.29379126359777374, 0.2734487222508317, 0.2328362566694615, 0.2995341230877626, 0.303136919351913, 0.29782874887301725, 0.22308285016251062, 0.29698053554035764, 0.28202130582606366, 0.1926459351528499, 0.21476503162059912, 0.1958180310256511, 0.16479756954767766, 0.18330353209683692, 0.21432787145543442, 0.17832894291936807, 0.2058674928516414, 0.1919561090678812, 0.20599748795066442, 0.19673877069216494, 0.21316487803964124, 0.19252490085681917, 0.20173221188352752, 0.22144921928067174, 0.2221714614360354, 0.190831168474227, 0.20316065576959108, 0.20196696591648033, 0.2258394525871842, 0.16760325244504404, 0.18942700026796389, 0.18936774672518975, 0.17809083819520943, 0.18170648058440797, 0.17324055926012916, 0.18013082444025041, 0.1709595359141327, 0.18108075285092473, 0.5498444818055982, 0.17228650230603249, 0.6363149923891356, 0.5898866632118287, 0.5828867405791895, 0.48875219252010804, 0.5579395763382702, 0.5160908598962959, 0.3549783455921427, 0.45355227496787487, 0.44775538876004206, 0.1861665814450083, 0.1568260915115054, 0.36155449075813495, 0.39646254412633564, 0.2007303210688166, 0.1811909445998785, 0.18665023579751427, 0.2029818316946611, 0.1797442408833223, 0.20184220703407119, 0.18836301197863659, 0.18000173971958133, 0.17001236420668742, 0.17870204286879576, 0.07482676959709822, 0.07790090576964925, 0.07831075999678727, 0.07622158686268243, 0.09221126489278253, 0.08030662227834162, 0.08390696319220858, 0.0860537725504823, 0.08319052146546635]}, "mutation_prompt": null}
{"id": "1266fd29-b009-46e9-ac73-d7e23ee1a6a6", "solution": "import numpy as np\n\nclass ImprovedHybridPSO_DE:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def differential_evolution(current_pos, F=0.5, CR=0.9):\n            candidates = np.random.permutation(particles)\n            mutant = current_pos + F * (candidates[0] - candidates[1])\n            trial = np.where(np.random.rand(self.dim) < CR, mutant, current_pos)\n            trial = np.clip(trial, -5.0, 5.0)\n            \n            trial_cost = func(trial)\n            if trial_cost < func(current_pos):\n                return trial, trial_cost\n            return current_pos, func(current_pos)\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = differential_evolution(particles[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "ImprovedHybridPSO_DE", "description": "Improving Hybrid Particle Swarm Optimization with Differential Evolution for enhanced exploration and exploitation in optimization.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e648c5b-a7c4-4844-a9ae-363425ae0fd7", "metadata": {"aucs": [0.6170882718377632, 0.5771419778608107, 0.5667359911494645, 0.570344597062455, 0.5777157901234771, 0.5688648444278933, 0.5725154489894573, 0.6059650870352574, 0.5737552293787787, 0.22282932781195208, 0.20902371273724862, 0.25789932669245363, 0.23217662464006528, 0.25706863654566536, 0.24035753864329557, 0.1557857970707338, 0.25308479531165307, 0.24172402647537505, 0.12418013434277386, 0.12078802317079518, 0.1274509718385447, 0.11105508408787446, 0.10263481360912463, 0.13686841290773755, 0.13499818349595694, 0.13584789215027882, 0.13169515872715032, 0.09708099554124106, 0.09258289509271422, 0.06376155577906883, 0.09408377229049569, 0.07138077879287885, 0.05571973639118588, 0.10124453679227141, 0.08406541709428217, 0.08458703111372068, 0.9589099631939028, 0.8036898107943105, 0.814709136684566, 0.8745414465938594, 0.8709521964918059, 0.8565502586549157, 0.860725982986156, 0.862574463182755, 0.7896442860157721, 0.3300044420553283, 0.3143829915812688, 0.3459974195067179, 0.3408318017001848, 0.33630028646281906, 0.32462047968049723, 0.32747377575803593, 0.31683092368576493, 0.32263750126943735, 0.6129960957182521, 0.6565301202056021, 0.5909680999859876, 0.42224850546185677, 0.18489959768583497, 0.19863574187966593, 0.1706760617048474, 0.48692447360533364, 0.22650175429981678, 0.1616408256579911, 0.17761354971548715, 0.16132152983163905, 0.1876692903316195, 0.10964584571507019, 0.15435333021719966, 0.16082948370001537, 0.16008503048397726, 0.15592303095825333, 0.16141455127080406, 0.160421617357011, 0.3037622093718185, 0.12167595378499496, 0.17570242537930003, 0.1642048252313585, 0.13036445766512172, 0.15780528402180094, 0.1709515651337561, 0.00010051080724549077, 0.006279444692977809, 0.03738786277536843, 0.052170103499944664, 0.021149861591392982, 0.020675754446533356, 0.05164188061894659, 0.035574246025098955, 0.007156632966063614, 0.10267165335725947, 0.09301923275755308, 0.14070520668576358, 0.11449491090372899, 0.04318642860974575, 0.10540989736990236, 0.12036001383936057, 0.1281634895352105, 0.07926696850206372, 0.06471962580655377, 0.07591959823706407, 0.021619816430548222, 0.035713751448479325, 0.0635656139995886, 0.0519668254121769, 0.0562150396903619, 0.047090416191836626, 0.038131476018624544, 0.12531714545929684, 0.1460577823571535, 0.1096494769964298, 0.1819026711611248, 0.07900112324229047, 0.08828087541336704, 0.06805191085846496, 0.15519991227471397, 0.0712006306837033, 0.44767745615265253, 0.44154720929460345, 0.4323982039475972, 0.4755314276349515, 0.4296374784823991, 0.42969250483134436, 0.44539644666835143, 0.4203645951103471, 0.4579707601384161, 0.10174764005237025, 0.08703589845319382, 0.08357132628819308, 0.11288173503860122, 0.1307466125419221, 0.11612976996201474, 0.13835100545777257, 0.12469343029623903, 0.10958210933571044, 0.1653738734761211, 0.1263578789701918, 0.16747613871273004, 0.17221180099127653, 0.22715439498727608, 0.16497124901177507, 0.2529092418893555, 0.1611648448676657, 0.13037403497632272, 0.3123164629542605, 0.26484928259582075, 0.3027497172212035, 0.2553023427711094, 0.22380816265542336, 0.26560921458655773, 0.33450928828558313, 0.28557234562401146, 0.2854578007019746, 0.21260048195443648, 0.25583109285030914, 0.2095935503224161, 0.18448725123552612, 0.2004277626037675, 0.26894303336004444, 0.19165282998735433, 0.2006172118420031, 0.2460365678951838, 0.1934758960427274, 0.20894396171558194, 0.19400888467762767, 0.208717746601374, 0.19417194176100805, 0.19441784769906167, 0.18223274606898654, 0.21014570541581845, 0.21006127891532733, 0.1837102704433049, 0.18057559106062693, 0.18566312044651312, 0.16944909389440932, 0.18601628578555474, 0.18843172883406412, 0.17213222960796648, 0.1860508840128422, 0.19011122326591245, 0.17536713995704145, 0.17578694253716098, 0.1934611613989482, 0.7198153441800792, 0.1920731723452619, 0.6967026339041218, 0.6622964153631614, 0.6592536519775956, 0.40342054147837625, 0.48739376295401493, 0.14973931504450588, 0.4340015825312229, 0.4210026045820737, 0.24716602111179875, 0.20681162081790094, 0.3899360082208959, 0.31823471419278215, 0.5113745970412142, 0.19198034078993398, 0.17643176864140586, 0.19235417819151823, 0.19850727353969744, 0.18310175431153042, 0.17137033438092109, 0.17601437621913807, 0.17217718415133476, 0.18867132934731534, 0.08184594379826049, 0.06894641624544018, 0.08257960603682202, 0.07841479571355159, 0.07788049937820596, 0.08597670681568759, 0.07939632040485789, 0.06912896747419839, 0.068005345196823]}, "mutation_prompt": null}
{"id": "e62742ca-d27d-47b3-899a-f86e46349f2a", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def dynamic_mutation(current_pos, F=0.5, CR=0.9):\n            F = np.random.normal(0.5, 0.1)  # Dynamic F\n            CR = np.random.normal(0.9, 0.1)  # Dynamic CR\n            candidates = np.random.permutation(particles)\n            mutant = current_pos + F * (candidates[0] - candidates[1])\n            trial = np.where(np.random.rand(self.dim) < CR, mutant, current_pos)\n            trial = np.clip(trial, -5.0, 5.0)\n            \n            trial_cost = func(trial)\n            if trial_cost < func(current_pos):\n                return trial, trial_cost\n            return current_pos, func(current_pos)\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = dynamic_mutation(particles[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSO_DE", "description": "Enhancing the diversity maintenance in the population by introducing a dynamic mutation strategy to improve exploration capability.", "configspace": "", "generation": 95, "fitness": 0.25229234881908874, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.20.", "error": "", "parent_id": "8e648c5b-a7c4-4844-a9ae-363425ae0fd7", "metadata": {"aucs": [0.5881877999698539, 0.5801215432004143, 0.5829990729520631, 0.6265539993374045, 0.5648418477117125, 0.5606763404626076, 0.5857831086671373, 0.5766059926636405, 0.6095634320557821, 0.2101458090897198, 0.25107738676444225, 0.21977971465050672, 0.2460284966511398, 0.26529486055152807, 0.21110491695777867, 0.2168240638840574, 0.2214321070213634, 0.23198844781578265, 0.10608372006107802, 0.11535104758353687, 0.10596892224919552, 0.13439075814527934, 0.13434215451567233, 0.09696054129105525, 0.11737863427552186, 0.11407206699935146, 0.1373663827777818, 0.0917267068586638, 0.12156296640677033, 0.09559755765318567, 0.08896816004608865, 0.1077219697509767, 0.10392041269594776, 0.09731372917014192, 0.10307705995648853, 0.08865742371683594, 0.8716011571674793, 0.8428950477199593, 0.8106981384333867, 0.7552139127234028, 0.9039305308590423, 0.7937003178998602, 0.8097999766579815, 0.933404597695211, 0.8318094300768435, 0.31991799530880327, 0.31644629213955333, 0.3325097935972642, 0.32852497816673365, 0.31843814905609613, 0.29733104288549517, 0.32587652556698, 0.31030627763168916, 0.3125607675813523, 0.6483055476807784, 0.21428806401289013, 0.46916243915971445, 0.20305681002881903, 0.38492051064921595, 0.19319967904782398, 0.6744009273553465, 0.6753993664243574, 0.22334450201874334, 0.11725034325498651, 0.15742405895064981, 0.14743716008951357, 0.1643277608087894, 0.16540839132854013, 0.1655792512704729, 0.18265779507796798, 0.16882046334069833, 0.17666862911397296, 0.2042198844995613, 0.1513859046144289, 0.15152970250316466, 0.15153261158714681, 0.18510067945545128, 0.165428028804393, 0.19734143106115332, 0.19608254208147424, 0.18831872776513348, 0.008345117082505737, 0.018455171338600085, 0.05178362396111025, 0.031143671580552312, 0.003697067814655952, 0.017774163494937656, 0.0816706714236991, 0.005557643377005261, 0.05028934546149466, 0.09938868198509787, 0.09222085405579383, 0.10776834886314568, 0.1204749047868332, 0.07174918162982158, 0.08431873377273369, 0.09650004377262178, 0.12670758550106342, 0.10094992626484967, 0.09413193247615859, 0.04964044121810207, 0.06426092369781944, 0.025425375046380205, 0.037934126826849046, 0.028855644241369327, 0.03544213271795471, 0.05284401636054026, 0.06282446528898977, 0.11787494927867903, 0.13648031137176697, 0.05228281714467542, 0.133566582953338, 0.11514849457202492, 0.1608821197046998, 0.07116429353917197, 0.07465265470480431, 0.07145432665828666, 0.41577893991192205, 0.4367261285172511, 0.4396797461030514, 0.42638634256277796, 0.4303228429143211, 0.43114166171499213, 0.45867342572189684, 0.4412553620472013, 0.4480875853430262, 0.09725357645403598, 0.08456314158342282, 0.10314401093793335, 0.09794685897054001, 0.1307175483653027, 0.09384268950017616, 0.11846745236681622, 0.09445760024955308, 0.09309508800213351, 0.1781266558986686, 0.23481176579898955, 0.1996618169585358, 0.1417832702704478, 0.23881926598896552, 0.17255322741075818, 0.18314462703412893, 0.1681418855809632, 0.1662616794322065, 0.3039689935775415, 0.2540871980103572, 0.3173016753056225, 0.29906125896875246, 0.28581101931992625, 0.3124296023728088, 0.3142001506408707, 0.3113380122125986, 0.31190038149002786, 0.2235294563595368, 0.20810932659918446, 0.20328261056330132, 0.19274159880604091, 0.2368869284337054, 0.22797732254770953, 0.2158878870871337, 0.2588343951564046, 0.19133358497333952, 0.203529448679464, 0.2012150907326855, 0.19351109906047426, 0.21049279749930327, 0.21076627859524866, 0.19468739449665307, 0.1954076135600884, 0.21817684620900846, 0.19363226091896524, 0.18946340462586864, 0.1842914538979583, 0.1836486412366437, 0.18408804178382054, 0.19529415178147302, 0.1798557347754497, 0.19241920874833252, 0.23280131544900273, 0.19236849759197316, 0.7167728691880924, 0.6619141444788708, 0.19169644309487333, 0.7216274056075762, 0.19229535416870747, 0.7068084776533914, 0.5976655156588704, 0.6186378848189901, 0.6333233078583466, 0.6063835010387718, 0.35131443769889825, 0.4584323132449748, 0.47579791409388494, 0.3144699472841149, 0.42330155900567235, 0.17612409193948164, 0.19772624953436024, 0.3400608122339791, 0.17093249013743772, 0.17824127801892553, 0.17866186383724814, 0.17620961429518933, 0.17822175565133858, 0.18634612704620246, 0.17837386494457674, 0.1728977579876977, 0.19117511185144132, 0.07741951616964704, 0.08768433958760002, 0.08035948307591512, 0.07250425827523177, 0.08652198618682527, 0.10011861001088562, 0.09540578365784058, 0.0666801362794458, 0.08318061991960912]}, "mutation_prompt": null}
{"id": "7d38b467-0183-45cb-b43f-79b72cc9bb46", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE_Refined:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def dynamic_mutation(current_pos, F=0.5, CR=0.9):\n            F = np.random.normal(0.5, 0.1)  # Dynamic F\n            CR = np.random.normal(0.9, 0.1)  # Dynamic CR\n            candidates = np.random.permutation(particles)\n            mutant = current_pos + F * (candidates[0] - candidates[1])\n            trial = np.where(np.random.rand(self.dim) < CR, mutant, current_pos)\n            trial = np.clip(trial, -5.0, 5.0)\n\n            trial_cost = func(trial)\n            if trial_cost < func(current_pos):\n                return trial, trial_cost\n            return current_pos, func(current_pos)\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = dynamic_mutation(particles[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSO_DE_Refined", "description": "Enhancing the optimization process by incorporating a novel adaptive inertia weight mechanism to balance exploration and exploitation effectively.", "configspace": "", "generation": 96, "fitness": 0.25229234881908874, "feedback": "The algorithm EnhancedHybridPSO_DE_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.20.", "error": "", "parent_id": "e62742ca-d27d-47b3-899a-f86e46349f2a", "metadata": {"aucs": [0.5881877999698539, 0.5801215432004143, 0.5829990729520631, 0.6265539993374045, 0.5648418477117125, 0.5606763404626076, 0.5857831086671373, 0.5766059926636405, 0.6095634320557821, 0.2101458090897198, 0.25107738676444225, 0.21977971465050672, 0.2460284966511398, 0.26529486055152807, 0.21110491695777867, 0.2168240638840574, 0.2214321070213634, 0.23198844781578265, 0.10608372006107802, 0.11535104758353687, 0.10596892224919552, 0.13439075814527934, 0.13434215451567233, 0.09696054129105525, 0.11737863427552186, 0.11407206699935146, 0.1373663827777818, 0.0917267068586638, 0.12156296640677033, 0.09559755765318567, 0.08896816004608865, 0.1077219697509767, 0.10392041269594776, 0.09731372917014192, 0.10307705995648853, 0.08865742371683594, 0.8716011571674793, 0.8428950477199593, 0.8106981384333867, 0.7552139127234028, 0.9039305308590423, 0.7937003178998602, 0.8097999766579815, 0.933404597695211, 0.8318094300768435, 0.31991799530880327, 0.31644629213955333, 0.3325097935972642, 0.32852497816673365, 0.31843814905609613, 0.29733104288549517, 0.32587652556698, 0.31030627763168916, 0.3125607675813523, 0.6483055476807784, 0.21428806401289013, 0.46916243915971445, 0.20305681002881903, 0.38492051064921595, 0.19319967904782398, 0.6744009273553465, 0.6753993664243574, 0.22334450201874334, 0.11725034325498651, 0.15742405895064981, 0.14743716008951357, 0.1643277608087894, 0.16540839132854013, 0.1655792512704729, 0.18265779507796798, 0.16882046334069833, 0.17666862911397296, 0.2042198844995613, 0.1513859046144289, 0.15152970250316466, 0.15153261158714681, 0.18510067945545128, 0.165428028804393, 0.19734143106115332, 0.19608254208147424, 0.18831872776513348, 0.008345117082505737, 0.018455171338600085, 0.05178362396111025, 0.031143671580552312, 0.003697067814655952, 0.017774163494937656, 0.0816706714236991, 0.005557643377005261, 0.05028934546149466, 0.09938868198509787, 0.09222085405579383, 0.10776834886314568, 0.1204749047868332, 0.07174918162982158, 0.08431873377273369, 0.09650004377262178, 0.12670758550106342, 0.10094992626484967, 0.09413193247615859, 0.04964044121810207, 0.06426092369781944, 0.025425375046380205, 0.037934126826849046, 0.028855644241369327, 0.03544213271795471, 0.05284401636054026, 0.06282446528898977, 0.11787494927867903, 0.13648031137176697, 0.05228281714467542, 0.133566582953338, 0.11514849457202492, 0.1608821197046998, 0.07116429353917197, 0.07465265470480431, 0.07145432665828666, 0.41577893991192205, 0.4367261285172511, 0.4396797461030514, 0.42638634256277796, 0.4303228429143211, 0.43114166171499213, 0.45867342572189684, 0.4412553620472013, 0.4480875853430262, 0.09725357645403598, 0.08456314158342282, 0.10314401093793335, 0.09794685897054001, 0.1307175483653027, 0.09384268950017616, 0.11846745236681622, 0.09445760024955308, 0.09309508800213351, 0.1781266558986686, 0.23481176579898955, 0.1996618169585358, 0.1417832702704478, 0.23881926598896552, 0.17255322741075818, 0.18314462703412893, 0.1681418855809632, 0.1662616794322065, 0.3039689935775415, 0.2540871980103572, 0.3173016753056225, 0.29906125896875246, 0.28581101931992625, 0.3124296023728088, 0.3142001506408707, 0.3113380122125986, 0.31190038149002786, 0.2235294563595368, 0.20810932659918446, 0.20328261056330132, 0.19274159880604091, 0.2368869284337054, 0.22797732254770953, 0.2158878870871337, 0.2588343951564046, 0.19133358497333952, 0.203529448679464, 0.2012150907326855, 0.19351109906047426, 0.21049279749930327, 0.21076627859524866, 0.19468739449665307, 0.1954076135600884, 0.21817684620900846, 0.19363226091896524, 0.18946340462586864, 0.1842914538979583, 0.1836486412366437, 0.18408804178382054, 0.19529415178147302, 0.1798557347754497, 0.19241920874833252, 0.23280131544900273, 0.19236849759197316, 0.7167728691880924, 0.6619141444788708, 0.19169644309487333, 0.7216274056075762, 0.19229535416870747, 0.7068084776533914, 0.5976655156588704, 0.6186378848189901, 0.6333233078583466, 0.6063835010387718, 0.35131443769889825, 0.4584323132449748, 0.47579791409388494, 0.3144699472841149, 0.42330155900567235, 0.17612409193948164, 0.19772624953436024, 0.3400608122339791, 0.17093249013743772, 0.17824127801892553, 0.17866186383724814, 0.17620961429518933, 0.17822175565133858, 0.18634612704620246, 0.17837386494457674, 0.1728977579876977, 0.19117511185144132, 0.07741951616964704, 0.08768433958760002, 0.08035948307591512, 0.07250425827523177, 0.08652198618682527, 0.10011861001088562, 0.09540578365784058, 0.0666801362794458, 0.08318061991960912]}, "mutation_prompt": null}
{"id": "1c167f91-12c2-494e-aef2-e7aa9fdcb2d3", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE_Neighborhood:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100, neighborhood_size=3):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n        self.neighborhood_size = neighborhood_size\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def dynamic_mutation(current_pos, F=0.5, CR=0.9):\n            F = np.random.normal(0.5, 0.1)  # Dynamic F\n            CR = np.random.normal(0.9, 0.1)  # Dynamic CR\n            candidates = np.random.permutation(particles)[:self.neighborhood_size]\n            mutant = current_pos + F * (candidates[0] - candidates[1])\n            trial = np.where(np.random.rand(self.dim) < CR, mutant, current_pos)\n            trial = np.clip(trial, -5.0, 5.0)\n            \n            trial_cost = func(trial)\n            if trial_cost < func(current_pos):\n                return trial, trial_cost\n            return current_pos, func(current_pos)\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = dynamic_mutation(particles[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSO_DE_Neighborhood", "description": "Introduce a neighborhood search mechanism to enhance local exploration and exploit promising regions efficiently.", "configspace": "", "generation": 97, "fitness": 0.25229234881908874, "feedback": "The algorithm EnhancedHybridPSO_DE_Neighborhood got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.20.", "error": "", "parent_id": "e62742ca-d27d-47b3-899a-f86e46349f2a", "metadata": {"aucs": [0.5881877999698539, 0.5801215432004143, 0.5829990729520631, 0.6265539993374045, 0.5648418477117125, 0.5606763404626076, 0.5857831086671373, 0.5766059926636405, 0.6095634320557821, 0.2101458090897198, 0.25107738676444225, 0.21977971465050672, 0.2460284966511398, 0.26529486055152807, 0.21110491695777867, 0.2168240638840574, 0.2214321070213634, 0.23198844781578265, 0.10608372006107802, 0.11535104758353687, 0.10596892224919552, 0.13439075814527934, 0.13434215451567233, 0.09696054129105525, 0.11737863427552186, 0.11407206699935146, 0.1373663827777818, 0.0917267068586638, 0.12156296640677033, 0.09559755765318567, 0.08896816004608865, 0.1077219697509767, 0.10392041269594776, 0.09731372917014192, 0.10307705995648853, 0.08865742371683594, 0.8716011571674793, 0.8428950477199593, 0.8106981384333867, 0.7552139127234028, 0.9039305308590423, 0.7937003178998602, 0.8097999766579815, 0.933404597695211, 0.8318094300768435, 0.31991799530880327, 0.31644629213955333, 0.3325097935972642, 0.32852497816673365, 0.31843814905609613, 0.29733104288549517, 0.32587652556698, 0.31030627763168916, 0.3125607675813523, 0.6483055476807784, 0.21428806401289013, 0.46916243915971445, 0.20305681002881903, 0.38492051064921595, 0.19319967904782398, 0.6744009273553465, 0.6753993664243574, 0.22334450201874334, 0.11725034325498651, 0.15742405895064981, 0.14743716008951357, 0.1643277608087894, 0.16540839132854013, 0.1655792512704729, 0.18265779507796798, 0.16882046334069833, 0.17666862911397296, 0.2042198844995613, 0.1513859046144289, 0.15152970250316466, 0.15153261158714681, 0.18510067945545128, 0.165428028804393, 0.19734143106115332, 0.19608254208147424, 0.18831872776513348, 0.008345117082505737, 0.018455171338600085, 0.05178362396111025, 0.031143671580552312, 0.003697067814655952, 0.017774163494937656, 0.0816706714236991, 0.005557643377005261, 0.05028934546149466, 0.09938868198509787, 0.09222085405579383, 0.10776834886314568, 0.1204749047868332, 0.07174918162982158, 0.08431873377273369, 0.09650004377262178, 0.12670758550106342, 0.10094992626484967, 0.09413193247615859, 0.04964044121810207, 0.06426092369781944, 0.025425375046380205, 0.037934126826849046, 0.028855644241369327, 0.03544213271795471, 0.05284401636054026, 0.06282446528898977, 0.11787494927867903, 0.13648031137176697, 0.05228281714467542, 0.133566582953338, 0.11514849457202492, 0.1608821197046998, 0.07116429353917197, 0.07465265470480431, 0.07145432665828666, 0.41577893991192205, 0.4367261285172511, 0.4396797461030514, 0.42638634256277796, 0.4303228429143211, 0.43114166171499213, 0.45867342572189684, 0.4412553620472013, 0.4480875853430262, 0.09725357645403598, 0.08456314158342282, 0.10314401093793335, 0.09794685897054001, 0.1307175483653027, 0.09384268950017616, 0.11846745236681622, 0.09445760024955308, 0.09309508800213351, 0.1781266558986686, 0.23481176579898955, 0.1996618169585358, 0.1417832702704478, 0.23881926598896552, 0.17255322741075818, 0.18314462703412893, 0.1681418855809632, 0.1662616794322065, 0.3039689935775415, 0.2540871980103572, 0.3173016753056225, 0.29906125896875246, 0.28581101931992625, 0.3124296023728088, 0.3142001506408707, 0.3113380122125986, 0.31190038149002786, 0.2235294563595368, 0.20810932659918446, 0.20328261056330132, 0.19274159880604091, 0.2368869284337054, 0.22797732254770953, 0.2158878870871337, 0.2588343951564046, 0.19133358497333952, 0.203529448679464, 0.2012150907326855, 0.19351109906047426, 0.21049279749930327, 0.21076627859524866, 0.19468739449665307, 0.1954076135600884, 0.21817684620900846, 0.19363226091896524, 0.18946340462586864, 0.1842914538979583, 0.1836486412366437, 0.18408804178382054, 0.19529415178147302, 0.1798557347754497, 0.19241920874833252, 0.23280131544900273, 0.19236849759197316, 0.7167728691880924, 0.6619141444788708, 0.19169644309487333, 0.7216274056075762, 0.19229535416870747, 0.7068084776533914, 0.5976655156588704, 0.6186378848189901, 0.6333233078583466, 0.6063835010387718, 0.35131443769889825, 0.4584323132449748, 0.47579791409388494, 0.3144699472841149, 0.42330155900567235, 0.17612409193948164, 0.19772624953436024, 0.3400608122339791, 0.17093249013743772, 0.17824127801892553, 0.17866186383724814, 0.17620961429518933, 0.17822175565133858, 0.18634612704620246, 0.17837386494457674, 0.1728977579876977, 0.19117511185144132, 0.07741951616964704, 0.08768433958760002, 0.08035948307591512, 0.07250425827523177, 0.08652198618682527, 0.10011861001088562, 0.09540578365784058, 0.0666801362794458, 0.08318061991960912]}, "mutation_prompt": null}
{"id": "e6d617c3-22af-44e8-8533-647b969f6e21", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE_Refined:\n    def __init__(self, budget, dim, num_particles=25, max_iter=120):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.3, w_max=0.95, c1=1.7, c2=1.8):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def dynamic_mutation(current_pos, F=0.5, CR=0.9):\n            F = np.random.normal(0.5, 0.1)  # Dynamic F\n            CR = np.random.normal(0.9, 0.1)  # Dynamic CR\n            candidates = np.random.permutation(particles)\n            mutant = current_pos + F * (candidates[0] - candidates[1])\n            trial = np.where(np.random.rand(self.dim) < CR, mutant, current_pos)\n            trial = np.clip(trial, -5.0, 5.0)\n            \n            trial_cost = func(trial)\n            if trial_cost < func(current_pos):\n                return trial, trial_cost\n            return current_pos, func(current_pos)\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = dynamic_mutation(particles[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSO_DE_Refined", "description": "Improving the exploration capability by dynamically adjusting mutation rates based on particle performance.", "configspace": "", "generation": 98, "fitness": 0.2512027251852151, "feedback": "The algorithm EnhancedHybridPSO_DE_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.20.", "error": "", "parent_id": "e62742ca-d27d-47b3-899a-f86e46349f2a", "metadata": {"aucs": [0.6515706251666809, 0.6228943163817298, 0.6511572918760979, 0.626338284904219, 0.6160856405922002, 0.5986996269923586, 0.6206827926760087, 0.6343131977357808, 0.5815388379566717, 0.2697736792291682, 0.3155152174872451, 0.23793905797115877, 0.28890381948819055, 0.30625207677586597, 0.3077375332938531, 0.2682986044947284, 0.26520270646572175, 0.2057836837553545, 0.15388203114702226, 0.10193758626444704, 0.10367611078675254, 0.11550438814008834, 0.12106530144750727, 0.09504123555592947, 0.1358535147353619, 0.12416555607363355, 0.12163117044098326, 0.08817403236517096, 0.0675514073828326, 0.0773911321818006, 0.09639663403480137, 0.05328308843393115, 0.07932587088617515, 0.08221472546292519, 0.0960879773427874, 0.10053230181531603, 0.8824982971285824, 0.9275300731586003, 0.8213028636691386, 0.8192186313792174, 0.8381422901002675, 0.8326108487575481, 0.8909864994701588, 0.7801433094143891, 0.8456043897823533, 0.34802053211006245, 0.3360381172845446, 0.3582330972542406, 0.36842887137464186, 0.3303455285380623, 0.35135855589087606, 0.35630014941427834, 0.32467443865945156, 0.3752163016717889, 0.6524804264472799, 0.582826522159976, 0.1660445099155533, 0.2637998708510363, 0.26879211459654906, 0.6707960926892276, 0.2228059901711248, 0.22742174977803786, 0.6874568206816289, 0.1419588288991035, 0.16058488608894694, 0.121645375664172, 0.17842053854528095, 0.10813240538384539, 0.17648908095572802, 0.18880150630418024, 0.1211817243042822, 0.1841070541859764, 0.1758189463458768, 0.18945814723314736, 0.19971626636453443, 0.18896460585961627, 0.18121549566817607, 0.21860838183188536, 0.19610853226122793, 0.11940834097777009, 0.2107688090369938, 0.04444132121934141, 0.057374295791372765, 0.01500769033970506, 0.07073384985173614, 0.050387765369417914, 0.012046279750526856, 0.0842134382470675, 9.999999999998899e-05, 0.04955774263260937, 0.10029672733382244, 0.060279107773570595, 0.09134874149149785, 0.10929042542683565, 0.05751672871304181, 0.10833857010953529, 0.11094078230204707, 0.11408868789139559, 0.11120753934557981, 0.09038149322508104, 0.0863213065533519, 0.08668351921963746, 0.043535988135502524, 0.048355763737985225, 0.0481800446293581, 0.04401800840756409, 0.10173935743376128, 0.05757166421784876, 0.12970357987739367, 0.1816559736242107, 0.08236384159717813, 0.11994093011720564, 0.06635181629944165, 0.0861810746673285, 0.07219113613323991, 0.12072837002949888, 0.07300434882901208, 0.4568482849607318, 0.4714866618206216, 0.4735534409832697, 0.4335434754232145, 0.4374249274885734, 0.4855055426430558, 0.4634308808665468, 0.4595501247223003, 0.4326834744922622, 0.1030883916104256, 0.12356806543953791, 0.09628435582661854, 0.12973862926198487, 0.11185756651312972, 0.1337445126557001, 0.11385092559706522, 0.09579410119739673, 0.1268410161127438, 0.17541882422063648, 0.26300997478048305, 0.16270075858001765, 0.1902422290380309, 0.1935852031100389, 0.18772750084548384, 0.26064936901441027, 0.12454622114504477, 0.16079688600235953, 0.3098206859912087, 0.31403491232135716, 0.30624321755047335, 0.3725441711008213, 0.20626116760836533, 0.25818593103427456, 0.3252457624649856, 0.36043993850983336, 0.32371734217576664, 0.24883922753443732, 0.22929726582774046, 0.1728469897113586, 0.2689283403197936, 0.20443878065639576, 0.23566503594670762, 0.26668882783529557, 0.17952685152124725, 0.24589077209966792, 0.21255947127937647, 0.20302804202330815, 0.2494890971638989, 0.2189455926286189, 0.20436342262948826, 0.1871968218108876, 0.19996386070116468, 0.1894788660177844, 0.20634592676212837, 0.1875895640800438, 0.17272490963915044, 0.17679741843997876, 0.17612362887838895, 0.1704826735972318, 0.18959361452855272, 0.18626581478264093, 0.2050571697328486, 0.1983806125050951, 0.17880322262555814, 0.18111849704045335, 0.18204368222691059, 0.7401684098373037, 0.6881824704342135, 0.6236090485867756, 0.16709930491735359, 0.24062833656468796, 0.2048587569987208, 0.47411177566401475, 0.3252736969474249, 0.462119549324678, 0.3861908138715383, 0.48473758967474767, 0.17019724605849296, 0.317027105727253, 0.193374219969224, 0.4085595074625842, 0.1727443117260956, 0.18266282763751773, 0.1758519176121105, 0.19156624597434035, 0.1779128499382555, 0.1841069043734057, 0.18384618374376427, 0.17701060043446182, 0.17379332065837805, 0.08219652460127924, 0.08261158374030764, 0.08286225487383492, 0.08037040412335206, 0.08400429571066448, 0.06903994275054426, 0.07931743238335587, 0.08028988436616324, 0.08208006334113194]}, "mutation_prompt": null}
{"id": "42312b5c-818d-49d1-b707-6333a22e724c", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE_refined:\n    def __init__(self, budget, dim, num_particles=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w_min=0.4, w_max=0.9, c1=1.5, c2=2.0):\n            w = w_min + (w_max - w_min) * (self.max_iter - iter) / self.max_iter\n            r1, r2 = np.random.rand(2, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -0.2, 0.2)\n\n        def update_position(position, velocity):\n            new_position = position + velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def dynamic_mutation(current_pos, F=0.5, CR=0.9):\n            F = np.random.normal(0.5, 0.1)  # Dynamic F based on function evaluations\n            CR = np.random.normal(0.9, 0.1)  # Dynamic CR based on function evaluations\n            candidates = np.random.permutation(particles)\n            mutant = current_pos + F * (candidates[0] - candidates[1])\n            trial = np.where(np.random.rand(self.dim) < CR, mutant, current_pos)\n            trial = np.clip(trial, -5.0, 5.0)\n            \n            trial_cost = func(trial)\n            if trial_cost < func(current_pos):\n                return trial, trial_cost\n            return current_pos, func(current_pos)\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = particles.copy()\n        pbest_costs = np.array([func(p) for p in particles])\n        gbest = pbest[pbest_costs.argmin()]\n        gbest_cost = pbest_costs.min()\n\n        for iter in range(self.max_iter):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], velocities[i], pbest[i], gbest)\n                particles[i] = update_position(particles[i], velocities[i])\n                particles[i], pbest_costs[i] = dynamic_mutation(particles[i])\n\n                if pbest_costs[i] < func(pbest[i]):\n                    pbest[i] = particles[i]\n\n            if pbest_costs.min() < gbest_cost:\n                gbest = pbest[pbest_costs.argmin()]\n                gbest_cost = pbest_costs.min()\n\n        return gbest", "name": "EnhancedHybridPSO_DE_refined", "description": "Enhancing exploration by incorporating a dynamic mutation probability based on function evaluations for improved convergence.", "configspace": "", "generation": 99, "fitness": 0.25229234881908874, "feedback": "The algorithm EnhancedHybridPSO_DE_refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.20.", "error": "", "parent_id": "e62742ca-d27d-47b3-899a-f86e46349f2a", "metadata": {"aucs": [0.5881877999698539, 0.5801215432004143, 0.5829990729520631, 0.6265539993374045, 0.5648418477117125, 0.5606763404626076, 0.5857831086671373, 0.5766059926636405, 0.6095634320557821, 0.2101458090897198, 0.25107738676444225, 0.21977971465050672, 0.2460284966511398, 0.26529486055152807, 0.21110491695777867, 0.2168240638840574, 0.2214321070213634, 0.23198844781578265, 0.10608372006107802, 0.11535104758353687, 0.10596892224919552, 0.13439075814527934, 0.13434215451567233, 0.09696054129105525, 0.11737863427552186, 0.11407206699935146, 0.1373663827777818, 0.0917267068586638, 0.12156296640677033, 0.09559755765318567, 0.08896816004608865, 0.1077219697509767, 0.10392041269594776, 0.09731372917014192, 0.10307705995648853, 0.08865742371683594, 0.8716011571674793, 0.8428950477199593, 0.8106981384333867, 0.7552139127234028, 0.9039305308590423, 0.7937003178998602, 0.8097999766579815, 0.933404597695211, 0.8318094300768435, 0.31991799530880327, 0.31644629213955333, 0.3325097935972642, 0.32852497816673365, 0.31843814905609613, 0.29733104288549517, 0.32587652556698, 0.31030627763168916, 0.3125607675813523, 0.6483055476807784, 0.21428806401289013, 0.46916243915971445, 0.20305681002881903, 0.38492051064921595, 0.19319967904782398, 0.6744009273553465, 0.6753993664243574, 0.22334450201874334, 0.11725034325498651, 0.15742405895064981, 0.14743716008951357, 0.1643277608087894, 0.16540839132854013, 0.1655792512704729, 0.18265779507796798, 0.16882046334069833, 0.17666862911397296, 0.2042198844995613, 0.1513859046144289, 0.15152970250316466, 0.15153261158714681, 0.18510067945545128, 0.165428028804393, 0.19734143106115332, 0.19608254208147424, 0.18831872776513348, 0.008345117082505737, 0.018455171338600085, 0.05178362396111025, 0.031143671580552312, 0.003697067814655952, 0.017774163494937656, 0.0816706714236991, 0.005557643377005261, 0.05028934546149466, 0.09938868198509787, 0.09222085405579383, 0.10776834886314568, 0.1204749047868332, 0.07174918162982158, 0.08431873377273369, 0.09650004377262178, 0.12670758550106342, 0.10094992626484967, 0.09413193247615859, 0.04964044121810207, 0.06426092369781944, 0.025425375046380205, 0.037934126826849046, 0.028855644241369327, 0.03544213271795471, 0.05284401636054026, 0.06282446528898977, 0.11787494927867903, 0.13648031137176697, 0.05228281714467542, 0.133566582953338, 0.11514849457202492, 0.1608821197046998, 0.07116429353917197, 0.07465265470480431, 0.07145432665828666, 0.41577893991192205, 0.4367261285172511, 0.4396797461030514, 0.42638634256277796, 0.4303228429143211, 0.43114166171499213, 0.45867342572189684, 0.4412553620472013, 0.4480875853430262, 0.09725357645403598, 0.08456314158342282, 0.10314401093793335, 0.09794685897054001, 0.1307175483653027, 0.09384268950017616, 0.11846745236681622, 0.09445760024955308, 0.09309508800213351, 0.1781266558986686, 0.23481176579898955, 0.1996618169585358, 0.1417832702704478, 0.23881926598896552, 0.17255322741075818, 0.18314462703412893, 0.1681418855809632, 0.1662616794322065, 0.3039689935775415, 0.2540871980103572, 0.3173016753056225, 0.29906125896875246, 0.28581101931992625, 0.3124296023728088, 0.3142001506408707, 0.3113380122125986, 0.31190038149002786, 0.2235294563595368, 0.20810932659918446, 0.20328261056330132, 0.19274159880604091, 0.2368869284337054, 0.22797732254770953, 0.2158878870871337, 0.2588343951564046, 0.19133358497333952, 0.203529448679464, 0.2012150907326855, 0.19351109906047426, 0.21049279749930327, 0.21076627859524866, 0.19468739449665307, 0.1954076135600884, 0.21817684620900846, 0.19363226091896524, 0.18946340462586864, 0.1842914538979583, 0.1836486412366437, 0.18408804178382054, 0.19529415178147302, 0.1798557347754497, 0.19241920874833252, 0.23280131544900273, 0.19236849759197316, 0.7167728691880924, 0.6619141444788708, 0.19169644309487333, 0.7216274056075762, 0.19229535416870747, 0.7068084776533914, 0.5976655156588704, 0.6186378848189901, 0.6333233078583466, 0.6063835010387718, 0.35131443769889825, 0.4584323132449748, 0.47579791409388494, 0.3144699472841149, 0.42330155900567235, 0.17612409193948164, 0.19772624953436024, 0.3400608122339791, 0.17093249013743772, 0.17824127801892553, 0.17866186383724814, 0.17620961429518933, 0.17822175565133858, 0.18634612704620246, 0.17837386494457674, 0.1728977579876977, 0.19117511185144132, 0.07741951616964704, 0.08768433958760002, 0.08035948307591512, 0.07250425827523177, 0.08652198618682527, 0.10011861001088562, 0.09540578365784058, 0.0666801362794458, 0.08318061991960912]}, "mutation_prompt": null}
