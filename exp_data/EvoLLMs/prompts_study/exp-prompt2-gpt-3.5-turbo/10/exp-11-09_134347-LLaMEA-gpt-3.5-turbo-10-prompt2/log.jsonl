{"id": "309615fc-50cf-466b-840a-c0ed2669e1de", "solution": "import numpy as np\n\nclass ABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                new_solution = selected_solutions[i] + phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "ABCOptimizer", "description": "Artificial Bee Colony (ABC) algorithm based on the foraging behavior of honey bees in a colony.", "configspace": "", "generation": 0, "fitness": 0.20934892435240368, "feedback": "The algorithm ABCOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": null, "metadata": {"aucs": [0.6232958703604452, 0.6355508858006558, 0.6472722583316813, 0.6467456005443902, 0.6432378671377416, 0.6489293273760264, 0.6423245684713824, 0.6420775850189984, 0.6739225678290397, 0.2975705927852077, 0.29715042406145153, 0.3560959648378954, 0.3236163751033271, 0.29097311034593776, 0.31976496020458545, 0.2956839091251191, 0.3363898379199539, 0.3452888822259229, 0.09913897681353534, 0.09083513116779907, 0.10341828503528883, 0.08828244100899374, 0.08967366581843494, 0.09441143321233725, 0.0863931340587667, 0.09942139010876583, 0.09241681361608645, 0.07140836172486376, 0.0731885442695357, 0.07610944856280144, 0.07784095621252107, 0.07732690129822406, 0.08481143006125536, 0.08760397485551308, 0.09446636237154049, 0.0897849397194872, 0.9495545222736935, 0.9576662129694062, 0.9366515094287942, 0.9306479386164392, 0.9483927508047947, 0.9589056865990168, 0.9296006719691503, 0.9531654253666482, 0.9264435121389292, 0.2163248635192343, 0.19741396045624937, 0.2361678536720193, 0.21191381912813556, 0.21552954980100825, 0.22272821522008146, 0.22726838856300158, 0.22536632492429443, 0.2227430632223768, 0.20290155057197234, 0.2082906214297332, 0.24473708499879354, 0.2508326295324861, 0.22958505246286876, 0.23119601208971385, 0.20795662474179877, 0.22635459468212138, 0.24787958390509957, 0.14873942174877297, 0.1266187324923137, 0.1290192702923023, 0.1398322722341927, 0.12918275665991386, 0.12386144490883921, 0.14649540864476007, 0.14951591022689814, 0.13237338633100604, 0.13873619772794354, 0.11465881888581331, 0.1329136035628442, 0.16255613706633143, 0.13475228317994892, 0.15079857857083867, 0.14166199051659423, 0.12119799563002598, 0.14920329034694113, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06737802368962964, 0.0702430600083448, 0.04585426013359084, 0.057383177940233177, 0.06235676610663721, 0.045727261380662076, 0.07703769000262328, 0.04693565054062232, 0.06303630628266277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05906294105451049, 0.05991319105388082, 0.07142230265450511, 0.08840432363200978, 0.06287870920943894, 0.08564755251886558, 0.08079716374253365, 0.08238025947042393, 0.08578266067409879, 0.42701779813540175, 0.4110330493578299, 0.41148682194833763, 0.40605944264779825, 0.43018943873112425, 0.4136096551563906, 0.42216765707158443, 0.4027706545562528, 0.4274335911567917, 0.07829243342365766, 0.07863101440512432, 0.08433495844922778, 0.08120256884736232, 0.0863468885496328, 0.07996157336219312, 0.07319570391249142, 0.07819213272627257, 0.0826339785655058, 0.1569876673583822, 0.16113353589020007, 0.14853435185587982, 0.13291256110380545, 0.16692089546186073, 0.14069200514405367, 0.1616831558412285, 0.12809146159911122, 0.14948548834153774, 0.22319971371033076, 0.22252291884630848, 0.23220330411730028, 0.21280376115466704, 0.21193580473354745, 0.22245693626224794, 0.22507036722909857, 0.22919133027593508, 0.23261868866202595, 0.16083125721521407, 0.1478478701721837, 0.1465774811266548, 0.15553820536391338, 0.1602129403245952, 0.13429676329327866, 0.16506256725747592, 0.16413583705985568, 0.17380432954311398, 0.17806451330448148, 0.18415460748615375, 0.18648508945188091, 0.17541990071675662, 0.18474619235312972, 0.19671693887312425, 0.20287424357799344, 0.1806952914532972, 0.18833882526763368, 0.18472886723057724, 0.18826379560156814, 0.20708416652917105, 0.18368028256091273, 0.1728929072430092, 0.17817395097177957, 0.17745630079038344, 0.18004823923850877, 0.17846668499278895, 0.19654324080057783, 0.24001242912082776, 0.2150952206961746, 0.26897767542851525, 0.18994729229635854, 0.28711984237374033, 0.24558574152920987, 0.21514191243740888, 0.19073924775875717, 0.24133723008459906, 0.22026192091455865, 0.19483441308703797, 0.21075937025490343, 0.2183201987708373, 0.21086968218783875, 0.17501302995531187, 0.19301779593176738, 0.21782831049879525, 0.1954034035416634, 0.18809947291480444, 0.17736793178127264, 0.18157968401216174, 0.17058942312391867, 0.1794643846395183, 0.17327206595629108, 0.18082668417543013, 0.18101128078589668, 0.06423549622574898, 0.0750288459499685, 0.067372625251239, 0.06696389746673681, 0.07690423238743549, 0.07265945572757426, 0.07376617457155021, 0.07668570871181224, 0.07233138157409935]}, "mutation_prompt": null}
{"id": "f93676ec-5c26-4612-92dc-90888e5c343f", "solution": "import numpy as np\n\nclass ABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                new_solution = selected_solutions[i] + phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "ABCOptimizer", "description": "Artificial Bee Colony (ABC) algorithm based on the foraging behavior of honey bees in a colony.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "309615fc-50cf-466b-840a-c0ed2669e1de", "metadata": {"aucs": [0.6232958703604452, 0.6355508858006558, 0.6472722583316813, 0.6467456005443902, 0.6432378671377416, 0.6489293273760264, 0.6423245684713824, 0.6420775850189984, 0.6739225678290397, 0.2975705927852077, 0.29715042406145153, 0.3560959648378954, 0.3236163751033271, 0.29097311034593776, 0.31976496020458545, 0.2956839091251191, 0.3363898379199539, 0.3452888822259229, 0.09913897681353534, 0.09083513116779907, 0.10341828503528883, 0.08828244100899374, 0.08967366581843494, 0.09441143321233725, 0.0863931340587667, 0.09942139010876583, 0.09241681361608645, 0.07140836172486376, 0.0731885442695357, 0.07610944856280144, 0.07784095621252107, 0.07732690129822406, 0.08481143006125536, 0.08760397485551308, 0.09446636237154049, 0.0897849397194872, 0.9495545222736935, 0.9576662129694062, 0.9366515094287942, 0.9306479386164392, 0.9483927508047947, 0.9589056865990168, 0.9296006719691503, 0.9531654253666482, 0.9264435121389292, 0.2163248635192343, 0.19741396045624937, 0.2361678536720193, 0.21191381912813556, 0.21552954980100825, 0.22272821522008146, 0.22726838856300158, 0.22536632492429443, 0.2227430632223768, 0.20290155057197234, 0.2082906214297332, 0.24473708499879354, 0.2508326295324861, 0.22958505246286876, 0.23119601208971385, 0.20795662474179877, 0.22635459468212138, 0.24787958390509957, 0.14873942174877297, 0.1266187324923137, 0.1290192702923023, 0.1398322722341927, 0.12918275665991386, 0.12386144490883921, 0.14649540864476007, 0.14951591022689814, 0.13237338633100604, 0.13873619772794354, 0.11465881888581331, 0.1329136035628442, 0.16255613706633143, 0.13475228317994892, 0.15079857857083867, 0.14166199051659423, 0.12119799563002598, 0.14920329034694113, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06737802368962964, 0.0702430600083448, 0.04585426013359084, 0.057383177940233177, 0.06235676610663721, 0.045727261380662076, 0.07703769000262328, 0.04693565054062232, 0.06303630628266277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05906294105451049, 0.05991319105388082, 0.07142230265450511, 0.08840432363200978, 0.06287870920943894, 0.08564755251886558, 0.08079716374253365, 0.08238025947042393, 0.08578266067409879, 0.42701779813540175, 0.4110330493578299, 0.41148682194833763, 0.40605944264779825, 0.43018943873112425, 0.4136096551563906, 0.42216765707158443, 0.4027706545562528, 0.4274335911567917, 0.07829243342365766, 0.07863101440512432, 0.08433495844922778, 0.08120256884736232, 0.0863468885496328, 0.07996157336219312, 0.07319570391249142, 0.07819213272627257, 0.0826339785655058, 0.1569876673583822, 0.16113353589020007, 0.14853435185587982, 0.13291256110380545, 0.16692089546186073, 0.14069200514405367, 0.1616831558412285, 0.12809146159911122, 0.14948548834153774, 0.22319971371033076, 0.22252291884630848, 0.23220330411730028, 0.21280376115466704, 0.21193580473354745, 0.22245693626224794, 0.22507036722909857, 0.22919133027593508, 0.23261868866202595, 0.16083125721521407, 0.1478478701721837, 0.1465774811266548, 0.15553820536391338, 0.1602129403245952, 0.13429676329327866, 0.16506256725747592, 0.16413583705985568, 0.17380432954311398, 0.17806451330448148, 0.18415460748615375, 0.18648508945188091, 0.17541990071675662, 0.18474619235312972, 0.19671693887312425, 0.20287424357799344, 0.1806952914532972, 0.18833882526763368, 0.18472886723057724, 0.18826379560156814, 0.20708416652917105, 0.18368028256091273, 0.1728929072430092, 0.17817395097177957, 0.17745630079038344, 0.18004823923850877, 0.17846668499278895, 0.19654324080057783, 0.24001242912082776, 0.2150952206961746, 0.26897767542851525, 0.18994729229635854, 0.28711984237374033, 0.24558574152920987, 0.21514191243740888, 0.19073924775875717, 0.24133723008459906, 0.22026192091455865, 0.19483441308703797, 0.21075937025490343, 0.2183201987708373, 0.21086968218783875, 0.17501302995531187, 0.19301779593176738, 0.21782831049879525, 0.1954034035416634, 0.18809947291480444, 0.17736793178127264, 0.18157968401216174, 0.17058942312391867, 0.1794643846395183, 0.17327206595629108, 0.18082668417543013, 0.18101128078589668, 0.06423549622574898, 0.0750288459499685, 0.067372625251239, 0.06696389746673681, 0.07690423238743549, 0.07265945572757426, 0.07376617457155021, 0.07668570871181224, 0.07233138157409935]}, "mutation_prompt": null}
{"id": "042f6078-0329-46b0-94da-4a2416265e01", "solution": "import numpy as np\n\nclass ABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                new_solution = selected_solutions[i] + phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "ABCOptimizer", "description": "Artificial Bee Colony (ABC) algorithm based on the foraging behavior of honey bees in a colony.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "309615fc-50cf-466b-840a-c0ed2669e1de", "metadata": {"aucs": [0.6232958703604452, 0.6355508858006558, 0.6472722583316813, 0.6467456005443902, 0.6432378671377416, 0.6489293273760264, 0.6423245684713824, 0.6420775850189984, 0.6739225678290397, 0.2975705927852077, 0.29715042406145153, 0.3560959648378954, 0.3236163751033271, 0.29097311034593776, 0.31976496020458545, 0.2956839091251191, 0.3363898379199539, 0.3452888822259229, 0.09913897681353534, 0.09083513116779907, 0.10341828503528883, 0.08828244100899374, 0.08967366581843494, 0.09441143321233725, 0.0863931340587667, 0.09942139010876583, 0.09241681361608645, 0.07140836172486376, 0.0731885442695357, 0.07610944856280144, 0.07784095621252107, 0.07732690129822406, 0.08481143006125536, 0.08760397485551308, 0.09446636237154049, 0.0897849397194872, 0.9495545222736935, 0.9576662129694062, 0.9366515094287942, 0.9306479386164392, 0.9483927508047947, 0.9589056865990168, 0.9296006719691503, 0.9531654253666482, 0.9264435121389292, 0.2163248635192343, 0.19741396045624937, 0.2361678536720193, 0.21191381912813556, 0.21552954980100825, 0.22272821522008146, 0.22726838856300158, 0.22536632492429443, 0.2227430632223768, 0.20290155057197234, 0.2082906214297332, 0.24473708499879354, 0.2508326295324861, 0.22958505246286876, 0.23119601208971385, 0.20795662474179877, 0.22635459468212138, 0.24787958390509957, 0.14873942174877297, 0.1266187324923137, 0.1290192702923023, 0.1398322722341927, 0.12918275665991386, 0.12386144490883921, 0.14649540864476007, 0.14951591022689814, 0.13237338633100604, 0.13873619772794354, 0.11465881888581331, 0.1329136035628442, 0.16255613706633143, 0.13475228317994892, 0.15079857857083867, 0.14166199051659423, 0.12119799563002598, 0.14920329034694113, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06737802368962964, 0.0702430600083448, 0.04585426013359084, 0.057383177940233177, 0.06235676610663721, 0.045727261380662076, 0.07703769000262328, 0.04693565054062232, 0.06303630628266277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05906294105451049, 0.05991319105388082, 0.07142230265450511, 0.08840432363200978, 0.06287870920943894, 0.08564755251886558, 0.08079716374253365, 0.08238025947042393, 0.08578266067409879, 0.42701779813540175, 0.4110330493578299, 0.41148682194833763, 0.40605944264779825, 0.43018943873112425, 0.4136096551563906, 0.42216765707158443, 0.4027706545562528, 0.4274335911567917, 0.07829243342365766, 0.07863101440512432, 0.08433495844922778, 0.08120256884736232, 0.0863468885496328, 0.07996157336219312, 0.07319570391249142, 0.07819213272627257, 0.0826339785655058, 0.1569876673583822, 0.16113353589020007, 0.14853435185587982, 0.13291256110380545, 0.16692089546186073, 0.14069200514405367, 0.1616831558412285, 0.12809146159911122, 0.14948548834153774, 0.22319971371033076, 0.22252291884630848, 0.23220330411730028, 0.21280376115466704, 0.21193580473354745, 0.22245693626224794, 0.22507036722909857, 0.22919133027593508, 0.23261868866202595, 0.16083125721521407, 0.1478478701721837, 0.1465774811266548, 0.15553820536391338, 0.1602129403245952, 0.13429676329327866, 0.16506256725747592, 0.16413583705985568, 0.17380432954311398, 0.17806451330448148, 0.18415460748615375, 0.18648508945188091, 0.17541990071675662, 0.18474619235312972, 0.19671693887312425, 0.20287424357799344, 0.1806952914532972, 0.18833882526763368, 0.18472886723057724, 0.18826379560156814, 0.20708416652917105, 0.18368028256091273, 0.1728929072430092, 0.17817395097177957, 0.17745630079038344, 0.18004823923850877, 0.17846668499278895, 0.19654324080057783, 0.24001242912082776, 0.2150952206961746, 0.26897767542851525, 0.18994729229635854, 0.28711984237374033, 0.24558574152920987, 0.21514191243740888, 0.19073924775875717, 0.24133723008459906, 0.22026192091455865, 0.19483441308703797, 0.21075937025490343, 0.2183201987708373, 0.21086968218783875, 0.17501302995531187, 0.19301779593176738, 0.21782831049879525, 0.1954034035416634, 0.18809947291480444, 0.17736793178127264, 0.18157968401216174, 0.17058942312391867, 0.1794643846395183, 0.17327206595629108, 0.18082668417543013, 0.18101128078589668, 0.06423549622574898, 0.0750288459499685, 0.067372625251239, 0.06696389746673681, 0.07690423238743549, 0.07265945572757426, 0.07376617457155021, 0.07668570871181224, 0.07233138157409935]}, "mutation_prompt": null}
{"id": "2af4233c-c783-4452-9a86-facb0f326888", "solution": "import numpy as np\n\nclass ABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                new_solution = selected_solutions[i] + phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "ABCOptimizer", "description": "Artificial Bee Colony (ABC) algorithm based on the foraging behavior of honey bees in a colony.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "309615fc-50cf-466b-840a-c0ed2669e1de", "metadata": {"aucs": [0.6232958703604452, 0.6355508858006558, 0.6472722583316813, 0.6467456005443902, 0.6432378671377416, 0.6489293273760264, 0.6423245684713824, 0.6420775850189984, 0.6739225678290397, 0.2975705927852077, 0.29715042406145153, 0.3560959648378954, 0.3236163751033271, 0.29097311034593776, 0.31976496020458545, 0.2956839091251191, 0.3363898379199539, 0.3452888822259229, 0.09913897681353534, 0.09083513116779907, 0.10341828503528883, 0.08828244100899374, 0.08967366581843494, 0.09441143321233725, 0.0863931340587667, 0.09942139010876583, 0.09241681361608645, 0.07140836172486376, 0.0731885442695357, 0.07610944856280144, 0.07784095621252107, 0.07732690129822406, 0.08481143006125536, 0.08760397485551308, 0.09446636237154049, 0.0897849397194872, 0.9495545222736935, 0.9576662129694062, 0.9366515094287942, 0.9306479386164392, 0.9483927508047947, 0.9589056865990168, 0.9296006719691503, 0.9531654253666482, 0.9264435121389292, 0.2163248635192343, 0.19741396045624937, 0.2361678536720193, 0.21191381912813556, 0.21552954980100825, 0.22272821522008146, 0.22726838856300158, 0.22536632492429443, 0.2227430632223768, 0.20290155057197234, 0.2082906214297332, 0.24473708499879354, 0.2508326295324861, 0.22958505246286876, 0.23119601208971385, 0.20795662474179877, 0.22635459468212138, 0.24787958390509957, 0.14873942174877297, 0.1266187324923137, 0.1290192702923023, 0.1398322722341927, 0.12918275665991386, 0.12386144490883921, 0.14649540864476007, 0.14951591022689814, 0.13237338633100604, 0.13873619772794354, 0.11465881888581331, 0.1329136035628442, 0.16255613706633143, 0.13475228317994892, 0.15079857857083867, 0.14166199051659423, 0.12119799563002598, 0.14920329034694113, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06737802368962964, 0.0702430600083448, 0.04585426013359084, 0.057383177940233177, 0.06235676610663721, 0.045727261380662076, 0.07703769000262328, 0.04693565054062232, 0.06303630628266277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05906294105451049, 0.05991319105388082, 0.07142230265450511, 0.08840432363200978, 0.06287870920943894, 0.08564755251886558, 0.08079716374253365, 0.08238025947042393, 0.08578266067409879, 0.42701779813540175, 0.4110330493578299, 0.41148682194833763, 0.40605944264779825, 0.43018943873112425, 0.4136096551563906, 0.42216765707158443, 0.4027706545562528, 0.4274335911567917, 0.07829243342365766, 0.07863101440512432, 0.08433495844922778, 0.08120256884736232, 0.0863468885496328, 0.07996157336219312, 0.07319570391249142, 0.07819213272627257, 0.0826339785655058, 0.1569876673583822, 0.16113353589020007, 0.14853435185587982, 0.13291256110380545, 0.16692089546186073, 0.14069200514405367, 0.1616831558412285, 0.12809146159911122, 0.14948548834153774, 0.22319971371033076, 0.22252291884630848, 0.23220330411730028, 0.21280376115466704, 0.21193580473354745, 0.22245693626224794, 0.22507036722909857, 0.22919133027593508, 0.23261868866202595, 0.16083125721521407, 0.1478478701721837, 0.1465774811266548, 0.15553820536391338, 0.1602129403245952, 0.13429676329327866, 0.16506256725747592, 0.16413583705985568, 0.17380432954311398, 0.17806451330448148, 0.18415460748615375, 0.18648508945188091, 0.17541990071675662, 0.18474619235312972, 0.19671693887312425, 0.20287424357799344, 0.1806952914532972, 0.18833882526763368, 0.18472886723057724, 0.18826379560156814, 0.20708416652917105, 0.18368028256091273, 0.1728929072430092, 0.17817395097177957, 0.17745630079038344, 0.18004823923850877, 0.17846668499278895, 0.19654324080057783, 0.24001242912082776, 0.2150952206961746, 0.26897767542851525, 0.18994729229635854, 0.28711984237374033, 0.24558574152920987, 0.21514191243740888, 0.19073924775875717, 0.24133723008459906, 0.22026192091455865, 0.19483441308703797, 0.21075937025490343, 0.2183201987708373, 0.21086968218783875, 0.17501302995531187, 0.19301779593176738, 0.21782831049879525, 0.1954034035416634, 0.18809947291480444, 0.17736793178127264, 0.18157968401216174, 0.17058942312391867, 0.1794643846395183, 0.17327206595629108, 0.18082668417543013, 0.18101128078589668, 0.06423549622574898, 0.0750288459499685, 0.067372625251239, 0.06696389746673681, 0.07690423238743549, 0.07265945572757426, 0.07376617457155021, 0.07668570871181224, 0.07233138157409935]}, "mutation_prompt": null}
{"id": "6780d487-e73a-4038-b9e4-3737c5eac8db", "solution": "import numpy as np\n\nclass ABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                new_solution = selected_solutions[i] + phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "ABCOptimizer", "description": "Artificial Bee Colony (ABC) algorithm based on the foraging behavior of honey bees in a colony.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "309615fc-50cf-466b-840a-c0ed2669e1de", "metadata": {"aucs": [0.6232958703604452, 0.6355508858006558, 0.6472722583316813, 0.6467456005443902, 0.6432378671377416, 0.6489293273760264, 0.6423245684713824, 0.6420775850189984, 0.6739225678290397, 0.2975705927852077, 0.29715042406145153, 0.3560959648378954, 0.3236163751033271, 0.29097311034593776, 0.31976496020458545, 0.2956839091251191, 0.3363898379199539, 0.3452888822259229, 0.09913897681353534, 0.09083513116779907, 0.10341828503528883, 0.08828244100899374, 0.08967366581843494, 0.09441143321233725, 0.0863931340587667, 0.09942139010876583, 0.09241681361608645, 0.07140836172486376, 0.0731885442695357, 0.07610944856280144, 0.07784095621252107, 0.07732690129822406, 0.08481143006125536, 0.08760397485551308, 0.09446636237154049, 0.0897849397194872, 0.9495545222736935, 0.9576662129694062, 0.9366515094287942, 0.9306479386164392, 0.9483927508047947, 0.9589056865990168, 0.9296006719691503, 0.9531654253666482, 0.9264435121389292, 0.2163248635192343, 0.19741396045624937, 0.2361678536720193, 0.21191381912813556, 0.21552954980100825, 0.22272821522008146, 0.22726838856300158, 0.22536632492429443, 0.2227430632223768, 0.20290155057197234, 0.2082906214297332, 0.24473708499879354, 0.2508326295324861, 0.22958505246286876, 0.23119601208971385, 0.20795662474179877, 0.22635459468212138, 0.24787958390509957, 0.14873942174877297, 0.1266187324923137, 0.1290192702923023, 0.1398322722341927, 0.12918275665991386, 0.12386144490883921, 0.14649540864476007, 0.14951591022689814, 0.13237338633100604, 0.13873619772794354, 0.11465881888581331, 0.1329136035628442, 0.16255613706633143, 0.13475228317994892, 0.15079857857083867, 0.14166199051659423, 0.12119799563002598, 0.14920329034694113, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06737802368962964, 0.0702430600083448, 0.04585426013359084, 0.057383177940233177, 0.06235676610663721, 0.045727261380662076, 0.07703769000262328, 0.04693565054062232, 0.06303630628266277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05906294105451049, 0.05991319105388082, 0.07142230265450511, 0.08840432363200978, 0.06287870920943894, 0.08564755251886558, 0.08079716374253365, 0.08238025947042393, 0.08578266067409879, 0.42701779813540175, 0.4110330493578299, 0.41148682194833763, 0.40605944264779825, 0.43018943873112425, 0.4136096551563906, 0.42216765707158443, 0.4027706545562528, 0.4274335911567917, 0.07829243342365766, 0.07863101440512432, 0.08433495844922778, 0.08120256884736232, 0.0863468885496328, 0.07996157336219312, 0.07319570391249142, 0.07819213272627257, 0.0826339785655058, 0.1569876673583822, 0.16113353589020007, 0.14853435185587982, 0.13291256110380545, 0.16692089546186073, 0.14069200514405367, 0.1616831558412285, 0.12809146159911122, 0.14948548834153774, 0.22319971371033076, 0.22252291884630848, 0.23220330411730028, 0.21280376115466704, 0.21193580473354745, 0.22245693626224794, 0.22507036722909857, 0.22919133027593508, 0.23261868866202595, 0.16083125721521407, 0.1478478701721837, 0.1465774811266548, 0.15553820536391338, 0.1602129403245952, 0.13429676329327866, 0.16506256725747592, 0.16413583705985568, 0.17380432954311398, 0.17806451330448148, 0.18415460748615375, 0.18648508945188091, 0.17541990071675662, 0.18474619235312972, 0.19671693887312425, 0.20287424357799344, 0.1806952914532972, 0.18833882526763368, 0.18472886723057724, 0.18826379560156814, 0.20708416652917105, 0.18368028256091273, 0.1728929072430092, 0.17817395097177957, 0.17745630079038344, 0.18004823923850877, 0.17846668499278895, 0.19654324080057783, 0.24001242912082776, 0.2150952206961746, 0.26897767542851525, 0.18994729229635854, 0.28711984237374033, 0.24558574152920987, 0.21514191243740888, 0.19073924775875717, 0.24133723008459906, 0.22026192091455865, 0.19483441308703797, 0.21075937025490343, 0.2183201987708373, 0.21086968218783875, 0.17501302995531187, 0.19301779593176738, 0.21782831049879525, 0.1954034035416634, 0.18809947291480444, 0.17736793178127264, 0.18157968401216174, 0.17058942312391867, 0.1794643846395183, 0.17327206595629108, 0.18082668417543013, 0.18101128078589668, 0.06423549622574898, 0.0750288459499685, 0.067372625251239, 0.06696389746673681, 0.07690423238743549, 0.07265945572757426, 0.07376617457155021, 0.07668570871181224, 0.07233138157409935]}, "mutation_prompt": null}
{"id": "1aa40655-da2f-4de6-b95e-ac78df2367d2", "solution": "import numpy as np\n\nclass ABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                new_solution = selected_solutions[i] + phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "ABCOptimizer", "description": "Artificial Bee Colony (ABC) algorithm based on the foraging behavior of honey bees in a colony.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "309615fc-50cf-466b-840a-c0ed2669e1de", "metadata": {"aucs": [0.6232958703604452, 0.6355508858006558, 0.6472722583316813, 0.6467456005443902, 0.6432378671377416, 0.6489293273760264, 0.6423245684713824, 0.6420775850189984, 0.6739225678290397, 0.2975705927852077, 0.29715042406145153, 0.3560959648378954, 0.3236163751033271, 0.29097311034593776, 0.31976496020458545, 0.2956839091251191, 0.3363898379199539, 0.3452888822259229, 0.09913897681353534, 0.09083513116779907, 0.10341828503528883, 0.08828244100899374, 0.08967366581843494, 0.09441143321233725, 0.0863931340587667, 0.09942139010876583, 0.09241681361608645, 0.07140836172486376, 0.0731885442695357, 0.07610944856280144, 0.07784095621252107, 0.07732690129822406, 0.08481143006125536, 0.08760397485551308, 0.09446636237154049, 0.0897849397194872, 0.9495545222736935, 0.9576662129694062, 0.9366515094287942, 0.9306479386164392, 0.9483927508047947, 0.9589056865990168, 0.9296006719691503, 0.9531654253666482, 0.9264435121389292, 0.2163248635192343, 0.19741396045624937, 0.2361678536720193, 0.21191381912813556, 0.21552954980100825, 0.22272821522008146, 0.22726838856300158, 0.22536632492429443, 0.2227430632223768, 0.20290155057197234, 0.2082906214297332, 0.24473708499879354, 0.2508326295324861, 0.22958505246286876, 0.23119601208971385, 0.20795662474179877, 0.22635459468212138, 0.24787958390509957, 0.14873942174877297, 0.1266187324923137, 0.1290192702923023, 0.1398322722341927, 0.12918275665991386, 0.12386144490883921, 0.14649540864476007, 0.14951591022689814, 0.13237338633100604, 0.13873619772794354, 0.11465881888581331, 0.1329136035628442, 0.16255613706633143, 0.13475228317994892, 0.15079857857083867, 0.14166199051659423, 0.12119799563002598, 0.14920329034694113, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06737802368962964, 0.0702430600083448, 0.04585426013359084, 0.057383177940233177, 0.06235676610663721, 0.045727261380662076, 0.07703769000262328, 0.04693565054062232, 0.06303630628266277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05906294105451049, 0.05991319105388082, 0.07142230265450511, 0.08840432363200978, 0.06287870920943894, 0.08564755251886558, 0.08079716374253365, 0.08238025947042393, 0.08578266067409879, 0.42701779813540175, 0.4110330493578299, 0.41148682194833763, 0.40605944264779825, 0.43018943873112425, 0.4136096551563906, 0.42216765707158443, 0.4027706545562528, 0.4274335911567917, 0.07829243342365766, 0.07863101440512432, 0.08433495844922778, 0.08120256884736232, 0.0863468885496328, 0.07996157336219312, 0.07319570391249142, 0.07819213272627257, 0.0826339785655058, 0.1569876673583822, 0.16113353589020007, 0.14853435185587982, 0.13291256110380545, 0.16692089546186073, 0.14069200514405367, 0.1616831558412285, 0.12809146159911122, 0.14948548834153774, 0.22319971371033076, 0.22252291884630848, 0.23220330411730028, 0.21280376115466704, 0.21193580473354745, 0.22245693626224794, 0.22507036722909857, 0.22919133027593508, 0.23261868866202595, 0.16083125721521407, 0.1478478701721837, 0.1465774811266548, 0.15553820536391338, 0.1602129403245952, 0.13429676329327866, 0.16506256725747592, 0.16413583705985568, 0.17380432954311398, 0.17806451330448148, 0.18415460748615375, 0.18648508945188091, 0.17541990071675662, 0.18474619235312972, 0.19671693887312425, 0.20287424357799344, 0.1806952914532972, 0.18833882526763368, 0.18472886723057724, 0.18826379560156814, 0.20708416652917105, 0.18368028256091273, 0.1728929072430092, 0.17817395097177957, 0.17745630079038344, 0.18004823923850877, 0.17846668499278895, 0.19654324080057783, 0.24001242912082776, 0.2150952206961746, 0.26897767542851525, 0.18994729229635854, 0.28711984237374033, 0.24558574152920987, 0.21514191243740888, 0.19073924775875717, 0.24133723008459906, 0.22026192091455865, 0.19483441308703797, 0.21075937025490343, 0.2183201987708373, 0.21086968218783875, 0.17501302995531187, 0.19301779593176738, 0.21782831049879525, 0.1954034035416634, 0.18809947291480444, 0.17736793178127264, 0.18157968401216174, 0.17058942312391867, 0.1794643846395183, 0.17327206595629108, 0.18082668417543013, 0.18101128078589668, 0.06423549622574898, 0.0750288459499685, 0.067372625251239, 0.06696389746673681, 0.07690423238743549, 0.07265945572757426, 0.07376617457155021, 0.07668570871181224, 0.07233138157409935]}, "mutation_prompt": null}
{"id": "63c933cd-aecf-4aeb-9fd2-763dba569207", "solution": "import numpy as np\n\nclass EnhancedABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            diversity_rate = 1.0 - (np.std(selected_solutions) / (self.ub - self.lb))\n            new_population_size = int(self.population_size * diversity_rate)\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                new_solution = selected_solutions[i] + phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "EnhancedABCOptimizer", "description": "Enhancing ABC algorithm with dynamic population size based on fitness diversity to promote exploration.", "configspace": "", "generation": 6, "fitness": 0.20934892435240368, "feedback": "The algorithm EnhancedABCOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "309615fc-50cf-466b-840a-c0ed2669e1de", "metadata": {"aucs": [0.6232958703604452, 0.6355508858006558, 0.6472722583316813, 0.6467456005443902, 0.6432378671377416, 0.6489293273760264, 0.6423245684713824, 0.6420775850189984, 0.6739225678290397, 0.2975705927852077, 0.29715042406145153, 0.3560959648378954, 0.3236163751033271, 0.29097311034593776, 0.31976496020458545, 0.2956839091251191, 0.3363898379199539, 0.3452888822259229, 0.09913897681353534, 0.09083513116779907, 0.10341828503528883, 0.08828244100899374, 0.08967366581843494, 0.09441143321233725, 0.0863931340587667, 0.09942139010876583, 0.09241681361608645, 0.07140836172486376, 0.0731885442695357, 0.07610944856280144, 0.07784095621252107, 0.07732690129822406, 0.08481143006125536, 0.08760397485551308, 0.09446636237154049, 0.0897849397194872, 0.9495545222736935, 0.9576662129694062, 0.9366515094287942, 0.9306479386164392, 0.9483927508047947, 0.9589056865990168, 0.9296006719691503, 0.9531654253666482, 0.9264435121389292, 0.2163248635192343, 0.19741396045624937, 0.2361678536720193, 0.21191381912813556, 0.21552954980100825, 0.22272821522008146, 0.22726838856300158, 0.22536632492429443, 0.2227430632223768, 0.20290155057197234, 0.2082906214297332, 0.24473708499879354, 0.2508326295324861, 0.22958505246286876, 0.23119601208971385, 0.20795662474179877, 0.22635459468212138, 0.24787958390509957, 0.14873942174877297, 0.1266187324923137, 0.1290192702923023, 0.1398322722341927, 0.12918275665991386, 0.12386144490883921, 0.14649540864476007, 0.14951591022689814, 0.13237338633100604, 0.13873619772794354, 0.11465881888581331, 0.1329136035628442, 0.16255613706633143, 0.13475228317994892, 0.15079857857083867, 0.14166199051659423, 0.12119799563002598, 0.14920329034694113, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06737802368962964, 0.0702430600083448, 0.04585426013359084, 0.057383177940233177, 0.06235676610663721, 0.045727261380662076, 0.07703769000262328, 0.04693565054062232, 0.06303630628266277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05906294105451049, 0.05991319105388082, 0.07142230265450511, 0.08840432363200978, 0.06287870920943894, 0.08564755251886558, 0.08079716374253365, 0.08238025947042393, 0.08578266067409879, 0.42701779813540175, 0.4110330493578299, 0.41148682194833763, 0.40605944264779825, 0.43018943873112425, 0.4136096551563906, 0.42216765707158443, 0.4027706545562528, 0.4274335911567917, 0.07829243342365766, 0.07863101440512432, 0.08433495844922778, 0.08120256884736232, 0.0863468885496328, 0.07996157336219312, 0.07319570391249142, 0.07819213272627257, 0.0826339785655058, 0.1569876673583822, 0.16113353589020007, 0.14853435185587982, 0.13291256110380545, 0.16692089546186073, 0.14069200514405367, 0.1616831558412285, 0.12809146159911122, 0.14948548834153774, 0.22319971371033076, 0.22252291884630848, 0.23220330411730028, 0.21280376115466704, 0.21193580473354745, 0.22245693626224794, 0.22507036722909857, 0.22919133027593508, 0.23261868866202595, 0.16083125721521407, 0.1478478701721837, 0.1465774811266548, 0.15553820536391338, 0.1602129403245952, 0.13429676329327866, 0.16506256725747592, 0.16413583705985568, 0.17380432954311398, 0.17806451330448148, 0.18415460748615375, 0.18648508945188091, 0.17541990071675662, 0.18474619235312972, 0.19671693887312425, 0.20287424357799344, 0.1806952914532972, 0.18833882526763368, 0.18472886723057724, 0.18826379560156814, 0.20708416652917105, 0.18368028256091273, 0.1728929072430092, 0.17817395097177957, 0.17745630079038344, 0.18004823923850877, 0.17846668499278895, 0.19654324080057783, 0.24001242912082776, 0.2150952206961746, 0.26897767542851525, 0.18994729229635854, 0.28711984237374033, 0.24558574152920987, 0.21514191243740888, 0.19073924775875717, 0.24133723008459906, 0.22026192091455865, 0.19483441308703797, 0.21075937025490343, 0.2183201987708373, 0.21086968218783875, 0.17501302995531187, 0.19301779593176738, 0.21782831049879525, 0.1954034035416634, 0.18809947291480444, 0.17736793178127264, 0.18157968401216174, 0.17058942312391867, 0.1794643846395183, 0.17327206595629108, 0.18082668417543013, 0.18101128078589668, 0.06423549622574898, 0.0750288459499685, 0.067372625251239, 0.06696389746673681, 0.07690423238743549, 0.07265945572757426, 0.07376617457155021, 0.07668570871181224, 0.07233138157409935]}, "mutation_prompt": null}
{"id": "0aac73ad-c6a3-4461-8f18-a778f932e8e2", "solution": "import numpy as np\n\nclass EnhancedABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                new_solution = selected_solutions[i] + phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n            if itr % 10 == 0:\n                fitness_sorted = np.sort(fitness_values)\n                low_fitness_threshold = fitness_sorted[int(0.1 * self.population_size)]\n                high_fitness_threshold = fitness_sorted[int(0.9 * self.population_size)]\n                population_fitness_diff = fitness_sorted[-1] - fitness_sorted[0]\n                if population_fitness_diff > 0:\n                    self.population_size = int(40 + 10 * (high_fitness_threshold - low_fitness_threshold) / population_fitness_diff)\n        \n        return self.best_solution", "name": "EnhancedABCOptimizer", "description": "Enhanced ABC algorithm with dynamic population size adaptation based on individual fitness improvement.", "configspace": "", "generation": 7, "fitness": 0.20934892435240368, "feedback": "The algorithm EnhancedABCOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "309615fc-50cf-466b-840a-c0ed2669e1de", "metadata": {"aucs": [0.6232958703604452, 0.6355508858006558, 0.6472722583316813, 0.6467456005443902, 0.6432378671377416, 0.6489293273760264, 0.6423245684713824, 0.6420775850189984, 0.6739225678290397, 0.2975705927852077, 0.29715042406145153, 0.3560959648378954, 0.3236163751033271, 0.29097311034593776, 0.31976496020458545, 0.2956839091251191, 0.3363898379199539, 0.3452888822259229, 0.09913897681353534, 0.09083513116779907, 0.10341828503528883, 0.08828244100899374, 0.08967366581843494, 0.09441143321233725, 0.0863931340587667, 0.09942139010876583, 0.09241681361608645, 0.07140836172486376, 0.0731885442695357, 0.07610944856280144, 0.07784095621252107, 0.07732690129822406, 0.08481143006125536, 0.08760397485551308, 0.09446636237154049, 0.0897849397194872, 0.9495545222736935, 0.9576662129694062, 0.9366515094287942, 0.9306479386164392, 0.9483927508047947, 0.9589056865990168, 0.9296006719691503, 0.9531654253666482, 0.9264435121389292, 0.2163248635192343, 0.19741396045624937, 0.2361678536720193, 0.21191381912813556, 0.21552954980100825, 0.22272821522008146, 0.22726838856300158, 0.22536632492429443, 0.2227430632223768, 0.20290155057197234, 0.2082906214297332, 0.24473708499879354, 0.2508326295324861, 0.22958505246286876, 0.23119601208971385, 0.20795662474179877, 0.22635459468212138, 0.24787958390509957, 0.14873942174877297, 0.1266187324923137, 0.1290192702923023, 0.1398322722341927, 0.12918275665991386, 0.12386144490883921, 0.14649540864476007, 0.14951591022689814, 0.13237338633100604, 0.13873619772794354, 0.11465881888581331, 0.1329136035628442, 0.16255613706633143, 0.13475228317994892, 0.15079857857083867, 0.14166199051659423, 0.12119799563002598, 0.14920329034694113, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06737802368962964, 0.0702430600083448, 0.04585426013359084, 0.057383177940233177, 0.06235676610663721, 0.045727261380662076, 0.07703769000262328, 0.04693565054062232, 0.06303630628266277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05906294105451049, 0.05991319105388082, 0.07142230265450511, 0.08840432363200978, 0.06287870920943894, 0.08564755251886558, 0.08079716374253365, 0.08238025947042393, 0.08578266067409879, 0.42701779813540175, 0.4110330493578299, 0.41148682194833763, 0.40605944264779825, 0.43018943873112425, 0.4136096551563906, 0.42216765707158443, 0.4027706545562528, 0.4274335911567917, 0.07829243342365766, 0.07863101440512432, 0.08433495844922778, 0.08120256884736232, 0.0863468885496328, 0.07996157336219312, 0.07319570391249142, 0.07819213272627257, 0.0826339785655058, 0.1569876673583822, 0.16113353589020007, 0.14853435185587982, 0.13291256110380545, 0.16692089546186073, 0.14069200514405367, 0.1616831558412285, 0.12809146159911122, 0.14948548834153774, 0.22319971371033076, 0.22252291884630848, 0.23220330411730028, 0.21280376115466704, 0.21193580473354745, 0.22245693626224794, 0.22507036722909857, 0.22919133027593508, 0.23261868866202595, 0.16083125721521407, 0.1478478701721837, 0.1465774811266548, 0.15553820536391338, 0.1602129403245952, 0.13429676329327866, 0.16506256725747592, 0.16413583705985568, 0.17380432954311398, 0.17806451330448148, 0.18415460748615375, 0.18648508945188091, 0.17541990071675662, 0.18474619235312972, 0.19671693887312425, 0.20287424357799344, 0.1806952914532972, 0.18833882526763368, 0.18472886723057724, 0.18826379560156814, 0.20708416652917105, 0.18368028256091273, 0.1728929072430092, 0.17817395097177957, 0.17745630079038344, 0.18004823923850877, 0.17846668499278895, 0.19654324080057783, 0.24001242912082776, 0.2150952206961746, 0.26897767542851525, 0.18994729229635854, 0.28711984237374033, 0.24558574152920987, 0.21514191243740888, 0.19073924775875717, 0.24133723008459906, 0.22026192091455865, 0.19483441308703797, 0.21075937025490343, 0.2183201987708373, 0.21086968218783875, 0.17501302995531187, 0.19301779593176738, 0.21782831049879525, 0.1954034035416634, 0.18809947291480444, 0.17736793178127264, 0.18157968401216174, 0.17058942312391867, 0.1794643846395183, 0.17327206595629108, 0.18082668417543013, 0.18101128078589668, 0.06423549622574898, 0.0750288459499685, 0.067372625251239, 0.06696389746673681, 0.07690423238743549, 0.07265945572757426, 0.07376617457155021, 0.07668570871181224, 0.07233138157409935]}, "mutation_prompt": null}
{"id": "c0f1d4f0-3f7b-4485-89a0-27739e0d5528", "solution": "import numpy as np\n\nclass ImprovedABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                new_solution = selected_solutions[i] + phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n            if itr % 100 == 0:\n                self.limit = int(0.6 * self.population_size) + int(0.2 * self.population_size * (1 - itr / self.budget))\n            \n        return self.best_solution", "name": "ImprovedABCOptimizer", "description": "Improved ABC optimizer with dynamic population size and adaptive search behavior.", "configspace": "", "generation": 8, "fitness": 0.19203842508373115, "feedback": "The algorithm ImprovedABCOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "309615fc-50cf-466b-840a-c0ed2669e1de", "metadata": {"aucs": [0.5536407315589857, 0.5117617270068769, 0.5469185931221088, 0.5343156365165403, 0.5534160754945672, 0.5549004902227193, 0.518745810587363, 0.531972011615261, 0.5553118329059809, 0.21576096979545534, 0.19262004551596834, 0.23234313756548142, 0.18971238001138158, 0.22530628092161464, 0.20497799277921225, 0.21688155719131852, 0.1739592295209923, 0.211002147001908, 0.08044847479725781, 0.08710982129200151, 0.08128480192371712, 0.1009915959873866, 0.09925794915701847, 0.10151427506606137, 0.09164943174731688, 0.10573107898255985, 0.08739378415138321, 0.08584118767256455, 0.06753472961805185, 0.06783511860141933, 0.07113789224700062, 0.08754077329438459, 0.07345728174333632, 0.08544779023335591, 0.08123467222352432, 0.0862051603577424, 0.9652739882076828, 0.9184874727647387, 0.929124188466431, 0.9218996198933346, 0.9280815362844015, 0.9070393023454164, 0.9231469734300521, 0.9454049959478139, 0.9348846231090022, 0.1693031625801915, 0.1630102059870393, 0.20131314527031452, 0.17422018673138695, 0.1818312326561662, 0.18563526782786155, 0.1865010821651506, 0.1914029452579552, 0.19077213450720254, 0.17882817518880856, 0.17710730594253743, 0.18352821416472942, 0.1981571920604248, 0.19893882764500082, 0.23623893283287212, 0.22672645877484676, 0.18443583635568128, 0.18155690141426273, 0.10991756147265619, 0.11331160218029324, 0.09948705041988781, 0.11557965740358522, 0.1221856921208, 0.11184986727608726, 0.125960212522093, 0.14070051696847696, 0.11877927158972856, 0.1328010191283061, 0.11738430990489979, 0.10079790085104634, 0.11875709197457596, 0.10199684295180234, 0.13205302169223154, 0.11877016918571515, 0.1254614309437042, 0.11083250821211854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049068063121443406, 0.0584062651343642, 0.0724924913943833, 0.06140431517352263, 0.046474199066254496, 0.04510901400426248, 0.05178678943552639, 0.043943722542431174, 0.050052820399285936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05877344828494957, 0.05716116437635188, 0.04732110009786861, 0.05302322614936761, 0.06687478548815962, 0.06020900912129856, 0.06898205136339453, 0.08403921264724235, 0.07171891038023737, 0.38237620743068323, 0.3943841981668288, 0.40452494232095626, 0.3852733890431227, 0.40136305594620547, 0.3852349078583389, 0.4019181165617469, 0.40171743288754347, 0.3803238592915771, 0.08058970869149396, 0.0818899175175204, 0.07782365062373664, 0.07819617063764361, 0.0854230648258908, 0.08067708114002614, 0.07182906266642008, 0.07931231188569743, 0.07865339190735887, 0.1651449469524532, 0.1474099602272294, 0.16480385665809227, 0.14043304943933543, 0.14233492142798876, 0.176806549315896, 0.1739691695017409, 0.155469689463256, 0.14462706142146076, 0.1896712101014545, 0.19111440192555607, 0.21921018153774063, 0.20805192319579224, 0.20148450890698177, 0.22216529836386278, 0.21873873046395975, 0.22485619382714217, 0.20445741302384468, 0.15763539311233743, 0.1454783501127047, 0.13800237835255336, 0.15518239096420972, 0.14126960145289702, 0.14580515003187688, 0.1473758515405611, 0.15650433451175283, 0.14177724929194824, 0.18754690529259155, 0.16411927755049016, 0.17947493332328213, 0.18225724503641005, 0.19532125750393925, 0.16825144256685087, 0.18495095421374075, 0.19225698608075492, 0.17417321595337654, 0.17675032465968055, 0.1749442837366727, 0.1926676172530497, 0.17535241920963418, 0.18253214557244313, 0.18038388260082594, 0.17605957057116084, 0.18253942849773952, 0.17450492086591873, 0.18564181124458712, 0.25819062000135096, 0.17851482975390043, 0.2017565854477974, 0.21276398912713823, 0.2338950777515948, 0.2447908500888306, 0.17838861546621387, 0.25894919423395446, 0.18965842217895157, 0.24527975447594386, 0.17326742746931068, 0.18722833550816786, 0.2225885679698596, 0.20172050349596482, 0.2454937960199267, 0.17810230562871454, 0.18770470765668457, 0.18449560082480398, 0.17649274882568078, 0.19201605831111002, 0.18329892891611255, 0.18748134486842727, 0.17719593284725177, 0.1882938735822055, 0.18921700309831735, 0.1946932318687764, 0.0757559257413859, 0.07585358622249094, 0.07960483193366641, 0.07294106871901218, 0.07438940404562344, 0.07616776274978543, 0.10825535722312074, 0.06120315124941156, 0.07035287730438955]}, "mutation_prompt": null}
{"id": "1a542d33-3fbf-497a-9129-f5fe4fee3e5a", "solution": "import numpy as np\n\nclass EnhancedABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Dynamically adjust the limit parameter based on fitness values\n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                new_solution = selected_solutions[i] + phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "EnhancedABCOptimizer", "description": "Enhance the ABCOptimizer by incorporating a dynamic adaptation of the limit parameter during the optimization process based on the fitness values.", "configspace": "", "generation": 9, "fitness": 0.2112000816894705, "feedback": "The algorithm EnhancedABCOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "309615fc-50cf-466b-840a-c0ed2669e1de", "metadata": {"aucs": [0.665795300722126, 0.657777518402304, 0.656405754526763, 0.6480342486093343, 0.6163109708062173, 0.6582006884749254, 0.6536957667944141, 0.6815820964402215, 0.6474292738697591, 0.332717832497186, 0.3379261744755029, 0.3400912996769796, 0.3316625414751301, 0.3549592755498857, 0.32313357797958675, 0.35961623100777307, 0.28338318404465423, 0.36961474823112317, 0.10879887608158645, 0.09680327508563913, 0.08877973235906123, 0.10454617980439129, 0.08964175403854446, 0.09746821736543665, 0.09066238646900415, 0.09143863148745446, 0.09815628584717129, 0.07669780502533252, 0.0797417833553169, 0.08173861309666408, 0.08409355469323132, 0.08247869615204362, 0.08088365216769777, 0.0777028382664926, 0.08636735402976303, 0.08925236148452254, 0.9371749622752211, 0.9603149678269036, 0.9471543012597027, 0.9177817361642772, 0.9162592999528034, 0.9408639939783675, 0.9337229197981728, 0.9277434571241752, 0.9181475749128325, 0.23033104387454117, 0.2347805107118739, 0.21943331219375117, 0.23204601304119943, 0.219126952370151, 0.21732450802475534, 0.19616395406484188, 0.23315664222957388, 0.22971832602478826, 0.21281262808787893, 0.21355973375897075, 0.1942510625551277, 0.23218016725438284, 0.24113959667294016, 0.19385869559189983, 0.23548203164784365, 0.23206192402161807, 0.20669075508224133, 0.138954940906575, 0.1334714314660812, 0.1534092840901774, 0.1463449705144929, 0.13289606471831017, 0.11786579116284468, 0.1310193580217407, 0.17006166335876882, 0.1445023506640769, 0.1356541146034077, 0.1385881520554345, 0.13417860847156138, 0.12797838171900733, 0.17765828942941575, 0.13831418100088122, 0.126737707377934, 0.1323207093757106, 0.1330157413707036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039965103363758914, 0.05557470518853591, 0.03990006003909208, 0.04171698143721436, 0.040365405605000904, 0.03431919460698207, 0.04576616644902076, 0.07020906265108484, 0.06978518287539559, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007045717587367273, 9.999999999998899e-05, 0.06926819271270235, 0.08229656246121597, 0.08291057707137583, 0.07055005857648544, 0.06969798238562674, 0.08794061974975409, 0.07874493048733622, 0.07018067240695403, 0.096595114049002, 0.40073314224059475, 0.4030176654726676, 0.39395999102738255, 0.43216183858547164, 0.4367395777410086, 0.44016946787360023, 0.40745899604744495, 0.42476400078966214, 0.4243014812695163, 0.08493085164166148, 0.08121334221625998, 0.09077126059565421, 0.08868839078558888, 0.07148403545283033, 0.08540984388918582, 0.08182841514580685, 0.07377631788833428, 0.08620269989910134, 0.14699280859022323, 0.14849618026921418, 0.14758257307977618, 0.13712280478690486, 0.1608013421038339, 0.14345074166253835, 0.13515284753725465, 0.16493590582083617, 0.13207523998938608, 0.22054174656653414, 0.24745150126868343, 0.2511611570092791, 0.21226736985588912, 0.22018100406480245, 0.22490310098101263, 0.23233145246300013, 0.2199349694675672, 0.2244199581201527, 0.14390799095463824, 0.16832741471938772, 0.1682541569390973, 0.15573653698002654, 0.15074564965264348, 0.15805508101227606, 0.16009040269485142, 0.17815934012285228, 0.15865780167383492, 0.22222488126090179, 0.1840483924053592, 0.1957229804088898, 0.1887814013410477, 0.1725074739954644, 0.18515559925043568, 0.1842594472294785, 0.19692751869319614, 0.18716138002732174, 0.19383381855306736, 0.19010341797160613, 0.1936203535230222, 0.18131611806689096, 0.18205080362658732, 0.1847885866629495, 0.18859322100006426, 0.19961435310901832, 0.18145642512830606, 0.2053676858422243, 0.2052091069768277, 0.24705967514237703, 0.25232810409404305, 0.24600435827003708, 0.21996229562964964, 0.17653407819310318, 0.18484143972028655, 0.31201224797163696, 0.23115339708151605, 0.2258293212724296, 0.2123817146129, 0.2190153101492276, 0.18236125465414554, 0.19483113824748388, 0.2404532241472932, 0.23443447396052286, 0.2098990067533183, 0.18320047544507712, 0.17315380440399764, 0.18427974687876725, 0.17949836500343186, 0.20108505772244734, 0.2110002297961059, 0.18786443071899106, 0.18429665881323765, 0.19294308366418034, 0.06590732332762672, 0.07974050974911151, 0.0634155489341578, 0.0693079750585881, 0.06660365825927916, 0.06679966499292755, 0.07305603976016206, 0.0778456506332299, 0.06999458476694376]}, "mutation_prompt": null}
{"id": "5e64a5e7-fa23-4cda-9a1f-2c175d91038a", "solution": "import numpy as np\n\nclass EnhancedABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Dynamically adjust the limit parameter based on fitness values\n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                new_solution = selected_solutions[i] + phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "EnhancedABCOptimizer", "description": "Enhance the ABCOptimizer by incorporating a dynamic adaptation of the limit parameter during the optimization process based on the fitness values.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1a542d33-3fbf-497a-9129-f5fe4fee3e5a", "metadata": {"aucs": [0.665795300722126, 0.657777518402304, 0.656405754526763, 0.6480342486093343, 0.6163109708062173, 0.6582006884749254, 0.6536957667944141, 0.6815820964402215, 0.6474292738697591, 0.332717832497186, 0.3379261744755029, 0.3400912996769796, 0.3316625414751301, 0.3549592755498857, 0.32313357797958675, 0.35961623100777307, 0.28338318404465423, 0.36961474823112317, 0.10879887608158645, 0.09680327508563913, 0.08877973235906123, 0.10454617980439129, 0.08964175403854446, 0.09746821736543665, 0.09066238646900415, 0.09143863148745446, 0.09815628584717129, 0.07669780502533252, 0.0797417833553169, 0.08173861309666408, 0.08409355469323132, 0.08247869615204362, 0.08088365216769777, 0.0777028382664926, 0.08636735402976303, 0.08925236148452254, 0.9371749622752211, 0.9603149678269036, 0.9471543012597027, 0.9177817361642772, 0.9162592999528034, 0.9408639939783675, 0.9337229197981728, 0.9277434571241752, 0.9181475749128325, 0.23033104387454117, 0.2347805107118739, 0.21943331219375117, 0.23204601304119943, 0.219126952370151, 0.21732450802475534, 0.19616395406484188, 0.23315664222957388, 0.22971832602478826, 0.21281262808787893, 0.21355973375897075, 0.1942510625551277, 0.23218016725438284, 0.24113959667294016, 0.19385869559189983, 0.23548203164784365, 0.23206192402161807, 0.20669075508224133, 0.138954940906575, 0.1334714314660812, 0.1534092840901774, 0.1463449705144929, 0.13289606471831017, 0.11786579116284468, 0.1310193580217407, 0.17006166335876882, 0.1445023506640769, 0.1356541146034077, 0.1385881520554345, 0.13417860847156138, 0.12797838171900733, 0.17765828942941575, 0.13831418100088122, 0.126737707377934, 0.1323207093757106, 0.1330157413707036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039965103363758914, 0.05557470518853591, 0.03990006003909208, 0.04171698143721436, 0.040365405605000904, 0.03431919460698207, 0.04576616644902076, 0.07020906265108484, 0.06978518287539559, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007045717587367273, 9.999999999998899e-05, 0.06926819271270235, 0.08229656246121597, 0.08291057707137583, 0.07055005857648544, 0.06969798238562674, 0.08794061974975409, 0.07874493048733622, 0.07018067240695403, 0.096595114049002, 0.40073314224059475, 0.4030176654726676, 0.39395999102738255, 0.43216183858547164, 0.4367395777410086, 0.44016946787360023, 0.40745899604744495, 0.42476400078966214, 0.4243014812695163, 0.08493085164166148, 0.08121334221625998, 0.09077126059565421, 0.08868839078558888, 0.07148403545283033, 0.08540984388918582, 0.08182841514580685, 0.07377631788833428, 0.08620269989910134, 0.14699280859022323, 0.14849618026921418, 0.14758257307977618, 0.13712280478690486, 0.1608013421038339, 0.14345074166253835, 0.13515284753725465, 0.16493590582083617, 0.13207523998938608, 0.22054174656653414, 0.24745150126868343, 0.2511611570092791, 0.21226736985588912, 0.22018100406480245, 0.22490310098101263, 0.23233145246300013, 0.2199349694675672, 0.2244199581201527, 0.14390799095463824, 0.16832741471938772, 0.1682541569390973, 0.15573653698002654, 0.15074564965264348, 0.15805508101227606, 0.16009040269485142, 0.17815934012285228, 0.15865780167383492, 0.22222488126090179, 0.1840483924053592, 0.1957229804088898, 0.1887814013410477, 0.1725074739954644, 0.18515559925043568, 0.1842594472294785, 0.19692751869319614, 0.18716138002732174, 0.19383381855306736, 0.19010341797160613, 0.1936203535230222, 0.18131611806689096, 0.18205080362658732, 0.1847885866629495, 0.18859322100006426, 0.19961435310901832, 0.18145642512830606, 0.2053676858422243, 0.2052091069768277, 0.24705967514237703, 0.25232810409404305, 0.24600435827003708, 0.21996229562964964, 0.17653407819310318, 0.18484143972028655, 0.31201224797163696, 0.23115339708151605, 0.2258293212724296, 0.2123817146129, 0.2190153101492276, 0.18236125465414554, 0.19483113824748388, 0.2404532241472932, 0.23443447396052286, 0.2098990067533183, 0.18320047544507712, 0.17315380440399764, 0.18427974687876725, 0.17949836500343186, 0.20108505772244734, 0.2110002297961059, 0.18786443071899106, 0.18429665881323765, 0.19294308366418034, 0.06590732332762672, 0.07974050974911151, 0.0634155489341578, 0.0693079750585881, 0.06660365825927916, 0.06679966499292755, 0.07305603976016206, 0.0778456506332299, 0.06999458476694376]}, "mutation_prompt": null}
{"id": "7fade178-22cf-4cf4-9da0-2a2cc4c22a0b", "solution": "import numpy as np\n\nclass EnhancedABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Dynamically adjust the limit parameter based on fitness values\n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                new_solution = selected_solutions[i] + phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "EnhancedABCOptimizer", "description": "Enhance the ABCOptimizer by incorporating a dynamic adaptation of the limit parameter during the optimization process based on the fitness values.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1a542d33-3fbf-497a-9129-f5fe4fee3e5a", "metadata": {"aucs": [0.665795300722126, 0.657777518402304, 0.656405754526763, 0.6480342486093343, 0.6163109708062173, 0.6582006884749254, 0.6536957667944141, 0.6815820964402215, 0.6474292738697591, 0.332717832497186, 0.3379261744755029, 0.3400912996769796, 0.3316625414751301, 0.3549592755498857, 0.32313357797958675, 0.35961623100777307, 0.28338318404465423, 0.36961474823112317, 0.10879887608158645, 0.09680327508563913, 0.08877973235906123, 0.10454617980439129, 0.08964175403854446, 0.09746821736543665, 0.09066238646900415, 0.09143863148745446, 0.09815628584717129, 0.07669780502533252, 0.0797417833553169, 0.08173861309666408, 0.08409355469323132, 0.08247869615204362, 0.08088365216769777, 0.0777028382664926, 0.08636735402976303, 0.08925236148452254, 0.9371749622752211, 0.9603149678269036, 0.9471543012597027, 0.9177817361642772, 0.9162592999528034, 0.9408639939783675, 0.9337229197981728, 0.9277434571241752, 0.9181475749128325, 0.23033104387454117, 0.2347805107118739, 0.21943331219375117, 0.23204601304119943, 0.219126952370151, 0.21732450802475534, 0.19616395406484188, 0.23315664222957388, 0.22971832602478826, 0.21281262808787893, 0.21355973375897075, 0.1942510625551277, 0.23218016725438284, 0.24113959667294016, 0.19385869559189983, 0.23548203164784365, 0.23206192402161807, 0.20669075508224133, 0.138954940906575, 0.1334714314660812, 0.1534092840901774, 0.1463449705144929, 0.13289606471831017, 0.11786579116284468, 0.1310193580217407, 0.17006166335876882, 0.1445023506640769, 0.1356541146034077, 0.1385881520554345, 0.13417860847156138, 0.12797838171900733, 0.17765828942941575, 0.13831418100088122, 0.126737707377934, 0.1323207093757106, 0.1330157413707036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039965103363758914, 0.05557470518853591, 0.03990006003909208, 0.04171698143721436, 0.040365405605000904, 0.03431919460698207, 0.04576616644902076, 0.07020906265108484, 0.06978518287539559, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007045717587367273, 9.999999999998899e-05, 0.06926819271270235, 0.08229656246121597, 0.08291057707137583, 0.07055005857648544, 0.06969798238562674, 0.08794061974975409, 0.07874493048733622, 0.07018067240695403, 0.096595114049002, 0.40073314224059475, 0.4030176654726676, 0.39395999102738255, 0.43216183858547164, 0.4367395777410086, 0.44016946787360023, 0.40745899604744495, 0.42476400078966214, 0.4243014812695163, 0.08493085164166148, 0.08121334221625998, 0.09077126059565421, 0.08868839078558888, 0.07148403545283033, 0.08540984388918582, 0.08182841514580685, 0.07377631788833428, 0.08620269989910134, 0.14699280859022323, 0.14849618026921418, 0.14758257307977618, 0.13712280478690486, 0.1608013421038339, 0.14345074166253835, 0.13515284753725465, 0.16493590582083617, 0.13207523998938608, 0.22054174656653414, 0.24745150126868343, 0.2511611570092791, 0.21226736985588912, 0.22018100406480245, 0.22490310098101263, 0.23233145246300013, 0.2199349694675672, 0.2244199581201527, 0.14390799095463824, 0.16832741471938772, 0.1682541569390973, 0.15573653698002654, 0.15074564965264348, 0.15805508101227606, 0.16009040269485142, 0.17815934012285228, 0.15865780167383492, 0.22222488126090179, 0.1840483924053592, 0.1957229804088898, 0.1887814013410477, 0.1725074739954644, 0.18515559925043568, 0.1842594472294785, 0.19692751869319614, 0.18716138002732174, 0.19383381855306736, 0.19010341797160613, 0.1936203535230222, 0.18131611806689096, 0.18205080362658732, 0.1847885866629495, 0.18859322100006426, 0.19961435310901832, 0.18145642512830606, 0.2053676858422243, 0.2052091069768277, 0.24705967514237703, 0.25232810409404305, 0.24600435827003708, 0.21996229562964964, 0.17653407819310318, 0.18484143972028655, 0.31201224797163696, 0.23115339708151605, 0.2258293212724296, 0.2123817146129, 0.2190153101492276, 0.18236125465414554, 0.19483113824748388, 0.2404532241472932, 0.23443447396052286, 0.2098990067533183, 0.18320047544507712, 0.17315380440399764, 0.18427974687876725, 0.17949836500343186, 0.20108505772244734, 0.2110002297961059, 0.18786443071899106, 0.18429665881323765, 0.19294308366418034, 0.06590732332762672, 0.07974050974911151, 0.0634155489341578, 0.0693079750585881, 0.06660365825927916, 0.06679966499292755, 0.07305603976016206, 0.0778456506332299, 0.06999458476694376]}, "mutation_prompt": null}
{"id": "463bddf6-1c5e-4807-80bc-f8dd2de4f324", "solution": "import numpy as np\n\nclass EnhancedABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Dynamically adjust the limit parameter based on fitness values\n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                new_solution = selected_solutions[i] + phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "EnhancedABCOptimizer", "description": "Enhance the ABCOptimizer by incorporating a dynamic adaptation of the limit parameter during the optimization process based on the fitness values.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1a542d33-3fbf-497a-9129-f5fe4fee3e5a", "metadata": {"aucs": [0.665795300722126, 0.657777518402304, 0.656405754526763, 0.6480342486093343, 0.6163109708062173, 0.6582006884749254, 0.6536957667944141, 0.6815820964402215, 0.6474292738697591, 0.332717832497186, 0.3379261744755029, 0.3400912996769796, 0.3316625414751301, 0.3549592755498857, 0.32313357797958675, 0.35961623100777307, 0.28338318404465423, 0.36961474823112317, 0.10879887608158645, 0.09680327508563913, 0.08877973235906123, 0.10454617980439129, 0.08964175403854446, 0.09746821736543665, 0.09066238646900415, 0.09143863148745446, 0.09815628584717129, 0.07669780502533252, 0.0797417833553169, 0.08173861309666408, 0.08409355469323132, 0.08247869615204362, 0.08088365216769777, 0.0777028382664926, 0.08636735402976303, 0.08925236148452254, 0.9371749622752211, 0.9603149678269036, 0.9471543012597027, 0.9177817361642772, 0.9162592999528034, 0.9408639939783675, 0.9337229197981728, 0.9277434571241752, 0.9181475749128325, 0.23033104387454117, 0.2347805107118739, 0.21943331219375117, 0.23204601304119943, 0.219126952370151, 0.21732450802475534, 0.19616395406484188, 0.23315664222957388, 0.22971832602478826, 0.21281262808787893, 0.21355973375897075, 0.1942510625551277, 0.23218016725438284, 0.24113959667294016, 0.19385869559189983, 0.23548203164784365, 0.23206192402161807, 0.20669075508224133, 0.138954940906575, 0.1334714314660812, 0.1534092840901774, 0.1463449705144929, 0.13289606471831017, 0.11786579116284468, 0.1310193580217407, 0.17006166335876882, 0.1445023506640769, 0.1356541146034077, 0.1385881520554345, 0.13417860847156138, 0.12797838171900733, 0.17765828942941575, 0.13831418100088122, 0.126737707377934, 0.1323207093757106, 0.1330157413707036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039965103363758914, 0.05557470518853591, 0.03990006003909208, 0.04171698143721436, 0.040365405605000904, 0.03431919460698207, 0.04576616644902076, 0.07020906265108484, 0.06978518287539559, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007045717587367273, 9.999999999998899e-05, 0.06926819271270235, 0.08229656246121597, 0.08291057707137583, 0.07055005857648544, 0.06969798238562674, 0.08794061974975409, 0.07874493048733622, 0.07018067240695403, 0.096595114049002, 0.40073314224059475, 0.4030176654726676, 0.39395999102738255, 0.43216183858547164, 0.4367395777410086, 0.44016946787360023, 0.40745899604744495, 0.42476400078966214, 0.4243014812695163, 0.08493085164166148, 0.08121334221625998, 0.09077126059565421, 0.08868839078558888, 0.07148403545283033, 0.08540984388918582, 0.08182841514580685, 0.07377631788833428, 0.08620269989910134, 0.14699280859022323, 0.14849618026921418, 0.14758257307977618, 0.13712280478690486, 0.1608013421038339, 0.14345074166253835, 0.13515284753725465, 0.16493590582083617, 0.13207523998938608, 0.22054174656653414, 0.24745150126868343, 0.2511611570092791, 0.21226736985588912, 0.22018100406480245, 0.22490310098101263, 0.23233145246300013, 0.2199349694675672, 0.2244199581201527, 0.14390799095463824, 0.16832741471938772, 0.1682541569390973, 0.15573653698002654, 0.15074564965264348, 0.15805508101227606, 0.16009040269485142, 0.17815934012285228, 0.15865780167383492, 0.22222488126090179, 0.1840483924053592, 0.1957229804088898, 0.1887814013410477, 0.1725074739954644, 0.18515559925043568, 0.1842594472294785, 0.19692751869319614, 0.18716138002732174, 0.19383381855306736, 0.19010341797160613, 0.1936203535230222, 0.18131611806689096, 0.18205080362658732, 0.1847885866629495, 0.18859322100006426, 0.19961435310901832, 0.18145642512830606, 0.2053676858422243, 0.2052091069768277, 0.24705967514237703, 0.25232810409404305, 0.24600435827003708, 0.21996229562964964, 0.17653407819310318, 0.18484143972028655, 0.31201224797163696, 0.23115339708151605, 0.2258293212724296, 0.2123817146129, 0.2190153101492276, 0.18236125465414554, 0.19483113824748388, 0.2404532241472932, 0.23443447396052286, 0.2098990067533183, 0.18320047544507712, 0.17315380440399764, 0.18427974687876725, 0.17949836500343186, 0.20108505772244734, 0.2110002297961059, 0.18786443071899106, 0.18429665881323765, 0.19294308366418034, 0.06590732332762672, 0.07974050974911151, 0.0634155489341578, 0.0693079750585881, 0.06660365825927916, 0.06679966499292755, 0.07305603976016206, 0.0778456506332299, 0.06999458476694376]}, "mutation_prompt": null}
{"id": "44b1e976-827b-4fab-a974-8245069d9b12", "solution": "import numpy as np\n\nclass EnhancedABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Dynamically adjust the limit parameter based on fitness values\n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                new_solution = selected_solutions[i] + phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "EnhancedABCOptimizer", "description": "Enhance the ABCOptimizer by incorporating a dynamic adaptation of the limit parameter during the optimization process based on the fitness values.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1a542d33-3fbf-497a-9129-f5fe4fee3e5a", "metadata": {"aucs": [0.665795300722126, 0.657777518402304, 0.656405754526763, 0.6480342486093343, 0.6163109708062173, 0.6582006884749254, 0.6536957667944141, 0.6815820964402215, 0.6474292738697591, 0.332717832497186, 0.3379261744755029, 0.3400912996769796, 0.3316625414751301, 0.3549592755498857, 0.32313357797958675, 0.35961623100777307, 0.28338318404465423, 0.36961474823112317, 0.10879887608158645, 0.09680327508563913, 0.08877973235906123, 0.10454617980439129, 0.08964175403854446, 0.09746821736543665, 0.09066238646900415, 0.09143863148745446, 0.09815628584717129, 0.07669780502533252, 0.0797417833553169, 0.08173861309666408, 0.08409355469323132, 0.08247869615204362, 0.08088365216769777, 0.0777028382664926, 0.08636735402976303, 0.08925236148452254, 0.9371749622752211, 0.9603149678269036, 0.9471543012597027, 0.9177817361642772, 0.9162592999528034, 0.9408639939783675, 0.9337229197981728, 0.9277434571241752, 0.9181475749128325, 0.23033104387454117, 0.2347805107118739, 0.21943331219375117, 0.23204601304119943, 0.219126952370151, 0.21732450802475534, 0.19616395406484188, 0.23315664222957388, 0.22971832602478826, 0.21281262808787893, 0.21355973375897075, 0.1942510625551277, 0.23218016725438284, 0.24113959667294016, 0.19385869559189983, 0.23548203164784365, 0.23206192402161807, 0.20669075508224133, 0.138954940906575, 0.1334714314660812, 0.1534092840901774, 0.1463449705144929, 0.13289606471831017, 0.11786579116284468, 0.1310193580217407, 0.17006166335876882, 0.1445023506640769, 0.1356541146034077, 0.1385881520554345, 0.13417860847156138, 0.12797838171900733, 0.17765828942941575, 0.13831418100088122, 0.126737707377934, 0.1323207093757106, 0.1330157413707036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039965103363758914, 0.05557470518853591, 0.03990006003909208, 0.04171698143721436, 0.040365405605000904, 0.03431919460698207, 0.04576616644902076, 0.07020906265108484, 0.06978518287539559, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007045717587367273, 9.999999999998899e-05, 0.06926819271270235, 0.08229656246121597, 0.08291057707137583, 0.07055005857648544, 0.06969798238562674, 0.08794061974975409, 0.07874493048733622, 0.07018067240695403, 0.096595114049002, 0.40073314224059475, 0.4030176654726676, 0.39395999102738255, 0.43216183858547164, 0.4367395777410086, 0.44016946787360023, 0.40745899604744495, 0.42476400078966214, 0.4243014812695163, 0.08493085164166148, 0.08121334221625998, 0.09077126059565421, 0.08868839078558888, 0.07148403545283033, 0.08540984388918582, 0.08182841514580685, 0.07377631788833428, 0.08620269989910134, 0.14699280859022323, 0.14849618026921418, 0.14758257307977618, 0.13712280478690486, 0.1608013421038339, 0.14345074166253835, 0.13515284753725465, 0.16493590582083617, 0.13207523998938608, 0.22054174656653414, 0.24745150126868343, 0.2511611570092791, 0.21226736985588912, 0.22018100406480245, 0.22490310098101263, 0.23233145246300013, 0.2199349694675672, 0.2244199581201527, 0.14390799095463824, 0.16832741471938772, 0.1682541569390973, 0.15573653698002654, 0.15074564965264348, 0.15805508101227606, 0.16009040269485142, 0.17815934012285228, 0.15865780167383492, 0.22222488126090179, 0.1840483924053592, 0.1957229804088898, 0.1887814013410477, 0.1725074739954644, 0.18515559925043568, 0.1842594472294785, 0.19692751869319614, 0.18716138002732174, 0.19383381855306736, 0.19010341797160613, 0.1936203535230222, 0.18131611806689096, 0.18205080362658732, 0.1847885866629495, 0.18859322100006426, 0.19961435310901832, 0.18145642512830606, 0.2053676858422243, 0.2052091069768277, 0.24705967514237703, 0.25232810409404305, 0.24600435827003708, 0.21996229562964964, 0.17653407819310318, 0.18484143972028655, 0.31201224797163696, 0.23115339708151605, 0.2258293212724296, 0.2123817146129, 0.2190153101492276, 0.18236125465414554, 0.19483113824748388, 0.2404532241472932, 0.23443447396052286, 0.2098990067533183, 0.18320047544507712, 0.17315380440399764, 0.18427974687876725, 0.17949836500343186, 0.20108505772244734, 0.2110002297961059, 0.18786443071899106, 0.18429665881323765, 0.19294308366418034, 0.06590732332762672, 0.07974050974911151, 0.0634155489341578, 0.0693079750585881, 0.06660365825927916, 0.06679966499292755, 0.07305603976016206, 0.0778456506332299, 0.06999458476694376]}, "mutation_prompt": null}
{"id": "829cc7dd-42b2-4c1a-9860-4904d9cbcab2", "solution": "import numpy as np\n\nclass EnhancedABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Dynamically adjust the limit parameter based on fitness values\n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                new_solution = selected_solutions[i] + phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "EnhancedABCOptimizer", "description": "Enhance the ABCOptimizer by incorporating a dynamic adaptation of the limit parameter during the optimization process based on the fitness values.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1a542d33-3fbf-497a-9129-f5fe4fee3e5a", "metadata": {"aucs": [0.665795300722126, 0.657777518402304, 0.656405754526763, 0.6480342486093343, 0.6163109708062173, 0.6582006884749254, 0.6536957667944141, 0.6815820964402215, 0.6474292738697591, 0.332717832497186, 0.3379261744755029, 0.3400912996769796, 0.3316625414751301, 0.3549592755498857, 0.32313357797958675, 0.35961623100777307, 0.28338318404465423, 0.36961474823112317, 0.10879887608158645, 0.09680327508563913, 0.08877973235906123, 0.10454617980439129, 0.08964175403854446, 0.09746821736543665, 0.09066238646900415, 0.09143863148745446, 0.09815628584717129, 0.07669780502533252, 0.0797417833553169, 0.08173861309666408, 0.08409355469323132, 0.08247869615204362, 0.08088365216769777, 0.0777028382664926, 0.08636735402976303, 0.08925236148452254, 0.9371749622752211, 0.9603149678269036, 0.9471543012597027, 0.9177817361642772, 0.9162592999528034, 0.9408639939783675, 0.9337229197981728, 0.9277434571241752, 0.9181475749128325, 0.23033104387454117, 0.2347805107118739, 0.21943331219375117, 0.23204601304119943, 0.219126952370151, 0.21732450802475534, 0.19616395406484188, 0.23315664222957388, 0.22971832602478826, 0.21281262808787893, 0.21355973375897075, 0.1942510625551277, 0.23218016725438284, 0.24113959667294016, 0.19385869559189983, 0.23548203164784365, 0.23206192402161807, 0.20669075508224133, 0.138954940906575, 0.1334714314660812, 0.1534092840901774, 0.1463449705144929, 0.13289606471831017, 0.11786579116284468, 0.1310193580217407, 0.17006166335876882, 0.1445023506640769, 0.1356541146034077, 0.1385881520554345, 0.13417860847156138, 0.12797838171900733, 0.17765828942941575, 0.13831418100088122, 0.126737707377934, 0.1323207093757106, 0.1330157413707036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039965103363758914, 0.05557470518853591, 0.03990006003909208, 0.04171698143721436, 0.040365405605000904, 0.03431919460698207, 0.04576616644902076, 0.07020906265108484, 0.06978518287539559, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007045717587367273, 9.999999999998899e-05, 0.06926819271270235, 0.08229656246121597, 0.08291057707137583, 0.07055005857648544, 0.06969798238562674, 0.08794061974975409, 0.07874493048733622, 0.07018067240695403, 0.096595114049002, 0.40073314224059475, 0.4030176654726676, 0.39395999102738255, 0.43216183858547164, 0.4367395777410086, 0.44016946787360023, 0.40745899604744495, 0.42476400078966214, 0.4243014812695163, 0.08493085164166148, 0.08121334221625998, 0.09077126059565421, 0.08868839078558888, 0.07148403545283033, 0.08540984388918582, 0.08182841514580685, 0.07377631788833428, 0.08620269989910134, 0.14699280859022323, 0.14849618026921418, 0.14758257307977618, 0.13712280478690486, 0.1608013421038339, 0.14345074166253835, 0.13515284753725465, 0.16493590582083617, 0.13207523998938608, 0.22054174656653414, 0.24745150126868343, 0.2511611570092791, 0.21226736985588912, 0.22018100406480245, 0.22490310098101263, 0.23233145246300013, 0.2199349694675672, 0.2244199581201527, 0.14390799095463824, 0.16832741471938772, 0.1682541569390973, 0.15573653698002654, 0.15074564965264348, 0.15805508101227606, 0.16009040269485142, 0.17815934012285228, 0.15865780167383492, 0.22222488126090179, 0.1840483924053592, 0.1957229804088898, 0.1887814013410477, 0.1725074739954644, 0.18515559925043568, 0.1842594472294785, 0.19692751869319614, 0.18716138002732174, 0.19383381855306736, 0.19010341797160613, 0.1936203535230222, 0.18131611806689096, 0.18205080362658732, 0.1847885866629495, 0.18859322100006426, 0.19961435310901832, 0.18145642512830606, 0.2053676858422243, 0.2052091069768277, 0.24705967514237703, 0.25232810409404305, 0.24600435827003708, 0.21996229562964964, 0.17653407819310318, 0.18484143972028655, 0.31201224797163696, 0.23115339708151605, 0.2258293212724296, 0.2123817146129, 0.2190153101492276, 0.18236125465414554, 0.19483113824748388, 0.2404532241472932, 0.23443447396052286, 0.2098990067533183, 0.18320047544507712, 0.17315380440399764, 0.18427974687876725, 0.17949836500343186, 0.20108505772244734, 0.2110002297961059, 0.18786443071899106, 0.18429665881323765, 0.19294308366418034, 0.06590732332762672, 0.07974050974911151, 0.0634155489341578, 0.0693079750585881, 0.06660365825927916, 0.06679966499292755, 0.07305603976016206, 0.0778456506332299, 0.06999458476694376]}, "mutation_prompt": null}
{"id": "2d194334-cfb9-4fcf-ad00-a9373ac97ed1", "solution": "import numpy as np\n\nclass EnhancedABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Dynamically adjust the limit parameter based on fitness values\n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                new_solution = selected_solutions[i] + phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "EnhancedABCOptimizer", "description": "Enhance the ABCOptimizer by incorporating a dynamic adaptation of the limit parameter during the optimization process based on the fitness values.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1a542d33-3fbf-497a-9129-f5fe4fee3e5a", "metadata": {"aucs": [0.665795300722126, 0.657777518402304, 0.656405754526763, 0.6480342486093343, 0.6163109708062173, 0.6582006884749254, 0.6536957667944141, 0.6815820964402215, 0.6474292738697591, 0.332717832497186, 0.3379261744755029, 0.3400912996769796, 0.3316625414751301, 0.3549592755498857, 0.32313357797958675, 0.35961623100777307, 0.28338318404465423, 0.36961474823112317, 0.10879887608158645, 0.09680327508563913, 0.08877973235906123, 0.10454617980439129, 0.08964175403854446, 0.09746821736543665, 0.09066238646900415, 0.09143863148745446, 0.09815628584717129, 0.07669780502533252, 0.0797417833553169, 0.08173861309666408, 0.08409355469323132, 0.08247869615204362, 0.08088365216769777, 0.0777028382664926, 0.08636735402976303, 0.08925236148452254, 0.9371749622752211, 0.9603149678269036, 0.9471543012597027, 0.9177817361642772, 0.9162592999528034, 0.9408639939783675, 0.9337229197981728, 0.9277434571241752, 0.9181475749128325, 0.23033104387454117, 0.2347805107118739, 0.21943331219375117, 0.23204601304119943, 0.219126952370151, 0.21732450802475534, 0.19616395406484188, 0.23315664222957388, 0.22971832602478826, 0.21281262808787893, 0.21355973375897075, 0.1942510625551277, 0.23218016725438284, 0.24113959667294016, 0.19385869559189983, 0.23548203164784365, 0.23206192402161807, 0.20669075508224133, 0.138954940906575, 0.1334714314660812, 0.1534092840901774, 0.1463449705144929, 0.13289606471831017, 0.11786579116284468, 0.1310193580217407, 0.17006166335876882, 0.1445023506640769, 0.1356541146034077, 0.1385881520554345, 0.13417860847156138, 0.12797838171900733, 0.17765828942941575, 0.13831418100088122, 0.126737707377934, 0.1323207093757106, 0.1330157413707036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039965103363758914, 0.05557470518853591, 0.03990006003909208, 0.04171698143721436, 0.040365405605000904, 0.03431919460698207, 0.04576616644902076, 0.07020906265108484, 0.06978518287539559, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007045717587367273, 9.999999999998899e-05, 0.06926819271270235, 0.08229656246121597, 0.08291057707137583, 0.07055005857648544, 0.06969798238562674, 0.08794061974975409, 0.07874493048733622, 0.07018067240695403, 0.096595114049002, 0.40073314224059475, 0.4030176654726676, 0.39395999102738255, 0.43216183858547164, 0.4367395777410086, 0.44016946787360023, 0.40745899604744495, 0.42476400078966214, 0.4243014812695163, 0.08493085164166148, 0.08121334221625998, 0.09077126059565421, 0.08868839078558888, 0.07148403545283033, 0.08540984388918582, 0.08182841514580685, 0.07377631788833428, 0.08620269989910134, 0.14699280859022323, 0.14849618026921418, 0.14758257307977618, 0.13712280478690486, 0.1608013421038339, 0.14345074166253835, 0.13515284753725465, 0.16493590582083617, 0.13207523998938608, 0.22054174656653414, 0.24745150126868343, 0.2511611570092791, 0.21226736985588912, 0.22018100406480245, 0.22490310098101263, 0.23233145246300013, 0.2199349694675672, 0.2244199581201527, 0.14390799095463824, 0.16832741471938772, 0.1682541569390973, 0.15573653698002654, 0.15074564965264348, 0.15805508101227606, 0.16009040269485142, 0.17815934012285228, 0.15865780167383492, 0.22222488126090179, 0.1840483924053592, 0.1957229804088898, 0.1887814013410477, 0.1725074739954644, 0.18515559925043568, 0.1842594472294785, 0.19692751869319614, 0.18716138002732174, 0.19383381855306736, 0.19010341797160613, 0.1936203535230222, 0.18131611806689096, 0.18205080362658732, 0.1847885866629495, 0.18859322100006426, 0.19961435310901832, 0.18145642512830606, 0.2053676858422243, 0.2052091069768277, 0.24705967514237703, 0.25232810409404305, 0.24600435827003708, 0.21996229562964964, 0.17653407819310318, 0.18484143972028655, 0.31201224797163696, 0.23115339708151605, 0.2258293212724296, 0.2123817146129, 0.2190153101492276, 0.18236125465414554, 0.19483113824748388, 0.2404532241472932, 0.23443447396052286, 0.2098990067533183, 0.18320047544507712, 0.17315380440399764, 0.18427974687876725, 0.17949836500343186, 0.20108505772244734, 0.2110002297961059, 0.18786443071899106, 0.18429665881323765, 0.19294308366418034, 0.06590732332762672, 0.07974050974911151, 0.0634155489341578, 0.0693079750585881, 0.06660365825927916, 0.06679966499292755, 0.07305603976016206, 0.0778456506332299, 0.06999458476694376]}, "mutation_prompt": null}
{"id": "6bbca495-8220-4c19-8abf-bfd79781aad5", "solution": "import numpy as np\n\nclass EnhancedABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Dynamically adjust the limit parameter based on fitness values\n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                new_solution = selected_solutions[i] + phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "EnhancedABCOptimizer", "description": "Enhance the ABCOptimizer by incorporating a dynamic adaptation of the limit parameter during the optimization process based on the fitness values.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1a542d33-3fbf-497a-9129-f5fe4fee3e5a", "metadata": {"aucs": [0.665795300722126, 0.657777518402304, 0.656405754526763, 0.6480342486093343, 0.6163109708062173, 0.6582006884749254, 0.6536957667944141, 0.6815820964402215, 0.6474292738697591, 0.332717832497186, 0.3379261744755029, 0.3400912996769796, 0.3316625414751301, 0.3549592755498857, 0.32313357797958675, 0.35961623100777307, 0.28338318404465423, 0.36961474823112317, 0.10879887608158645, 0.09680327508563913, 0.08877973235906123, 0.10454617980439129, 0.08964175403854446, 0.09746821736543665, 0.09066238646900415, 0.09143863148745446, 0.09815628584717129, 0.07669780502533252, 0.0797417833553169, 0.08173861309666408, 0.08409355469323132, 0.08247869615204362, 0.08088365216769777, 0.0777028382664926, 0.08636735402976303, 0.08925236148452254, 0.9371749622752211, 0.9603149678269036, 0.9471543012597027, 0.9177817361642772, 0.9162592999528034, 0.9408639939783675, 0.9337229197981728, 0.9277434571241752, 0.9181475749128325, 0.23033104387454117, 0.2347805107118739, 0.21943331219375117, 0.23204601304119943, 0.219126952370151, 0.21732450802475534, 0.19616395406484188, 0.23315664222957388, 0.22971832602478826, 0.21281262808787893, 0.21355973375897075, 0.1942510625551277, 0.23218016725438284, 0.24113959667294016, 0.19385869559189983, 0.23548203164784365, 0.23206192402161807, 0.20669075508224133, 0.138954940906575, 0.1334714314660812, 0.1534092840901774, 0.1463449705144929, 0.13289606471831017, 0.11786579116284468, 0.1310193580217407, 0.17006166335876882, 0.1445023506640769, 0.1356541146034077, 0.1385881520554345, 0.13417860847156138, 0.12797838171900733, 0.17765828942941575, 0.13831418100088122, 0.126737707377934, 0.1323207093757106, 0.1330157413707036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039965103363758914, 0.05557470518853591, 0.03990006003909208, 0.04171698143721436, 0.040365405605000904, 0.03431919460698207, 0.04576616644902076, 0.07020906265108484, 0.06978518287539559, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007045717587367273, 9.999999999998899e-05, 0.06926819271270235, 0.08229656246121597, 0.08291057707137583, 0.07055005857648544, 0.06969798238562674, 0.08794061974975409, 0.07874493048733622, 0.07018067240695403, 0.096595114049002, 0.40073314224059475, 0.4030176654726676, 0.39395999102738255, 0.43216183858547164, 0.4367395777410086, 0.44016946787360023, 0.40745899604744495, 0.42476400078966214, 0.4243014812695163, 0.08493085164166148, 0.08121334221625998, 0.09077126059565421, 0.08868839078558888, 0.07148403545283033, 0.08540984388918582, 0.08182841514580685, 0.07377631788833428, 0.08620269989910134, 0.14699280859022323, 0.14849618026921418, 0.14758257307977618, 0.13712280478690486, 0.1608013421038339, 0.14345074166253835, 0.13515284753725465, 0.16493590582083617, 0.13207523998938608, 0.22054174656653414, 0.24745150126868343, 0.2511611570092791, 0.21226736985588912, 0.22018100406480245, 0.22490310098101263, 0.23233145246300013, 0.2199349694675672, 0.2244199581201527, 0.14390799095463824, 0.16832741471938772, 0.1682541569390973, 0.15573653698002654, 0.15074564965264348, 0.15805508101227606, 0.16009040269485142, 0.17815934012285228, 0.15865780167383492, 0.22222488126090179, 0.1840483924053592, 0.1957229804088898, 0.1887814013410477, 0.1725074739954644, 0.18515559925043568, 0.1842594472294785, 0.19692751869319614, 0.18716138002732174, 0.19383381855306736, 0.19010341797160613, 0.1936203535230222, 0.18131611806689096, 0.18205080362658732, 0.1847885866629495, 0.18859322100006426, 0.19961435310901832, 0.18145642512830606, 0.2053676858422243, 0.2052091069768277, 0.24705967514237703, 0.25232810409404305, 0.24600435827003708, 0.21996229562964964, 0.17653407819310318, 0.18484143972028655, 0.31201224797163696, 0.23115339708151605, 0.2258293212724296, 0.2123817146129, 0.2190153101492276, 0.18236125465414554, 0.19483113824748388, 0.2404532241472932, 0.23443447396052286, 0.2098990067533183, 0.18320047544507712, 0.17315380440399764, 0.18427974687876725, 0.17949836500343186, 0.20108505772244734, 0.2110002297961059, 0.18786443071899106, 0.18429665881323765, 0.19294308366418034, 0.06590732332762672, 0.07974050974911151, 0.0634155489341578, 0.0693079750585881, 0.06660365825927916, 0.06679966499292755, 0.07305603976016206, 0.0778456506332299, 0.06999458476694376]}, "mutation_prompt": null}
{"id": "9a9d1e84-4794-4512-8760-adfecfb79ef6", "solution": "import numpy as np\n\nclass EnhancedABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Dynamically adjust the limit parameter based on fitness values\n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                new_solution = selected_solutions[i] + phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                \n                # Introduce mutation for diversification\n                mutation_strength = 0.1 * (self.ub - self.lb)\n                mutation = np.random.uniform(low=-mutation_strength, high=mutation_strength, size=self.dim)\n                new_solution += mutation\n                \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "EnhancedABCOptimizer", "description": "Enhance the EnhancedABCOptimizer by introducing a mutation operation that diversifies the search space by adding a random perturbation to selected solutions.", "configspace": "", "generation": 17, "fitness": 0.1651879393633299, "feedback": "The algorithm EnhancedABCOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "1a542d33-3fbf-497a-9129-f5fe4fee3e5a", "metadata": {"aucs": [0.2972871888421289, 0.2927076389408435, 0.31609483895385904, 0.2985988878987711, 0.2946811702813328, 0.29284649310690447, 0.2958255711209268, 0.31558132457743815, 0.2964842001712086, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0779218130441579, 0.08506949205524872, 0.0889202963959479, 0.08265764386342012, 0.08961951427304671, 0.0800463289514759, 0.07888293526879897, 0.07336076319350082, 0.0921951424601164, 0.07122466184834653, 0.08795936229459589, 0.06590452892606136, 0.074114821698537, 0.08469311222756737, 0.07058865225056399, 0.07852433400974101, 0.06884671872632575, 0.07841213102399924, 0.9507475331267028, 0.9336135572886012, 0.9133024738732843, 0.9872438437829144, 0.9609285964803307, 0.9321565303123324, 0.9412976842990901, 0.9254444793866923, 0.9272909119124539, 0.15629982768787376, 0.15408974855935775, 0.15888709612481267, 0.16454949269915542, 0.1678860947457591, 0.16940870464640956, 0.15109818622437032, 0.15686574426757194, 0.1847008553824655, 0.1916388728937396, 0.19410953086962057, 0.17741434867849126, 0.21709922563109563, 0.23385226380834867, 0.20076542188514157, 0.18524742393858096, 0.200304350213928, 0.18541168678837994, 0.08514064027216939, 0.09452682143275559, 0.07802443643903934, 0.09021047712519192, 0.09801173459074419, 0.092973785757268, 0.09407783127355818, 0.08413876701314071, 0.08708445253010488, 0.08241036275898839, 0.07210441325485173, 0.07651208511644492, 0.07761714826724275, 0.09763053558488233, 0.09478505734389764, 0.08243402603237249, 0.10264647703460628, 0.11257864467194245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037008216083903256, 0.07785058645454213, 0.07891198279778366, 0.0509296299915879, 0.06313296348364361, 0.044147471441371655, 0.04749545571271696, 0.042724879978812025, 0.060295397901183434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030958494316504215, 0.02510119909948716, 0.02336003261631936, 0.030765560553226323, 0.04455149525351898, 0.03832240066204917, 0.04711781471381271, 0.05016092240355463, 0.029512668843519663, 0.29040680123425777, 0.292753977948802, 0.28873978815907575, 0.3129714107235152, 0.3179161732103378, 0.2985810679855395, 0.2818378588449312, 0.28307005367460547, 0.30817526187533495, 0.08504161006974209, 0.08464334397942364, 0.0841725957667151, 0.0793514642131502, 0.07081067340858704, 0.07578193354449814, 0.07656466471603707, 0.07834251712052187, 0.08170573599083997, 0.1411966820783671, 0.14528504338119952, 0.1403924496861677, 0.1414716240809517, 0.1409369527958233, 0.1316112488136183, 0.13667463529133606, 0.14742795564630995, 0.13919202831580624, 0.21298566320270584, 0.19858948977207558, 0.205984125663496, 0.22245727834281614, 0.2154997070223832, 0.19904612991632453, 0.2131948308050362, 0.22685914899329973, 0.20314810121417937, 0.16626803781296728, 0.14218339373838684, 0.14126917985120313, 0.1482313853072612, 0.14843472667881485, 0.13267602721799976, 0.14116821606906416, 0.1466456637586503, 0.1793661500840038, 0.21403002874233257, 0.17685959322054745, 0.19419072704201967, 0.17152200681312024, 0.17850223061751735, 0.17880673804924085, 0.17418064197318017, 0.18323401174039833, 0.19017217315470147, 0.17829214126324455, 0.1704017332160569, 0.17655055670552244, 0.17332532553527258, 0.16958440275913622, 0.16803746016573806, 0.17428060786731348, 0.1664215875003825, 0.17837413843115735, 0.18368858116814035, 0.2461816811500659, 0.2523831973461229, 0.27198218455336065, 0.21818590476685207, 0.24031597403826532, 0.19015804933643665, 0.23105159925140484, 0.27562102775790354, 0.22378172806299468, 0.1686803805604835, 0.15080383396679353, 0.2346131742608406, 0.1996595939705379, 0.2055719788314182, 0.26879311802029715, 0.20124921484370584, 0.2189055654414832, 0.1847349138083082, 0.1892353962879605, 0.1982809696870832, 0.17354187450184577, 0.17630662089141003, 0.19200635055450488, 0.1816737973054543, 0.19297785315453952, 0.16981686756437253, 0.07249045564756329, 0.07258900035680926, 0.06149413678269944, 0.07575685415122768, 0.08082614377684916, 0.07414491911663312, 0.06996468604069672, 0.07442271036474235, 0.06421673163730435]}, "mutation_prompt": null}
{"id": "41aa5bf6-e827-421e-9ecd-a8b64fae54c5", "solution": "import numpy as np\n\nclass EnhancedABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Dynamically adjust the limit parameter based on fitness values\n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                new_solution = selected_solutions[i] + phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "EnhancedABCOptimizer", "description": "Enhance the ABCOptimizer by incorporating a dynamic adaptation of the limit parameter during the optimization process based on the fitness values.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1a542d33-3fbf-497a-9129-f5fe4fee3e5a", "metadata": {"aucs": [0.665795300722126, 0.657777518402304, 0.656405754526763, 0.6480342486093343, 0.6163109708062173, 0.6582006884749254, 0.6536957667944141, 0.6815820964402215, 0.6474292738697591, 0.332717832497186, 0.3379261744755029, 0.3400912996769796, 0.3316625414751301, 0.3549592755498857, 0.32313357797958675, 0.35961623100777307, 0.28338318404465423, 0.36961474823112317, 0.10879887608158645, 0.09680327508563913, 0.08877973235906123, 0.10454617980439129, 0.08964175403854446, 0.09746821736543665, 0.09066238646900415, 0.09143863148745446, 0.09815628584717129, 0.07669780502533252, 0.0797417833553169, 0.08173861309666408, 0.08409355469323132, 0.08247869615204362, 0.08088365216769777, 0.0777028382664926, 0.08636735402976303, 0.08925236148452254, 0.9371749622752211, 0.9603149678269036, 0.9471543012597027, 0.9177817361642772, 0.9162592999528034, 0.9408639939783675, 0.9337229197981728, 0.9277434571241752, 0.9181475749128325, 0.23033104387454117, 0.2347805107118739, 0.21943331219375117, 0.23204601304119943, 0.219126952370151, 0.21732450802475534, 0.19616395406484188, 0.23315664222957388, 0.22971832602478826, 0.21281262808787893, 0.21355973375897075, 0.1942510625551277, 0.23218016725438284, 0.24113959667294016, 0.19385869559189983, 0.23548203164784365, 0.23206192402161807, 0.20669075508224133, 0.138954940906575, 0.1334714314660812, 0.1534092840901774, 0.1463449705144929, 0.13289606471831017, 0.11786579116284468, 0.1310193580217407, 0.17006166335876882, 0.1445023506640769, 0.1356541146034077, 0.1385881520554345, 0.13417860847156138, 0.12797838171900733, 0.17765828942941575, 0.13831418100088122, 0.126737707377934, 0.1323207093757106, 0.1330157413707036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039965103363758914, 0.05557470518853591, 0.03990006003909208, 0.04171698143721436, 0.040365405605000904, 0.03431919460698207, 0.04576616644902076, 0.07020906265108484, 0.06978518287539559, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007045717587367273, 9.999999999998899e-05, 0.06926819271270235, 0.08229656246121597, 0.08291057707137583, 0.07055005857648544, 0.06969798238562674, 0.08794061974975409, 0.07874493048733622, 0.07018067240695403, 0.096595114049002, 0.40073314224059475, 0.4030176654726676, 0.39395999102738255, 0.43216183858547164, 0.4367395777410086, 0.44016946787360023, 0.40745899604744495, 0.42476400078966214, 0.4243014812695163, 0.08493085164166148, 0.08121334221625998, 0.09077126059565421, 0.08868839078558888, 0.07148403545283033, 0.08540984388918582, 0.08182841514580685, 0.07377631788833428, 0.08620269989910134, 0.14699280859022323, 0.14849618026921418, 0.14758257307977618, 0.13712280478690486, 0.1608013421038339, 0.14345074166253835, 0.13515284753725465, 0.16493590582083617, 0.13207523998938608, 0.22054174656653414, 0.24745150126868343, 0.2511611570092791, 0.21226736985588912, 0.22018100406480245, 0.22490310098101263, 0.23233145246300013, 0.2199349694675672, 0.2244199581201527, 0.14390799095463824, 0.16832741471938772, 0.1682541569390973, 0.15573653698002654, 0.15074564965264348, 0.15805508101227606, 0.16009040269485142, 0.17815934012285228, 0.15865780167383492, 0.22222488126090179, 0.1840483924053592, 0.1957229804088898, 0.1887814013410477, 0.1725074739954644, 0.18515559925043568, 0.1842594472294785, 0.19692751869319614, 0.18716138002732174, 0.19383381855306736, 0.19010341797160613, 0.1936203535230222, 0.18131611806689096, 0.18205080362658732, 0.1847885866629495, 0.18859322100006426, 0.19961435310901832, 0.18145642512830606, 0.2053676858422243, 0.2052091069768277, 0.24705967514237703, 0.25232810409404305, 0.24600435827003708, 0.21996229562964964, 0.17653407819310318, 0.18484143972028655, 0.31201224797163696, 0.23115339708151605, 0.2258293212724296, 0.2123817146129, 0.2190153101492276, 0.18236125465414554, 0.19483113824748388, 0.2404532241472932, 0.23443447396052286, 0.2098990067533183, 0.18320047544507712, 0.17315380440399764, 0.18427974687876725, 0.17949836500343186, 0.20108505772244734, 0.2110002297961059, 0.18786443071899106, 0.18429665881323765, 0.19294308366418034, 0.06590732332762672, 0.07974050974911151, 0.0634155489341578, 0.0693079750585881, 0.06660365825927916, 0.06679966499292755, 0.07305603976016206, 0.0778456506332299, 0.06999458476694376]}, "mutation_prompt": null}
{"id": "4bdcfc93-7690-4ecf-b9af-19419d4d97a0", "solution": "import numpy as np\n\nclass EnhancedABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.mutation_rate = 0.5\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * itr / self.budget))\n                new_solution = selected_solutions[i] + mutation_strength * phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "EnhancedABCOptimizerRefined", "description": "Refine the ABCO algorithm by introducing a mutation strategy that adapts based on the fitness landscape to enhance exploration and exploitation.", "configspace": "", "generation": 19, "fitness": 0.22079664150035083, "feedback": "The algorithm EnhancedABCOptimizerRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "1a542d33-3fbf-497a-9129-f5fe4fee3e5a", "metadata": {"aucs": [0.6547914836177227, 0.6387377988171945, 0.656494445980546, 0.6329102059482747, 0.6311678978835107, 0.6160263317524943, 0.6569818737299937, 0.6461093624621612, 0.6387031276616792, 0.2944835130795719, 0.29709861622040745, 0.2797138398236687, 0.29387649348748424, 0.30308763734658817, 0.29654999428338613, 0.277609150298194, 0.28055911406680867, 0.30918494715108447, 0.10285619417574487, 0.08845240985087166, 0.11155118145365173, 0.10758574513096175, 0.09666716539491649, 0.11154393704708276, 0.09953052775356375, 0.09731913154396954, 0.08584087302294718, 0.08438336581752937, 0.08973282609098421, 0.08713834271543586, 0.10117004486490255, 0.08690489713775784, 0.0836152404467746, 0.08954932037523544, 0.08088739822402569, 0.08083659949371647, 0.907061134353514, 0.8648603820563217, 0.9028730931011139, 0.896325886131657, 0.8670893111654656, 0.9105590750065896, 0.8881542358824619, 0.8657812734462036, 0.8898412650001066, 0.2575611386020743, 0.2281508412108162, 0.2499593347779171, 0.2702846679875328, 0.2732375251172994, 0.24126255776833982, 0.24476738015207766, 0.24537855321372548, 0.26166419296303955, 0.256656449447649, 0.24452238500685364, 0.2580129268966074, 0.2714347714136298, 0.28332205143813227, 0.2581347599732017, 0.2719820678459669, 0.26373555545268723, 0.22110832703169647, 0.15900901132827272, 0.17940851716146122, 0.16439656252784984, 0.1838891746576996, 0.18683180310766567, 0.16203153997546038, 0.1906935441462423, 0.1709634192431766, 0.21849576187440944, 0.1549577862619853, 0.14787681273279618, 0.14666984366496416, 0.19833636020111056, 0.15289590351198512, 0.18106227359920835, 0.15964641744075636, 0.16405884148770333, 0.15383770447218048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07900597830146538, 0.0657237905668846, 0.09917518387349589, 0.05654281918186732, 0.048870213090441705, 0.05956160040875924, 0.07300724092177757, 0.09910940572896598, 0.09303530649025382, 9.999999999998899e-05, 0.0002618717247292457, 9.999999999998899e-05, 0.007071206649434836, 9.999999999998899e-05, 0.0008783124554331279, 9.999999999998899e-05, 0.0012722440657269019, 0.03811591125012748, 0.09613992383661696, 0.08730372980835222, 0.09664793184592202, 0.10289853614724509, 0.10309742405521916, 0.09544595532661937, 0.10232233501702626, 0.09930062529663719, 0.11026531847292986, 0.44945083577979184, 0.43746027184591696, 0.43458099694528374, 0.44490983982147325, 0.41438192923855044, 0.43278330871412807, 0.4441254230335645, 0.44583036821030575, 0.46794169348058834, 0.1337846062225363, 0.10968347355958308, 0.08537716893933534, 0.0961474599442963, 0.07391482382335912, 0.08125424491193811, 0.08877541475079742, 0.08120642920003995, 0.07589591431224507, 0.14304371233504265, 0.19170966326842975, 0.1555737202307932, 0.16090941227210698, 0.16192525343125486, 0.14363999741849587, 0.18387219182413705, 0.14272161121761096, 0.15575751931557047, 0.22442332385806119, 0.23222282839781216, 0.22695752203410813, 0.22812635581851648, 0.23522513101411768, 0.22051322591924705, 0.22832171364076104, 0.22989118142426612, 0.21537764549217586, 0.1895115578007287, 0.17274666820296591, 0.1795914057008695, 0.17486416799944837, 0.181169163326651, 0.18044825201349046, 0.16858963342627264, 0.1650292988672898, 0.15987325262510643, 0.19692253458588826, 0.1755761332875143, 0.20359516135983435, 0.2041750406992332, 0.18835641903962863, 0.18046052738833607, 0.19313267093472863, 0.2404684298396048, 0.2066338761836004, 0.19248523849346366, 0.1961591334389361, 0.18911066416870614, 0.18561635356290418, 0.18408331832286762, 0.20487845588082387, 0.18623905900988524, 0.18874278702752956, 0.19826813866562332, 0.2613837720655128, 0.2496858811860505, 0.3102392430184434, 0.3042380620638545, 0.18204049808946998, 0.3323109710152231, 0.2159805605444438, 0.18068059504127765, 0.2851113265337082, 0.2903223812205802, 0.3020199872672169, 0.22686247343566668, 0.33181330141999565, 0.25523025922235243, 0.21224892568657838, 0.1871125725246412, 0.23273403373167956, 0.2640408606484651, 0.20583177579805023, 0.1832872175466328, 0.1859403969726786, 0.1746780482765493, 0.18181710134822804, 0.18570540896182608, 0.17732774691119324, 0.17607937130278295, 0.18505376783909733, 0.07112378269525943, 0.07187560020187811, 0.07471423353460616, 0.0688902965593634, 0.07074716174010531, 0.08416055347870222, 0.07530666686662246, 0.07923692741444377, 0.07701292991005015]}, "mutation_prompt": null}
{"id": "c9943eb4-5717-4b68-8398-e06cc238f064", "solution": "import numpy as np\n\nclass EnhancedABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.mutation_rate = 0.5\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * itr / self.budget))\n                new_solution = selected_solutions[i] + mutation_strength * phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "EnhancedABCOptimizerRefined", "description": "Refine the ABCO algorithm by introducing a mutation strategy that adapts based on the fitness landscape to enhance exploration and exploitation.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4bdcfc93-7690-4ecf-b9af-19419d4d97a0", "metadata": {"aucs": [0.6547914836177227, 0.6387377988171945, 0.656494445980546, 0.6329102059482747, 0.6311678978835107, 0.6160263317524943, 0.6569818737299937, 0.6461093624621612, 0.6387031276616792, 0.2944835130795719, 0.29709861622040745, 0.2797138398236687, 0.29387649348748424, 0.30308763734658817, 0.29654999428338613, 0.277609150298194, 0.28055911406680867, 0.30918494715108447, 0.10285619417574487, 0.08845240985087166, 0.11155118145365173, 0.10758574513096175, 0.09666716539491649, 0.11154393704708276, 0.09953052775356375, 0.09731913154396954, 0.08584087302294718, 0.08438336581752937, 0.08973282609098421, 0.08713834271543586, 0.10117004486490255, 0.08690489713775784, 0.0836152404467746, 0.08954932037523544, 0.08088739822402569, 0.08083659949371647, 0.907061134353514, 0.8648603820563217, 0.9028730931011139, 0.896325886131657, 0.8670893111654656, 0.9105590750065896, 0.8881542358824619, 0.8657812734462036, 0.8898412650001066, 0.2575611386020743, 0.2281508412108162, 0.2499593347779171, 0.2702846679875328, 0.2732375251172994, 0.24126255776833982, 0.24476738015207766, 0.24537855321372548, 0.26166419296303955, 0.256656449447649, 0.24452238500685364, 0.2580129268966074, 0.2714347714136298, 0.28332205143813227, 0.2581347599732017, 0.2719820678459669, 0.26373555545268723, 0.22110832703169647, 0.15900901132827272, 0.17940851716146122, 0.16439656252784984, 0.1838891746576996, 0.18683180310766567, 0.16203153997546038, 0.1906935441462423, 0.1709634192431766, 0.21849576187440944, 0.1549577862619853, 0.14787681273279618, 0.14666984366496416, 0.19833636020111056, 0.15289590351198512, 0.18106227359920835, 0.15964641744075636, 0.16405884148770333, 0.15383770447218048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07900597830146538, 0.0657237905668846, 0.09917518387349589, 0.05654281918186732, 0.048870213090441705, 0.05956160040875924, 0.07300724092177757, 0.09910940572896598, 0.09303530649025382, 9.999999999998899e-05, 0.0002618717247292457, 9.999999999998899e-05, 0.007071206649434836, 9.999999999998899e-05, 0.0008783124554331279, 9.999999999998899e-05, 0.0012722440657269019, 0.03811591125012748, 0.09613992383661696, 0.08730372980835222, 0.09664793184592202, 0.10289853614724509, 0.10309742405521916, 0.09544595532661937, 0.10232233501702626, 0.09930062529663719, 0.11026531847292986, 0.44945083577979184, 0.43746027184591696, 0.43458099694528374, 0.44490983982147325, 0.41438192923855044, 0.43278330871412807, 0.4441254230335645, 0.44583036821030575, 0.46794169348058834, 0.1337846062225363, 0.10968347355958308, 0.08537716893933534, 0.0961474599442963, 0.07391482382335912, 0.08125424491193811, 0.08877541475079742, 0.08120642920003995, 0.07589591431224507, 0.14304371233504265, 0.19170966326842975, 0.1555737202307932, 0.16090941227210698, 0.16192525343125486, 0.14363999741849587, 0.18387219182413705, 0.14272161121761096, 0.15575751931557047, 0.22442332385806119, 0.23222282839781216, 0.22695752203410813, 0.22812635581851648, 0.23522513101411768, 0.22051322591924705, 0.22832171364076104, 0.22989118142426612, 0.21537764549217586, 0.1895115578007287, 0.17274666820296591, 0.1795914057008695, 0.17486416799944837, 0.181169163326651, 0.18044825201349046, 0.16858963342627264, 0.1650292988672898, 0.15987325262510643, 0.19692253458588826, 0.1755761332875143, 0.20359516135983435, 0.2041750406992332, 0.18835641903962863, 0.18046052738833607, 0.19313267093472863, 0.2404684298396048, 0.2066338761836004, 0.19248523849346366, 0.1961591334389361, 0.18911066416870614, 0.18561635356290418, 0.18408331832286762, 0.20487845588082387, 0.18623905900988524, 0.18874278702752956, 0.19826813866562332, 0.2613837720655128, 0.2496858811860505, 0.3102392430184434, 0.3042380620638545, 0.18204049808946998, 0.3323109710152231, 0.2159805605444438, 0.18068059504127765, 0.2851113265337082, 0.2903223812205802, 0.3020199872672169, 0.22686247343566668, 0.33181330141999565, 0.25523025922235243, 0.21224892568657838, 0.1871125725246412, 0.23273403373167956, 0.2640408606484651, 0.20583177579805023, 0.1832872175466328, 0.1859403969726786, 0.1746780482765493, 0.18181710134822804, 0.18570540896182608, 0.17732774691119324, 0.17607937130278295, 0.18505376783909733, 0.07112378269525943, 0.07187560020187811, 0.07471423353460616, 0.0688902965593634, 0.07074716174010531, 0.08416055347870222, 0.07530666686662246, 0.07923692741444377, 0.07701292991005015]}, "mutation_prompt": null}
{"id": "b6fe1ca2-72b2-40f6-a309-5f9a6afee661", "solution": "import numpy as np\n\nclass EnhancedABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.mutation_rate = 0.5\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * itr / self.budget))\n                new_solution = selected_solutions[i] + mutation_strength * phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "EnhancedABCOptimizerRefined", "description": "Refine the ABCO algorithm by introducing a mutation strategy that adapts based on the fitness landscape to enhance exploration and exploitation.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4bdcfc93-7690-4ecf-b9af-19419d4d97a0", "metadata": {"aucs": [0.6547914836177227, 0.6387377988171945, 0.656494445980546, 0.6329102059482747, 0.6311678978835107, 0.6160263317524943, 0.6569818737299937, 0.6461093624621612, 0.6387031276616792, 0.2944835130795719, 0.29709861622040745, 0.2797138398236687, 0.29387649348748424, 0.30308763734658817, 0.29654999428338613, 0.277609150298194, 0.28055911406680867, 0.30918494715108447, 0.10285619417574487, 0.08845240985087166, 0.11155118145365173, 0.10758574513096175, 0.09666716539491649, 0.11154393704708276, 0.09953052775356375, 0.09731913154396954, 0.08584087302294718, 0.08438336581752937, 0.08973282609098421, 0.08713834271543586, 0.10117004486490255, 0.08690489713775784, 0.0836152404467746, 0.08954932037523544, 0.08088739822402569, 0.08083659949371647, 0.907061134353514, 0.8648603820563217, 0.9028730931011139, 0.896325886131657, 0.8670893111654656, 0.9105590750065896, 0.8881542358824619, 0.8657812734462036, 0.8898412650001066, 0.2575611386020743, 0.2281508412108162, 0.2499593347779171, 0.2702846679875328, 0.2732375251172994, 0.24126255776833982, 0.24476738015207766, 0.24537855321372548, 0.26166419296303955, 0.256656449447649, 0.24452238500685364, 0.2580129268966074, 0.2714347714136298, 0.28332205143813227, 0.2581347599732017, 0.2719820678459669, 0.26373555545268723, 0.22110832703169647, 0.15900901132827272, 0.17940851716146122, 0.16439656252784984, 0.1838891746576996, 0.18683180310766567, 0.16203153997546038, 0.1906935441462423, 0.1709634192431766, 0.21849576187440944, 0.1549577862619853, 0.14787681273279618, 0.14666984366496416, 0.19833636020111056, 0.15289590351198512, 0.18106227359920835, 0.15964641744075636, 0.16405884148770333, 0.15383770447218048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07900597830146538, 0.0657237905668846, 0.09917518387349589, 0.05654281918186732, 0.048870213090441705, 0.05956160040875924, 0.07300724092177757, 0.09910940572896598, 0.09303530649025382, 9.999999999998899e-05, 0.0002618717247292457, 9.999999999998899e-05, 0.007071206649434836, 9.999999999998899e-05, 0.0008783124554331279, 9.999999999998899e-05, 0.0012722440657269019, 0.03811591125012748, 0.09613992383661696, 0.08730372980835222, 0.09664793184592202, 0.10289853614724509, 0.10309742405521916, 0.09544595532661937, 0.10232233501702626, 0.09930062529663719, 0.11026531847292986, 0.44945083577979184, 0.43746027184591696, 0.43458099694528374, 0.44490983982147325, 0.41438192923855044, 0.43278330871412807, 0.4441254230335645, 0.44583036821030575, 0.46794169348058834, 0.1337846062225363, 0.10968347355958308, 0.08537716893933534, 0.0961474599442963, 0.07391482382335912, 0.08125424491193811, 0.08877541475079742, 0.08120642920003995, 0.07589591431224507, 0.14304371233504265, 0.19170966326842975, 0.1555737202307932, 0.16090941227210698, 0.16192525343125486, 0.14363999741849587, 0.18387219182413705, 0.14272161121761096, 0.15575751931557047, 0.22442332385806119, 0.23222282839781216, 0.22695752203410813, 0.22812635581851648, 0.23522513101411768, 0.22051322591924705, 0.22832171364076104, 0.22989118142426612, 0.21537764549217586, 0.1895115578007287, 0.17274666820296591, 0.1795914057008695, 0.17486416799944837, 0.181169163326651, 0.18044825201349046, 0.16858963342627264, 0.1650292988672898, 0.15987325262510643, 0.19692253458588826, 0.1755761332875143, 0.20359516135983435, 0.2041750406992332, 0.18835641903962863, 0.18046052738833607, 0.19313267093472863, 0.2404684298396048, 0.2066338761836004, 0.19248523849346366, 0.1961591334389361, 0.18911066416870614, 0.18561635356290418, 0.18408331832286762, 0.20487845588082387, 0.18623905900988524, 0.18874278702752956, 0.19826813866562332, 0.2613837720655128, 0.2496858811860505, 0.3102392430184434, 0.3042380620638545, 0.18204049808946998, 0.3323109710152231, 0.2159805605444438, 0.18068059504127765, 0.2851113265337082, 0.2903223812205802, 0.3020199872672169, 0.22686247343566668, 0.33181330141999565, 0.25523025922235243, 0.21224892568657838, 0.1871125725246412, 0.23273403373167956, 0.2640408606484651, 0.20583177579805023, 0.1832872175466328, 0.1859403969726786, 0.1746780482765493, 0.18181710134822804, 0.18570540896182608, 0.17732774691119324, 0.17607937130278295, 0.18505376783909733, 0.07112378269525943, 0.07187560020187811, 0.07471423353460616, 0.0688902965593634, 0.07074716174010531, 0.08416055347870222, 0.07530666686662246, 0.07923692741444377, 0.07701292991005015]}, "mutation_prompt": null}
{"id": "212d5edf-54dc-4a5d-8e00-f0c13df9ce85", "solution": "import numpy as np\n\nclass AdaptiveABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.mutation_rate = 0.5\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "AdaptiveABCOptimizerRefined", "description": "Enhance the mutation strategy by incorporating a dynamic adaptive mutation rate based on the individual fitness improvement to balance exploration and exploitation.", "configspace": "", "generation": 22, "fitness": 0.22600978941891783, "feedback": "The algorithm AdaptiveABCOptimizerRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "4bdcfc93-7690-4ecf-b9af-19419d4d97a0", "metadata": {"aucs": [0.6595433240365253, 0.6742041153111925, 0.6829950334739303, 0.6776342788489753, 0.6970599649567316, 0.6700740286169184, 0.6994356518618441, 0.6981863701987199, 0.6719896200149114, 0.38650550395868166, 0.3486789631799162, 0.38429814978910715, 0.3412846659210622, 0.3443240708258153, 0.3812373675270392, 0.3941437389300423, 0.3558674856444892, 0.40082290011704, 0.1088302443456618, 0.09088539005143126, 0.11072734884641344, 0.10110119782177385, 0.1021756328573209, 0.09733085465706826, 0.08215835882001232, 0.09570487756244384, 0.10858030122947382, 0.08609717169396003, 0.09742474648618737, 0.0962063245898882, 0.10196159113912251, 0.09065651481487258, 0.09072897015672354, 0.08513977730952516, 0.09571514806294168, 0.09045354160559071, 0.9568506852257153, 0.9521874039259725, 0.9274310315304877, 0.893468926174835, 0.9418780779403053, 0.9486384791436385, 0.9259714380432076, 0.9264235549310385, 0.9405275783028547, 0.2615456843454135, 0.2317864686861324, 0.2822690729951387, 0.23553499710124803, 0.23681240539560633, 0.2819652173947005, 0.2828226423245339, 0.2704832366213764, 0.23656470416896236, 0.23509119035512727, 0.23970586484070677, 0.23026406763218088, 0.29573054563983336, 0.2756604246072337, 0.28627407524333115, 0.2501924831738852, 0.22977142758506075, 0.2969879824910103, 0.14090910871612128, 0.17186766788458496, 0.13892990232618918, 0.15660520030987213, 0.1535233724600935, 0.1299219350580546, 0.13046543270097266, 0.14739153226675694, 0.16900032688532052, 0.134440402423751, 0.1108522390961787, 0.18303837415039903, 0.14339675029262, 0.16053777245322287, 0.17301814275889815, 0.1543702941346472, 0.12154068477235647, 0.15317496757118076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04409418325701464, 0.05557470518853591, 0.04986800770889843, 0.05684571894939161, 0.0732257880565712, 0.05570053404390363, 0.045766165488771327, 0.07725447248724959, 0.05201659545056758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021202583765139726, 0.08103400637905034, 0.08513957457699384, 0.09263124629959474, 0.08253863533917194, 0.09924004625731764, 0.0961639679585734, 0.08890928115224617, 0.09729853809319211, 0.09622869283473501, 0.4453819555098856, 0.4393995731452177, 0.44849004647828805, 0.4446882763646468, 0.4573671513466807, 0.43583973632490347, 0.45986973621112903, 0.44898895693431107, 0.4438280352840508, 0.09421399536672492, 0.08744313050459496, 0.08458755399210227, 0.09165279279534311, 0.0823083646053665, 0.06727613087641748, 0.09582575974163321, 0.07820718290690365, 0.08892724439307154, 0.1391838121817882, 0.16458626247651487, 0.15694098625100927, 0.13301424180720645, 0.16650251974214458, 0.14502305697322138, 0.1526982306938942, 0.21586885400961775, 0.13930275092172995, 0.2180356768000996, 0.22036875257520883, 0.22904289395335675, 0.23275964128517623, 0.24778262587260813, 0.250648303969325, 0.2369508524925945, 0.2577699976057878, 0.23684922806444397, 0.17699578798407078, 0.1776351911377103, 0.17816013492025773, 0.16693467888841185, 0.15671799436289235, 0.16481977898793665, 0.17722933188985246, 0.19189482378215128, 0.19631758065203364, 0.20291207711191872, 0.1832644316431451, 0.1838014315583042, 0.1873484996973529, 0.17792604758249186, 0.18954415654513168, 0.1980576647037574, 0.1945364760900964, 0.1887235534344497, 0.19435051274948023, 0.19276378586722098, 0.19116646912678426, 0.1946986839100282, 0.18833666470152344, 0.19560906262930822, 0.19857567586020497, 0.20125022119960034, 0.18904844999472548, 0.24634231877962298, 0.26381131779252487, 0.24008121868252807, 0.32161062156566733, 0.21223386694713287, 0.26718665578079426, 0.27751561608975095, 0.2709113417692536, 0.33479861532721056, 0.24160370424919797, 0.2735336658817832, 0.2881291258372479, 0.2680091720085832, 0.2615722079794044, 0.19832340054324826, 0.2545864007322183, 0.341424847868377, 0.27165141151707584, 0.18964783012129383, 0.17529796447779067, 0.17767439551592756, 0.1808771459814964, 0.18118678866107996, 0.2062179425493621, 0.1872607441682681, 0.19650659746762178, 0.18005307336309562, 0.07003960660024877, 0.06760145972076514, 0.07416686039656273, 0.0727474767502756, 0.06621250738411655, 0.07096206645456171, 0.08136535730553518, 0.07163959809565768, 0.0797506974107337]}, "mutation_prompt": null}
{"id": "091033dd-3a7d-46c1-9f13-d6a82a4b113d", "solution": "import numpy as np\n\nclass EnhancedABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.mutation_rate = 0.5\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            self.population_size = int(50 * (1 - itr / self.budget))\n            population = np.vstack((population, self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)))\n            fitness_values = np.concatenate((fitness_values, np.array([func(individual) for individual in population[-self.population_size:]]))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "EnhancedABCOptimizer", "description": "Improve exploration by introducing dynamic population size adjustment to enhance diversity during the optimization process.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 29, 39, '            for i in range(self.limit):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 29, 39, '            for i in range(self.limit):\\n'))", "parent_id": "212d5edf-54dc-4a5d-8e00-f0c13df9ce85", "metadata": {}, "mutation_prompt": null}
{"id": "4347ee76-89ff-4ff9-bf21-6bc29edf40dc", "solution": "import numpy as np\n\nclass AdaptiveABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.mutation_rate = 0.5\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "AdaptiveABCOptimizerRefined", "description": "Enhance the mutation strategy by incorporating a dynamic adaptive mutation rate based on the individual fitness improvement to balance exploration and exploitation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "212d5edf-54dc-4a5d-8e00-f0c13df9ce85", "metadata": {"aucs": [0.6595433240365253, 0.6742041153111925, 0.6829950334739303, 0.6776342788489753, 0.6970599649567316, 0.6700740286169184, 0.6994356518618441, 0.6981863701987199, 0.6719896200149114, 0.38650550395868166, 0.3486789631799162, 0.38429814978910715, 0.3412846659210622, 0.3443240708258153, 0.3812373675270392, 0.3941437389300423, 0.3558674856444892, 0.40082290011704, 0.1088302443456618, 0.09088539005143126, 0.11072734884641344, 0.10110119782177385, 0.1021756328573209, 0.09733085465706826, 0.08215835882001232, 0.09570487756244384, 0.10858030122947382, 0.08609717169396003, 0.09742474648618737, 0.0962063245898882, 0.10196159113912251, 0.09065651481487258, 0.09072897015672354, 0.08513977730952516, 0.09571514806294168, 0.09045354160559071, 0.9568506852257153, 0.9521874039259725, 0.9274310315304877, 0.893468926174835, 0.9418780779403053, 0.9486384791436385, 0.9259714380432076, 0.9264235549310385, 0.9405275783028547, 0.2615456843454135, 0.2317864686861324, 0.2822690729951387, 0.23553499710124803, 0.23681240539560633, 0.2819652173947005, 0.2828226423245339, 0.2704832366213764, 0.23656470416896236, 0.23509119035512727, 0.23970586484070677, 0.23026406763218088, 0.29573054563983336, 0.2756604246072337, 0.28627407524333115, 0.2501924831738852, 0.22977142758506075, 0.2969879824910103, 0.14090910871612128, 0.17186766788458496, 0.13892990232618918, 0.15660520030987213, 0.1535233724600935, 0.1299219350580546, 0.13046543270097266, 0.14739153226675694, 0.16900032688532052, 0.134440402423751, 0.1108522390961787, 0.18303837415039903, 0.14339675029262, 0.16053777245322287, 0.17301814275889815, 0.1543702941346472, 0.12154068477235647, 0.15317496757118076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04409418325701464, 0.05557470518853591, 0.04986800770889843, 0.05684571894939161, 0.0732257880565712, 0.05570053404390363, 0.045766165488771327, 0.07725447248724959, 0.05201659545056758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021202583765139726, 0.08103400637905034, 0.08513957457699384, 0.09263124629959474, 0.08253863533917194, 0.09924004625731764, 0.0961639679585734, 0.08890928115224617, 0.09729853809319211, 0.09622869283473501, 0.4453819555098856, 0.4393995731452177, 0.44849004647828805, 0.4446882763646468, 0.4573671513466807, 0.43583973632490347, 0.45986973621112903, 0.44898895693431107, 0.4438280352840508, 0.09421399536672492, 0.08744313050459496, 0.08458755399210227, 0.09165279279534311, 0.0823083646053665, 0.06727613087641748, 0.09582575974163321, 0.07820718290690365, 0.08892724439307154, 0.1391838121817882, 0.16458626247651487, 0.15694098625100927, 0.13301424180720645, 0.16650251974214458, 0.14502305697322138, 0.1526982306938942, 0.21586885400961775, 0.13930275092172995, 0.2180356768000996, 0.22036875257520883, 0.22904289395335675, 0.23275964128517623, 0.24778262587260813, 0.250648303969325, 0.2369508524925945, 0.2577699976057878, 0.23684922806444397, 0.17699578798407078, 0.1776351911377103, 0.17816013492025773, 0.16693467888841185, 0.15671799436289235, 0.16481977898793665, 0.17722933188985246, 0.19189482378215128, 0.19631758065203364, 0.20291207711191872, 0.1832644316431451, 0.1838014315583042, 0.1873484996973529, 0.17792604758249186, 0.18954415654513168, 0.1980576647037574, 0.1945364760900964, 0.1887235534344497, 0.19435051274948023, 0.19276378586722098, 0.19116646912678426, 0.1946986839100282, 0.18833666470152344, 0.19560906262930822, 0.19857567586020497, 0.20125022119960034, 0.18904844999472548, 0.24634231877962298, 0.26381131779252487, 0.24008121868252807, 0.32161062156566733, 0.21223386694713287, 0.26718665578079426, 0.27751561608975095, 0.2709113417692536, 0.33479861532721056, 0.24160370424919797, 0.2735336658817832, 0.2881291258372479, 0.2680091720085832, 0.2615722079794044, 0.19832340054324826, 0.2545864007322183, 0.341424847868377, 0.27165141151707584, 0.18964783012129383, 0.17529796447779067, 0.17767439551592756, 0.1808771459814964, 0.18118678866107996, 0.2062179425493621, 0.1872607441682681, 0.19650659746762178, 0.18005307336309562, 0.07003960660024877, 0.06760145972076514, 0.07416686039656273, 0.0727474767502756, 0.06621250738411655, 0.07096206645456171, 0.08136535730553518, 0.07163959809565768, 0.0797506974107337]}, "mutation_prompt": null}
{"id": "8070e955-a304-4345-8d85-ff797da2c197", "solution": "import numpy as np\n\nclass AdaptiveABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.mutation_rate = 0.5\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * phi * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "AdaptiveABCOptimizerRefined", "description": "Enhance the mutation strategy by incorporating a dynamic adaptive mutation rate based on the individual fitness improvement to balance exploration and exploitation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "212d5edf-54dc-4a5d-8e00-f0c13df9ce85", "metadata": {"aucs": [0.6595433240365253, 0.6742041153111925, 0.6829950334739303, 0.6776342788489753, 0.6970599649567316, 0.6700740286169184, 0.6994356518618441, 0.6981863701987199, 0.6719896200149114, 0.38650550395868166, 0.3486789631799162, 0.38429814978910715, 0.3412846659210622, 0.3443240708258153, 0.3812373675270392, 0.3941437389300423, 0.3558674856444892, 0.40082290011704, 0.1088302443456618, 0.09088539005143126, 0.11072734884641344, 0.10110119782177385, 0.1021756328573209, 0.09733085465706826, 0.08215835882001232, 0.09570487756244384, 0.10858030122947382, 0.08609717169396003, 0.09742474648618737, 0.0962063245898882, 0.10196159113912251, 0.09065651481487258, 0.09072897015672354, 0.08513977730952516, 0.09571514806294168, 0.09045354160559071, 0.9568506852257153, 0.9521874039259725, 0.9274310315304877, 0.893468926174835, 0.9418780779403053, 0.9486384791436385, 0.9259714380432076, 0.9264235549310385, 0.9405275783028547, 0.2615456843454135, 0.2317864686861324, 0.2822690729951387, 0.23553499710124803, 0.23681240539560633, 0.2819652173947005, 0.2828226423245339, 0.2704832366213764, 0.23656470416896236, 0.23509119035512727, 0.23970586484070677, 0.23026406763218088, 0.29573054563983336, 0.2756604246072337, 0.28627407524333115, 0.2501924831738852, 0.22977142758506075, 0.2969879824910103, 0.14090910871612128, 0.17186766788458496, 0.13892990232618918, 0.15660520030987213, 0.1535233724600935, 0.1299219350580546, 0.13046543270097266, 0.14739153226675694, 0.16900032688532052, 0.134440402423751, 0.1108522390961787, 0.18303837415039903, 0.14339675029262, 0.16053777245322287, 0.17301814275889815, 0.1543702941346472, 0.12154068477235647, 0.15317496757118076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04409418325701464, 0.05557470518853591, 0.04986800770889843, 0.05684571894939161, 0.0732257880565712, 0.05570053404390363, 0.045766165488771327, 0.07725447248724959, 0.05201659545056758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021202583765139726, 0.08103400637905034, 0.08513957457699384, 0.09263124629959474, 0.08253863533917194, 0.09924004625731764, 0.0961639679585734, 0.08890928115224617, 0.09729853809319211, 0.09622869283473501, 0.4453819555098856, 0.4393995731452177, 0.44849004647828805, 0.4446882763646468, 0.4573671513466807, 0.43583973632490347, 0.45986973621112903, 0.44898895693431107, 0.4438280352840508, 0.09421399536672492, 0.08744313050459496, 0.08458755399210227, 0.09165279279534311, 0.0823083646053665, 0.06727613087641748, 0.09582575974163321, 0.07820718290690365, 0.08892724439307154, 0.1391838121817882, 0.16458626247651487, 0.15694098625100927, 0.13301424180720645, 0.16650251974214458, 0.14502305697322138, 0.1526982306938942, 0.21586885400961775, 0.13930275092172995, 0.2180356768000996, 0.22036875257520883, 0.22904289395335675, 0.23275964128517623, 0.24778262587260813, 0.250648303969325, 0.2369508524925945, 0.2577699976057878, 0.23684922806444397, 0.17699578798407078, 0.1776351911377103, 0.17816013492025773, 0.16693467888841185, 0.15671799436289235, 0.16481977898793665, 0.17722933188985246, 0.19189482378215128, 0.19631758065203364, 0.20291207711191872, 0.1832644316431451, 0.1838014315583042, 0.1873484996973529, 0.17792604758249186, 0.18954415654513168, 0.1980576647037574, 0.1945364760900964, 0.1887235534344497, 0.19435051274948023, 0.19276378586722098, 0.19116646912678426, 0.1946986839100282, 0.18833666470152344, 0.19560906262930822, 0.19857567586020497, 0.20125022119960034, 0.18904844999472548, 0.24634231877962298, 0.26381131779252487, 0.24008121868252807, 0.32161062156566733, 0.21223386694713287, 0.26718665578079426, 0.27751561608975095, 0.2709113417692536, 0.33479861532721056, 0.24160370424919797, 0.2735336658817832, 0.2881291258372479, 0.2680091720085832, 0.2615722079794044, 0.19832340054324826, 0.2545864007322183, 0.341424847868377, 0.27165141151707584, 0.18964783012129383, 0.17529796447779067, 0.17767439551592756, 0.1808771459814964, 0.18118678866107996, 0.2062179425493621, 0.1872607441682681, 0.19650659746762178, 0.18005307336309562, 0.07003960660024877, 0.06760145972076514, 0.07416686039656273, 0.0727474767502756, 0.06621250738411655, 0.07096206645456171, 0.08136535730553518, 0.07163959809565768, 0.0797506974107337]}, "mutation_prompt": null}
{"id": "9f9b3a5f-5ed7-4d88-8b5f-ea716543216e", "solution": "import numpy as np\n\nclass ChaoticABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.mutation_rate = 0.5\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi))  # Novel chaotic sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "ChaoticABCOptimizerRefined", "description": "Improve exploration by incorporating a novel chaotic search strategy to enhance population diversity and avoid local optima.", "configspace": "", "generation": 26, "fitness": 0.22830413818826262, "feedback": "The algorithm ChaoticABCOptimizerRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "212d5edf-54dc-4a5d-8e00-f0c13df9ce85", "metadata": {"aucs": [0.6852475603795716, 0.6715154141638668, 0.678720034730348, 0.6871988496483423, 0.7065555060114523, 0.6633598074559095, 0.6768459897408186, 0.6875012413678567, 0.6729911773569953, 0.31605080305841815, 0.3084116092664346, 0.34262658757321873, 0.3256843474667964, 0.32814543857597667, 0.36928256897848855, 0.3468657412498116, 0.34598017654827184, 0.35123684936193045, 0.09192164097702338, 0.08960173539565364, 0.10202148129527866, 0.09511897423205606, 0.10174936358088504, 0.09766787617875272, 0.09392780195471295, 0.09196540271294051, 0.09301575348209445, 0.09669418853348966, 0.08810945143691551, 0.08046276475124592, 0.08415549106071718, 0.08495010820383508, 0.08262618081729212, 0.09212016452106686, 0.09236065972222218, 0.09331328207722456, 0.9365608860876977, 0.9376076289187404, 0.906522880044529, 0.9446041577755375, 0.9294952814556414, 0.9313760033937308, 0.9141429288268831, 0.8576981174543976, 0.8942387396292218, 0.25277741068834747, 0.2672196857715585, 0.2844415057869879, 0.2592353718201651, 0.2801428081650258, 0.2740960045685493, 0.2743637372447181, 0.27818627167125065, 0.2636321671396582, 0.2528077448529361, 0.2774731876958494, 0.2660595106947652, 0.2715483297451283, 0.3160691110314048, 0.2926421643775621, 0.29682931528863155, 0.2674656043101402, 0.2988408269746863, 0.16047794524700476, 0.20104604048804842, 0.17222568778109448, 0.17553260395930426, 0.15324126626607726, 0.15474675688663575, 0.16775190574816357, 0.1809539582899441, 0.1881639967236154, 0.16874482020056114, 0.15147412034101948, 0.13439396653859892, 0.16507686051114756, 0.15365039643652978, 0.14124982656292517, 0.20562458211867118, 0.16057839095665627, 0.13772252481509673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08398433090758661, 0.0828102700059632, 0.05448753150724095, 0.047404431320069995, 0.07829183388176575, 0.10076722766657642, 0.04176760911203525, 0.05234959445183851, 0.11780403982231769, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012694037397260605, 9.999999999998899e-05, 0.08424689946167707, 0.09135928575241892, 0.10671403185648565, 0.10308033605709133, 0.12500567123807993, 0.10848412681493869, 0.09775426704379353, 0.10878251287469576, 0.09629303617313123, 0.44947038343918444, 0.44984369941700975, 0.46103828048567097, 0.45260802049970483, 0.46622941935373075, 0.46497832982496834, 0.44899033647383724, 0.462476986153443, 0.44840222533704366, 0.09183553684891577, 0.08504875734520223, 0.08229696852125967, 0.08312741034458382, 0.07364113140245787, 0.08917588813301569, 0.07895121934781313, 0.09433540621417502, 0.09492152238657059, 0.14965179761963132, 0.15211494931471703, 0.14730660887161717, 0.1511892579416272, 0.1761224711447672, 0.15201268236894283, 0.1609295847412584, 0.15292358265229689, 0.14245657148816027, 0.24521697377085994, 0.2456326648428807, 0.2635720024735897, 0.24355984007305698, 0.2381950040962555, 0.2306407998317873, 0.2505023353014548, 0.2537895378441568, 0.2405129982416755, 0.18612000521400418, 0.16862668965682914, 0.18152476177263333, 0.17322317258275977, 0.17089084596464088, 0.1758365813695555, 0.1835763395983998, 0.18984582664023286, 0.17707354600517589, 0.18743153368781573, 0.1999353578473132, 0.19188118097907358, 0.18675732361868014, 0.20312954976833653, 0.1852605625282817, 0.19198295813697475, 0.19072011658889676, 0.19005176531875712, 0.19605617789932617, 0.18716259921354617, 0.18751093015956088, 0.19194703480377995, 0.19433114250135186, 0.18415621277930516, 0.19496731371053155, 0.19329140719108684, 0.18865527874170895, 0.2330189043527171, 0.3010763109326803, 0.3787115049608878, 0.3180893862785581, 0.25253590514553714, 0.28909608896572647, 0.2751095330758718, 0.16592295750731212, 0.28701239464096273, 0.37032242951647, 0.31798920247618356, 0.2372837902332544, 0.2109623245664073, 0.23692956672126697, 0.30189629774815574, 0.21112899738289348, 0.2119095539945125, 0.25401993636325804, 0.1798410505582062, 0.17683319054056323, 0.18022237718806067, 0.18688529450575875, 0.18684255856247456, 0.1842001488780034, 0.18485806756537237, 0.18941746414158855, 0.19851150486979652, 0.06857731068476647, 0.071379136675643, 0.0724106837591546, 0.06986420174511554, 0.07786379073031968, 0.08138209240947258, 0.07581049605855428, 0.07395362972612018, 0.07708687193703823]}, "mutation_prompt": null}
{"id": "09614e42-c5c8-462d-903e-6db56a595bb7", "solution": "import numpy as np\n\nclass ChaoticABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.mutation_rate = 0.5\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi))  # Novel chaotic sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "ChaoticABCOptimizerRefined", "description": "Improve exploration by incorporating a novel chaotic search strategy to enhance population diversity and avoid local optima.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9f9b3a5f-5ed7-4d88-8b5f-ea716543216e", "metadata": {"aucs": [0.6852475603795716, 0.6715154141638668, 0.678720034730348, 0.6871988496483423, 0.7065555060114523, 0.6633598074559095, 0.6768459897408186, 0.6875012413678567, 0.6729911773569953, 0.31605080305841815, 0.3084116092664346, 0.34262658757321873, 0.3256843474667964, 0.32814543857597667, 0.36928256897848855, 0.3468657412498116, 0.34598017654827184, 0.35123684936193045, 0.09192164097702338, 0.08960173539565364, 0.10202148129527866, 0.09511897423205606, 0.10174936358088504, 0.09766787617875272, 0.09392780195471295, 0.09196540271294051, 0.09301575348209445, 0.09669418853348966, 0.08810945143691551, 0.08046276475124592, 0.08415549106071718, 0.08495010820383508, 0.08262618081729212, 0.09212016452106686, 0.09236065972222218, 0.09331328207722456, 0.9365608860876977, 0.9376076289187404, 0.906522880044529, 0.9446041577755375, 0.9294952814556414, 0.9313760033937308, 0.9141429288268831, 0.8576981174543976, 0.8942387396292218, 0.25277741068834747, 0.2672196857715585, 0.2844415057869879, 0.2592353718201651, 0.2801428081650258, 0.2740960045685493, 0.2743637372447181, 0.27818627167125065, 0.2636321671396582, 0.2528077448529361, 0.2774731876958494, 0.2660595106947652, 0.2715483297451283, 0.3160691110314048, 0.2926421643775621, 0.29682931528863155, 0.2674656043101402, 0.2988408269746863, 0.16047794524700476, 0.20104604048804842, 0.17222568778109448, 0.17553260395930426, 0.15324126626607726, 0.15474675688663575, 0.16775190574816357, 0.1809539582899441, 0.1881639967236154, 0.16874482020056114, 0.15147412034101948, 0.13439396653859892, 0.16507686051114756, 0.15365039643652978, 0.14124982656292517, 0.20562458211867118, 0.16057839095665627, 0.13772252481509673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08398433090758661, 0.0828102700059632, 0.05448753150724095, 0.047404431320069995, 0.07829183388176575, 0.10076722766657642, 0.04176760911203525, 0.05234959445183851, 0.11780403982231769, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012694037397260605, 9.999999999998899e-05, 0.08424689946167707, 0.09135928575241892, 0.10671403185648565, 0.10308033605709133, 0.12500567123807993, 0.10848412681493869, 0.09775426704379353, 0.10878251287469576, 0.09629303617313123, 0.44947038343918444, 0.44984369941700975, 0.46103828048567097, 0.45260802049970483, 0.46622941935373075, 0.46497832982496834, 0.44899033647383724, 0.462476986153443, 0.44840222533704366, 0.09183553684891577, 0.08504875734520223, 0.08229696852125967, 0.08312741034458382, 0.07364113140245787, 0.08917588813301569, 0.07895121934781313, 0.09433540621417502, 0.09492152238657059, 0.14965179761963132, 0.15211494931471703, 0.14730660887161717, 0.1511892579416272, 0.1761224711447672, 0.15201268236894283, 0.1609295847412584, 0.15292358265229689, 0.14245657148816027, 0.24521697377085994, 0.2456326648428807, 0.2635720024735897, 0.24355984007305698, 0.2381950040962555, 0.2306407998317873, 0.2505023353014548, 0.2537895378441568, 0.2405129982416755, 0.18612000521400418, 0.16862668965682914, 0.18152476177263333, 0.17322317258275977, 0.17089084596464088, 0.1758365813695555, 0.1835763395983998, 0.18984582664023286, 0.17707354600517589, 0.18743153368781573, 0.1999353578473132, 0.19188118097907358, 0.18675732361868014, 0.20312954976833653, 0.1852605625282817, 0.19198295813697475, 0.19072011658889676, 0.19005176531875712, 0.19605617789932617, 0.18716259921354617, 0.18751093015956088, 0.19194703480377995, 0.19433114250135186, 0.18415621277930516, 0.19496731371053155, 0.19329140719108684, 0.18865527874170895, 0.2330189043527171, 0.3010763109326803, 0.3787115049608878, 0.3180893862785581, 0.25253590514553714, 0.28909608896572647, 0.2751095330758718, 0.16592295750731212, 0.28701239464096273, 0.37032242951647, 0.31798920247618356, 0.2372837902332544, 0.2109623245664073, 0.23692956672126697, 0.30189629774815574, 0.21112899738289348, 0.2119095539945125, 0.25401993636325804, 0.1798410505582062, 0.17683319054056323, 0.18022237718806067, 0.18688529450575875, 0.18684255856247456, 0.1842001488780034, 0.18485806756537237, 0.18941746414158855, 0.19851150486979652, 0.06857731068476647, 0.071379136675643, 0.0724106837591546, 0.06986420174511554, 0.07786379073031968, 0.08138209240947258, 0.07581049605855428, 0.07395362972612018, 0.07708687193703823]}, "mutation_prompt": null}
{"id": "d9685671-8109-46aa-96a5-2b42bb55f513", "solution": "import numpy as np\n\nclass ChaoticABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.mutation_rate = 0.5\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi))  # Novel chaotic sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "ChaoticABCOptimizerRefined", "description": "Improve exploration by incorporating a novel chaotic search strategy to enhance population diversity and avoid local optima.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9f9b3a5f-5ed7-4d88-8b5f-ea716543216e", "metadata": {"aucs": [0.6852475603795716, 0.6715154141638668, 0.678720034730348, 0.6871988496483423, 0.7065555060114523, 0.6633598074559095, 0.6768459897408186, 0.6875012413678567, 0.6729911773569953, 0.31605080305841815, 0.3084116092664346, 0.34262658757321873, 0.3256843474667964, 0.32814543857597667, 0.36928256897848855, 0.3468657412498116, 0.34598017654827184, 0.35123684936193045, 0.09192164097702338, 0.08960173539565364, 0.10202148129527866, 0.09511897423205606, 0.10174936358088504, 0.09766787617875272, 0.09392780195471295, 0.09196540271294051, 0.09301575348209445, 0.09669418853348966, 0.08810945143691551, 0.08046276475124592, 0.08415549106071718, 0.08495010820383508, 0.08262618081729212, 0.09212016452106686, 0.09236065972222218, 0.09331328207722456, 0.9365608860876977, 0.9376076289187404, 0.906522880044529, 0.9446041577755375, 0.9294952814556414, 0.9313760033937308, 0.9141429288268831, 0.8576981174543976, 0.8942387396292218, 0.25277741068834747, 0.2672196857715585, 0.2844415057869879, 0.2592353718201651, 0.2801428081650258, 0.2740960045685493, 0.2743637372447181, 0.27818627167125065, 0.2636321671396582, 0.2528077448529361, 0.2774731876958494, 0.2660595106947652, 0.2715483297451283, 0.3160691110314048, 0.2926421643775621, 0.29682931528863155, 0.2674656043101402, 0.2988408269746863, 0.16047794524700476, 0.20104604048804842, 0.17222568778109448, 0.17553260395930426, 0.15324126626607726, 0.15474675688663575, 0.16775190574816357, 0.1809539582899441, 0.1881639967236154, 0.16874482020056114, 0.15147412034101948, 0.13439396653859892, 0.16507686051114756, 0.15365039643652978, 0.14124982656292517, 0.20562458211867118, 0.16057839095665627, 0.13772252481509673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08398433090758661, 0.0828102700059632, 0.05448753150724095, 0.047404431320069995, 0.07829183388176575, 0.10076722766657642, 0.04176760911203525, 0.05234959445183851, 0.11780403982231769, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012694037397260605, 9.999999999998899e-05, 0.08424689946167707, 0.09135928575241892, 0.10671403185648565, 0.10308033605709133, 0.12500567123807993, 0.10848412681493869, 0.09775426704379353, 0.10878251287469576, 0.09629303617313123, 0.44947038343918444, 0.44984369941700975, 0.46103828048567097, 0.45260802049970483, 0.46622941935373075, 0.46497832982496834, 0.44899033647383724, 0.462476986153443, 0.44840222533704366, 0.09183553684891577, 0.08504875734520223, 0.08229696852125967, 0.08312741034458382, 0.07364113140245787, 0.08917588813301569, 0.07895121934781313, 0.09433540621417502, 0.09492152238657059, 0.14965179761963132, 0.15211494931471703, 0.14730660887161717, 0.1511892579416272, 0.1761224711447672, 0.15201268236894283, 0.1609295847412584, 0.15292358265229689, 0.14245657148816027, 0.24521697377085994, 0.2456326648428807, 0.2635720024735897, 0.24355984007305698, 0.2381950040962555, 0.2306407998317873, 0.2505023353014548, 0.2537895378441568, 0.2405129982416755, 0.18612000521400418, 0.16862668965682914, 0.18152476177263333, 0.17322317258275977, 0.17089084596464088, 0.1758365813695555, 0.1835763395983998, 0.18984582664023286, 0.17707354600517589, 0.18743153368781573, 0.1999353578473132, 0.19188118097907358, 0.18675732361868014, 0.20312954976833653, 0.1852605625282817, 0.19198295813697475, 0.19072011658889676, 0.19005176531875712, 0.19605617789932617, 0.18716259921354617, 0.18751093015956088, 0.19194703480377995, 0.19433114250135186, 0.18415621277930516, 0.19496731371053155, 0.19329140719108684, 0.18865527874170895, 0.2330189043527171, 0.3010763109326803, 0.3787115049608878, 0.3180893862785581, 0.25253590514553714, 0.28909608896572647, 0.2751095330758718, 0.16592295750731212, 0.28701239464096273, 0.37032242951647, 0.31798920247618356, 0.2372837902332544, 0.2109623245664073, 0.23692956672126697, 0.30189629774815574, 0.21112899738289348, 0.2119095539945125, 0.25401993636325804, 0.1798410505582062, 0.17683319054056323, 0.18022237718806067, 0.18688529450575875, 0.18684255856247456, 0.1842001488780034, 0.18485806756537237, 0.18941746414158855, 0.19851150486979652, 0.06857731068476647, 0.071379136675643, 0.0724106837591546, 0.06986420174511554, 0.07786379073031968, 0.08138209240947258, 0.07581049605855428, 0.07395362972612018, 0.07708687193703823]}, "mutation_prompt": null}
{"id": "70097a84-910f-4da2-b382-44a89ca4a910", "solution": "import numpy as np\n\nclass ChaoticABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.mutation_rate = 0.5\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi))  # Novel chaotic sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "ChaoticABCOptimizerRefined", "description": "Improve exploration by incorporating a novel chaotic search strategy to enhance population diversity and avoid local optima.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9f9b3a5f-5ed7-4d88-8b5f-ea716543216e", "metadata": {"aucs": [0.6852475603795716, 0.6715154141638668, 0.678720034730348, 0.6871988496483423, 0.7065555060114523, 0.6633598074559095, 0.6768459897408186, 0.6875012413678567, 0.6729911773569953, 0.31605080305841815, 0.3084116092664346, 0.34262658757321873, 0.3256843474667964, 0.32814543857597667, 0.36928256897848855, 0.3468657412498116, 0.34598017654827184, 0.35123684936193045, 0.09192164097702338, 0.08960173539565364, 0.10202148129527866, 0.09511897423205606, 0.10174936358088504, 0.09766787617875272, 0.09392780195471295, 0.09196540271294051, 0.09301575348209445, 0.09669418853348966, 0.08810945143691551, 0.08046276475124592, 0.08415549106071718, 0.08495010820383508, 0.08262618081729212, 0.09212016452106686, 0.09236065972222218, 0.09331328207722456, 0.9365608860876977, 0.9376076289187404, 0.906522880044529, 0.9446041577755375, 0.9294952814556414, 0.9313760033937308, 0.9141429288268831, 0.8576981174543976, 0.8942387396292218, 0.25277741068834747, 0.2672196857715585, 0.2844415057869879, 0.2592353718201651, 0.2801428081650258, 0.2740960045685493, 0.2743637372447181, 0.27818627167125065, 0.2636321671396582, 0.2528077448529361, 0.2774731876958494, 0.2660595106947652, 0.2715483297451283, 0.3160691110314048, 0.2926421643775621, 0.29682931528863155, 0.2674656043101402, 0.2988408269746863, 0.16047794524700476, 0.20104604048804842, 0.17222568778109448, 0.17553260395930426, 0.15324126626607726, 0.15474675688663575, 0.16775190574816357, 0.1809539582899441, 0.1881639967236154, 0.16874482020056114, 0.15147412034101948, 0.13439396653859892, 0.16507686051114756, 0.15365039643652978, 0.14124982656292517, 0.20562458211867118, 0.16057839095665627, 0.13772252481509673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08398433090758661, 0.0828102700059632, 0.05448753150724095, 0.047404431320069995, 0.07829183388176575, 0.10076722766657642, 0.04176760911203525, 0.05234959445183851, 0.11780403982231769, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012694037397260605, 9.999999999998899e-05, 0.08424689946167707, 0.09135928575241892, 0.10671403185648565, 0.10308033605709133, 0.12500567123807993, 0.10848412681493869, 0.09775426704379353, 0.10878251287469576, 0.09629303617313123, 0.44947038343918444, 0.44984369941700975, 0.46103828048567097, 0.45260802049970483, 0.46622941935373075, 0.46497832982496834, 0.44899033647383724, 0.462476986153443, 0.44840222533704366, 0.09183553684891577, 0.08504875734520223, 0.08229696852125967, 0.08312741034458382, 0.07364113140245787, 0.08917588813301569, 0.07895121934781313, 0.09433540621417502, 0.09492152238657059, 0.14965179761963132, 0.15211494931471703, 0.14730660887161717, 0.1511892579416272, 0.1761224711447672, 0.15201268236894283, 0.1609295847412584, 0.15292358265229689, 0.14245657148816027, 0.24521697377085994, 0.2456326648428807, 0.2635720024735897, 0.24355984007305698, 0.2381950040962555, 0.2306407998317873, 0.2505023353014548, 0.2537895378441568, 0.2405129982416755, 0.18612000521400418, 0.16862668965682914, 0.18152476177263333, 0.17322317258275977, 0.17089084596464088, 0.1758365813695555, 0.1835763395983998, 0.18984582664023286, 0.17707354600517589, 0.18743153368781573, 0.1999353578473132, 0.19188118097907358, 0.18675732361868014, 0.20312954976833653, 0.1852605625282817, 0.19198295813697475, 0.19072011658889676, 0.19005176531875712, 0.19605617789932617, 0.18716259921354617, 0.18751093015956088, 0.19194703480377995, 0.19433114250135186, 0.18415621277930516, 0.19496731371053155, 0.19329140719108684, 0.18865527874170895, 0.2330189043527171, 0.3010763109326803, 0.3787115049608878, 0.3180893862785581, 0.25253590514553714, 0.28909608896572647, 0.2751095330758718, 0.16592295750731212, 0.28701239464096273, 0.37032242951647, 0.31798920247618356, 0.2372837902332544, 0.2109623245664073, 0.23692956672126697, 0.30189629774815574, 0.21112899738289348, 0.2119095539945125, 0.25401993636325804, 0.1798410505582062, 0.17683319054056323, 0.18022237718806067, 0.18688529450575875, 0.18684255856247456, 0.1842001488780034, 0.18485806756537237, 0.18941746414158855, 0.19851150486979652, 0.06857731068476647, 0.071379136675643, 0.0724106837591546, 0.06986420174511554, 0.07786379073031968, 0.08138209240947258, 0.07581049605855428, 0.07395362972612018, 0.07708687193703823]}, "mutation_prompt": null}
{"id": "897c6679-7121-4fc6-b07a-b56b0e92b57a", "solution": "import numpy as np\n\nclass ChaoticABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.mutation_rate = 0.5\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi))  # Novel chaotic sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n            \n        return self.best_solution", "name": "ChaoticABCOptimizerRefined", "description": "Improve exploration by incorporating a novel chaotic search strategy to enhance population diversity and avoid local optima.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9f9b3a5f-5ed7-4d88-8b5f-ea716543216e", "metadata": {"aucs": [0.6852475603795716, 0.6715154141638668, 0.678720034730348, 0.6871988496483423, 0.7065555060114523, 0.6633598074559095, 0.6768459897408186, 0.6875012413678567, 0.6729911773569953, 0.31605080305841815, 0.3084116092664346, 0.34262658757321873, 0.3256843474667964, 0.32814543857597667, 0.36928256897848855, 0.3468657412498116, 0.34598017654827184, 0.35123684936193045, 0.09192164097702338, 0.08960173539565364, 0.10202148129527866, 0.09511897423205606, 0.10174936358088504, 0.09766787617875272, 0.09392780195471295, 0.09196540271294051, 0.09301575348209445, 0.09669418853348966, 0.08810945143691551, 0.08046276475124592, 0.08415549106071718, 0.08495010820383508, 0.08262618081729212, 0.09212016452106686, 0.09236065972222218, 0.09331328207722456, 0.9365608860876977, 0.9376076289187404, 0.906522880044529, 0.9446041577755375, 0.9294952814556414, 0.9313760033937308, 0.9141429288268831, 0.8576981174543976, 0.8942387396292218, 0.25277741068834747, 0.2672196857715585, 0.2844415057869879, 0.2592353718201651, 0.2801428081650258, 0.2740960045685493, 0.2743637372447181, 0.27818627167125065, 0.2636321671396582, 0.2528077448529361, 0.2774731876958494, 0.2660595106947652, 0.2715483297451283, 0.3160691110314048, 0.2926421643775621, 0.29682931528863155, 0.2674656043101402, 0.2988408269746863, 0.16047794524700476, 0.20104604048804842, 0.17222568778109448, 0.17553260395930426, 0.15324126626607726, 0.15474675688663575, 0.16775190574816357, 0.1809539582899441, 0.1881639967236154, 0.16874482020056114, 0.15147412034101948, 0.13439396653859892, 0.16507686051114756, 0.15365039643652978, 0.14124982656292517, 0.20562458211867118, 0.16057839095665627, 0.13772252481509673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08398433090758661, 0.0828102700059632, 0.05448753150724095, 0.047404431320069995, 0.07829183388176575, 0.10076722766657642, 0.04176760911203525, 0.05234959445183851, 0.11780403982231769, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012694037397260605, 9.999999999998899e-05, 0.08424689946167707, 0.09135928575241892, 0.10671403185648565, 0.10308033605709133, 0.12500567123807993, 0.10848412681493869, 0.09775426704379353, 0.10878251287469576, 0.09629303617313123, 0.44947038343918444, 0.44984369941700975, 0.46103828048567097, 0.45260802049970483, 0.46622941935373075, 0.46497832982496834, 0.44899033647383724, 0.462476986153443, 0.44840222533704366, 0.09183553684891577, 0.08504875734520223, 0.08229696852125967, 0.08312741034458382, 0.07364113140245787, 0.08917588813301569, 0.07895121934781313, 0.09433540621417502, 0.09492152238657059, 0.14965179761963132, 0.15211494931471703, 0.14730660887161717, 0.1511892579416272, 0.1761224711447672, 0.15201268236894283, 0.1609295847412584, 0.15292358265229689, 0.14245657148816027, 0.24521697377085994, 0.2456326648428807, 0.2635720024735897, 0.24355984007305698, 0.2381950040962555, 0.2306407998317873, 0.2505023353014548, 0.2537895378441568, 0.2405129982416755, 0.18612000521400418, 0.16862668965682914, 0.18152476177263333, 0.17322317258275977, 0.17089084596464088, 0.1758365813695555, 0.1835763395983998, 0.18984582664023286, 0.17707354600517589, 0.18743153368781573, 0.1999353578473132, 0.19188118097907358, 0.18675732361868014, 0.20312954976833653, 0.1852605625282817, 0.19198295813697475, 0.19072011658889676, 0.19005176531875712, 0.19605617789932617, 0.18716259921354617, 0.18751093015956088, 0.19194703480377995, 0.19433114250135186, 0.18415621277930516, 0.19496731371053155, 0.19329140719108684, 0.18865527874170895, 0.2330189043527171, 0.3010763109326803, 0.3787115049608878, 0.3180893862785581, 0.25253590514553714, 0.28909608896572647, 0.2751095330758718, 0.16592295750731212, 0.28701239464096273, 0.37032242951647, 0.31798920247618356, 0.2372837902332544, 0.2109623245664073, 0.23692956672126697, 0.30189629774815574, 0.21112899738289348, 0.2119095539945125, 0.25401993636325804, 0.1798410505582062, 0.17683319054056323, 0.18022237718806067, 0.18688529450575875, 0.18684255856247456, 0.1842001488780034, 0.18485806756537237, 0.18941746414158855, 0.19851150486979652, 0.06857731068476647, 0.071379136675643, 0.0724106837591546, 0.06986420174511554, 0.07786379073031968, 0.08138209240947258, 0.07581049605855428, 0.07395362972612018, 0.07708687193703823]}, "mutation_prompt": null}
{"id": "752be205-d895-4988-9adb-9850cb8fb13a", "solution": "class DynamicMutationABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi))  # Novel chaotic sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "DynamicMutationABCOptimizerRefined", "description": "Enhance convergence by dynamically adjusting mutation rate based on population diversity.", "configspace": "", "generation": 31, "fitness": 0.22918017523765535, "feedback": "The algorithm DynamicMutationABCOptimizerRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "9f9b3a5f-5ed7-4d88-8b5f-ea716543216e", "metadata": {"aucs": [0.6667536852866491, 0.6873341812663443, 0.6828134006167941, 0.6728231453614357, 0.673838660955766, 0.6515007251828295, 0.67805075646475, 0.6590958283960247, 0.6591732694020621, 0.3212849587609571, 0.3466610938906226, 0.3566300037772573, 0.3454264516249558, 0.3554973752697116, 0.3543129948465503, 0.351769648083477, 0.3452250160597161, 0.3512338344247994, 0.08991481680052371, 0.11126353422407809, 0.09703787045021595, 0.09122325684401844, 0.11278301458862805, 0.09139639240546427, 0.09912781801378878, 0.09756761815369774, 0.10582349686220638, 0.08884161576076799, 0.09282207303216128, 0.08722363242694586, 0.08068080492034913, 0.08067419288236088, 0.07865823631628843, 0.08869866221216449, 0.08507632503997886, 0.08619222703341256, 0.9118757718225844, 0.9389791725488019, 0.9430622140647988, 0.9385506651928268, 0.8688969195870274, 0.9041602774081777, 0.9042187085122428, 0.921149907121437, 0.8685636729035022, 0.2824346273163364, 0.2630208845137012, 0.3084550890638529, 0.24489427592295132, 0.28377598213072086, 0.2692441182175015, 0.2679367827827386, 0.2949296166360059, 0.2757023444195563, 0.27822858214387447, 0.30246545479021436, 0.23654852423221906, 0.29242858799240246, 0.3195690793560869, 0.26939756009922655, 0.29566260896808394, 0.250394210011737, 0.2742277468388945, 0.15319803790907793, 0.19352862266034065, 0.1842359307882444, 0.18304751760116578, 0.16590425192991676, 0.1512597648749625, 0.17490015944336157, 0.1553767938252928, 0.19504089381077871, 0.14151191832967525, 0.1654447323441729, 0.14622404550085666, 0.17003083069494462, 0.16152792106415093, 0.132327446610631, 0.16203688355790435, 0.17660783085915122, 0.16243011451659317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08398433090758661, 0.08281020840144881, 0.053724475997965926, 0.047404451675641, 0.07829183388176575, 0.10076722766657642, 0.04177932385563288, 0.0523494685668644, 0.03194908095583793, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012694037397260605, 9.999999999998899e-05, 0.08492624348895517, 0.09459759689658931, 0.09432189995613283, 0.10577714606310851, 0.10955108794875978, 0.10651782564772161, 0.08768532255033334, 0.1341076111795776, 0.10948098001153028, 0.4468682608202521, 0.4491890556606649, 0.44783624542530764, 0.4472952058136912, 0.46339652415026944, 0.45912232014309806, 0.44310864930772764, 0.4602962209252067, 0.457047553645624, 0.09048802644384013, 0.08281978640054821, 0.08670264430357888, 0.08290518520923784, 0.0866262043592988, 0.08306287346405783, 0.0890855618845744, 0.1048426976471244, 0.08488480380320185, 0.14950746197809328, 0.12886435786236894, 0.14126361282152133, 0.13107550072428253, 0.23663825236748948, 0.16991564534192471, 0.18010546052385634, 0.1449270655585284, 0.14192763683717624, 0.24460817873415575, 0.25593728426387885, 0.26373817853972004, 0.22419993374757008, 0.24550926232396253, 0.25367568134980767, 0.23028931579460266, 0.23978680449494305, 0.24598239323879656, 0.17517756371311988, 0.17113360167004577, 0.17312592092154977, 0.1929720860497789, 0.15608025425057548, 0.18819691826184926, 0.18792837860772493, 0.18150184969986927, 0.17045012980187912, 0.19075410079274757, 0.18939842343204538, 0.20059219409619222, 0.191569377020247, 0.22108945761892795, 0.19749645860656528, 0.2006453232963784, 0.1757149031391989, 0.19352520108912608, 0.1953989842880225, 0.19253992278063103, 0.18545219841646843, 0.19116756350533792, 0.19058646532193568, 0.20090232462510904, 0.18888503631405984, 0.18651035114934744, 0.19759155296491804, 0.2595316921689762, 0.3402693528866414, 0.2520417089017981, 0.29053453834507903, 0.2619816895772019, 0.41229590239833025, 0.27034643395172353, 0.22720495147250153, 0.26983581652559907, 0.28284013924538576, 0.24924931182830556, 0.22047397990517592, 0.21592547470442036, 0.3436320307298134, 0.25393714438520787, 0.32332129681823196, 0.25016277332901915, 0.23133932233934806, 0.1858635551373845, 0.19236227144032403, 0.18791950375614475, 0.18893734261536166, 0.18121925884714996, 0.19375952200264168, 0.19338802625383755, 0.1941234433874014, 0.22863463238734416, 0.07306573210739775, 0.08599203405519096, 0.08068196385111259, 0.07170163781342198, 0.08556655479312869, 0.08776112566768302, 0.07097275691206528, 0.07781399573058245, 0.07748132977076017]}, "mutation_prompt": null}
{"id": "54e074a1-a6db-452a-9793-efd64abe8421", "solution": "import numpy as np\n\nclass DynamicMutationABCOptimizerMultiPop:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n        self.num_pops = 5\n        self.populations = [self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim) for _ in range(self.num_pops)]\n\n    def __call__(self, func):\n        for itr in range(self.budget):\n            for pop_id, population in enumerate(self.populations):\n                fitness_values = np.array([func(individual) for individual in population])\n                indexes = np.argsort(fitness_values)\n                selected_solutions = population[indexes[:self.limit]]\n\n                self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n\n                for i in range(self.limit):\n                    phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                    chaos_sequence = np.tanh(np.sin(phi))  # Novel chaotic sequence generation\n                    mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                    new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                    new_solution = np.clip(new_solution, self.lb, self.ub)\n                    new_fitness = func(new_solution)\n\n                    if new_fitness < fitness_values[indexes[i]]:\n                        population[indexes[i]] = new_solution\n                        fitness_values[indexes[i]] = new_fitness\n\n                if np.min(fitness_values) < self.best_fitness:\n                    self.best_solution = population[np.argmin(fitness_values)]\n                    self.best_fitness = np.min(fitness_values)\n\n                    diversity = np.mean(np.std(selected_solutions, axis=0))\n                    self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n\n                self.populations[pop_id] = population\n\n            # Migration strategy\n            if itr % 10 == 0 and pop_id < self.num_pops - 1:\n                self.populations[pop_id + 1] = self.populations[pop_id]\n\n        return self.best_solution", "name": "DynamicMutationABCOptimizerMultiPop", "description": "Improve convergence and exploration by incorporating a multi-population approach with migration strategy.", "configspace": "", "generation": 32, "fitness": 0.1151861737440865, "feedback": "The algorithm DynamicMutationABCOptimizerMultiPop got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.10.", "error": "", "parent_id": "752be205-d895-4988-9adb-9850cb8fb13a", "metadata": {"aucs": [0.2362685597835802, 0.24510110879748304, 0.23551693194523082, 0.23847254850580835, 0.21301749882283516, 0.21130611288444756, 0.21092566185847705, 0.21022134414866656, 0.2349871593799644, 9.999999999998899e-05, 9.999999999998899e-05, 0.00023745744475456299, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05127886348458777, 0.04980017092389277, 0.06111833171828296, 0.05342617085750967, 0.05120777970488055, 0.06192591606061215, 0.05711777383425065, 0.08165861249139417, 0.059700515769273266, 0.030192916601283426, 0.03720234827774693, 0.044312495311950806, 0.038737392649346614, 0.03286860491736665, 0.03804968368698791, 0.04253090220483424, 0.040463005916168915, 0.04846010684091451, 0.3050768130921704, 0.4907533437342939, 0.2213274522451667, 0.45701074155209, 0.2469088360598629, 0.4455516111411447, 0.5705700364677484, 0.5441688760609434, 0.6204770881956834, 0.10364875144289942, 0.08409679954548632, 0.1105827367653257, 0.08782645645898102, 0.08354338698562824, 0.0912418752680294, 0.09768204565151395, 0.09292951765402846, 0.13274323501930052, 0.14994024374719028, 0.14878607048840364, 0.1380798768756908, 0.12687684877290706, 0.143686533785652, 0.14899850930201042, 0.13529450510154273, 0.15068958256321152, 0.15426853225861903, 0.028451148950903726, 0.029233997905125375, 0.04780333214686738, 0.03799160243034749, 0.03266706594832214, 0.018229443779611887, 0.03086091904064725, 0.0321508118681717, 0.043174088387167076, 0.016683412155177768, 0.04726567604800325, 0.030798863458366355, 0.056727569980981385, 0.038386951871066, 0.04841119745546785, 0.04683341707697286, 0.048540857009386484, 0.01659415384668772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06653117220904659, 0.07623748030049504, 0.042076268863666555, 0.07552575822032925, 0.06351447274290623, 0.035309069474796506, 0.05836214159224362, 0.05985061813774151, 0.04019277459750048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019023545734077052, 0.021603659909994022, 0.0032110770343087847, 0.005215151600558632, 0.028353239336895597, 0.004573906869281941, 0.007084727687354464, 0.0016102185570525673, 0.009392171469556287, 0.24515778194143345, 0.22608111544858478, 0.24509337483810556, 0.22761729254013552, 0.212830900133698, 0.2300740716535402, 0.22971888562961507, 0.24134886279501744, 0.22578046988795508, 0.05289175259149137, 0.06394572941857002, 0.05240593005783756, 0.06776286178139201, 0.08212721841834258, 0.051675876715473024, 0.05383629709568705, 0.04138298563852694, 0.050131163886250385, 0.14285225011716718, 0.12116830238192156, 0.12898114623470192, 0.13754473506477083, 0.1453316888189511, 0.11549079450865507, 0.11860950881902443, 0.11895852264198892, 0.12482284052129111, 0.19212118538085132, 0.17439483086840868, 0.17240718169621816, 0.17610140803120122, 0.17189108099909423, 0.18377753388287588, 0.1785114827553862, 0.18000211838871072, 0.1626800672943467, 0.10170943000553812, 0.11962441945428148, 0.11953230150881644, 0.11855325852716492, 0.11093531122888889, 0.14563352744260938, 0.1312763603222027, 0.12560765286979947, 0.1239998336548962, 0.15363441138872946, 0.15903335580049482, 0.15226762637136726, 0.17917231812564116, 0.1656939800296432, 0.1645789175286977, 0.1678532766906108, 0.18323979250362532, 0.16864921782548847, 0.16482732417047063, 0.15958634956923745, 0.16043846383983784, 0.15345684459699604, 0.16143875803423657, 0.15642471276142245, 0.16995672747366808, 0.15349195130132942, 0.1642776710403394, 0.1583288632439731, 0.23829530164843205, 0.16362854782458125, 0.14276724138844243, 0.19520665650243962, 0.18418311510038554, 0.183630428133562, 0.1768568261343063, 0.15841533453474044, 0.15740199227912766, 0.16091086643155228, 0.1520281053816419, 0.17947750152625574, 0.15747485106304193, 0.19017872525646262, 0.16771912603936412, 0.18499567331219047, 0.16617007493877722, 0.16841317705193648, 0.18385578833560967, 0.18362698555355383, 0.1892936186543156, 0.18693169789310526, 0.1758177164407524, 0.17461990276778105, 0.16289663803104226, 0.18465952678575082, 0.0641719089972872, 0.05568353025306427, 0.05206325377317733, 0.05794976519067063, 0.06479702633306839, 0.05884798379231049, 0.05783512744713659, 0.05494214486474991, 0.05291840928037561]}, "mutation_prompt": null}
{"id": "60c31469-fa4f-4b7b-a3b2-b8c633586bb3", "solution": "class DynamicMutationABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi))  # Novel chaotic sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "DynamicMutationABCOptimizerRefined", "description": "Enhance convergence by dynamically adjusting mutation rate based on population diversity.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "752be205-d895-4988-9adb-9850cb8fb13a", "metadata": {"aucs": [0.6667536852866491, 0.6873341812663443, 0.6828134006167941, 0.6728231453614357, 0.673838660955766, 0.6515007251828295, 0.67805075646475, 0.6590958283960247, 0.6591732694020621, 0.3212849587609571, 0.3466610938906226, 0.3566300037772573, 0.3454264516249558, 0.3554973752697116, 0.3543129948465503, 0.351769648083477, 0.3452250160597161, 0.3512338344247994, 0.08991481680052371, 0.11126353422407809, 0.09703787045021595, 0.09122325684401844, 0.11278301458862805, 0.09139639240546427, 0.09912781801378878, 0.09756761815369774, 0.10582349686220638, 0.08884161576076799, 0.09282207303216128, 0.08722363242694586, 0.08068080492034913, 0.08067419288236088, 0.07865823631628843, 0.08869866221216449, 0.08507632503997886, 0.08619222703341256, 0.9118757718225844, 0.9389791725488019, 0.9430622140647988, 0.9385506651928268, 0.8688969195870274, 0.9041602774081777, 0.9042187085122428, 0.921149907121437, 0.8685636729035022, 0.2824346273163364, 0.2630208845137012, 0.3084550890638529, 0.24489427592295132, 0.28377598213072086, 0.2692441182175015, 0.2679367827827386, 0.2949296166360059, 0.2757023444195563, 0.27822858214387447, 0.30246545479021436, 0.23654852423221906, 0.29242858799240246, 0.3195690793560869, 0.26939756009922655, 0.29566260896808394, 0.250394210011737, 0.2742277468388945, 0.15319803790907793, 0.19352862266034065, 0.1842359307882444, 0.18304751760116578, 0.16590425192991676, 0.1512597648749625, 0.17490015944336157, 0.1553767938252928, 0.19504089381077871, 0.14151191832967525, 0.1654447323441729, 0.14622404550085666, 0.17003083069494462, 0.16152792106415093, 0.132327446610631, 0.16203688355790435, 0.17660783085915122, 0.16243011451659317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08398433090758661, 0.08281020840144881, 0.053724475997965926, 0.047404451675641, 0.07829183388176575, 0.10076722766657642, 0.04177932385563288, 0.0523494685668644, 0.03194908095583793, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012694037397260605, 9.999999999998899e-05, 0.08492624348895517, 0.09459759689658931, 0.09432189995613283, 0.10577714606310851, 0.10955108794875978, 0.10651782564772161, 0.08768532255033334, 0.1341076111795776, 0.10948098001153028, 0.4468682608202521, 0.4491890556606649, 0.44783624542530764, 0.4472952058136912, 0.46339652415026944, 0.45912232014309806, 0.44310864930772764, 0.4602962209252067, 0.457047553645624, 0.09048802644384013, 0.08281978640054821, 0.08670264430357888, 0.08290518520923784, 0.0866262043592988, 0.08306287346405783, 0.0890855618845744, 0.1048426976471244, 0.08488480380320185, 0.14950746197809328, 0.12886435786236894, 0.14126361282152133, 0.13107550072428253, 0.23663825236748948, 0.16991564534192471, 0.18010546052385634, 0.1449270655585284, 0.14192763683717624, 0.24460817873415575, 0.25593728426387885, 0.26373817853972004, 0.22419993374757008, 0.24550926232396253, 0.25367568134980767, 0.23028931579460266, 0.23978680449494305, 0.24598239323879656, 0.17517756371311988, 0.17113360167004577, 0.17312592092154977, 0.1929720860497789, 0.15608025425057548, 0.18819691826184926, 0.18792837860772493, 0.18150184969986927, 0.17045012980187912, 0.19075410079274757, 0.18939842343204538, 0.20059219409619222, 0.191569377020247, 0.22108945761892795, 0.19749645860656528, 0.2006453232963784, 0.1757149031391989, 0.19352520108912608, 0.1953989842880225, 0.19253992278063103, 0.18545219841646843, 0.19116756350533792, 0.19058646532193568, 0.20090232462510904, 0.18888503631405984, 0.18651035114934744, 0.19759155296491804, 0.2595316921689762, 0.3402693528866414, 0.2520417089017981, 0.29053453834507903, 0.2619816895772019, 0.41229590239833025, 0.27034643395172353, 0.22720495147250153, 0.26983581652559907, 0.28284013924538576, 0.24924931182830556, 0.22047397990517592, 0.21592547470442036, 0.3436320307298134, 0.25393714438520787, 0.32332129681823196, 0.25016277332901915, 0.23133932233934806, 0.1858635551373845, 0.19236227144032403, 0.18791950375614475, 0.18893734261536166, 0.18121925884714996, 0.19375952200264168, 0.19338802625383755, 0.1941234433874014, 0.22863463238734416, 0.07306573210739775, 0.08599203405519096, 0.08068196385111259, 0.07170163781342198, 0.08556655479312869, 0.08776112566768302, 0.07097275691206528, 0.07781399573058245, 0.07748132977076017]}, "mutation_prompt": null}
{"id": "6b3c90a7-8426-40b5-adb6-c63e21f8a9a7", "solution": "import numpy as np\n\nclass DynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "DynamicMutationABCOptimizerImproved", "description": "Improve convergence by incorporating a dynamic strategy to adjust the chaos sequence generation based on fitness values.", "configspace": "", "generation": 34, "fitness": 0.2945373864173717, "feedback": "The algorithm DynamicMutationABCOptimizerImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "752be205-d895-4988-9adb-9850cb8fb13a", "metadata": {"aucs": [0.6695891271002237, 0.650535883677773, 0.6517025952000747, 0.7119390829350924, 0.6877465851304387, 0.6879526006863883, 0.7204505847028986, 0.6766135184062505, 0.6672224999286921, 0.3758420637648964, 0.34086173009644793, 0.3808428563517309, 0.3742381198950837, 0.37235304486700194, 0.3830919357535919, 0.35102989695527054, 0.32327419167122773, 0.3591433578929989, 0.11021041574540957, 0.10629127524930515, 0.11149674568977441, 0.10430352508443286, 0.10395989418993323, 0.10547327377530147, 0.09315594222188106, 0.12616444650629433, 0.10551175141823299, 0.08733795154021828, 0.10950930096488665, 0.06756513389827412, 0.09892723855602048, 0.08077981063581796, 0.09118793766172661, 0.08302039795623772, 0.08726045649260739, 0.1114853852934029, 0.9517977385469292, 0.9592767687260226, 0.9765504442536165, 0.929570025320601, 0.9362707400399014, 0.8903287556747315, 0.9257862367150558, 0.9594119423265118, 0.9538545494743107, 0.29004560162732074, 0.3267184826858974, 0.3009873897051133, 0.2999351985074703, 0.32843547245856797, 0.2864823249281703, 0.29514541141291906, 0.35151626329020724, 0.3216188454522684, 0.6102057385401054, 0.6544749438085388, 0.6750221934292435, 0.6423549164628997, 0.6817247168346242, 0.7334688469929249, 0.7049424545359264, 0.6639373486597655, 0.6714733931548866, 0.21272561839327486, 0.22571952108883586, 0.11495337185171484, 0.11342814567553228, 0.13797160250533702, 0.15297037888276788, 0.18930556077123972, 0.08433884321579699, 0.13699053370721648, 0.10286122716507162, 0.10909747093326838, 0.024323470315235185, 0.12642315385377167, 0.11061564497169307, 0.19743051759286745, 0.12208034135619616, 0.1442398749465258, 0.10177918467291003, 0.27132548039788507, 0.2471072634015149, 0.2768888141554193, 0.2608938696036798, 0.26136025071698965, 0.2985686551953247, 0.24383490391108376, 0.28042925979018896, 0.30860889667440283, 0.4847535153219754, 0.5186978130090406, 0.48867057396789015, 0.4420048325478151, 0.5055276642370925, 0.4632114398476904, 0.4789066868962917, 0.5254370889616953, 0.5064681598219931, 0.039509034858224545, 0.031040817629584883, 0.017958268639857722, 0.051696130758782766, 0.06006255047772957, 0.02258423599719661, 0.03900643252828451, 0.057182362403228604, 0.06074607035480617, 0.1826214015313068, 0.2139177278565334, 0.22829480933647506, 0.1917936650860803, 0.19780262589308029, 0.19827534860763785, 0.19775905104561742, 0.24048214110233634, 0.2257216093315122, 0.5705591547090583, 0.5976790824049552, 0.5816420423997781, 0.6346495175818907, 0.5900386977145413, 0.5807971825950504, 0.5787648120002888, 0.6120399382519545, 0.6002550852765005, 0.09939355886760326, 0.10751234005547905, 0.09492861492386162, 0.09585355250931749, 0.08457075908899447, 0.08257756900540647, 0.09375195796968128, 0.13856788636768902, 0.10697080727154284, 0.16430941512666597, 0.22018161070384534, 0.16735280940623565, 0.24077088612011344, 0.22811740649190582, 0.2009127029598592, 0.16436024260421278, 0.21097469648455425, 0.200685920883511, 0.3014154138941165, 0.2880078110996238, 0.2878237153924188, 0.27623614630677207, 0.25242275226298694, 0.27045497514117045, 0.2833065620185784, 0.3048775714342521, 0.28400497483625764, 0.22821483043433322, 0.19743652297486747, 0.1940605026919977, 0.20712142339188033, 0.2413411501082241, 0.20898184412395693, 0.21137988336390146, 0.2297913918559119, 0.2144733111157392, 0.19466719930540533, 0.1862871773928404, 0.18128664156976515, 0.18905151192638758, 0.17500676383197933, 0.23455737724329107, 0.18129961965259445, 0.21682270173382656, 0.18319145387653002, 0.17590287231686452, 0.1719186161301821, 0.1713423122081602, 0.16262322198063683, 0.181191040012308, 0.18553076915309208, 0.1743881152997272, 0.1704234814343374, 0.18189757093456227, 0.1681452122036744, 0.19878761970185077, 0.4106092142192306, 0.6050834729113882, 0.19109939593478675, 0.19436632413091304, 0.17028513984074978, 0.5939081651745153, 0.1801692726255656, 0.1993308964385061, 0.419607926197303, 0.2334646695551047, 0.6001043054987298, 0.2610284344906463, 0.1892081873476683, 0.2080487180245999, 0.20841934161290088, 0.2056155732977657, 0.19044224689376865, 0.18021282430718877, 0.18509273419994332, 0.1751196536859101, 0.2266488362557304, 0.1977756812418464, 0.18191765354981648, 0.2051536308461216, 0.21347285737642374, 0.08211724509399432, 0.08510001266989731, 0.0833262567900025, 0.07623524212716892, 0.0984060916864542, 0.08259440744540303, 0.07750247188276882, 0.08967761975969402, 0.08922943765441249]}, "mutation_prompt": null}
{"id": "85cbb254-302e-477f-8aca-68a26cff2ee7", "solution": "import numpy as np\n\nclass DynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "DynamicMutationABCOptimizerImproved", "description": "Improve convergence by incorporating a dynamic strategy to adjust the chaos sequence generation based on fitness values.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6b3c90a7-8426-40b5-adb6-c63e21f8a9a7", "metadata": {"aucs": [0.6695891271002237, 0.650535883677773, 0.6517025952000747, 0.7119390829350924, 0.6877465851304387, 0.6879526006863883, 0.7204505847028986, 0.6766135184062505, 0.6672224999286921, 0.3758420637648964, 0.34086173009644793, 0.3808428563517309, 0.3742381198950837, 0.37235304486700194, 0.3830919357535919, 0.35102989695527054, 0.32327419167122773, 0.3591433578929989, 0.11021041574540957, 0.10629127524930515, 0.11149674568977441, 0.10430352508443286, 0.10395989418993323, 0.10547327377530147, 0.09315594222188106, 0.12616444650629433, 0.10551175141823299, 0.08733795154021828, 0.10950930096488665, 0.06756513389827412, 0.09892723855602048, 0.08077981063581796, 0.09118793766172661, 0.08302039795623772, 0.08726045649260739, 0.1114853852934029, 0.9517977385469292, 0.9592767687260226, 0.9765504442536165, 0.929570025320601, 0.9362707400399014, 0.8903287556747315, 0.9257862367150558, 0.9594119423265118, 0.9538545494743107, 0.29004560162732074, 0.3267184826858974, 0.3009873897051133, 0.2999351985074703, 0.32843547245856797, 0.2864823249281703, 0.29514541141291906, 0.35151626329020724, 0.3216188454522684, 0.6102057385401054, 0.6544749438085388, 0.6750221934292435, 0.6423549164628997, 0.6817247168346242, 0.7334688469929249, 0.7049424545359264, 0.6639373486597655, 0.6714733931548866, 0.21272561839327486, 0.22571952108883586, 0.11495337185171484, 0.11342814567553228, 0.13797160250533702, 0.15297037888276788, 0.18930556077123972, 0.08433884321579699, 0.13699053370721648, 0.10286122716507162, 0.10909747093326838, 0.024323470315235185, 0.12642315385377167, 0.11061564497169307, 0.19743051759286745, 0.12208034135619616, 0.1442398749465258, 0.10177918467291003, 0.27132548039788507, 0.2471072634015149, 0.2768888141554193, 0.2608938696036798, 0.26136025071698965, 0.2985686551953247, 0.24383490391108376, 0.28042925979018896, 0.30860889667440283, 0.4847535153219754, 0.5186978130090406, 0.48867057396789015, 0.4420048325478151, 0.5055276642370925, 0.4632114398476904, 0.4789066868962917, 0.5254370889616953, 0.5064681598219931, 0.039509034858224545, 0.031040817629584883, 0.017958268639857722, 0.051696130758782766, 0.06006255047772957, 0.02258423599719661, 0.03900643252828451, 0.057182362403228604, 0.06074607035480617, 0.1826214015313068, 0.2139177278565334, 0.22829480933647506, 0.1917936650860803, 0.19780262589308029, 0.19827534860763785, 0.19775905104561742, 0.24048214110233634, 0.2257216093315122, 0.5705591547090583, 0.5976790824049552, 0.5816420423997781, 0.6346495175818907, 0.5900386977145413, 0.5807971825950504, 0.5787648120002888, 0.6120399382519545, 0.6002550852765005, 0.09939355886760326, 0.10751234005547905, 0.09492861492386162, 0.09585355250931749, 0.08457075908899447, 0.08257756900540647, 0.09375195796968128, 0.13856788636768902, 0.10697080727154284, 0.16430941512666597, 0.22018161070384534, 0.16735280940623565, 0.24077088612011344, 0.22811740649190582, 0.2009127029598592, 0.16436024260421278, 0.21097469648455425, 0.200685920883511, 0.3014154138941165, 0.2880078110996238, 0.2878237153924188, 0.27623614630677207, 0.25242275226298694, 0.27045497514117045, 0.2833065620185784, 0.3048775714342521, 0.28400497483625764, 0.22821483043433322, 0.19743652297486747, 0.1940605026919977, 0.20712142339188033, 0.2413411501082241, 0.20898184412395693, 0.21137988336390146, 0.2297913918559119, 0.2144733111157392, 0.19466719930540533, 0.1862871773928404, 0.18128664156976515, 0.18905151192638758, 0.17500676383197933, 0.23455737724329107, 0.18129961965259445, 0.21682270173382656, 0.18319145387653002, 0.17590287231686452, 0.1719186161301821, 0.1713423122081602, 0.16262322198063683, 0.181191040012308, 0.18553076915309208, 0.1743881152997272, 0.1704234814343374, 0.18189757093456227, 0.1681452122036744, 0.19878761970185077, 0.4106092142192306, 0.6050834729113882, 0.19109939593478675, 0.19436632413091304, 0.17028513984074978, 0.5939081651745153, 0.1801692726255656, 0.1993308964385061, 0.419607926197303, 0.2334646695551047, 0.6001043054987298, 0.2610284344906463, 0.1892081873476683, 0.2080487180245999, 0.20841934161290088, 0.2056155732977657, 0.19044224689376865, 0.18021282430718877, 0.18509273419994332, 0.1751196536859101, 0.2266488362557304, 0.1977756812418464, 0.18191765354981648, 0.2051536308461216, 0.21347285737642374, 0.08211724509399432, 0.08510001266989731, 0.0833262567900025, 0.07623524212716892, 0.0984060916864542, 0.08259440744540303, 0.07750247188276882, 0.08967761975969402, 0.08922943765441249]}, "mutation_prompt": null}
{"id": "9b2104bf-bab8-4977-a7d6-1fccc6a4b8b1", "solution": "import numpy as np\n\nclass DynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "DynamicMutationABCOptimizerImproved", "description": "Improve convergence by incorporating a dynamic strategy to adjust the chaos sequence generation based on fitness values.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b3c90a7-8426-40b5-adb6-c63e21f8a9a7", "metadata": {"aucs": [0.6695891271002237, 0.650535883677773, 0.6517025952000747, 0.7119390829350924, 0.6877465851304387, 0.6879526006863883, 0.7204505847028986, 0.6766135184062505, 0.6672224999286921, 0.3758420637648964, 0.34086173009644793, 0.3808428563517309, 0.3742381198950837, 0.37235304486700194, 0.3830919357535919, 0.35102989695527054, 0.32327419167122773, 0.3591433578929989, 0.11021041574540957, 0.10629127524930515, 0.11149674568977441, 0.10430352508443286, 0.10395989418993323, 0.10547327377530147, 0.09315594222188106, 0.12616444650629433, 0.10551175141823299, 0.08733795154021828, 0.10950930096488665, 0.06756513389827412, 0.09892723855602048, 0.08077981063581796, 0.09118793766172661, 0.08302039795623772, 0.08726045649260739, 0.1114853852934029, 0.9517977385469292, 0.9592767687260226, 0.9765504442536165, 0.929570025320601, 0.9362707400399014, 0.8903287556747315, 0.9257862367150558, 0.9594119423265118, 0.9538545494743107, 0.29004560162732074, 0.3267184826858974, 0.3009873897051133, 0.2999351985074703, 0.32843547245856797, 0.2864823249281703, 0.29514541141291906, 0.35151626329020724, 0.3216188454522684, 0.6102057385401054, 0.6544749438085388, 0.6750221934292435, 0.6423549164628997, 0.6817247168346242, 0.7334688469929249, 0.7049424545359264, 0.6639373486597655, 0.6714733931548866, 0.21272561839327486, 0.22571952108883586, 0.11495337185171484, 0.11342814567553228, 0.13797160250533702, 0.15297037888276788, 0.18930556077123972, 0.08433884321579699, 0.13699053370721648, 0.10286122716507162, 0.10909747093326838, 0.024323470315235185, 0.12642315385377167, 0.11061564497169307, 0.19743051759286745, 0.12208034135619616, 0.1442398749465258, 0.10177918467291003, 0.27132548039788507, 0.2471072634015149, 0.2768888141554193, 0.2608938696036798, 0.26136025071698965, 0.2985686551953247, 0.24383490391108376, 0.28042925979018896, 0.30860889667440283, 0.4847535153219754, 0.5186978130090406, 0.48867057396789015, 0.4420048325478151, 0.5055276642370925, 0.4632114398476904, 0.4789066868962917, 0.5254370889616953, 0.5064681598219931, 0.039509034858224545, 0.031040817629584883, 0.017958268639857722, 0.051696130758782766, 0.06006255047772957, 0.02258423599719661, 0.03900643252828451, 0.057182362403228604, 0.06074607035480617, 0.1826214015313068, 0.2139177278565334, 0.22829480933647506, 0.1917936650860803, 0.19780262589308029, 0.19827534860763785, 0.19775905104561742, 0.24048214110233634, 0.2257216093315122, 0.5705591547090583, 0.5976790824049552, 0.5816420423997781, 0.6346495175818907, 0.5900386977145413, 0.5807971825950504, 0.5787648120002888, 0.6120399382519545, 0.6002550852765005, 0.09939355886760326, 0.10751234005547905, 0.09492861492386162, 0.09585355250931749, 0.08457075908899447, 0.08257756900540647, 0.09375195796968128, 0.13856788636768902, 0.10697080727154284, 0.16430941512666597, 0.22018161070384534, 0.16735280940623565, 0.24077088612011344, 0.22811740649190582, 0.2009127029598592, 0.16436024260421278, 0.21097469648455425, 0.200685920883511, 0.3014154138941165, 0.2880078110996238, 0.2878237153924188, 0.27623614630677207, 0.25242275226298694, 0.27045497514117045, 0.2833065620185784, 0.3048775714342521, 0.28400497483625764, 0.22821483043433322, 0.19743652297486747, 0.1940605026919977, 0.20712142339188033, 0.2413411501082241, 0.20898184412395693, 0.21137988336390146, 0.2297913918559119, 0.2144733111157392, 0.19466719930540533, 0.1862871773928404, 0.18128664156976515, 0.18905151192638758, 0.17500676383197933, 0.23455737724329107, 0.18129961965259445, 0.21682270173382656, 0.18319145387653002, 0.17590287231686452, 0.1719186161301821, 0.1713423122081602, 0.16262322198063683, 0.181191040012308, 0.18553076915309208, 0.1743881152997272, 0.1704234814343374, 0.18189757093456227, 0.1681452122036744, 0.19878761970185077, 0.4106092142192306, 0.6050834729113882, 0.19109939593478675, 0.19436632413091304, 0.17028513984074978, 0.5939081651745153, 0.1801692726255656, 0.1993308964385061, 0.419607926197303, 0.2334646695551047, 0.6001043054987298, 0.2610284344906463, 0.1892081873476683, 0.2080487180245999, 0.20841934161290088, 0.2056155732977657, 0.19044224689376865, 0.18021282430718877, 0.18509273419994332, 0.1751196536859101, 0.2266488362557304, 0.1977756812418464, 0.18191765354981648, 0.2051536308461216, 0.21347285737642374, 0.08211724509399432, 0.08510001266989731, 0.0833262567900025, 0.07623524212716892, 0.0984060916864542, 0.08259440744540303, 0.07750247188276882, 0.08967761975969402, 0.08922943765441249]}, "mutation_prompt": null}
{"id": "c514afc8-94c9-4188-836d-b3d1208b5fe6", "solution": "import numpy as np\n\nclass DynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "DynamicMutationABCOptimizerImproved", "description": "Improve convergence by incorporating a dynamic strategy to adjust the chaos sequence generation based on fitness values.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b3c90a7-8426-40b5-adb6-c63e21f8a9a7", "metadata": {"aucs": [0.6695891271002237, 0.650535883677773, 0.6517025952000747, 0.7119390829350924, 0.6877465851304387, 0.6879526006863883, 0.7204505847028986, 0.6766135184062505, 0.6672224999286921, 0.3758420637648964, 0.34086173009644793, 0.3808428563517309, 0.3742381198950837, 0.37235304486700194, 0.3830919357535919, 0.35102989695527054, 0.32327419167122773, 0.3591433578929989, 0.11021041574540957, 0.10629127524930515, 0.11149674568977441, 0.10430352508443286, 0.10395989418993323, 0.10547327377530147, 0.09315594222188106, 0.12616444650629433, 0.10551175141823299, 0.08733795154021828, 0.10950930096488665, 0.06756513389827412, 0.09892723855602048, 0.08077981063581796, 0.09118793766172661, 0.08302039795623772, 0.08726045649260739, 0.1114853852934029, 0.9517977385469292, 0.9592767687260226, 0.9765504442536165, 0.929570025320601, 0.9362707400399014, 0.8903287556747315, 0.9257862367150558, 0.9594119423265118, 0.9538545494743107, 0.29004560162732074, 0.3267184826858974, 0.3009873897051133, 0.2999351985074703, 0.32843547245856797, 0.2864823249281703, 0.29514541141291906, 0.35151626329020724, 0.3216188454522684, 0.6102057385401054, 0.6544749438085388, 0.6750221934292435, 0.6423549164628997, 0.6817247168346242, 0.7334688469929249, 0.7049424545359264, 0.6639373486597655, 0.6714733931548866, 0.21272561839327486, 0.22571952108883586, 0.11495337185171484, 0.11342814567553228, 0.13797160250533702, 0.15297037888276788, 0.18930556077123972, 0.08433884321579699, 0.13699053370721648, 0.10286122716507162, 0.10909747093326838, 0.024323470315235185, 0.12642315385377167, 0.11061564497169307, 0.19743051759286745, 0.12208034135619616, 0.1442398749465258, 0.10177918467291003, 0.27132548039788507, 0.2471072634015149, 0.2768888141554193, 0.2608938696036798, 0.26136025071698965, 0.2985686551953247, 0.24383490391108376, 0.28042925979018896, 0.30860889667440283, 0.4847535153219754, 0.5186978130090406, 0.48867057396789015, 0.4420048325478151, 0.5055276642370925, 0.4632114398476904, 0.4789066868962917, 0.5254370889616953, 0.5064681598219931, 0.039509034858224545, 0.031040817629584883, 0.017958268639857722, 0.051696130758782766, 0.06006255047772957, 0.02258423599719661, 0.03900643252828451, 0.057182362403228604, 0.06074607035480617, 0.1826214015313068, 0.2139177278565334, 0.22829480933647506, 0.1917936650860803, 0.19780262589308029, 0.19827534860763785, 0.19775905104561742, 0.24048214110233634, 0.2257216093315122, 0.5705591547090583, 0.5976790824049552, 0.5816420423997781, 0.6346495175818907, 0.5900386977145413, 0.5807971825950504, 0.5787648120002888, 0.6120399382519545, 0.6002550852765005, 0.09939355886760326, 0.10751234005547905, 0.09492861492386162, 0.09585355250931749, 0.08457075908899447, 0.08257756900540647, 0.09375195796968128, 0.13856788636768902, 0.10697080727154284, 0.16430941512666597, 0.22018161070384534, 0.16735280940623565, 0.24077088612011344, 0.22811740649190582, 0.2009127029598592, 0.16436024260421278, 0.21097469648455425, 0.200685920883511, 0.3014154138941165, 0.2880078110996238, 0.2878237153924188, 0.27623614630677207, 0.25242275226298694, 0.27045497514117045, 0.2833065620185784, 0.3048775714342521, 0.28400497483625764, 0.22821483043433322, 0.19743652297486747, 0.1940605026919977, 0.20712142339188033, 0.2413411501082241, 0.20898184412395693, 0.21137988336390146, 0.2297913918559119, 0.2144733111157392, 0.19466719930540533, 0.1862871773928404, 0.18128664156976515, 0.18905151192638758, 0.17500676383197933, 0.23455737724329107, 0.18129961965259445, 0.21682270173382656, 0.18319145387653002, 0.17590287231686452, 0.1719186161301821, 0.1713423122081602, 0.16262322198063683, 0.181191040012308, 0.18553076915309208, 0.1743881152997272, 0.1704234814343374, 0.18189757093456227, 0.1681452122036744, 0.19878761970185077, 0.4106092142192306, 0.6050834729113882, 0.19109939593478675, 0.19436632413091304, 0.17028513984074978, 0.5939081651745153, 0.1801692726255656, 0.1993308964385061, 0.419607926197303, 0.2334646695551047, 0.6001043054987298, 0.2610284344906463, 0.1892081873476683, 0.2080487180245999, 0.20841934161290088, 0.2056155732977657, 0.19044224689376865, 0.18021282430718877, 0.18509273419994332, 0.1751196536859101, 0.2266488362557304, 0.1977756812418464, 0.18191765354981648, 0.2051536308461216, 0.21347285737642374, 0.08211724509399432, 0.08510001266989731, 0.0833262567900025, 0.07623524212716892, 0.0984060916864542, 0.08259440744540303, 0.07750247188276882, 0.08967761975969402, 0.08922943765441249]}, "mutation_prompt": null}
{"id": "0008afab-3c7f-4307-b222-e652ae2a6298", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                \n                # Introducing Levy flights for mutation\n                levy = np.random.standard_cauchy(self.dim)\n                new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * levy\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedDynamicMutationABCOptimizerImproved", "description": "Enhance the search diversity by introducing a novel mutation scheme based on Levy flights to explore the solution space more effectively.", "configspace": "", "generation": 38, "fitness": 0.15769592701631263, "feedback": "The algorithm EnhancedDynamicMutationABCOptimizerImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "6b3c90a7-8426-40b5-adb6-c63e21f8a9a7", "metadata": {"aucs": [0.27372601648226924, 0.25992116656434405, 0.2813200493293312, 0.2903170942054937, 0.2772823009777342, 0.3083936406003509, 0.28048264016970537, 0.28427740642034405, 0.3002736276512783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0560893555177292, 0.07074271333579185, 0.09016338566207871, 0.0852820973944135, 0.06034570175056875, 0.058554716275495244, 0.06850564449221419, 0.07068389247944129, 0.06759820413662343, 0.05965609623909984, 0.045306390676761454, 0.05530134937715481, 0.0561056210102997, 0.0479430287106859, 0.06620733199782758, 0.04598358324561591, 0.04954442232823275, 0.05125384920655429, 0.953093002751542, 0.9227178079379819, 0.9421428505169027, 0.9463689381749034, 0.9306405410826394, 0.9557245689510162, 0.9532367553333143, 0.958627394822999, 0.9518286986100393, 0.16786367432310123, 0.1527653257365459, 0.15874870902406513, 0.13366153428716354, 0.11273211936132999, 0.12241588383388569, 0.13306380335579304, 0.14084490948591122, 0.14253221636847757, 0.16085086736875143, 0.16720918354072678, 0.17527216534508827, 0.2077464037388126, 0.18496222263872264, 0.17522899805173786, 0.1579375371020464, 0.16614950897828762, 0.17392939055638967, 0.057904296732179006, 0.05506419975290444, 0.05030615457642729, 0.060390070938002305, 0.0762126867040348, 0.06004438466340967, 0.037488187378765025, 0.07678984953526435, 0.058675247754652604, 0.0656709064927945, 0.05028959194317517, 0.07490477041059351, 0.06323628084158195, 0.049358188799131675, 0.07428387284568638, 0.07603903147057722, 0.0464866694444932, 0.03845454825812644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051910935013724124, 0.043183933748446535, 0.043445010565697384, 0.05951006860973773, 0.060380191039895004, 0.05059235667123807, 0.06134704341545005, 0.06327031579691633, 0.053670516913356336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01880097887813914, 0.010874688964152335, 0.022701795682032566, 0.024887179172179086, 0.02426017177421269, 0.015092465406453592, 0.029268299975370615, 0.04997864016785658, 0.03305446548970736, 0.26836002459785036, 0.2753254649622727, 0.2924252620644354, 0.28206084757111083, 0.2875305958951233, 0.28039757429672685, 0.28155294712162715, 0.2790106952089887, 0.2967151923145792, 0.09330658830052307, 0.07095449278418708, 0.06616421570646092, 0.06284339063978972, 0.07192017479826063, 0.06696670420713258, 0.06587281578889126, 0.05427337463257176, 0.07928150366640352, 0.16349673318176539, 0.15237243350465346, 0.1916319301289534, 0.14272377122305102, 0.16910387853905018, 0.13869292749546291, 0.13510569152467455, 0.1619761506445846, 0.13880154229133335, 0.1938046441874126, 0.2105218147538953, 0.21685772731699327, 0.19565301646805366, 0.2149718277813063, 0.19836698401050346, 0.20709032429675156, 0.2034661528559698, 0.22573787537419954, 0.13558158740301662, 0.13445983067047074, 0.13948832132313094, 0.1379898038394589, 0.14014905482603135, 0.14088428184517032, 0.1443847349554941, 0.15084268184896443, 0.1370853270970347, 0.17396032253440807, 0.1687302829837568, 0.16481624054658828, 0.17686827823622409, 0.19891245266126512, 0.1657392545736397, 0.18281409348100375, 0.16845188326047988, 0.18521812531886594, 0.17579595958681093, 0.1588722877668306, 0.16199208145700972, 0.1581709674072015, 0.15792242547754254, 0.16205243453327856, 0.1614159146196118, 0.1606734911493708, 0.16212230275515338, 0.31186103854685876, 0.2611889563297919, 0.26183242204485146, 0.31145750704803266, 0.17631309892122227, 0.3158059392138056, 0.1929860860361643, 0.30138497613791804, 0.22818352903733197, 0.25894094728955286, 0.20219410016149109, 0.19790958749710386, 0.18325751320552786, 0.18873391206805945, 0.2111532298873935, 0.19109376859594962, 0.19226914103926185, 0.23049464522224716, 0.19348662653237148, 0.19120813559974614, 0.17920017699563473, 0.1916741324364617, 0.19190812673265623, 0.17865504027249157, 0.19584261241696455, 0.18476176784506326, 0.1867853554769151, 0.0631301627946177, 0.06618177490581911, 0.0740940116804315, 0.05609680374057968, 0.07093946305260201, 0.07541340328642032, 0.06233087234861978, 0.0574695267806512, 0.08526579870757978]}, "mutation_prompt": null}
{"id": "73c9c48a-a1d4-440d-b1c0-0b19ea2f185c", "solution": "import numpy as np\n\nclass DynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "DynamicMutationABCOptimizerImproved", "description": "Improve convergence by incorporating a dynamic strategy to adjust the chaos sequence generation based on fitness values.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b3c90a7-8426-40b5-adb6-c63e21f8a9a7", "metadata": {"aucs": [0.6695891271002237, 0.650535883677773, 0.6517025952000747, 0.7119390829350924, 0.6877465851304387, 0.6879526006863883, 0.7204505847028986, 0.6766135184062505, 0.6672224999286921, 0.3758420637648964, 0.34086173009644793, 0.3808428563517309, 0.3742381198950837, 0.37235304486700194, 0.3830919357535919, 0.35102989695527054, 0.32327419167122773, 0.3591433578929989, 0.11021041574540957, 0.10629127524930515, 0.11149674568977441, 0.10430352508443286, 0.10395989418993323, 0.10547327377530147, 0.09315594222188106, 0.12616444650629433, 0.10551175141823299, 0.08733795154021828, 0.10950930096488665, 0.06756513389827412, 0.09892723855602048, 0.08077981063581796, 0.09118793766172661, 0.08302039795623772, 0.08726045649260739, 0.1114853852934029, 0.9517977385469292, 0.9592767687260226, 0.9765504442536165, 0.929570025320601, 0.9362707400399014, 0.8903287556747315, 0.9257862367150558, 0.9594119423265118, 0.9538545494743107, 0.29004560162732074, 0.3267184826858974, 0.3009873897051133, 0.2999351985074703, 0.32843547245856797, 0.2864823249281703, 0.29514541141291906, 0.35151626329020724, 0.3216188454522684, 0.6102057385401054, 0.6544749438085388, 0.6750221934292435, 0.6423549164628997, 0.6817247168346242, 0.7334688469929249, 0.7049424545359264, 0.6639373486597655, 0.6714733931548866, 0.21272561839327486, 0.22571952108883586, 0.11495337185171484, 0.11342814567553228, 0.13797160250533702, 0.15297037888276788, 0.18930556077123972, 0.08433884321579699, 0.13699053370721648, 0.10286122716507162, 0.10909747093326838, 0.024323470315235185, 0.12642315385377167, 0.11061564497169307, 0.19743051759286745, 0.12208034135619616, 0.1442398749465258, 0.10177918467291003, 0.27132548039788507, 0.2471072634015149, 0.2768888141554193, 0.2608938696036798, 0.26136025071698965, 0.2985686551953247, 0.24383490391108376, 0.28042925979018896, 0.30860889667440283, 0.4847535153219754, 0.5186978130090406, 0.48867057396789015, 0.4420048325478151, 0.5055276642370925, 0.4632114398476904, 0.4789066868962917, 0.5254370889616953, 0.5064681598219931, 0.039509034858224545, 0.031040817629584883, 0.017958268639857722, 0.051696130758782766, 0.06006255047772957, 0.02258423599719661, 0.03900643252828451, 0.057182362403228604, 0.06074607035480617, 0.1826214015313068, 0.2139177278565334, 0.22829480933647506, 0.1917936650860803, 0.19780262589308029, 0.19827534860763785, 0.19775905104561742, 0.24048214110233634, 0.2257216093315122, 0.5705591547090583, 0.5976790824049552, 0.5816420423997781, 0.6346495175818907, 0.5900386977145413, 0.5807971825950504, 0.5787648120002888, 0.6120399382519545, 0.6002550852765005, 0.09939355886760326, 0.10751234005547905, 0.09492861492386162, 0.09585355250931749, 0.08457075908899447, 0.08257756900540647, 0.09375195796968128, 0.13856788636768902, 0.10697080727154284, 0.16430941512666597, 0.22018161070384534, 0.16735280940623565, 0.24077088612011344, 0.22811740649190582, 0.2009127029598592, 0.16436024260421278, 0.21097469648455425, 0.200685920883511, 0.3014154138941165, 0.2880078110996238, 0.2878237153924188, 0.27623614630677207, 0.25242275226298694, 0.27045497514117045, 0.2833065620185784, 0.3048775714342521, 0.28400497483625764, 0.22821483043433322, 0.19743652297486747, 0.1940605026919977, 0.20712142339188033, 0.2413411501082241, 0.20898184412395693, 0.21137988336390146, 0.2297913918559119, 0.2144733111157392, 0.19466719930540533, 0.1862871773928404, 0.18128664156976515, 0.18905151192638758, 0.17500676383197933, 0.23455737724329107, 0.18129961965259445, 0.21682270173382656, 0.18319145387653002, 0.17590287231686452, 0.1719186161301821, 0.1713423122081602, 0.16262322198063683, 0.181191040012308, 0.18553076915309208, 0.1743881152997272, 0.1704234814343374, 0.18189757093456227, 0.1681452122036744, 0.19878761970185077, 0.4106092142192306, 0.6050834729113882, 0.19109939593478675, 0.19436632413091304, 0.17028513984074978, 0.5939081651745153, 0.1801692726255656, 0.1993308964385061, 0.419607926197303, 0.2334646695551047, 0.6001043054987298, 0.2610284344906463, 0.1892081873476683, 0.2080487180245999, 0.20841934161290088, 0.2056155732977657, 0.19044224689376865, 0.18021282430718877, 0.18509273419994332, 0.1751196536859101, 0.2266488362557304, 0.1977756812418464, 0.18191765354981648, 0.2051536308461216, 0.21347285737642374, 0.08211724509399432, 0.08510001266989731, 0.0833262567900025, 0.07623524212716892, 0.0984060916864542, 0.08259440744540303, 0.07750247188276882, 0.08967761975969402, 0.08922943765441249]}, "mutation_prompt": null}
{"id": "b71d2e44-f834-4dda-b52b-c33b901def06", "solution": "import numpy as np\n\nclass DynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n            if itr % 10 == 0:  # Dynamic population size adaptation\n                improvement_rate = (self.best_fitness - np.min(fitness_values)) / self.best_fitness\n                if improvement_rate < 0.1:\n                    self.population_size = int(1.1 * self.population_size)\n                    population = np.vstack([population, self.lb + (self.ub - self.lb) * np.random.rand(int(0.1 * self.population_size), self.dim)])\n                    fitness_values = np.concatenate([fitness_values, np.array([func(individual) for individual in population[-int(0.1 * self.population_size):]])])\n                \n        return self.best_solution", "name": "DynamicMutationABCOptimizerImproved", "description": "Enhance the algorithm by introducing a dynamic population size adaptation strategy based on fitness improvement.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 30 is out of bounds for axis 0 with size 30').", "error": "IndexError('index 30 is out of bounds for axis 0 with size 30')", "parent_id": "6b3c90a7-8426-40b5-adb6-c63e21f8a9a7", "metadata": {}, "mutation_prompt": null}
{"id": "2f2dbaba-ade4-46ac-ba72-5eb7517672e9", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                \n                # Enhanced mutation update based on population best solutions\n                best_solution_dist = np.linalg.norm(selected_solutions - selected_solutions[i], axis=1)\n                mutation_update = np.mean(selected_solutions * best_solution_dist[:, np.newaxis], axis=0)\n                \n                new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)]) + mutation_update\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution\n", "name": "EnhancedDynamicMutationABCOptimizerImproved", "description": "Enhance diversity maintenance by incorporating a novel mutation update based on population best solutions.", "configspace": "", "generation": 41, "fitness": 0.08139261942557471, "feedback": "The algorithm EnhancedDynamicMutationABCOptimizerImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.18.", "error": "", "parent_id": "6b3c90a7-8426-40b5-adb6-c63e21f8a9a7", "metadata": {"aucs": [0.11869729595922507, 0.08108763387163931, 0.09169502728636048, 0.15309563599528409, 0.13523465600416218, 0.15095978625295192, 0.0998473575412605, 0.07431300570909605, 0.10165254609460694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 0.005375109906600173, 0.010643411704069683, 0.006592353378601756, 0.006669962766643223, 0.018248263482334326, 0.0185852639848203, 0.010674738340807233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 0.0004952459975243739, 9.999999999998899e-05, 0.014763392921912755, 9.999999999998899e-05, 9.999999999998899e-05, 0.9927110673890056, 0.9923755252970962, 0.07488485645427667, 0.9926466187102501, 0.09945006853864014, 0.9925602648551384, 0.988812028821082, 0.9918198297969769, 0.9914929543005696, 0.06274794416174423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.08224659834595494, 0.059824388882108726, 0.0667108215001172, 0.09969551193439674, 0.03843117143711838, 0.026279303607937843, 0.05931056463008866, 0.02122715133446651, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009554342658401382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888030686047845, 0.15756555760738078, 0.14838054695461433, 0.11010944335991002, 0.10274288241579344, 0.09580441870675127, 0.16112956940342849, 0.10048858912776737, 0.1210557193025883, 9.999999999998899e-05, 0.015380690634106964, 0.02198412468535549, 0.03266886175302153, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 9.999999999998899e-05, 0.0267656688986897, 0.12228420683827768, 0.09322864075760606, 0.13700603361180552, 0.12362396702991718, 0.14276960484511414, 0.10798713552628325, 0.08808199726801991, 0.11811214018594784, 0.09737154543810334, 0.11080996726232062, 0.0962505644704219, 0.1613932299901244, 0.13800672315110074, 0.1138073754026484, 0.10469370704227754, 0.12028165949079228, 0.17377774300845283, 0.11383112831101194, 0.05985564337097804, 0.06430791833904692, 0.08398582550377798, 0.07382069810752256, 0.06406947898089654, 0.06342850570876157, 0.0837317855149382, 0.0997711199450243, 0.06412526395900253, 0.14749968402634128, 0.10221400172465311, 0.13345086981233123, 0.13203476952957827, 0.11296680970344097, 0.13021213098939766, 0.12245976138762271, 0.089111199375145, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1661412347304151, 0.136331637713352, 0.09949461064543708, 0.07327841830047488, 0.1207914665021157, 0.06661401029160186, 0.1070176662487543, 0.10511484148144368, 0.06951564579636493, 0.11040265245322212, 0.10267165755511809, 0.06932034027342138, 0.05139654902843083, 0.05582331353479819, 0.05903250263678039, 0.14891464188242387, 0.16681425410282336, 0.11453786972630065, 0.18408832779626372, 0.1715204770004728, 0.16533576108056292, 0.16653164118816455, 0.16778415993949347, 0.14989426026467645, 0.18424369970546361, 0.16030283620770802, 0.15634674829903195, 0.016350264699966144, 0.017099913112666787, 0.031393493129599714, 0.027015293023570086, 0.03425093938292756, 0.020045516730027746, 0.016228383701229143, 0.03803354422653826, 0.017643830485487344]}, "mutation_prompt": null}
{"id": "7d167645-6bde-445a-a853-9022432d7cc9", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                \n                # Incorporating opposition-based learning for mutation\n                opposite_solution = self.lb + self.ub - selected_solutions[i]\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (opposite_solution - selected_solutions[i])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedDynamicMutationABCOptimizer", "description": "Enhance exploration by incorporating a novel mutation strategy based on opposition-based learning to diversify the search process.", "configspace": "", "generation": 42, "fitness": 0.053461012894196656, "feedback": "The algorithm EnhancedDynamicMutationABCOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "6b3c90a7-8426-40b5-adb6-c63e21f8a9a7", "metadata": {"aucs": [0.11869729595922507, 0.0891885675848394, 0.09169502728636048, 0.09431231635004056, 0.10750000009520266, 0.11042008850345264, 0.0998473575412605, 0.07431300570909605, 0.06863468668670525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 0.005375109906600173, 0.010643411704069683, 0.008116912944269417, 0.006669962766643223, 0.018248263482334326, 0.007792397052521438, 0.010674738340807233, 9.999999999998899e-05, 9.999999999998899e-05, 0.009796865311748282, 0.01959972157639278, 0.0004952459975243739, 9.999999999998899e-05, 0.014763392921912755, 0.012311768407471169, 9.999999999998899e-05, 0.045179741609489454, 0.045385788542351646, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.06274794416174423, 9.999999999998899e-05, 0.05584777955298592, 9.999999999998899e-05, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.08806752591555, 0.0880376643045998, 0.0667108215001172, 0.07285119553694963, 9.999999999998899e-05, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05830430161013078, 0.05830430161013078, 0.05830430161013078, 0.05830430161013078, 0.05830430161013078, 0.05830430161013078, 0.05830430161013078, 0.05830430161013078, 0.05830430161013078, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888030686047845, 0.15756555760738078, 0.14838054695461433, 0.10279143709805372, 0.10274288241579344, 0.09580441870675127, 0.17517327867340915, 0.13983747860093665, 0.12378082176731953, 9.999999999998899e-05, 9.999999999998899e-05, 0.02198412468535549, 0.03266886175302153, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 9.999999999998899e-05, 0.0267656688986897, 0.14357608886980777, 0.08609370886951495, 0.11842175776965747, 0.09855305120349966, 0.10852972522114013, 0.10798713552628325, 0.08808199726801991, 0.08099219012337167, 0.09597595883359356, 0.09606267484187503, 0.12084163022766004, 0.1613932299901244, 0.13800672315110074, 0.12305947954834373, 0.148457068660529, 0.12363271152370303, 0.17377774300845283, 0.1340553937426826, 0.05985564337097804, 0.06744631187123107, 0.08398582550377798, 0.08091758829701234, 0.06406947898089654, 0.06342850570876157, 0.0837317855149382, 0.0997711199450243, 0.06412526395900253, 0.11943364695601921, 0.09388200728521401, 0.13345086981233123, 0.25942142447729777, 0.259301189029274, 0.25936828608660745, 0.2595262621264858, 0.2592678048645908, 0.2595213989304276, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568623559107733, 0.07466602457976645, 0.08167024703901915, 0.09987032464388756, 0.1207914665021157, 0.06661401029160186, 0.1070176662487543, 0.10511484148144368, 0.0693612576838919, 0.11040265245322212, 0.10267165755511809, 0.06932034027342138, 0.07861562243011866, 0.0701428457869, 0.07495244884200769, 0.06471176320217997, 0.06522176571113558, 0.04143420019681854, 0.13480174570059533, 0.128372137474824, 0.14763022729669195, 0.14376064188311644, 0.12978603223257001, 0.16740676827455303, 0.14969714796693134, 0.13919699549916587, 0.14689007985489466, 0.016243542179864234, 0.017884829202110097, 0.031393493129599714, 0.027015293023570086, 0.03425093938292756, 0.020045516730027746, 0.028599244950507807, 0.03803354422653826, 0.025112239648046986]}, "mutation_prompt": null}
{"id": "83f6a61b-6a34-4187-a37b-d7858f0a8e8f", "solution": "import numpy as np\n\nclass DynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "DynamicMutationABCOptimizerImproved", "description": "Improve convergence by incorporating a dynamic strategy to adjust the chaos sequence generation based on fitness values.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b3c90a7-8426-40b5-adb6-c63e21f8a9a7", "metadata": {"aucs": [0.6695891271002237, 0.650535883677773, 0.6517025952000747, 0.7119390829350924, 0.6877465851304387, 0.6879526006863883, 0.7204505847028986, 0.6766135184062505, 0.6672224999286921, 0.3758420637648964, 0.34086173009644793, 0.3808428563517309, 0.3742381198950837, 0.37235304486700194, 0.3830919357535919, 0.35102989695527054, 0.32327419167122773, 0.3591433578929989, 0.11021041574540957, 0.10629127524930515, 0.11149674568977441, 0.10430352508443286, 0.10395989418993323, 0.10547327377530147, 0.09315594222188106, 0.12616444650629433, 0.10551175141823299, 0.08733795154021828, 0.10950930096488665, 0.06756513389827412, 0.09892723855602048, 0.08077981063581796, 0.09118793766172661, 0.08302039795623772, 0.08726045649260739, 0.1114853852934029, 0.9517977385469292, 0.9592767687260226, 0.9765504442536165, 0.929570025320601, 0.9362707400399014, 0.8903287556747315, 0.9257862367150558, 0.9594119423265118, 0.9538545494743107, 0.29004560162732074, 0.3267184826858974, 0.3009873897051133, 0.2999351985074703, 0.32843547245856797, 0.2864823249281703, 0.29514541141291906, 0.35151626329020724, 0.3216188454522684, 0.6102057385401054, 0.6544749438085388, 0.6750221934292435, 0.6423549164628997, 0.6817247168346242, 0.7334688469929249, 0.7049424545359264, 0.6639373486597655, 0.6714733931548866, 0.21272561839327486, 0.22571952108883586, 0.11495337185171484, 0.11342814567553228, 0.13797160250533702, 0.15297037888276788, 0.18930556077123972, 0.08433884321579699, 0.13699053370721648, 0.10286122716507162, 0.10909747093326838, 0.024323470315235185, 0.12642315385377167, 0.11061564497169307, 0.19743051759286745, 0.12208034135619616, 0.1442398749465258, 0.10177918467291003, 0.27132548039788507, 0.2471072634015149, 0.2768888141554193, 0.2608938696036798, 0.26136025071698965, 0.2985686551953247, 0.24383490391108376, 0.28042925979018896, 0.30860889667440283, 0.4847535153219754, 0.5186978130090406, 0.48867057396789015, 0.4420048325478151, 0.5055276642370925, 0.4632114398476904, 0.4789066868962917, 0.5254370889616953, 0.5064681598219931, 0.039509034858224545, 0.031040817629584883, 0.017958268639857722, 0.051696130758782766, 0.06006255047772957, 0.02258423599719661, 0.03900643252828451, 0.057182362403228604, 0.06074607035480617, 0.1826214015313068, 0.2139177278565334, 0.22829480933647506, 0.1917936650860803, 0.19780262589308029, 0.19827534860763785, 0.19775905104561742, 0.24048214110233634, 0.2257216093315122, 0.5705591547090583, 0.5976790824049552, 0.5816420423997781, 0.6346495175818907, 0.5900386977145413, 0.5807971825950504, 0.5787648120002888, 0.6120399382519545, 0.6002550852765005, 0.09939355886760326, 0.10751234005547905, 0.09492861492386162, 0.09585355250931749, 0.08457075908899447, 0.08257756900540647, 0.09375195796968128, 0.13856788636768902, 0.10697080727154284, 0.16430941512666597, 0.22018161070384534, 0.16735280940623565, 0.24077088612011344, 0.22811740649190582, 0.2009127029598592, 0.16436024260421278, 0.21097469648455425, 0.200685920883511, 0.3014154138941165, 0.2880078110996238, 0.2878237153924188, 0.27623614630677207, 0.25242275226298694, 0.27045497514117045, 0.2833065620185784, 0.3048775714342521, 0.28400497483625764, 0.22821483043433322, 0.19743652297486747, 0.1940605026919977, 0.20712142339188033, 0.2413411501082241, 0.20898184412395693, 0.21137988336390146, 0.2297913918559119, 0.2144733111157392, 0.19466719930540533, 0.1862871773928404, 0.18128664156976515, 0.18905151192638758, 0.17500676383197933, 0.23455737724329107, 0.18129961965259445, 0.21682270173382656, 0.18319145387653002, 0.17590287231686452, 0.1719186161301821, 0.1713423122081602, 0.16262322198063683, 0.181191040012308, 0.18553076915309208, 0.1743881152997272, 0.1704234814343374, 0.18189757093456227, 0.1681452122036744, 0.19878761970185077, 0.4106092142192306, 0.6050834729113882, 0.19109939593478675, 0.19436632413091304, 0.17028513984074978, 0.5939081651745153, 0.1801692726255656, 0.1993308964385061, 0.419607926197303, 0.2334646695551047, 0.6001043054987298, 0.2610284344906463, 0.1892081873476683, 0.2080487180245999, 0.20841934161290088, 0.2056155732977657, 0.19044224689376865, 0.18021282430718877, 0.18509273419994332, 0.1751196536859101, 0.2266488362557304, 0.1977756812418464, 0.18191765354981648, 0.2051536308461216, 0.21347285737642374, 0.08211724509399432, 0.08510001266989731, 0.0833262567900025, 0.07623524212716892, 0.0984060916864542, 0.08259440744540303, 0.07750247188276882, 0.08967761975969402, 0.08922943765441249]}, "mutation_prompt": null}
{"id": "2725f9da-0abf-46b5-ab83-00e73c07a6d0", "solution": "import numpy as np\n\nclass DynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "DynamicMutationABCOptimizerImproved", "description": "Improve convergence by incorporating a dynamic strategy to adjust the chaos sequence generation based on fitness values.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b3c90a7-8426-40b5-adb6-c63e21f8a9a7", "metadata": {"aucs": [0.6695891271002237, 0.650535883677773, 0.6517025952000747, 0.7119390829350924, 0.6877465851304387, 0.6879526006863883, 0.7204505847028986, 0.6766135184062505, 0.6672224999286921, 0.3758420637648964, 0.34086173009644793, 0.3808428563517309, 0.3742381198950837, 0.37235304486700194, 0.3830919357535919, 0.35102989695527054, 0.32327419167122773, 0.3591433578929989, 0.11021041574540957, 0.10629127524930515, 0.11149674568977441, 0.10430352508443286, 0.10395989418993323, 0.10547327377530147, 0.09315594222188106, 0.12616444650629433, 0.10551175141823299, 0.08733795154021828, 0.10950930096488665, 0.06756513389827412, 0.09892723855602048, 0.08077981063581796, 0.09118793766172661, 0.08302039795623772, 0.08726045649260739, 0.1114853852934029, 0.9517977385469292, 0.9592767687260226, 0.9765504442536165, 0.929570025320601, 0.9362707400399014, 0.8903287556747315, 0.9257862367150558, 0.9594119423265118, 0.9538545494743107, 0.29004560162732074, 0.3267184826858974, 0.3009873897051133, 0.2999351985074703, 0.32843547245856797, 0.2864823249281703, 0.29514541141291906, 0.35151626329020724, 0.3216188454522684, 0.6102057385401054, 0.6544749438085388, 0.6750221934292435, 0.6423549164628997, 0.6817247168346242, 0.7334688469929249, 0.7049424545359264, 0.6639373486597655, 0.6714733931548866, 0.21272561839327486, 0.22571952108883586, 0.11495337185171484, 0.11342814567553228, 0.13797160250533702, 0.15297037888276788, 0.18930556077123972, 0.08433884321579699, 0.13699053370721648, 0.10286122716507162, 0.10909747093326838, 0.024323470315235185, 0.12642315385377167, 0.11061564497169307, 0.19743051759286745, 0.12208034135619616, 0.1442398749465258, 0.10177918467291003, 0.27132548039788507, 0.2471072634015149, 0.2768888141554193, 0.2608938696036798, 0.26136025071698965, 0.2985686551953247, 0.24383490391108376, 0.28042925979018896, 0.30860889667440283, 0.4847535153219754, 0.5186978130090406, 0.48867057396789015, 0.4420048325478151, 0.5055276642370925, 0.4632114398476904, 0.4789066868962917, 0.5254370889616953, 0.5064681598219931, 0.039509034858224545, 0.031040817629584883, 0.017958268639857722, 0.051696130758782766, 0.06006255047772957, 0.02258423599719661, 0.03900643252828451, 0.057182362403228604, 0.06074607035480617, 0.1826214015313068, 0.2139177278565334, 0.22829480933647506, 0.1917936650860803, 0.19780262589308029, 0.19827534860763785, 0.19775905104561742, 0.24048214110233634, 0.2257216093315122, 0.5705591547090583, 0.5976790824049552, 0.5816420423997781, 0.6346495175818907, 0.5900386977145413, 0.5807971825950504, 0.5787648120002888, 0.6120399382519545, 0.6002550852765005, 0.09939355886760326, 0.10751234005547905, 0.09492861492386162, 0.09585355250931749, 0.08457075908899447, 0.08257756900540647, 0.09375195796968128, 0.13856788636768902, 0.10697080727154284, 0.16430941512666597, 0.22018161070384534, 0.16735280940623565, 0.24077088612011344, 0.22811740649190582, 0.2009127029598592, 0.16436024260421278, 0.21097469648455425, 0.200685920883511, 0.3014154138941165, 0.2880078110996238, 0.2878237153924188, 0.27623614630677207, 0.25242275226298694, 0.27045497514117045, 0.2833065620185784, 0.3048775714342521, 0.28400497483625764, 0.22821483043433322, 0.19743652297486747, 0.1940605026919977, 0.20712142339188033, 0.2413411501082241, 0.20898184412395693, 0.21137988336390146, 0.2297913918559119, 0.2144733111157392, 0.19466719930540533, 0.1862871773928404, 0.18128664156976515, 0.18905151192638758, 0.17500676383197933, 0.23455737724329107, 0.18129961965259445, 0.21682270173382656, 0.18319145387653002, 0.17590287231686452, 0.1719186161301821, 0.1713423122081602, 0.16262322198063683, 0.181191040012308, 0.18553076915309208, 0.1743881152997272, 0.1704234814343374, 0.18189757093456227, 0.1681452122036744, 0.19878761970185077, 0.4106092142192306, 0.6050834729113882, 0.19109939593478675, 0.19436632413091304, 0.17028513984074978, 0.5939081651745153, 0.1801692726255656, 0.1993308964385061, 0.419607926197303, 0.2334646695551047, 0.6001043054987298, 0.2610284344906463, 0.1892081873476683, 0.2080487180245999, 0.20841934161290088, 0.2056155732977657, 0.19044224689376865, 0.18021282430718877, 0.18509273419994332, 0.1751196536859101, 0.2266488362557304, 0.1977756812418464, 0.18191765354981648, 0.2051536308461216, 0.21347285737642374, 0.08211724509399432, 0.08510001266989731, 0.0833262567900025, 0.07623524212716892, 0.0984060916864542, 0.08259440744540303, 0.07750247188276882, 0.08967761975969402, 0.08922943765441249]}, "mutation_prompt": null}
{"id": "904a63af-669d-4419-a4eb-8ce182f14471", "solution": "import numpy as np\n\nclass DynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                \n                # Introducing opposition-based learning for diversity and exploration\n                opposition_solution = self.lb + self.ub - selected_solutions[i]\n                opposition_fitness = func(opposition_solution)\n                if opposition_fitness < fitness_values[indexes[i]]:\n                    selected_solutions[i] = opposition_solution\n                    fitness_values[indexes[i]] = opposition_fitness\n                else:\n                    mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                    new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                    new_solution = np.clip(new_solution, self.lb, self.ub)\n                    new_fitness = func(new_solution)\n                \n                    if new_fitness < fitness_values[indexes[i]]:\n                        selected_solutions[i] = new_solution\n                        fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "DynamicMutationABCOptimizerImproved", "description": "Enhance exploration by introducing a novel opposition-based learning mechanism to generate diverse solutions and improve population spread.", "configspace": "", "generation": 45, "fitness": 0.08006398344499843, "feedback": "The algorithm DynamicMutationABCOptimizerImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "6b3c90a7-8426-40b5-adb6-c63e21f8a9a7", "metadata": {"aucs": [0.16279180436475615, 0.145004169759127, 0.16313624621608802, 0.13801370124394174, 0.15459596611452087, 0.16127999543279725, 0.15027730982473986, 0.16635939589414084, 0.1349192891662131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031326936347248924, 0.029123188896222896, 0.026218974765452208, 0.04475034834382008, 0.021983273234831735, 0.06913895620901567, 0.04609465171645477, 0.0297868632978201, 0.03429141033130201, 0.024746179871635077, 0.0152966254774215, 0.027715959586364303, 0.030603075354394216, 0.008771429983091772, 0.01658250666456529, 0.03204015816524841, 0.022264466442884823, 0.014478033298034876, 0.12210840839583548, 0.08581819516840405, 0.10094432247243534, 0.15460999570616918, 0.10859696042928169, 0.11983448572667388, 0.11311375258468093, 0.09098851144190667, 0.09494977593974674, 0.0948025702093146, 0.050826208763457226, 0.05573539616511558, 0.06169620904305717, 0.045512946319857805, 0.10724150102418173, 0.03728740932233032, 0.07531434523354164, 0.04723822778366882, 0.10831253344835945, 0.10052868083625632, 0.10618489348050097, 0.16079652754551266, 0.09944806414790597, 0.10230424517778358, 0.08264911915860795, 0.11845065956873646, 0.09436493321597705, 9.999999999998899e-05, 9.999999999998899e-05, 0.025903570860000724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007674302212426487, 0.0023843516464363557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365661032029766, 0.034009832966123255, 0.1122743097142882, 0.006137284315954061, 0.02290166818324446, 0.04208924666449965, 0.040196494835903596, 0.018986504142114113, 0.02010834404600914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17535507707467513, 0.19919072602997467, 0.195773772010151, 0.1751404592004816, 0.16284077809577135, 0.19289962198180333, 0.20051358613381254, 0.16053287938573735, 0.17817046276793624, 0.04274565819500842, 0.03286303755899811, 0.03414605862226816, 0.05902947770790545, 0.03633987563427998, 0.03759916530788654, 0.029534038978329624, 0.025668396277578776, 0.030947606601683608, 0.1646181080525454, 0.1255676561380067, 0.19697880427516345, 0.17152172860442694, 0.12165334319645515, 0.12272564580094947, 0.1264778669571075, 0.1186981304036584, 0.13649057145117272, 0.1768743830623929, 0.1367107831381008, 0.1689227498522703, 0.16591289478812354, 0.1604420733796873, 0.15725929587058474, 0.153399882235849, 0.17377774300845283, 0.16525529529460115, 0.08575668728029773, 0.07482419654670047, 0.10591039498184696, 0.09540264747698346, 0.11114836560086261, 0.10184138112816932, 0.10408375901307432, 0.10964545789050861, 0.09691414163779266, 0.14128925159930428, 0.1394271528762009, 0.14261630005093306, 0.16163222339838268, 0.13892321756041714, 0.15042784538421217, 0.13697055914057932, 0.13558309736663432, 0.14815561578726355, 0.06914592257037, 0.12318295475385022, 0.11804964877440216, 0.12903167093210943, 0.12413103367636047, 0.1296374006663651, 0.13677066829119722, 0.14254298952115985, 0.15022166077921717, 0.11321655259649654, 0.1362696910816148, 0.15771843584033507, 0.21334778437372015, 0.1326821036241005, 0.14544534203233794, 0.11916637898020077, 0.1102834881027186, 0.15240851157166313, 0.1651249558443133, 0.11730458464034221, 0.1450246186143329, 0.119632649606077, 0.12741287374386934, 0.091425839552284, 0.10855394655308759, 0.15073324199484361, 0.1826568334690788, 0.18183997322060774, 0.17286332809794291, 0.17083889995419743, 0.17237795165395986, 0.16047841031624155, 0.17463942409812316, 0.18025420210168974, 0.18238887254784963, 0.17088095072066412, 0.049044915319531146, 0.036552072964629034, 0.04736360045189869, 0.03985967405091373, 0.035785708164150165, 0.05645707786765253, 0.03193117988488736, 0.04233189610556254, 0.06100826239998791]}, "mutation_prompt": null}
{"id": "d3f853e8-b2f3-4ee9-9f45-455f3dca6644", "solution": "import numpy as np\n\nclass DynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "DynamicMutationABCOptimizerImproved", "description": "Improve convergence by incorporating a dynamic strategy to adjust the chaos sequence generation based on fitness values.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b3c90a7-8426-40b5-adb6-c63e21f8a9a7", "metadata": {"aucs": [0.6695891271002237, 0.650535883677773, 0.6517025952000747, 0.7119390829350924, 0.6877465851304387, 0.6879526006863883, 0.7204505847028986, 0.6766135184062505, 0.6672224999286921, 0.3758420637648964, 0.34086173009644793, 0.3808428563517309, 0.3742381198950837, 0.37235304486700194, 0.3830919357535919, 0.35102989695527054, 0.32327419167122773, 0.3591433578929989, 0.11021041574540957, 0.10629127524930515, 0.11149674568977441, 0.10430352508443286, 0.10395989418993323, 0.10547327377530147, 0.09315594222188106, 0.12616444650629433, 0.10551175141823299, 0.08733795154021828, 0.10950930096488665, 0.06756513389827412, 0.09892723855602048, 0.08077981063581796, 0.09118793766172661, 0.08302039795623772, 0.08726045649260739, 0.1114853852934029, 0.9517977385469292, 0.9592767687260226, 0.9765504442536165, 0.929570025320601, 0.9362707400399014, 0.8903287556747315, 0.9257862367150558, 0.9594119423265118, 0.9538545494743107, 0.29004560162732074, 0.3267184826858974, 0.3009873897051133, 0.2999351985074703, 0.32843547245856797, 0.2864823249281703, 0.29514541141291906, 0.35151626329020724, 0.3216188454522684, 0.6102057385401054, 0.6544749438085388, 0.6750221934292435, 0.6423549164628997, 0.6817247168346242, 0.7334688469929249, 0.7049424545359264, 0.6639373486597655, 0.6714733931548866, 0.21272561839327486, 0.22571952108883586, 0.11495337185171484, 0.11342814567553228, 0.13797160250533702, 0.15297037888276788, 0.18930556077123972, 0.08433884321579699, 0.13699053370721648, 0.10286122716507162, 0.10909747093326838, 0.024323470315235185, 0.12642315385377167, 0.11061564497169307, 0.19743051759286745, 0.12208034135619616, 0.1442398749465258, 0.10177918467291003, 0.27132548039788507, 0.2471072634015149, 0.2768888141554193, 0.2608938696036798, 0.26136025071698965, 0.2985686551953247, 0.24383490391108376, 0.28042925979018896, 0.30860889667440283, 0.4847535153219754, 0.5186978130090406, 0.48867057396789015, 0.4420048325478151, 0.5055276642370925, 0.4632114398476904, 0.4789066868962917, 0.5254370889616953, 0.5064681598219931, 0.039509034858224545, 0.031040817629584883, 0.017958268639857722, 0.051696130758782766, 0.06006255047772957, 0.02258423599719661, 0.03900643252828451, 0.057182362403228604, 0.06074607035480617, 0.1826214015313068, 0.2139177278565334, 0.22829480933647506, 0.1917936650860803, 0.19780262589308029, 0.19827534860763785, 0.19775905104561742, 0.24048214110233634, 0.2257216093315122, 0.5705591547090583, 0.5976790824049552, 0.5816420423997781, 0.6346495175818907, 0.5900386977145413, 0.5807971825950504, 0.5787648120002888, 0.6120399382519545, 0.6002550852765005, 0.09939355886760326, 0.10751234005547905, 0.09492861492386162, 0.09585355250931749, 0.08457075908899447, 0.08257756900540647, 0.09375195796968128, 0.13856788636768902, 0.10697080727154284, 0.16430941512666597, 0.22018161070384534, 0.16735280940623565, 0.24077088612011344, 0.22811740649190582, 0.2009127029598592, 0.16436024260421278, 0.21097469648455425, 0.200685920883511, 0.3014154138941165, 0.2880078110996238, 0.2878237153924188, 0.27623614630677207, 0.25242275226298694, 0.27045497514117045, 0.2833065620185784, 0.3048775714342521, 0.28400497483625764, 0.22821483043433322, 0.19743652297486747, 0.1940605026919977, 0.20712142339188033, 0.2413411501082241, 0.20898184412395693, 0.21137988336390146, 0.2297913918559119, 0.2144733111157392, 0.19466719930540533, 0.1862871773928404, 0.18128664156976515, 0.18905151192638758, 0.17500676383197933, 0.23455737724329107, 0.18129961965259445, 0.21682270173382656, 0.18319145387653002, 0.17590287231686452, 0.1719186161301821, 0.1713423122081602, 0.16262322198063683, 0.181191040012308, 0.18553076915309208, 0.1743881152997272, 0.1704234814343374, 0.18189757093456227, 0.1681452122036744, 0.19878761970185077, 0.4106092142192306, 0.6050834729113882, 0.19109939593478675, 0.19436632413091304, 0.17028513984074978, 0.5939081651745153, 0.1801692726255656, 0.1993308964385061, 0.419607926197303, 0.2334646695551047, 0.6001043054987298, 0.2610284344906463, 0.1892081873476683, 0.2080487180245999, 0.20841934161290088, 0.2056155732977657, 0.19044224689376865, 0.18021282430718877, 0.18509273419994332, 0.1751196536859101, 0.2266488362557304, 0.1977756812418464, 0.18191765354981648, 0.2051536308461216, 0.21347285737642374, 0.08211724509399432, 0.08510001266989731, 0.0833262567900025, 0.07623524212716892, 0.0984060916864542, 0.08259440744540303, 0.07750247188276882, 0.08967761975969402, 0.08922943765441249]}, "mutation_prompt": null}
{"id": "2d0099e9-fa31-467a-9209-ac775dc6113b", "solution": "import numpy as np\n\nclass DynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "DynamicMutationABCOptimizerImproved", "description": "Improve convergence by incorporating a dynamic strategy to adjust the chaos sequence generation based on fitness values.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b3c90a7-8426-40b5-adb6-c63e21f8a9a7", "metadata": {"aucs": [0.6695891271002237, 0.650535883677773, 0.6517025952000747, 0.7119390829350924, 0.6877465851304387, 0.6879526006863883, 0.7204505847028986, 0.6766135184062505, 0.6672224999286921, 0.3758420637648964, 0.34086173009644793, 0.3808428563517309, 0.3742381198950837, 0.37235304486700194, 0.3830919357535919, 0.35102989695527054, 0.32327419167122773, 0.3591433578929989, 0.11021041574540957, 0.10629127524930515, 0.11149674568977441, 0.10430352508443286, 0.10395989418993323, 0.10547327377530147, 0.09315594222188106, 0.12616444650629433, 0.10551175141823299, 0.08733795154021828, 0.10950930096488665, 0.06756513389827412, 0.09892723855602048, 0.08077981063581796, 0.09118793766172661, 0.08302039795623772, 0.08726045649260739, 0.1114853852934029, 0.9517977385469292, 0.9592767687260226, 0.9765504442536165, 0.929570025320601, 0.9362707400399014, 0.8903287556747315, 0.9257862367150558, 0.9594119423265118, 0.9538545494743107, 0.29004560162732074, 0.3267184826858974, 0.3009873897051133, 0.2999351985074703, 0.32843547245856797, 0.2864823249281703, 0.29514541141291906, 0.35151626329020724, 0.3216188454522684, 0.6102057385401054, 0.6544749438085388, 0.6750221934292435, 0.6423549164628997, 0.6817247168346242, 0.7334688469929249, 0.7049424545359264, 0.6639373486597655, 0.6714733931548866, 0.21272561839327486, 0.22571952108883586, 0.11495337185171484, 0.11342814567553228, 0.13797160250533702, 0.15297037888276788, 0.18930556077123972, 0.08433884321579699, 0.13699053370721648, 0.10286122716507162, 0.10909747093326838, 0.024323470315235185, 0.12642315385377167, 0.11061564497169307, 0.19743051759286745, 0.12208034135619616, 0.1442398749465258, 0.10177918467291003, 0.27132548039788507, 0.2471072634015149, 0.2768888141554193, 0.2608938696036798, 0.26136025071698965, 0.2985686551953247, 0.24383490391108376, 0.28042925979018896, 0.30860889667440283, 0.4847535153219754, 0.5186978130090406, 0.48867057396789015, 0.4420048325478151, 0.5055276642370925, 0.4632114398476904, 0.4789066868962917, 0.5254370889616953, 0.5064681598219931, 0.039509034858224545, 0.031040817629584883, 0.017958268639857722, 0.051696130758782766, 0.06006255047772957, 0.02258423599719661, 0.03900643252828451, 0.057182362403228604, 0.06074607035480617, 0.1826214015313068, 0.2139177278565334, 0.22829480933647506, 0.1917936650860803, 0.19780262589308029, 0.19827534860763785, 0.19775905104561742, 0.24048214110233634, 0.2257216093315122, 0.5705591547090583, 0.5976790824049552, 0.5816420423997781, 0.6346495175818907, 0.5900386977145413, 0.5807971825950504, 0.5787648120002888, 0.6120399382519545, 0.6002550852765005, 0.09939355886760326, 0.10751234005547905, 0.09492861492386162, 0.09585355250931749, 0.08457075908899447, 0.08257756900540647, 0.09375195796968128, 0.13856788636768902, 0.10697080727154284, 0.16430941512666597, 0.22018161070384534, 0.16735280940623565, 0.24077088612011344, 0.22811740649190582, 0.2009127029598592, 0.16436024260421278, 0.21097469648455425, 0.200685920883511, 0.3014154138941165, 0.2880078110996238, 0.2878237153924188, 0.27623614630677207, 0.25242275226298694, 0.27045497514117045, 0.2833065620185784, 0.3048775714342521, 0.28400497483625764, 0.22821483043433322, 0.19743652297486747, 0.1940605026919977, 0.20712142339188033, 0.2413411501082241, 0.20898184412395693, 0.21137988336390146, 0.2297913918559119, 0.2144733111157392, 0.19466719930540533, 0.1862871773928404, 0.18128664156976515, 0.18905151192638758, 0.17500676383197933, 0.23455737724329107, 0.18129961965259445, 0.21682270173382656, 0.18319145387653002, 0.17590287231686452, 0.1719186161301821, 0.1713423122081602, 0.16262322198063683, 0.181191040012308, 0.18553076915309208, 0.1743881152997272, 0.1704234814343374, 0.18189757093456227, 0.1681452122036744, 0.19878761970185077, 0.4106092142192306, 0.6050834729113882, 0.19109939593478675, 0.19436632413091304, 0.17028513984074978, 0.5939081651745153, 0.1801692726255656, 0.1993308964385061, 0.419607926197303, 0.2334646695551047, 0.6001043054987298, 0.2610284344906463, 0.1892081873476683, 0.2080487180245999, 0.20841934161290088, 0.2056155732977657, 0.19044224689376865, 0.18021282430718877, 0.18509273419994332, 0.1751196536859101, 0.2266488362557304, 0.1977756812418464, 0.18191765354981648, 0.2051536308461216, 0.21347285737642374, 0.08211724509399432, 0.08510001266989731, 0.0833262567900025, 0.07623524212716892, 0.0984060916864542, 0.08259440744540303, 0.07750247188276882, 0.08967761975969402, 0.08922943765441249]}, "mutation_prompt": null}
{"id": "15f6110f-e719-48a3-9d92-2ec604e75c94", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedDynamicMutationABCOptimizer", "description": "Enhance exploration by introducing Levy flights for global search capabilities while maintaining local exploitation through chaos sequences.", "configspace": "", "generation": 48, "fitness": 0.30413284645300775, "feedback": "The algorithm EnhancedDynamicMutationABCOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.22.", "error": "", "parent_id": "6b3c90a7-8426-40b5-adb6-c63e21f8a9a7", "metadata": {"aucs": [0.6857863667592833, 0.6122934586334995, 0.6364135864668506, 0.6831729606281353, 0.6641038084545471, 0.6873203707490416, 0.6559503389782317, 0.672607472957715, 0.6577334805919144, 0.35525122409801124, 0.32403780943524696, 0.2980932897944505, 0.37049826053876167, 0.27205611885253433, 0.3125176609421175, 0.3360658419665681, 0.3004160561989526, 0.3572967201799906, 0.11700466066852444, 0.12886675572746176, 0.35753081965703726, 0.13093036015137638, 0.11756017230498528, 0.1270410013500829, 0.12342341303130011, 0.11735315888840447, 0.10767951397198994, 0.1137118573658914, 0.12830605323501332, 0.1165690292061976, 0.11699658761939757, 0.1056935207330556, 0.1131147978641911, 0.10420440513334883, 0.10969894365961497, 0.08893054260585265, 0.9560606361110305, 0.9210348253730848, 0.9467695653419316, 0.9689181521659752, 0.9733993291615385, 0.9131367264156247, 0.9417569498431066, 0.889525867930778, 0.9705551607657923, 0.3544286811844982, 0.2924842327946613, 0.3188645326174604, 0.3260011982404418, 0.2656986627099107, 0.32433304539275887, 0.30523639061271346, 0.2900896075590721, 0.3095888873812449, 0.682272845260115, 0.5680199250872562, 0.6116915704283037, 0.7262747124127398, 0.6622373575806868, 0.6971809503495338, 0.6348529161461246, 0.49349458633139986, 0.585619458736282, 0.1523225403505878, 0.13843622913223685, 0.17009486981054267, 0.18492200967125205, 0.15111082085213567, 0.15247632287410628, 0.30759822350726784, 0.13735338102003225, 0.16200105149032407, 0.36616043236630946, 0.16731227700654105, 0.1460176876052901, 0.24495600623289093, 0.30533720555399224, 0.13513479357041547, 0.1707802353583291, 0.15774335283270247, 0.33416095570346716, 0.3447720086777375, 0.26621339376853403, 0.24893038767061848, 0.3331445228158756, 0.22842594322797782, 0.2642031903045684, 0.2713026848849146, 0.2538316372468429, 0.23729728444556253, 0.5087626789670445, 0.43512757212010833, 0.47695450286902175, 0.46094473421031823, 0.415124233484369, 0.3308582379481221, 0.5156377925475484, 0.45926909026825735, 0.4889232129575737, 0.021970662503283722, 0.04387036618290674, 0.041658001174690984, 0.05036695710559702, 0.03790190303404728, 0.05634422923240778, 0.058334915208238414, 0.0370885144483496, 0.03775183953538075, 0.211242967828158, 0.20265691504363126, 0.2383067677650208, 0.2313686508152304, 0.18427661842918075, 0.2322489442605652, 0.23630709133182304, 0.21108743515548845, 0.2129449881333061, 0.6061000300236545, 0.5619245717275965, 0.5877769227257335, 0.5828330636961188, 0.6020326346401215, 0.5904533899188043, 0.6011168640446073, 0.5650170182078048, 0.570623851391983, 0.1149473834186765, 0.08956562055255601, 0.10487702245362163, 0.12018429638905637, 0.0836036413526603, 0.1282545602361439, 0.1304158777616714, 0.12543186660884897, 0.1056831489550677, 0.20031592592995218, 0.29069516109772897, 0.21778623937790276, 0.1808120809073248, 0.22879708483255923, 0.1989578320787294, 0.22773470164139298, 0.2062306044735014, 0.16711369318925795, 0.2917488336561933, 0.25560379331604943, 0.3013990180610989, 0.30684249471523517, 0.28360238035525775, 0.2729959753439479, 0.289805395635219, 0.24314579502363165, 0.29667007879059637, 0.22709449002780357, 0.21113682368501563, 0.22005346370542223, 0.2129407232033016, 0.20538727024176862, 0.21171699708347336, 0.25819133252060567, 0.209298501215345, 0.2212926027562121, 0.18857939147216174, 0.17736758354416782, 0.17556024310156704, 0.20011805219635703, 0.18383133649409567, 0.17472074014183292, 0.18398660892197116, 0.19853918300126527, 0.18410900316365464, 0.18119879989042764, 0.1818690758451883, 0.19443217050397565, 0.1885835421242259, 0.185795247564998, 0.17765823734976605, 0.18622129488161465, 0.19812484140229902, 0.17739301465792068, 0.16731640142103588, 0.54442384826491, 0.1618050562571849, 0.7623533982104035, 0.18696134135063758, 0.17384258307682432, 0.6014866653674676, 0.18121500685944536, 0.18488343473841728, 0.7102972797093988, 0.3403180462265385, 0.1943785514467561, 0.27490906231675327, 0.44788472365740495, 0.6294636385771891, 0.20575318361328032, 0.20580487406108416, 0.5646193901210468, 0.19520375610610974, 0.17591066379817366, 0.1906566485495429, 0.19148962444256445, 0.2023365128908151, 0.19559062985164788, 0.18893573525231333, 0.1991981725792742, 0.1955444729306992, 0.0758435276759023, 0.09197853197678763, 0.07639184066196014, 0.08199580577614429, 0.09010654503529059, 0.0800488666197271, 0.08265297802027527, 0.08912903727503285, 0.1005391120305289]}, "mutation_prompt": null}
{"id": "f733ef75-1583-47a8-8336-df37a657dde3", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedDynamicMutationABCOptimizer", "description": "Enhance exploration by introducing Levy flights for global search capabilities while maintaining local exploitation through chaos sequences.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "15f6110f-e719-48a3-9d92-2ec604e75c94", "metadata": {"aucs": [0.6857863667592833, 0.6122934586334995, 0.6364135864668506, 0.6831729606281353, 0.6641038084545471, 0.6873203707490416, 0.6559503389782317, 0.672607472957715, 0.6577334805919144, 0.35525122409801124, 0.32403780943524696, 0.2980932897944505, 0.37049826053876167, 0.27205611885253433, 0.3125176609421175, 0.3360658419665681, 0.3004160561989526, 0.3572967201799906, 0.11700466066852444, 0.12886675572746176, 0.35753081965703726, 0.13093036015137638, 0.11756017230498528, 0.1270410013500829, 0.12342341303130011, 0.11735315888840447, 0.10767951397198994, 0.1137118573658914, 0.12830605323501332, 0.1165690292061976, 0.11699658761939757, 0.1056935207330556, 0.1131147978641911, 0.10420440513334883, 0.10969894365961497, 0.08893054260585265, 0.9560606361110305, 0.9210348253730848, 0.9467695653419316, 0.9689181521659752, 0.9733993291615385, 0.9131367264156247, 0.9417569498431066, 0.889525867930778, 0.9705551607657923, 0.3544286811844982, 0.2924842327946613, 0.3188645326174604, 0.3260011982404418, 0.2656986627099107, 0.32433304539275887, 0.30523639061271346, 0.2900896075590721, 0.3095888873812449, 0.682272845260115, 0.5680199250872562, 0.6116915704283037, 0.7262747124127398, 0.6622373575806868, 0.6971809503495338, 0.6348529161461246, 0.49349458633139986, 0.585619458736282, 0.1523225403505878, 0.13843622913223685, 0.17009486981054267, 0.18492200967125205, 0.15111082085213567, 0.15247632287410628, 0.30759822350726784, 0.13735338102003225, 0.16200105149032407, 0.36616043236630946, 0.16731227700654105, 0.1460176876052901, 0.24495600623289093, 0.30533720555399224, 0.13513479357041547, 0.1707802353583291, 0.15774335283270247, 0.33416095570346716, 0.3447720086777375, 0.26621339376853403, 0.24893038767061848, 0.3331445228158756, 0.22842594322797782, 0.2642031903045684, 0.2713026848849146, 0.2538316372468429, 0.23729728444556253, 0.5087626789670445, 0.43512757212010833, 0.47695450286902175, 0.46094473421031823, 0.415124233484369, 0.3308582379481221, 0.5156377925475484, 0.45926909026825735, 0.4889232129575737, 0.021970662503283722, 0.04387036618290674, 0.041658001174690984, 0.05036695710559702, 0.03790190303404728, 0.05634422923240778, 0.058334915208238414, 0.0370885144483496, 0.03775183953538075, 0.211242967828158, 0.20265691504363126, 0.2383067677650208, 0.2313686508152304, 0.18427661842918075, 0.2322489442605652, 0.23630709133182304, 0.21108743515548845, 0.2129449881333061, 0.6061000300236545, 0.5619245717275965, 0.5877769227257335, 0.5828330636961188, 0.6020326346401215, 0.5904533899188043, 0.6011168640446073, 0.5650170182078048, 0.570623851391983, 0.1149473834186765, 0.08956562055255601, 0.10487702245362163, 0.12018429638905637, 0.0836036413526603, 0.1282545602361439, 0.1304158777616714, 0.12543186660884897, 0.1056831489550677, 0.20031592592995218, 0.29069516109772897, 0.21778623937790276, 0.1808120809073248, 0.22879708483255923, 0.1989578320787294, 0.22773470164139298, 0.2062306044735014, 0.16711369318925795, 0.2917488336561933, 0.25560379331604943, 0.3013990180610989, 0.30684249471523517, 0.28360238035525775, 0.2729959753439479, 0.289805395635219, 0.24314579502363165, 0.29667007879059637, 0.22709449002780357, 0.21113682368501563, 0.22005346370542223, 0.2129407232033016, 0.20538727024176862, 0.21171699708347336, 0.25819133252060567, 0.209298501215345, 0.2212926027562121, 0.18857939147216174, 0.17736758354416782, 0.17556024310156704, 0.20011805219635703, 0.18383133649409567, 0.17472074014183292, 0.18398660892197116, 0.19853918300126527, 0.18410900316365464, 0.18119879989042764, 0.1818690758451883, 0.19443217050397565, 0.1885835421242259, 0.185795247564998, 0.17765823734976605, 0.18622129488161465, 0.19812484140229902, 0.17739301465792068, 0.16731640142103588, 0.54442384826491, 0.1618050562571849, 0.7623533982104035, 0.18696134135063758, 0.17384258307682432, 0.6014866653674676, 0.18121500685944536, 0.18488343473841728, 0.7102972797093988, 0.3403180462265385, 0.1943785514467561, 0.27490906231675327, 0.44788472365740495, 0.6294636385771891, 0.20575318361328032, 0.20580487406108416, 0.5646193901210468, 0.19520375610610974, 0.17591066379817366, 0.1906566485495429, 0.19148962444256445, 0.2023365128908151, 0.19559062985164788, 0.18893573525231333, 0.1991981725792742, 0.1955444729306992, 0.0758435276759023, 0.09197853197678763, 0.07639184066196014, 0.08199580577614429, 0.09010654503529059, 0.0800488666197271, 0.08265297802027527, 0.08912903727503285, 0.1005391120305289]}, "mutation_prompt": null}
{"id": "ff3398f2-d8da-420b-b61b-d84ef43ada4f", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedDynamicMutationABCOptimizer", "description": "Enhance exploration by introducing Levy flights for global search capabilities while maintaining local exploitation through chaos sequences.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15f6110f-e719-48a3-9d92-2ec604e75c94", "metadata": {"aucs": [0.6857863667592833, 0.6122934586334995, 0.6364135864668506, 0.6831729606281353, 0.6641038084545471, 0.6873203707490416, 0.6559503389782317, 0.672607472957715, 0.6577334805919144, 0.35525122409801124, 0.32403780943524696, 0.2980932897944505, 0.37049826053876167, 0.27205611885253433, 0.3125176609421175, 0.3360658419665681, 0.3004160561989526, 0.3572967201799906, 0.11700466066852444, 0.12886675572746176, 0.35753081965703726, 0.13093036015137638, 0.11756017230498528, 0.1270410013500829, 0.12342341303130011, 0.11735315888840447, 0.10767951397198994, 0.1137118573658914, 0.12830605323501332, 0.1165690292061976, 0.11699658761939757, 0.1056935207330556, 0.1131147978641911, 0.10420440513334883, 0.10969894365961497, 0.08893054260585265, 0.9560606361110305, 0.9210348253730848, 0.9467695653419316, 0.9689181521659752, 0.9733993291615385, 0.9131367264156247, 0.9417569498431066, 0.889525867930778, 0.9705551607657923, 0.3544286811844982, 0.2924842327946613, 0.3188645326174604, 0.3260011982404418, 0.2656986627099107, 0.32433304539275887, 0.30523639061271346, 0.2900896075590721, 0.3095888873812449, 0.682272845260115, 0.5680199250872562, 0.6116915704283037, 0.7262747124127398, 0.6622373575806868, 0.6971809503495338, 0.6348529161461246, 0.49349458633139986, 0.585619458736282, 0.1523225403505878, 0.13843622913223685, 0.17009486981054267, 0.18492200967125205, 0.15111082085213567, 0.15247632287410628, 0.30759822350726784, 0.13735338102003225, 0.16200105149032407, 0.36616043236630946, 0.16731227700654105, 0.1460176876052901, 0.24495600623289093, 0.30533720555399224, 0.13513479357041547, 0.1707802353583291, 0.15774335283270247, 0.33416095570346716, 0.3447720086777375, 0.26621339376853403, 0.24893038767061848, 0.3331445228158756, 0.22842594322797782, 0.2642031903045684, 0.2713026848849146, 0.2538316372468429, 0.23729728444556253, 0.5087626789670445, 0.43512757212010833, 0.47695450286902175, 0.46094473421031823, 0.415124233484369, 0.3308582379481221, 0.5156377925475484, 0.45926909026825735, 0.4889232129575737, 0.021970662503283722, 0.04387036618290674, 0.041658001174690984, 0.05036695710559702, 0.03790190303404728, 0.05634422923240778, 0.058334915208238414, 0.0370885144483496, 0.03775183953538075, 0.211242967828158, 0.20265691504363126, 0.2383067677650208, 0.2313686508152304, 0.18427661842918075, 0.2322489442605652, 0.23630709133182304, 0.21108743515548845, 0.2129449881333061, 0.6061000300236545, 0.5619245717275965, 0.5877769227257335, 0.5828330636961188, 0.6020326346401215, 0.5904533899188043, 0.6011168640446073, 0.5650170182078048, 0.570623851391983, 0.1149473834186765, 0.08956562055255601, 0.10487702245362163, 0.12018429638905637, 0.0836036413526603, 0.1282545602361439, 0.1304158777616714, 0.12543186660884897, 0.1056831489550677, 0.20031592592995218, 0.29069516109772897, 0.21778623937790276, 0.1808120809073248, 0.22879708483255923, 0.1989578320787294, 0.22773470164139298, 0.2062306044735014, 0.16711369318925795, 0.2917488336561933, 0.25560379331604943, 0.3013990180610989, 0.30684249471523517, 0.28360238035525775, 0.2729959753439479, 0.289805395635219, 0.24314579502363165, 0.29667007879059637, 0.22709449002780357, 0.21113682368501563, 0.22005346370542223, 0.2129407232033016, 0.20538727024176862, 0.21171699708347336, 0.25819133252060567, 0.209298501215345, 0.2212926027562121, 0.18857939147216174, 0.17736758354416782, 0.17556024310156704, 0.20011805219635703, 0.18383133649409567, 0.17472074014183292, 0.18398660892197116, 0.19853918300126527, 0.18410900316365464, 0.18119879989042764, 0.1818690758451883, 0.19443217050397565, 0.1885835421242259, 0.185795247564998, 0.17765823734976605, 0.18622129488161465, 0.19812484140229902, 0.17739301465792068, 0.16731640142103588, 0.54442384826491, 0.1618050562571849, 0.7623533982104035, 0.18696134135063758, 0.17384258307682432, 0.6014866653674676, 0.18121500685944536, 0.18488343473841728, 0.7102972797093988, 0.3403180462265385, 0.1943785514467561, 0.27490906231675327, 0.44788472365740495, 0.6294636385771891, 0.20575318361328032, 0.20580487406108416, 0.5646193901210468, 0.19520375610610974, 0.17591066379817366, 0.1906566485495429, 0.19148962444256445, 0.2023365128908151, 0.19559062985164788, 0.18893573525231333, 0.1991981725792742, 0.1955444729306992, 0.0758435276759023, 0.09197853197678763, 0.07639184066196014, 0.08199580577614429, 0.09010654503529059, 0.0800488666197271, 0.08265297802027527, 0.08912903727503285, 0.1005391120305289]}, "mutation_prompt": null}
{"id": "15c5f5e2-dd7f-4a1c-9126-faa5a6e5b762", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedDynamicMutationABCOptimizer", "description": "Enhance exploration by introducing Levy flights for global search capabilities while maintaining local exploitation through chaos sequences.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15f6110f-e719-48a3-9d92-2ec604e75c94", "metadata": {"aucs": [0.6857863667592833, 0.6122934586334995, 0.6364135864668506, 0.6831729606281353, 0.6641038084545471, 0.6873203707490416, 0.6559503389782317, 0.672607472957715, 0.6577334805919144, 0.35525122409801124, 0.32403780943524696, 0.2980932897944505, 0.37049826053876167, 0.27205611885253433, 0.3125176609421175, 0.3360658419665681, 0.3004160561989526, 0.3572967201799906, 0.11700466066852444, 0.12886675572746176, 0.35753081965703726, 0.13093036015137638, 0.11756017230498528, 0.1270410013500829, 0.12342341303130011, 0.11735315888840447, 0.10767951397198994, 0.1137118573658914, 0.12830605323501332, 0.1165690292061976, 0.11699658761939757, 0.1056935207330556, 0.1131147978641911, 0.10420440513334883, 0.10969894365961497, 0.08893054260585265, 0.9560606361110305, 0.9210348253730848, 0.9467695653419316, 0.9689181521659752, 0.9733993291615385, 0.9131367264156247, 0.9417569498431066, 0.889525867930778, 0.9705551607657923, 0.3544286811844982, 0.2924842327946613, 0.3188645326174604, 0.3260011982404418, 0.2656986627099107, 0.32433304539275887, 0.30523639061271346, 0.2900896075590721, 0.3095888873812449, 0.682272845260115, 0.5680199250872562, 0.6116915704283037, 0.7262747124127398, 0.6622373575806868, 0.6971809503495338, 0.6348529161461246, 0.49349458633139986, 0.585619458736282, 0.1523225403505878, 0.13843622913223685, 0.17009486981054267, 0.18492200967125205, 0.15111082085213567, 0.15247632287410628, 0.30759822350726784, 0.13735338102003225, 0.16200105149032407, 0.36616043236630946, 0.16731227700654105, 0.1460176876052901, 0.24495600623289093, 0.30533720555399224, 0.13513479357041547, 0.1707802353583291, 0.15774335283270247, 0.33416095570346716, 0.3447720086777375, 0.26621339376853403, 0.24893038767061848, 0.3331445228158756, 0.22842594322797782, 0.2642031903045684, 0.2713026848849146, 0.2538316372468429, 0.23729728444556253, 0.5087626789670445, 0.43512757212010833, 0.47695450286902175, 0.46094473421031823, 0.415124233484369, 0.3308582379481221, 0.5156377925475484, 0.45926909026825735, 0.4889232129575737, 0.021970662503283722, 0.04387036618290674, 0.041658001174690984, 0.05036695710559702, 0.03790190303404728, 0.05634422923240778, 0.058334915208238414, 0.0370885144483496, 0.03775183953538075, 0.211242967828158, 0.20265691504363126, 0.2383067677650208, 0.2313686508152304, 0.18427661842918075, 0.2322489442605652, 0.23630709133182304, 0.21108743515548845, 0.2129449881333061, 0.6061000300236545, 0.5619245717275965, 0.5877769227257335, 0.5828330636961188, 0.6020326346401215, 0.5904533899188043, 0.6011168640446073, 0.5650170182078048, 0.570623851391983, 0.1149473834186765, 0.08956562055255601, 0.10487702245362163, 0.12018429638905637, 0.0836036413526603, 0.1282545602361439, 0.1304158777616714, 0.12543186660884897, 0.1056831489550677, 0.20031592592995218, 0.29069516109772897, 0.21778623937790276, 0.1808120809073248, 0.22879708483255923, 0.1989578320787294, 0.22773470164139298, 0.2062306044735014, 0.16711369318925795, 0.2917488336561933, 0.25560379331604943, 0.3013990180610989, 0.30684249471523517, 0.28360238035525775, 0.2729959753439479, 0.289805395635219, 0.24314579502363165, 0.29667007879059637, 0.22709449002780357, 0.21113682368501563, 0.22005346370542223, 0.2129407232033016, 0.20538727024176862, 0.21171699708347336, 0.25819133252060567, 0.209298501215345, 0.2212926027562121, 0.18857939147216174, 0.17736758354416782, 0.17556024310156704, 0.20011805219635703, 0.18383133649409567, 0.17472074014183292, 0.18398660892197116, 0.19853918300126527, 0.18410900316365464, 0.18119879989042764, 0.1818690758451883, 0.19443217050397565, 0.1885835421242259, 0.185795247564998, 0.17765823734976605, 0.18622129488161465, 0.19812484140229902, 0.17739301465792068, 0.16731640142103588, 0.54442384826491, 0.1618050562571849, 0.7623533982104035, 0.18696134135063758, 0.17384258307682432, 0.6014866653674676, 0.18121500685944536, 0.18488343473841728, 0.7102972797093988, 0.3403180462265385, 0.1943785514467561, 0.27490906231675327, 0.44788472365740495, 0.6294636385771891, 0.20575318361328032, 0.20580487406108416, 0.5646193901210468, 0.19520375610610974, 0.17591066379817366, 0.1906566485495429, 0.19148962444256445, 0.2023365128908151, 0.19559062985164788, 0.18893573525231333, 0.1991981725792742, 0.1955444729306992, 0.0758435276759023, 0.09197853197678763, 0.07639184066196014, 0.08199580577614429, 0.09010654503529059, 0.0800488666197271, 0.08265297802027527, 0.08912903727503285, 0.1005391120305289]}, "mutation_prompt": null}
{"id": "ad132135-61a8-4655-8beb-db93b9972c0d", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedDynamicMutationABCOptimizer", "description": "Enhance exploration by introducing Levy flights for global search capabilities while maintaining local exploitation through chaos sequences.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15f6110f-e719-48a3-9d92-2ec604e75c94", "metadata": {"aucs": [0.6857863667592833, 0.6122934586334995, 0.6364135864668506, 0.6831729606281353, 0.6641038084545471, 0.6873203707490416, 0.6559503389782317, 0.672607472957715, 0.6577334805919144, 0.35525122409801124, 0.32403780943524696, 0.2980932897944505, 0.37049826053876167, 0.27205611885253433, 0.3125176609421175, 0.3360658419665681, 0.3004160561989526, 0.3572967201799906, 0.11700466066852444, 0.12886675572746176, 0.35753081965703726, 0.13093036015137638, 0.11756017230498528, 0.1270410013500829, 0.12342341303130011, 0.11735315888840447, 0.10767951397198994, 0.1137118573658914, 0.12830605323501332, 0.1165690292061976, 0.11699658761939757, 0.1056935207330556, 0.1131147978641911, 0.10420440513334883, 0.10969894365961497, 0.08893054260585265, 0.9560606361110305, 0.9210348253730848, 0.9467695653419316, 0.9689181521659752, 0.9733993291615385, 0.9131367264156247, 0.9417569498431066, 0.889525867930778, 0.9705551607657923, 0.3544286811844982, 0.2924842327946613, 0.3188645326174604, 0.3260011982404418, 0.2656986627099107, 0.32433304539275887, 0.30523639061271346, 0.2900896075590721, 0.3095888873812449, 0.682272845260115, 0.5680199250872562, 0.6116915704283037, 0.7262747124127398, 0.6622373575806868, 0.6971809503495338, 0.6348529161461246, 0.49349458633139986, 0.585619458736282, 0.1523225403505878, 0.13843622913223685, 0.17009486981054267, 0.18492200967125205, 0.15111082085213567, 0.15247632287410628, 0.30759822350726784, 0.13735338102003225, 0.16200105149032407, 0.36616043236630946, 0.16731227700654105, 0.1460176876052901, 0.24495600623289093, 0.30533720555399224, 0.13513479357041547, 0.1707802353583291, 0.15774335283270247, 0.33416095570346716, 0.3447720086777375, 0.26621339376853403, 0.24893038767061848, 0.3331445228158756, 0.22842594322797782, 0.2642031903045684, 0.2713026848849146, 0.2538316372468429, 0.23729728444556253, 0.5087626789670445, 0.43512757212010833, 0.47695450286902175, 0.46094473421031823, 0.415124233484369, 0.3308582379481221, 0.5156377925475484, 0.45926909026825735, 0.4889232129575737, 0.021970662503283722, 0.04387036618290674, 0.041658001174690984, 0.05036695710559702, 0.03790190303404728, 0.05634422923240778, 0.058334915208238414, 0.0370885144483496, 0.03775183953538075, 0.211242967828158, 0.20265691504363126, 0.2383067677650208, 0.2313686508152304, 0.18427661842918075, 0.2322489442605652, 0.23630709133182304, 0.21108743515548845, 0.2129449881333061, 0.6061000300236545, 0.5619245717275965, 0.5877769227257335, 0.5828330636961188, 0.6020326346401215, 0.5904533899188043, 0.6011168640446073, 0.5650170182078048, 0.570623851391983, 0.1149473834186765, 0.08956562055255601, 0.10487702245362163, 0.12018429638905637, 0.0836036413526603, 0.1282545602361439, 0.1304158777616714, 0.12543186660884897, 0.1056831489550677, 0.20031592592995218, 0.29069516109772897, 0.21778623937790276, 0.1808120809073248, 0.22879708483255923, 0.1989578320787294, 0.22773470164139298, 0.2062306044735014, 0.16711369318925795, 0.2917488336561933, 0.25560379331604943, 0.3013990180610989, 0.30684249471523517, 0.28360238035525775, 0.2729959753439479, 0.289805395635219, 0.24314579502363165, 0.29667007879059637, 0.22709449002780357, 0.21113682368501563, 0.22005346370542223, 0.2129407232033016, 0.20538727024176862, 0.21171699708347336, 0.25819133252060567, 0.209298501215345, 0.2212926027562121, 0.18857939147216174, 0.17736758354416782, 0.17556024310156704, 0.20011805219635703, 0.18383133649409567, 0.17472074014183292, 0.18398660892197116, 0.19853918300126527, 0.18410900316365464, 0.18119879989042764, 0.1818690758451883, 0.19443217050397565, 0.1885835421242259, 0.185795247564998, 0.17765823734976605, 0.18622129488161465, 0.19812484140229902, 0.17739301465792068, 0.16731640142103588, 0.54442384826491, 0.1618050562571849, 0.7623533982104035, 0.18696134135063758, 0.17384258307682432, 0.6014866653674676, 0.18121500685944536, 0.18488343473841728, 0.7102972797093988, 0.3403180462265385, 0.1943785514467561, 0.27490906231675327, 0.44788472365740495, 0.6294636385771891, 0.20575318361328032, 0.20580487406108416, 0.5646193901210468, 0.19520375610610974, 0.17591066379817366, 0.1906566485495429, 0.19148962444256445, 0.2023365128908151, 0.19559062985164788, 0.18893573525231333, 0.1991981725792742, 0.1955444729306992, 0.0758435276759023, 0.09197853197678763, 0.07639184066196014, 0.08199580577614429, 0.09010654503529059, 0.0800488666197271, 0.08265297802027527, 0.08912903727503285, 0.1005391120305289]}, "mutation_prompt": null}
{"id": "ca9a4cb6-dc97-4edc-a81f-7abf1352eb11", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedDynamicMutationABCOptimizerImproved", "description": "Improve exploration by incorporating a differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 53, "fitness": 0.31163892292372025, "feedback": "The algorithm EnhancedDynamicMutationABCOptimizerImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.23.", "error": "", "parent_id": "15f6110f-e719-48a3-9d92-2ec604e75c94", "metadata": {"aucs": [0.6385520475404972, 0.6814206728785729, 0.650825001899562, 0.6837501910260692, 0.6975152574295738, 0.680618990025861, 0.6859141250019638, 0.6861013667903195, 0.681644180172162, 0.3400336551044667, 0.32101588821740623, 0.3124178427053096, 0.31178582252067066, 0.31118342228195894, 0.32468022703256016, 0.327637637817764, 0.3244513791223681, 0.3442768216336973, 0.2136484782399437, 0.12833796301841216, 0.12377603419029415, 0.09245845048065271, 0.13990844737936436, 0.44977521013943034, 0.12512019126896556, 0.10611514593626303, 0.12999109897670713, 0.097643456042531, 0.12344805624066446, 0.08955839603059212, 0.1004503392581757, 0.11511056310702839, 0.11249910597081214, 0.09713399593399863, 0.09152773225609778, 0.08326194494850625, 0.9717677920922253, 0.9239288975794886, 0.9256714910084645, 0.9711686164112353, 0.9604806100254428, 0.9539225529944614, 0.9144489180745952, 0.9621063650175611, 0.9578118638155027, 0.2725702849574715, 0.2853554937915157, 0.30041846330182964, 0.32450094876023916, 0.33642327069359246, 0.3047064074010347, 0.2948131441949168, 0.3288126793936529, 0.3355470197611389, 0.6182578053121051, 0.6810172501834739, 0.6249620691355166, 0.6081154764758298, 0.7295860778770522, 0.6187934156924256, 0.6131217616781832, 0.6802642268524232, 0.6300605895423208, 0.2247561733752288, 0.2592709158893949, 0.1559753789011893, 0.12089287554656891, 0.22315048265272175, 0.1648172743665215, 0.23658474026793552, 0.25759851073460693, 0.24636655676947217, 0.21598456383594145, 0.22674558801979983, 0.3855945805320653, 0.16980466122434879, 0.19129443317778372, 0.17340702187430057, 0.17418218625698523, 0.2658420338781262, 0.12136686255333262, 0.1842778987342787, 0.2763275535052385, 0.2233375483574065, 0.25234119357426976, 0.25444264883903145, 0.20791192429746808, 0.203252015620916, 0.2656584468968659, 0.30314921583690957, 0.42557943754302374, 0.4538377263682696, 0.48565517456809715, 0.4300726236702661, 0.53199611809216, 0.4491885529711589, 0.49414493046271546, 0.5321930788148641, 0.4970736275705143, 0.044253021917533664, 0.05185753869041998, 0.08489079634964058, 0.060904088241754306, 0.06977325497385756, 0.05013546774446043, 0.07076879332401953, 0.05295083573519932, 0.08199058465697873, 0.2044889671623138, 0.21124710697239713, 0.23674856233677932, 0.20594209371132333, 0.20411152775970465, 0.19221508257160347, 0.19957212418223602, 0.19948743133456526, 0.21982521144199674, 0.5639614859705542, 0.5988538150007157, 0.6043567472543938, 0.591901465218716, 0.5908599139727917, 0.5754874246331922, 0.5921045733575809, 0.601065298550555, 0.5748863391360102, 0.09733548243319312, 0.10459517424905773, 0.10865453493231159, 0.09989545101265707, 0.09906684462596427, 0.11099066618094244, 0.12698262659581583, 0.14386582155407013, 0.10551059265786167, 0.22935829657818108, 0.22036641951257885, 0.16657615647583446, 0.33732580543274593, 0.2526351053477167, 0.2163807091133878, 0.2356123616981679, 0.18705109491624838, 0.20359767682690455, 0.26493468085061356, 0.28466086657904666, 0.28098318621562857, 0.2881738377378045, 0.29699192645755135, 0.2700198365967833, 0.27759191399037975, 0.2945544373100424, 0.27102068462109385, 0.1916550454582332, 0.24771595012742742, 0.2394779909279624, 0.22380691301450883, 0.22213786114192813, 0.23863584913818936, 0.22005020408233955, 0.2348686262946268, 0.24746736823757542, 0.18348934511236326, 0.18664386315467496, 0.17636137870669444, 0.17996385504524293, 0.18930556575590507, 0.2080308410189563, 0.17438614242107064, 0.19393698390163783, 0.17320625048618643, 0.18510805432758548, 0.19481048158746106, 0.17809093190520564, 0.19510441671498713, 0.18830035444551763, 0.1908324303588642, 0.17998484075908072, 0.1878424009534071, 0.18872322045779388, 0.622679682539484, 0.7260284732043532, 0.7448053553857144, 0.19765445523508096, 0.18863190123556384, 0.18019068168383456, 0.17882957195727212, 0.2804302047031444, 0.7005707394601036, 0.6093044131031585, 0.20649641928084095, 0.6651226865440958, 0.17425972887586083, 0.21456491042196713, 0.7360084469520352, 0.1942582540714426, 0.26609155694625564, 0.2111461234649069, 0.20499048252866303, 0.19839830153070526, 0.19078695381118038, 0.18526263851612157, 0.17958987127735504, 0.21888138818933356, 0.20073315560141602, 0.19005999726409173, 0.18907615396868005, 0.11231724705161883, 0.10343008273055165, 0.09072060579602315, 0.10090862514908172, 0.11804315863438775, 0.09833385705403164, 0.08470643144136991, 0.08940043268895914, 0.09568826876288805]}, "mutation_prompt": null}
{"id": "f40aabb4-a69d-434b-b609-81b3003aa2e8", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedDynamicMutationABCOptimizerImproved", "description": "Improve exploration by incorporating a differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca9a4cb6-dc97-4edc-a81f-7abf1352eb11", "metadata": {"aucs": [0.6385520475404972, 0.6814206728785729, 0.650825001899562, 0.6837501910260692, 0.6975152574295738, 0.680618990025861, 0.6859141250019638, 0.6861013667903195, 0.681644180172162, 0.3400336551044667, 0.32101588821740623, 0.3124178427053096, 0.31178582252067066, 0.31118342228195894, 0.32468022703256016, 0.327637637817764, 0.3244513791223681, 0.3442768216336973, 0.2136484782399437, 0.12833796301841216, 0.12377603419029415, 0.09245845048065271, 0.13990844737936436, 0.44977521013943034, 0.12512019126896556, 0.10611514593626303, 0.12999109897670713, 0.097643456042531, 0.12344805624066446, 0.08955839603059212, 0.1004503392581757, 0.11511056310702839, 0.11249910597081214, 0.09713399593399863, 0.09152773225609778, 0.08326194494850625, 0.9717677920922253, 0.9239288975794886, 0.9256714910084645, 0.9711686164112353, 0.9604806100254428, 0.9539225529944614, 0.9144489180745952, 0.9621063650175611, 0.9578118638155027, 0.2725702849574715, 0.2853554937915157, 0.30041846330182964, 0.32450094876023916, 0.33642327069359246, 0.3047064074010347, 0.2948131441949168, 0.3288126793936529, 0.3355470197611389, 0.6182578053121051, 0.6810172501834739, 0.6249620691355166, 0.6081154764758298, 0.7295860778770522, 0.6187934156924256, 0.6131217616781832, 0.6802642268524232, 0.6300605895423208, 0.2247561733752288, 0.2592709158893949, 0.1559753789011893, 0.12089287554656891, 0.22315048265272175, 0.1648172743665215, 0.23658474026793552, 0.25759851073460693, 0.24636655676947217, 0.21598456383594145, 0.22674558801979983, 0.3855945805320653, 0.16980466122434879, 0.19129443317778372, 0.17340702187430057, 0.17418218625698523, 0.2658420338781262, 0.12136686255333262, 0.1842778987342787, 0.2763275535052385, 0.2233375483574065, 0.25234119357426976, 0.25444264883903145, 0.20791192429746808, 0.203252015620916, 0.2656584468968659, 0.30314921583690957, 0.42557943754302374, 0.4538377263682696, 0.48565517456809715, 0.4300726236702661, 0.53199611809216, 0.4491885529711589, 0.49414493046271546, 0.5321930788148641, 0.4970736275705143, 0.044253021917533664, 0.05185753869041998, 0.08489079634964058, 0.060904088241754306, 0.06977325497385756, 0.05013546774446043, 0.07076879332401953, 0.05295083573519932, 0.08199058465697873, 0.2044889671623138, 0.21124710697239713, 0.23674856233677932, 0.20594209371132333, 0.20411152775970465, 0.19221508257160347, 0.19957212418223602, 0.19948743133456526, 0.21982521144199674, 0.5639614859705542, 0.5988538150007157, 0.6043567472543938, 0.591901465218716, 0.5908599139727917, 0.5754874246331922, 0.5921045733575809, 0.601065298550555, 0.5748863391360102, 0.09733548243319312, 0.10459517424905773, 0.10865453493231159, 0.09989545101265707, 0.09906684462596427, 0.11099066618094244, 0.12698262659581583, 0.14386582155407013, 0.10551059265786167, 0.22935829657818108, 0.22036641951257885, 0.16657615647583446, 0.33732580543274593, 0.2526351053477167, 0.2163807091133878, 0.2356123616981679, 0.18705109491624838, 0.20359767682690455, 0.26493468085061356, 0.28466086657904666, 0.28098318621562857, 0.2881738377378045, 0.29699192645755135, 0.2700198365967833, 0.27759191399037975, 0.2945544373100424, 0.27102068462109385, 0.1916550454582332, 0.24771595012742742, 0.2394779909279624, 0.22380691301450883, 0.22213786114192813, 0.23863584913818936, 0.22005020408233955, 0.2348686262946268, 0.24746736823757542, 0.18348934511236326, 0.18664386315467496, 0.17636137870669444, 0.17996385504524293, 0.18930556575590507, 0.2080308410189563, 0.17438614242107064, 0.19393698390163783, 0.17320625048618643, 0.18510805432758548, 0.19481048158746106, 0.17809093190520564, 0.19510441671498713, 0.18830035444551763, 0.1908324303588642, 0.17998484075908072, 0.1878424009534071, 0.18872322045779388, 0.622679682539484, 0.7260284732043532, 0.7448053553857144, 0.19765445523508096, 0.18863190123556384, 0.18019068168383456, 0.17882957195727212, 0.2804302047031444, 0.7005707394601036, 0.6093044131031585, 0.20649641928084095, 0.6651226865440958, 0.17425972887586083, 0.21456491042196713, 0.7360084469520352, 0.1942582540714426, 0.26609155694625564, 0.2111461234649069, 0.20499048252866303, 0.19839830153070526, 0.19078695381118038, 0.18526263851612157, 0.17958987127735504, 0.21888138818933356, 0.20073315560141602, 0.19005999726409173, 0.18907615396868005, 0.11231724705161883, 0.10343008273055165, 0.09072060579602315, 0.10090862514908172, 0.11804315863438775, 0.09833385705403164, 0.08470643144136991, 0.08940043268895914, 0.09568826876288805]}, "mutation_prompt": null}
{"id": "38a7eab4-1a52-430c-a2cf-bd2eb919ff93", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizerImprovedOpposition:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                \n                # Opposition-based learning\n                opposite_solution = self.lb + self.ub - selected_solutions[i]\n                opposite_fitness = func(opposite_solution)\n                if opposite_fitness < fitness_values[indexes[i]]:\n                    new_solution = opposite_solution\n                    fitness_values[indexes[i]] = opposite_fitness\n\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedDynamicMutationABCOptimizerImprovedOpposition", "description": "Enhance exploration by incorporating opposition-based learning to improve population diversity and convergence speed.", "configspace": "", "generation": 55, "fitness": 0.19891741274526012, "feedback": "The algorithm EnhancedDynamicMutationABCOptimizerImprovedOpposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "ca9a4cb6-dc97-4edc-a81f-7abf1352eb11", "metadata": {"aucs": [0.36032383132096346, 0.4332738470727714, 0.3953789997253341, 0.45949186419630883, 0.46528433225010857, 0.418994183096277, 0.4245543700972314, 0.41685793339600064, 0.4014435306252234, 0.10194499847145455, 0.09058808764800252, 0.06721142532934377, 0.06194259140755387, 0.09539244356078469, 0.06885866760878812, 0.10011066958495762, 0.09152561827543981, 0.09766934870342703, 0.08955991457431067, 0.07933048595633574, 0.08171673419939995, 0.08218123231324714, 0.08161785646484554, 0.07683429773608041, 0.07646757581689767, 0.08420811544735829, 0.08878122076006834, 0.04998767216702016, 0.0615343991036843, 0.055443581885410986, 0.06993165115088062, 0.06369869141681372, 0.06807216888909007, 0.05265697601527064, 0.08392719980774366, 0.0683330213692227, 0.9756218563294414, 0.8603616356292024, 0.9171131632502271, 0.9470101215063615, 0.9580601844159781, 0.9134188367286435, 0.896946965999168, 0.9458417868483091, 0.9080920037851452, 0.18497330217606156, 0.1602337418590225, 0.18283595807662956, 0.16055018507076546, 0.21135300368820686, 0.17962216300883882, 0.1369622536873778, 0.1848099341321917, 0.173178838455452, 0.2626235770094404, 0.3428654044642221, 0.2543662327187507, 0.25126006903907205, 0.5002609188527427, 0.24050899233608158, 0.4061495603566464, 0.34796315070935613, 0.43755521968247013, 0.05558566969274237, 0.07307054188146556, 0.07362804231329156, 0.0741501732339348, 0.08528934668855959, 0.08688985131367721, 0.08183934517418023, 0.07671238017545168, 0.07908908836924111, 0.1311111034551573, 0.08331867917397906, 0.08742382064210796, 0.07869670250503658, 0.0980878601411449, 0.0818468754043663, 0.06763999441725277, 0.1582420376600301, 0.08480417366280635, 0.045404746532394125, 0.09226227760187977, 0.03191907968142571, 0.05183266384614704, 0.06421414052821839, 0.03330754244818923, 0.028390199232427804, 0.04184436380625289, 0.034648189607289326, 0.1385388906584245, 0.23660654267010117, 0.19983200445877558, 0.227697695277839, 0.1865200769829105, 0.18816560801650506, 0.1876474830991588, 0.23576744034177877, 0.20832902273988552, 9.999999999998899e-05, 0.0029132810362348938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019717949504650667, 0.00010128225365191312, 9.999999999998899e-05, 0.06780241015776844, 0.08789312409727279, 0.05125416013162609, 0.0648489202804301, 0.08476957895521608, 0.06814741109405986, 0.07876108774961776, 0.1173190786046232, 0.06700287697437346, 0.37376728120799496, 0.41576032010020836, 0.37371499211284365, 0.38994907406032275, 0.3560352416258784, 0.41146369247910575, 0.36506950615618383, 0.4031347517006547, 0.37478453809114853, 0.08535076084197846, 0.10079830552503022, 0.08943781327131806, 0.06720226100964555, 0.06921481228797166, 0.06405657229243156, 0.07758654061489889, 0.08604259385775681, 0.07407537477502135, 0.17610700165383075, 0.15937643169016824, 0.16519978797661095, 0.1511879507230327, 0.18561507375733288, 0.15827580636728178, 0.18824266403735435, 0.14532013857829407, 0.20597531651730627, 0.21314878011451188, 0.2380064932709396, 0.2293587322325008, 0.2170307510008932, 0.21361908191808532, 0.22260669306401404, 0.2105550230716231, 0.24065667558863812, 0.21704472591821, 0.14644450759325245, 0.15607819342942475, 0.17074917448692617, 0.16130823773782355, 0.1770851261395181, 0.14691862837316239, 0.1877972100520715, 0.17248593158446568, 0.185171126740017, 0.16075607563900862, 0.1727654185486157, 0.15744703234676594, 0.16212966326080192, 0.2274709671169597, 0.1769831095766996, 0.1546691556353118, 0.16624864877360757, 0.17332469302148767, 0.15493802728313022, 0.16234449991429467, 0.1559419428783423, 0.16109065062623718, 0.16799332505963394, 0.16026303927473184, 0.16630705898689502, 0.14771234663407318, 0.15720285671566048, 0.48077588603454935, 0.5375128813826374, 0.47669439201544295, 0.22883250582065717, 0.18361322558590187, 0.16046610515811244, 0.1494325645524497, 0.16788577151157935, 0.15741672514944471, 0.36231405021310303, 0.2773811490001974, 0.393248990997102, 0.23292837222141527, 0.2840507324462468, 0.39868052246179286, 0.180400443725798, 0.20113873175413277, 0.20358268464546592, 0.19401952561608826, 0.17133732993333595, 0.195700073727328, 0.20343300107602702, 0.17747259506714996, 0.2037305226172843, 0.18177581878414628, 0.1842341638930204, 0.19071817475378017, 0.0711595049216599, 0.06769506663498237, 0.10624462069538565, 0.0762091535113163, 0.08195562603037654, 0.0826012138323371, 0.07875843589543352, 0.05770460444269887, 0.071250522969039]}, "mutation_prompt": null}
{"id": "1bdc25b8-a564-49fe-a3e0-98abd18e97d4", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedDynamicMutationABCOptimizerImproved", "description": "Improve exploration by incorporating a differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca9a4cb6-dc97-4edc-a81f-7abf1352eb11", "metadata": {"aucs": [0.6385520475404972, 0.6814206728785729, 0.650825001899562, 0.6837501910260692, 0.6975152574295738, 0.680618990025861, 0.6859141250019638, 0.6861013667903195, 0.681644180172162, 0.3400336551044667, 0.32101588821740623, 0.3124178427053096, 0.31178582252067066, 0.31118342228195894, 0.32468022703256016, 0.327637637817764, 0.3244513791223681, 0.3442768216336973, 0.2136484782399437, 0.12833796301841216, 0.12377603419029415, 0.09245845048065271, 0.13990844737936436, 0.44977521013943034, 0.12512019126896556, 0.10611514593626303, 0.12999109897670713, 0.097643456042531, 0.12344805624066446, 0.08955839603059212, 0.1004503392581757, 0.11511056310702839, 0.11249910597081214, 0.09713399593399863, 0.09152773225609778, 0.08326194494850625, 0.9717677920922253, 0.9239288975794886, 0.9256714910084645, 0.9711686164112353, 0.9604806100254428, 0.9539225529944614, 0.9144489180745952, 0.9621063650175611, 0.9578118638155027, 0.2725702849574715, 0.2853554937915157, 0.30041846330182964, 0.32450094876023916, 0.33642327069359246, 0.3047064074010347, 0.2948131441949168, 0.3288126793936529, 0.3355470197611389, 0.6182578053121051, 0.6810172501834739, 0.6249620691355166, 0.6081154764758298, 0.7295860778770522, 0.6187934156924256, 0.6131217616781832, 0.6802642268524232, 0.6300605895423208, 0.2247561733752288, 0.2592709158893949, 0.1559753789011893, 0.12089287554656891, 0.22315048265272175, 0.1648172743665215, 0.23658474026793552, 0.25759851073460693, 0.24636655676947217, 0.21598456383594145, 0.22674558801979983, 0.3855945805320653, 0.16980466122434879, 0.19129443317778372, 0.17340702187430057, 0.17418218625698523, 0.2658420338781262, 0.12136686255333262, 0.1842778987342787, 0.2763275535052385, 0.2233375483574065, 0.25234119357426976, 0.25444264883903145, 0.20791192429746808, 0.203252015620916, 0.2656584468968659, 0.30314921583690957, 0.42557943754302374, 0.4538377263682696, 0.48565517456809715, 0.4300726236702661, 0.53199611809216, 0.4491885529711589, 0.49414493046271546, 0.5321930788148641, 0.4970736275705143, 0.044253021917533664, 0.05185753869041998, 0.08489079634964058, 0.060904088241754306, 0.06977325497385756, 0.05013546774446043, 0.07076879332401953, 0.05295083573519932, 0.08199058465697873, 0.2044889671623138, 0.21124710697239713, 0.23674856233677932, 0.20594209371132333, 0.20411152775970465, 0.19221508257160347, 0.19957212418223602, 0.19948743133456526, 0.21982521144199674, 0.5639614859705542, 0.5988538150007157, 0.6043567472543938, 0.591901465218716, 0.5908599139727917, 0.5754874246331922, 0.5921045733575809, 0.601065298550555, 0.5748863391360102, 0.09733548243319312, 0.10459517424905773, 0.10865453493231159, 0.09989545101265707, 0.09906684462596427, 0.11099066618094244, 0.12698262659581583, 0.14386582155407013, 0.10551059265786167, 0.22935829657818108, 0.22036641951257885, 0.16657615647583446, 0.33732580543274593, 0.2526351053477167, 0.2163807091133878, 0.2356123616981679, 0.18705109491624838, 0.20359767682690455, 0.26493468085061356, 0.28466086657904666, 0.28098318621562857, 0.2881738377378045, 0.29699192645755135, 0.2700198365967833, 0.27759191399037975, 0.2945544373100424, 0.27102068462109385, 0.1916550454582332, 0.24771595012742742, 0.2394779909279624, 0.22380691301450883, 0.22213786114192813, 0.23863584913818936, 0.22005020408233955, 0.2348686262946268, 0.24746736823757542, 0.18348934511236326, 0.18664386315467496, 0.17636137870669444, 0.17996385504524293, 0.18930556575590507, 0.2080308410189563, 0.17438614242107064, 0.19393698390163783, 0.17320625048618643, 0.18510805432758548, 0.19481048158746106, 0.17809093190520564, 0.19510441671498713, 0.18830035444551763, 0.1908324303588642, 0.17998484075908072, 0.1878424009534071, 0.18872322045779388, 0.622679682539484, 0.7260284732043532, 0.7448053553857144, 0.19765445523508096, 0.18863190123556384, 0.18019068168383456, 0.17882957195727212, 0.2804302047031444, 0.7005707394601036, 0.6093044131031585, 0.20649641928084095, 0.6651226865440958, 0.17425972887586083, 0.21456491042196713, 0.7360084469520352, 0.1942582540714426, 0.26609155694625564, 0.2111461234649069, 0.20499048252866303, 0.19839830153070526, 0.19078695381118038, 0.18526263851612157, 0.17958987127735504, 0.21888138818933356, 0.20073315560141602, 0.19005999726409173, 0.18907615396868005, 0.11231724705161883, 0.10343008273055165, 0.09072060579602315, 0.10090862514908172, 0.11804315863438775, 0.09833385705403164, 0.08470643144136991, 0.08940043268895914, 0.09568826876288805]}, "mutation_prompt": null}
{"id": "e91faba0-5334-405d-a8a1-d00f15d9a1ca", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedDynamicMutationABCOptimizerImproved", "description": "Improve exploration by incorporating a differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "ca9a4cb6-dc97-4edc-a81f-7abf1352eb11", "metadata": {"aucs": [0.6385520475404972, 0.6814206728785729, 0.650825001899562, 0.6837501910260692, 0.6975152574295738, 0.680618990025861, 0.6859141250019638, 0.6861013667903195, 0.681644180172162, 0.3400336551044667, 0.32101588821740623, 0.3124178427053096, 0.31178582252067066, 0.31118342228195894, 0.32468022703256016, 0.327637637817764, 0.3244513791223681, 0.3442768216336973, 0.2136484782399437, 0.12833796301841216, 0.12377603419029415, 0.09245845048065271, 0.13990844737936436, 0.44977521013943034, 0.12512019126896556, 0.10611514593626303, 0.12999109897670713, 0.097643456042531, 0.12344805624066446, 0.08955839603059212, 0.1004503392581757, 0.11511056310702839, 0.11249910597081214, 0.09713399593399863, 0.09152773225609778, 0.08326194494850625, 0.9717677920922253, 0.9239288975794886, 0.9256714910084645, 0.9711686164112353, 0.9604806100254428, 0.9539225529944614, 0.9144489180745952, 0.9621063650175611, 0.9578118638155027, 0.2725702849574715, 0.2853554937915157, 0.30041846330182964, 0.32450094876023916, 0.33642327069359246, 0.3047064074010347, 0.2948131441949168, 0.3288126793936529, 0.3355470197611389, 0.6182578053121051, 0.6810172501834739, 0.6249620691355166, 0.6081154764758298, 0.7295860778770522, 0.6187934156924256, 0.6131217616781832, 0.6802642268524232, 0.6300605895423208, 0.2247561733752288, 0.2592709158893949, 0.1559753789011893, 0.12089287554656891, 0.22315048265272175, 0.1648172743665215, 0.23658474026793552, 0.25759851073460693, 0.24636655676947217, 0.21598456383594145, 0.22674558801979983, 0.3855945805320653, 0.16980466122434879, 0.19129443317778372, 0.17340702187430057, 0.17418218625698523, 0.2658420338781262, 0.12136686255333262, 0.1842778987342787, 0.2763275535052385, 0.2233375483574065, 0.25234119357426976, 0.25444264883903145, 0.20791192429746808, 0.203252015620916, 0.2656584468968659, 0.30314921583690957, 0.42557943754302374, 0.4538377263682696, 0.48565517456809715, 0.4300726236702661, 0.53199611809216, 0.4491885529711589, 0.49414493046271546, 0.5321930788148641, 0.4970736275705143, 0.044253021917533664, 0.05185753869041998, 0.08489079634964058, 0.060904088241754306, 0.06977325497385756, 0.05013546774446043, 0.07076879332401953, 0.05295083573519932, 0.08199058465697873, 0.2044889671623138, 0.21124710697239713, 0.23674856233677932, 0.20594209371132333, 0.20411152775970465, 0.19221508257160347, 0.19957212418223602, 0.19948743133456526, 0.21982521144199674, 0.5639614859705542, 0.5988538150007157, 0.6043567472543938, 0.591901465218716, 0.5908599139727917, 0.5754874246331922, 0.5921045733575809, 0.601065298550555, 0.5748863391360102, 0.09733548243319312, 0.10459517424905773, 0.10865453493231159, 0.09989545101265707, 0.09906684462596427, 0.11099066618094244, 0.12698262659581583, 0.14386582155407013, 0.10551059265786167, 0.22935829657818108, 0.22036641951257885, 0.16657615647583446, 0.33732580543274593, 0.2526351053477167, 0.2163807091133878, 0.2356123616981679, 0.18705109491624838, 0.20359767682690455, 0.26493468085061356, 0.28466086657904666, 0.28098318621562857, 0.2881738377378045, 0.29699192645755135, 0.2700198365967833, 0.27759191399037975, 0.2945544373100424, 0.27102068462109385, 0.1916550454582332, 0.24771595012742742, 0.2394779909279624, 0.22380691301450883, 0.22213786114192813, 0.23863584913818936, 0.22005020408233955, 0.2348686262946268, 0.24746736823757542, 0.18348934511236326, 0.18664386315467496, 0.17636137870669444, 0.17996385504524293, 0.18930556575590507, 0.2080308410189563, 0.17438614242107064, 0.19393698390163783, 0.17320625048618643, 0.18510805432758548, 0.19481048158746106, 0.17809093190520564, 0.19510441671498713, 0.18830035444551763, 0.1908324303588642, 0.17998484075908072, 0.1878424009534071, 0.18872322045779388, 0.622679682539484, 0.7260284732043532, 0.7448053553857144, 0.19765445523508096, 0.18863190123556384, 0.18019068168383456, 0.17882957195727212, 0.2804302047031444, 0.7005707394601036, 0.6093044131031585, 0.20649641928084095, 0.6651226865440958, 0.17425972887586083, 0.21456491042196713, 0.7360084469520352, 0.1942582540714426, 0.26609155694625564, 0.2111461234649069, 0.20499048252866303, 0.19839830153070526, 0.19078695381118038, 0.18526263851612157, 0.17958987127735504, 0.21888138818933356, 0.20073315560141602, 0.19005999726409173, 0.18907615396868005, 0.11231724705161883, 0.10343008273055165, 0.09072060579602315, 0.10090862514908172, 0.11804315863438775, 0.09833385705403164, 0.08470643144136991, 0.08940043268895914, 0.09568826876288805]}, "mutation_prompt": null}
{"id": "1726c070-ef41-4fd7-bf90-e4f9611547ae", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizerImprovedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n        self.levy_step = 0.01  # Step size for Levy flights\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights with adaptive step size\n                    levy_step = self.levy_step / (1.0 + itr)  # Adaptive step size adjustment\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim))) * levy_step\n                    new_solution = selected_solutions[i] + levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedDynamicMutationABCOptimizerImprovedRefined", "description": "Enhance population diversity by incorporating a novel Levy flight strategy with adaptive step size adjustment to improve exploration capabilities.", "configspace": "", "generation": 58, "fitness": 0.30246153691952143, "feedback": "The algorithm EnhancedDynamicMutationABCOptimizerImprovedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.22.", "error": "", "parent_id": "ca9a4cb6-dc97-4edc-a81f-7abf1352eb11", "metadata": {"aucs": [0.6300222880166066, 0.6569342692895515, 0.627730237978862, 0.6819124374707769, 0.6813674301400521, 0.6790323206750183, 0.6674926119417836, 0.6686889861248175, 0.6793456360269136, 0.3518052230699661, 0.3435887513339375, 0.3123459361032107, 0.3311666999840258, 0.3244037488352254, 0.30609378457144143, 0.3122132642396316, 0.35435050287287073, 0.3836199450138553, 0.09800189688600336, 0.11050946791081917, 0.07460193782054936, 0.13619246476892877, 0.1066780494146462, 0.1176605522443932, 0.11172799238505426, 0.11109853265330005, 0.1479680552636159, 0.08224421520231973, 0.08025050393058097, 0.08881700297289441, 0.09514236089177552, 0.0949194714291951, 0.09289221076196785, 0.0879795592733641, 0.12236111069025124, 0.09805844875482417, 0.9692209768340587, 0.8968136347188223, 0.9361184484999728, 0.971558514356662, 0.9683990759498885, 0.9664491584782944, 0.9644956438273812, 0.9449216377558756, 0.9231827952026206, 0.3094130823672593, 0.2983820108528473, 0.320948920793506, 0.2945157026768548, 0.3281452085217117, 0.27818950000582787, 0.24724010315268619, 0.3143741755974735, 0.30239661360158565, 0.6116988073204558, 0.6813042940100956, 0.6344143486288889, 0.6396854581565579, 0.6612275278832029, 0.6272507623363133, 0.5708867180238119, 0.5365024649837167, 0.6624971403683446, 0.18254033926095548, 0.1382613191718186, 0.1550294979544331, 0.1271351163134885, 0.25028056754216976, 0.20082683560923775, 0.15402999439891352, 0.1642327177607813, 0.17068546649395777, 0.12461655052537646, 0.2957383762096636, 0.18407472404024827, 0.1423308807841891, 0.20631857692928823, 0.12305054464957044, 0.13902315889008965, 0.1976178544198982, 0.1322674357308974, 0.24909517411380477, 0.22434692401239031, 0.23629953752442334, 0.2533899058229939, 0.3102087062685498, 0.2432364049834903, 0.2656957639200015, 0.25296767890316685, 0.21876954662792136, 0.4884369431803278, 0.5403396638422886, 0.4916279744352916, 0.44174054853372324, 0.45137076707995805, 0.4988042793156333, 0.4273076773209794, 0.4886128307381804, 0.5163315429548186, 0.048594465958098354, 0.05699376010948176, 0.10165249753519856, 0.050987985134823055, 0.08106389520162716, 0.031635318347710606, 0.055405380229752166, 0.0763366129198253, 0.060180732137251836, 0.1714433653838522, 0.21143558966363352, 0.17699329392791407, 0.17943986375526488, 0.2158088944911214, 0.19520880229891868, 0.18697221119595298, 0.22315148601145673, 0.19043736508239462, 0.580484706564373, 0.5948535593531621, 0.568338098736842, 0.5716355480829766, 0.5977321713435062, 0.5823516087430014, 0.5571965190357312, 0.6140572295880791, 0.5469241735884476, 0.10849875188004876, 0.1009180531996029, 0.14530386992857292, 0.08329036040712667, 0.10158625573781577, 0.11060913297234942, 0.10904174533907118, 0.12881615981682593, 0.10711548937592252, 0.18871077820325965, 0.2079353655448759, 0.18892937161009882, 0.15820800658825374, 0.3611850055043042, 0.1740885038244383, 0.17040341993584918, 0.18529192882009848, 0.36553780911823863, 0.2762039991778189, 0.2861824289633196, 0.2802303735254291, 0.26723414109121435, 0.28604788712148754, 0.24544676901776152, 0.27130501708377797, 0.29027781693745647, 0.291203201914915, 0.21339320202461032, 0.2498934201693065, 0.24060952059811946, 0.2160193923628433, 0.215856138611344, 0.2165119759095322, 0.2405149566645991, 0.22701720102527723, 0.26633767548265663, 0.1937080022453781, 0.1976225925813052, 0.1969237591862848, 0.20189127953932973, 0.1895940459659633, 0.2032333644189127, 0.18667110904723982, 0.1946745253201061, 0.20680949379223257, 0.2169034283856005, 0.17744691986244465, 0.1818172869808139, 0.17633696131673826, 0.18054744926948374, 0.176326422709156, 0.19192584000332114, 0.1769845818362884, 0.17243268805219736, 0.18738262066547273, 0.6683564130469755, 0.757294774624305, 0.17700450721695138, 0.18560540576731133, 0.44414785201115903, 0.16093246916232407, 0.18229520474591066, 0.6567798002220671, 0.705518182976192, 0.28934713347601715, 0.5299397047531649, 0.1577771601420589, 0.19176745529576433, 0.7024384865145369, 0.35540946768105974, 0.2100983815726899, 0.21070841397894946, 0.23113936564802795, 0.1945782202726074, 0.19785065138231472, 0.19515584372812178, 0.21599092730321368, 0.18891419649053953, 0.20795413306823496, 0.1821435804040662, 0.18766811972496966, 0.09434931132931867, 0.13673330297567132, 0.09776186888786964, 0.07977054793054761, 0.10160157869457576, 0.08030124918084258, 0.08793287334275923, 0.08852658438113814, 0.06950371748682027]}, "mutation_prompt": null}
{"id": "2cb1e7ee-e769-4b07-94b0-0904beb54ede", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedDynamicMutationABCOptimizerImproved", "description": "Improve exploration by incorporating a differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca9a4cb6-dc97-4edc-a81f-7abf1352eb11", "metadata": {"aucs": [0.6385520475404972, 0.6814206728785729, 0.650825001899562, 0.6837501910260692, 0.6975152574295738, 0.680618990025861, 0.6859141250019638, 0.6861013667903195, 0.681644180172162, 0.3400336551044667, 0.32101588821740623, 0.3124178427053096, 0.31178582252067066, 0.31118342228195894, 0.32468022703256016, 0.327637637817764, 0.3244513791223681, 0.3442768216336973, 0.2136484782399437, 0.12833796301841216, 0.12377603419029415, 0.09245845048065271, 0.13990844737936436, 0.44977521013943034, 0.12512019126896556, 0.10611514593626303, 0.12999109897670713, 0.097643456042531, 0.12344805624066446, 0.08955839603059212, 0.1004503392581757, 0.11511056310702839, 0.11249910597081214, 0.09713399593399863, 0.09152773225609778, 0.08326194494850625, 0.9717677920922253, 0.9239288975794886, 0.9256714910084645, 0.9711686164112353, 0.9604806100254428, 0.9539225529944614, 0.9144489180745952, 0.9621063650175611, 0.9578118638155027, 0.2725702849574715, 0.2853554937915157, 0.30041846330182964, 0.32450094876023916, 0.33642327069359246, 0.3047064074010347, 0.2948131441949168, 0.3288126793936529, 0.3355470197611389, 0.6182578053121051, 0.6810172501834739, 0.6249620691355166, 0.6081154764758298, 0.7295860778770522, 0.6187934156924256, 0.6131217616781832, 0.6802642268524232, 0.6300605895423208, 0.2247561733752288, 0.2592709158893949, 0.1559753789011893, 0.12089287554656891, 0.22315048265272175, 0.1648172743665215, 0.23658474026793552, 0.25759851073460693, 0.24636655676947217, 0.21598456383594145, 0.22674558801979983, 0.3855945805320653, 0.16980466122434879, 0.19129443317778372, 0.17340702187430057, 0.17418218625698523, 0.2658420338781262, 0.12136686255333262, 0.1842778987342787, 0.2763275535052385, 0.2233375483574065, 0.25234119357426976, 0.25444264883903145, 0.20791192429746808, 0.203252015620916, 0.2656584468968659, 0.30314921583690957, 0.42557943754302374, 0.4538377263682696, 0.48565517456809715, 0.4300726236702661, 0.53199611809216, 0.4491885529711589, 0.49414493046271546, 0.5321930788148641, 0.4970736275705143, 0.044253021917533664, 0.05185753869041998, 0.08489079634964058, 0.060904088241754306, 0.06977325497385756, 0.05013546774446043, 0.07076879332401953, 0.05295083573519932, 0.08199058465697873, 0.2044889671623138, 0.21124710697239713, 0.23674856233677932, 0.20594209371132333, 0.20411152775970465, 0.19221508257160347, 0.19957212418223602, 0.19948743133456526, 0.21982521144199674, 0.5639614859705542, 0.5988538150007157, 0.6043567472543938, 0.591901465218716, 0.5908599139727917, 0.5754874246331922, 0.5921045733575809, 0.601065298550555, 0.5748863391360102, 0.09733548243319312, 0.10459517424905773, 0.10865453493231159, 0.09989545101265707, 0.09906684462596427, 0.11099066618094244, 0.12698262659581583, 0.14386582155407013, 0.10551059265786167, 0.22935829657818108, 0.22036641951257885, 0.16657615647583446, 0.33732580543274593, 0.2526351053477167, 0.2163807091133878, 0.2356123616981679, 0.18705109491624838, 0.20359767682690455, 0.26493468085061356, 0.28466086657904666, 0.28098318621562857, 0.2881738377378045, 0.29699192645755135, 0.2700198365967833, 0.27759191399037975, 0.2945544373100424, 0.27102068462109385, 0.1916550454582332, 0.24771595012742742, 0.2394779909279624, 0.22380691301450883, 0.22213786114192813, 0.23863584913818936, 0.22005020408233955, 0.2348686262946268, 0.24746736823757542, 0.18348934511236326, 0.18664386315467496, 0.17636137870669444, 0.17996385504524293, 0.18930556575590507, 0.2080308410189563, 0.17438614242107064, 0.19393698390163783, 0.17320625048618643, 0.18510805432758548, 0.19481048158746106, 0.17809093190520564, 0.19510441671498713, 0.18830035444551763, 0.1908324303588642, 0.17998484075908072, 0.1878424009534071, 0.18872322045779388, 0.622679682539484, 0.7260284732043532, 0.7448053553857144, 0.19765445523508096, 0.18863190123556384, 0.18019068168383456, 0.17882957195727212, 0.2804302047031444, 0.7005707394601036, 0.6093044131031585, 0.20649641928084095, 0.6651226865440958, 0.17425972887586083, 0.21456491042196713, 0.7360084469520352, 0.1942582540714426, 0.26609155694625564, 0.2111461234649069, 0.20499048252866303, 0.19839830153070526, 0.19078695381118038, 0.18526263851612157, 0.17958987127735504, 0.21888138818933356, 0.20073315560141602, 0.19005999726409173, 0.18907615396868005, 0.11231724705161883, 0.10343008273055165, 0.09072060579602315, 0.10090862514908172, 0.11804315863438775, 0.09833385705403164, 0.08470643144136991, 0.08940043268895914, 0.09568826876288805]}, "mutation_prompt": null}
{"id": "2849db54-904e-4c33-890b-1e48bb043dd7", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedDynamicMutationABCOptimizerImproved", "description": "Improve exploration by incorporating a differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca9a4cb6-dc97-4edc-a81f-7abf1352eb11", "metadata": {"aucs": [0.6385520475404972, 0.6814206728785729, 0.650825001899562, 0.6837501910260692, 0.6975152574295738, 0.680618990025861, 0.6859141250019638, 0.6861013667903195, 0.681644180172162, 0.3400336551044667, 0.32101588821740623, 0.3124178427053096, 0.31178582252067066, 0.31118342228195894, 0.32468022703256016, 0.327637637817764, 0.3244513791223681, 0.3442768216336973, 0.2136484782399437, 0.12833796301841216, 0.12377603419029415, 0.09245845048065271, 0.13990844737936436, 0.44977521013943034, 0.12512019126896556, 0.10611514593626303, 0.12999109897670713, 0.097643456042531, 0.12344805624066446, 0.08955839603059212, 0.1004503392581757, 0.11511056310702839, 0.11249910597081214, 0.09713399593399863, 0.09152773225609778, 0.08326194494850625, 0.9717677920922253, 0.9239288975794886, 0.9256714910084645, 0.9711686164112353, 0.9604806100254428, 0.9539225529944614, 0.9144489180745952, 0.9621063650175611, 0.9578118638155027, 0.2725702849574715, 0.2853554937915157, 0.30041846330182964, 0.32450094876023916, 0.33642327069359246, 0.3047064074010347, 0.2948131441949168, 0.3288126793936529, 0.3355470197611389, 0.6182578053121051, 0.6810172501834739, 0.6249620691355166, 0.6081154764758298, 0.7295860778770522, 0.6187934156924256, 0.6131217616781832, 0.6802642268524232, 0.6300605895423208, 0.2247561733752288, 0.2592709158893949, 0.1559753789011893, 0.12089287554656891, 0.22315048265272175, 0.1648172743665215, 0.23658474026793552, 0.25759851073460693, 0.24636655676947217, 0.21598456383594145, 0.22674558801979983, 0.3855945805320653, 0.16980466122434879, 0.19129443317778372, 0.17340702187430057, 0.17418218625698523, 0.2658420338781262, 0.12136686255333262, 0.1842778987342787, 0.2763275535052385, 0.2233375483574065, 0.25234119357426976, 0.25444264883903145, 0.20791192429746808, 0.203252015620916, 0.2656584468968659, 0.30314921583690957, 0.42557943754302374, 0.4538377263682696, 0.48565517456809715, 0.4300726236702661, 0.53199611809216, 0.4491885529711589, 0.49414493046271546, 0.5321930788148641, 0.4970736275705143, 0.044253021917533664, 0.05185753869041998, 0.08489079634964058, 0.060904088241754306, 0.06977325497385756, 0.05013546774446043, 0.07076879332401953, 0.05295083573519932, 0.08199058465697873, 0.2044889671623138, 0.21124710697239713, 0.23674856233677932, 0.20594209371132333, 0.20411152775970465, 0.19221508257160347, 0.19957212418223602, 0.19948743133456526, 0.21982521144199674, 0.5639614859705542, 0.5988538150007157, 0.6043567472543938, 0.591901465218716, 0.5908599139727917, 0.5754874246331922, 0.5921045733575809, 0.601065298550555, 0.5748863391360102, 0.09733548243319312, 0.10459517424905773, 0.10865453493231159, 0.09989545101265707, 0.09906684462596427, 0.11099066618094244, 0.12698262659581583, 0.14386582155407013, 0.10551059265786167, 0.22935829657818108, 0.22036641951257885, 0.16657615647583446, 0.33732580543274593, 0.2526351053477167, 0.2163807091133878, 0.2356123616981679, 0.18705109491624838, 0.20359767682690455, 0.26493468085061356, 0.28466086657904666, 0.28098318621562857, 0.2881738377378045, 0.29699192645755135, 0.2700198365967833, 0.27759191399037975, 0.2945544373100424, 0.27102068462109385, 0.1916550454582332, 0.24771595012742742, 0.2394779909279624, 0.22380691301450883, 0.22213786114192813, 0.23863584913818936, 0.22005020408233955, 0.2348686262946268, 0.24746736823757542, 0.18348934511236326, 0.18664386315467496, 0.17636137870669444, 0.17996385504524293, 0.18930556575590507, 0.2080308410189563, 0.17438614242107064, 0.19393698390163783, 0.17320625048618643, 0.18510805432758548, 0.19481048158746106, 0.17809093190520564, 0.19510441671498713, 0.18830035444551763, 0.1908324303588642, 0.17998484075908072, 0.1878424009534071, 0.18872322045779388, 0.622679682539484, 0.7260284732043532, 0.7448053553857144, 0.19765445523508096, 0.18863190123556384, 0.18019068168383456, 0.17882957195727212, 0.2804302047031444, 0.7005707394601036, 0.6093044131031585, 0.20649641928084095, 0.6651226865440958, 0.17425972887586083, 0.21456491042196713, 0.7360084469520352, 0.1942582540714426, 0.26609155694625564, 0.2111461234649069, 0.20499048252866303, 0.19839830153070526, 0.19078695381118038, 0.18526263851612157, 0.17958987127735504, 0.21888138818933356, 0.20073315560141602, 0.19005999726409173, 0.18907615396868005, 0.11231724705161883, 0.10343008273055165, 0.09072060579602315, 0.10090862514908172, 0.11804315863438775, 0.09833385705403164, 0.08470643144136991, 0.08940043268895914, 0.09568826876288805]}, "mutation_prompt": null}
{"id": "3675ec34-3e21-4f2e-8e5c-c4afe59a0703", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedDynamicMutationABCOptimizerImproved", "description": "Improve exploration by incorporating a differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca9a4cb6-dc97-4edc-a81f-7abf1352eb11", "metadata": {"aucs": [0.6385520475404972, 0.6814206728785729, 0.650825001899562, 0.6837501910260692, 0.6975152574295738, 0.680618990025861, 0.6859141250019638, 0.6861013667903195, 0.681644180172162, 0.3400336551044667, 0.32101588821740623, 0.3124178427053096, 0.31178582252067066, 0.31118342228195894, 0.32468022703256016, 0.327637637817764, 0.3244513791223681, 0.3442768216336973, 0.2136484782399437, 0.12833796301841216, 0.12377603419029415, 0.09245845048065271, 0.13990844737936436, 0.44977521013943034, 0.12512019126896556, 0.10611514593626303, 0.12999109897670713, 0.097643456042531, 0.12344805624066446, 0.08955839603059212, 0.1004503392581757, 0.11511056310702839, 0.11249910597081214, 0.09713399593399863, 0.09152773225609778, 0.08326194494850625, 0.9717677920922253, 0.9239288975794886, 0.9256714910084645, 0.9711686164112353, 0.9604806100254428, 0.9539225529944614, 0.9144489180745952, 0.9621063650175611, 0.9578118638155027, 0.2725702849574715, 0.2853554937915157, 0.30041846330182964, 0.32450094876023916, 0.33642327069359246, 0.3047064074010347, 0.2948131441949168, 0.3288126793936529, 0.3355470197611389, 0.6182578053121051, 0.6810172501834739, 0.6249620691355166, 0.6081154764758298, 0.7295860778770522, 0.6187934156924256, 0.6131217616781832, 0.6802642268524232, 0.6300605895423208, 0.2247561733752288, 0.2592709158893949, 0.1559753789011893, 0.12089287554656891, 0.22315048265272175, 0.1648172743665215, 0.23658474026793552, 0.25759851073460693, 0.24636655676947217, 0.21598456383594145, 0.22674558801979983, 0.3855945805320653, 0.16980466122434879, 0.19129443317778372, 0.17340702187430057, 0.17418218625698523, 0.2658420338781262, 0.12136686255333262, 0.1842778987342787, 0.2763275535052385, 0.2233375483574065, 0.25234119357426976, 0.25444264883903145, 0.20791192429746808, 0.203252015620916, 0.2656584468968659, 0.30314921583690957, 0.42557943754302374, 0.4538377263682696, 0.48565517456809715, 0.4300726236702661, 0.53199611809216, 0.4491885529711589, 0.49414493046271546, 0.5321930788148641, 0.4970736275705143, 0.044253021917533664, 0.05185753869041998, 0.08489079634964058, 0.060904088241754306, 0.06977325497385756, 0.05013546774446043, 0.07076879332401953, 0.05295083573519932, 0.08199058465697873, 0.2044889671623138, 0.21124710697239713, 0.23674856233677932, 0.20594209371132333, 0.20411152775970465, 0.19221508257160347, 0.19957212418223602, 0.19948743133456526, 0.21982521144199674, 0.5639614859705542, 0.5988538150007157, 0.6043567472543938, 0.591901465218716, 0.5908599139727917, 0.5754874246331922, 0.5921045733575809, 0.601065298550555, 0.5748863391360102, 0.09733548243319312, 0.10459517424905773, 0.10865453493231159, 0.09989545101265707, 0.09906684462596427, 0.11099066618094244, 0.12698262659581583, 0.14386582155407013, 0.10551059265786167, 0.22935829657818108, 0.22036641951257885, 0.16657615647583446, 0.33732580543274593, 0.2526351053477167, 0.2163807091133878, 0.2356123616981679, 0.18705109491624838, 0.20359767682690455, 0.26493468085061356, 0.28466086657904666, 0.28098318621562857, 0.2881738377378045, 0.29699192645755135, 0.2700198365967833, 0.27759191399037975, 0.2945544373100424, 0.27102068462109385, 0.1916550454582332, 0.24771595012742742, 0.2394779909279624, 0.22380691301450883, 0.22213786114192813, 0.23863584913818936, 0.22005020408233955, 0.2348686262946268, 0.24746736823757542, 0.18348934511236326, 0.18664386315467496, 0.17636137870669444, 0.17996385504524293, 0.18930556575590507, 0.2080308410189563, 0.17438614242107064, 0.19393698390163783, 0.17320625048618643, 0.18510805432758548, 0.19481048158746106, 0.17809093190520564, 0.19510441671498713, 0.18830035444551763, 0.1908324303588642, 0.17998484075908072, 0.1878424009534071, 0.18872322045779388, 0.622679682539484, 0.7260284732043532, 0.7448053553857144, 0.19765445523508096, 0.18863190123556384, 0.18019068168383456, 0.17882957195727212, 0.2804302047031444, 0.7005707394601036, 0.6093044131031585, 0.20649641928084095, 0.6651226865440958, 0.17425972887586083, 0.21456491042196713, 0.7360084469520352, 0.1942582540714426, 0.26609155694625564, 0.2111461234649069, 0.20499048252866303, 0.19839830153070526, 0.19078695381118038, 0.18526263851612157, 0.17958987127735504, 0.21888138818933356, 0.20073315560141602, 0.19005999726409173, 0.18907615396868005, 0.11231724705161883, 0.10343008273055165, 0.09072060579602315, 0.10090862514908172, 0.11804315863438775, 0.09833385705403164, 0.08470643144136991, 0.08940043268895914, 0.09568826876288805]}, "mutation_prompt": null}
{"id": "88424c32-94de-4a2f-ae51-2e6373b62df7", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizerImprovedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n        self.levy_prob = 0.1  # Probability of Levy flights\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < self.levy_prob:  # Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedDynamicMutationABCOptimizerImprovedRefined", "description": "Enhance exploration by incorporating adaptive mutation with Levy flights to improve population diversity and convergence speed.", "configspace": "", "generation": 62, "fitness": 0.31163892292372025, "feedback": "The algorithm EnhancedDynamicMutationABCOptimizerImprovedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.23.", "error": "", "parent_id": "ca9a4cb6-dc97-4edc-a81f-7abf1352eb11", "metadata": {"aucs": [0.6385520475404972, 0.6814206728785729, 0.650825001899562, 0.6837501910260692, 0.6975152574295738, 0.680618990025861, 0.6859141250019638, 0.6861013667903195, 0.681644180172162, 0.3400336551044667, 0.32101588821740623, 0.3124178427053096, 0.31178582252067066, 0.31118342228195894, 0.32468022703256016, 0.327637637817764, 0.3244513791223681, 0.3442768216336973, 0.2136484782399437, 0.12833796301841216, 0.12377603419029415, 0.09245845048065271, 0.13990844737936436, 0.44977521013943034, 0.12512019126896556, 0.10611514593626303, 0.12999109897670713, 0.097643456042531, 0.12344805624066446, 0.08955839603059212, 0.1004503392581757, 0.11511056310702839, 0.11249910597081214, 0.09713399593399863, 0.09152773225609778, 0.08326194494850625, 0.9717677920922253, 0.9239288975794886, 0.9256714910084645, 0.9711686164112353, 0.9604806100254428, 0.9539225529944614, 0.9144489180745952, 0.9621063650175611, 0.9578118638155027, 0.2725702849574715, 0.2853554937915157, 0.30041846330182964, 0.32450094876023916, 0.33642327069359246, 0.3047064074010347, 0.2948131441949168, 0.3288126793936529, 0.3355470197611389, 0.6182578053121051, 0.6810172501834739, 0.6249620691355166, 0.6081154764758298, 0.7295860778770522, 0.6187934156924256, 0.6131217616781832, 0.6802642268524232, 0.6300605895423208, 0.2247561733752288, 0.2592709158893949, 0.1559753789011893, 0.12089287554656891, 0.22315048265272175, 0.1648172743665215, 0.23658474026793552, 0.25759851073460693, 0.24636655676947217, 0.21598456383594145, 0.22674558801979983, 0.3855945805320653, 0.16980466122434879, 0.19129443317778372, 0.17340702187430057, 0.17418218625698523, 0.2658420338781262, 0.12136686255333262, 0.1842778987342787, 0.2763275535052385, 0.2233375483574065, 0.25234119357426976, 0.25444264883903145, 0.20791192429746808, 0.203252015620916, 0.2656584468968659, 0.30314921583690957, 0.42557943754302374, 0.4538377263682696, 0.48565517456809715, 0.4300726236702661, 0.53199611809216, 0.4491885529711589, 0.49414493046271546, 0.5321930788148641, 0.4970736275705143, 0.044253021917533664, 0.05185753869041998, 0.08489079634964058, 0.060904088241754306, 0.06977325497385756, 0.05013546774446043, 0.07076879332401953, 0.05295083573519932, 0.08199058465697873, 0.2044889671623138, 0.21124710697239713, 0.23674856233677932, 0.20594209371132333, 0.20411152775970465, 0.19221508257160347, 0.19957212418223602, 0.19948743133456526, 0.21982521144199674, 0.5639614859705542, 0.5988538150007157, 0.6043567472543938, 0.591901465218716, 0.5908599139727917, 0.5754874246331922, 0.5921045733575809, 0.601065298550555, 0.5748863391360102, 0.09733548243319312, 0.10459517424905773, 0.10865453493231159, 0.09989545101265707, 0.09906684462596427, 0.11099066618094244, 0.12698262659581583, 0.14386582155407013, 0.10551059265786167, 0.22935829657818108, 0.22036641951257885, 0.16657615647583446, 0.33732580543274593, 0.2526351053477167, 0.2163807091133878, 0.2356123616981679, 0.18705109491624838, 0.20359767682690455, 0.26493468085061356, 0.28466086657904666, 0.28098318621562857, 0.2881738377378045, 0.29699192645755135, 0.2700198365967833, 0.27759191399037975, 0.2945544373100424, 0.27102068462109385, 0.1916550454582332, 0.24771595012742742, 0.2394779909279624, 0.22380691301450883, 0.22213786114192813, 0.23863584913818936, 0.22005020408233955, 0.2348686262946268, 0.24746736823757542, 0.18348934511236326, 0.18664386315467496, 0.17636137870669444, 0.17996385504524293, 0.18930556575590507, 0.2080308410189563, 0.17438614242107064, 0.19393698390163783, 0.17320625048618643, 0.18510805432758548, 0.19481048158746106, 0.17809093190520564, 0.19510441671498713, 0.18830035444551763, 0.1908324303588642, 0.17998484075908072, 0.1878424009534071, 0.18872322045779388, 0.622679682539484, 0.7260284732043532, 0.7448053553857144, 0.19765445523508096, 0.18863190123556384, 0.18019068168383456, 0.17882957195727212, 0.2804302047031444, 0.7005707394601036, 0.6093044131031585, 0.20649641928084095, 0.6651226865440958, 0.17425972887586083, 0.21456491042196713, 0.7360084469520352, 0.1942582540714426, 0.26609155694625564, 0.2111461234649069, 0.20499048252866303, 0.19839830153070526, 0.19078695381118038, 0.18526263851612157, 0.17958987127735504, 0.21888138818933356, 0.20073315560141602, 0.19005999726409173, 0.18907615396868005, 0.11231724705161883, 0.10343008273055165, 0.09072060579602315, 0.10090862514908172, 0.11804315863438775, 0.09833385705403164, 0.08470643144136991, 0.08940043268895914, 0.09568826876288805]}, "mutation_prompt": null}
{"id": "4d0119b0-9775-43e3-acbb-6ec2d8b47ce3", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedDynamicMutationABCOptimizerImproved", "description": "Improve exploration by incorporating a differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca9a4cb6-dc97-4edc-a81f-7abf1352eb11", "metadata": {"aucs": [0.6385520475404972, 0.6814206728785729, 0.650825001899562, 0.6837501910260692, 0.6975152574295738, 0.680618990025861, 0.6859141250019638, 0.6861013667903195, 0.681644180172162, 0.3400336551044667, 0.32101588821740623, 0.3124178427053096, 0.31178582252067066, 0.31118342228195894, 0.32468022703256016, 0.327637637817764, 0.3244513791223681, 0.3442768216336973, 0.2136484782399437, 0.12833796301841216, 0.12377603419029415, 0.09245845048065271, 0.13990844737936436, 0.44977521013943034, 0.12512019126896556, 0.10611514593626303, 0.12999109897670713, 0.097643456042531, 0.12344805624066446, 0.08955839603059212, 0.1004503392581757, 0.11511056310702839, 0.11249910597081214, 0.09713399593399863, 0.09152773225609778, 0.08326194494850625, 0.9717677920922253, 0.9239288975794886, 0.9256714910084645, 0.9711686164112353, 0.9604806100254428, 0.9539225529944614, 0.9144489180745952, 0.9621063650175611, 0.9578118638155027, 0.2725702849574715, 0.2853554937915157, 0.30041846330182964, 0.32450094876023916, 0.33642327069359246, 0.3047064074010347, 0.2948131441949168, 0.3288126793936529, 0.3355470197611389, 0.6182578053121051, 0.6810172501834739, 0.6249620691355166, 0.6081154764758298, 0.7295860778770522, 0.6187934156924256, 0.6131217616781832, 0.6802642268524232, 0.6300605895423208, 0.2247561733752288, 0.2592709158893949, 0.1559753789011893, 0.12089287554656891, 0.22315048265272175, 0.1648172743665215, 0.23658474026793552, 0.25759851073460693, 0.24636655676947217, 0.21598456383594145, 0.22674558801979983, 0.3855945805320653, 0.16980466122434879, 0.19129443317778372, 0.17340702187430057, 0.17418218625698523, 0.2658420338781262, 0.12136686255333262, 0.1842778987342787, 0.2763275535052385, 0.2233375483574065, 0.25234119357426976, 0.25444264883903145, 0.20791192429746808, 0.203252015620916, 0.2656584468968659, 0.30314921583690957, 0.42557943754302374, 0.4538377263682696, 0.48565517456809715, 0.4300726236702661, 0.53199611809216, 0.4491885529711589, 0.49414493046271546, 0.5321930788148641, 0.4970736275705143, 0.044253021917533664, 0.05185753869041998, 0.08489079634964058, 0.060904088241754306, 0.06977325497385756, 0.05013546774446043, 0.07076879332401953, 0.05295083573519932, 0.08199058465697873, 0.2044889671623138, 0.21124710697239713, 0.23674856233677932, 0.20594209371132333, 0.20411152775970465, 0.19221508257160347, 0.19957212418223602, 0.19948743133456526, 0.21982521144199674, 0.5639614859705542, 0.5988538150007157, 0.6043567472543938, 0.591901465218716, 0.5908599139727917, 0.5754874246331922, 0.5921045733575809, 0.601065298550555, 0.5748863391360102, 0.09733548243319312, 0.10459517424905773, 0.10865453493231159, 0.09989545101265707, 0.09906684462596427, 0.11099066618094244, 0.12698262659581583, 0.14386582155407013, 0.10551059265786167, 0.22935829657818108, 0.22036641951257885, 0.16657615647583446, 0.33732580543274593, 0.2526351053477167, 0.2163807091133878, 0.2356123616981679, 0.18705109491624838, 0.20359767682690455, 0.26493468085061356, 0.28466086657904666, 0.28098318621562857, 0.2881738377378045, 0.29699192645755135, 0.2700198365967833, 0.27759191399037975, 0.2945544373100424, 0.27102068462109385, 0.1916550454582332, 0.24771595012742742, 0.2394779909279624, 0.22380691301450883, 0.22213786114192813, 0.23863584913818936, 0.22005020408233955, 0.2348686262946268, 0.24746736823757542, 0.18348934511236326, 0.18664386315467496, 0.17636137870669444, 0.17996385504524293, 0.18930556575590507, 0.2080308410189563, 0.17438614242107064, 0.19393698390163783, 0.17320625048618643, 0.18510805432758548, 0.19481048158746106, 0.17809093190520564, 0.19510441671498713, 0.18830035444551763, 0.1908324303588642, 0.17998484075908072, 0.1878424009534071, 0.18872322045779388, 0.622679682539484, 0.7260284732043532, 0.7448053553857144, 0.19765445523508096, 0.18863190123556384, 0.18019068168383456, 0.17882957195727212, 0.2804302047031444, 0.7005707394601036, 0.6093044131031585, 0.20649641928084095, 0.6651226865440958, 0.17425972887586083, 0.21456491042196713, 0.7360084469520352, 0.1942582540714426, 0.26609155694625564, 0.2111461234649069, 0.20499048252866303, 0.19839830153070526, 0.19078695381118038, 0.18526263851612157, 0.17958987127735504, 0.21888138818933356, 0.20073315560141602, 0.19005999726409173, 0.18907615396868005, 0.11231724705161883, 0.10343008273055165, 0.09072060579602315, 0.10090862514908172, 0.11804315863438775, 0.09833385705403164, 0.08470643144136991, 0.08940043268895914, 0.09568826876288805]}, "mutation_prompt": null}
{"id": "a993b70b-87dd-46a6-9aa3-b4c2c58e05db", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedDynamicMutationABCOptimizerImproved", "description": "Improve exploration by incorporating a differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca9a4cb6-dc97-4edc-a81f-7abf1352eb11", "metadata": {"aucs": [0.6385520475404972, 0.6814206728785729, 0.650825001899562, 0.6837501910260692, 0.6975152574295738, 0.680618990025861, 0.6859141250019638, 0.6861013667903195, 0.681644180172162, 0.3400336551044667, 0.32101588821740623, 0.3124178427053096, 0.31178582252067066, 0.31118342228195894, 0.32468022703256016, 0.327637637817764, 0.3244513791223681, 0.3442768216336973, 0.2136484782399437, 0.12833796301841216, 0.12377603419029415, 0.09245845048065271, 0.13990844737936436, 0.44977521013943034, 0.12512019126896556, 0.10611514593626303, 0.12999109897670713, 0.097643456042531, 0.12344805624066446, 0.08955839603059212, 0.1004503392581757, 0.11511056310702839, 0.11249910597081214, 0.09713399593399863, 0.09152773225609778, 0.08326194494850625, 0.9717677920922253, 0.9239288975794886, 0.9256714910084645, 0.9711686164112353, 0.9604806100254428, 0.9539225529944614, 0.9144489180745952, 0.9621063650175611, 0.9578118638155027, 0.2725702849574715, 0.2853554937915157, 0.30041846330182964, 0.32450094876023916, 0.33642327069359246, 0.3047064074010347, 0.2948131441949168, 0.3288126793936529, 0.3355470197611389, 0.6182578053121051, 0.6810172501834739, 0.6249620691355166, 0.6081154764758298, 0.7295860778770522, 0.6187934156924256, 0.6131217616781832, 0.6802642268524232, 0.6300605895423208, 0.2247561733752288, 0.2592709158893949, 0.1559753789011893, 0.12089287554656891, 0.22315048265272175, 0.1648172743665215, 0.23658474026793552, 0.25759851073460693, 0.24636655676947217, 0.21598456383594145, 0.22674558801979983, 0.3855945805320653, 0.16980466122434879, 0.19129443317778372, 0.17340702187430057, 0.17418218625698523, 0.2658420338781262, 0.12136686255333262, 0.1842778987342787, 0.2763275535052385, 0.2233375483574065, 0.25234119357426976, 0.25444264883903145, 0.20791192429746808, 0.203252015620916, 0.2656584468968659, 0.30314921583690957, 0.42557943754302374, 0.4538377263682696, 0.48565517456809715, 0.4300726236702661, 0.53199611809216, 0.4491885529711589, 0.49414493046271546, 0.5321930788148641, 0.4970736275705143, 0.044253021917533664, 0.05185753869041998, 0.08489079634964058, 0.060904088241754306, 0.06977325497385756, 0.05013546774446043, 0.07076879332401953, 0.05295083573519932, 0.08199058465697873, 0.2044889671623138, 0.21124710697239713, 0.23674856233677932, 0.20594209371132333, 0.20411152775970465, 0.19221508257160347, 0.19957212418223602, 0.19948743133456526, 0.21982521144199674, 0.5639614859705542, 0.5988538150007157, 0.6043567472543938, 0.591901465218716, 0.5908599139727917, 0.5754874246331922, 0.5921045733575809, 0.601065298550555, 0.5748863391360102, 0.09733548243319312, 0.10459517424905773, 0.10865453493231159, 0.09989545101265707, 0.09906684462596427, 0.11099066618094244, 0.12698262659581583, 0.14386582155407013, 0.10551059265786167, 0.22935829657818108, 0.22036641951257885, 0.16657615647583446, 0.33732580543274593, 0.2526351053477167, 0.2163807091133878, 0.2356123616981679, 0.18705109491624838, 0.20359767682690455, 0.26493468085061356, 0.28466086657904666, 0.28098318621562857, 0.2881738377378045, 0.29699192645755135, 0.2700198365967833, 0.27759191399037975, 0.2945544373100424, 0.27102068462109385, 0.1916550454582332, 0.24771595012742742, 0.2394779909279624, 0.22380691301450883, 0.22213786114192813, 0.23863584913818936, 0.22005020408233955, 0.2348686262946268, 0.24746736823757542, 0.18348934511236326, 0.18664386315467496, 0.17636137870669444, 0.17996385504524293, 0.18930556575590507, 0.2080308410189563, 0.17438614242107064, 0.19393698390163783, 0.17320625048618643, 0.18510805432758548, 0.19481048158746106, 0.17809093190520564, 0.19510441671498713, 0.18830035444551763, 0.1908324303588642, 0.17998484075908072, 0.1878424009534071, 0.18872322045779388, 0.622679682539484, 0.7260284732043532, 0.7448053553857144, 0.19765445523508096, 0.18863190123556384, 0.18019068168383456, 0.17882957195727212, 0.2804302047031444, 0.7005707394601036, 0.6093044131031585, 0.20649641928084095, 0.6651226865440958, 0.17425972887586083, 0.21456491042196713, 0.7360084469520352, 0.1942582540714426, 0.26609155694625564, 0.2111461234649069, 0.20499048252866303, 0.19839830153070526, 0.19078695381118038, 0.18526263851612157, 0.17958987127735504, 0.21888138818933356, 0.20073315560141602, 0.19005999726409173, 0.18907615396868005, 0.11231724705161883, 0.10343008273055165, 0.09072060579602315, 0.10090862514908172, 0.11804315863438775, 0.09833385705403164, 0.08470643144136991, 0.08940043268895914, 0.09568826876288805]}, "mutation_prompt": null}
{"id": "c214020e-6c46-471e-83cd-ca9b7c14b7dc", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedDynamicMutationABCOptimizerImproved", "description": "Improve exploration by incorporating a differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca9a4cb6-dc97-4edc-a81f-7abf1352eb11", "metadata": {"aucs": [0.6385520475404972, 0.6814206728785729, 0.650825001899562, 0.6837501910260692, 0.6975152574295738, 0.680618990025861, 0.6859141250019638, 0.6861013667903195, 0.681644180172162, 0.3400336551044667, 0.32101588821740623, 0.3124178427053096, 0.31178582252067066, 0.31118342228195894, 0.32468022703256016, 0.327637637817764, 0.3244513791223681, 0.3442768216336973, 0.2136484782399437, 0.12833796301841216, 0.12377603419029415, 0.09245845048065271, 0.13990844737936436, 0.44977521013943034, 0.12512019126896556, 0.10611514593626303, 0.12999109897670713, 0.097643456042531, 0.12344805624066446, 0.08955839603059212, 0.1004503392581757, 0.11511056310702839, 0.11249910597081214, 0.09713399593399863, 0.09152773225609778, 0.08326194494850625, 0.9717677920922253, 0.9239288975794886, 0.9256714910084645, 0.9711686164112353, 0.9604806100254428, 0.9539225529944614, 0.9144489180745952, 0.9621063650175611, 0.9578118638155027, 0.2725702849574715, 0.2853554937915157, 0.30041846330182964, 0.32450094876023916, 0.33642327069359246, 0.3047064074010347, 0.2948131441949168, 0.3288126793936529, 0.3355470197611389, 0.6182578053121051, 0.6810172501834739, 0.6249620691355166, 0.6081154764758298, 0.7295860778770522, 0.6187934156924256, 0.6131217616781832, 0.6802642268524232, 0.6300605895423208, 0.2247561733752288, 0.2592709158893949, 0.1559753789011893, 0.12089287554656891, 0.22315048265272175, 0.1648172743665215, 0.23658474026793552, 0.25759851073460693, 0.24636655676947217, 0.21598456383594145, 0.22674558801979983, 0.3855945805320653, 0.16980466122434879, 0.19129443317778372, 0.17340702187430057, 0.17418218625698523, 0.2658420338781262, 0.12136686255333262, 0.1842778987342787, 0.2763275535052385, 0.2233375483574065, 0.25234119357426976, 0.25444264883903145, 0.20791192429746808, 0.203252015620916, 0.2656584468968659, 0.30314921583690957, 0.42557943754302374, 0.4538377263682696, 0.48565517456809715, 0.4300726236702661, 0.53199611809216, 0.4491885529711589, 0.49414493046271546, 0.5321930788148641, 0.4970736275705143, 0.044253021917533664, 0.05185753869041998, 0.08489079634964058, 0.060904088241754306, 0.06977325497385756, 0.05013546774446043, 0.07076879332401953, 0.05295083573519932, 0.08199058465697873, 0.2044889671623138, 0.21124710697239713, 0.23674856233677932, 0.20594209371132333, 0.20411152775970465, 0.19221508257160347, 0.19957212418223602, 0.19948743133456526, 0.21982521144199674, 0.5639614859705542, 0.5988538150007157, 0.6043567472543938, 0.591901465218716, 0.5908599139727917, 0.5754874246331922, 0.5921045733575809, 0.601065298550555, 0.5748863391360102, 0.09733548243319312, 0.10459517424905773, 0.10865453493231159, 0.09989545101265707, 0.09906684462596427, 0.11099066618094244, 0.12698262659581583, 0.14386582155407013, 0.10551059265786167, 0.22935829657818108, 0.22036641951257885, 0.16657615647583446, 0.33732580543274593, 0.2526351053477167, 0.2163807091133878, 0.2356123616981679, 0.18705109491624838, 0.20359767682690455, 0.26493468085061356, 0.28466086657904666, 0.28098318621562857, 0.2881738377378045, 0.29699192645755135, 0.2700198365967833, 0.27759191399037975, 0.2945544373100424, 0.27102068462109385, 0.1916550454582332, 0.24771595012742742, 0.2394779909279624, 0.22380691301450883, 0.22213786114192813, 0.23863584913818936, 0.22005020408233955, 0.2348686262946268, 0.24746736823757542, 0.18348934511236326, 0.18664386315467496, 0.17636137870669444, 0.17996385504524293, 0.18930556575590507, 0.2080308410189563, 0.17438614242107064, 0.19393698390163783, 0.17320625048618643, 0.18510805432758548, 0.19481048158746106, 0.17809093190520564, 0.19510441671498713, 0.18830035444551763, 0.1908324303588642, 0.17998484075908072, 0.1878424009534071, 0.18872322045779388, 0.622679682539484, 0.7260284732043532, 0.7448053553857144, 0.19765445523508096, 0.18863190123556384, 0.18019068168383456, 0.17882957195727212, 0.2804302047031444, 0.7005707394601036, 0.6093044131031585, 0.20649641928084095, 0.6651226865440958, 0.17425972887586083, 0.21456491042196713, 0.7360084469520352, 0.1942582540714426, 0.26609155694625564, 0.2111461234649069, 0.20499048252866303, 0.19839830153070526, 0.19078695381118038, 0.18526263851612157, 0.17958987127735504, 0.21888138818933356, 0.20073315560141602, 0.19005999726409173, 0.18907615396868005, 0.11231724705161883, 0.10343008273055165, 0.09072060579602315, 0.10090862514908172, 0.11804315863438775, 0.09833385705403164, 0.08470643144136991, 0.08940043268895914, 0.09568826876288805]}, "mutation_prompt": null}
{"id": "9f34d3d6-954c-4766-9cc3-540d78550cf9", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationABCOptimizerImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedDynamicMutationABCOptimizerImproved", "description": "Improve exploration by incorporating a differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca9a4cb6-dc97-4edc-a81f-7abf1352eb11", "metadata": {"aucs": [0.6385520475404972, 0.6814206728785729, 0.650825001899562, 0.6837501910260692, 0.6975152574295738, 0.680618990025861, 0.6859141250019638, 0.6861013667903195, 0.681644180172162, 0.3400336551044667, 0.32101588821740623, 0.3124178427053096, 0.31178582252067066, 0.31118342228195894, 0.32468022703256016, 0.327637637817764, 0.3244513791223681, 0.3442768216336973, 0.2136484782399437, 0.12833796301841216, 0.12377603419029415, 0.09245845048065271, 0.13990844737936436, 0.44977521013943034, 0.12512019126896556, 0.10611514593626303, 0.12999109897670713, 0.097643456042531, 0.12344805624066446, 0.08955839603059212, 0.1004503392581757, 0.11511056310702839, 0.11249910597081214, 0.09713399593399863, 0.09152773225609778, 0.08326194494850625, 0.9717677920922253, 0.9239288975794886, 0.9256714910084645, 0.9711686164112353, 0.9604806100254428, 0.9539225529944614, 0.9144489180745952, 0.9621063650175611, 0.9578118638155027, 0.2725702849574715, 0.2853554937915157, 0.30041846330182964, 0.32450094876023916, 0.33642327069359246, 0.3047064074010347, 0.2948131441949168, 0.3288126793936529, 0.3355470197611389, 0.6182578053121051, 0.6810172501834739, 0.6249620691355166, 0.6081154764758298, 0.7295860778770522, 0.6187934156924256, 0.6131217616781832, 0.6802642268524232, 0.6300605895423208, 0.2247561733752288, 0.2592709158893949, 0.1559753789011893, 0.12089287554656891, 0.22315048265272175, 0.1648172743665215, 0.23658474026793552, 0.25759851073460693, 0.24636655676947217, 0.21598456383594145, 0.22674558801979983, 0.3855945805320653, 0.16980466122434879, 0.19129443317778372, 0.17340702187430057, 0.17418218625698523, 0.2658420338781262, 0.12136686255333262, 0.1842778987342787, 0.2763275535052385, 0.2233375483574065, 0.25234119357426976, 0.25444264883903145, 0.20791192429746808, 0.203252015620916, 0.2656584468968659, 0.30314921583690957, 0.42557943754302374, 0.4538377263682696, 0.48565517456809715, 0.4300726236702661, 0.53199611809216, 0.4491885529711589, 0.49414493046271546, 0.5321930788148641, 0.4970736275705143, 0.044253021917533664, 0.05185753869041998, 0.08489079634964058, 0.060904088241754306, 0.06977325497385756, 0.05013546774446043, 0.07076879332401953, 0.05295083573519932, 0.08199058465697873, 0.2044889671623138, 0.21124710697239713, 0.23674856233677932, 0.20594209371132333, 0.20411152775970465, 0.19221508257160347, 0.19957212418223602, 0.19948743133456526, 0.21982521144199674, 0.5639614859705542, 0.5988538150007157, 0.6043567472543938, 0.591901465218716, 0.5908599139727917, 0.5754874246331922, 0.5921045733575809, 0.601065298550555, 0.5748863391360102, 0.09733548243319312, 0.10459517424905773, 0.10865453493231159, 0.09989545101265707, 0.09906684462596427, 0.11099066618094244, 0.12698262659581583, 0.14386582155407013, 0.10551059265786167, 0.22935829657818108, 0.22036641951257885, 0.16657615647583446, 0.33732580543274593, 0.2526351053477167, 0.2163807091133878, 0.2356123616981679, 0.18705109491624838, 0.20359767682690455, 0.26493468085061356, 0.28466086657904666, 0.28098318621562857, 0.2881738377378045, 0.29699192645755135, 0.2700198365967833, 0.27759191399037975, 0.2945544373100424, 0.27102068462109385, 0.1916550454582332, 0.24771595012742742, 0.2394779909279624, 0.22380691301450883, 0.22213786114192813, 0.23863584913818936, 0.22005020408233955, 0.2348686262946268, 0.24746736823757542, 0.18348934511236326, 0.18664386315467496, 0.17636137870669444, 0.17996385504524293, 0.18930556575590507, 0.2080308410189563, 0.17438614242107064, 0.19393698390163783, 0.17320625048618643, 0.18510805432758548, 0.19481048158746106, 0.17809093190520564, 0.19510441671498713, 0.18830035444551763, 0.1908324303588642, 0.17998484075908072, 0.1878424009534071, 0.18872322045779388, 0.622679682539484, 0.7260284732043532, 0.7448053553857144, 0.19765445523508096, 0.18863190123556384, 0.18019068168383456, 0.17882957195727212, 0.2804302047031444, 0.7005707394601036, 0.6093044131031585, 0.20649641928084095, 0.6651226865440958, 0.17425972887586083, 0.21456491042196713, 0.7360084469520352, 0.1942582540714426, 0.26609155694625564, 0.2111461234649069, 0.20499048252866303, 0.19839830153070526, 0.19078695381118038, 0.18526263851612157, 0.17958987127735504, 0.21888138818933356, 0.20073315560141602, 0.19005999726409173, 0.18907615396868005, 0.11231724705161883, 0.10343008273055165, 0.09072060579602315, 0.10090862514908172, 0.11804315863438775, 0.09833385705403164, 0.08470643144136991, 0.08940043268895914, 0.09568826876288805]}, "mutation_prompt": null}
{"id": "12a59da5-814e-4d98-a8fd-c22393d70caa", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizer", "description": "Enhance population diversity by introducing a crowding-based selection mechanism to maintain a diverse set of solutions.", "configspace": "", "generation": 67, "fitness": 0.3130171411023897, "feedback": "The algorithm EnhancedCrowdingABCOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "ca9a4cb6-dc97-4edc-a81f-7abf1352eb11", "metadata": {"aucs": [0.5800602394961495, 0.8388132404757583, 0.8594992913176333, 0.7292619065883754, 0.5799810966100958, 0.6741690540209067, 0.8603732584205722, 0.5707710892131488, 0.5351380015507922, 0.6669911522859733, 0.4694603132517212, 0.5967453563103086, 0.4660944444803916, 0.05317369209186473, 0.11851032507680626, 0.4771578361845692, 0.5580379702434193, 0.1494799986220514, 0.10708759984955574, 0.12591776511303066, 0.1706452041631481, 0.20758529741044618, 0.14857161441110878, 0.13309866539431037, 0.1178091912308662, 0.12614826279927205, 0.11112296713842729, 0.08349323511547113, 0.076771581109221, 0.10989212465685727, 0.09963299270704684, 0.13039590068234252, 0.0732283204626003, 0.09336287972457391, 0.13246780337452946, 0.08732436550083589, 0.8179389271400817, 0.8997659131073728, 0.8138134909418318, 0.9445063987153237, 0.8517591904323134, 0.8077699536830856, 0.8342909633454312, 0.9525889639028977, 0.9672758144842268, 0.323364700816689, 0.3607553715302212, 0.33237067270818177, 0.20681746025754688, 0.27415484798749334, 0.4779506282664713, 0.3710484568960293, 0.38695009281934445, 0.33027085776997356, 0.8695855417389564, 0.8452305876329701, 0.3341419730613038, 0.2107597026618243, 0.8781379144016805, 0.881767961995365, 0.23186970660859918, 0.8680998070411426, 0.8591592381120325, 0.14156613687931607, 0.1385938253399419, 0.22077072007839693, 0.12675542084317037, 0.12438694659551364, 0.20333410244883376, 0.18512526711542865, 0.20290340768187964, 0.15029236101785304, 0.13489454748291807, 0.11430346537354785, 0.11895558592877475, 0.1418831055322085, 0.17975238962898132, 0.13294573419297417, 0.11413430699185989, 0.09726374587506448, 0.324632261865584, 0.3122288071512117, 0.1568022220721177, 0.6230442869077275, 0.17201563952710452, 0.45918058704457887, 0.16709107311404003, 0.16318417736539526, 0.583037593410844, 0.1888935259106994, 0.5268201723315085, 0.22688353071860257, 0.31268394462880167, 0.7504868473035491, 0.2954733917884006, 0.4788016414698567, 0.637350642003057, 0.45058357086617595, 0.2009134374688588, 0.02827533595129883, 0.10386218939428904, 0.036022600056271226, 0.06048672139094069, 0.08317253464018026, 0.04118982655970793, 0.08320725369011162, 0.06504065691019478, 0.09087995217307065, 0.4078075831687782, 0.2215531481699372, 0.33289847079737045, 0.2556290436638057, 0.16966072105053154, 0.36888204240633937, 0.3485501203043324, 0.34337327997173694, 0.16526821934309444, 0.6473206887132521, 0.6805819468036188, 0.5606533326301724, 0.7379881057294047, 0.5090154593244802, 0.4796959448894337, 0.8164094880675373, 0.5975527992194776, 0.4989091833679814, 0.1162350153291336, 0.10857151854635427, 0.06524170278845065, 0.0940202276728298, 0.1070111347372178, 0.11144853612292516, 0.10518190845921549, 0.07533111702046624, 0.12129079905917983, 0.19358735261405702, 0.2793861030559708, 0.21206580181836798, 0.8088151351772738, 0.3920807324683744, 0.19770198067946143, 0.18516286621824152, 0.2785843496924211, 0.37425452808875803, 0.24802871186129816, 0.42966085178589153, 0.27768496320625136, 0.36951357805213636, 0.4857039546140237, 0.3063251541022879, 0.4387970198130945, 0.379730413640733, 0.6555837199737165, 0.31367549196224076, 0.17390537437950992, 0.4730293873702057, 0.28618834504205315, 0.11947838306915659, 0.21081369334310518, 0.5496798416962436, 0.18304974100601645, 0.2530050432317126, 0.2240159183938244, 0.17871606804692697, 0.23537689560928265, 0.18325221758130972, 0.16954192161039972, 0.17386789983611017, 0.17936020939593234, 0.17984403639094615, 0.20538568136492463, 0.17471094736797965, 0.18170905200089726, 0.24520890206579105, 0.21548986367207368, 0.17043759334592046, 0.19284451541955627, 0.2126709446716578, 0.1763193674437551, 0.20385178750652455, 0.1990548393977648, 0.14066936532791374, 0.18387434939003944, 0.18391035731633099, 0.19655637351352984, 0.19599923735361635, 0.7347089213816981, 0.16615003595954336, 0.17511217058712958, 0.6594162743425018, 0.16761148495641354, 0.1651069437639886, 0.20487263029566471, 0.20257214561819048, 0.10436653569224108, 0.20834339711266991, 0.1641133750015411, 0.2092312649936886, 0.22767544267415052, 0.1810330916606845, 0.2056432302131036, 0.2152829843608346, 0.2085815910081874, 0.21384263517491553, 0.31828321883869093, 0.1989680921692839, 0.19740944399933114, 0.08298997114834361, 0.095852842887167, 0.09484800569314922, 0.08024545613202316, 0.09065091701736072, 0.06826557592396765, 0.06656264638295939, 0.08280132444254251, 0.09639376147811818]}, "mutation_prompt": null}
{"id": "df0a09b4-9b9f-48c3-97a4-80fee8f8ccdc", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizer", "description": "Enhance population diversity by introducing a crowding-based selection mechanism to maintain a diverse set of solutions.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "12a59da5-814e-4d98-a8fd-c22393d70caa", "metadata": {"aucs": [0.5800602394961495, 0.8388132404757583, 0.8594992913176333, 0.7292619065883754, 0.5799810966100958, 0.6741690540209067, 0.8603732584205722, 0.5707710892131488, 0.5351380015507922, 0.6669911522859733, 0.4694603132517212, 0.5967453563103086, 0.4660944444803916, 0.05317369209186473, 0.11851032507680626, 0.4771578361845692, 0.5580379702434193, 0.1494799986220514, 0.10708759984955574, 0.12591776511303066, 0.1706452041631481, 0.20758529741044618, 0.14857161441110878, 0.13309866539431037, 0.1178091912308662, 0.12614826279927205, 0.11112296713842729, 0.08349323511547113, 0.076771581109221, 0.10989212465685727, 0.09963299270704684, 0.13039590068234252, 0.0732283204626003, 0.09336287972457391, 0.13246780337452946, 0.08732436550083589, 0.8179389271400817, 0.8997659131073728, 0.8138134909418318, 0.9445063987153237, 0.8517591904323134, 0.8077699536830856, 0.8342909633454312, 0.9525889639028977, 0.9672758144842268, 0.323364700816689, 0.3607553715302212, 0.33237067270818177, 0.20681746025754688, 0.27415484798749334, 0.4779506282664713, 0.3710484568960293, 0.38695009281934445, 0.33027085776997356, 0.8695855417389564, 0.8452305876329701, 0.3341419730613038, 0.2107597026618243, 0.8781379144016805, 0.881767961995365, 0.23186970660859918, 0.8680998070411426, 0.8591592381120325, 0.14156613687931607, 0.1385938253399419, 0.22077072007839693, 0.12675542084317037, 0.12438694659551364, 0.20333410244883376, 0.18512526711542865, 0.20290340768187964, 0.15029236101785304, 0.13489454748291807, 0.11430346537354785, 0.11895558592877475, 0.1418831055322085, 0.17975238962898132, 0.13294573419297417, 0.11413430699185989, 0.09726374587506448, 0.324632261865584, 0.3122288071512117, 0.1568022220721177, 0.6230442869077275, 0.17201563952710452, 0.45918058704457887, 0.16709107311404003, 0.16318417736539526, 0.583037593410844, 0.1888935259106994, 0.5268201723315085, 0.22688353071860257, 0.31268394462880167, 0.7504868473035491, 0.2954733917884006, 0.4788016414698567, 0.637350642003057, 0.45058357086617595, 0.2009134374688588, 0.02827533595129883, 0.10386218939428904, 0.036022600056271226, 0.06048672139094069, 0.08317253464018026, 0.04118982655970793, 0.08320725369011162, 0.06504065691019478, 0.09087995217307065, 0.4078075831687782, 0.2215531481699372, 0.33289847079737045, 0.2556290436638057, 0.16966072105053154, 0.36888204240633937, 0.3485501203043324, 0.34337327997173694, 0.16526821934309444, 0.6473206887132521, 0.6805819468036188, 0.5606533326301724, 0.7379881057294047, 0.5090154593244802, 0.4796959448894337, 0.8164094880675373, 0.5975527992194776, 0.4989091833679814, 0.1162350153291336, 0.10857151854635427, 0.06524170278845065, 0.0940202276728298, 0.1070111347372178, 0.11144853612292516, 0.10518190845921549, 0.07533111702046624, 0.12129079905917983, 0.19358735261405702, 0.2793861030559708, 0.21206580181836798, 0.8088151351772738, 0.3920807324683744, 0.19770198067946143, 0.18516286621824152, 0.2785843496924211, 0.37425452808875803, 0.24802871186129816, 0.42966085178589153, 0.27768496320625136, 0.36951357805213636, 0.4857039546140237, 0.3063251541022879, 0.4387970198130945, 0.379730413640733, 0.6555837199737165, 0.31367549196224076, 0.17390537437950992, 0.4730293873702057, 0.28618834504205315, 0.11947838306915659, 0.21081369334310518, 0.5496798416962436, 0.18304974100601645, 0.2530050432317126, 0.2240159183938244, 0.17871606804692697, 0.23537689560928265, 0.18325221758130972, 0.16954192161039972, 0.17386789983611017, 0.17936020939593234, 0.17984403639094615, 0.20538568136492463, 0.17471094736797965, 0.18170905200089726, 0.24520890206579105, 0.21548986367207368, 0.17043759334592046, 0.19284451541955627, 0.2126709446716578, 0.1763193674437551, 0.20385178750652455, 0.1990548393977648, 0.14066936532791374, 0.18387434939003944, 0.18391035731633099, 0.19655637351352984, 0.19599923735361635, 0.7347089213816981, 0.16615003595954336, 0.17511217058712958, 0.6594162743425018, 0.16761148495641354, 0.1651069437639886, 0.20487263029566471, 0.20257214561819048, 0.10436653569224108, 0.20834339711266991, 0.1641133750015411, 0.2092312649936886, 0.22767544267415052, 0.1810330916606845, 0.2056432302131036, 0.2152829843608346, 0.2085815910081874, 0.21384263517491553, 0.31828321883869093, 0.1989680921692839, 0.19740944399933114, 0.08298997114834361, 0.095852842887167, 0.09484800569314922, 0.08024545613202316, 0.09065091701736072, 0.06826557592396765, 0.06656264638295939, 0.08280132444254251, 0.09639376147811818]}, "mutation_prompt": null}
{"id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 69, "fitness": 0.3363871641918092, "feedback": "The algorithm EnhancedCrowdingABCOptimizerRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "12a59da5-814e-4d98-a8fd-c22393d70caa", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "b0b101f9-dfd4-4ff9-a481-036d18f34c13", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "59bf5b5a-845e-4739-80bf-18319b67d1ec", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "a093e3a5-7b1f-4bb6-a0a5-355ed9ab6cbd", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "14ceae48-17de-4452-af62-fe75e21bc25d", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "3ce30300-b0db-4aa7-8aa9-ce5ad3c3caf0", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "ae92b454-ec24-458e-b453-57f453b833f6", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                \n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on enhanced chaotic map for mutation\n                        chaotic_map = np.sin(np.log(np.abs(chaos_sequence + 1.0)))  # Novel chaotic map\n                        new_solution += 0.1 * chaotic_map * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on fitness improvement\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerEnhanced", "description": "Enhance the exploration capability by integrating a novel chaotic map for mutation and leveraging a dynamic step size adaptation based on fitness improvement.", "configspace": "", "generation": 75, "fitness": 0.32727501339681403, "feedback": "The algorithm EnhancedCrowdingABCOptimizerEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.23.", "error": "", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.8290079916299686, 0.6832714928283818, 0.7195099262574001, 0.8133147027210784, 0.8155820942185628, 0.6996524281803396, 0.8713317855800765, 0.6889169404356648, 0.7232852360476711, 0.43540536067372737, 0.3155049419253102, 0.44710823731616556, 0.29764806054260207, 0.45808419686038804, 0.10813286937128053, 0.4184713484702104, 0.47246879242410644, 0.42531527287547133, 0.14821955677851806, 0.10513053769538361, 0.11357112358613375, 0.13112881168102108, 0.17100547467260874, 0.11528942311331414, 0.10356488664779284, 0.12941369891458543, 0.13216893847629418, 0.14427349900925635, 0.12347610254172436, 0.09002110071442115, 0.11652872897535638, 0.09389736219776623, 0.1025269730974454, 0.11936890506529285, 0.10853095431385973, 0.10253213149411644, 0.829673233021037, 0.9154704802637765, 0.9556837074138955, 0.8891836039789424, 0.9156805594155152, 0.8965390848974323, 0.9512747118096291, 0.8700360370144897, 0.972828640667767, 0.3990723596224197, 0.3953541794754778, 0.4131477055830093, 0.3766176554619206, 0.3643619746371862, 0.4451331273209266, 0.3328709175897999, 0.4305002980104776, 0.3701361567394714, 0.8652706000701054, 0.1695427480005306, 0.2226423655342622, 0.8463084280962226, 0.27463154498172715, 0.8292438345651959, 0.17471874457405923, 0.22848230055075758, 0.8662985753320128, 0.20470356783116372, 0.2189004440182939, 0.12021525460784233, 0.33128193255245864, 0.16846443284988677, 0.1745318022678144, 0.17613124785064882, 0.2010853618274142, 0.21294157229753996, 0.12027052115612602, 0.12241568782539347, 0.29107155116612216, 0.1469166921315047, 0.40307640987276694, 0.24343085445326995, 0.23000074384854852, 0.17794626672791836, 0.1283158007311126, 0.27742663447394444, 0.34152857065563336, 0.09327419820998839, 0.32840487852274025, 0.4931655681874224, 0.16196640942085327, 0.20663926216617334, 0.2940235870609238, 0.2477429098627748, 0.48668833799018807, 0.23625774271391942, 0.36053792827899056, 0.5175591879101766, 0.19593881690409032, 0.4212958608301076, 0.42224881358818656, 0.20177814282577788, 0.4592935880686032, 0.07488740249265735, 0.055059048871072824, 0.06680625980142996, 0.07612225710379139, 0.09530705145831053, 0.05437812909284567, 0.024187199423688743, 0.0962005472948908, 0.06756039612665721, 0.17363621188642842, 0.30647767039067175, 0.35003078417643374, 0.3275335878418302, 0.29525301929554926, 0.33395654092593974, 0.31818979595964325, 0.25902299695288544, 0.37850116976673076, 0.5860208749617852, 0.5680712182821025, 0.8284270757150185, 0.7141889483128312, 0.4788789649215316, 0.5864827207754464, 0.6762352348037174, 0.4909216725262264, 0.5566472964757816, 0.076520453124716, 0.09178299211601082, 0.10019171159114815, 0.07861167794820689, 0.09317012181525042, 0.09074972969676232, 0.11878729782691733, 0.084311226545972, 0.08146038275399514, 0.5789377754047669, 0.5697068963673908, 0.23117798921056187, 0.33406424064200135, 0.2054164197438263, 0.4583726174041908, 0.20458530081409465, 0.25949749757752016, 0.7168998378750167, 0.40878215361663495, 0.4777216981045329, 0.46173105190535435, 0.4199066197151926, 0.44925166926499793, 0.4563711861672115, 0.43845981681204815, 0.40473075532214764, 0.48900871138744706, 0.40788061716418755, 0.40067627675323614, 0.2623028275734659, 0.3262843370726767, 0.32734019516962465, 0.22994554131768463, 0.5130488423861002, 0.42383674331875265, 0.22203206470292525, 0.20825659681738917, 0.22769315132548296, 0.19314886944340437, 0.2310533719075546, 0.22602595842828332, 0.226128273137847, 0.19851220710982997, 0.1957862797307487, 0.2092130967230066, 0.19468330629278685, 0.20283671717131535, 0.20556166429262934, 0.21569089630137672, 0.17174571669646144, 0.23797561497545472, 0.21964504019716924, 0.23211879887260334, 0.23535476291882085, 0.16860345772948226, 0.15028051370965045, 0.15091284393902804, 0.8984668587352393, 0.1977341341333576, 0.16491880447237928, 0.18422731285967087, 0.15916874669233472, 0.8693091305859764, 0.5171781947196971, 0.1682074753753786, 0.16674247655662444, 0.20583904995573143, 0.20600076618523422, 0.20330079823415048, 0.5059208982502443, 0.20673714855887904, 0.2099718810537261, 0.22133080115109682, 0.25435727793968677, 0.20407130360579262, 0.2244347019374865, 0.2292589461613368, 0.2103313456814201, 0.2559021394783342, 0.25566656383834163, 0.4520284448190317, 0.09308802399000848, 0.15212015561635472, 0.09679122383616556, 0.09075909868756138, 0.07812487575862748, 0.09135434963501954, 0.10779875633364278, 0.09844425244363542, 0.08721642321320577]}, "mutation_prompt": null}
{"id": "3f8ff4c2-a22f-4eb3-8f0e-362b003372a4", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "fe3bee4d-b3b8-492f-8005-7c759613ccd7", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "3bc6f1ca-778d-4124-9854-e1326aa3927f", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "88e85800-1744-48e3-8ca0-427469102a2a", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "f7fcc718-79c0-4561-b0de-125a242af48a", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "32ed8033-6df3-413c-8a71-3fcbc77f8ec2", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "0fea4ce6-ebc4-49b7-8a2b-4f0d3f6afcc2", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "8d7ebcea-a39b-480e-9246-bd4a83d27ee6", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "2537aff7-99d4-43f1-80e8-ad6e8f21ef65", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "89005ec8-28e0-4019-9b30-3792903e8901", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "274186ac-b3fc-4613-9f8a-cfd183a70b74", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "4c962307-a70f-4189-850c-e2c0ab0c9c60", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "dfe85482-4654-42c2-96b8-5287030790eb", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "160ea7da-cc51-4392-a25e-a108c29b2772", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "ec1812c0-ede7-4095-b56f-42adfea33275", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "a3c042b1-4ae2-4f5c-a884-a1aff70194b8", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "168ea372-c70f-4178-8696-437698fdffdf", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "278e847d-02be-458f-ae9b-91c0ba1da32c", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "fdde7b24-90c7-4556-8183-48fc9acd1cd7", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n        self.success_rate = 0.5  # Initial success rate for adaptive learning rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Update success rate\n                \n                else:\n                    self.success_rate = 0.9 * self.success_rate  # Decrease success rate on failure\n                \n                if self.success_rate > 0.5:  # Adaptive learning rate adjustment\n                    self.mutation_rate *= 1.1\n                else:\n                    self.mutation_rate /= 1.1\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerEnhanced", "description": "Enhance exploration and exploitation balance by incorporating a novel adaptive learning rate mechanism based on the success rate of solutions.", "configspace": "", "generation": 94, "fitness": 0.32621250154644843, "feedback": "The algorithm EnhancedCrowdingABCOptimizerEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.8598777599272216, 0.7516539191705032, 0.825515671816859, 0.8325508682185107, 0.8156590437562122, 0.8004658024095512, 0.8321207320874827, 0.7187941820649233, 0.7255475190873242, 0.424881571661231, 0.5720812657315806, 0.17841919321605182, 0.22737850935694892, 0.45304983850014247, 0.34591034638041795, 0.09022256111326155, 0.36350121147211867, 0.07809730146612781, 0.13822752885309597, 0.13318606937951571, 0.1348175423835255, 0.13749917335029238, 0.10237672632253647, 0.15370774119536346, 0.17060187862950094, 0.1785862230482751, 0.17514174731620047, 0.13520590174625557, 0.1450136135552439, 0.12545556428148197, 0.13368933971462216, 0.1278405501778903, 0.10598182292446579, 0.14983865661650875, 0.14665911764457562, 0.08756209893085398, 0.8397296163689121, 0.9217026814025222, 0.9403416516814006, 0.8199273998302989, 0.8496961874959954, 0.8677192407906681, 0.8428641914354291, 0.9513363182659957, 0.8294204934941793, 0.39917745066704957, 0.37830761992815143, 0.38859160951432514, 0.3840408268039358, 0.39618999478104056, 0.43603667985381067, 0.3729013052997864, 0.4097544557786169, 0.3289291745532753, 0.8697296449537308, 0.21262983318747686, 0.22429792084315137, 0.8497371732445396, 0.2633753566338407, 0.37064899507938476, 0.8898186804015177, 0.1370327436125408, 0.903650151250083, 0.3122820259375859, 0.16168316629361923, 0.17244401631450834, 0.16312525650670084, 0.16869093968314175, 0.17817874458578975, 0.17860086857469193, 0.6379910827722621, 0.18302798506800588, 0.15930128889706596, 0.12300909646717861, 0.15224347025897023, 0.18286080142790972, 0.1628607630065937, 0.18662926783935285, 0.21052065070482207, 0.22469306890009033, 0.202973512165322, 0.3562158204374185, 0.3557090466356505, 0.5618426082490606, 0.10154507214615172, 0.10466190381793672, 0.09802476191357179, 0.07988662244846945, 0.04999751819305054, 0.21932302406895576, 0.18041691773215207, 0.24146386161662625, 0.5580154183139059, 0.2388985772687784, 0.13274576516467318, 0.46328389563764094, 0.2742917931136596, 0.3636681623778981, 0.16392364923572078, 0.06034613109626186, 0.16301712763838583, 0.05137758941712567, 0.0689524292546736, 0.17136084152049968, 0.20353596464009227, 0.09036480105269962, 0.17168610534496498, 0.13787329824966088, 0.1826740484135324, 0.09837192663833993, 0.1646694683305705, 0.1457277697440259, 0.14043724906861266, 0.3906507276524046, 0.1765343782336164, 0.18109687624044213, 0.15612048700516046, 0.8023175129340793, 0.7418038472004853, 0.5524184235277767, 0.8017810386763894, 0.6949159241682907, 0.7116118347814955, 0.5749249582100299, 0.48161512564635467, 0.6797462334245676, 0.1452757023532717, 0.13989588472159942, 0.11524281426618088, 0.15665671689907557, 0.10799271004759903, 0.12332663417548106, 0.11257757964018889, 0.11552636321704379, 0.13251733643142438, 0.49853757363047335, 0.3896759113872428, 0.18299234227463423, 0.28644474051600666, 0.6588091534151876, 0.1946933894641173, 0.2837200015677116, 0.2734899604281411, 0.23417105897702983, 0.4732041852079939, 0.30709677897777055, 0.4827674735752582, 0.4351201514206372, 0.37456225022470435, 0.5124781065209214, 0.4823759029272472, 0.427096484276273, 0.4264640239321006, 0.32971020478155155, 0.40477109030656266, 0.3342556425583022, 0.4611817119189122, 0.3796909627236065, 0.2935958318642564, 0.21890760657965613, 0.41312462391749516, 0.2528943676313634, 0.20470397063067558, 0.20399245600255878, 0.22300584158045367, 0.24475136592924196, 0.21177672838716555, 0.1937745092150286, 0.2451598244112252, 0.22829825794023317, 0.20488149871977845, 0.18968958203905595, 0.2016418946383458, 0.18965062692590584, 0.24399931714417078, 0.18540951431043318, 0.193645191485893, 0.21496523026287595, 0.19573916948194614, 0.19314482261999832, 0.2078648310127209, 0.18484717004791051, 0.9032050246576535, 0.3497461096706983, 0.1998485297191449, 0.11904749642866297, 0.9114378225900888, 0.16733867304315386, 0.8827433222962201, 0.5973081337604029, 0.20962413513295408, 0.8900615142353306, 0.20779335280884137, 0.25280438237931846, 0.20491540782865236, 0.21069826846134643, 0.15391768535832795, 0.21222329420642716, 0.22735903718912087, 0.20521105409024054, 0.223983791530591, 0.22321438545002137, 0.2319480260443756, 0.21839121594962363, 0.3777057288142732, 0.2148785088520051, 0.21815372461332194, 0.11119610938992541, 0.10048741499439418, 0.12963678266070455, 0.1098588290837168, 0.10038765755100543, 0.10234105245614789, 0.10653038143191829, 0.097670964955206, 0.11277890831259829]}, "mutation_prompt": null}
{"id": "f0a2d018-f88e-4c20-87dc-6578e0078069", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on fitness landscape curvature\n                curvature = np.mean(np.abs(np.gradient(fitness_values)))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * curvature\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Enhance exploration and exploitation by introducing a novel adaptive mutation rate mechanism based on the fitness landscape curvature and a cooperative coevolutionary strategy to promote global and local search capabilities.", "configspace": "", "generation": 95, "fitness": 0.32472411864299094, "feedback": "The algorithm EnhancedCrowdingABCOptimizerRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.7973978414702116, 0.644900533017849, 0.6593838629430663, 0.7888645373258161, 0.798558784040924, 0.747843346153283, 0.8106612653268039, 0.7908435489580481, 0.7997874642852008, 0.17875184861595717, 0.1807490643367753, 0.1262633626314753, 0.17968530258668325, 0.14752289836426824, 0.18851901753587486, 0.17151062790698435, 0.1455125494467322, 0.16083565060524907, 0.14372537896473492, 0.14899623862640488, 0.12733921837507367, 0.16112627846308192, 0.23187174095211738, 0.15432575468516296, 0.12551128368927422, 0.1509712795744217, 0.12000328885870781, 0.10583007569979785, 0.12126801662058662, 0.12168343574015394, 0.09984954708413463, 0.06762963597704164, 0.08531998395014195, 0.09827343008562239, 0.11530029123820063, 0.13370589200005156, 0.9062014733044177, 0.916209305740926, 0.9465086121013467, 0.8271174356072284, 0.94571541561258, 0.9506975266936479, 0.8477279255567787, 0.8853645789213908, 0.9444210023376807, 0.3357569975950443, 0.3579375291959198, 0.3557393084656204, 0.3684667163895715, 0.36651115503389176, 0.37028093339940416, 0.33789938942664255, 0.3574290857897867, 0.32765573201649534, 0.7583129525905878, 0.8673121000849127, 0.7935498218090271, 0.7622813094979854, 0.7550479569697307, 0.795686552336657, 0.22613869326782676, 0.740718313114835, 0.8022727443163107, 0.24936269850873616, 0.28379375103781246, 0.31342153498963077, 0.123707812911659, 0.31063932939757655, 0.32032623436411123, 0.2172668006879661, 0.19162706669774943, 0.32691342795917266, 0.19381043828758193, 0.2387279389789544, 0.2629908092873502, 0.2820436183483145, 0.12236621874118248, 0.22082467189057242, 0.26777863197687746, 0.12735251428891314, 0.2976529649171398, 0.19153603879948122, 0.17902805263484856, 0.2277932624742367, 0.1562391587902623, 0.18047822718855, 0.13297046407987856, 0.08223362193701689, 0.18520773267570745, 0.13522373781135155, 0.2687856895317352, 0.23292675504570293, 0.28119185754942677, 0.27492306545321055, 0.3954019434249316, 0.3121596537046548, 0.3145980597401805, 0.2523981897221367, 0.3189665589823397, 0.047768144463474216, 0.040292988196625856, 0.04310983352252329, 0.053703348109657045, 0.042602307414511764, 0.09114530166834234, 0.0757447539644962, 0.0597320395593266, 0.054956473965363295, 0.17135886111891918, 0.16093825426949893, 0.1684876000458424, 0.1681389160882476, 0.19675649648585936, 0.18357412014739238, 0.18771780638233115, 0.15685639731749357, 0.18691681779727987, 0.5324770152414968, 0.7825827299746408, 0.7546655667394555, 0.6362824291388202, 0.7087214952036285, 0.7746944548671194, 0.7567477452427658, 0.5185352053221732, 0.7735402811167376, 0.13360055173101848, 0.11809822691308347, 0.10678822915983033, 0.06479862453282947, 0.10224012677410754, 0.0945799942068759, 0.10764613387699229, 0.12883058184260499, 0.08211510472557548, 0.5789811613547078, 0.25488319679867755, 0.22643790330987912, 0.5718807541076099, 0.45399108816726297, 0.5179290963791443, 0.5651394602046105, 0.2972300951194904, 0.4650046015638023, 0.3840840327182342, 0.25924547686553256, 0.3912903481872193, 0.5147389825165312, 0.46653585566301703, 0.4640946482788809, 0.40767371613179193, 0.5014505132558686, 0.4122967898771087, 0.31636318559904497, 0.2750962791640451, 0.3309451032815237, 0.30423496212078727, 0.3235718068809589, 0.20108409021320128, 0.3779466414579471, 0.34039469840060643, 0.37279526257865025, 0.20552798336252442, 0.17033076239295009, 0.17977273915295644, 0.2208040894666563, 0.20227916455667927, 0.17061235373478845, 0.19810549510348552, 0.20116531336104415, 0.16739173000699814, 0.2098408175506934, 0.17716006361695513, 0.21597036302295025, 0.18282870895232972, 0.2009871939600978, 0.18140596502511597, 0.20662348412075615, 0.21879949963492873, 0.19085016495276763, 0.16929227808336877, 0.14119103806197475, 0.15164130555017363, 0.8892251137590365, 0.19700518735976924, 0.897343043711845, 0.1414177752359339, 0.1677768752286738, 0.7859896887659054, 0.8264307990418928, 0.1667546052761547, 0.7508844759668746, 0.2055978491316538, 0.20411372679791095, 0.16477485555744098, 0.206985738538925, 0.21001317469404568, 0.7342437337055652, 0.20049251289654868, 0.20012289783847403, 0.2533043086774067, 0.2906886759223952, 0.20953277663976655, 0.1978096044485539, 0.228442985917381, 0.22623329767586198, 0.22436612127594102, 0.08732353738069598, 0.08558486992291814, 0.11875823235884564, 0.07833478015365058, 0.09992729663476452, 0.08565758902268172, 0.08590099186968381, 0.07532618577542449, 0.08744972258103867]}, "mutation_prompt": null}
{"id": "5cf573da-e5c1-4276-90e9-71b4ee0ede93", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "74ce9d53-e128-493c-b302-4e91ce90eb17", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "e11e77cd-6466-4327-a008-aa150e9b9a73", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
{"id": "d6805df1-4ab4-4bbb-90ec-354ca80cd8e1", "solution": "import numpy as np\n\nclass EnhancedCrowdingABCOptimizerRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.limit = int(0.6 * self.population_size)\n        self.trial_limit = 100\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.initial_mutation_rate = 0.5  # Initial mutation rate\n        self.mutation_rate = self.initial_mutation_rate\n\n    def __call__(self, func):\n        population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for itr in range(self.budget):\n            indexes = np.argsort(fitness_values)\n            selected_solutions = population[indexes[:self.limit]]\n            \n            # Introduce crowding-based selection to enhance diversity\n            crowding_indexes = np.argsort(-np.linalg.norm(selected_solutions - np.mean(selected_solutions, axis=0), axis=1))\n            selected_solutions = selected_solutions[crowding_indexes]\n            \n            self.limit = int(0.6 * self.population_size * (1 - itr / self.budget))\n            \n            for i in range(self.limit):\n                phi = np.random.uniform(low=-1, high=1, size=self.dim)\n                chaos_sequence = np.tanh(np.sin(phi) + np.mean(fitness_values) * self.mutation_rate)  # Dynamic chaos sequence generation\n                mutation_strength = 1.0 / (1.0 + np.exp(-self.mutation_rate * (fitness_values[indexes[i]] - np.min(fitness_values))))\n                if np.random.rand() < 0.1:  # 10% chance to perform Levy flights\n                    levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    new_solution = selected_solutions[i] + 0.01 * levy\n                else:\n                    if np.random.rand() < 0.5:  # Differential evolution strategy with a 50% probability\n                        r1, r2 = np.random.randint(0, self.limit), np.random.randint(0, self.limit)\n                        diff = selected_solutions[r1] - selected_solutions[r2]\n                        new_solution = selected_solutions[i] + mutation_strength * diff\n                    else:\n                        new_solution = selected_solutions[i] + mutation_strength * chaos_sequence * (selected_solutions[np.random.randint(self.limit)] - selected_solutions[np.random.randint(self.limit)])\n                        # Include an additional exploration strategy based on chaos sequences\n                        new_solution += 0.1 * np.random.randn(self.dim) * np.abs(np.tanh(chaos_sequence))\n                    \n                new_solution = np.clip(new_solution, self.lb, self.ub)\n                new_fitness = func(new_solution)\n                \n                if new_fitness < fitness_values[indexes[i]]:\n                    population[indexes[i]] = new_solution\n                    fitness_values[indexes[i]] = new_fitness\n                \n            if np.min(fitness_values) < self.best_fitness:\n                self.best_solution = population[np.argmin(fitness_values)]\n                self.best_fitness = np.min(fitness_values)\n                \n                # Dynamic mutation rate adjustment based on population diversity\n                diversity = np.mean(np.std(selected_solutions, axis=0))\n                self.mutation_rate = self.initial_mutation_rate + 0.1 * diversity\n                \n        return self.best_solution", "name": "EnhancedCrowdingABCOptimizerRefined", "description": "Improve population diversity and convergence by dynamically adapting the mutation rate based on individual fitness values and leveraging a hybrid strategy of Levy flights, differential evolution, and chaos sequences for enhanced exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "02de3f3c-78fb-40c2-8b19-b86ed250190e", "metadata": {"aucs": [0.641797951926768, 0.7702373746873622, 0.7655621709072916, 0.8323017214001832, 0.8289926391262513, 0.8337427754712337, 0.6441714406471872, 0.7352791709110735, 0.8065994721449583, 0.4126723078656642, 0.38470024836459327, 0.36400046989866264, 0.36474546709879496, 0.40178278678707513, 0.5021323733117474, 0.3241685108003435, 0.3369157529840253, 0.33960495795341716, 0.11167694901126379, 0.17927960114945873, 0.17270063413005776, 0.14973956650896125, 0.13879945279554873, 0.14766156281384324, 0.1249781932409102, 0.1352411815498381, 0.10793610284981459, 0.13910684089741188, 0.1516007811118949, 0.09621443895695048, 0.08517165133752902, 0.09129836115939893, 0.10264697933955524, 0.10267611271342225, 0.09922387376906971, 0.10917358309341674, 0.7809443205605966, 0.9359512936286353, 0.9043754430186305, 0.8198539697711466, 0.8382640412287707, 0.8678908466388582, 0.9102608175192136, 0.8904588872113488, 0.9621369718688892, 0.40478134118092235, 0.41818458375023604, 0.35513895393586037, 0.38731621199428956, 0.40454694399081814, 0.3506183872698364, 0.4085517985948246, 0.41001615406857095, 0.34296566274771445, 0.8349910036510718, 0.3824215539184631, 0.7046380872371021, 0.8681352630259793, 0.8587447664834105, 0.20688102946156628, 0.8561953208274179, 0.2362055991423263, 0.7866967657302031, 0.1941712611103258, 0.2056430723504603, 0.49779714765654304, 0.16987272125207875, 0.16690686310216574, 0.2164642515091204, 0.15706809898287644, 0.1940043710633338, 0.3412299456338487, 0.12186324516115876, 0.137862370664112, 0.20006335038255552, 0.19459527959019374, 0.1216350646183797, 0.20056875646638073, 0.19041559909998818, 0.12647534016031436, 0.23368999224122766, 0.2417402485889727, 0.22472995902755388, 0.1880106090467999, 0.24158339575487964, 0.30389472501283843, 0.168745818053732, 0.08041584551807879, 0.22108205302001271, 0.33617882046143543, 0.40235241916346676, 0.2825612211445184, 0.3304407918041312, 0.34107931940319935, 0.2704563308060566, 0.3173902884115709, 0.25668976054773773, 0.5732952485988972, 0.2927337319992386, 0.052657579724435744, 0.040792752602582194, 0.04245368344347522, 0.12116694468781386, 0.04293795464574757, 0.11019242859834466, 0.050090325685374415, 0.060901336885734625, 0.03884269453071576, 0.28827033907019206, 0.3139505470230297, 0.1569525912877101, 0.32047612639186795, 0.25922702462382563, 0.32312278417046836, 0.35890574549112153, 0.27801960714793106, 0.22619678263186715, 0.6282175927849933, 0.5781042637021612, 0.5900810333208448, 0.6101148890316583, 0.5713829847999721, 0.6324899179936156, 0.785176086500179, 0.7039667796474979, 0.7858478699996264, 0.12776130965850663, 0.11874817588780606, 0.07148342105559546, 0.08569265680505433, 0.08288796046339886, 0.09483167560582839, 0.0875617243548591, 0.10563717806735928, 0.08245003492187752, 0.6337834858772182, 0.2285494468785998, 0.35399855908577893, 0.7340265365895914, 0.5929503592401818, 0.34937839755721745, 0.7568939972825501, 0.2855151743347547, 0.46710892269348847, 0.42001655908875535, 0.3949511897186271, 0.5349523564123706, 0.39878533995514, 0.39773451329830467, 0.46699156537007125, 0.2530510370731316, 0.4140719238767986, 0.4628109272086992, 0.3324026608754833, 0.23202608079781428, 0.3851806690038758, 0.3971568697761422, 0.4101338578220499, 0.3997182279572199, 0.36353056248664306, 0.20702838887063557, 0.32839470496435275, 0.21622857062536815, 0.21789882646708258, 0.20942839523796764, 0.2171430684942881, 0.21980270260786872, 0.19375295461061326, 0.22602021191630406, 0.18047975812215222, 0.22405452758322864, 0.21126102184993256, 0.17012783775285112, 0.19146866263519802, 0.23050145192295246, 0.1756467723019236, 0.1820291287538821, 0.1806626448555746, 0.20529753403385442, 0.18521880003694235, 0.16924315041219085, 0.1411753088357891, 0.8424463200747517, 0.8909556947716907, 0.1984012555098983, 0.8972989795226016, 0.14124256087282594, 0.16771262340147297, 0.16876829372476676, 0.6218224800445995, 0.3995808528816106, 0.8817814022438057, 0.20724324729293586, 0.20782175689084914, 0.16296163295799138, 0.20752640011537493, 0.21009934569426925, 0.26262246823777624, 0.2535757146077815, 0.19307009083076843, 0.2526872841703177, 0.2033705378986812, 0.2061697894603134, 0.2023408612325195, 0.2313487893168097, 0.2039901716075121, 0.22799061692697198, 0.08161395022899431, 0.10032464339846847, 0.09823994265233849, 0.09654318011540142, 0.09669926462392797, 0.09323111080625057, 0.08593182438876501, 0.09392554846450474, 0.0887055894888501]}, "mutation_prompt": null}
