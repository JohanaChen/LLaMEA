{"id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "solution": "import numpy as np\n\nclass AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales based on the best solution and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using best solution\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "AOWO_DR", "description": "Adaptive Oppositional Whale Optimization with Dimensionality Reduction (AOWO-DR) leverages the social behavior of humpback whales, oppositional-based learning, and a dimensionality reduction mechanism to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.20937144382867712, "feedback": "The algorithm AOWO_DR got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": null, "metadata": {"aucs": [0.591724055581705, 0.5888854405739787, 0.5815627877990599, 0.48556147056001386, 0.4588753591941307, 0.49933922504557193, 0.5064805458970374, 0.5115225161079471, 0.6128194019015444, 0.07655149676086914, 0.1705198558437263, 0.09709483688106557, 0.2551102525929616, 0.3598936032766641, 0.20500884316350265, 0.09548832093021664, 0.10368167042314957, 0.18145969789556582, 0.25664323312330994, 0.1973519740555414, 0.21884930429094174, 0.1728912450356056, 0.1191081921131768, 0.17992868563006015, 0.11844041281959217, 0.11481499606334367, 0.11841261935030412, 0.2431059898407939, 0.06334149853209858, 0.19841261915519004, 0.12653792756985238, 0.11799658970127225, 0.15369070158933207, 0.1145543346118979, 0.11421262252330122, 0.1430172903824759, 0.8811953914513992, 0.9149530691289595, 0.8874416098327507, 0.8705871553784028, 0.8729791730907457, 0.9004556130689487, 0.8713509257383647, 0.8855825540370998, 0.9027744471317066, 0.17225563883219053, 0.19860802789908372, 0.22355440044146213, 0.26563771251960866, 0.18502681160632828, 0.21659999010646047, 0.25681250900812747, 0.212456890443257, 0.2036542301159242, 0.17312647398794012, 0.16086854613960988, 0.14674028462346655, 0.21255078662408533, 0.1446941749959647, 0.21228747125690972, 0.15285082365172364, 0.19595251771464206, 0.14551644075432302, 0.1863663405752246, 0.12367107789864917, 0.14853875852822296, 0.10172640370061414, 0.19441407934927024, 0.1896638998598531, 0.3257712361105004, 0.18744058191896507, 0.20498854363750219, 0.19428517362004172, 0.040053559903420854, 0.14144077124637155, 0.16557775993445956, 0.15404451715822032, 0.1574269177394686, 0.21189864033445682, 0.12473146456981954, 0.10292028112191387, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004583025636561988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041778980989396364, 0.06539130732609078, 0.03515733000157251, 0.09245331933222056, 0.0744959757779301, 0.022355365269725702, 0.02280968365670999, 0.14570567044479232, 0.06330678025932124, 0.04220528978471216, 0.025880442087852118, 0.08506633264000052, 0.06815582826679478, 0.02239032795125062, 0.058883332694470436, 0.09885646677812143, 0.059083585967512176, 0.07239411775999505, 0.016084629331720723, 0.06297734719637915, 0.14636494050419657, 0.06457463944762931, 0.08112755784994752, 0.07893420938314444, 0.08151034792260836, 0.11333430244560228, 0.07542975533767116, 0.07344976647123624, 0.37447993802724544, 0.3813653639216483, 0.40526294952639796, 0.37734517890242036, 0.3912170447753395, 0.3847309525271072, 0.3934625551172414, 0.40204917634079507, 0.41943462944401533, 0.04690194384483859, 0.02819076538185561, 0.053050547461841235, 0.08299847148292827, 0.031733234023877954, 0.07849863241139776, 0.09507839478669988, 0.07928208679984416, 0.08119138495325062, 0.17666681185377708, 0.1655574724639347, 0.16824676366685276, 0.17558684795236545, 0.22429303035226633, 0.12543516045165504, 0.14479779217459032, 0.18169189119126306, 0.20868600806654924, 0.16489176265082628, 0.2285254656604725, 0.18036857758810643, 0.18965160578067275, 0.17428967210511404, 0.28443193360810526, 0.26041064882848075, 0.2672147352192885, 0.18261545222683584, 0.16390819463485462, 0.138569869197669, 0.12989011717689336, 0.1694165196778995, 0.1844347391228075, 0.2709869547366591, 0.20781343985869616, 0.14150857646463333, 0.14242733160667054, 0.222933393934575, 0.18302890400886274, 0.20712069551744017, 0.19620580721171377, 0.21238967131120523, 0.1902018529085443, 0.2130323124542287, 0.2804924205648466, 0.23346863250674643, 0.1890103691954037, 0.17189138400356518, 0.19651220077902054, 0.17363041212301544, 0.20403668159159483, 0.1880076430641957, 0.1748460200948897, 0.18109097539958685, 0.24442972236531524, 0.31154229675874145, 0.13116896225146424, 0.2397274218428599, 0.6124055618269812, 0.19866729902475455, 0.19562475807435653, 0.1335314021677847, 0.16705284248369956, 0.608161221263253, 0.41138984909190623, 0.1519675422338651, 0.2013735500678694, 0.22914011643271992, 0.26557829082260054, 0.20416129295654561, 0.12946758458018826, 0.12816687830746543, 0.23783038894276176, 0.18175065596514872, 0.20148890772162553, 0.1818598409600356, 0.1744379056642028, 0.23008494717120054, 0.2014350578077132, 0.21038459504999152, 0.1794984546148891, 0.1894324659650578, 0.09946092927658357, 0.06021276336084669, 0.06412043465986461, 0.07748400837305924, 0.06941637641495113, 0.06582931601484565, 0.05643493288657264, 0.08321480453792152, 0.0541292592929733]}, "mutation_prompt": null}
{"id": "247cffa8-b58a-4804-af5f-cfb3eaeff558", "solution": "import numpy as np\n\nclass AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales based on the best solution and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using best solution\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "AOWO_DR", "description": "Adaptive Oppositional Whale Optimization with Dimensionality Reduction (AOWO-DR) leverages the social behavior of humpback whales, oppositional-based learning, and a dimensionality reduction mechanism to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.591724055581705, 0.5888854405739787, 0.5815627877990599, 0.48556147056001386, 0.4588753591941307, 0.49933922504557193, 0.5064805458970374, 0.5115225161079471, 0.6128194019015444, 0.07655149676086914, 0.1705198558437263, 0.09709483688106557, 0.2551102525929616, 0.3598936032766641, 0.20500884316350265, 0.09548832093021664, 0.10368167042314957, 0.18145969789556582, 0.25664323312330994, 0.1973519740555414, 0.21884930429094174, 0.1728912450356056, 0.1191081921131768, 0.17992868563006015, 0.11844041281959217, 0.11481499606334367, 0.11841261935030412, 0.2431059898407939, 0.06334149853209858, 0.19841261915519004, 0.12653792756985238, 0.11799658970127225, 0.15369070158933207, 0.1145543346118979, 0.11421262252330122, 0.1430172903824759, 0.8811953914513992, 0.9149530691289595, 0.8874416098327507, 0.8705871553784028, 0.8729791730907457, 0.9004556130689487, 0.8713509257383647, 0.8855825540370998, 0.9027744471317066, 0.17225563883219053, 0.19860802789908372, 0.22355440044146213, 0.26563771251960866, 0.18502681160632828, 0.21659999010646047, 0.25681250900812747, 0.212456890443257, 0.2036542301159242, 0.17312647398794012, 0.16086854613960988, 0.14674028462346655, 0.21255078662408533, 0.1446941749959647, 0.21228747125690972, 0.15285082365172364, 0.19595251771464206, 0.14551644075432302, 0.1863663405752246, 0.12367107789864917, 0.14853875852822296, 0.10172640370061414, 0.19441407934927024, 0.1896638998598531, 0.3257712361105004, 0.18744058191896507, 0.20498854363750219, 0.19428517362004172, 0.040053559903420854, 0.14144077124637155, 0.16557775993445956, 0.15404451715822032, 0.1574269177394686, 0.21189864033445682, 0.12473146456981954, 0.10292028112191387, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004583025636561988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041778980989396364, 0.06539130732609078, 0.03515733000157251, 0.09245331933222056, 0.0744959757779301, 0.022355365269725702, 0.02280968365670999, 0.14570567044479232, 0.06330678025932124, 0.04220528978471216, 0.025880442087852118, 0.08506633264000052, 0.06815582826679478, 0.02239032795125062, 0.058883332694470436, 0.09885646677812143, 0.059083585967512176, 0.07239411775999505, 0.016084629331720723, 0.06297734719637915, 0.14636494050419657, 0.06457463944762931, 0.08112755784994752, 0.07893420938314444, 0.08151034792260836, 0.11333430244560228, 0.07542975533767116, 0.07344976647123624, 0.37447993802724544, 0.3813653639216483, 0.40526294952639796, 0.37734517890242036, 0.3912170447753395, 0.3847309525271072, 0.3934625551172414, 0.40204917634079507, 0.41943462944401533, 0.04690194384483859, 0.02819076538185561, 0.053050547461841235, 0.08299847148292827, 0.031733234023877954, 0.07849863241139776, 0.09507839478669988, 0.07928208679984416, 0.08119138495325062, 0.17666681185377708, 0.1655574724639347, 0.16824676366685276, 0.17558684795236545, 0.22429303035226633, 0.12543516045165504, 0.14479779217459032, 0.18169189119126306, 0.20868600806654924, 0.16489176265082628, 0.2285254656604725, 0.18036857758810643, 0.18965160578067275, 0.17428967210511404, 0.28443193360810526, 0.26041064882848075, 0.2672147352192885, 0.18261545222683584, 0.16390819463485462, 0.138569869197669, 0.12989011717689336, 0.1694165196778995, 0.1844347391228075, 0.2709869547366591, 0.20781343985869616, 0.14150857646463333, 0.14242733160667054, 0.222933393934575, 0.18302890400886274, 0.20712069551744017, 0.19620580721171377, 0.21238967131120523, 0.1902018529085443, 0.2130323124542287, 0.2804924205648466, 0.23346863250674643, 0.1890103691954037, 0.17189138400356518, 0.19651220077902054, 0.17363041212301544, 0.20403668159159483, 0.1880076430641957, 0.1748460200948897, 0.18109097539958685, 0.24442972236531524, 0.31154229675874145, 0.13116896225146424, 0.2397274218428599, 0.6124055618269812, 0.19866729902475455, 0.19562475807435653, 0.1335314021677847, 0.16705284248369956, 0.608161221263253, 0.41138984909190623, 0.1519675422338651, 0.2013735500678694, 0.22914011643271992, 0.26557829082260054, 0.20416129295654561, 0.12946758458018826, 0.12816687830746543, 0.23783038894276176, 0.18175065596514872, 0.20148890772162553, 0.1818598409600356, 0.1744379056642028, 0.23008494717120054, 0.2014350578077132, 0.21038459504999152, 0.1794984546148891, 0.1894324659650578, 0.09946092927658357, 0.06021276336084669, 0.06412043465986461, 0.07748400837305924, 0.06941637641495113, 0.06582931601484565, 0.05643493288657264, 0.08321480453792152, 0.0541292592929733]}, "mutation_prompt": null}
{"id": "6a12c4d0-ca65-480e-aa61-5ab2851ed626", "solution": "import numpy as np\n\nclass AOWO_EDR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def adaptive_mutation(self, solution, evaluations):\n        mutation_rate = (1 - evaluations / self.budget) * 0.1\n        mutation_vector = np.random.uniform(-mutation_rate, mutation_rate, self.dim)\n        return np.clip(solution + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Dynamically adjust population size\n            self.population_size = self.initial_population_size + int((self.budget - evaluations) / (2 * self.dim))\n            self.whales = self.whales[:self.population_size]\n\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales based on the best solution and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using best solution\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n\n                # Apply adaptive mutation\n                self.whales[i] = self.adaptive_mutation(self.whales[i], evaluations)\n\n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "AOWO_EDR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dimensionality Reduction (AOWO-EDR) introduces dynamic population resizing and adaptive mutation to improve exploration and exploitation balance.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 30 is out of bounds for axis 0 with size 30').", "error": "IndexError('index 30 is out of bounds for axis 0 with size 30')", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {}, "mutation_prompt": null}
{"id": "3be77642-43a5-4819-8e4c-7d2ae5633cc3", "solution": "import numpy as np\n\nclass AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n    \n    def crossover(self, target, donor):\n        cr = 0.9\n        mask = np.random.rand(self.dim) < cr\n        return np.where(mask, donor, target)\n\n    def __call__(self, func):\n        evaluations = 0\n        F = 0.5  # Differential weight\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            reduction_factor = 1 - (evaluations / self.budget)\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                r1, r2 = np.random.choice(self.population_size, 2, replace=False)\n                donor_vector = self.whales[r1] + F * (self.whales[r2] - self.whales[i])\n                donor_vector = np.clip(donor_vector, self.lower_bound, self.upper_bound)\n                trial_vector = self.crossover(self.whales[i], donor_vector)\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - trial_vector)\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = trial_vector - A * D\n                else:\n                    opp_solution = self.oppositional_solution(trial_vector)\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - trial_vector)\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "AOWO_DR", "description": "Enhanced AOWO-DR with Differential Evolution-inspired crossover and adaptive exploration to improve convergence speed and solution quality.", "configspace": "", "generation": 3, "fitness": 0.19972710026570953, "feedback": "The algorithm AOWO_DR got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.47822799265534055, 0.4904929820884153, 0.5312316325667221, 0.4485150683383681, 0.447919265618117, 0.45478802790482065, 0.4828939180255909, 0.486037159984841, 0.4366837370298913, 0.13941413968548444, 0.1201475029171385, 0.17742693815299648, 0.15031410238041354, 0.17325851384989166, 0.2776330316523373, 9.999999999998899e-05, 0.03589548803586018, 0.235029580738355, 0.09215664895906994, 0.17980231824104143, 0.24692792090232596, 0.15742093829799286, 0.1767150578072788, 0.14667778462883285, 0.18999975400932578, 0.16815973781866977, 0.2707641294935106, 0.207199146175991, 0.07212625296586062, 0.2191344075714382, 0.16254816963507057, 0.13240181265133977, 0.11554001218622267, 0.1486212006776666, 0.11408229445663054, 0.12521722479172515, 0.8897156925287282, 0.9273420004488072, 0.8694936220356111, 0.8939099326367311, 0.9079096663826862, 0.8877411709363362, 0.8503418126743061, 0.8920518727133684, 0.9062983529027898, 0.13020796879194674, 0.17074359669790407, 0.21707662284501317, 0.17838851312457993, 0.1873844967620979, 0.24708224784769084, 0.2424278897977522, 0.1966425254140005, 0.17074345453404183, 0.18317998775946986, 0.15276588282519354, 0.12934136305815214, 0.2080948519838829, 0.34404142210474464, 0.20407884448726032, 0.15771553699453655, 0.16816761329073648, 0.15352861595303624, 0.25794308384811704, 0.20411484845198724, 0.20736704947729712, 0.1834398401782138, 0.20857655000148656, 0.15502883351991603, 0.19799833048188087, 0.1770717845592713, 0.1612518399916415, 0.20214503087461133, 0.074320064709822, 0.23160069631563796, 0.16977906947011834, 0.11887387334528499, 0.173071441725681, 0.09273581695549549, 0.06613534487135386, 0.1529835418087363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018983253958674284, 0.057559572675300874, 0.047861740619031146, 0.06175282372645019, 0.07105031855618837, 0.006769595583722698, 0.02345519644945271, 0.1467536005224076, 0.06923677617230928, 0.08649961388351424, 9.999999999998899e-05, 0.11824416993178388, 0.09827353573768838, 9.999999999998899e-05, 0.02361086325253059, 0.06421130087151983, 0.02332542905550783, 9.999999999998899e-05, 9.999999999998899e-05, 0.09980431701800208, 0.06572859166712974, 0.03645507760610622, 0.1243637955984015, 0.12380411537340097, 0.08397096619807654, 0.0799224596260164, 0.06772470294241506, 0.07788986401544429, 0.3561384215702873, 0.42700033558913175, 0.36721152067871765, 0.3567788913896053, 0.37524128331598927, 0.3006498959668015, 0.3813025122475968, 0.3523139644397857, 0.3463103693447942, 0.0637474795974805, 0.03395856752838733, 0.08364762624261513, 0.08928828776555142, 0.028980726166842552, 0.08462298637714505, 0.03464817995546343, 0.0961427719712099, 0.08215416273915122, 0.1556519162271054, 0.19889234278879275, 0.15805028353296124, 0.23344741313985184, 0.15773674127650938, 0.1410854109437507, 0.13883376441062023, 0.1773225983520621, 0.1428334055601148, 0.1714002714072771, 0.2664807479339171, 0.16932676694063453, 0.180385604645672, 0.25719873771272606, 0.18349970444533625, 0.19108848937590872, 0.28014179464542033, 0.246804061007724, 0.15953713865741448, 0.13341117205550368, 0.1141188598220102, 0.1524439909351637, 0.1308219286372343, 0.14047151285537984, 0.20760436044595298, 0.1565286908745318, 0.13861054025731667, 0.21118649682285695, 0.18862221710528881, 0.1848029913490734, 0.25363488555165503, 0.21679273266298538, 0.18113169508049975, 0.20412081707364327, 0.224137864444245, 0.22735632822223772, 0.16936396851997693, 0.2028373333018616, 0.21916993967200438, 0.19006938560525588, 0.19253844845424406, 0.17998187779226282, 0.18577141343327952, 0.17802168505862503, 0.20433860405083393, 0.14427993545282114, 0.13444208461663165, 0.14888984695710117, 0.4749098055076282, 0.19916943337818815, 0.19764672116820792, 0.11323014128788167, 0.16856517172889673, 0.4046861226071372, 0.3719069955650919, 0.1539064369760086, 0.18241769637731642, 0.2568972593151162, 0.23990565331215685, 0.1988270975035682, 0.12340528985589894, 0.12560742713581607, 0.200244643065007, 0.1821263772822327, 0.20021859473839954, 0.1684190306931328, 0.18551308537956357, 0.18819642040716633, 0.22813312580403755, 0.20181580087948847, 0.18994659766036315, 0.19602771031791744, 0.11121783826133957, 0.05575531278098711, 0.06142292108918923, 0.0693259999484811, 0.06654811291421903, 0.07880590964016232, 0.07080058347492846, 0.06650420608279217, 0.05278518020049705]}, "mutation_prompt": null}
{"id": "b3847b53-db28-4840-87d9-a681dcea25b7", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = self.quantum_init_population()\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def quantum_init_population(self):\n        # Quantum-inspired initialization\n        return np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound) + self.lower_bound\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def stochastic_tunneling(self, fitness):\n        # Stochastic tunneling transformation\n        transformed_fitness = np.exp(-fitness / self.best_fitness if self.best_fitness != 0 else 1)\n        return transformed_fitness\n    \n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Apply stochastic tunneling for fitness scaling\n            transformed_fitness = self.stochastic_tunneling(fitness)\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(transformed_fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales based on the best solution and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using best solution\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n\n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced AOWO-DR with Quantum-Inspired Initialization introduces quantum-inspired initialization and stochastic tunneling to improve exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": 0.08452812028813074, "feedback": "The algorithm Enhanced_AOWO_DR got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.10.", "error": "", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.1253140484759575, 0.13502264843793965, 0.1366500584066649, 0.08982158139606577, 0.08740237041127552, 0.07820065526325581, 0.5411887476566684, 0.522123927549075, 0.5274737173792876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1560289179955564, 0.02678058075136447, 0.28707535545209795, 0.011028923216435893, 0.01096189037431794, 0.008205271539781789, 0.018248263482334326, 0.019880161678554553, 0.011185642979543942, 0.12169502414370692, 0.025974154437641617, 0.19635471093017443, 0.021082388329235036, 0.006192730869141849, 0.015502578754716168, 0.006068990697704391, 0.007154662360919439, 0.004278245146119519, 0.045179741609489454, 0.06277725831455405, 0.04287777107098589, 0.053340261193588256, 0.0713364061866647, 0.037428727900089886, 0.0638860334912611, 0.07782546217173225, 0.0392018832149682, 0.02128958578914031, 0.05380856338796891, 0.0006180981746792824, 0.03827358933648006, 0.05534126465365241, 0.02190918376478146, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.12591768231658484, 0.08328589745990844, 0.12242589525557035, 0.07022671012875237, 0.07108915925705572, 0.01251319416065122, 0.07979682403403532, 0.06090444515573035, 0.038405168263756395, 9.999999999998899e-05, 0.0018599474761725743, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003348887176687687, 9.999999999998899e-05, 0.0341633909870932, 0.007995006849019437, 0.03264717655943061, 0.04203308452480181, 0.007814717389955317, 0.051937894383038974, 0.06143127984749408, 0.005157616372668428, 0.030853989003409854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05452254476185936, 0.02908922210023701, 0.07929166505646645, 0.06502166387822639, 0.04443215122350852, 0.04454959703684913, 0.14060505216131658, 0.04330762338851213, 0.05495779658296307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14034594116322585, 0.17004026155293073, 0.35677455883281806, 0.41487163453569964, 0.35043936700845135, 0.11610351756129456, 0.18202263504032357, 0.16901422929200216, 0.1597781462161305, 0.00037733547392559963, 0.010639248992905581, 9.999999999998899e-05, 0.01515919044033509, 0.040493250018914795, 0.01759993274736349, 0.01766422647236854, 0.03438709761639036, 0.02755333894577927, 0.10659227569131435, 0.10415283944118436, 0.17894387030004621, 0.18775776885899398, 0.15956728010695187, 0.1896499981959877, 0.10438422511441836, 0.11428659380579265, 0.1260791291988167, 0.16193215316705922, 0.10943865685428533, 0.14657581448085943, 0.18489813977213332, 0.15528275884001164, 0.1699526272641857, 0.14032918184157772, 0.17377774300845283, 0.1393556390881867, 0.06223515609589536, 0.06122975158449462, 0.07042196864967043, 0.12613048592705767, 0.10153695209316815, 0.1134373283997826, 0.08605364249722225, 0.0997711199450243, 0.08549751445778675, 0.24114264115314943, 0.18348180991288554, 0.22972231836413926, 0.18931582910178069, 0.13550767179603385, 0.18863360178045774, 0.19444440452382827, 0.12757901180706044, 0.16525269917469465, 0.14238327086217228, 0.15116992953793196, 0.11753276431219206, 0.09683608051848569, 0.10412449313254912, 0.06649824741490962, 0.1440242336348716, 0.09562484349850742, 0.12502912440135183, 0.1055333208037944, 0.11006284918032394, 0.10525107301275771, 0.08186943701065341, 0.1640591233073979, 0.09124717653170189, 0.1066876016253182, 0.16600949869874926, 0.10721573439370824, 0.406550274745317, 0.14527224717565534, 0.31424968665569775, 0.06101967101150019, 0.08839911798460198, 0.059667908553336035, 0.1074806172757693, 0.1126062353958247, 0.10400270464340955, 0.1801731066845419, 0.17089094420288675, 0.1838737021432194, 0.1746946862930876, 0.17114893694822664, 0.17547172154954027, 0.1733312609404586, 0.18536547109871382, 0.17950978513060767, 0.05673080833263988, 0.03203353880001358, 0.049272335871870965, 0.058604294279436364, 0.048394958018785794, 0.05467722946920517, 0.06078825565726853, 0.03480915419417141, 0.05281331823597479]}, "mutation_prompt": null}
{"id": "5e3ae101-7f8d-4bb8-95a5-6b942e7539dd", "solution": "import numpy as np\n\nclass AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales based on the best solution and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using best solution\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "AOWO_DR", "description": "Adaptive Oppositional Whale Optimization with Dimensionality Reduction (AOWO-DR) leverages the social behavior of humpback whales, oppositional-based learning, and a dimensionality reduction mechanism to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.591724055581705, 0.5888854405739787, 0.5815627877990599, 0.48556147056001386, 0.4588753591941307, 0.49933922504557193, 0.5064805458970374, 0.5115225161079471, 0.6128194019015444, 0.07655149676086914, 0.1705198558437263, 0.09709483688106557, 0.2551102525929616, 0.3598936032766641, 0.20500884316350265, 0.09548832093021664, 0.10368167042314957, 0.18145969789556582, 0.25664323312330994, 0.1973519740555414, 0.21884930429094174, 0.1728912450356056, 0.1191081921131768, 0.17992868563006015, 0.11844041281959217, 0.11481499606334367, 0.11841261935030412, 0.2431059898407939, 0.06334149853209858, 0.19841261915519004, 0.12653792756985238, 0.11799658970127225, 0.15369070158933207, 0.1145543346118979, 0.11421262252330122, 0.1430172903824759, 0.8811953914513992, 0.9149530691289595, 0.8874416098327507, 0.8705871553784028, 0.8729791730907457, 0.9004556130689487, 0.8713509257383647, 0.8855825540370998, 0.9027744471317066, 0.17225563883219053, 0.19860802789908372, 0.22355440044146213, 0.26563771251960866, 0.18502681160632828, 0.21659999010646047, 0.25681250900812747, 0.212456890443257, 0.2036542301159242, 0.17312647398794012, 0.16086854613960988, 0.14674028462346655, 0.21255078662408533, 0.1446941749959647, 0.21228747125690972, 0.15285082365172364, 0.19595251771464206, 0.14551644075432302, 0.1863663405752246, 0.12367107789864917, 0.14853875852822296, 0.10172640370061414, 0.19441407934927024, 0.1896638998598531, 0.3257712361105004, 0.18744058191896507, 0.20498854363750219, 0.19428517362004172, 0.040053559903420854, 0.14144077124637155, 0.16557775993445956, 0.15404451715822032, 0.1574269177394686, 0.21189864033445682, 0.12473146456981954, 0.10292028112191387, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004583025636561988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041778980989396364, 0.06539130732609078, 0.03515733000157251, 0.09245331933222056, 0.0744959757779301, 0.022355365269725702, 0.02280968365670999, 0.14570567044479232, 0.06330678025932124, 0.04220528978471216, 0.025880442087852118, 0.08506633264000052, 0.06815582826679478, 0.02239032795125062, 0.058883332694470436, 0.09885646677812143, 0.059083585967512176, 0.07239411775999505, 0.016084629331720723, 0.06297734719637915, 0.14636494050419657, 0.06457463944762931, 0.08112755784994752, 0.07893420938314444, 0.08151034792260836, 0.11333430244560228, 0.07542975533767116, 0.07344976647123624, 0.37447993802724544, 0.3813653639216483, 0.40526294952639796, 0.37734517890242036, 0.3912170447753395, 0.3847309525271072, 0.3934625551172414, 0.40204917634079507, 0.41943462944401533, 0.04690194384483859, 0.02819076538185561, 0.053050547461841235, 0.08299847148292827, 0.031733234023877954, 0.07849863241139776, 0.09507839478669988, 0.07928208679984416, 0.08119138495325062, 0.17666681185377708, 0.1655574724639347, 0.16824676366685276, 0.17558684795236545, 0.22429303035226633, 0.12543516045165504, 0.14479779217459032, 0.18169189119126306, 0.20868600806654924, 0.16489176265082628, 0.2285254656604725, 0.18036857758810643, 0.18965160578067275, 0.17428967210511404, 0.28443193360810526, 0.26041064882848075, 0.2672147352192885, 0.18261545222683584, 0.16390819463485462, 0.138569869197669, 0.12989011717689336, 0.1694165196778995, 0.1844347391228075, 0.2709869547366591, 0.20781343985869616, 0.14150857646463333, 0.14242733160667054, 0.222933393934575, 0.18302890400886274, 0.20712069551744017, 0.19620580721171377, 0.21238967131120523, 0.1902018529085443, 0.2130323124542287, 0.2804924205648466, 0.23346863250674643, 0.1890103691954037, 0.17189138400356518, 0.19651220077902054, 0.17363041212301544, 0.20403668159159483, 0.1880076430641957, 0.1748460200948897, 0.18109097539958685, 0.24442972236531524, 0.31154229675874145, 0.13116896225146424, 0.2397274218428599, 0.6124055618269812, 0.19866729902475455, 0.19562475807435653, 0.1335314021677847, 0.16705284248369956, 0.608161221263253, 0.41138984909190623, 0.1519675422338651, 0.2013735500678694, 0.22914011643271992, 0.26557829082260054, 0.20416129295654561, 0.12946758458018826, 0.12816687830746543, 0.23783038894276176, 0.18175065596514872, 0.20148890772162553, 0.1818598409600356, 0.1744379056642028, 0.23008494717120054, 0.2014350578077132, 0.21038459504999152, 0.1794984546148891, 0.1894324659650578, 0.09946092927658357, 0.06021276336084669, 0.06412043465986461, 0.07748400837305924, 0.06941637641495113, 0.06582931601484565, 0.05643493288657264, 0.08321480453792152, 0.0541292592929733]}, "mutation_prompt": null}
{"id": "5ebb7d2f-7045-420d-b729-f6327454fa02", "solution": "import numpy as np\n\nclass AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales based on the best solution and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using best solution\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "AOWO_DR", "description": "Adaptive Oppositional Whale Optimization with Dimensionality Reduction (AOWO-DR) leverages the social behavior of humpback whales, oppositional-based learning, and a dimensionality reduction mechanism to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.591724055581705, 0.5888854405739787, 0.5815627877990599, 0.48556147056001386, 0.4588753591941307, 0.49933922504557193, 0.5064805458970374, 0.5115225161079471, 0.6128194019015444, 0.07655149676086914, 0.1705198558437263, 0.09709483688106557, 0.2551102525929616, 0.3598936032766641, 0.20500884316350265, 0.09548832093021664, 0.10368167042314957, 0.18145969789556582, 0.25664323312330994, 0.1973519740555414, 0.21884930429094174, 0.1728912450356056, 0.1191081921131768, 0.17992868563006015, 0.11844041281959217, 0.11481499606334367, 0.11841261935030412, 0.2431059898407939, 0.06334149853209858, 0.19841261915519004, 0.12653792756985238, 0.11799658970127225, 0.15369070158933207, 0.1145543346118979, 0.11421262252330122, 0.1430172903824759, 0.8811953914513992, 0.9149530691289595, 0.8874416098327507, 0.8705871553784028, 0.8729791730907457, 0.9004556130689487, 0.8713509257383647, 0.8855825540370998, 0.9027744471317066, 0.17225563883219053, 0.19860802789908372, 0.22355440044146213, 0.26563771251960866, 0.18502681160632828, 0.21659999010646047, 0.25681250900812747, 0.212456890443257, 0.2036542301159242, 0.17312647398794012, 0.16086854613960988, 0.14674028462346655, 0.21255078662408533, 0.1446941749959647, 0.21228747125690972, 0.15285082365172364, 0.19595251771464206, 0.14551644075432302, 0.1863663405752246, 0.12367107789864917, 0.14853875852822296, 0.10172640370061414, 0.19441407934927024, 0.1896638998598531, 0.3257712361105004, 0.18744058191896507, 0.20498854363750219, 0.19428517362004172, 0.040053559903420854, 0.14144077124637155, 0.16557775993445956, 0.15404451715822032, 0.1574269177394686, 0.21189864033445682, 0.12473146456981954, 0.10292028112191387, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004583025636561988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041778980989396364, 0.06539130732609078, 0.03515733000157251, 0.09245331933222056, 0.0744959757779301, 0.022355365269725702, 0.02280968365670999, 0.14570567044479232, 0.06330678025932124, 0.04220528978471216, 0.025880442087852118, 0.08506633264000052, 0.06815582826679478, 0.02239032795125062, 0.058883332694470436, 0.09885646677812143, 0.059083585967512176, 0.07239411775999505, 0.016084629331720723, 0.06297734719637915, 0.14636494050419657, 0.06457463944762931, 0.08112755784994752, 0.07893420938314444, 0.08151034792260836, 0.11333430244560228, 0.07542975533767116, 0.07344976647123624, 0.37447993802724544, 0.3813653639216483, 0.40526294952639796, 0.37734517890242036, 0.3912170447753395, 0.3847309525271072, 0.3934625551172414, 0.40204917634079507, 0.41943462944401533, 0.04690194384483859, 0.02819076538185561, 0.053050547461841235, 0.08299847148292827, 0.031733234023877954, 0.07849863241139776, 0.09507839478669988, 0.07928208679984416, 0.08119138495325062, 0.17666681185377708, 0.1655574724639347, 0.16824676366685276, 0.17558684795236545, 0.22429303035226633, 0.12543516045165504, 0.14479779217459032, 0.18169189119126306, 0.20868600806654924, 0.16489176265082628, 0.2285254656604725, 0.18036857758810643, 0.18965160578067275, 0.17428967210511404, 0.28443193360810526, 0.26041064882848075, 0.2672147352192885, 0.18261545222683584, 0.16390819463485462, 0.138569869197669, 0.12989011717689336, 0.1694165196778995, 0.1844347391228075, 0.2709869547366591, 0.20781343985869616, 0.14150857646463333, 0.14242733160667054, 0.222933393934575, 0.18302890400886274, 0.20712069551744017, 0.19620580721171377, 0.21238967131120523, 0.1902018529085443, 0.2130323124542287, 0.2804924205648466, 0.23346863250674643, 0.1890103691954037, 0.17189138400356518, 0.19651220077902054, 0.17363041212301544, 0.20403668159159483, 0.1880076430641957, 0.1748460200948897, 0.18109097539958685, 0.24442972236531524, 0.31154229675874145, 0.13116896225146424, 0.2397274218428599, 0.6124055618269812, 0.19866729902475455, 0.19562475807435653, 0.1335314021677847, 0.16705284248369956, 0.608161221263253, 0.41138984909190623, 0.1519675422338651, 0.2013735500678694, 0.22914011643271992, 0.26557829082260054, 0.20416129295654561, 0.12946758458018826, 0.12816687830746543, 0.23783038894276176, 0.18175065596514872, 0.20148890772162553, 0.1818598409600356, 0.1744379056642028, 0.23008494717120054, 0.2014350578077132, 0.21038459504999152, 0.1794984546148891, 0.1894324659650578, 0.09946092927658357, 0.06021276336084669, 0.06412043465986461, 0.07748400837305924, 0.06941637641495113, 0.06582931601484565, 0.05643493288657264, 0.08321480453792152, 0.0541292592929733]}, "mutation_prompt": null}
{"id": "7130aa06-14a6-41c0-8625-6b5cf4b7d277", "solution": "import numpy as np\n\nclass EAOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.initial_population_size + int((self.budget - evaluations) / (2 * self.initial_population_size))\n            self.whales = np.resize(self.whales, (self.population_size, self.dim))\n            self.whales[self.initial_population_size:] = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size - self.initial_population_size, self.dim))\n\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor and dynamic A adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n            adaptive_A = 2 * (1 - (evaluations / self.budget)) * np.random.rand(self.dim)\n\n            # Update whales based on the best solution and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using best solution\n                    D = np.abs(adaptive_A * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(adaptive_A * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "EAOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dimensionality Reduction (EAOWO-DR) introduces dynamic population size and adaptive exploration-exploitation balance to improve search efficiency.", "configspace": "", "generation": 7, "fitness": 0.17863858434568416, "feedback": "The algorithm EAOWO_DR got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.16.", "error": "", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.492866609026095, 0.4052770496387319, 0.339738239202497, 0.38644003780794733, 0.33833759519176443, 0.3366212884522687, 0.3841573627878795, 0.3246566513336193, 0.3523283039513537, 0.11934931078636724, 0.00029443894705039053, 0.018070859694603647, 0.11157381891608564, 0.05293726830920187, 0.08963792775833013, 0.006247546480656285, 0.03266818980267039, 0.06420164710923604, 0.08478439409769745, 0.10076176128515069, 0.12555674532930183, 0.12491036585976834, 0.12881635779973, 0.16335839069207247, 0.13725895373050012, 0.14076199953131197, 0.12298825315650852, 0.07090440274607879, 0.09783104954848276, 0.09311295954051979, 0.09773222685981287, 0.13572843693163528, 0.11296293436988813, 0.1595752658238323, 0.09252511164636801, 0.10814418825294092, 0.7906856248161067, 0.7578051883459425, 0.7338169470053556, 0.8179124434102281, 0.8376213661769014, 0.6935632904766502, 0.8225246281174894, 0.6689560038974774, 0.7829162326978097, 0.11554258752269086, 0.15374534773560355, 0.16564842870255525, 0.2714363630874813, 0.14763902562575626, 0.21048669001393994, 0.1462876508866362, 0.15477647296581654, 0.1754494617758512, 0.20545785742985867, 0.17887620698966333, 0.16762570663125043, 0.18324347393747353, 0.20185331441349064, 0.1096335103922591, 0.1532236423478951, 0.21862789811117422, 0.1827096446404246, 0.18284146561404035, 0.13853388323672333, 0.1193946334605176, 0.1321476113950264, 0.11139143557342945, 0.18698418558312446, 0.21383206051963966, 0.1083884043535499, 0.12486333811847894, 0.14959248449630358, 0.10873218227657921, 0.0318141891160294, 0.12946820119681524, 0.08981124459115364, 0.1138892643557019, 0.1222760275910516, 0.18804836126667712, 0.03129164771663728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028690614078349275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003116541186128363, 0.05319427224520046, 0.032697366140583495, 0.06721273119263094, 0.06772609314797395, 0.08960199376630285, 0.06653572176659905, 0.07118148712608596, 0.06521631418503893, 0.07165408080990943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07677793510946829, 0.04569330796994164, 0.04108948474882723, 0.06891936241268082, 0.053890044343013144, 0.052612631645221675, 0.05814522524675181, 0.054195464121523984, 0.05308208643941559, 0.3085575279411541, 0.320283562313581, 0.2918791423364784, 0.3479789512911915, 0.3079904361328647, 0.295438806389721, 0.3591188267362436, 0.34303925461963714, 0.3167014207596892, 0.07872098756853341, 0.07841563991944878, 0.0657415848650893, 0.08446152592736234, 0.050486232457785274, 0.0767954762912656, 0.07578028938551962, 0.06930018743105704, 0.09699178911783002, 0.1811595205438996, 0.1986098641467231, 0.17584603837200308, 0.1622821836731695, 0.22524896131949768, 0.15995739697041622, 0.20181870757829068, 0.12299621212853329, 0.14353696423249895, 0.19158778230715523, 0.197387270792443, 0.22565927618574333, 0.22408686089939633, 0.19914649303497323, 0.21271009467588353, 0.1927375502517088, 0.21441832123885984, 0.24710345822866886, 0.1511036486965993, 0.15720172075524697, 0.13070530234985422, 0.14638433499292025, 0.1871818846593829, 0.15928616628350634, 0.1559782137532889, 0.15655456060575235, 0.19295469212223249, 0.2333250498457261, 0.15994161357663872, 0.1728727785053945, 0.2297226578509015, 0.1855297030188804, 0.15566770311245293, 0.17374806911022656, 0.1919178075169069, 0.16919355254372426, 0.1630497331696441, 0.1760654824911344, 0.17825232269035807, 0.19037188864422938, 0.19764624408280396, 0.18368927727579498, 0.1772948524295792, 0.17139040103971237, 0.18191837755773876, 0.3869779321458833, 0.1859896446784337, 0.15817622248511343, 0.29066778915378366, 0.4815818622712048, 0.36963990502417277, 0.317674661898638, 0.31302553784318643, 0.4072830547716769, 0.33366362293049867, 0.17332295091100625, 0.38029004506195274, 0.20876426779310586, 0.16597915076329772, 0.16261147246965157, 0.23016898714044043, 0.25590774972189945, 0.22256962856108997, 0.2017694334885891, 0.19617944082077343, 0.19025935919793413, 0.18075652905456718, 0.20913266299546818, 0.18373582175432834, 0.18425410379874596, 0.203836894838617, 0.20040162798858696, 0.06904364735821311, 0.07151429282279675, 0.055292926067603054, 0.06760430646573112, 0.06394547313327581, 0.05493641247531855, 0.09298993647516762, 0.06816959674875012, 0.06757830211846727]}, "mutation_prompt": null}
{"id": "cc0cee13-e6f4-4a94-a9d2-1417c25bd544", "solution": "import numpy as np\n\nclass AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales based on the best solution and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using best solution\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "AOWO_DR", "description": "Adaptive Oppositional Whale Optimization with Dimensionality Reduction (AOWO-DR) leverages the social behavior of humpback whales, oppositional-based learning, and a dimensionality reduction mechanism to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.591724055581705, 0.5888854405739787, 0.5815627877990599, 0.48556147056001386, 0.4588753591941307, 0.49933922504557193, 0.5064805458970374, 0.5115225161079471, 0.6128194019015444, 0.07655149676086914, 0.1705198558437263, 0.09709483688106557, 0.2551102525929616, 0.3598936032766641, 0.20500884316350265, 0.09548832093021664, 0.10368167042314957, 0.18145969789556582, 0.25664323312330994, 0.1973519740555414, 0.21884930429094174, 0.1728912450356056, 0.1191081921131768, 0.17992868563006015, 0.11844041281959217, 0.11481499606334367, 0.11841261935030412, 0.2431059898407939, 0.06334149853209858, 0.19841261915519004, 0.12653792756985238, 0.11799658970127225, 0.15369070158933207, 0.1145543346118979, 0.11421262252330122, 0.1430172903824759, 0.8811953914513992, 0.9149530691289595, 0.8874416098327507, 0.8705871553784028, 0.8729791730907457, 0.9004556130689487, 0.8713509257383647, 0.8855825540370998, 0.9027744471317066, 0.17225563883219053, 0.19860802789908372, 0.22355440044146213, 0.26563771251960866, 0.18502681160632828, 0.21659999010646047, 0.25681250900812747, 0.212456890443257, 0.2036542301159242, 0.17312647398794012, 0.16086854613960988, 0.14674028462346655, 0.21255078662408533, 0.1446941749959647, 0.21228747125690972, 0.15285082365172364, 0.19595251771464206, 0.14551644075432302, 0.1863663405752246, 0.12367107789864917, 0.14853875852822296, 0.10172640370061414, 0.19441407934927024, 0.1896638998598531, 0.3257712361105004, 0.18744058191896507, 0.20498854363750219, 0.19428517362004172, 0.040053559903420854, 0.14144077124637155, 0.16557775993445956, 0.15404451715822032, 0.1574269177394686, 0.21189864033445682, 0.12473146456981954, 0.10292028112191387, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004583025636561988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041778980989396364, 0.06539130732609078, 0.03515733000157251, 0.09245331933222056, 0.0744959757779301, 0.022355365269725702, 0.02280968365670999, 0.14570567044479232, 0.06330678025932124, 0.04220528978471216, 0.025880442087852118, 0.08506633264000052, 0.06815582826679478, 0.02239032795125062, 0.058883332694470436, 0.09885646677812143, 0.059083585967512176, 0.07239411775999505, 0.016084629331720723, 0.06297734719637915, 0.14636494050419657, 0.06457463944762931, 0.08112755784994752, 0.07893420938314444, 0.08151034792260836, 0.11333430244560228, 0.07542975533767116, 0.07344976647123624, 0.37447993802724544, 0.3813653639216483, 0.40526294952639796, 0.37734517890242036, 0.3912170447753395, 0.3847309525271072, 0.3934625551172414, 0.40204917634079507, 0.41943462944401533, 0.04690194384483859, 0.02819076538185561, 0.053050547461841235, 0.08299847148292827, 0.031733234023877954, 0.07849863241139776, 0.09507839478669988, 0.07928208679984416, 0.08119138495325062, 0.17666681185377708, 0.1655574724639347, 0.16824676366685276, 0.17558684795236545, 0.22429303035226633, 0.12543516045165504, 0.14479779217459032, 0.18169189119126306, 0.20868600806654924, 0.16489176265082628, 0.2285254656604725, 0.18036857758810643, 0.18965160578067275, 0.17428967210511404, 0.28443193360810526, 0.26041064882848075, 0.2672147352192885, 0.18261545222683584, 0.16390819463485462, 0.138569869197669, 0.12989011717689336, 0.1694165196778995, 0.1844347391228075, 0.2709869547366591, 0.20781343985869616, 0.14150857646463333, 0.14242733160667054, 0.222933393934575, 0.18302890400886274, 0.20712069551744017, 0.19620580721171377, 0.21238967131120523, 0.1902018529085443, 0.2130323124542287, 0.2804924205648466, 0.23346863250674643, 0.1890103691954037, 0.17189138400356518, 0.19651220077902054, 0.17363041212301544, 0.20403668159159483, 0.1880076430641957, 0.1748460200948897, 0.18109097539958685, 0.24442972236531524, 0.31154229675874145, 0.13116896225146424, 0.2397274218428599, 0.6124055618269812, 0.19866729902475455, 0.19562475807435653, 0.1335314021677847, 0.16705284248369956, 0.608161221263253, 0.41138984909190623, 0.1519675422338651, 0.2013735500678694, 0.22914011643271992, 0.26557829082260054, 0.20416129295654561, 0.12946758458018826, 0.12816687830746543, 0.23783038894276176, 0.18175065596514872, 0.20148890772162553, 0.1818598409600356, 0.1744379056642028, 0.23008494717120054, 0.2014350578077132, 0.21038459504999152, 0.1794984546148891, 0.1894324659650578, 0.09946092927658357, 0.06021276336084669, 0.06412043465986461, 0.07748400837305924, 0.06941637641495113, 0.06582931601484565, 0.05643493288657264, 0.08321480453792152, 0.0541292592929733]}, "mutation_prompt": null}
{"id": "97818d62-b325-4c7f-b9a5-b49e5b01f458", "solution": "import numpy as np\n\nclass EOWO_AS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.population_size = self.initial_population_size\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def adaptive_population(self, evaluations):\n        # New dynamic population resizing strategy\n        self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales[:self.population_size]])\n            evaluations += self.population_size\n            \n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            # Update population size adaptively\n            self.adaptive_population(evaluations)\n            self.whales = self.whales[:self.population_size]\n\n            # Update whales based on the best solution and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using best solution\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "EOWO_AS", "description": "Enhanced Oppositional Whale Optimization with Adaptive Strategy (EOWO-AS) introduces dynamic population resizing and adaptive swarm intelligence to improve exploration and exploitation balance.", "configspace": "", "generation": 9, "fitness": 0.18627613192238404, "feedback": "The algorithm EOWO_AS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.3553785421857586, 0.36317857111965135, 0.3712531324259686, 0.2744195578674289, 0.3022685573046753, 0.2739782739779252, 0.31525569324407066, 0.3312324520773743, 0.3868504450833238, 0.007538933120614821, 9.999999999998899e-05, 0.008352409915385217, 0.08231338307976288, 0.0748343347322139, 0.08087332661380298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07198692575466281, 0.08885433043229529, 0.06417836981440872, 0.07939259603476201, 0.09210333642782331, 0.07390282033513451, 0.08919580396458948, 0.09706412508949325, 0.08827428879227339, 0.06175929887843945, 0.06791629037969893, 0.07819274144624977, 0.08329578072167709, 0.08172529200814738, 0.08267733666472654, 0.06269467519719552, 0.0844632555133783, 0.09039072458210307, 0.9630298341711927, 0.9759734753635422, 0.9681927596054257, 0.964795232380784, 0.9663831569501907, 0.9775952276297555, 0.9740278886034055, 0.9769439914963354, 0.9768171607814209, 0.15728952680650787, 0.04842093429246741, 0.18831070421668616, 0.1816281268841472, 0.18876319584655132, 0.1892732510441777, 0.19550567772376115, 0.13017946439235262, 0.14929220234129548, 0.29361409118922444, 0.1580661814354809, 0.22881636624731705, 0.20911477538707413, 0.20178315790895718, 0.1698664632139093, 0.23443358618759735, 0.14986910621075566, 0.2287504542808606, 0.18588193244609086, 0.14048026323860818, 0.1480511897710085, 0.11333146901994129, 0.11452044735941924, 0.02772737595606778, 0.09596115446443276, 0.10297025274443572, 0.14869839113851702, 0.1835873990162512, 0.16591234387685128, 0.22446660561954646, 0.16377273320285135, 0.20260942828322182, 0.16124901575628015, 0.23203131664133148, 0.16167554485787494, 0.21488440539434184, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03261217383320458, 0.04209452010495518, 0.05550586520414158, 0.08713405984554778, 0.1278790056619873, 0.11218612857438182, 0.0835450014776774, 0.026794213710591652, 0.05002574666210968, 0.08484995898896197, 0.08651575621592689, 0.09687813930268407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03776416359259416, 0.03779179830175894, 0.04094443862314634, 0.026886480272448332, 0.012174546344707604, 0.026969324224694335, 0.03903897582233673, 0.030964380315797846, 0.044848794203446785, 0.3168394665092643, 0.34154800432896704, 0.3489071313386135, 0.2744675182701787, 0.3293286631297401, 0.35013805962945155, 0.3378583185924596, 0.2973252903773166, 0.3801183558049994, 0.06890330728697847, 0.05491340397507971, 0.06772580794134209, 0.08199625182923287, 0.036007480020150306, 0.07301057055752791, 0.04639878822736865, 0.08517381307175875, 0.0793889144068991, 0.16303698627537155, 0.17268731849349284, 0.18221705475499916, 0.16487780745359537, 0.1959110817271521, 0.13958370769522666, 0.2130678656634355, 0.14880925444848803, 0.19043519191347136, 0.22388992931908547, 0.2310496492475843, 0.1898374138761314, 0.26141979876594545, 0.22368336528749777, 0.24881465799157898, 0.22874956836647553, 0.24105973688009086, 0.22831823292149933, 0.17081632871037822, 0.16277336811128718, 0.16283889260238216, 0.1499422453828705, 0.18225459956652135, 0.19939629405773818, 0.16806344974413767, 0.1586569847712872, 0.16861970837814788, 0.3163362329102567, 0.30414342179710563, 0.327706701074011, 0.2392658927618424, 0.27859681663196356, 0.22799034679361152, 0.2456424855571202, 0.35662326981762904, 0.21890349569280598, 0.1753328530806424, 0.16359430973409017, 0.19375081816565687, 0.17570089039053605, 0.1719680255768924, 0.17634047579593803, 0.1762560973701447, 0.17942411066856478, 0.17191423609540457, 0.16502159292298257, 0.16850377888610835, 0.14969559006943123, 0.41938854233525347, 0.19437600034556468, 0.19611313676063957, 0.1732534769407581, 0.1681451579298353, 0.1950566096389662, 0.4342568778452125, 0.34314996759890615, 0.49117531929424885, 0.27636286149451395, 0.18331672133696164, 0.1752701220989491, 0.21013223157541694, 0.2604766373261629, 0.189131226485744, 0.18684998894603555, 0.20596431830129536, 0.1804279038691824, 0.20080036196450513, 0.19274209422705668, 0.18229372603440042, 0.17224451523984552, 0.1959717981822251, 0.18575937495895256, 0.06935987277755085, 0.0830906481546494, 0.07631361731000874, 0.07511145705711775, 0.05682838919484434, 0.0674397232482592, 0.06079434215408819, 0.05890334222057991, 0.06592671544492112]}, "mutation_prompt": null}
{"id": "45e21c84-7444-487c-a5df-53b4dc3c05cc", "solution": "import numpy as np\n\nclass AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales based on the best solution and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using best solution\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "AOWO_DR", "description": "Adaptive Oppositional Whale Optimization with Dimensionality Reduction (AOWO-DR) leverages the social behavior of humpback whales, oppositional-based learning, and a dimensionality reduction mechanism to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.591724055581705, 0.5888854405739787, 0.5815627877990599, 0.48556147056001386, 0.4588753591941307, 0.49933922504557193, 0.5064805458970374, 0.5115225161079471, 0.6128194019015444, 0.07655149676086914, 0.1705198558437263, 0.09709483688106557, 0.2551102525929616, 0.3598936032766641, 0.20500884316350265, 0.09548832093021664, 0.10368167042314957, 0.18145969789556582, 0.25664323312330994, 0.1973519740555414, 0.21884930429094174, 0.1728912450356056, 0.1191081921131768, 0.17992868563006015, 0.11844041281959217, 0.11481499606334367, 0.11841261935030412, 0.2431059898407939, 0.06334149853209858, 0.19841261915519004, 0.12653792756985238, 0.11799658970127225, 0.15369070158933207, 0.1145543346118979, 0.11421262252330122, 0.1430172903824759, 0.8811953914513992, 0.9149530691289595, 0.8874416098327507, 0.8705871553784028, 0.8729791730907457, 0.9004556130689487, 0.8713509257383647, 0.8855825540370998, 0.9027744471317066, 0.17225563883219053, 0.19860802789908372, 0.22355440044146213, 0.26563771251960866, 0.18502681160632828, 0.21659999010646047, 0.25681250900812747, 0.212456890443257, 0.2036542301159242, 0.17312647398794012, 0.16086854613960988, 0.14674028462346655, 0.21255078662408533, 0.1446941749959647, 0.21228747125690972, 0.15285082365172364, 0.19595251771464206, 0.14551644075432302, 0.1863663405752246, 0.12367107789864917, 0.14853875852822296, 0.10172640370061414, 0.19441407934927024, 0.1896638998598531, 0.3257712361105004, 0.18744058191896507, 0.20498854363750219, 0.19428517362004172, 0.040053559903420854, 0.14144077124637155, 0.16557775993445956, 0.15404451715822032, 0.1574269177394686, 0.21189864033445682, 0.12473146456981954, 0.10292028112191387, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004583025636561988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041778980989396364, 0.06539130732609078, 0.03515733000157251, 0.09245331933222056, 0.0744959757779301, 0.022355365269725702, 0.02280968365670999, 0.14570567044479232, 0.06330678025932124, 0.04220528978471216, 0.025880442087852118, 0.08506633264000052, 0.06815582826679478, 0.02239032795125062, 0.058883332694470436, 0.09885646677812143, 0.059083585967512176, 0.07239411775999505, 0.016084629331720723, 0.06297734719637915, 0.14636494050419657, 0.06457463944762931, 0.08112755784994752, 0.07893420938314444, 0.08151034792260836, 0.11333430244560228, 0.07542975533767116, 0.07344976647123624, 0.37447993802724544, 0.3813653639216483, 0.40526294952639796, 0.37734517890242036, 0.3912170447753395, 0.3847309525271072, 0.3934625551172414, 0.40204917634079507, 0.41943462944401533, 0.04690194384483859, 0.02819076538185561, 0.053050547461841235, 0.08299847148292827, 0.031733234023877954, 0.07849863241139776, 0.09507839478669988, 0.07928208679984416, 0.08119138495325062, 0.17666681185377708, 0.1655574724639347, 0.16824676366685276, 0.17558684795236545, 0.22429303035226633, 0.12543516045165504, 0.14479779217459032, 0.18169189119126306, 0.20868600806654924, 0.16489176265082628, 0.2285254656604725, 0.18036857758810643, 0.18965160578067275, 0.17428967210511404, 0.28443193360810526, 0.26041064882848075, 0.2672147352192885, 0.18261545222683584, 0.16390819463485462, 0.138569869197669, 0.12989011717689336, 0.1694165196778995, 0.1844347391228075, 0.2709869547366591, 0.20781343985869616, 0.14150857646463333, 0.14242733160667054, 0.222933393934575, 0.18302890400886274, 0.20712069551744017, 0.19620580721171377, 0.21238967131120523, 0.1902018529085443, 0.2130323124542287, 0.2804924205648466, 0.23346863250674643, 0.1890103691954037, 0.17189138400356518, 0.19651220077902054, 0.17363041212301544, 0.20403668159159483, 0.1880076430641957, 0.1748460200948897, 0.18109097539958685, 0.24442972236531524, 0.31154229675874145, 0.13116896225146424, 0.2397274218428599, 0.6124055618269812, 0.19866729902475455, 0.19562475807435653, 0.1335314021677847, 0.16705284248369956, 0.608161221263253, 0.41138984909190623, 0.1519675422338651, 0.2013735500678694, 0.22914011643271992, 0.26557829082260054, 0.20416129295654561, 0.12946758458018826, 0.12816687830746543, 0.23783038894276176, 0.18175065596514872, 0.20148890772162553, 0.1818598409600356, 0.1744379056642028, 0.23008494717120054, 0.2014350578077132, 0.21038459504999152, 0.1794984546148891, 0.1894324659650578, 0.09946092927658357, 0.06021276336084669, 0.06412043465986461, 0.07748400837305924, 0.06941637641495113, 0.06582931601484565, 0.05643493288657264, 0.08321480453792152, 0.0541292592929733]}, "mutation_prompt": null}
{"id": "c1ee0ef5-9a8c-45c0-83b8-75e4db9c3dc0", "solution": "import numpy as np\n\nclass AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales based on the best solution and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using best solution\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "AOWO_DR", "description": "Adaptive Oppositional Whale Optimization with Dimensionality Reduction (AOWO-DR) leverages the social behavior of humpback whales, oppositional-based learning, and a dimensionality reduction mechanism to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.591724055581705, 0.5888854405739787, 0.5815627877990599, 0.48556147056001386, 0.4588753591941307, 0.49933922504557193, 0.5064805458970374, 0.5115225161079471, 0.6128194019015444, 0.07655149676086914, 0.1705198558437263, 0.09709483688106557, 0.2551102525929616, 0.3598936032766641, 0.20500884316350265, 0.09548832093021664, 0.10368167042314957, 0.18145969789556582, 0.25664323312330994, 0.1973519740555414, 0.21884930429094174, 0.1728912450356056, 0.1191081921131768, 0.17992868563006015, 0.11844041281959217, 0.11481499606334367, 0.11841261935030412, 0.2431059898407939, 0.06334149853209858, 0.19841261915519004, 0.12653792756985238, 0.11799658970127225, 0.15369070158933207, 0.1145543346118979, 0.11421262252330122, 0.1430172903824759, 0.8811953914513992, 0.9149530691289595, 0.8874416098327507, 0.8705871553784028, 0.8729791730907457, 0.9004556130689487, 0.8713509257383647, 0.8855825540370998, 0.9027744471317066, 0.17225563883219053, 0.19860802789908372, 0.22355440044146213, 0.26563771251960866, 0.18502681160632828, 0.21659999010646047, 0.25681250900812747, 0.212456890443257, 0.2036542301159242, 0.17312647398794012, 0.16086854613960988, 0.14674028462346655, 0.21255078662408533, 0.1446941749959647, 0.21228747125690972, 0.15285082365172364, 0.19595251771464206, 0.14551644075432302, 0.1863663405752246, 0.12367107789864917, 0.14853875852822296, 0.10172640370061414, 0.19441407934927024, 0.1896638998598531, 0.3257712361105004, 0.18744058191896507, 0.20498854363750219, 0.19428517362004172, 0.040053559903420854, 0.14144077124637155, 0.16557775993445956, 0.15404451715822032, 0.1574269177394686, 0.21189864033445682, 0.12473146456981954, 0.10292028112191387, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004583025636561988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041778980989396364, 0.06539130732609078, 0.03515733000157251, 0.09245331933222056, 0.0744959757779301, 0.022355365269725702, 0.02280968365670999, 0.14570567044479232, 0.06330678025932124, 0.04220528978471216, 0.025880442087852118, 0.08506633264000052, 0.06815582826679478, 0.02239032795125062, 0.058883332694470436, 0.09885646677812143, 0.059083585967512176, 0.07239411775999505, 0.016084629331720723, 0.06297734719637915, 0.14636494050419657, 0.06457463944762931, 0.08112755784994752, 0.07893420938314444, 0.08151034792260836, 0.11333430244560228, 0.07542975533767116, 0.07344976647123624, 0.37447993802724544, 0.3813653639216483, 0.40526294952639796, 0.37734517890242036, 0.3912170447753395, 0.3847309525271072, 0.3934625551172414, 0.40204917634079507, 0.41943462944401533, 0.04690194384483859, 0.02819076538185561, 0.053050547461841235, 0.08299847148292827, 0.031733234023877954, 0.07849863241139776, 0.09507839478669988, 0.07928208679984416, 0.08119138495325062, 0.17666681185377708, 0.1655574724639347, 0.16824676366685276, 0.17558684795236545, 0.22429303035226633, 0.12543516045165504, 0.14479779217459032, 0.18169189119126306, 0.20868600806654924, 0.16489176265082628, 0.2285254656604725, 0.18036857758810643, 0.18965160578067275, 0.17428967210511404, 0.28443193360810526, 0.26041064882848075, 0.2672147352192885, 0.18261545222683584, 0.16390819463485462, 0.138569869197669, 0.12989011717689336, 0.1694165196778995, 0.1844347391228075, 0.2709869547366591, 0.20781343985869616, 0.14150857646463333, 0.14242733160667054, 0.222933393934575, 0.18302890400886274, 0.20712069551744017, 0.19620580721171377, 0.21238967131120523, 0.1902018529085443, 0.2130323124542287, 0.2804924205648466, 0.23346863250674643, 0.1890103691954037, 0.17189138400356518, 0.19651220077902054, 0.17363041212301544, 0.20403668159159483, 0.1880076430641957, 0.1748460200948897, 0.18109097539958685, 0.24442972236531524, 0.31154229675874145, 0.13116896225146424, 0.2397274218428599, 0.6124055618269812, 0.19866729902475455, 0.19562475807435653, 0.1335314021677847, 0.16705284248369956, 0.608161221263253, 0.41138984909190623, 0.1519675422338651, 0.2013735500678694, 0.22914011643271992, 0.26557829082260054, 0.20416129295654561, 0.12946758458018826, 0.12816687830746543, 0.23783038894276176, 0.18175065596514872, 0.20148890772162553, 0.1818598409600356, 0.1744379056642028, 0.23008494717120054, 0.2014350578077132, 0.21038459504999152, 0.1794984546148891, 0.1894324659650578, 0.09946092927658357, 0.06021276336084669, 0.06412043465986461, 0.07748400837305924, 0.06941637641495113, 0.06582931601484565, 0.05643493288657264, 0.08321480453792152, 0.0541292592929733]}, "mutation_prompt": null}
{"id": "e5c68b40-ed1a-440b-ab87-f66a10dffb25", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        \n        # Use chaos-based initialization for better distribution\n        logistic_map = np.random.rand(self.population_size)\n        for i in range(100):  # Iterate to chaos\n            logistic_map = 4.0 * logistic_map * (1.0 - logistic_map)\n        self.whales = self.lower_bound + (self.upper_bound - self.lower_bound) * logistic_map[:, None]\n        self.whales = self.whales[:, :self.dim]  # Ensure dimension consistency\n        \n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Introduce adaptive inertia weight for better exploration-exploitation trade-off\n            inertia_weight = 0.5 + (0.5 * (1 - evaluations / self.budget))\n            \n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    # Apply inertia weight\n                    self.whales[i] = inertia_weight * (self.best_solution - A * D)\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    # Apply inertia weight\n                    self.whales[i] = inertia_weight * (opp_solution - A * D)\n\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced AOWO-DR introduces adaptive inertia weight and chaos-based pseudo-random population initialization to improve exploration and exploitation balance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"unsupported operand type(s) for *: 'float' and 'NoneType'\").", "error": "TypeError(\"unsupported operand type(s) for *: 'float' and 'NoneType'\")", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {}, "mutation_prompt": null}
{"id": "3dc3ead1-c83e-4b3a-b255-e0395661a42e", "solution": "import numpy as np\n\nclass AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales based on the best solution and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using best solution\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "AOWO_DR", "description": "Adaptive Oppositional Whale Optimization with Dimensionality Reduction (AOWO-DR) leverages the social behavior of humpback whales, oppositional-based learning, and a dimensionality reduction mechanism to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.591724055581705, 0.5888854405739787, 0.5815627877990599, 0.48556147056001386, 0.4588753591941307, 0.49933922504557193, 0.5064805458970374, 0.5115225161079471, 0.6128194019015444, 0.07655149676086914, 0.1705198558437263, 0.09709483688106557, 0.2551102525929616, 0.3598936032766641, 0.20500884316350265, 0.09548832093021664, 0.10368167042314957, 0.18145969789556582, 0.25664323312330994, 0.1973519740555414, 0.21884930429094174, 0.1728912450356056, 0.1191081921131768, 0.17992868563006015, 0.11844041281959217, 0.11481499606334367, 0.11841261935030412, 0.2431059898407939, 0.06334149853209858, 0.19841261915519004, 0.12653792756985238, 0.11799658970127225, 0.15369070158933207, 0.1145543346118979, 0.11421262252330122, 0.1430172903824759, 0.8811953914513992, 0.9149530691289595, 0.8874416098327507, 0.8705871553784028, 0.8729791730907457, 0.9004556130689487, 0.8713509257383647, 0.8855825540370998, 0.9027744471317066, 0.17225563883219053, 0.19860802789908372, 0.22355440044146213, 0.26563771251960866, 0.18502681160632828, 0.21659999010646047, 0.25681250900812747, 0.212456890443257, 0.2036542301159242, 0.17312647398794012, 0.16086854613960988, 0.14674028462346655, 0.21255078662408533, 0.1446941749959647, 0.21228747125690972, 0.15285082365172364, 0.19595251771464206, 0.14551644075432302, 0.1863663405752246, 0.12367107789864917, 0.14853875852822296, 0.10172640370061414, 0.19441407934927024, 0.1896638998598531, 0.3257712361105004, 0.18744058191896507, 0.20498854363750219, 0.19428517362004172, 0.040053559903420854, 0.14144077124637155, 0.16557775993445956, 0.15404451715822032, 0.1574269177394686, 0.21189864033445682, 0.12473146456981954, 0.10292028112191387, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004583025636561988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041778980989396364, 0.06539130732609078, 0.03515733000157251, 0.09245331933222056, 0.0744959757779301, 0.022355365269725702, 0.02280968365670999, 0.14570567044479232, 0.06330678025932124, 0.04220528978471216, 0.025880442087852118, 0.08506633264000052, 0.06815582826679478, 0.02239032795125062, 0.058883332694470436, 0.09885646677812143, 0.059083585967512176, 0.07239411775999505, 0.016084629331720723, 0.06297734719637915, 0.14636494050419657, 0.06457463944762931, 0.08112755784994752, 0.07893420938314444, 0.08151034792260836, 0.11333430244560228, 0.07542975533767116, 0.07344976647123624, 0.37447993802724544, 0.3813653639216483, 0.40526294952639796, 0.37734517890242036, 0.3912170447753395, 0.3847309525271072, 0.3934625551172414, 0.40204917634079507, 0.41943462944401533, 0.04690194384483859, 0.02819076538185561, 0.053050547461841235, 0.08299847148292827, 0.031733234023877954, 0.07849863241139776, 0.09507839478669988, 0.07928208679984416, 0.08119138495325062, 0.17666681185377708, 0.1655574724639347, 0.16824676366685276, 0.17558684795236545, 0.22429303035226633, 0.12543516045165504, 0.14479779217459032, 0.18169189119126306, 0.20868600806654924, 0.16489176265082628, 0.2285254656604725, 0.18036857758810643, 0.18965160578067275, 0.17428967210511404, 0.28443193360810526, 0.26041064882848075, 0.2672147352192885, 0.18261545222683584, 0.16390819463485462, 0.138569869197669, 0.12989011717689336, 0.1694165196778995, 0.1844347391228075, 0.2709869547366591, 0.20781343985869616, 0.14150857646463333, 0.14242733160667054, 0.222933393934575, 0.18302890400886274, 0.20712069551744017, 0.19620580721171377, 0.21238967131120523, 0.1902018529085443, 0.2130323124542287, 0.2804924205648466, 0.23346863250674643, 0.1890103691954037, 0.17189138400356518, 0.19651220077902054, 0.17363041212301544, 0.20403668159159483, 0.1880076430641957, 0.1748460200948897, 0.18109097539958685, 0.24442972236531524, 0.31154229675874145, 0.13116896225146424, 0.2397274218428599, 0.6124055618269812, 0.19866729902475455, 0.19562475807435653, 0.1335314021677847, 0.16705284248369956, 0.608161221263253, 0.41138984909190623, 0.1519675422338651, 0.2013735500678694, 0.22914011643271992, 0.26557829082260054, 0.20416129295654561, 0.12946758458018826, 0.12816687830746543, 0.23783038894276176, 0.18175065596514872, 0.20148890772162553, 0.1818598409600356, 0.1744379056642028, 0.23008494717120054, 0.2014350578077132, 0.21038459504999152, 0.1794984546148891, 0.1894324659650578, 0.09946092927658357, 0.06021276336084669, 0.06412043465986461, 0.07748400837305924, 0.06941637641495113, 0.06582931601484565, 0.05643493288657264, 0.08321480453792152, 0.0541292592929733]}, "mutation_prompt": null}
{"id": "103a3647-9de0-41de-8f3d-c27cc70809b0", "solution": "import numpy as np\n\nclass AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales based on the best solution and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using best solution\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "AOWO_DR", "description": "Adaptive Oppositional Whale Optimization with Dimensionality Reduction (AOWO-DR) leverages the social behavior of humpback whales, oppositional-based learning, and a dimensionality reduction mechanism to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.591724055581705, 0.5888854405739787, 0.5815627877990599, 0.48556147056001386, 0.4588753591941307, 0.49933922504557193, 0.5064805458970374, 0.5115225161079471, 0.6128194019015444, 0.07655149676086914, 0.1705198558437263, 0.09709483688106557, 0.2551102525929616, 0.3598936032766641, 0.20500884316350265, 0.09548832093021664, 0.10368167042314957, 0.18145969789556582, 0.25664323312330994, 0.1973519740555414, 0.21884930429094174, 0.1728912450356056, 0.1191081921131768, 0.17992868563006015, 0.11844041281959217, 0.11481499606334367, 0.11841261935030412, 0.2431059898407939, 0.06334149853209858, 0.19841261915519004, 0.12653792756985238, 0.11799658970127225, 0.15369070158933207, 0.1145543346118979, 0.11421262252330122, 0.1430172903824759, 0.8811953914513992, 0.9149530691289595, 0.8874416098327507, 0.8705871553784028, 0.8729791730907457, 0.9004556130689487, 0.8713509257383647, 0.8855825540370998, 0.9027744471317066, 0.17225563883219053, 0.19860802789908372, 0.22355440044146213, 0.26563771251960866, 0.18502681160632828, 0.21659999010646047, 0.25681250900812747, 0.212456890443257, 0.2036542301159242, 0.17312647398794012, 0.16086854613960988, 0.14674028462346655, 0.21255078662408533, 0.1446941749959647, 0.21228747125690972, 0.15285082365172364, 0.19595251771464206, 0.14551644075432302, 0.1863663405752246, 0.12367107789864917, 0.14853875852822296, 0.10172640370061414, 0.19441407934927024, 0.1896638998598531, 0.3257712361105004, 0.18744058191896507, 0.20498854363750219, 0.19428517362004172, 0.040053559903420854, 0.14144077124637155, 0.16557775993445956, 0.15404451715822032, 0.1574269177394686, 0.21189864033445682, 0.12473146456981954, 0.10292028112191387, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004583025636561988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041778980989396364, 0.06539130732609078, 0.03515733000157251, 0.09245331933222056, 0.0744959757779301, 0.022355365269725702, 0.02280968365670999, 0.14570567044479232, 0.06330678025932124, 0.04220528978471216, 0.025880442087852118, 0.08506633264000052, 0.06815582826679478, 0.02239032795125062, 0.058883332694470436, 0.09885646677812143, 0.059083585967512176, 0.07239411775999505, 0.016084629331720723, 0.06297734719637915, 0.14636494050419657, 0.06457463944762931, 0.08112755784994752, 0.07893420938314444, 0.08151034792260836, 0.11333430244560228, 0.07542975533767116, 0.07344976647123624, 0.37447993802724544, 0.3813653639216483, 0.40526294952639796, 0.37734517890242036, 0.3912170447753395, 0.3847309525271072, 0.3934625551172414, 0.40204917634079507, 0.41943462944401533, 0.04690194384483859, 0.02819076538185561, 0.053050547461841235, 0.08299847148292827, 0.031733234023877954, 0.07849863241139776, 0.09507839478669988, 0.07928208679984416, 0.08119138495325062, 0.17666681185377708, 0.1655574724639347, 0.16824676366685276, 0.17558684795236545, 0.22429303035226633, 0.12543516045165504, 0.14479779217459032, 0.18169189119126306, 0.20868600806654924, 0.16489176265082628, 0.2285254656604725, 0.18036857758810643, 0.18965160578067275, 0.17428967210511404, 0.28443193360810526, 0.26041064882848075, 0.2672147352192885, 0.18261545222683584, 0.16390819463485462, 0.138569869197669, 0.12989011717689336, 0.1694165196778995, 0.1844347391228075, 0.2709869547366591, 0.20781343985869616, 0.14150857646463333, 0.14242733160667054, 0.222933393934575, 0.18302890400886274, 0.20712069551744017, 0.19620580721171377, 0.21238967131120523, 0.1902018529085443, 0.2130323124542287, 0.2804924205648466, 0.23346863250674643, 0.1890103691954037, 0.17189138400356518, 0.19651220077902054, 0.17363041212301544, 0.20403668159159483, 0.1880076430641957, 0.1748460200948897, 0.18109097539958685, 0.24442972236531524, 0.31154229675874145, 0.13116896225146424, 0.2397274218428599, 0.6124055618269812, 0.19866729902475455, 0.19562475807435653, 0.1335314021677847, 0.16705284248369956, 0.608161221263253, 0.41138984909190623, 0.1519675422338651, 0.2013735500678694, 0.22914011643271992, 0.26557829082260054, 0.20416129295654561, 0.12946758458018826, 0.12816687830746543, 0.23783038894276176, 0.18175065596514872, 0.20148890772162553, 0.1818598409600356, 0.1744379056642028, 0.23008494717120054, 0.2014350578077132, 0.21038459504999152, 0.1794984546148891, 0.1894324659650578, 0.09946092927658357, 0.06021276336084669, 0.06412043465986461, 0.07748400837305924, 0.06941637641495113, 0.06582931601484565, 0.05643493288657264, 0.08321480453792152, 0.0541292592929733]}, "mutation_prompt": null}
{"id": "c28dc591-6a58-4195-aa62-422ab0b5504a", "solution": "import numpy as np\n\nclass AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales based on the best solution and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using best solution\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "AOWO_DR", "description": "Adaptive Oppositional Whale Optimization with Dimensionality Reduction (AOWO-DR) leverages the social behavior of humpback whales, oppositional-based learning, and a dimensionality reduction mechanism to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.591724055581705, 0.5888854405739787, 0.5815627877990599, 0.48556147056001386, 0.4588753591941307, 0.49933922504557193, 0.5064805458970374, 0.5115225161079471, 0.6128194019015444, 0.07655149676086914, 0.1705198558437263, 0.09709483688106557, 0.2551102525929616, 0.3598936032766641, 0.20500884316350265, 0.09548832093021664, 0.10368167042314957, 0.18145969789556582, 0.25664323312330994, 0.1973519740555414, 0.21884930429094174, 0.1728912450356056, 0.1191081921131768, 0.17992868563006015, 0.11844041281959217, 0.11481499606334367, 0.11841261935030412, 0.2431059898407939, 0.06334149853209858, 0.19841261915519004, 0.12653792756985238, 0.11799658970127225, 0.15369070158933207, 0.1145543346118979, 0.11421262252330122, 0.1430172903824759, 0.8811953914513992, 0.9149530691289595, 0.8874416098327507, 0.8705871553784028, 0.8729791730907457, 0.9004556130689487, 0.8713509257383647, 0.8855825540370998, 0.9027744471317066, 0.17225563883219053, 0.19860802789908372, 0.22355440044146213, 0.26563771251960866, 0.18502681160632828, 0.21659999010646047, 0.25681250900812747, 0.212456890443257, 0.2036542301159242, 0.17312647398794012, 0.16086854613960988, 0.14674028462346655, 0.21255078662408533, 0.1446941749959647, 0.21228747125690972, 0.15285082365172364, 0.19595251771464206, 0.14551644075432302, 0.1863663405752246, 0.12367107789864917, 0.14853875852822296, 0.10172640370061414, 0.19441407934927024, 0.1896638998598531, 0.3257712361105004, 0.18744058191896507, 0.20498854363750219, 0.19428517362004172, 0.040053559903420854, 0.14144077124637155, 0.16557775993445956, 0.15404451715822032, 0.1574269177394686, 0.21189864033445682, 0.12473146456981954, 0.10292028112191387, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004583025636561988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041778980989396364, 0.06539130732609078, 0.03515733000157251, 0.09245331933222056, 0.0744959757779301, 0.022355365269725702, 0.02280968365670999, 0.14570567044479232, 0.06330678025932124, 0.04220528978471216, 0.025880442087852118, 0.08506633264000052, 0.06815582826679478, 0.02239032795125062, 0.058883332694470436, 0.09885646677812143, 0.059083585967512176, 0.07239411775999505, 0.016084629331720723, 0.06297734719637915, 0.14636494050419657, 0.06457463944762931, 0.08112755784994752, 0.07893420938314444, 0.08151034792260836, 0.11333430244560228, 0.07542975533767116, 0.07344976647123624, 0.37447993802724544, 0.3813653639216483, 0.40526294952639796, 0.37734517890242036, 0.3912170447753395, 0.3847309525271072, 0.3934625551172414, 0.40204917634079507, 0.41943462944401533, 0.04690194384483859, 0.02819076538185561, 0.053050547461841235, 0.08299847148292827, 0.031733234023877954, 0.07849863241139776, 0.09507839478669988, 0.07928208679984416, 0.08119138495325062, 0.17666681185377708, 0.1655574724639347, 0.16824676366685276, 0.17558684795236545, 0.22429303035226633, 0.12543516045165504, 0.14479779217459032, 0.18169189119126306, 0.20868600806654924, 0.16489176265082628, 0.2285254656604725, 0.18036857758810643, 0.18965160578067275, 0.17428967210511404, 0.28443193360810526, 0.26041064882848075, 0.2672147352192885, 0.18261545222683584, 0.16390819463485462, 0.138569869197669, 0.12989011717689336, 0.1694165196778995, 0.1844347391228075, 0.2709869547366591, 0.20781343985869616, 0.14150857646463333, 0.14242733160667054, 0.222933393934575, 0.18302890400886274, 0.20712069551744017, 0.19620580721171377, 0.21238967131120523, 0.1902018529085443, 0.2130323124542287, 0.2804924205648466, 0.23346863250674643, 0.1890103691954037, 0.17189138400356518, 0.19651220077902054, 0.17363041212301544, 0.20403668159159483, 0.1880076430641957, 0.1748460200948897, 0.18109097539958685, 0.24442972236531524, 0.31154229675874145, 0.13116896225146424, 0.2397274218428599, 0.6124055618269812, 0.19866729902475455, 0.19562475807435653, 0.1335314021677847, 0.16705284248369956, 0.608161221263253, 0.41138984909190623, 0.1519675422338651, 0.2013735500678694, 0.22914011643271992, 0.26557829082260054, 0.20416129295654561, 0.12946758458018826, 0.12816687830746543, 0.23783038894276176, 0.18175065596514872, 0.20148890772162553, 0.1818598409600356, 0.1744379056642028, 0.23008494717120054, 0.2014350578077132, 0.21038459504999152, 0.1794984546148891, 0.1894324659650578, 0.09946092927658357, 0.06021276336084669, 0.06412043465986461, 0.07748400837305924, 0.06941637641495113, 0.06582931601484565, 0.05643493288657264, 0.08321480453792152, 0.0541292592929733]}, "mutation_prompt": null}
{"id": "7ce50988-f29c-43d7-bf17-5503663f4745", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.elite_rate = 0.2  # New: Rate of elite solutions\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            elite_count = max(1, int(self.elite_rate * self.population_size))\n            elite_indices = np.argsort(fitness)[:elite_count]\n            elite_solutions = self.whales[elite_indices]\n\n            if fitness[elite_indices[0]] < self.best_fitness:\n                self.best_fitness = fitness[elite_indices[0]]\n                self.best_solution = self.whales[elite_indices[0]].copy()\n\n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales based on elite solutions and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using an elite solution\n                    elite_whale = elite_solutions[np.random.randint(elite_count)]\n                    D = np.abs(np.random.rand(self.dim) * elite_whale - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = elite_whale - A * D\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n\n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dimensionality Reduction (Enhanced-AOWO-DR) incorporates elite solutions and dynamic population adaptation for improved exploration and exploitation.", "configspace": "", "generation": 16, "fitness": 0.20498228464212107, "feedback": "The algorithm Enhanced_AOWO_DR got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.6087573951138355, 0.5117768342583011, 0.575389611563424, 0.544415536220357, 0.5696559165729698, 0.5184950683757106, 0.5584586633365235, 0.5685447001758901, 0.43688901064187613, 0.22510627036903907, 0.11014035805774891, 0.08998250657251661, 0.24146986242401025, 0.23225322109112423, 0.30511670662883483, 0.11583998800149553, 0.1042787212643751, 0.07765376386244349, 0.15573107941887043, 0.07471909716991143, 0.1797592031972517, 0.17211152310543365, 0.22099940894585035, 0.12640294684035958, 0.21596033077424504, 0.2247234357410437, 0.12989878952501022, 0.07295147563559368, 0.06711118986413511, 0.15830212913469988, 0.14766290973537888, 0.22337183366560565, 0.08344402046719901, 0.18912379679923397, 0.1675069900923183, 0.11066849495589781, 0.885583386324269, 0.945082543901001, 0.867185558817926, 0.8696137826896619, 0.9155491968358275, 0.8853140511871427, 0.9084569214043324, 0.9113091620047384, 0.8779636645052651, 0.22165682941833054, 0.197028229543607, 0.29514691463477405, 0.2378949019904366, 0.22194752432829223, 0.2090888737122134, 0.23761737661307503, 0.26204888572337504, 0.18876968353043244, 0.21353075026057755, 0.13744932480865313, 0.1660736542701312, 0.21170463676502993, 0.14422811144606495, 0.29798525509411766, 0.15943638800045867, 0.1474185092268966, 0.14506592943548435, 0.18041087929988753, 0.12315039497501279, 0.2130175584314392, 0.10338081639130836, 0.12401951221059115, 0.20082955837067207, 0.17228099293717625, 0.14656174149345025, 0.23991317729785389, 0.15906605040929878, 0.03481311571010737, 0.1360085835772834, 0.12514206927490812, 0.2040654410058098, 0.19808736972627672, 0.13809236313288442, 0.01701148887399706, 0.19476090077211827, 9.999999999998899e-05, 9.999999999998899e-05, 0.02495914611894079, 0.0007202568508304363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012520432603550735, 0.05415526790379621, 0.03580032071478745, 0.05750437102344008, 0.06474438240004843, 0.023529696698591174, 0.036413317065096984, 0.18266284670783162, 0.0661829330788909, 0.06182910532902386, 0.006814550685705023, 0.03201354773382248, 0.04590371482548761, 0.07920829946757513, 0.015874891460441742, 0.015524389776896741, 0.012411887939083321, 0.0326455109764362, 9.999999999998899e-05, 0.09072638968196811, 0.03828771033980649, 0.10538566351362166, 0.14666276867338168, 0.005174956060986169, 0.09233914377339825, 0.11277517297030792, 0.11952216353304268, 0.07440450307894464, 0.36177048425881586, 0.43500719254887577, 0.3910660749144569, 0.37746974627471297, 0.4240006157887065, 0.3275062405121708, 0.3673653442309025, 0.38659168102970465, 0.4293527182713096, 0.0616605770480535, 0.024578335122211525, 0.09855601869094166, 0.0940657414585987, 0.03733382076965752, 0.08319729321644043, 0.048182753767076925, 0.08246160744119457, 0.08226937547366464, 0.2093300258085543, 0.18478430836057502, 0.16225300226746608, 0.26843119303927765, 0.19006366304089584, 0.1453070527021999, 0.17630851187623775, 0.13783569935335616, 0.15536309824707528, 0.1615387342514676, 0.23038103271006094, 0.16783233313092627, 0.18304252283378764, 0.19822693691940974, 0.24255374075942748, 0.2859597161294677, 0.34198007947523534, 0.19001742814889822, 0.1814390925293281, 0.1627454393534472, 0.1263015180037712, 0.1613483200737733, 0.16714359153662484, 0.2595042746430255, 0.1852652679842135, 0.17833179607538718, 0.17492441792352842, 0.2097525930746097, 0.1772293776157765, 0.21918460733460965, 0.20449939526925387, 0.19299333144342012, 0.21431331331150028, 0.21374438592220502, 0.18253675011079207, 0.20649197191356705, 0.18510172668585012, 0.16214273739405582, 0.19516636756483163, 0.20233705024684845, 0.18287268820525981, 0.18548163694071762, 0.18175040630823713, 0.195803045341149, 0.21063465432525152, 0.1264276495458445, 0.1392224948541294, 0.15328490589907395, 0.5732766303841972, 0.19912603856436106, 0.19603934495913122, 0.1307003883887381, 0.16840518442579921, 0.20359538395241006, 0.45514958399551575, 0.15456153005424478, 0.184947873806673, 0.25738039270851887, 0.17667668457658003, 0.2018477272791187, 0.1271528759601842, 0.2311871446157706, 0.1774113335438735, 0.18323107126170723, 0.1816164001825722, 0.20106338653739797, 0.1827357818998414, 0.20156481904643364, 0.1933070907791048, 0.19395454891370467, 0.18301565575356482, 0.18081573703089027, 0.07453519476120474, 0.05631840666326626, 0.057912000335248015, 0.05746099967480245, 0.06971924584817257, 0.07242301521741334, 0.10085338357385587, 0.06687339330676079, 0.06686353644875431]}, "mutation_prompt": null}
{"id": "28998475-e2b6-4105-9089-38aa2e2df3f8", "solution": "import numpy as np\n\nclass AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales based on the best solution and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using best solution\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "AOWO_DR", "description": "Adaptive Oppositional Whale Optimization with Dimensionality Reduction (AOWO-DR) leverages the social behavior of humpback whales, oppositional-based learning, and a dimensionality reduction mechanism to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.591724055581705, 0.5888854405739787, 0.5815627877990599, 0.48556147056001386, 0.4588753591941307, 0.49933922504557193, 0.5064805458970374, 0.5115225161079471, 0.6128194019015444, 0.07655149676086914, 0.1705198558437263, 0.09709483688106557, 0.2551102525929616, 0.3598936032766641, 0.20500884316350265, 0.09548832093021664, 0.10368167042314957, 0.18145969789556582, 0.25664323312330994, 0.1973519740555414, 0.21884930429094174, 0.1728912450356056, 0.1191081921131768, 0.17992868563006015, 0.11844041281959217, 0.11481499606334367, 0.11841261935030412, 0.2431059898407939, 0.06334149853209858, 0.19841261915519004, 0.12653792756985238, 0.11799658970127225, 0.15369070158933207, 0.1145543346118979, 0.11421262252330122, 0.1430172903824759, 0.8811953914513992, 0.9149530691289595, 0.8874416098327507, 0.8705871553784028, 0.8729791730907457, 0.9004556130689487, 0.8713509257383647, 0.8855825540370998, 0.9027744471317066, 0.17225563883219053, 0.19860802789908372, 0.22355440044146213, 0.26563771251960866, 0.18502681160632828, 0.21659999010646047, 0.25681250900812747, 0.212456890443257, 0.2036542301159242, 0.17312647398794012, 0.16086854613960988, 0.14674028462346655, 0.21255078662408533, 0.1446941749959647, 0.21228747125690972, 0.15285082365172364, 0.19595251771464206, 0.14551644075432302, 0.1863663405752246, 0.12367107789864917, 0.14853875852822296, 0.10172640370061414, 0.19441407934927024, 0.1896638998598531, 0.3257712361105004, 0.18744058191896507, 0.20498854363750219, 0.19428517362004172, 0.040053559903420854, 0.14144077124637155, 0.16557775993445956, 0.15404451715822032, 0.1574269177394686, 0.21189864033445682, 0.12473146456981954, 0.10292028112191387, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004583025636561988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041778980989396364, 0.06539130732609078, 0.03515733000157251, 0.09245331933222056, 0.0744959757779301, 0.022355365269725702, 0.02280968365670999, 0.14570567044479232, 0.06330678025932124, 0.04220528978471216, 0.025880442087852118, 0.08506633264000052, 0.06815582826679478, 0.02239032795125062, 0.058883332694470436, 0.09885646677812143, 0.059083585967512176, 0.07239411775999505, 0.016084629331720723, 0.06297734719637915, 0.14636494050419657, 0.06457463944762931, 0.08112755784994752, 0.07893420938314444, 0.08151034792260836, 0.11333430244560228, 0.07542975533767116, 0.07344976647123624, 0.37447993802724544, 0.3813653639216483, 0.40526294952639796, 0.37734517890242036, 0.3912170447753395, 0.3847309525271072, 0.3934625551172414, 0.40204917634079507, 0.41943462944401533, 0.04690194384483859, 0.02819076538185561, 0.053050547461841235, 0.08299847148292827, 0.031733234023877954, 0.07849863241139776, 0.09507839478669988, 0.07928208679984416, 0.08119138495325062, 0.17666681185377708, 0.1655574724639347, 0.16824676366685276, 0.17558684795236545, 0.22429303035226633, 0.12543516045165504, 0.14479779217459032, 0.18169189119126306, 0.20868600806654924, 0.16489176265082628, 0.2285254656604725, 0.18036857758810643, 0.18965160578067275, 0.17428967210511404, 0.28443193360810526, 0.26041064882848075, 0.2672147352192885, 0.18261545222683584, 0.16390819463485462, 0.138569869197669, 0.12989011717689336, 0.1694165196778995, 0.1844347391228075, 0.2709869547366591, 0.20781343985869616, 0.14150857646463333, 0.14242733160667054, 0.222933393934575, 0.18302890400886274, 0.20712069551744017, 0.19620580721171377, 0.21238967131120523, 0.1902018529085443, 0.2130323124542287, 0.2804924205648466, 0.23346863250674643, 0.1890103691954037, 0.17189138400356518, 0.19651220077902054, 0.17363041212301544, 0.20403668159159483, 0.1880076430641957, 0.1748460200948897, 0.18109097539958685, 0.24442972236531524, 0.31154229675874145, 0.13116896225146424, 0.2397274218428599, 0.6124055618269812, 0.19866729902475455, 0.19562475807435653, 0.1335314021677847, 0.16705284248369956, 0.608161221263253, 0.41138984909190623, 0.1519675422338651, 0.2013735500678694, 0.22914011643271992, 0.26557829082260054, 0.20416129295654561, 0.12946758458018826, 0.12816687830746543, 0.23783038894276176, 0.18175065596514872, 0.20148890772162553, 0.1818598409600356, 0.1744379056642028, 0.23008494717120054, 0.2014350578077132, 0.21038459504999152, 0.1794984546148891, 0.1894324659650578, 0.09946092927658357, 0.06021276336084669, 0.06412043465986461, 0.07748400837305924, 0.06941637641495113, 0.06582931601484565, 0.05643493288657264, 0.08321480453792152, 0.0541292592929733]}, "mutation_prompt": null}
{"id": "870f32e2-7287-4c0e-887b-7fcb89df473f", "solution": "import numpy as np\n\nclass AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales based on the best solution and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using best solution\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "AOWO_DR", "description": "Adaptive Oppositional Whale Optimization with Dimensionality Reduction (AOWO-DR) leverages the social behavior of humpback whales, oppositional-based learning, and a dimensionality reduction mechanism to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.591724055581705, 0.5888854405739787, 0.5815627877990599, 0.48556147056001386, 0.4588753591941307, 0.49933922504557193, 0.5064805458970374, 0.5115225161079471, 0.6128194019015444, 0.07655149676086914, 0.1705198558437263, 0.09709483688106557, 0.2551102525929616, 0.3598936032766641, 0.20500884316350265, 0.09548832093021664, 0.10368167042314957, 0.18145969789556582, 0.25664323312330994, 0.1973519740555414, 0.21884930429094174, 0.1728912450356056, 0.1191081921131768, 0.17992868563006015, 0.11844041281959217, 0.11481499606334367, 0.11841261935030412, 0.2431059898407939, 0.06334149853209858, 0.19841261915519004, 0.12653792756985238, 0.11799658970127225, 0.15369070158933207, 0.1145543346118979, 0.11421262252330122, 0.1430172903824759, 0.8811953914513992, 0.9149530691289595, 0.8874416098327507, 0.8705871553784028, 0.8729791730907457, 0.9004556130689487, 0.8713509257383647, 0.8855825540370998, 0.9027744471317066, 0.17225563883219053, 0.19860802789908372, 0.22355440044146213, 0.26563771251960866, 0.18502681160632828, 0.21659999010646047, 0.25681250900812747, 0.212456890443257, 0.2036542301159242, 0.17312647398794012, 0.16086854613960988, 0.14674028462346655, 0.21255078662408533, 0.1446941749959647, 0.21228747125690972, 0.15285082365172364, 0.19595251771464206, 0.14551644075432302, 0.1863663405752246, 0.12367107789864917, 0.14853875852822296, 0.10172640370061414, 0.19441407934927024, 0.1896638998598531, 0.3257712361105004, 0.18744058191896507, 0.20498854363750219, 0.19428517362004172, 0.040053559903420854, 0.14144077124637155, 0.16557775993445956, 0.15404451715822032, 0.1574269177394686, 0.21189864033445682, 0.12473146456981954, 0.10292028112191387, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004583025636561988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041778980989396364, 0.06539130732609078, 0.03515733000157251, 0.09245331933222056, 0.0744959757779301, 0.022355365269725702, 0.02280968365670999, 0.14570567044479232, 0.06330678025932124, 0.04220528978471216, 0.025880442087852118, 0.08506633264000052, 0.06815582826679478, 0.02239032795125062, 0.058883332694470436, 0.09885646677812143, 0.059083585967512176, 0.07239411775999505, 0.016084629331720723, 0.06297734719637915, 0.14636494050419657, 0.06457463944762931, 0.08112755784994752, 0.07893420938314444, 0.08151034792260836, 0.11333430244560228, 0.07542975533767116, 0.07344976647123624, 0.37447993802724544, 0.3813653639216483, 0.40526294952639796, 0.37734517890242036, 0.3912170447753395, 0.3847309525271072, 0.3934625551172414, 0.40204917634079507, 0.41943462944401533, 0.04690194384483859, 0.02819076538185561, 0.053050547461841235, 0.08299847148292827, 0.031733234023877954, 0.07849863241139776, 0.09507839478669988, 0.07928208679984416, 0.08119138495325062, 0.17666681185377708, 0.1655574724639347, 0.16824676366685276, 0.17558684795236545, 0.22429303035226633, 0.12543516045165504, 0.14479779217459032, 0.18169189119126306, 0.20868600806654924, 0.16489176265082628, 0.2285254656604725, 0.18036857758810643, 0.18965160578067275, 0.17428967210511404, 0.28443193360810526, 0.26041064882848075, 0.2672147352192885, 0.18261545222683584, 0.16390819463485462, 0.138569869197669, 0.12989011717689336, 0.1694165196778995, 0.1844347391228075, 0.2709869547366591, 0.20781343985869616, 0.14150857646463333, 0.14242733160667054, 0.222933393934575, 0.18302890400886274, 0.20712069551744017, 0.19620580721171377, 0.21238967131120523, 0.1902018529085443, 0.2130323124542287, 0.2804924205648466, 0.23346863250674643, 0.1890103691954037, 0.17189138400356518, 0.19651220077902054, 0.17363041212301544, 0.20403668159159483, 0.1880076430641957, 0.1748460200948897, 0.18109097539958685, 0.24442972236531524, 0.31154229675874145, 0.13116896225146424, 0.2397274218428599, 0.6124055618269812, 0.19866729902475455, 0.19562475807435653, 0.1335314021677847, 0.16705284248369956, 0.608161221263253, 0.41138984909190623, 0.1519675422338651, 0.2013735500678694, 0.22914011643271992, 0.26557829082260054, 0.20416129295654561, 0.12946758458018826, 0.12816687830746543, 0.23783038894276176, 0.18175065596514872, 0.20148890772162553, 0.1818598409600356, 0.1744379056642028, 0.23008494717120054, 0.2014350578077132, 0.21038459504999152, 0.1794984546148891, 0.1894324659650578, 0.09946092927658357, 0.06021276336084669, 0.06412043465986461, 0.07748400837305924, 0.06941637641495113, 0.06582931601484565, 0.05643493288657264, 0.08321480453792152, 0.0541292592929733]}, "mutation_prompt": null}
{"id": "c10560bf-7261-484a-9c2e-e8d64d408175", "solution": "import numpy as np\n\nclass EOWO_ASSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.exploration_factor = 0.2\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def adaptive_boundaries(self, evaluations):\n        factor = evaluations / self.budget\n        lb = self.lower_bound * (1 - factor * self.exploration_factor)\n        ub = self.upper_bound * (1 + factor * self.exploration_factor)\n        return lb, ub\n\n    def enhance_opposition(self, current, best):\n        return current + np.random.rand(self.dim) * (best - current)\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Update whales with adaptive boundaries\n            lb, ub = self.adaptive_boundaries(evaluations)\n            \n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Enhanced oppositional learning\n                    enhanced_opp = self.enhance_opposition(self.whales[i], self.best_solution)\n                    D = np.abs(np.random.rand(self.dim) * enhanced_opp - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = enhanced_opp - A * D\n                else:\n                    # Update using best solution\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D\n                \n                # Ensure adaptive search space boundaries\n                self.whales[i] = np.clip(self.whales[i], lb, ub)\n\n        return self.best_solution, self.best_fitness", "name": "EOWO_ASSB", "description": "Enhanced Oppositional Whale Optimization with Adaptive Search Space Boundaries (EOWO-ASSB) dynamically adjusts exploration boundaries and integrates enhanced oppositional updates to improve convergence.", "configspace": "", "generation": 19, "fitness": 0.15530791196713298, "feedback": "The algorithm EOWO_ASSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.10.", "error": "", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.3878096878814109, 0.37161246128313163, 0.4129708434271592, 0.3379003373380348, 0.3028109168686036, 0.31867071774742983, 0.364093035495479, 0.371462727626764, 0.3613071570789622, 9.999999999998899e-05, 0.01190732030328634, 9.999999999998899e-05, 0.09835453275596906, 0.05187525239347435, 0.029830896525723127, 0.0007604023424968576, 0.005581138718882217, 9.999999999998899e-05, 0.08364883489299024, 0.1046636115076035, 0.10032493973548795, 0.09195137413437426, 0.06270679133182544, 0.07099598126710094, 0.08224444447453039, 0.13043306128500876, 0.11092135138579451, 0.10240236461364205, 0.07605567303804783, 0.07948087545481208, 0.09046034122243396, 0.08251924383510922, 0.09246354543172042, 0.07254517226847634, 0.06655971174368647, 0.09864897324467148, 0.2399398796368063, 0.27174301270138945, 0.28977156662785897, 0.17882548228705386, 0.21034187892964296, 0.17799583504870808, 0.2519140221237657, 0.244915305509386, 0.2104749600008632, 0.2175347398061218, 0.19471702367369925, 0.2010862390164505, 0.20628516434982125, 0.20978444534977614, 0.25617345200873165, 0.23741945358463445, 0.2133024553849353, 0.12388273833713925, 0.22917200816869931, 0.1399906853505718, 0.1409010911395019, 0.19177012330143162, 0.15462905704568897, 0.22809993715797394, 0.1448639613422158, 0.15786508150625944, 0.19752180521726392, 0.14720520686760852, 0.13612980957453513, 0.14309378467479328, 0.13855109166856183, 0.1269313312195356, 0.1017639990389313, 0.14807682202437467, 0.169753344900193, 0.14820883070402047, 0.25012819244293183, 0.05412631355351827, 0.13001485418093184, 0.13384247545280237, 0.19664754328165168, 0.1601389526680156, 0.18622405537821296, 0.1115565460361706, 0.1297426548600048, 9.999999999998899e-05, 0.003013927270066552, 0.011472266717935109, 0.01134131802079319, 0.011559579283128785, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007299539064548055, 9.999999999998899e-05, 0.08993274153342845, 0.08741277100071987, 0.11956373065967185, 0.07179533230774182, 0.027535579085064987, 0.03393932596375526, 0.11259843282686266, 0.07877404374447838, 0.057555390145595076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05392826080473312, 0.05027355074440476, 0.06500567514783562, 0.03882448277569217, 9.999999999998899e-05, 0.04097327772087045, 0.0361402947851186, 0.05680282909745715, 0.021674169886411576, 0.33878106543649944, 0.3255397048262233, 0.37462556121588186, 0.33697284226423574, 0.28158317910159225, 0.3234193262694304, 0.3940987078052518, 0.3946136763635989, 0.3748924405867663, 0.06400024817853156, 0.09055636889347773, 0.09423253114680896, 0.07263389871402703, 0.08503654606289879, 0.08205016788474917, 0.0992965693459239, 0.10441900101216617, 0.11911673057885896, 0.19968096285249926, 0.1797113195123453, 0.19722807546921683, 0.1642897343007711, 0.1976119947550803, 0.1547581634954731, 0.19952557896817347, 0.15752146530416233, 0.14110484446608584, 0.239968604196943, 0.2588264423288261, 0.17141158992266992, 0.23319982314290555, 0.19272171136471938, 0.2370403983992615, 0.23161950569392586, 0.26490654403143066, 0.2481976084495131, 0.15856554627118002, 0.1727142367632004, 0.16228332372546372, 0.21227022591278089, 0.24073818049240492, 0.2116650287862344, 0.16406137025120493, 0.2008225177424804, 0.1829091297592318, 0.25971860964114657, 0.2224924165353691, 0.2024980440510018, 0.24071712170408321, 0.3035227478553133, 0.22909446600799765, 0.27529072525196085, 0.25299704306807425, 0.23009679077400869, 0.1844080977776743, 0.21093952724730192, 0.1993551353176205, 0.1781328891713776, 0.18283447782391105, 0.19796221704021721, 0.18307334921113683, 0.17011784604139268, 0.1742599383843002, 0.46902423018567574, 0.15006142116457288, 0.14949440532731917, 0.20279120538788997, 0.19841346643890778, 0.14823822539336307, 0.12097792354467163, 0.1699650640661985, 0.21045371309139693, 0.5420027318147501, 0.1494108954309702, 0.09035165140061618, 0.3623386597406877, 0.16937543191267268, 0.20745204271477113, 0.10494296820263715, 0.1046725420022312, 0.11405794947320647, 0.20599157506039079, 0.18560166931938438, 0.20788015060194076, 0.1831720554992392, 0.18739008862334672, 0.1875096612305276, 0.20829159055509583, 0.18205812965546198, 0.18971612527193216, 0.06567667100395391, 0.07400277517849407, 0.09588078771789788, 0.07025364181489402, 0.0756742922387339, 0.07279237629942159, 0.06594510896099659, 0.07826205879059112, 0.07607389962136835]}, "mutation_prompt": null}
{"id": "1efb1636-fbb3-4e6f-97a4-47cdb5f825ca", "solution": "import numpy as np\n\nclass EnhancedAOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def dynamic_neighborhood(self, solution, factor):\n        neighbor_range = factor * (self.upper_bound - self.lower_bound) / 2\n        return solution + np.random.uniform(-neighbor_range, neighbor_range, self.dim)\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            reduction_factor = 1 - (evaluations / self.budget)\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1 \n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dynamic neighborhood adaptation\n                self.whales[i] = self.dynamic_neighborhood(self.whales[i], reduction_factor)\n                \n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "EnhancedAOWO_DR", "description": "Enhanced opposition-based learning with dynamic neighborhood adaptation to improve exploration and exploitation balance.", "configspace": "", "generation": 20, "fitness": 0.13839878507145256, "feedback": "The algorithm EnhancedAOWO_DR got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.19923643986621087, 0.23233862913716796, 0.1923490929603633, 0.19855440236554944, 0.19732220150514856, 0.2006141818123517, 0.227189736777488, 0.20787909181987785, 0.2282667079834101, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05952272361364519, 0.050678149384129734, 0.055102480518106844, 0.05245487648797609, 0.05473879745983046, 0.05154675106352746, 0.049481604559066916, 0.04838780310191271, 0.06330447235703363, 0.05296778438507155, 0.043393135135828764, 0.03988744741234218, 0.039604059414435344, 0.04730957132213587, 0.038229143593104475, 0.043862842484989284, 0.04578474343308081, 0.03499539251464412, 0.9831331046378922, 0.9879938756055531, 0.9883442110965625, 0.983324147866993, 0.9621502868120997, 0.9911580786460297, 0.970041220762955, 0.9673251045063793, 0.98783930463721, 0.0961305588860667, 0.1259775188546921, 0.10257692339843238, 0.11111180509792395, 0.09971813794568407, 0.11039624722001085, 0.09781840595246083, 0.10000644256424052, 0.10438852898900497, 0.15352364230656235, 0.1434020221861343, 0.15373888445861794, 0.13488889111567115, 0.13968375887770967, 0.13648920152893929, 0.1393139006083549, 0.16024209623701302, 0.14445714075530303, 0.032369872999828075, 0.03434201712129248, 0.022907538954102358, 0.03432004806711286, 0.0259996527505586, 0.015890513708763265, 0.023193450386955528, 0.015219675957561907, 0.045492262638107794, 0.027200742614258866, 0.022548428700750467, 0.03497175257254315, 0.035173493625740404, 0.036716774922686324, 0.02855096613796193, 0.03682416672282929, 0.049481279888697105, 0.06209946120803855, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029362627447351075, 0.051280921825392234, 0.03958799486336939, 0.07147431267231152, 0.05238712325070116, 0.03372057232266945, 0.03552590056511018, 0.04097191871367445, 0.03451383332834246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013552963922357941, 0.0063473163618879, 0.0038427969180249155, 0.0069783824545600615, 0.0066301115247159315, 0.0029022905058655457, 0.003747329119538567, 0.004371613373457706, 0.004015145083695826, 0.22030194089759403, 0.22487651225775895, 0.21702397966025022, 0.22097287244672548, 0.23355307344855913, 0.21657800551365836, 0.22725123206756348, 0.2173598488439603, 0.21964886229578273, 0.06496189602143732, 0.06252672814716376, 0.059585093762096975, 0.0509888668375339, 0.05617322387561474, 0.05338473205058003, 0.05546971040795656, 0.05247900882043299, 0.06070755467950517, 0.14493993216869516, 0.15995274569770612, 0.15217586547165773, 0.13796448126699912, 0.13604232522759707, 0.1539128974472338, 0.14055234097734737, 0.13832859623275706, 0.1276857093848679, 0.1697608732977044, 0.17138018388807574, 0.1765327191878716, 0.18144198691253655, 0.18995895229475557, 0.19013684806924747, 0.18063604011308176, 0.17515464346022835, 0.18124606399765497, 0.13339992500482167, 0.11588234530537844, 0.11163753266623411, 0.12633756926823603, 0.10724777161776078, 0.12445567909738131, 0.10907034541515881, 0.13143827251455897, 0.12577277107986284, 0.19601476227814618, 0.15606646552320358, 0.16204020317010503, 0.16782227324357113, 0.18890673374996936, 0.16508043766101532, 0.15858591361221663, 0.17836122496935736, 0.15771387655277924, 0.13689333205749787, 0.15988881237920927, 0.14668569862376168, 0.13974868500195714, 0.15247196738057978, 0.15705885936829256, 0.15774757599144928, 0.135722359628195, 0.13946092679533306, 0.1973508556479897, 0.2236016440879658, 0.20588342231059342, 0.17012101857864947, 0.1972303515053605, 0.18818496974151044, 0.20871035392097648, 0.1454306009433607, 0.2102306759656828, 0.17343929517682388, 0.21115231403278845, 0.24788364106424, 0.18162987297504196, 0.2006328241273947, 0.16257518349785716, 0.18519800183786328, 0.1593367862700188, 0.1836339410840988, 0.18372288237450196, 0.1814524459961363, 0.21071350330675953, 0.18675179156589616, 0.17698991372741513, 0.19755718086787688, 0.1785236857469823, 0.18258879112067172, 0.18748555065381844, 0.0497411735473543, 0.06088395060845775, 0.058958269339889346, 0.05489264052600651, 0.05732907870341064, 0.07305015334712628, 0.05581003447257171, 0.051644320748075234, 0.07326683167262149]}, "mutation_prompt": null}
{"id": "aa5e8c9a-26b5-40fb-bac9-365946764d26", "solution": "import numpy as np\n\nclass AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales based on the best solution and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using best solution\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "AOWO_DR", "description": "Adaptive Oppositional Whale Optimization with Dimensionality Reduction (AOWO-DR) leverages the social behavior of humpback whales, oppositional-based learning, and a dimensionality reduction mechanism to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.591724055581705, 0.5888854405739787, 0.5815627877990599, 0.48556147056001386, 0.4588753591941307, 0.49933922504557193, 0.5064805458970374, 0.5115225161079471, 0.6128194019015444, 0.07655149676086914, 0.1705198558437263, 0.09709483688106557, 0.2551102525929616, 0.3598936032766641, 0.20500884316350265, 0.09548832093021664, 0.10368167042314957, 0.18145969789556582, 0.25664323312330994, 0.1973519740555414, 0.21884930429094174, 0.1728912450356056, 0.1191081921131768, 0.17992868563006015, 0.11844041281959217, 0.11481499606334367, 0.11841261935030412, 0.2431059898407939, 0.06334149853209858, 0.19841261915519004, 0.12653792756985238, 0.11799658970127225, 0.15369070158933207, 0.1145543346118979, 0.11421262252330122, 0.1430172903824759, 0.8811953914513992, 0.9149530691289595, 0.8874416098327507, 0.8705871553784028, 0.8729791730907457, 0.9004556130689487, 0.8713509257383647, 0.8855825540370998, 0.9027744471317066, 0.17225563883219053, 0.19860802789908372, 0.22355440044146213, 0.26563771251960866, 0.18502681160632828, 0.21659999010646047, 0.25681250900812747, 0.212456890443257, 0.2036542301159242, 0.17312647398794012, 0.16086854613960988, 0.14674028462346655, 0.21255078662408533, 0.1446941749959647, 0.21228747125690972, 0.15285082365172364, 0.19595251771464206, 0.14551644075432302, 0.1863663405752246, 0.12367107789864917, 0.14853875852822296, 0.10172640370061414, 0.19441407934927024, 0.1896638998598531, 0.3257712361105004, 0.18744058191896507, 0.20498854363750219, 0.19428517362004172, 0.040053559903420854, 0.14144077124637155, 0.16557775993445956, 0.15404451715822032, 0.1574269177394686, 0.21189864033445682, 0.12473146456981954, 0.10292028112191387, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004583025636561988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041778980989396364, 0.06539130732609078, 0.03515733000157251, 0.09245331933222056, 0.0744959757779301, 0.022355365269725702, 0.02280968365670999, 0.14570567044479232, 0.06330678025932124, 0.04220528978471216, 0.025880442087852118, 0.08506633264000052, 0.06815582826679478, 0.02239032795125062, 0.058883332694470436, 0.09885646677812143, 0.059083585967512176, 0.07239411775999505, 0.016084629331720723, 0.06297734719637915, 0.14636494050419657, 0.06457463944762931, 0.08112755784994752, 0.07893420938314444, 0.08151034792260836, 0.11333430244560228, 0.07542975533767116, 0.07344976647123624, 0.37447993802724544, 0.3813653639216483, 0.40526294952639796, 0.37734517890242036, 0.3912170447753395, 0.3847309525271072, 0.3934625551172414, 0.40204917634079507, 0.41943462944401533, 0.04690194384483859, 0.02819076538185561, 0.053050547461841235, 0.08299847148292827, 0.031733234023877954, 0.07849863241139776, 0.09507839478669988, 0.07928208679984416, 0.08119138495325062, 0.17666681185377708, 0.1655574724639347, 0.16824676366685276, 0.17558684795236545, 0.22429303035226633, 0.12543516045165504, 0.14479779217459032, 0.18169189119126306, 0.20868600806654924, 0.16489176265082628, 0.2285254656604725, 0.18036857758810643, 0.18965160578067275, 0.17428967210511404, 0.28443193360810526, 0.26041064882848075, 0.2672147352192885, 0.18261545222683584, 0.16390819463485462, 0.138569869197669, 0.12989011717689336, 0.1694165196778995, 0.1844347391228075, 0.2709869547366591, 0.20781343985869616, 0.14150857646463333, 0.14242733160667054, 0.222933393934575, 0.18302890400886274, 0.20712069551744017, 0.19620580721171377, 0.21238967131120523, 0.1902018529085443, 0.2130323124542287, 0.2804924205648466, 0.23346863250674643, 0.1890103691954037, 0.17189138400356518, 0.19651220077902054, 0.17363041212301544, 0.20403668159159483, 0.1880076430641957, 0.1748460200948897, 0.18109097539958685, 0.24442972236531524, 0.31154229675874145, 0.13116896225146424, 0.2397274218428599, 0.6124055618269812, 0.19866729902475455, 0.19562475807435653, 0.1335314021677847, 0.16705284248369956, 0.608161221263253, 0.41138984909190623, 0.1519675422338651, 0.2013735500678694, 0.22914011643271992, 0.26557829082260054, 0.20416129295654561, 0.12946758458018826, 0.12816687830746543, 0.23783038894276176, 0.18175065596514872, 0.20148890772162553, 0.1818598409600356, 0.1744379056642028, 0.23008494717120054, 0.2014350578077132, 0.21038459504999152, 0.1794984546148891, 0.1894324659650578, 0.09946092927658357, 0.06021276336084669, 0.06412043465986461, 0.07748400837305924, 0.06941637641495113, 0.06582931601484565, 0.05643493288657264, 0.08321480453792152, 0.0541292592929733]}, "mutation_prompt": null}
{"id": "89586106-3c99-45dc-b666-68532bab66a4", "solution": "import numpy as np\n\nclass AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales based on the best solution and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using best solution\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "AOWO_DR", "description": "Adaptive Oppositional Whale Optimization with Dimensionality Reduction (AOWO-DR) leverages the social behavior of humpback whales, oppositional-based learning, and a dimensionality reduction mechanism to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.591724055581705, 0.5888854405739787, 0.5815627877990599, 0.48556147056001386, 0.4588753591941307, 0.49933922504557193, 0.5064805458970374, 0.5115225161079471, 0.6128194019015444, 0.07655149676086914, 0.1705198558437263, 0.09709483688106557, 0.2551102525929616, 0.3598936032766641, 0.20500884316350265, 0.09548832093021664, 0.10368167042314957, 0.18145969789556582, 0.25664323312330994, 0.1973519740555414, 0.21884930429094174, 0.1728912450356056, 0.1191081921131768, 0.17992868563006015, 0.11844041281959217, 0.11481499606334367, 0.11841261935030412, 0.2431059898407939, 0.06334149853209858, 0.19841261915519004, 0.12653792756985238, 0.11799658970127225, 0.15369070158933207, 0.1145543346118979, 0.11421262252330122, 0.1430172903824759, 0.8811953914513992, 0.9149530691289595, 0.8874416098327507, 0.8705871553784028, 0.8729791730907457, 0.9004556130689487, 0.8713509257383647, 0.8855825540370998, 0.9027744471317066, 0.17225563883219053, 0.19860802789908372, 0.22355440044146213, 0.26563771251960866, 0.18502681160632828, 0.21659999010646047, 0.25681250900812747, 0.212456890443257, 0.2036542301159242, 0.17312647398794012, 0.16086854613960988, 0.14674028462346655, 0.21255078662408533, 0.1446941749959647, 0.21228747125690972, 0.15285082365172364, 0.19595251771464206, 0.14551644075432302, 0.1863663405752246, 0.12367107789864917, 0.14853875852822296, 0.10172640370061414, 0.19441407934927024, 0.1896638998598531, 0.3257712361105004, 0.18744058191896507, 0.20498854363750219, 0.19428517362004172, 0.040053559903420854, 0.14144077124637155, 0.16557775993445956, 0.15404451715822032, 0.1574269177394686, 0.21189864033445682, 0.12473146456981954, 0.10292028112191387, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004583025636561988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041778980989396364, 0.06539130732609078, 0.03515733000157251, 0.09245331933222056, 0.0744959757779301, 0.022355365269725702, 0.02280968365670999, 0.14570567044479232, 0.06330678025932124, 0.04220528978471216, 0.025880442087852118, 0.08506633264000052, 0.06815582826679478, 0.02239032795125062, 0.058883332694470436, 0.09885646677812143, 0.059083585967512176, 0.07239411775999505, 0.016084629331720723, 0.06297734719637915, 0.14636494050419657, 0.06457463944762931, 0.08112755784994752, 0.07893420938314444, 0.08151034792260836, 0.11333430244560228, 0.07542975533767116, 0.07344976647123624, 0.37447993802724544, 0.3813653639216483, 0.40526294952639796, 0.37734517890242036, 0.3912170447753395, 0.3847309525271072, 0.3934625551172414, 0.40204917634079507, 0.41943462944401533, 0.04690194384483859, 0.02819076538185561, 0.053050547461841235, 0.08299847148292827, 0.031733234023877954, 0.07849863241139776, 0.09507839478669988, 0.07928208679984416, 0.08119138495325062, 0.17666681185377708, 0.1655574724639347, 0.16824676366685276, 0.17558684795236545, 0.22429303035226633, 0.12543516045165504, 0.14479779217459032, 0.18169189119126306, 0.20868600806654924, 0.16489176265082628, 0.2285254656604725, 0.18036857758810643, 0.18965160578067275, 0.17428967210511404, 0.28443193360810526, 0.26041064882848075, 0.2672147352192885, 0.18261545222683584, 0.16390819463485462, 0.138569869197669, 0.12989011717689336, 0.1694165196778995, 0.1844347391228075, 0.2709869547366591, 0.20781343985869616, 0.14150857646463333, 0.14242733160667054, 0.222933393934575, 0.18302890400886274, 0.20712069551744017, 0.19620580721171377, 0.21238967131120523, 0.1902018529085443, 0.2130323124542287, 0.2804924205648466, 0.23346863250674643, 0.1890103691954037, 0.17189138400356518, 0.19651220077902054, 0.17363041212301544, 0.20403668159159483, 0.1880076430641957, 0.1748460200948897, 0.18109097539958685, 0.24442972236531524, 0.31154229675874145, 0.13116896225146424, 0.2397274218428599, 0.6124055618269812, 0.19866729902475455, 0.19562475807435653, 0.1335314021677847, 0.16705284248369956, 0.608161221263253, 0.41138984909190623, 0.1519675422338651, 0.2013735500678694, 0.22914011643271992, 0.26557829082260054, 0.20416129295654561, 0.12946758458018826, 0.12816687830746543, 0.23783038894276176, 0.18175065596514872, 0.20148890772162553, 0.1818598409600356, 0.1744379056642028, 0.23008494717120054, 0.2014350578077132, 0.21038459504999152, 0.1794984546148891, 0.1894324659650578, 0.09946092927658357, 0.06021276336084669, 0.06412043465986461, 0.07748400837305924, 0.06941637641495113, 0.06582931601484565, 0.05643493288657264, 0.08321480453792152, 0.0541292592929733]}, "mutation_prompt": null}
{"id": "2e47a7d9-be02-4b51-b44f-b58048747bd1", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution, mean_point):\n        return mean_point + (mean_point - solution)\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dynamic reduction factor based on fitness progress\n            reduction_factor = 1 - (evaluations / self.budget) * (self.best_fitness / (self.best_fitness + np.mean(fitness) + 1e-9))\n\n            # Compute mean point for adaptive opposition\n            mean_point = np.mean(self.whales, axis=0)\n\n            # Update whales based on the best solution and selective oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using best solution\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    # Update using selective oppositional solution\n                    if np.random.rand() < 0.7:  # More likely to use mean-based opposition\n                        opp_solution = self.oppositional_solution(self.whales[i], mean_point)\n                    else:\n                        opp_solution = self.oppositional_solution(self.whales[i], (self.lower_bound + self.upper_bound) / 2)\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization introduces dynamic parameter adjustment and selective opposition to improve convergence and diversity.", "configspace": "", "generation": 23, "fitness": 0.1958892929584924, "feedback": "The algorithm Enhanced_AOWO_DR got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.608195951980433, 0.5230854588964249, 0.6135801628429102, 0.5459442362359872, 0.5452108451678578, 0.5675014441161431, 0.5390518549961425, 0.5218926834257116, 0.604593266072048, 0.1599821336289622, 0.2730410944650089, 0.12310077155411181, 0.16021041228506094, 0.24451716218687447, 0.255463273420778, 0.05950169892094148, 0.1031614520613352, 0.21243602960864805, 0.13262858044371184, 0.0945227735093378, 0.09991433745393441, 0.10278960124444037, 0.24615623712763102, 0.16218136945865314, 0.16910405531586126, 0.1684975918965098, 0.304578010979218, 0.2235050883682136, 0.06918275343304159, 0.07159447469175229, 0.16936744664207748, 0.11629507206315537, 0.10477995251819627, 0.11126526949987237, 0.1787257901629653, 0.10750670952031594, 0.8452138284101811, 0.9177319256149483, 0.7669270829132336, 0.849133599571423, 0.8938566242272892, 0.8650092865256682, 0.8483780228394006, 0.8939957921373022, 0.8648039887704166, 0.15100130111594423, 0.12058040645189017, 0.27815733572319357, 0.2357841650949063, 0.14786324609165602, 0.1414954435687088, 0.20124553782700272, 0.17351012249656617, 0.18428991550391882, 0.24282580386764896, 0.105094729436229, 0.15586858872184128, 0.19278792982582182, 0.11422974500481309, 0.3017804907926632, 0.10717433555725386, 0.15034351934189838, 0.10651427234120525, 0.21859905611700192, 0.10515638765165292, 0.11950294433945952, 0.12078204841396178, 0.24813749391326811, 0.15815995774717462, 0.26228343049267955, 0.15561339511180672, 0.18057413169691516, 0.1731895807378243, 0.09030124659865701, 0.153617683294631, 0.1611755264922322, 0.16507697992147752, 0.191988301560017, 9.999999999998899e-05, 9.999999999998899e-05, 0.08177358093641318, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028861330901512883, 0.05505139001976478, 0.024209478702527987, 0.060223531843038636, 0.06855197511472089, 0.006523514207244285, 0.00538655135811128, 0.17164098226668756, 0.05414920676848145, 0.044887802716013, 0.05137234591657247, 0.005287594004605989, 0.07217321031088508, 0.048712972927217546, 0.039872262489052845, 0.04277310522180855, 0.019458187608303534, 9.999999999998899e-05, 0.03240192946094189, 0.08192702661606888, 0.11151690826269278, 0.058646795728291234, 0.036740877116296033, 0.00405755233611349, 0.04315709225828046, 0.17024024754822187, 0.06945503653990037, 0.07370842028920288, 0.3772645812820552, 0.3509447102604708, 0.3951919019602216, 0.35062194878129627, 0.3248846397740962, 0.40431024313064334, 0.4124236116432375, 0.38080916556949473, 0.3792379614690635, 0.04991005924976977, 0.012971029629147979, 0.02310548580043037, 0.07521980022452823, 0.02822450704620172, 0.08566476530502021, 0.031001609596095325, 0.046921889072898515, 0.08295604123867728, 0.1424058294634395, 0.15754017737269732, 0.15270441562311787, 0.14574821986128428, 0.1795513273321221, 0.1447943325994584, 0.16340795672603015, 0.11997164608789823, 0.1601189323924509, 0.14198898430161844, 0.26442354438546, 0.17288033508844058, 0.17656661467595136, 0.17643957848906433, 0.24522614089390615, 0.17859067067675682, 0.25113037462556886, 0.24581947851041186, 0.15591846911897134, 0.1862481026803583, 0.11997832367489114, 0.1703254141598627, 0.2179339343454758, 0.22870497339061535, 0.22029187165328923, 0.15913973134200765, 0.16709807907451413, 0.21733673379773377, 0.17418534971296262, 0.16347560369843672, 0.1756848001872704, 0.2446054218635746, 0.17251783425513623, 0.1797103711903303, 0.16809743522154785, 0.19271190675737393, 0.18314596291503749, 0.17022400389658743, 0.17970840588712578, 0.19063322980114394, 0.15921885283630688, 0.1888301271627323, 0.165495568536696, 0.1633281560257397, 0.23943466487923204, 0.18545727183465377, 0.12447969713546814, 0.15044470426605816, 0.629853097510362, 0.19655469938111014, 0.19252736547915772, 0.18656596353746435, 0.16850260432179132, 0.1993788618775688, 0.41678943535247404, 0.1548862407125573, 0.10591626285700728, 0.26172200656706734, 0.16418964842353512, 0.19515919050399388, 0.11310121187203315, 0.10188995664951817, 0.22064000931839145, 0.18739569423338254, 0.19123733292392986, 0.18478027074260872, 0.18223845002433814, 0.18527995302345923, 0.22128695254834008, 0.21095527074125653, 0.20357297085718196, 0.2086591403699971, 0.06918788605543702, 0.06791100039969156, 0.053349069981667885, 0.07529435727154865, 0.07668576733209431, 0.07839001741613627, 0.05070213816884228, 0.03468611698247337, 0.060779664632762964]}, "mutation_prompt": null}
{"id": "13343fc0-7b9b-4bf3-aa14-0f64e9bd52de", "solution": "import numpy as np\n\nclass AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales based on the best solution and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using best solution\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "AOWO_DR", "description": "Adaptive Oppositional Whale Optimization with Dimensionality Reduction (AOWO-DR) leverages the social behavior of humpback whales, oppositional-based learning, and a dimensionality reduction mechanism to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.591724055581705, 0.5888854405739787, 0.5815627877990599, 0.48556147056001386, 0.4588753591941307, 0.49933922504557193, 0.5064805458970374, 0.5115225161079471, 0.6128194019015444, 0.07655149676086914, 0.1705198558437263, 0.09709483688106557, 0.2551102525929616, 0.3598936032766641, 0.20500884316350265, 0.09548832093021664, 0.10368167042314957, 0.18145969789556582, 0.25664323312330994, 0.1973519740555414, 0.21884930429094174, 0.1728912450356056, 0.1191081921131768, 0.17992868563006015, 0.11844041281959217, 0.11481499606334367, 0.11841261935030412, 0.2431059898407939, 0.06334149853209858, 0.19841261915519004, 0.12653792756985238, 0.11799658970127225, 0.15369070158933207, 0.1145543346118979, 0.11421262252330122, 0.1430172903824759, 0.8811953914513992, 0.9149530691289595, 0.8874416098327507, 0.8705871553784028, 0.8729791730907457, 0.9004556130689487, 0.8713509257383647, 0.8855825540370998, 0.9027744471317066, 0.17225563883219053, 0.19860802789908372, 0.22355440044146213, 0.26563771251960866, 0.18502681160632828, 0.21659999010646047, 0.25681250900812747, 0.212456890443257, 0.2036542301159242, 0.17312647398794012, 0.16086854613960988, 0.14674028462346655, 0.21255078662408533, 0.1446941749959647, 0.21228747125690972, 0.15285082365172364, 0.19595251771464206, 0.14551644075432302, 0.1863663405752246, 0.12367107789864917, 0.14853875852822296, 0.10172640370061414, 0.19441407934927024, 0.1896638998598531, 0.3257712361105004, 0.18744058191896507, 0.20498854363750219, 0.19428517362004172, 0.040053559903420854, 0.14144077124637155, 0.16557775993445956, 0.15404451715822032, 0.1574269177394686, 0.21189864033445682, 0.12473146456981954, 0.10292028112191387, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004583025636561988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041778980989396364, 0.06539130732609078, 0.03515733000157251, 0.09245331933222056, 0.0744959757779301, 0.022355365269725702, 0.02280968365670999, 0.14570567044479232, 0.06330678025932124, 0.04220528978471216, 0.025880442087852118, 0.08506633264000052, 0.06815582826679478, 0.02239032795125062, 0.058883332694470436, 0.09885646677812143, 0.059083585967512176, 0.07239411775999505, 0.016084629331720723, 0.06297734719637915, 0.14636494050419657, 0.06457463944762931, 0.08112755784994752, 0.07893420938314444, 0.08151034792260836, 0.11333430244560228, 0.07542975533767116, 0.07344976647123624, 0.37447993802724544, 0.3813653639216483, 0.40526294952639796, 0.37734517890242036, 0.3912170447753395, 0.3847309525271072, 0.3934625551172414, 0.40204917634079507, 0.41943462944401533, 0.04690194384483859, 0.02819076538185561, 0.053050547461841235, 0.08299847148292827, 0.031733234023877954, 0.07849863241139776, 0.09507839478669988, 0.07928208679984416, 0.08119138495325062, 0.17666681185377708, 0.1655574724639347, 0.16824676366685276, 0.17558684795236545, 0.22429303035226633, 0.12543516045165504, 0.14479779217459032, 0.18169189119126306, 0.20868600806654924, 0.16489176265082628, 0.2285254656604725, 0.18036857758810643, 0.18965160578067275, 0.17428967210511404, 0.28443193360810526, 0.26041064882848075, 0.2672147352192885, 0.18261545222683584, 0.16390819463485462, 0.138569869197669, 0.12989011717689336, 0.1694165196778995, 0.1844347391228075, 0.2709869547366591, 0.20781343985869616, 0.14150857646463333, 0.14242733160667054, 0.222933393934575, 0.18302890400886274, 0.20712069551744017, 0.19620580721171377, 0.21238967131120523, 0.1902018529085443, 0.2130323124542287, 0.2804924205648466, 0.23346863250674643, 0.1890103691954037, 0.17189138400356518, 0.19651220077902054, 0.17363041212301544, 0.20403668159159483, 0.1880076430641957, 0.1748460200948897, 0.18109097539958685, 0.24442972236531524, 0.31154229675874145, 0.13116896225146424, 0.2397274218428599, 0.6124055618269812, 0.19866729902475455, 0.19562475807435653, 0.1335314021677847, 0.16705284248369956, 0.608161221263253, 0.41138984909190623, 0.1519675422338651, 0.2013735500678694, 0.22914011643271992, 0.26557829082260054, 0.20416129295654561, 0.12946758458018826, 0.12816687830746543, 0.23783038894276176, 0.18175065596514872, 0.20148890772162553, 0.1818598409600356, 0.1744379056642028, 0.23008494717120054, 0.2014350578077132, 0.21038459504999152, 0.1794984546148891, 0.1894324659650578, 0.09946092927658357, 0.06021276336084669, 0.06412043465986461, 0.07748400837305924, 0.06941637641495113, 0.06582931601484565, 0.05643493288657264, 0.08321480453792152, 0.0541292592929733]}, "mutation_prompt": null}
{"id": "a9f8382f-8655-4c54-a81b-e8d30ecda5d4", "solution": "import numpy as np\n\nclass AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales based on the best solution and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                if np.random.rand() < 0.5:\n                    # Update using best solution\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "AOWO_DR", "description": "Adaptive Oppositional Whale Optimization with Dimensionality Reduction (AOWO-DR) leverages the social behavior of humpback whales, oppositional-based learning, and a dimensionality reduction mechanism to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.591724055581705, 0.5888854405739787, 0.5815627877990599, 0.48556147056001386, 0.4588753591941307, 0.49933922504557193, 0.5064805458970374, 0.5115225161079471, 0.6128194019015444, 0.07655149676086914, 0.1705198558437263, 0.09709483688106557, 0.2551102525929616, 0.3598936032766641, 0.20500884316350265, 0.09548832093021664, 0.10368167042314957, 0.18145969789556582, 0.25664323312330994, 0.1973519740555414, 0.21884930429094174, 0.1728912450356056, 0.1191081921131768, 0.17992868563006015, 0.11844041281959217, 0.11481499606334367, 0.11841261935030412, 0.2431059898407939, 0.06334149853209858, 0.19841261915519004, 0.12653792756985238, 0.11799658970127225, 0.15369070158933207, 0.1145543346118979, 0.11421262252330122, 0.1430172903824759, 0.8811953914513992, 0.9149530691289595, 0.8874416098327507, 0.8705871553784028, 0.8729791730907457, 0.9004556130689487, 0.8713509257383647, 0.8855825540370998, 0.9027744471317066, 0.17225563883219053, 0.19860802789908372, 0.22355440044146213, 0.26563771251960866, 0.18502681160632828, 0.21659999010646047, 0.25681250900812747, 0.212456890443257, 0.2036542301159242, 0.17312647398794012, 0.16086854613960988, 0.14674028462346655, 0.21255078662408533, 0.1446941749959647, 0.21228747125690972, 0.15285082365172364, 0.19595251771464206, 0.14551644075432302, 0.1863663405752246, 0.12367107789864917, 0.14853875852822296, 0.10172640370061414, 0.19441407934927024, 0.1896638998598531, 0.3257712361105004, 0.18744058191896507, 0.20498854363750219, 0.19428517362004172, 0.040053559903420854, 0.14144077124637155, 0.16557775993445956, 0.15404451715822032, 0.1574269177394686, 0.21189864033445682, 0.12473146456981954, 0.10292028112191387, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004583025636561988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041778980989396364, 0.06539130732609078, 0.03515733000157251, 0.09245331933222056, 0.0744959757779301, 0.022355365269725702, 0.02280968365670999, 0.14570567044479232, 0.06330678025932124, 0.04220528978471216, 0.025880442087852118, 0.08506633264000052, 0.06815582826679478, 0.02239032795125062, 0.058883332694470436, 0.09885646677812143, 0.059083585967512176, 0.07239411775999505, 0.016084629331720723, 0.06297734719637915, 0.14636494050419657, 0.06457463944762931, 0.08112755784994752, 0.07893420938314444, 0.08151034792260836, 0.11333430244560228, 0.07542975533767116, 0.07344976647123624, 0.37447993802724544, 0.3813653639216483, 0.40526294952639796, 0.37734517890242036, 0.3912170447753395, 0.3847309525271072, 0.3934625551172414, 0.40204917634079507, 0.41943462944401533, 0.04690194384483859, 0.02819076538185561, 0.053050547461841235, 0.08299847148292827, 0.031733234023877954, 0.07849863241139776, 0.09507839478669988, 0.07928208679984416, 0.08119138495325062, 0.17666681185377708, 0.1655574724639347, 0.16824676366685276, 0.17558684795236545, 0.22429303035226633, 0.12543516045165504, 0.14479779217459032, 0.18169189119126306, 0.20868600806654924, 0.16489176265082628, 0.2285254656604725, 0.18036857758810643, 0.18965160578067275, 0.17428967210511404, 0.28443193360810526, 0.26041064882848075, 0.2672147352192885, 0.18261545222683584, 0.16390819463485462, 0.138569869197669, 0.12989011717689336, 0.1694165196778995, 0.1844347391228075, 0.2709869547366591, 0.20781343985869616, 0.14150857646463333, 0.14242733160667054, 0.222933393934575, 0.18302890400886274, 0.20712069551744017, 0.19620580721171377, 0.21238967131120523, 0.1902018529085443, 0.2130323124542287, 0.2804924205648466, 0.23346863250674643, 0.1890103691954037, 0.17189138400356518, 0.19651220077902054, 0.17363041212301544, 0.20403668159159483, 0.1880076430641957, 0.1748460200948897, 0.18109097539958685, 0.24442972236531524, 0.31154229675874145, 0.13116896225146424, 0.2397274218428599, 0.6124055618269812, 0.19866729902475455, 0.19562475807435653, 0.1335314021677847, 0.16705284248369956, 0.608161221263253, 0.41138984909190623, 0.1519675422338651, 0.2013735500678694, 0.22914011643271992, 0.26557829082260054, 0.20416129295654561, 0.12946758458018826, 0.12816687830746543, 0.23783038894276176, 0.18175065596514872, 0.20148890772162553, 0.1818598409600356, 0.1744379056642028, 0.23008494717120054, 0.2014350578077132, 0.21038459504999152, 0.1794984546148891, 0.1894324659650578, 0.09946092927658357, 0.06021276336084669, 0.06412043465986461, 0.07748400837305924, 0.06941637641495113, 0.06582931601484565, 0.05643493288657264, 0.08321480453792152, 0.0541292592929733]}, "mutation_prompt": null}
{"id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 26, "fitness": 0.2167236784512974, "feedback": "The algorithm Enhanced_AOWO_DR got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "96bd5416-2bd6-4889-9c1d-c3a5219a4b1b", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "1c087767-26bd-4314-bbec-9074d7750f1b", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "6b214912-313f-4673-8723-5f3447469011", "solution": "import numpy as np\n\nclass Enhanced_AOWO_Levy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Initial dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def levy_flight(self, dim, beta=1.5):\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u, size=dim)\n        v = np.random.normal(0, 1, size=dim)\n        step = u / np.abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Adaptive dynamic scaling\n                self.dynamic_scale = 0.5 * (1 + np.sin(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with Levy flight\n                    levy_step = self.levy_flight(self.dim) * self.dynamic_scale\n                    self.whales[i] = self.best_solution + levy_step\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.whales[i] * reduction_factor\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_Levy", "description": "Enhanced AOWO-DR with Adaptive Levy Flight introduces Levy flight for better exploration and adaptive weight for balancing search dynamics.", "configspace": "", "generation": 28, "fitness": 0.14978292791624004, "feedback": "The algorithm Enhanced_AOWO_Levy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.12.", "error": "", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.33920468264091763, 0.3263046892014627, 0.28636610531469897, 0.39499566131376374, 0.29279995299892114, 0.29328320883161263, 0.2882265895492192, 0.2896550373017438, 0.2907405029061698, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06308858670533957, 0.09976443760156939, 0.07228258402488008, 0.06307316594816825, 0.09613347344912015, 0.08518659358511049, 0.0616646427170392, 0.06976794939046904, 0.07957529735487356, 0.06062776063690123, 0.07453949534200421, 0.06672027786873591, 0.05922202113816455, 0.06875486922750806, 0.0671554167332511, 0.07796642833847856, 0.06453770823857685, 0.08140285223634969, 0.31842823626273264, 0.20432938294932124, 0.9477057437449755, 0.23020269114660497, 0.15494138886529796, 0.965507060963876, 0.24970017672425715, 0.19502181004443797, 0.2957583696048578, 0.133455987557202, 0.1523660517635712, 0.1510887914615925, 0.20392817644427363, 0.17529109785499708, 0.1543228654435579, 0.1696932822726177, 0.14196866679318842, 0.19805223388445015, 0.21477667892125984, 0.22551488694526256, 0.21387369210539853, 0.20262124891056332, 0.2383992558523722, 0.2077137362943542, 0.17226175517566444, 0.17794686783735547, 0.19105711212255938, 0.08681334303853727, 0.03055501644759917, 0.10013327201845945, 0.03535422378193742, 0.10807444323197779, 9.999999999998899e-05, 0.10086230266603413, 0.07305203907770008, 0.07085576357960055, 0.13716990997279477, 0.1215216135020466, 0.14823854645133416, 0.14367770963758253, 0.1319512850326855, 0.1389626116451489, 0.14137217098198707, 0.131715152205097, 0.15447696231735353, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06741916885154164, 0.08077476670834172, 0.059336509644420055, 0.10032518754846786, 0.06314424822438613, 0.05236958412478521, 0.10477285977966588, 0.07151823732108131, 0.04907841803378665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045722419812873394, 0.03764229435045485, 0.045892010732356936, 9.999999999998899e-05, 0.010153076702456021, 0.03518699845414486, 0.044523018857766106, 0.030959966307230746, 0.03559442990386685, 0.32587908130828347, 0.30319516172373195, 0.28809560241064835, 0.2765035109395769, 0.2770802203391818, 0.2937347886986448, 0.3112270144093018, 0.32459098596617975, 0.3485415887414607, 0.0645326937604137, 0.05683297321604586, 0.05618503609065628, 0.10550172816107062, 0.0777112791836505, 0.0731989596461079, 0.08929714275665979, 0.0749713116378854, 0.08564781156465451, 0.1637810312111444, 0.15317325826594042, 0.15600661773192226, 0.1783874824189614, 0.16573406251555844, 0.15038033186211142, 0.17444265064138798, 0.21230762991902752, 0.18682498523432434, 0.26224729283897363, 0.21439407486334927, 0.21590437957732034, 0.235687824445158, 0.21201644279351795, 0.21163651713705567, 0.18174666526376848, 0.2373472077347667, 0.19811876219854885, 0.11650638743579733, 0.1523752775432311, 0.13346551913868532, 0.15635589595241217, 0.16530161906749852, 0.1855488308688633, 0.15837601234634735, 0.1633642435830005, 0.16757743403245806, 0.2495976492048203, 0.26090904829636596, 0.255597396516426, 0.2392796713059423, 0.25159577350737905, 0.26374652499062445, 0.26606228757431216, 0.25848883847911597, 0.25702212441648564, 0.1754391459796356, 0.16876561546595914, 0.17467023469905418, 0.17439425059240476, 0.17238470052793986, 0.1702055262970592, 0.1785808592118039, 0.17202684124688927, 0.18851713870961673, 0.1874105350205577, 0.1801298521029725, 0.1487407067410158, 0.28987204538556544, 0.19705550693788743, 0.19769579706496954, 0.1665508591302658, 0.16969695926203443, 0.20390265599292323, 0.35054401114206735, 0.165258135276662, 0.3497455956787011, 0.299901061190591, 0.20569094849571434, 0.20581062874060752, 0.10462323150265984, 0.22662949339658678, 0.28368582294433753, 0.1817026714832407, 0.17379399521722194, 0.17556704388602173, 0.20146473805756693, 0.179428923550497, 0.19084395270681787, 0.19050519255823606, 0.19418827134984562, 0.18772593358442424, 0.08440195510793269, 0.09882119986461801, 0.07473636896249303, 0.06324701217072126, 0.08755747118938284, 0.0640737833023397, 0.08856282061404164, 0.09424874908871228, 0.07921274752333751]}, "mutation_prompt": null}
{"id": "ac7c4776-beea-4fbc-aa61-25f10b3a6554", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "74e282bc-a6d7-4235-9e47-bfcafa5004e8", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "2b33b4a1-4b83-4169-8f97-2201aeda5c16", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "a2b2bbfe-1204-45ee-9ab7-aba013d8ee8a", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "99857329-ca5d-4f52-99c8-2be8bffd5d6f", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "09f3bf0a-2a76-4570-8368-199a07b05d8b", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "ca7705dd-d271-43c4-9570-63372c58aa5e", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "55341b54-7cc5-406b-af0c-3312ba980f1b", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "7f631c45-8aa9-4646-9483-675b1c9f20d9", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "fe523df7-ae53-4602-a831-addb9e98cac1", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (abs(v) ** (1 / beta))\n        return 0.01 * step\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                if np.random.rand() < 0.3:\n                    self.whales[i] += self.levy_flight()\n                \n                mutation_prob = 0.05\n                if np.random.rand() < mutation_prob:\n                    self.whales[i] += np.random.normal(0, 0.1, self.dim)\n\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling integrates Lévy flights for better exploration and mutation-based dimensionality adjustment for improved convergence.", "configspace": "", "generation": 38, "fitness": 0.2091604449769475, "feedback": "The algorithm Enhanced_AOWO_DR got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.41456147008406097, 0.4380881802879294, 0.4411232733224121, 0.3790829320780107, 0.36315022464391855, 0.3721915180446297, 0.3694523177360248, 0.3793521022520644, 0.4052599994733199, 0.056032736993848475, 0.0026478360024105863, 0.03108399318737831, 0.10739418940727441, 0.07562266355080627, 0.047687411506873834, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06863119688025776, 0.11171305872751913, 0.10405661929972743, 0.10889913396974771, 0.1029697434931377, 0.10325288749731698, 0.11382806168677284, 0.07271981265954452, 0.11538021837029777, 0.07255397238338679, 0.08519764110445283, 0.09996454014499434, 0.09990096082947963, 0.08971584970155111, 0.08514171522547587, 0.09606838572190479, 0.1031027948501746, 0.08761041897973554, 0.9826764452364374, 0.9713170161143778, 0.9689583293303086, 0.9667391493889208, 0.9413000308922249, 0.9139980415580432, 0.9501046891564443, 0.981322027223446, 0.9632962320345336, 0.2668581952304998, 0.24650928630296398, 0.2534661140911971, 0.20991268633372606, 0.2669765492375197, 0.20040453710134776, 0.2539545720541645, 0.22515932887654977, 0.23143826496038633, 0.35223749539014315, 0.19816187721380896, 0.5509451410303778, 0.259201471685503, 0.1488595350337375, 0.3006571660686642, 0.21165737816713293, 0.17943058284326474, 0.16056163742888863, 0.2333634049214489, 0.1387063979688279, 0.13516070875975705, 0.10579874577699833, 0.10869143126635084, 0.12135821045069117, 0.1546971628080024, 0.1575882637054361, 0.14958099555257454, 0.12827152363338612, 0.1599302518092438, 0.2344531097404181, 0.1988263206168106, 0.22296359811146504, 0.17041268724462388, 0.23046993276073746, 0.23123997613661573, 0.24390464346304852, 9.999999999998899e-05, 0.0023709069936758143, 0.009917298795883878, 0.005617088268675019, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007078628917872587, 9.999999999998899e-05, 9.999999999998899e-05, 0.06938191184846143, 0.11425674414841691, 0.16866284447588442, 0.07274283847042484, 0.059928897694914274, 0.08759142100082484, 0.1796476011234116, 0.07289699399216898, 0.0364205434939906, 0.0033567389476105713, 0.0019931472574215015, 0.002950747249583996, 0.006331216550001795, 0.006243822395885723, 0.0074610249160579345, 0.011724504624099796, 0.00638381758618356, 0.004124265414518047, 0.06612602183014293, 0.07705982250932497, 0.0569901720288577, 0.0014525944423832149, 0.02692204395998854, 0.07972056916956949, 0.07023863298345445, 0.053577945931216675, 0.043902575297280255, 0.39430194192050727, 0.3905329193095277, 0.39435062771038276, 0.28574166550529567, 0.37748598758327134, 0.36176677725338324, 0.37719516635599837, 0.3903837515083164, 0.37895563089274054, 0.08236901667944097, 0.07629045043593619, 0.08043704738083757, 0.045524492888012746, 0.08428803780374272, 0.10298594168704911, 0.09577459629645213, 0.07933016797269243, 0.11061427249337374, 0.17173611518291587, 0.17139203159825067, 0.1597874908225998, 0.22426286674734575, 0.20908873028230512, 0.2513203233578507, 0.23238050724751924, 0.2648901368970412, 0.18314398858825454, 0.17467124616273777, 0.204427943656458, 0.2052379944652848, 0.31664006177714277, 0.20970340941460142, 0.250144740722833, 0.19891106043163853, 0.26200525019070875, 0.2474805540405257, 0.18131108817968733, 0.15373818715734122, 0.18706564100016565, 0.24645704529370527, 0.20896730003550779, 0.22052392765975215, 0.13858143329857575, 0.22152843579910209, 0.20535674551488492, 0.3403031030720466, 0.3309948710689792, 0.20104233814869676, 0.2308236065822281, 0.22003402632941593, 0.2658488175494216, 0.2976964722538099, 0.23098805804046507, 0.2418279649233226, 0.17241398442464229, 0.18030726629804683, 0.17977426029236288, 0.17337426050932137, 0.17115033638664134, 0.18489832493549452, 0.17810638592058936, 0.18227657171027767, 0.17599894980261566, 0.5078502880406321, 0.1721846286718901, 0.15208939038391223, 0.5572950060272117, 0.19616569998350464, 0.16979254092409224, 0.5588473062109707, 0.1694984950146312, 0.6176095080530728, 0.45152710741307245, 0.15451427279059604, 0.16787836298711778, 0.47972530412976777, 0.26361378926120316, 0.2814669496999329, 0.16420032575562415, 0.3320669632178559, 0.30288789494188095, 0.19087858731180318, 0.18262933060138076, 0.20488538756699937, 0.19798109758539228, 0.18409759320385322, 0.21044631299243277, 0.18383792893675432, 0.19183225552937078, 0.20165651749565194, 0.0732096526213385, 0.05331708381519329, 0.08362926024187001, 0.08631286456386988, 0.08773454687639493, 0.06272824505369723, 0.07185510401880546, 0.07044223694976881, 0.08256430959944905]}, "mutation_prompt": null}
{"id": "eb5c58a2-8a8f-44c7-b003-aa8ea9a1b77f", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "503287fc-faf0-4de2-a602-5bb89c410c20", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "0e5fbecf-f1ec-4277-837f-710fdd938cf5", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "dc173e63-01a3-4490-899f-4eca52015efb", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "4c0dcbb7-e5c8-4c69-9074-2f1b1ce03109", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "36c0e806-758d-4ca0-a77a-ed89b06bb225", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "26015e6e-7110-4773-bf64-bc3607a0701b", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "77471de2-e8c9-4f94-b43e-b4ea32ad7379", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "3f428675-b363-4371-b884-34855ba42ea6", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "66a5765c-13d9-466b-a43e-f3d74c94d9cd", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "29b1c52e-6040-4295-950f-71003d1699b9", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "066d8c7d-6343-480c-9be7-69a006db7ad1", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "4c66d870-efbb-4e1e-b769-0e08624e61d3", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "bb76d1e4-d84b-4b9c-9f6b-823c2771f50f", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "fdc62ce9-7989-4945-83fc-8c9b364c0081", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "df8ffe39-1e65-4dfa-a915-d28444e88816", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "d439c888-97d1-425d-b99d-ac55b10ce653", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "e0734910-3091-4fcb-9b33-775c889f6028", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "e523122a-4f30-4ee5-b582-4bc406cbd0b6", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "22accdb2-6810-40eb-b27c-3c43fd5b557b", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "b68ddb9c-9eca-44e9-bcdc-5445b26d566f", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "396a9156-f98e-4812-9751-69b9b296b07a", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "3a49ed6e-e2ba-4803-80b4-f0a6db8628d1", "solution": "import numpy as np\n\nclass Enhanced_DSWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def mutate_solution(self, solution):\n        mutation_factor = 0.1 * np.random.randn(self.dim)\n        return solution + mutation_factor\n\n    def perturb_solution(self, solution, factor):\n        perturbation = np.random.uniform(-factor, factor, self.dim)\n        return solution + perturbation\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                    self.whales[i] = self.mutate_solution(self.whales[i])  # Apply mutation\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n                    self.whales[i] = self.perturb_solution(self.whales[i], reduction_factor)  # Apply perturbation\n\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_DSWO", "description": "Enhanced Dynamic Scaling Whale Optimization introduces adaptive mutation and perturbation for improved exploration and exploitation balance.", "configspace": "", "generation": 61, "fitness": 0.19921044146168812, "feedback": "The algorithm Enhanced_DSWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.366049534965163, 0.40695252721201725, 0.3867441363320544, 0.33382385956859073, 0.3374097637790514, 0.3508482100917444, 0.3687751918840686, 0.37548741680169984, 0.34143138076367163, 9.999999999998899e-05, 0.009804955169238738, 0.004407558904182096, 0.03816451650442598, 9.999999999998899e-05, 0.01928763523680721, 0.007437530490581823, 9.999999999998899e-05, 9.999999999998899e-05, 0.0890506100021008, 0.06921938261059712, 0.09761021671100156, 0.1103535189235374, 0.09014412106548753, 0.10429613222889822, 0.07575320056630952, 0.08699334467099995, 0.08737647359149725, 0.07941355668949002, 0.07426514521319239, 0.07561632371181004, 0.10181210428248944, 0.08402999202704775, 0.08732841839993721, 0.08470282617274694, 0.09345711317602112, 0.09257661820068097, 0.9724317105028312, 0.9831725070915716, 0.9768819126754339, 0.9603877343604071, 0.967438958706887, 0.960772664250011, 0.9842881844466619, 0.9516527109449138, 0.9702200317683416, 0.20031436172111083, 0.22603615846249336, 0.2387806946675316, 0.20794649825521694, 0.23279784379785606, 0.2071448883827438, 0.27307156394932064, 0.21803529951920175, 0.22520186204770365, 0.29747996456175674, 0.32311093462891916, 0.3140939945299842, 0.20398460210825076, 0.29221149028283, 0.2104923470214951, 0.1903741660969236, 0.164168817257202, 0.22215713313588792, 0.1371553651396804, 0.1452841564876648, 0.16223238188778455, 0.12053694043261498, 0.11761510321530766, 0.09385620371945969, 0.1481388293344742, 0.12898814754799515, 0.1430626935956989, 0.1768838782422485, 0.1826485164654057, 0.15919925706290539, 0.16417536596338467, 0.1995023515334733, 0.19143946010912993, 0.13578812386514982, 0.18060456087578858, 0.17386587310994672, 0.0003971686208995573, 0.018081543210554663, 0.0009385439923708105, 0.015057391744118798, 0.009207142332329221, 9.999999999998899e-05, 0.004465368895319788, 9.999999999998899e-05, 0.04035946968304305, 0.09737358378243588, 0.11607506667344458, 0.0865482318563352, 0.06006315280385077, 0.06549282772597365, 0.08383108677412876, 0.07428496845528532, 0.08887901296935141, 0.07709222982853259, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0694105040175389, 0.05952799385032137, 0.0693677770850274, 0.03370165019768223, 0.051237276108276664, 0.036278992662925114, 0.055139468255900326, 0.05410724133228928, 0.05212225337907328, 0.349308246732679, 0.34987175969773765, 0.3526232329514012, 0.33595733498030556, 0.36492832137365216, 0.33229585661792826, 0.36190940816409445, 0.37435371821691565, 0.34616518549742625, 0.08726934189581226, 0.09178937844474144, 0.06864059633796493, 0.0724667849672298, 0.09149692163696943, 0.07598825648176555, 0.08863239116415267, 0.09659516878768393, 0.09708565930999613, 0.21488690197872506, 0.15906860822088997, 0.17769630775429301, 0.19602137436204747, 0.20844118636181797, 0.1984004538252091, 0.19604210773244435, 0.1436262498029377, 0.19577242348877522, 0.2637782462815096, 0.23885992612139162, 0.2458929233771583, 0.2558963865196452, 0.2652000587979467, 0.2811571807309642, 0.22489453892321132, 0.2536333024259395, 0.24334330743572385, 0.2119066000884715, 0.15397075219651013, 0.19495581687824848, 0.21365756392097757, 0.2191529959044357, 0.23024949177412946, 0.16235976204332148, 0.17672622176699793, 0.14961787715690567, 0.2083586638229682, 0.21090223630439509, 0.2247424478661143, 0.24802998434593726, 0.27810894273944353, 0.214095499073936, 0.22033552501041764, 0.24420064565969046, 0.21584852178898561, 0.18137519541209945, 0.18331146941935827, 0.17530953394315818, 0.17471431260693282, 0.17987013236285143, 0.1769416783705865, 0.18246340934455385, 0.18310502621531488, 0.177214534547409, 0.4620236104107185, 0.16759543192097315, 0.1499552771045355, 0.4952186686454154, 0.19508881765021324, 0.19464613036723055, 0.16798794281884888, 0.16887924476169014, 0.5092366452108968, 0.5024355185898337, 0.45622054399142686, 0.4405962535436415, 0.35019754496597, 0.27791444570578705, 0.19933618886840254, 0.10481548128406026, 0.16595712534723772, 0.33560846321746063, 0.17826007640187613, 0.17575642378531664, 0.18867115190259065, 0.17964003488417424, 0.17853947030451678, 0.19839851501490058, 0.2047162679012421, 0.18092173341179218, 0.1879547100897183, 0.0806696097158387, 0.08750000530707769, 0.07647076488725746, 0.07477919463737748, 0.08636076972554041, 0.08820017633266175, 0.08394763786959869, 0.08099087936210492, 0.07566120587771874]}, "mutation_prompt": null}
{"id": "f38cd690-e2d3-41bd-a8e2-904be29ace43", "solution": "import numpy as np\n\nclass Enhanced_MPWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution, elite):\n        return self.lower_bound + self.upper_bound - solution + 0.2 * (elite - solution)\n\n    def __call__(self, func):\n        evaluations = 0\n        phase_switch = self.budget // 3\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if evaluations < phase_switch:\n                    random_offset = np.random.normal(0, 1, self.dim)\n                    self.whales[i] = self.best_solution + self.dynamic_scale * random_offset\n                else:\n                    if np.random.rand() < 0.5:\n                        D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                        A = 2 * np.random.rand(self.dim) - 1\n                        self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                    else:\n                        elite = self.whales[np.random.randint(self.population_size)]\n                        opp_solution = self.oppositional_solution(self.whales[i], elite)\n                        D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                        A = 2 * np.random.rand(self.dim) - 1\n                        self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                self.whales[i] *= reduction_factor\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_MPWO", "description": "Enhanced Multi-Phase Whale Optimization leverages adaptive dynamic scaling, frequency-modulated exploration phases, and elite-guided opposition for superior convergence.", "configspace": "", "generation": 62, "fitness": 0.17426745302033894, "feedback": "The algorithm Enhanced_MPWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.30595478901299034, 0.2904191884224091, 0.32970319192986797, 0.30676706910179663, 0.2818159635508455, 0.31593719187067404, 0.309052910074452, 0.2954100176810973, 0.2790281672651296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.094763559545323, 0.07665883147163799, 0.08732618791458846, 0.08943702913974194, 0.06665142156029469, 0.06757165535123366, 0.06634384377256197, 0.06231717160128669, 0.0826443371859128, 0.08190377401574112, 0.0770189758926062, 0.06844866153057316, 0.08074159055030339, 0.04901588867953177, 0.08555929286784247, 0.07906078282830853, 0.07337447261584784, 0.06562595580700692, 0.9579811241692102, 0.9880011596531021, 0.9772226280853012, 0.9708403134371687, 0.9657367789105396, 0.9607152964839455, 0.9732928021364148, 0.9717781716739182, 0.9679282635224981, 0.1772473841898674, 0.15740213778224865, 0.1581123411519305, 0.1820925084519267, 0.17961763288991583, 0.16133139708518063, 0.1863698075758643, 0.1565589009849473, 0.16692690392629195, 0.2255399039403747, 0.20538585955253175, 0.204116999353957, 0.2056429245364979, 0.2407328191658843, 0.21753273591813604, 0.17893145892194973, 0.2244046518752696, 0.21158417044687305, 0.11293586598219552, 0.10857038652438022, 0.09960068951204126, 0.09260710110110015, 0.09207396102269283, 0.07332769826504715, 0.11082848595530781, 0.05325527833946575, 0.12594710744907822, 0.12173488844700842, 0.09162544980043641, 0.14333462362226068, 0.130693909408651, 0.12166341612038234, 0.11132958150320915, 0.17009699198580186, 0.08488093435266841, 0.11837564930676858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08387575077850795, 0.09608480913739736, 0.1388509862492605, 0.06717171543787515, 0.03327226253155113, 0.05597790299117111, 0.08207409222417716, 0.073912568697857, 0.09034827481564045, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04668691797010527, 0.02830204770798228, 0.042047337551648134, 0.030286868184653537, 0.051653298120251434, 0.038616796327762826, 0.03382457733760291, 0.036616251267712174, 0.03060515356566318, 0.30139680226932075, 0.3041936154333392, 0.3165792399412487, 0.29754951500700844, 0.2681265894632717, 0.32729503826532047, 0.30466026672768076, 0.29895340965549033, 0.3045217280447028, 0.08684762270930058, 0.0697975405150224, 0.08441168450963266, 0.07824005780784404, 0.09510664221224419, 0.09567588266646831, 0.08285264509568913, 0.10070866502896192, 0.1018957183673943, 0.14052903440006703, 0.1306084542713637, 0.17951706397678446, 0.12735730075183005, 0.15330256143355003, 0.12518476153590963, 0.1355201112587885, 0.12559809171636171, 0.1861892706631154, 0.24465869382077632, 0.22580165985225298, 0.23106258149805792, 0.23649774734795437, 0.22200028939346883, 0.22896032531499844, 0.21153051072219586, 0.25047194033857234, 0.2379087774755334, 0.178486171918941, 0.15414868962741934, 0.18026958937146287, 0.15046265335026088, 0.1632475581861481, 0.16749778912743973, 0.16449626691881336, 0.1767709931796826, 0.14501030115294866, 0.24322189504807834, 0.24491168887037773, 0.24971187740701817, 0.26113770866135944, 0.23502282931867313, 0.2325768011358148, 0.23095169643658986, 0.22910185662961835, 0.24674494318178153, 0.17347141919294573, 0.17052940963065244, 0.1722404193156708, 0.178291004189727, 0.19160847300992911, 0.1683056995131954, 0.1676719229393704, 0.17288936572691638, 0.16978095711704733, 0.3107678306531899, 0.12376297407783898, 0.15122033082594932, 0.3663707155565157, 0.1868254126325899, 0.1780605793493678, 0.11843774966101261, 0.170167447971746, 0.37413573548851453, 0.4241695376784568, 0.14494824157667685, 0.10965987411121736, 0.3500613298479407, 0.1670012028649942, 0.18786690433095632, 0.10259170034411835, 0.10304470846773639, 0.24875248887580947, 0.1981680122864573, 0.2006147133830417, 0.1840381476765568, 0.18085097704666675, 0.17702971419348668, 0.18165967814208628, 0.1795476109846631, 0.20245859507902364, 0.18001085666599848, 0.10680589747308189, 0.07526831591434857, 0.08606240966684509, 0.0692870781094791, 0.07359086705949469, 0.0874976028350315, 0.07774630087674106, 0.08060556900364901, 0.08524229537585548]}, "mutation_prompt": null}
{"id": "63e982a6-d5f2-4d58-a0bd-707329f60a62", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "feacb3d7-cc9b-4778-aac4-bc72596943d7", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "ce6a0d50-1f82-4e4e-8a9c-a2f79529a723", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "e4840abd-1589-4ba2-bdb4-501b4e9d180b", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "7d05f7de-1a22-4e85-8366-238ce994d3f2", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "4bb65b5e-b6d4-4b08-9cf3-4fe0a6fa0e8a", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "f8d0b17e-07e5-44a4-918f-94b43e6cc6e8", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "25679de9-d45f-4d81-927e-ac13f7b78b23", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "14ffaad9-c3b7-4f94-9ce9-ed3d48f102fd", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "fed9567f-bd10-4a79-affb-c0c77dd21d9b", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "cd0e5ad5-2ee2-4622-af23-a030e1c01daa", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "d175e2c5-21a9-470e-b151-607a2953b12b", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "246f188b-0d32-4280-9d7f-50ffdfa9f158", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "1506c99e-b87d-4e93-91e7-4e207a84188e", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "b4e94812-ffac-4d6e-b999-9b10d165a9a0", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "fd5e0efe-6b3c-4838-be9c-bc28de2968e8", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(30, self.budget // 5)\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5  # Introduce a dynamic scaling factor\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Calculate fitness for current population\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            # Update best solution found\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n            \n            # Dimensionality reduction factor adapts over iterations\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Update whales with dynamic scaling and oppositional learning\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Dynamic scaling factor for exploration/exploitation\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    # Update using best solution with dynamic scaling\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1  # Coefficient for exploration/exploitation balance\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    # Update using oppositional solution\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # Apply dimensionality reduction\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                \n                # Ensure search space boundaries\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced Adaptive Oppositional Whale Optimization with Dynamic Scaling introduces dynamic scaling for better balance between exploration and exploitation, adapting more efficiently to the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.513181397189534, 0.5749471636104233, 0.6444660255535644, 0.5631651473063463, 0.5086703984854632, 0.5184884162248704, 0.5557698224881416, 0.5688320632977891, 0.5662260000273951, 0.14657890677184315, 0.15219477375450807, 0.24386979157368982, 0.27192437315058027, 0.305906129434537, 0.2673141191346603, 0.15079743487355413, 0.16067279373144505, 0.2769123705594321, 0.12401026383754576, 0.2867659668741791, 0.32192023634984335, 0.2683636048986411, 0.16575537192445022, 0.17362899173013047, 0.12130804140371687, 0.11678779018963814, 0.1258868859831257, 0.16922321410136576, 0.0626061630100383, 0.3255936856374486, 0.11988954801983787, 0.1412811910392363, 0.15263541497318134, 0.11429251127404527, 0.11796241667498342, 0.1280201986744951, 0.8811316853964976, 0.9149464846861257, 0.8862016368366032, 0.8703802821923292, 0.872896790654676, 0.9003072044195544, 0.8710990929216583, 0.8851844106300135, 0.9027140960556973, 0.22620846421172192, 0.2595442987765052, 0.26489907642937593, 0.3320447277936672, 0.19953500240342859, 0.24781068730989686, 0.25414567832579604, 0.2650675654052116, 0.2469019474699301, 0.169439682188402, 0.14338049008933507, 0.14181084250195475, 0.20936113863862793, 0.1490429549375789, 0.19769644361131578, 0.1315344836676473, 0.1755977938216673, 0.13292160805884634, 0.19546058002973776, 0.1374794309010916, 0.15254575292878947, 0.15262447370184762, 0.1964014878067054, 0.24405745261703682, 0.3475438595307212, 0.17617434435007995, 0.2230973558018975, 0.1982522256576954, 9.999999999998899e-05, 0.14889659570323932, 0.16587448378536152, 0.16221103111020896, 0.1742658683765851, 0.21391673758846375, 0.12422626460779107, 0.13947936917062886, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330933707769498, 0.00462458544847999, 9.999999999998899e-05, 0.00024926857014251347, 0.0012195678915092323, 9.999999999998899e-05, 0.06275055558399367, 0.0688076815205515, 0.03382922214213091, 0.06591214693371805, 0.07007279011813394, 0.007808433692294781, 0.0695395094846274, 0.157994298840746, 0.0785121869388733, 0.03709760220009117, 0.017174344463369406, 0.07807250592066628, 0.0849975210224938, 0.03350891204562034, 0.01078292488888366, 0.07711690133969584, 0.08284890301996206, 0.07742322742420771, 0.010558830549950438, 0.06239707846707021, 0.14122008531182362, 0.06079425544124295, 0.09080560033651253, 0.06011560593481213, 0.0885721116138457, 0.15517671808566214, 0.0759816501270274, 0.07712054465907836, 0.36417132218109693, 0.4120137724735392, 0.4216068747473052, 0.3978770356432224, 0.4178009295055596, 0.40210362700269975, 0.41569591551889706, 0.41608685150359426, 0.4214358922529632, 0.04363076263538046, 0.0186050272771372, 0.07486881241487842, 0.08292428994407797, 0.03180971335725713, 0.07868672552635436, 0.06503330261580031, 0.08261943895113522, 0.08154853886209434, 0.17296051003315738, 0.17771506684157956, 0.16696183129834208, 0.18873256872543986, 0.19416769603148898, 0.13544634972957315, 0.17233453272617594, 0.18133969697733388, 0.18825435080223918, 0.19385540160532655, 0.24204540608030234, 0.18160596575561827, 0.18634032256991717, 0.18808031356994115, 0.17116595981161353, 0.2397829994608266, 0.30061569593849335, 0.1531942600538121, 0.17911507506354096, 0.17640144661138324, 0.12236752710172205, 0.15536086517368786, 0.151295439373048, 0.2966365894223002, 0.19852838287947538, 0.15206243340607328, 0.13954339952503636, 0.21689356429068263, 0.21092260875714053, 0.25377333750157927, 0.22819930381600717, 0.20230807390841954, 0.2991304154988139, 0.24445772950068145, 0.25669416460331873, 0.2196528862307956, 0.17764585489489493, 0.17915590953407523, 0.18514869623689845, 0.17605546519269388, 0.20992325062063566, 0.18029301563437727, 0.18000723795627438, 0.1714377090463095, 0.22079697587599723, 0.13242768550605433, 0.12464914811479666, 0.1494615527925609, 0.6770653282496808, 0.19871561622728895, 0.19565152212995673, 0.1660943020235398, 0.1670548955662674, 0.797943343579818, 0.4074599288736134, 0.15221884198247027, 0.20623632602995046, 0.19631130206090597, 0.27204935055776314, 0.2040286009444381, 0.10331028855220736, 0.10324928327487837, 0.2959054987559804, 0.17060429949078648, 0.2016408668708567, 0.1997580573278035, 0.20405738008023222, 0.21749221471874036, 0.18286903085872763, 0.21341294971627112, 0.1944037242644303, 0.18739287419556117, 0.06508273962355982, 0.04771096104360373, 0.05675233934505308, 0.07183059913393519, 0.0698610353412894, 0.0830918132438041, 0.07023944303206553, 0.0573445385092608, 0.05593473479143307]}, "mutation_prompt": null}
{"id": "f3c4abb8-4a61-4319-9e7e-c9f087548704", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Adaptive population size\n            self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n            self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced AOWO with Adaptive Population and Convergence Pressure leverages adaptive population size and pressure towards convergence to improve exploration and exploitation balance.", "configspace": "", "generation": 79, "fitness": 0.22023645142319132, "feedback": "The algorithm Enhanced_AOWO_DR got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "780bc9df-0581-4b9c-9982-7036bf3a4992", "metadata": {"aucs": [0.5554906676510472, 0.5756167768546291, 0.5459861016082688, 0.5111135115997182, 0.5401217466846092, 0.5041781376779716, 0.5563941938122392, 0.5724110845714034, 0.5329361418570966, 0.08801945977054948, 0.10074888713017283, 0.15027179498270105, 0.13174047936058797, 0.06851096942757251, 0.13677899154789852, 0.13517858006310668, 0.14776169137027406, 0.10269228066517821, 0.19389178044179534, 0.22150372565241327, 0.2987887549017152, 0.19486766105447628, 0.2259776093917557, 0.26807222955995436, 0.24135164054699731, 0.26281479760430515, 0.2886140501667207, 0.1616398181033546, 0.20839790279931225, 0.19038910696279876, 0.20678796663796306, 0.21076822941887108, 0.21309704420240205, 0.22437003719037996, 0.21770287076688233, 0.18129068656440273, 0.93092119702604, 0.9399066648859183, 0.9559081123379362, 0.9264596874704524, 0.9372291017960763, 0.9321951787600271, 0.9561411394477144, 0.9576764763865988, 0.9263175128127782, 0.2232222043267481, 0.2603194974679006, 0.23670786232143037, 0.23591071142221332, 0.22307977513017085, 0.325281621890651, 0.23600953479536146, 0.25709966224747594, 0.23006151662287178, 0.21102746287337815, 0.1663494749086194, 0.17082327099194083, 0.30012199086764024, 0.32957827247466287, 0.20754911361486106, 0.15075572158789818, 0.1612881618981522, 0.14442102535620138, 0.17944040116413185, 0.16400599251986892, 0.1200620488935199, 0.22705743861577832, 0.2379449533037863, 0.1584331040456869, 0.13376489866880514, 0.1611860417229094, 0.1788624633402216, 0.13892528137016635, 0.10391196419040538, 0.12588724738352375, 0.12514991994713887, 0.12264272085516281, 0.15982463006803171, 0.08808962873082815, 0.12348705916623692, 0.18461938613832984, 0.002163982973713785, 0.022918347494278013, 0.015126829038751954, 0.012986969200214804, 9.999999999998899e-05, 0.00019756142502569407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06752404799216205, 0.05741101865248888, 0.08365590393737199, 0.07781561135719528, 0.02785309153756621, 0.019828747165281158, 0.08003869484071657, 0.047276765654157504, 0.03970559037453991, 0.006443187734698985, 0.013107375027363033, 0.020171760767163094, 0.01412338021633408, 0.007563257967839854, 0.0192389833979576, 0.007193209427284852, 0.01287511168695854, 0.02514974549245741, 0.12775278225233744, 0.09115389056051448, 0.12230829520583009, 0.11636261952569715, 0.004949006296563807, 0.10668207438054522, 0.12216498308857171, 0.11864315371327416, 0.07876976217003284, 0.3912662950512201, 0.4135914662651826, 0.392302570776243, 0.38802303197485344, 0.3614998522569304, 0.39160854095376085, 0.38158391948433, 0.3861770576850089, 0.4038495720280345, 0.09740530414552762, 0.04354315160211952, 0.050420659599923257, 0.09850547740109594, 0.05567409736593831, 0.12455736426715136, 0.0843980930662287, 0.07292074383720482, 0.07293910536073567, 0.1736576816833384, 0.14251790436561718, 0.15052323130198753, 0.16796252495535768, 0.17382197402500277, 0.15160534597444641, 0.22891280699161087, 0.18259972073677777, 0.17772878143014714, 0.2293361286625527, 0.22814238257517716, 0.255873586348058, 0.18558808166605634, 0.21869418163888787, 0.1918158745344023, 0.2300814613907114, 0.2917444266908349, 0.2358035265548587, 0.14415767754967712, 0.18175752781245402, 0.1817047414476597, 0.15060068906854762, 0.16330996028825884, 0.201908324021163, 0.2251006862543512, 0.1571476469263785, 0.1643403260541283, 0.21459416335225756, 0.15824695954891543, 0.19468010634088773, 0.18435729093892894, 0.25636537817862115, 0.21161621957600185, 0.2084240385396292, 0.21515250392874907, 0.22196583462191777, 0.21416505014293896, 0.19006903936463848, 0.2018884919857199, 0.2218928763169311, 0.2017340977196237, 0.1986010386301733, 0.1924329542653953, 0.20847031013621597, 0.38643245215736444, 0.5229391710623136, 0.13938662148300152, 0.14996449064469908, 0.5477543782726997, 0.19755777799029994, 0.16831815456232324, 0.4256178315782905, 0.16671722851706638, 0.641932906795684, 0.3915926012269503, 0.2198655524147397, 0.16550827622502673, 0.31809420967187785, 0.31035273900994476, 0.1997043305965811, 0.1293699051707894, 0.11327270188988259, 0.30605849093282145, 0.18309734579031478, 0.1822111396853494, 0.17343312276325218, 0.18035035365557273, 0.2099248103261352, 0.18218349954244262, 0.21493814308998282, 0.18829608063342063, 0.19005169118439003, 0.0705765770258786, 0.07184041029596533, 0.08234348043523765, 0.08439015469466526, 0.07152470214823481, 0.07090286978510862, 0.07711155134331205, 0.07081651717876736, 0.07379109896879932]}, "mutation_prompt": null}
{"id": "9748bdbf-b162-41d7-8d50-9cd340deb3c1", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Adaptive population size\n            self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n            self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced AOWO with Adaptive Population and Convergence Pressure leverages adaptive population size and pressure towards convergence to improve exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c4abb8-4a61-4319-9e7e-c9f087548704", "metadata": {"aucs": [0.5554906676510472, 0.5756167768546291, 0.5459861016082688, 0.5111135115997182, 0.5401217466846092, 0.5041781376779716, 0.5563941938122392, 0.5724110845714034, 0.5329361418570966, 0.08801945977054948, 0.10074888713017283, 0.15027179498270105, 0.13174047936058797, 0.06851096942757251, 0.13677899154789852, 0.13517858006310668, 0.14776169137027406, 0.10269228066517821, 0.19389178044179534, 0.22150372565241327, 0.2987887549017152, 0.19486766105447628, 0.2259776093917557, 0.26807222955995436, 0.24135164054699731, 0.26281479760430515, 0.2886140501667207, 0.1616398181033546, 0.20839790279931225, 0.19038910696279876, 0.20678796663796306, 0.21076822941887108, 0.21309704420240205, 0.22437003719037996, 0.21770287076688233, 0.18129068656440273, 0.93092119702604, 0.9399066648859183, 0.9559081123379362, 0.9264596874704524, 0.9372291017960763, 0.9321951787600271, 0.9561411394477144, 0.9576764763865988, 0.9263175128127782, 0.2232222043267481, 0.2603194974679006, 0.23670786232143037, 0.23591071142221332, 0.22307977513017085, 0.325281621890651, 0.23600953479536146, 0.25709966224747594, 0.23006151662287178, 0.21102746287337815, 0.1663494749086194, 0.17082327099194083, 0.30012199086764024, 0.32957827247466287, 0.20754911361486106, 0.15075572158789818, 0.1612881618981522, 0.14442102535620138, 0.17944040116413185, 0.16400599251986892, 0.1200620488935199, 0.22705743861577832, 0.2379449533037863, 0.1584331040456869, 0.13376489866880514, 0.1611860417229094, 0.1788624633402216, 0.13892528137016635, 0.10391196419040538, 0.12588724738352375, 0.12514991994713887, 0.12264272085516281, 0.15982463006803171, 0.08808962873082815, 0.12348705916623692, 0.18461938613832984, 0.002163982973713785, 0.022918347494278013, 0.015126829038751954, 0.012986969200214804, 9.999999999998899e-05, 0.00019756142502569407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06752404799216205, 0.05741101865248888, 0.08365590393737199, 0.07781561135719528, 0.02785309153756621, 0.019828747165281158, 0.08003869484071657, 0.047276765654157504, 0.03970559037453991, 0.006443187734698985, 0.013107375027363033, 0.020171760767163094, 0.01412338021633408, 0.007563257967839854, 0.0192389833979576, 0.007193209427284852, 0.01287511168695854, 0.02514974549245741, 0.12775278225233744, 0.09115389056051448, 0.12230829520583009, 0.11636261952569715, 0.004949006296563807, 0.10668207438054522, 0.12216498308857171, 0.11864315371327416, 0.07876976217003284, 0.3912662950512201, 0.4135914662651826, 0.392302570776243, 0.38802303197485344, 0.3614998522569304, 0.39160854095376085, 0.38158391948433, 0.3861770576850089, 0.4038495720280345, 0.09740530414552762, 0.04354315160211952, 0.050420659599923257, 0.09850547740109594, 0.05567409736593831, 0.12455736426715136, 0.0843980930662287, 0.07292074383720482, 0.07293910536073567, 0.1736576816833384, 0.14251790436561718, 0.15052323130198753, 0.16796252495535768, 0.17382197402500277, 0.15160534597444641, 0.22891280699161087, 0.18259972073677777, 0.17772878143014714, 0.2293361286625527, 0.22814238257517716, 0.255873586348058, 0.18558808166605634, 0.21869418163888787, 0.1918158745344023, 0.2300814613907114, 0.2917444266908349, 0.2358035265548587, 0.14415767754967712, 0.18175752781245402, 0.1817047414476597, 0.15060068906854762, 0.16330996028825884, 0.201908324021163, 0.2251006862543512, 0.1571476469263785, 0.1643403260541283, 0.21459416335225756, 0.15824695954891543, 0.19468010634088773, 0.18435729093892894, 0.25636537817862115, 0.21161621957600185, 0.2084240385396292, 0.21515250392874907, 0.22196583462191777, 0.21416505014293896, 0.19006903936463848, 0.2018884919857199, 0.2218928763169311, 0.2017340977196237, 0.1986010386301733, 0.1924329542653953, 0.20847031013621597, 0.38643245215736444, 0.5229391710623136, 0.13938662148300152, 0.14996449064469908, 0.5477543782726997, 0.19755777799029994, 0.16831815456232324, 0.4256178315782905, 0.16671722851706638, 0.641932906795684, 0.3915926012269503, 0.2198655524147397, 0.16550827622502673, 0.31809420967187785, 0.31035273900994476, 0.1997043305965811, 0.1293699051707894, 0.11327270188988259, 0.30605849093282145, 0.18309734579031478, 0.1822111396853494, 0.17343312276325218, 0.18035035365557273, 0.2099248103261352, 0.18218349954244262, 0.21493814308998282, 0.18829608063342063, 0.19005169118439003, 0.0705765770258786, 0.07184041029596533, 0.08234348043523765, 0.08439015469466526, 0.07152470214823481, 0.07090286978510862, 0.07711155134331205, 0.07081651717876736, 0.07379109896879932]}, "mutation_prompt": null}
{"id": "6cf99966-71ec-47fa-a821-baa41ad6cefb", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Adaptive population size\n            self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n            self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced AOWO with Adaptive Population and Convergence Pressure leverages adaptive population size and pressure towards convergence to improve exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c4abb8-4a61-4319-9e7e-c9f087548704", "metadata": {"aucs": [0.5554906676510472, 0.5756167768546291, 0.5459861016082688, 0.5111135115997182, 0.5401217466846092, 0.5041781376779716, 0.5563941938122392, 0.5724110845714034, 0.5329361418570966, 0.08801945977054948, 0.10074888713017283, 0.15027179498270105, 0.13174047936058797, 0.06851096942757251, 0.13677899154789852, 0.13517858006310668, 0.14776169137027406, 0.10269228066517821, 0.19389178044179534, 0.22150372565241327, 0.2987887549017152, 0.19486766105447628, 0.2259776093917557, 0.26807222955995436, 0.24135164054699731, 0.26281479760430515, 0.2886140501667207, 0.1616398181033546, 0.20839790279931225, 0.19038910696279876, 0.20678796663796306, 0.21076822941887108, 0.21309704420240205, 0.22437003719037996, 0.21770287076688233, 0.18129068656440273, 0.93092119702604, 0.9399066648859183, 0.9559081123379362, 0.9264596874704524, 0.9372291017960763, 0.9321951787600271, 0.9561411394477144, 0.9576764763865988, 0.9263175128127782, 0.2232222043267481, 0.2603194974679006, 0.23670786232143037, 0.23591071142221332, 0.22307977513017085, 0.325281621890651, 0.23600953479536146, 0.25709966224747594, 0.23006151662287178, 0.21102746287337815, 0.1663494749086194, 0.17082327099194083, 0.30012199086764024, 0.32957827247466287, 0.20754911361486106, 0.15075572158789818, 0.1612881618981522, 0.14442102535620138, 0.17944040116413185, 0.16400599251986892, 0.1200620488935199, 0.22705743861577832, 0.2379449533037863, 0.1584331040456869, 0.13376489866880514, 0.1611860417229094, 0.1788624633402216, 0.13892528137016635, 0.10391196419040538, 0.12588724738352375, 0.12514991994713887, 0.12264272085516281, 0.15982463006803171, 0.08808962873082815, 0.12348705916623692, 0.18461938613832984, 0.002163982973713785, 0.022918347494278013, 0.015126829038751954, 0.012986969200214804, 9.999999999998899e-05, 0.00019756142502569407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06752404799216205, 0.05741101865248888, 0.08365590393737199, 0.07781561135719528, 0.02785309153756621, 0.019828747165281158, 0.08003869484071657, 0.047276765654157504, 0.03970559037453991, 0.006443187734698985, 0.013107375027363033, 0.020171760767163094, 0.01412338021633408, 0.007563257967839854, 0.0192389833979576, 0.007193209427284852, 0.01287511168695854, 0.02514974549245741, 0.12775278225233744, 0.09115389056051448, 0.12230829520583009, 0.11636261952569715, 0.004949006296563807, 0.10668207438054522, 0.12216498308857171, 0.11864315371327416, 0.07876976217003284, 0.3912662950512201, 0.4135914662651826, 0.392302570776243, 0.38802303197485344, 0.3614998522569304, 0.39160854095376085, 0.38158391948433, 0.3861770576850089, 0.4038495720280345, 0.09740530414552762, 0.04354315160211952, 0.050420659599923257, 0.09850547740109594, 0.05567409736593831, 0.12455736426715136, 0.0843980930662287, 0.07292074383720482, 0.07293910536073567, 0.1736576816833384, 0.14251790436561718, 0.15052323130198753, 0.16796252495535768, 0.17382197402500277, 0.15160534597444641, 0.22891280699161087, 0.18259972073677777, 0.17772878143014714, 0.2293361286625527, 0.22814238257517716, 0.255873586348058, 0.18558808166605634, 0.21869418163888787, 0.1918158745344023, 0.2300814613907114, 0.2917444266908349, 0.2358035265548587, 0.14415767754967712, 0.18175752781245402, 0.1817047414476597, 0.15060068906854762, 0.16330996028825884, 0.201908324021163, 0.2251006862543512, 0.1571476469263785, 0.1643403260541283, 0.21459416335225756, 0.15824695954891543, 0.19468010634088773, 0.18435729093892894, 0.25636537817862115, 0.21161621957600185, 0.2084240385396292, 0.21515250392874907, 0.22196583462191777, 0.21416505014293896, 0.19006903936463848, 0.2018884919857199, 0.2218928763169311, 0.2017340977196237, 0.1986010386301733, 0.1924329542653953, 0.20847031013621597, 0.38643245215736444, 0.5229391710623136, 0.13938662148300152, 0.14996449064469908, 0.5477543782726997, 0.19755777799029994, 0.16831815456232324, 0.4256178315782905, 0.16671722851706638, 0.641932906795684, 0.3915926012269503, 0.2198655524147397, 0.16550827622502673, 0.31809420967187785, 0.31035273900994476, 0.1997043305965811, 0.1293699051707894, 0.11327270188988259, 0.30605849093282145, 0.18309734579031478, 0.1822111396853494, 0.17343312276325218, 0.18035035365557273, 0.2099248103261352, 0.18218349954244262, 0.21493814308998282, 0.18829608063342063, 0.19005169118439003, 0.0705765770258786, 0.07184041029596533, 0.08234348043523765, 0.08439015469466526, 0.07152470214823481, 0.07090286978510862, 0.07711155134331205, 0.07081651717876736, 0.07379109896879932]}, "mutation_prompt": null}
{"id": "5b1f666d-33f9-49dd-9f8f-1d4fdc1c642b", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Adaptive population size\n            self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n            self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced AOWO with Adaptive Population and Convergence Pressure leverages adaptive population size and pressure towards convergence to improve exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c4abb8-4a61-4319-9e7e-c9f087548704", "metadata": {"aucs": [0.5554906676510472, 0.5756167768546291, 0.5459861016082688, 0.5111135115997182, 0.5401217466846092, 0.5041781376779716, 0.5563941938122392, 0.5724110845714034, 0.5329361418570966, 0.08801945977054948, 0.10074888713017283, 0.15027179498270105, 0.13174047936058797, 0.06851096942757251, 0.13677899154789852, 0.13517858006310668, 0.14776169137027406, 0.10269228066517821, 0.19389178044179534, 0.22150372565241327, 0.2987887549017152, 0.19486766105447628, 0.2259776093917557, 0.26807222955995436, 0.24135164054699731, 0.26281479760430515, 0.2886140501667207, 0.1616398181033546, 0.20839790279931225, 0.19038910696279876, 0.20678796663796306, 0.21076822941887108, 0.21309704420240205, 0.22437003719037996, 0.21770287076688233, 0.18129068656440273, 0.93092119702604, 0.9399066648859183, 0.9559081123379362, 0.9264596874704524, 0.9372291017960763, 0.9321951787600271, 0.9561411394477144, 0.9576764763865988, 0.9263175128127782, 0.2232222043267481, 0.2603194974679006, 0.23670786232143037, 0.23591071142221332, 0.22307977513017085, 0.325281621890651, 0.23600953479536146, 0.25709966224747594, 0.23006151662287178, 0.21102746287337815, 0.1663494749086194, 0.17082327099194083, 0.30012199086764024, 0.32957827247466287, 0.20754911361486106, 0.15075572158789818, 0.1612881618981522, 0.14442102535620138, 0.17944040116413185, 0.16400599251986892, 0.1200620488935199, 0.22705743861577832, 0.2379449533037863, 0.1584331040456869, 0.13376489866880514, 0.1611860417229094, 0.1788624633402216, 0.13892528137016635, 0.10391196419040538, 0.12588724738352375, 0.12514991994713887, 0.12264272085516281, 0.15982463006803171, 0.08808962873082815, 0.12348705916623692, 0.18461938613832984, 0.002163982973713785, 0.022918347494278013, 0.015126829038751954, 0.012986969200214804, 9.999999999998899e-05, 0.00019756142502569407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06752404799216205, 0.05741101865248888, 0.08365590393737199, 0.07781561135719528, 0.02785309153756621, 0.019828747165281158, 0.08003869484071657, 0.047276765654157504, 0.03970559037453991, 0.006443187734698985, 0.013107375027363033, 0.020171760767163094, 0.01412338021633408, 0.007563257967839854, 0.0192389833979576, 0.007193209427284852, 0.01287511168695854, 0.02514974549245741, 0.12775278225233744, 0.09115389056051448, 0.12230829520583009, 0.11636261952569715, 0.004949006296563807, 0.10668207438054522, 0.12216498308857171, 0.11864315371327416, 0.07876976217003284, 0.3912662950512201, 0.4135914662651826, 0.392302570776243, 0.38802303197485344, 0.3614998522569304, 0.39160854095376085, 0.38158391948433, 0.3861770576850089, 0.4038495720280345, 0.09740530414552762, 0.04354315160211952, 0.050420659599923257, 0.09850547740109594, 0.05567409736593831, 0.12455736426715136, 0.0843980930662287, 0.07292074383720482, 0.07293910536073567, 0.1736576816833384, 0.14251790436561718, 0.15052323130198753, 0.16796252495535768, 0.17382197402500277, 0.15160534597444641, 0.22891280699161087, 0.18259972073677777, 0.17772878143014714, 0.2293361286625527, 0.22814238257517716, 0.255873586348058, 0.18558808166605634, 0.21869418163888787, 0.1918158745344023, 0.2300814613907114, 0.2917444266908349, 0.2358035265548587, 0.14415767754967712, 0.18175752781245402, 0.1817047414476597, 0.15060068906854762, 0.16330996028825884, 0.201908324021163, 0.2251006862543512, 0.1571476469263785, 0.1643403260541283, 0.21459416335225756, 0.15824695954891543, 0.19468010634088773, 0.18435729093892894, 0.25636537817862115, 0.21161621957600185, 0.2084240385396292, 0.21515250392874907, 0.22196583462191777, 0.21416505014293896, 0.19006903936463848, 0.2018884919857199, 0.2218928763169311, 0.2017340977196237, 0.1986010386301733, 0.1924329542653953, 0.20847031013621597, 0.38643245215736444, 0.5229391710623136, 0.13938662148300152, 0.14996449064469908, 0.5477543782726997, 0.19755777799029994, 0.16831815456232324, 0.4256178315782905, 0.16671722851706638, 0.641932906795684, 0.3915926012269503, 0.2198655524147397, 0.16550827622502673, 0.31809420967187785, 0.31035273900994476, 0.1997043305965811, 0.1293699051707894, 0.11327270188988259, 0.30605849093282145, 0.18309734579031478, 0.1822111396853494, 0.17343312276325218, 0.18035035365557273, 0.2099248103261352, 0.18218349954244262, 0.21493814308998282, 0.18829608063342063, 0.19005169118439003, 0.0705765770258786, 0.07184041029596533, 0.08234348043523765, 0.08439015469466526, 0.07152470214823481, 0.07090286978510862, 0.07711155134331205, 0.07081651717876736, 0.07379109896879932]}, "mutation_prompt": null}
{"id": "c1ff44c5-9339-4ab3-b676-30b361b41e6a", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Adaptive population size\n            self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n            self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced AOWO with Adaptive Population and Convergence Pressure leverages adaptive population size and pressure towards convergence to improve exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c4abb8-4a61-4319-9e7e-c9f087548704", "metadata": {"aucs": [0.5554906676510472, 0.5756167768546291, 0.5459861016082688, 0.5111135115997182, 0.5401217466846092, 0.5041781376779716, 0.5563941938122392, 0.5724110845714034, 0.5329361418570966, 0.08801945977054948, 0.10074888713017283, 0.15027179498270105, 0.13174047936058797, 0.06851096942757251, 0.13677899154789852, 0.13517858006310668, 0.14776169137027406, 0.10269228066517821, 0.19389178044179534, 0.22150372565241327, 0.2987887549017152, 0.19486766105447628, 0.2259776093917557, 0.26807222955995436, 0.24135164054699731, 0.26281479760430515, 0.2886140501667207, 0.1616398181033546, 0.20839790279931225, 0.19038910696279876, 0.20678796663796306, 0.21076822941887108, 0.21309704420240205, 0.22437003719037996, 0.21770287076688233, 0.18129068656440273, 0.93092119702604, 0.9399066648859183, 0.9559081123379362, 0.9264596874704524, 0.9372291017960763, 0.9321951787600271, 0.9561411394477144, 0.9576764763865988, 0.9263175128127782, 0.2232222043267481, 0.2603194974679006, 0.23670786232143037, 0.23591071142221332, 0.22307977513017085, 0.325281621890651, 0.23600953479536146, 0.25709966224747594, 0.23006151662287178, 0.21102746287337815, 0.1663494749086194, 0.17082327099194083, 0.30012199086764024, 0.32957827247466287, 0.20754911361486106, 0.15075572158789818, 0.1612881618981522, 0.14442102535620138, 0.17944040116413185, 0.16400599251986892, 0.1200620488935199, 0.22705743861577832, 0.2379449533037863, 0.1584331040456869, 0.13376489866880514, 0.1611860417229094, 0.1788624633402216, 0.13892528137016635, 0.10391196419040538, 0.12588724738352375, 0.12514991994713887, 0.12264272085516281, 0.15982463006803171, 0.08808962873082815, 0.12348705916623692, 0.18461938613832984, 0.002163982973713785, 0.022918347494278013, 0.015126829038751954, 0.012986969200214804, 9.999999999998899e-05, 0.00019756142502569407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06752404799216205, 0.05741101865248888, 0.08365590393737199, 0.07781561135719528, 0.02785309153756621, 0.019828747165281158, 0.08003869484071657, 0.047276765654157504, 0.03970559037453991, 0.006443187734698985, 0.013107375027363033, 0.020171760767163094, 0.01412338021633408, 0.007563257967839854, 0.0192389833979576, 0.007193209427284852, 0.01287511168695854, 0.02514974549245741, 0.12775278225233744, 0.09115389056051448, 0.12230829520583009, 0.11636261952569715, 0.004949006296563807, 0.10668207438054522, 0.12216498308857171, 0.11864315371327416, 0.07876976217003284, 0.3912662950512201, 0.4135914662651826, 0.392302570776243, 0.38802303197485344, 0.3614998522569304, 0.39160854095376085, 0.38158391948433, 0.3861770576850089, 0.4038495720280345, 0.09740530414552762, 0.04354315160211952, 0.050420659599923257, 0.09850547740109594, 0.05567409736593831, 0.12455736426715136, 0.0843980930662287, 0.07292074383720482, 0.07293910536073567, 0.1736576816833384, 0.14251790436561718, 0.15052323130198753, 0.16796252495535768, 0.17382197402500277, 0.15160534597444641, 0.22891280699161087, 0.18259972073677777, 0.17772878143014714, 0.2293361286625527, 0.22814238257517716, 0.255873586348058, 0.18558808166605634, 0.21869418163888787, 0.1918158745344023, 0.2300814613907114, 0.2917444266908349, 0.2358035265548587, 0.14415767754967712, 0.18175752781245402, 0.1817047414476597, 0.15060068906854762, 0.16330996028825884, 0.201908324021163, 0.2251006862543512, 0.1571476469263785, 0.1643403260541283, 0.21459416335225756, 0.15824695954891543, 0.19468010634088773, 0.18435729093892894, 0.25636537817862115, 0.21161621957600185, 0.2084240385396292, 0.21515250392874907, 0.22196583462191777, 0.21416505014293896, 0.19006903936463848, 0.2018884919857199, 0.2218928763169311, 0.2017340977196237, 0.1986010386301733, 0.1924329542653953, 0.20847031013621597, 0.38643245215736444, 0.5229391710623136, 0.13938662148300152, 0.14996449064469908, 0.5477543782726997, 0.19755777799029994, 0.16831815456232324, 0.4256178315782905, 0.16671722851706638, 0.641932906795684, 0.3915926012269503, 0.2198655524147397, 0.16550827622502673, 0.31809420967187785, 0.31035273900994476, 0.1997043305965811, 0.1293699051707894, 0.11327270188988259, 0.30605849093282145, 0.18309734579031478, 0.1822111396853494, 0.17343312276325218, 0.18035035365557273, 0.2099248103261352, 0.18218349954244262, 0.21493814308998282, 0.18829608063342063, 0.19005169118439003, 0.0705765770258786, 0.07184041029596533, 0.08234348043523765, 0.08439015469466526, 0.07152470214823481, 0.07090286978510862, 0.07711155134331205, 0.07081651717876736, 0.07379109896879932]}, "mutation_prompt": null}
{"id": "9c79ab7a-b8da-4622-96b8-b381c4fcd0b2", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Adaptive population size\n            self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n            self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced AOWO with Adaptive Population and Convergence Pressure leverages adaptive population size and pressure towards convergence to improve exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c4abb8-4a61-4319-9e7e-c9f087548704", "metadata": {"aucs": [0.5554906676510472, 0.5756167768546291, 0.5459861016082688, 0.5111135115997182, 0.5401217466846092, 0.5041781376779716, 0.5563941938122392, 0.5724110845714034, 0.5329361418570966, 0.08801945977054948, 0.10074888713017283, 0.15027179498270105, 0.13174047936058797, 0.06851096942757251, 0.13677899154789852, 0.13517858006310668, 0.14776169137027406, 0.10269228066517821, 0.19389178044179534, 0.22150372565241327, 0.2987887549017152, 0.19486766105447628, 0.2259776093917557, 0.26807222955995436, 0.24135164054699731, 0.26281479760430515, 0.2886140501667207, 0.1616398181033546, 0.20839790279931225, 0.19038910696279876, 0.20678796663796306, 0.21076822941887108, 0.21309704420240205, 0.22437003719037996, 0.21770287076688233, 0.18129068656440273, 0.93092119702604, 0.9399066648859183, 0.9559081123379362, 0.9264596874704524, 0.9372291017960763, 0.9321951787600271, 0.9561411394477144, 0.9576764763865988, 0.9263175128127782, 0.2232222043267481, 0.2603194974679006, 0.23670786232143037, 0.23591071142221332, 0.22307977513017085, 0.325281621890651, 0.23600953479536146, 0.25709966224747594, 0.23006151662287178, 0.21102746287337815, 0.1663494749086194, 0.17082327099194083, 0.30012199086764024, 0.32957827247466287, 0.20754911361486106, 0.15075572158789818, 0.1612881618981522, 0.14442102535620138, 0.17944040116413185, 0.16400599251986892, 0.1200620488935199, 0.22705743861577832, 0.2379449533037863, 0.1584331040456869, 0.13376489866880514, 0.1611860417229094, 0.1788624633402216, 0.13892528137016635, 0.10391196419040538, 0.12588724738352375, 0.12514991994713887, 0.12264272085516281, 0.15982463006803171, 0.08808962873082815, 0.12348705916623692, 0.18461938613832984, 0.002163982973713785, 0.022918347494278013, 0.015126829038751954, 0.012986969200214804, 9.999999999998899e-05, 0.00019756142502569407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06752404799216205, 0.05741101865248888, 0.08365590393737199, 0.07781561135719528, 0.02785309153756621, 0.019828747165281158, 0.08003869484071657, 0.047276765654157504, 0.03970559037453991, 0.006443187734698985, 0.013107375027363033, 0.020171760767163094, 0.01412338021633408, 0.007563257967839854, 0.0192389833979576, 0.007193209427284852, 0.01287511168695854, 0.02514974549245741, 0.12775278225233744, 0.09115389056051448, 0.12230829520583009, 0.11636261952569715, 0.004949006296563807, 0.10668207438054522, 0.12216498308857171, 0.11864315371327416, 0.07876976217003284, 0.3912662950512201, 0.4135914662651826, 0.392302570776243, 0.38802303197485344, 0.3614998522569304, 0.39160854095376085, 0.38158391948433, 0.3861770576850089, 0.4038495720280345, 0.09740530414552762, 0.04354315160211952, 0.050420659599923257, 0.09850547740109594, 0.05567409736593831, 0.12455736426715136, 0.0843980930662287, 0.07292074383720482, 0.07293910536073567, 0.1736576816833384, 0.14251790436561718, 0.15052323130198753, 0.16796252495535768, 0.17382197402500277, 0.15160534597444641, 0.22891280699161087, 0.18259972073677777, 0.17772878143014714, 0.2293361286625527, 0.22814238257517716, 0.255873586348058, 0.18558808166605634, 0.21869418163888787, 0.1918158745344023, 0.2300814613907114, 0.2917444266908349, 0.2358035265548587, 0.14415767754967712, 0.18175752781245402, 0.1817047414476597, 0.15060068906854762, 0.16330996028825884, 0.201908324021163, 0.2251006862543512, 0.1571476469263785, 0.1643403260541283, 0.21459416335225756, 0.15824695954891543, 0.19468010634088773, 0.18435729093892894, 0.25636537817862115, 0.21161621957600185, 0.2084240385396292, 0.21515250392874907, 0.22196583462191777, 0.21416505014293896, 0.19006903936463848, 0.2018884919857199, 0.2218928763169311, 0.2017340977196237, 0.1986010386301733, 0.1924329542653953, 0.20847031013621597, 0.38643245215736444, 0.5229391710623136, 0.13938662148300152, 0.14996449064469908, 0.5477543782726997, 0.19755777799029994, 0.16831815456232324, 0.4256178315782905, 0.16671722851706638, 0.641932906795684, 0.3915926012269503, 0.2198655524147397, 0.16550827622502673, 0.31809420967187785, 0.31035273900994476, 0.1997043305965811, 0.1293699051707894, 0.11327270188988259, 0.30605849093282145, 0.18309734579031478, 0.1822111396853494, 0.17343312276325218, 0.18035035365557273, 0.2099248103261352, 0.18218349954244262, 0.21493814308998282, 0.18829608063342063, 0.19005169118439003, 0.0705765770258786, 0.07184041029596533, 0.08234348043523765, 0.08439015469466526, 0.07152470214823481, 0.07090286978510862, 0.07711155134331205, 0.07081651717876736, 0.07379109896879932]}, "mutation_prompt": null}
{"id": "d10d39a9-c46e-42e7-a911-4cbd71dae594", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Adaptive population size\n            self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n            self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced AOWO with Adaptive Population and Convergence Pressure leverages adaptive population size and pressure towards convergence to improve exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c4abb8-4a61-4319-9e7e-c9f087548704", "metadata": {"aucs": [0.5554906676510472, 0.5756167768546291, 0.5459861016082688, 0.5111135115997182, 0.5401217466846092, 0.5041781376779716, 0.5563941938122392, 0.5724110845714034, 0.5329361418570966, 0.08801945977054948, 0.10074888713017283, 0.15027179498270105, 0.13174047936058797, 0.06851096942757251, 0.13677899154789852, 0.13517858006310668, 0.14776169137027406, 0.10269228066517821, 0.19389178044179534, 0.22150372565241327, 0.2987887549017152, 0.19486766105447628, 0.2259776093917557, 0.26807222955995436, 0.24135164054699731, 0.26281479760430515, 0.2886140501667207, 0.1616398181033546, 0.20839790279931225, 0.19038910696279876, 0.20678796663796306, 0.21076822941887108, 0.21309704420240205, 0.22437003719037996, 0.21770287076688233, 0.18129068656440273, 0.93092119702604, 0.9399066648859183, 0.9559081123379362, 0.9264596874704524, 0.9372291017960763, 0.9321951787600271, 0.9561411394477144, 0.9576764763865988, 0.9263175128127782, 0.2232222043267481, 0.2603194974679006, 0.23670786232143037, 0.23591071142221332, 0.22307977513017085, 0.325281621890651, 0.23600953479536146, 0.25709966224747594, 0.23006151662287178, 0.21102746287337815, 0.1663494749086194, 0.17082327099194083, 0.30012199086764024, 0.32957827247466287, 0.20754911361486106, 0.15075572158789818, 0.1612881618981522, 0.14442102535620138, 0.17944040116413185, 0.16400599251986892, 0.1200620488935199, 0.22705743861577832, 0.2379449533037863, 0.1584331040456869, 0.13376489866880514, 0.1611860417229094, 0.1788624633402216, 0.13892528137016635, 0.10391196419040538, 0.12588724738352375, 0.12514991994713887, 0.12264272085516281, 0.15982463006803171, 0.08808962873082815, 0.12348705916623692, 0.18461938613832984, 0.002163982973713785, 0.022918347494278013, 0.015126829038751954, 0.012986969200214804, 9.999999999998899e-05, 0.00019756142502569407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06752404799216205, 0.05741101865248888, 0.08365590393737199, 0.07781561135719528, 0.02785309153756621, 0.019828747165281158, 0.08003869484071657, 0.047276765654157504, 0.03970559037453991, 0.006443187734698985, 0.013107375027363033, 0.020171760767163094, 0.01412338021633408, 0.007563257967839854, 0.0192389833979576, 0.007193209427284852, 0.01287511168695854, 0.02514974549245741, 0.12775278225233744, 0.09115389056051448, 0.12230829520583009, 0.11636261952569715, 0.004949006296563807, 0.10668207438054522, 0.12216498308857171, 0.11864315371327416, 0.07876976217003284, 0.3912662950512201, 0.4135914662651826, 0.392302570776243, 0.38802303197485344, 0.3614998522569304, 0.39160854095376085, 0.38158391948433, 0.3861770576850089, 0.4038495720280345, 0.09740530414552762, 0.04354315160211952, 0.050420659599923257, 0.09850547740109594, 0.05567409736593831, 0.12455736426715136, 0.0843980930662287, 0.07292074383720482, 0.07293910536073567, 0.1736576816833384, 0.14251790436561718, 0.15052323130198753, 0.16796252495535768, 0.17382197402500277, 0.15160534597444641, 0.22891280699161087, 0.18259972073677777, 0.17772878143014714, 0.2293361286625527, 0.22814238257517716, 0.255873586348058, 0.18558808166605634, 0.21869418163888787, 0.1918158745344023, 0.2300814613907114, 0.2917444266908349, 0.2358035265548587, 0.14415767754967712, 0.18175752781245402, 0.1817047414476597, 0.15060068906854762, 0.16330996028825884, 0.201908324021163, 0.2251006862543512, 0.1571476469263785, 0.1643403260541283, 0.21459416335225756, 0.15824695954891543, 0.19468010634088773, 0.18435729093892894, 0.25636537817862115, 0.21161621957600185, 0.2084240385396292, 0.21515250392874907, 0.22196583462191777, 0.21416505014293896, 0.19006903936463848, 0.2018884919857199, 0.2218928763169311, 0.2017340977196237, 0.1986010386301733, 0.1924329542653953, 0.20847031013621597, 0.38643245215736444, 0.5229391710623136, 0.13938662148300152, 0.14996449064469908, 0.5477543782726997, 0.19755777799029994, 0.16831815456232324, 0.4256178315782905, 0.16671722851706638, 0.641932906795684, 0.3915926012269503, 0.2198655524147397, 0.16550827622502673, 0.31809420967187785, 0.31035273900994476, 0.1997043305965811, 0.1293699051707894, 0.11327270188988259, 0.30605849093282145, 0.18309734579031478, 0.1822111396853494, 0.17343312276325218, 0.18035035365557273, 0.2099248103261352, 0.18218349954244262, 0.21493814308998282, 0.18829608063342063, 0.19005169118439003, 0.0705765770258786, 0.07184041029596533, 0.08234348043523765, 0.08439015469466526, 0.07152470214823481, 0.07090286978510862, 0.07711155134331205, 0.07081651717876736, 0.07379109896879932]}, "mutation_prompt": null}
{"id": "bda0bdf9-ad3b-4600-86d5-e5c1921e9cc5", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Adaptive population size\n            self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n            self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced AOWO with Adaptive Population and Convergence Pressure leverages adaptive population size and pressure towards convergence to improve exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c4abb8-4a61-4319-9e7e-c9f087548704", "metadata": {"aucs": [0.5554906676510472, 0.5756167768546291, 0.5459861016082688, 0.5111135115997182, 0.5401217466846092, 0.5041781376779716, 0.5563941938122392, 0.5724110845714034, 0.5329361418570966, 0.08801945977054948, 0.10074888713017283, 0.15027179498270105, 0.13174047936058797, 0.06851096942757251, 0.13677899154789852, 0.13517858006310668, 0.14776169137027406, 0.10269228066517821, 0.19389178044179534, 0.22150372565241327, 0.2987887549017152, 0.19486766105447628, 0.2259776093917557, 0.26807222955995436, 0.24135164054699731, 0.26281479760430515, 0.2886140501667207, 0.1616398181033546, 0.20839790279931225, 0.19038910696279876, 0.20678796663796306, 0.21076822941887108, 0.21309704420240205, 0.22437003719037996, 0.21770287076688233, 0.18129068656440273, 0.93092119702604, 0.9399066648859183, 0.9559081123379362, 0.9264596874704524, 0.9372291017960763, 0.9321951787600271, 0.9561411394477144, 0.9576764763865988, 0.9263175128127782, 0.2232222043267481, 0.2603194974679006, 0.23670786232143037, 0.23591071142221332, 0.22307977513017085, 0.325281621890651, 0.23600953479536146, 0.25709966224747594, 0.23006151662287178, 0.21102746287337815, 0.1663494749086194, 0.17082327099194083, 0.30012199086764024, 0.32957827247466287, 0.20754911361486106, 0.15075572158789818, 0.1612881618981522, 0.14442102535620138, 0.17944040116413185, 0.16400599251986892, 0.1200620488935199, 0.22705743861577832, 0.2379449533037863, 0.1584331040456869, 0.13376489866880514, 0.1611860417229094, 0.1788624633402216, 0.13892528137016635, 0.10391196419040538, 0.12588724738352375, 0.12514991994713887, 0.12264272085516281, 0.15982463006803171, 0.08808962873082815, 0.12348705916623692, 0.18461938613832984, 0.002163982973713785, 0.022918347494278013, 0.015126829038751954, 0.012986969200214804, 9.999999999998899e-05, 0.00019756142502569407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06752404799216205, 0.05741101865248888, 0.08365590393737199, 0.07781561135719528, 0.02785309153756621, 0.019828747165281158, 0.08003869484071657, 0.047276765654157504, 0.03970559037453991, 0.006443187734698985, 0.013107375027363033, 0.020171760767163094, 0.01412338021633408, 0.007563257967839854, 0.0192389833979576, 0.007193209427284852, 0.01287511168695854, 0.02514974549245741, 0.12775278225233744, 0.09115389056051448, 0.12230829520583009, 0.11636261952569715, 0.004949006296563807, 0.10668207438054522, 0.12216498308857171, 0.11864315371327416, 0.07876976217003284, 0.3912662950512201, 0.4135914662651826, 0.392302570776243, 0.38802303197485344, 0.3614998522569304, 0.39160854095376085, 0.38158391948433, 0.3861770576850089, 0.4038495720280345, 0.09740530414552762, 0.04354315160211952, 0.050420659599923257, 0.09850547740109594, 0.05567409736593831, 0.12455736426715136, 0.0843980930662287, 0.07292074383720482, 0.07293910536073567, 0.1736576816833384, 0.14251790436561718, 0.15052323130198753, 0.16796252495535768, 0.17382197402500277, 0.15160534597444641, 0.22891280699161087, 0.18259972073677777, 0.17772878143014714, 0.2293361286625527, 0.22814238257517716, 0.255873586348058, 0.18558808166605634, 0.21869418163888787, 0.1918158745344023, 0.2300814613907114, 0.2917444266908349, 0.2358035265548587, 0.14415767754967712, 0.18175752781245402, 0.1817047414476597, 0.15060068906854762, 0.16330996028825884, 0.201908324021163, 0.2251006862543512, 0.1571476469263785, 0.1643403260541283, 0.21459416335225756, 0.15824695954891543, 0.19468010634088773, 0.18435729093892894, 0.25636537817862115, 0.21161621957600185, 0.2084240385396292, 0.21515250392874907, 0.22196583462191777, 0.21416505014293896, 0.19006903936463848, 0.2018884919857199, 0.2218928763169311, 0.2017340977196237, 0.1986010386301733, 0.1924329542653953, 0.20847031013621597, 0.38643245215736444, 0.5229391710623136, 0.13938662148300152, 0.14996449064469908, 0.5477543782726997, 0.19755777799029994, 0.16831815456232324, 0.4256178315782905, 0.16671722851706638, 0.641932906795684, 0.3915926012269503, 0.2198655524147397, 0.16550827622502673, 0.31809420967187785, 0.31035273900994476, 0.1997043305965811, 0.1293699051707894, 0.11327270188988259, 0.30605849093282145, 0.18309734579031478, 0.1822111396853494, 0.17343312276325218, 0.18035035365557273, 0.2099248103261352, 0.18218349954244262, 0.21493814308998282, 0.18829608063342063, 0.19005169118439003, 0.0705765770258786, 0.07184041029596533, 0.08234348043523765, 0.08439015469466526, 0.07152470214823481, 0.07090286978510862, 0.07711155134331205, 0.07081651717876736, 0.07379109896879932]}, "mutation_prompt": null}
{"id": "e5c28c7a-ec96-4608-a3eb-fed412842e48", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Adaptive population size\n            self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n            self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced AOWO with Adaptive Population and Convergence Pressure leverages adaptive population size and pressure towards convergence to improve exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c4abb8-4a61-4319-9e7e-c9f087548704", "metadata": {"aucs": [0.5554906676510472, 0.5756167768546291, 0.5459861016082688, 0.5111135115997182, 0.5401217466846092, 0.5041781376779716, 0.5563941938122392, 0.5724110845714034, 0.5329361418570966, 0.08801945977054948, 0.10074888713017283, 0.15027179498270105, 0.13174047936058797, 0.06851096942757251, 0.13677899154789852, 0.13517858006310668, 0.14776169137027406, 0.10269228066517821, 0.19389178044179534, 0.22150372565241327, 0.2987887549017152, 0.19486766105447628, 0.2259776093917557, 0.26807222955995436, 0.24135164054699731, 0.26281479760430515, 0.2886140501667207, 0.1616398181033546, 0.20839790279931225, 0.19038910696279876, 0.20678796663796306, 0.21076822941887108, 0.21309704420240205, 0.22437003719037996, 0.21770287076688233, 0.18129068656440273, 0.93092119702604, 0.9399066648859183, 0.9559081123379362, 0.9264596874704524, 0.9372291017960763, 0.9321951787600271, 0.9561411394477144, 0.9576764763865988, 0.9263175128127782, 0.2232222043267481, 0.2603194974679006, 0.23670786232143037, 0.23591071142221332, 0.22307977513017085, 0.325281621890651, 0.23600953479536146, 0.25709966224747594, 0.23006151662287178, 0.21102746287337815, 0.1663494749086194, 0.17082327099194083, 0.30012199086764024, 0.32957827247466287, 0.20754911361486106, 0.15075572158789818, 0.1612881618981522, 0.14442102535620138, 0.17944040116413185, 0.16400599251986892, 0.1200620488935199, 0.22705743861577832, 0.2379449533037863, 0.1584331040456869, 0.13376489866880514, 0.1611860417229094, 0.1788624633402216, 0.13892528137016635, 0.10391196419040538, 0.12588724738352375, 0.12514991994713887, 0.12264272085516281, 0.15982463006803171, 0.08808962873082815, 0.12348705916623692, 0.18461938613832984, 0.002163982973713785, 0.022918347494278013, 0.015126829038751954, 0.012986969200214804, 9.999999999998899e-05, 0.00019756142502569407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06752404799216205, 0.05741101865248888, 0.08365590393737199, 0.07781561135719528, 0.02785309153756621, 0.019828747165281158, 0.08003869484071657, 0.047276765654157504, 0.03970559037453991, 0.006443187734698985, 0.013107375027363033, 0.020171760767163094, 0.01412338021633408, 0.007563257967839854, 0.0192389833979576, 0.007193209427284852, 0.01287511168695854, 0.02514974549245741, 0.12775278225233744, 0.09115389056051448, 0.12230829520583009, 0.11636261952569715, 0.004949006296563807, 0.10668207438054522, 0.12216498308857171, 0.11864315371327416, 0.07876976217003284, 0.3912662950512201, 0.4135914662651826, 0.392302570776243, 0.38802303197485344, 0.3614998522569304, 0.39160854095376085, 0.38158391948433, 0.3861770576850089, 0.4038495720280345, 0.09740530414552762, 0.04354315160211952, 0.050420659599923257, 0.09850547740109594, 0.05567409736593831, 0.12455736426715136, 0.0843980930662287, 0.07292074383720482, 0.07293910536073567, 0.1736576816833384, 0.14251790436561718, 0.15052323130198753, 0.16796252495535768, 0.17382197402500277, 0.15160534597444641, 0.22891280699161087, 0.18259972073677777, 0.17772878143014714, 0.2293361286625527, 0.22814238257517716, 0.255873586348058, 0.18558808166605634, 0.21869418163888787, 0.1918158745344023, 0.2300814613907114, 0.2917444266908349, 0.2358035265548587, 0.14415767754967712, 0.18175752781245402, 0.1817047414476597, 0.15060068906854762, 0.16330996028825884, 0.201908324021163, 0.2251006862543512, 0.1571476469263785, 0.1643403260541283, 0.21459416335225756, 0.15824695954891543, 0.19468010634088773, 0.18435729093892894, 0.25636537817862115, 0.21161621957600185, 0.2084240385396292, 0.21515250392874907, 0.22196583462191777, 0.21416505014293896, 0.19006903936463848, 0.2018884919857199, 0.2218928763169311, 0.2017340977196237, 0.1986010386301733, 0.1924329542653953, 0.20847031013621597, 0.38643245215736444, 0.5229391710623136, 0.13938662148300152, 0.14996449064469908, 0.5477543782726997, 0.19755777799029994, 0.16831815456232324, 0.4256178315782905, 0.16671722851706638, 0.641932906795684, 0.3915926012269503, 0.2198655524147397, 0.16550827622502673, 0.31809420967187785, 0.31035273900994476, 0.1997043305965811, 0.1293699051707894, 0.11327270188988259, 0.30605849093282145, 0.18309734579031478, 0.1822111396853494, 0.17343312276325218, 0.18035035365557273, 0.2099248103261352, 0.18218349954244262, 0.21493814308998282, 0.18829608063342063, 0.19005169118439003, 0.0705765770258786, 0.07184041029596533, 0.08234348043523765, 0.08439015469466526, 0.07152470214823481, 0.07090286978510862, 0.07711155134331205, 0.07081651717876736, 0.07379109896879932]}, "mutation_prompt": null}
{"id": "cda29cfc-50a2-48b2-8075-cc27dcc338fe", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Adaptive population size\n            self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n            self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced AOWO with Adaptive Population and Convergence Pressure leverages adaptive population size and pressure towards convergence to improve exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c4abb8-4a61-4319-9e7e-c9f087548704", "metadata": {"aucs": [0.5554906676510472, 0.5756167768546291, 0.5459861016082688, 0.5111135115997182, 0.5401217466846092, 0.5041781376779716, 0.5563941938122392, 0.5724110845714034, 0.5329361418570966, 0.08801945977054948, 0.10074888713017283, 0.15027179498270105, 0.13174047936058797, 0.06851096942757251, 0.13677899154789852, 0.13517858006310668, 0.14776169137027406, 0.10269228066517821, 0.19389178044179534, 0.22150372565241327, 0.2987887549017152, 0.19486766105447628, 0.2259776093917557, 0.26807222955995436, 0.24135164054699731, 0.26281479760430515, 0.2886140501667207, 0.1616398181033546, 0.20839790279931225, 0.19038910696279876, 0.20678796663796306, 0.21076822941887108, 0.21309704420240205, 0.22437003719037996, 0.21770287076688233, 0.18129068656440273, 0.93092119702604, 0.9399066648859183, 0.9559081123379362, 0.9264596874704524, 0.9372291017960763, 0.9321951787600271, 0.9561411394477144, 0.9576764763865988, 0.9263175128127782, 0.2232222043267481, 0.2603194974679006, 0.23670786232143037, 0.23591071142221332, 0.22307977513017085, 0.325281621890651, 0.23600953479536146, 0.25709966224747594, 0.23006151662287178, 0.21102746287337815, 0.1663494749086194, 0.17082327099194083, 0.30012199086764024, 0.32957827247466287, 0.20754911361486106, 0.15075572158789818, 0.1612881618981522, 0.14442102535620138, 0.17944040116413185, 0.16400599251986892, 0.1200620488935199, 0.22705743861577832, 0.2379449533037863, 0.1584331040456869, 0.13376489866880514, 0.1611860417229094, 0.1788624633402216, 0.13892528137016635, 0.10391196419040538, 0.12588724738352375, 0.12514991994713887, 0.12264272085516281, 0.15982463006803171, 0.08808962873082815, 0.12348705916623692, 0.18461938613832984, 0.002163982973713785, 0.022918347494278013, 0.015126829038751954, 0.012986969200214804, 9.999999999998899e-05, 0.00019756142502569407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06752404799216205, 0.05741101865248888, 0.08365590393737199, 0.07781561135719528, 0.02785309153756621, 0.019828747165281158, 0.08003869484071657, 0.047276765654157504, 0.03970559037453991, 0.006443187734698985, 0.013107375027363033, 0.020171760767163094, 0.01412338021633408, 0.007563257967839854, 0.0192389833979576, 0.007193209427284852, 0.01287511168695854, 0.02514974549245741, 0.12775278225233744, 0.09115389056051448, 0.12230829520583009, 0.11636261952569715, 0.004949006296563807, 0.10668207438054522, 0.12216498308857171, 0.11864315371327416, 0.07876976217003284, 0.3912662950512201, 0.4135914662651826, 0.392302570776243, 0.38802303197485344, 0.3614998522569304, 0.39160854095376085, 0.38158391948433, 0.3861770576850089, 0.4038495720280345, 0.09740530414552762, 0.04354315160211952, 0.050420659599923257, 0.09850547740109594, 0.05567409736593831, 0.12455736426715136, 0.0843980930662287, 0.07292074383720482, 0.07293910536073567, 0.1736576816833384, 0.14251790436561718, 0.15052323130198753, 0.16796252495535768, 0.17382197402500277, 0.15160534597444641, 0.22891280699161087, 0.18259972073677777, 0.17772878143014714, 0.2293361286625527, 0.22814238257517716, 0.255873586348058, 0.18558808166605634, 0.21869418163888787, 0.1918158745344023, 0.2300814613907114, 0.2917444266908349, 0.2358035265548587, 0.14415767754967712, 0.18175752781245402, 0.1817047414476597, 0.15060068906854762, 0.16330996028825884, 0.201908324021163, 0.2251006862543512, 0.1571476469263785, 0.1643403260541283, 0.21459416335225756, 0.15824695954891543, 0.19468010634088773, 0.18435729093892894, 0.25636537817862115, 0.21161621957600185, 0.2084240385396292, 0.21515250392874907, 0.22196583462191777, 0.21416505014293896, 0.19006903936463848, 0.2018884919857199, 0.2218928763169311, 0.2017340977196237, 0.1986010386301733, 0.1924329542653953, 0.20847031013621597, 0.38643245215736444, 0.5229391710623136, 0.13938662148300152, 0.14996449064469908, 0.5477543782726997, 0.19755777799029994, 0.16831815456232324, 0.4256178315782905, 0.16671722851706638, 0.641932906795684, 0.3915926012269503, 0.2198655524147397, 0.16550827622502673, 0.31809420967187785, 0.31035273900994476, 0.1997043305965811, 0.1293699051707894, 0.11327270188988259, 0.30605849093282145, 0.18309734579031478, 0.1822111396853494, 0.17343312276325218, 0.18035035365557273, 0.2099248103261352, 0.18218349954244262, 0.21493814308998282, 0.18829608063342063, 0.19005169118439003, 0.0705765770258786, 0.07184041029596533, 0.08234348043523765, 0.08439015469466526, 0.07152470214823481, 0.07090286978510862, 0.07711155134331205, 0.07081651717876736, 0.07379109896879932]}, "mutation_prompt": null}
{"id": "744c08c9-c08e-47de-88c2-f92ae7b87f4c", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Adaptive population size\n            self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n            self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced AOWO with Adaptive Population and Convergence Pressure leverages adaptive population size and pressure towards convergence to improve exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c4abb8-4a61-4319-9e7e-c9f087548704", "metadata": {"aucs": [0.5554906676510472, 0.5756167768546291, 0.5459861016082688, 0.5111135115997182, 0.5401217466846092, 0.5041781376779716, 0.5563941938122392, 0.5724110845714034, 0.5329361418570966, 0.08801945977054948, 0.10074888713017283, 0.15027179498270105, 0.13174047936058797, 0.06851096942757251, 0.13677899154789852, 0.13517858006310668, 0.14776169137027406, 0.10269228066517821, 0.19389178044179534, 0.22150372565241327, 0.2987887549017152, 0.19486766105447628, 0.2259776093917557, 0.26807222955995436, 0.24135164054699731, 0.26281479760430515, 0.2886140501667207, 0.1616398181033546, 0.20839790279931225, 0.19038910696279876, 0.20678796663796306, 0.21076822941887108, 0.21309704420240205, 0.22437003719037996, 0.21770287076688233, 0.18129068656440273, 0.93092119702604, 0.9399066648859183, 0.9559081123379362, 0.9264596874704524, 0.9372291017960763, 0.9321951787600271, 0.9561411394477144, 0.9576764763865988, 0.9263175128127782, 0.2232222043267481, 0.2603194974679006, 0.23670786232143037, 0.23591071142221332, 0.22307977513017085, 0.325281621890651, 0.23600953479536146, 0.25709966224747594, 0.23006151662287178, 0.21102746287337815, 0.1663494749086194, 0.17082327099194083, 0.30012199086764024, 0.32957827247466287, 0.20754911361486106, 0.15075572158789818, 0.1612881618981522, 0.14442102535620138, 0.17944040116413185, 0.16400599251986892, 0.1200620488935199, 0.22705743861577832, 0.2379449533037863, 0.1584331040456869, 0.13376489866880514, 0.1611860417229094, 0.1788624633402216, 0.13892528137016635, 0.10391196419040538, 0.12588724738352375, 0.12514991994713887, 0.12264272085516281, 0.15982463006803171, 0.08808962873082815, 0.12348705916623692, 0.18461938613832984, 0.002163982973713785, 0.022918347494278013, 0.015126829038751954, 0.012986969200214804, 9.999999999998899e-05, 0.00019756142502569407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06752404799216205, 0.05741101865248888, 0.08365590393737199, 0.07781561135719528, 0.02785309153756621, 0.019828747165281158, 0.08003869484071657, 0.047276765654157504, 0.03970559037453991, 0.006443187734698985, 0.013107375027363033, 0.020171760767163094, 0.01412338021633408, 0.007563257967839854, 0.0192389833979576, 0.007193209427284852, 0.01287511168695854, 0.02514974549245741, 0.12775278225233744, 0.09115389056051448, 0.12230829520583009, 0.11636261952569715, 0.004949006296563807, 0.10668207438054522, 0.12216498308857171, 0.11864315371327416, 0.07876976217003284, 0.3912662950512201, 0.4135914662651826, 0.392302570776243, 0.38802303197485344, 0.3614998522569304, 0.39160854095376085, 0.38158391948433, 0.3861770576850089, 0.4038495720280345, 0.09740530414552762, 0.04354315160211952, 0.050420659599923257, 0.09850547740109594, 0.05567409736593831, 0.12455736426715136, 0.0843980930662287, 0.07292074383720482, 0.07293910536073567, 0.1736576816833384, 0.14251790436561718, 0.15052323130198753, 0.16796252495535768, 0.17382197402500277, 0.15160534597444641, 0.22891280699161087, 0.18259972073677777, 0.17772878143014714, 0.2293361286625527, 0.22814238257517716, 0.255873586348058, 0.18558808166605634, 0.21869418163888787, 0.1918158745344023, 0.2300814613907114, 0.2917444266908349, 0.2358035265548587, 0.14415767754967712, 0.18175752781245402, 0.1817047414476597, 0.15060068906854762, 0.16330996028825884, 0.201908324021163, 0.2251006862543512, 0.1571476469263785, 0.1643403260541283, 0.21459416335225756, 0.15824695954891543, 0.19468010634088773, 0.18435729093892894, 0.25636537817862115, 0.21161621957600185, 0.2084240385396292, 0.21515250392874907, 0.22196583462191777, 0.21416505014293896, 0.19006903936463848, 0.2018884919857199, 0.2218928763169311, 0.2017340977196237, 0.1986010386301733, 0.1924329542653953, 0.20847031013621597, 0.38643245215736444, 0.5229391710623136, 0.13938662148300152, 0.14996449064469908, 0.5477543782726997, 0.19755777799029994, 0.16831815456232324, 0.4256178315782905, 0.16671722851706638, 0.641932906795684, 0.3915926012269503, 0.2198655524147397, 0.16550827622502673, 0.31809420967187785, 0.31035273900994476, 0.1997043305965811, 0.1293699051707894, 0.11327270188988259, 0.30605849093282145, 0.18309734579031478, 0.1822111396853494, 0.17343312276325218, 0.18035035365557273, 0.2099248103261352, 0.18218349954244262, 0.21493814308998282, 0.18829608063342063, 0.19005169118439003, 0.0705765770258786, 0.07184041029596533, 0.08234348043523765, 0.08439015469466526, 0.07152470214823481, 0.07090286978510862, 0.07711155134331205, 0.07081651717876736, 0.07379109896879932]}, "mutation_prompt": null}
{"id": "9ed35445-2c16-425d-90e7-0bdfab862349", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Adaptive population size\n            self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n            self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced AOWO with Adaptive Population and Convergence Pressure leverages adaptive population size and pressure towards convergence to improve exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c4abb8-4a61-4319-9e7e-c9f087548704", "metadata": {"aucs": [0.5554906676510472, 0.5756167768546291, 0.5459861016082688, 0.5111135115997182, 0.5401217466846092, 0.5041781376779716, 0.5563941938122392, 0.5724110845714034, 0.5329361418570966, 0.08801945977054948, 0.10074888713017283, 0.15027179498270105, 0.13174047936058797, 0.06851096942757251, 0.13677899154789852, 0.13517858006310668, 0.14776169137027406, 0.10269228066517821, 0.19389178044179534, 0.22150372565241327, 0.2987887549017152, 0.19486766105447628, 0.2259776093917557, 0.26807222955995436, 0.24135164054699731, 0.26281479760430515, 0.2886140501667207, 0.1616398181033546, 0.20839790279931225, 0.19038910696279876, 0.20678796663796306, 0.21076822941887108, 0.21309704420240205, 0.22437003719037996, 0.21770287076688233, 0.18129068656440273, 0.93092119702604, 0.9399066648859183, 0.9559081123379362, 0.9264596874704524, 0.9372291017960763, 0.9321951787600271, 0.9561411394477144, 0.9576764763865988, 0.9263175128127782, 0.2232222043267481, 0.2603194974679006, 0.23670786232143037, 0.23591071142221332, 0.22307977513017085, 0.325281621890651, 0.23600953479536146, 0.25709966224747594, 0.23006151662287178, 0.21102746287337815, 0.1663494749086194, 0.17082327099194083, 0.30012199086764024, 0.32957827247466287, 0.20754911361486106, 0.15075572158789818, 0.1612881618981522, 0.14442102535620138, 0.17944040116413185, 0.16400599251986892, 0.1200620488935199, 0.22705743861577832, 0.2379449533037863, 0.1584331040456869, 0.13376489866880514, 0.1611860417229094, 0.1788624633402216, 0.13892528137016635, 0.10391196419040538, 0.12588724738352375, 0.12514991994713887, 0.12264272085516281, 0.15982463006803171, 0.08808962873082815, 0.12348705916623692, 0.18461938613832984, 0.002163982973713785, 0.022918347494278013, 0.015126829038751954, 0.012986969200214804, 9.999999999998899e-05, 0.00019756142502569407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06752404799216205, 0.05741101865248888, 0.08365590393737199, 0.07781561135719528, 0.02785309153756621, 0.019828747165281158, 0.08003869484071657, 0.047276765654157504, 0.03970559037453991, 0.006443187734698985, 0.013107375027363033, 0.020171760767163094, 0.01412338021633408, 0.007563257967839854, 0.0192389833979576, 0.007193209427284852, 0.01287511168695854, 0.02514974549245741, 0.12775278225233744, 0.09115389056051448, 0.12230829520583009, 0.11636261952569715, 0.004949006296563807, 0.10668207438054522, 0.12216498308857171, 0.11864315371327416, 0.07876976217003284, 0.3912662950512201, 0.4135914662651826, 0.392302570776243, 0.38802303197485344, 0.3614998522569304, 0.39160854095376085, 0.38158391948433, 0.3861770576850089, 0.4038495720280345, 0.09740530414552762, 0.04354315160211952, 0.050420659599923257, 0.09850547740109594, 0.05567409736593831, 0.12455736426715136, 0.0843980930662287, 0.07292074383720482, 0.07293910536073567, 0.1736576816833384, 0.14251790436561718, 0.15052323130198753, 0.16796252495535768, 0.17382197402500277, 0.15160534597444641, 0.22891280699161087, 0.18259972073677777, 0.17772878143014714, 0.2293361286625527, 0.22814238257517716, 0.255873586348058, 0.18558808166605634, 0.21869418163888787, 0.1918158745344023, 0.2300814613907114, 0.2917444266908349, 0.2358035265548587, 0.14415767754967712, 0.18175752781245402, 0.1817047414476597, 0.15060068906854762, 0.16330996028825884, 0.201908324021163, 0.2251006862543512, 0.1571476469263785, 0.1643403260541283, 0.21459416335225756, 0.15824695954891543, 0.19468010634088773, 0.18435729093892894, 0.25636537817862115, 0.21161621957600185, 0.2084240385396292, 0.21515250392874907, 0.22196583462191777, 0.21416505014293896, 0.19006903936463848, 0.2018884919857199, 0.2218928763169311, 0.2017340977196237, 0.1986010386301733, 0.1924329542653953, 0.20847031013621597, 0.38643245215736444, 0.5229391710623136, 0.13938662148300152, 0.14996449064469908, 0.5477543782726997, 0.19755777799029994, 0.16831815456232324, 0.4256178315782905, 0.16671722851706638, 0.641932906795684, 0.3915926012269503, 0.2198655524147397, 0.16550827622502673, 0.31809420967187785, 0.31035273900994476, 0.1997043305965811, 0.1293699051707894, 0.11327270188988259, 0.30605849093282145, 0.18309734579031478, 0.1822111396853494, 0.17343312276325218, 0.18035035365557273, 0.2099248103261352, 0.18218349954244262, 0.21493814308998282, 0.18829608063342063, 0.19005169118439003, 0.0705765770258786, 0.07184041029596533, 0.08234348043523765, 0.08439015469466526, 0.07152470214823481, 0.07090286978510862, 0.07711155134331205, 0.07081651717876736, 0.07379109896879932]}, "mutation_prompt": null}
{"id": "7222fb8a-eff9-4777-ab4a-321d8811d11c", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n        self.F = 0.5  # Differential evolution factor\n        self.CR = 0.9  # Crossover rate for DE\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def differential_evolution(self, target_idx):\n        indices = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = self.whales[np.random.choice(indices, 3, replace=False)]\n        mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n        trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.whales[target_idx])\n        return trial\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Adaptive population size\n            self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n            self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    trial = self.differential_evolution(i)\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    trial = opp_solution - A * D * self.dynamic_scale\n\n                trial = self.reduce_dimensionality(trial, reduction_factor)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness[i]:\n                    self.whales[i] = trial\n                    fitness[i] = trial_fitness\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DE", "description": "Enhanced Adaptive Whale Optimization incorporating Differential Evolution strategies for improved local search and convergence speed.", "configspace": "", "generation": 91, "fitness": 0.1688098017103455, "feedback": "The algorithm Enhanced_AOWO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.17.", "error": "", "parent_id": "f3c4abb8-4a61-4319-9e7e-c9f087548704", "metadata": {"aucs": [0.361943272953855, 0.3720255434150429, 0.44065995293759386, 0.39275456431989764, 0.31356204394720444, 0.3893603980296232, 0.37149074307788377, 0.3745626022461698, 0.3804392981571627, 0.019763577842473623, 0.00037998856914744916, 9.999999999998899e-05, 0.017211105408755478, 0.07097382780848183, 0.03312128621030008, 0.011881912490234625, 9.999999999998899e-05, 9.999999999998899e-05, 0.13833886606307444, 0.15374856528425185, 0.17128545060388567, 0.15550726106682855, 0.16206018017664225, 0.13093700997060564, 0.16754295999097502, 0.16256484938388316, 0.15989389376067742, 0.12849103568733167, 0.11421037318134497, 0.1258535715041036, 0.13455734123483765, 0.11326055499114118, 0.10157451285929042, 0.10534368206854505, 0.12965184968249865, 0.10940767715876554, 0.7812992463187147, 0.8872676412626479, 0.8668931478419559, 0.8360590207555245, 0.8920857624338933, 0.8546347907720411, 0.8279182198598172, 0.850069287131435, 0.8620451244640818, 0.14678834858686063, 0.18030549379402327, 0.14975282873045836, 0.1357670551398833, 0.15303940716119924, 0.16097238376162182, 0.11395917934223365, 0.09904693621460625, 0.13637853419761758, 0.1778545001212315, 0.09774361018919497, 0.12976192565455036, 0.20161222344170338, 0.18454421943314858, 0.18426053668852793, 0.19432249106835364, 0.12800592905834274, 0.10577759432561706, 0.08050649618178174, 0.11157506039107268, 0.1759222960737028, 0.10961866571396417, 0.12286198615272237, 0.07952880882877256, 0.11504869647565374, 0.11553382202893514, 0.11801820886878145, 0.08411431342256803, 0.05192563556164875, 0.1607690410408853, 0.14334718556405024, 0.16063158133948197, 0.12131533196295419, 0.10416111263072236, 0.14069651366640823, 0.07772544011868032, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062471916704499364, 0.07036508271783692, 0.03926863721630447, 0.03238854904954658, 0.031661711362863776, 0.03126858645990793, 0.06062411733086559, 0.06470441324870624, 0.06528751449707637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039145385007777644, 0.02055153065763171, 0.03574786884922354, 0.00980774595927092, 0.019255175466068475, 0.022474882789960238, 0.028839405483749192, 0.06330572201844265, 0.05103977857153552, 0.315311305717796, 0.3436702501497537, 0.31376994774664124, 0.30424238743228404, 0.3173029767852873, 0.2964535815838947, 0.3149211707136963, 0.2920946396114307, 0.3335670966176201, 0.09831726458499657, 0.04450109642548816, 0.07798673499474884, 0.055936638744097045, 0.07599779410051488, 0.07706737364048533, 0.0842284825793076, 0.07087436451584272, 0.07969507765984052, 0.1465989330135622, 0.15806987232206615, 0.13329257788978355, 0.15392634775433034, 0.16683149470293934, 0.15669202951084427, 0.16396665263583576, 0.14488834276665308, 0.18823188375130595, 0.21379681766140401, 0.252058634631776, 0.18890520403353195, 0.19083551859748182, 0.25726552452758467, 0.19148367329571991, 0.23507842290551684, 0.2101521668176881, 0.23697737897438775, 0.13039852280655018, 0.14758843476796024, 0.10840604958498934, 0.1358481237058593, 0.15362299385995304, 0.1629657121210315, 0.17691617295958817, 0.1471077306864529, 0.16284419815384243, 0.2048243050710864, 0.1591740852123219, 0.2010990389266759, 0.1654375637375871, 0.16666005428263275, 0.1889458267931775, 0.18108134174205126, 0.19961954732601161, 0.18370438647890408, 0.17716415977676747, 0.17829695937811962, 0.2509652363040029, 0.19564989793803378, 0.17566214573265404, 0.1887675672907152, 0.17318495089094743, 0.18822518383385523, 0.18979892556497358, 0.14214327533239535, 0.2724793122192245, 0.28510500160160945, 0.17181833590399642, 0.19382223468331417, 0.17237889635133907, 0.1399630524091512, 0.1764308246245948, 0.14163381989700008, 0.31776783910833784, 0.1827287894849956, 0.11742014714070315, 0.2604890022992431, 0.20659642847323534, 0.1404058043399271, 0.34748451427412075, 0.139204023941501, 0.17005761627566285, 0.16735663065173334, 0.17306565573028443, 0.18788022594792064, 0.19418424125577927, 0.17531279278404233, 0.1654131586388241, 0.2083742846899408, 0.1765720391002411, 0.17043309149359032, 0.06354233606294779, 0.055386189555000964, 0.05203301931546944, 0.05075440743134019, 0.05428536632721492, 0.05663664652584288, 0.05785300394181936, 0.061336702489889094, 0.059486275563661595]}, "mutation_prompt": null}
{"id": "767b20bd-85e1-4acd-987c-e95997d0a61a", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Adaptive population size\n            self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n            self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced AOWO with Adaptive Population and Convergence Pressure leverages adaptive population size and pressure towards convergence to improve exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c4abb8-4a61-4319-9e7e-c9f087548704", "metadata": {"aucs": [0.5554906676510472, 0.5756167768546291, 0.5459861016082688, 0.5111135115997182, 0.5401217466846092, 0.5041781376779716, 0.5563941938122392, 0.5724110845714034, 0.5329361418570966, 0.08801945977054948, 0.10074888713017283, 0.15027179498270105, 0.13174047936058797, 0.06851096942757251, 0.13677899154789852, 0.13517858006310668, 0.14776169137027406, 0.10269228066517821, 0.19389178044179534, 0.22150372565241327, 0.2987887549017152, 0.19486766105447628, 0.2259776093917557, 0.26807222955995436, 0.24135164054699731, 0.26281479760430515, 0.2886140501667207, 0.1616398181033546, 0.20839790279931225, 0.19038910696279876, 0.20678796663796306, 0.21076822941887108, 0.21309704420240205, 0.22437003719037996, 0.21770287076688233, 0.18129068656440273, 0.93092119702604, 0.9399066648859183, 0.9559081123379362, 0.9264596874704524, 0.9372291017960763, 0.9321951787600271, 0.9561411394477144, 0.9576764763865988, 0.9263175128127782, 0.2232222043267481, 0.2603194974679006, 0.23670786232143037, 0.23591071142221332, 0.22307977513017085, 0.325281621890651, 0.23600953479536146, 0.25709966224747594, 0.23006151662287178, 0.21102746287337815, 0.1663494749086194, 0.17082327099194083, 0.30012199086764024, 0.32957827247466287, 0.20754911361486106, 0.15075572158789818, 0.1612881618981522, 0.14442102535620138, 0.17944040116413185, 0.16400599251986892, 0.1200620488935199, 0.22705743861577832, 0.2379449533037863, 0.1584331040456869, 0.13376489866880514, 0.1611860417229094, 0.1788624633402216, 0.13892528137016635, 0.10391196419040538, 0.12588724738352375, 0.12514991994713887, 0.12264272085516281, 0.15982463006803171, 0.08808962873082815, 0.12348705916623692, 0.18461938613832984, 0.002163982973713785, 0.022918347494278013, 0.015126829038751954, 0.012986969200214804, 9.999999999998899e-05, 0.00019756142502569407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06752404799216205, 0.05741101865248888, 0.08365590393737199, 0.07781561135719528, 0.02785309153756621, 0.019828747165281158, 0.08003869484071657, 0.047276765654157504, 0.03970559037453991, 0.006443187734698985, 0.013107375027363033, 0.020171760767163094, 0.01412338021633408, 0.007563257967839854, 0.0192389833979576, 0.007193209427284852, 0.01287511168695854, 0.02514974549245741, 0.12775278225233744, 0.09115389056051448, 0.12230829520583009, 0.11636261952569715, 0.004949006296563807, 0.10668207438054522, 0.12216498308857171, 0.11864315371327416, 0.07876976217003284, 0.3912662950512201, 0.4135914662651826, 0.392302570776243, 0.38802303197485344, 0.3614998522569304, 0.39160854095376085, 0.38158391948433, 0.3861770576850089, 0.4038495720280345, 0.09740530414552762, 0.04354315160211952, 0.050420659599923257, 0.09850547740109594, 0.05567409736593831, 0.12455736426715136, 0.0843980930662287, 0.07292074383720482, 0.07293910536073567, 0.1736576816833384, 0.14251790436561718, 0.15052323130198753, 0.16796252495535768, 0.17382197402500277, 0.15160534597444641, 0.22891280699161087, 0.18259972073677777, 0.17772878143014714, 0.2293361286625527, 0.22814238257517716, 0.255873586348058, 0.18558808166605634, 0.21869418163888787, 0.1918158745344023, 0.2300814613907114, 0.2917444266908349, 0.2358035265548587, 0.14415767754967712, 0.18175752781245402, 0.1817047414476597, 0.15060068906854762, 0.16330996028825884, 0.201908324021163, 0.2251006862543512, 0.1571476469263785, 0.1643403260541283, 0.21459416335225756, 0.15824695954891543, 0.19468010634088773, 0.18435729093892894, 0.25636537817862115, 0.21161621957600185, 0.2084240385396292, 0.21515250392874907, 0.22196583462191777, 0.21416505014293896, 0.19006903936463848, 0.2018884919857199, 0.2218928763169311, 0.2017340977196237, 0.1986010386301733, 0.1924329542653953, 0.20847031013621597, 0.38643245215736444, 0.5229391710623136, 0.13938662148300152, 0.14996449064469908, 0.5477543782726997, 0.19755777799029994, 0.16831815456232324, 0.4256178315782905, 0.16671722851706638, 0.641932906795684, 0.3915926012269503, 0.2198655524147397, 0.16550827622502673, 0.31809420967187785, 0.31035273900994476, 0.1997043305965811, 0.1293699051707894, 0.11327270188988259, 0.30605849093282145, 0.18309734579031478, 0.1822111396853494, 0.17343312276325218, 0.18035035365557273, 0.2099248103261352, 0.18218349954244262, 0.21493814308998282, 0.18829608063342063, 0.19005169118439003, 0.0705765770258786, 0.07184041029596533, 0.08234348043523765, 0.08439015469466526, 0.07152470214823481, 0.07090286978510862, 0.07711155134331205, 0.07081651717876736, 0.07379109896879932]}, "mutation_prompt": null}
{"id": "c333f4d3-ea21-4389-b73c-e16e0a8742f4", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def perturb_solution(self, solution, scale):\n        perturbation = np.random.normal(0, scale, self.dim)\n        return solution + perturbation\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n            scale_factor = np.exp(-evaluations / self.budget)  # Dynamic scaling factor\n\n            self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n            self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                self.whales[i] = self.perturb_solution(self.whales[i], scale_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR_Refined", "description": "A refined Enhanced AOWO algorithm utilizing dynamic oppositional learning and scaled random perturbations to improve convergence rates.", "configspace": "", "generation": 93, "fitness": 0.16586826502537108, "feedback": "The algorithm Enhanced_AOWO_DR_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "f3c4abb8-4a61-4319-9e7e-c9f087548704", "metadata": {"aucs": [0.25975263120257763, 0.2979370013955359, 0.2522195654766708, 0.25882988256755857, 0.30480415427635776, 0.27345330253719424, 0.2601012903908233, 0.26678634821263214, 0.2680316230549643, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0669320550721304, 0.07588744956984483, 0.07336871708425785, 0.07157139952598013, 0.08541110657002682, 0.08070759908937575, 0.08004320407160392, 0.06837529815066101, 0.07018626856108257, 0.07090575726159654, 0.05654154593505556, 0.05958374186018045, 0.06546348988840778, 0.055023397830969434, 0.05761413513978564, 0.06600550326127463, 0.056343620943655526, 0.0556067990483845, 0.9509322527893207, 0.9823060146039242, 0.9762956203661776, 0.9675470225406242, 0.9678134377001982, 0.9694179614062427, 0.9648699024387669, 0.9859010779550214, 0.9749233906814283, 0.15094099275091233, 0.1694444889489629, 0.14499467118651588, 0.14748588731474377, 0.16165249317564412, 0.16520756898917188, 0.14833518066702345, 0.15340533628533481, 0.15171015948681854, 0.21751887268677972, 0.19262144837989403, 0.20593122330600477, 0.24424094836489152, 0.20588013950542294, 0.18515591298629042, 0.19856326272250047, 0.20992016780113132, 0.18799935617070562, 0.07687072030835695, 0.04877531958324233, 0.08024651915755854, 0.062100185015896536, 0.0772400026578125, 0.07145048070688387, 0.07873254449402178, 0.06869230932040371, 0.06694701427521343, 0.07364720395597213, 0.06444168603853506, 0.06949967869343998, 0.09625247543618098, 0.0717527044321623, 0.06835290687175488, 0.06823759131100327, 0.0864763253974441, 0.04043496476306152, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04910337015687949, 0.054379012697874374, 0.08477323997744501, 0.08995263585827162, 0.08448767066491614, 0.05274891574547058, 0.05769082513384727, 0.09183974494336744, 0.07146097175810684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022701175524931005, 0.027372980569827288, 0.031349025230222094, 0.025570734116247884, 0.016576822821401715, 0.02541146505671843, 0.034458430385558625, 0.036555510921073786, 0.028559106393779454, 0.28716235482561747, 0.2635329418194683, 0.2783277769038427, 0.2788229406492069, 0.26177479966286854, 0.2811337371299406, 0.288331216248626, 0.270536397826848, 0.272704798065425, 0.0852077030048094, 0.0771183528027708, 0.0726168123031985, 0.07489671499014317, 0.06619484995088665, 0.08700574820041806, 0.06015743628393577, 0.08139264824636339, 0.06542929411221665, 0.1604507069160077, 0.16592825065075922, 0.15360222009820423, 0.13750304398232116, 0.15071216272362742, 0.16777993017762238, 0.15846471489853242, 0.15449316821863013, 0.16055702464349741, 0.21846020337968675, 0.20279013645404464, 0.2139378323554103, 0.21991570536353933, 0.2106687917875265, 0.21914310125707848, 0.2057490533142261, 0.21628426781392418, 0.20484231982703915, 0.14378464036419114, 0.13687169348133832, 0.15981667013994938, 0.15890768143887524, 0.1372108214633483, 0.15751142363806414, 0.15947588650867506, 0.1654228444478738, 0.1550505271797762, 0.186514404630317, 0.1823209813783535, 0.20205052347290764, 0.18646104670952734, 0.19281032389820418, 0.1879256514618891, 0.19576873253293003, 0.1916396351034343, 0.185611326274283, 0.173090889169645, 0.16649861394225807, 0.1711210726676029, 0.17317514305409254, 0.16487129253410182, 0.16511635103004885, 0.15845820086002027, 0.16658266736591654, 0.17218982560655371, 0.3052222429692103, 0.18144093078108803, 0.29435937918804944, 0.2989811838656671, 0.1804959893263689, 0.32302490555857066, 0.3254910023515001, 0.29416006108765835, 0.189854550254703, 0.2659883366896253, 0.13854256135847642, 0.27079310637822074, 0.261306682570149, 0.2572849113450726, 0.2743478868362824, 0.25937172480263315, 0.1895080804382553, 0.25317775050420654, 0.21235050652211296, 0.17781853391817426, 0.18481976555484225, 0.19469097464833307, 0.18415222123392683, 0.1914804281935606, 0.1973816872155798, 0.2090893698611438, 0.190582874441517, 0.07693501876715259, 0.08000612400897311, 0.08495757221069, 0.05934265353571677, 0.07266341039818869, 0.06958360389497487, 0.07197304619207112, 0.06544318400271554, 0.07469100776837367]}, "mutation_prompt": null}
{"id": "9340ff3a-4520-404e-89ab-3cee54e7d792", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Adaptive population size\n            self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n            self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced AOWO with Adaptive Population and Convergence Pressure leverages adaptive population size and pressure towards convergence to improve exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c4abb8-4a61-4319-9e7e-c9f087548704", "metadata": {"aucs": [0.5554906676510472, 0.5756167768546291, 0.5459861016082688, 0.5111135115997182, 0.5401217466846092, 0.5041781376779716, 0.5563941938122392, 0.5724110845714034, 0.5329361418570966, 0.08801945977054948, 0.10074888713017283, 0.15027179498270105, 0.13174047936058797, 0.06851096942757251, 0.13677899154789852, 0.13517858006310668, 0.14776169137027406, 0.10269228066517821, 0.19389178044179534, 0.22150372565241327, 0.2987887549017152, 0.19486766105447628, 0.2259776093917557, 0.26807222955995436, 0.24135164054699731, 0.26281479760430515, 0.2886140501667207, 0.1616398181033546, 0.20839790279931225, 0.19038910696279876, 0.20678796663796306, 0.21076822941887108, 0.21309704420240205, 0.22437003719037996, 0.21770287076688233, 0.18129068656440273, 0.93092119702604, 0.9399066648859183, 0.9559081123379362, 0.9264596874704524, 0.9372291017960763, 0.9321951787600271, 0.9561411394477144, 0.9576764763865988, 0.9263175128127782, 0.2232222043267481, 0.2603194974679006, 0.23670786232143037, 0.23591071142221332, 0.22307977513017085, 0.325281621890651, 0.23600953479536146, 0.25709966224747594, 0.23006151662287178, 0.21102746287337815, 0.1663494749086194, 0.17082327099194083, 0.30012199086764024, 0.32957827247466287, 0.20754911361486106, 0.15075572158789818, 0.1612881618981522, 0.14442102535620138, 0.17944040116413185, 0.16400599251986892, 0.1200620488935199, 0.22705743861577832, 0.2379449533037863, 0.1584331040456869, 0.13376489866880514, 0.1611860417229094, 0.1788624633402216, 0.13892528137016635, 0.10391196419040538, 0.12588724738352375, 0.12514991994713887, 0.12264272085516281, 0.15982463006803171, 0.08808962873082815, 0.12348705916623692, 0.18461938613832984, 0.002163982973713785, 0.022918347494278013, 0.015126829038751954, 0.012986969200214804, 9.999999999998899e-05, 0.00019756142502569407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06752404799216205, 0.05741101865248888, 0.08365590393737199, 0.07781561135719528, 0.02785309153756621, 0.019828747165281158, 0.08003869484071657, 0.047276765654157504, 0.03970559037453991, 0.006443187734698985, 0.013107375027363033, 0.020171760767163094, 0.01412338021633408, 0.007563257967839854, 0.0192389833979576, 0.007193209427284852, 0.01287511168695854, 0.02514974549245741, 0.12775278225233744, 0.09115389056051448, 0.12230829520583009, 0.11636261952569715, 0.004949006296563807, 0.10668207438054522, 0.12216498308857171, 0.11864315371327416, 0.07876976217003284, 0.3912662950512201, 0.4135914662651826, 0.392302570776243, 0.38802303197485344, 0.3614998522569304, 0.39160854095376085, 0.38158391948433, 0.3861770576850089, 0.4038495720280345, 0.09740530414552762, 0.04354315160211952, 0.050420659599923257, 0.09850547740109594, 0.05567409736593831, 0.12455736426715136, 0.0843980930662287, 0.07292074383720482, 0.07293910536073567, 0.1736576816833384, 0.14251790436561718, 0.15052323130198753, 0.16796252495535768, 0.17382197402500277, 0.15160534597444641, 0.22891280699161087, 0.18259972073677777, 0.17772878143014714, 0.2293361286625527, 0.22814238257517716, 0.255873586348058, 0.18558808166605634, 0.21869418163888787, 0.1918158745344023, 0.2300814613907114, 0.2917444266908349, 0.2358035265548587, 0.14415767754967712, 0.18175752781245402, 0.1817047414476597, 0.15060068906854762, 0.16330996028825884, 0.201908324021163, 0.2251006862543512, 0.1571476469263785, 0.1643403260541283, 0.21459416335225756, 0.15824695954891543, 0.19468010634088773, 0.18435729093892894, 0.25636537817862115, 0.21161621957600185, 0.2084240385396292, 0.21515250392874907, 0.22196583462191777, 0.21416505014293896, 0.19006903936463848, 0.2018884919857199, 0.2218928763169311, 0.2017340977196237, 0.1986010386301733, 0.1924329542653953, 0.20847031013621597, 0.38643245215736444, 0.5229391710623136, 0.13938662148300152, 0.14996449064469908, 0.5477543782726997, 0.19755777799029994, 0.16831815456232324, 0.4256178315782905, 0.16671722851706638, 0.641932906795684, 0.3915926012269503, 0.2198655524147397, 0.16550827622502673, 0.31809420967187785, 0.31035273900994476, 0.1997043305965811, 0.1293699051707894, 0.11327270188988259, 0.30605849093282145, 0.18309734579031478, 0.1822111396853494, 0.17343312276325218, 0.18035035365557273, 0.2099248103261352, 0.18218349954244262, 0.21493814308998282, 0.18829608063342063, 0.19005169118439003, 0.0705765770258786, 0.07184041029596533, 0.08234348043523765, 0.08439015469466526, 0.07152470214823481, 0.07090286978510862, 0.07711155134331205, 0.07081651717876736, 0.07379109896879932]}, "mutation_prompt": null}
{"id": "6f5dd49a-c11f-4d45-b583-f510d5c193b8", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def differential_perturbation(self, solution):\n        r1, r2 = np.random.choice(self.population_size, 2, replace=False)\n        return solution + 0.8 * (self.whales[r1] - self.whales[r2])\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Adaptive population size\n            self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n            self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                # New differential perturbation step\n                self.whales[i] = self.differential_perturbation(self.whales[i])\n                \n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DP", "description": "Enhanced AOWO with Differential Perturbation incorporates differential perturbation to enhance diversity and convergence.", "configspace": "", "generation": 95, "fitness": 0.19100679528929304, "feedback": "The algorithm Enhanced_AOWO_DP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "f3c4abb8-4a61-4319-9e7e-c9f087548704", "metadata": {"aucs": [0.46070917122469734, 0.43801815198000027, 0.4675372225000296, 0.46318483161682844, 0.4173982746308452, 0.441631889577599, 0.4140678861594642, 0.44432133624219783, 0.42195135407833306, 0.09406958346835725, 0.05002937101370464, 0.008370230813454893, 0.04522529904285999, 0.07586166909511682, 0.1156769894125591, 0.11981821293693307, 0.08302610721660098, 0.05134850590890205, 0.1701031483053015, 0.17340543321618174, 0.19570325168188207, 0.1872628575789994, 0.17814890173869335, 0.19992003210556686, 0.1511878972903793, 0.16061756377017955, 0.1469731651372489, 0.14703576638713645, 0.1505189565336843, 0.1623199704286622, 0.14186356952921375, 0.14781660435770716, 0.14183148848409677, 0.1580550973652105, 0.23182777470673666, 0.14121181359991575, 0.9542952135461573, 0.9543899060790979, 0.9680904450054344, 0.9630853798815432, 0.952640690894087, 0.964517918794519, 0.9658269180892534, 0.9506181425096323, 0.9446902855647606, 0.18123431614756902, 0.19558862068861693, 0.2182060230035724, 0.21154742474424248, 0.21319417048057876, 0.20176446319345742, 0.1660115444463196, 0.1644473985902456, 0.21051886826016875, 0.18161415564257066, 0.14443939346358126, 0.1474338124915079, 0.19949512820291526, 0.1636069685878072, 0.20492518860375997, 0.13778687569630133, 0.2174181378538298, 0.169568869990816, 0.1496402001363425, 0.19216366642100868, 0.1602021181614769, 0.1553311602002042, 0.1851621165866798, 0.14124437692778646, 0.17749384480985642, 0.16257659886249642, 0.17146179247813598, 0.12985736008812887, 0.0383705372426435, 0.0024744457848814294, 0.12342469743538564, 0.10345766165922121, 0.1824579077289319, 0.13889842219278148, 0.10527468308199528, 0.01887758521453564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0579094752262761, 0.056570654868641546, 0.05830656637949705, 0.10064930195012733, 0.04255179689070887, 0.020995277039466242, 0.148695157727754, 0.0731300610000637, 0.05802952007778095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12080258185488313, 0.034578604455225426, 0.02789749243751738, 0.06922895726666534, 0.006761969343830998, 0.11609989575760904, 0.09197328189893139, 0.0603058613474281, 0.07989440277107573, 0.3421465037725835, 0.3183113170940848, 0.41717099279891134, 0.3391920178440472, 0.35594350153428067, 0.3993896718597223, 0.3899059442558548, 0.3860681283178212, 0.3526748955780208, 0.12668799492784966, 0.04751429502406901, 0.06482948450441395, 0.1085317109359033, 0.05969356273902904, 0.09074579588912801, 0.045853012510199576, 0.07921110665810505, 0.08031276876381455, 0.21021646518878634, 0.15495937032849838, 0.1485885043306021, 0.1757093280912022, 0.16838619405811728, 0.16778377206867157, 0.1591006885987457, 0.12654435794461782, 0.12058587072496851, 0.17987754722050264, 0.23336980020915854, 0.18155293596157318, 0.1808842421172826, 0.18998402237030987, 0.1976276485259445, 0.224656533991055, 0.20127102596390611, 0.2323021523717369, 0.1317759793111123, 0.1783972298756158, 0.12682694556202023, 0.15540393858312873, 0.1591748794521749, 0.19961569745594043, 0.15274970763971474, 0.1474725067463576, 0.15286366577882293, 0.19925945006269163, 0.14712154062599492, 0.16420993819421548, 0.2102615491623835, 0.1762824124419029, 0.20892904687082114, 0.18478694213703617, 0.18284598174300737, 0.1958729514328562, 0.23530437961400252, 0.16558338729561217, 0.2282767396611589, 0.1929855094522659, 0.20097581140048648, 0.18634230811575225, 0.20320846355222655, 0.19729523039756613, 0.2134507873259568, 0.23231649888813333, 0.1666301708030804, 0.31044001419098655, 0.5212389432680186, 0.19651258215883993, 0.19445197271877135, 0.11557236175099028, 0.17583447770454874, 0.20324753150136232, 0.31388804380804214, 0.1528410692378691, 0.13845153160562984, 0.20449734520041607, 0.16494744764850877, 0.1781958705273493, 0.13052856577548666, 0.11130074669262358, 0.1365160718348679, 0.19012234559166097, 0.19677927412150242, 0.17856128831366846, 0.19869343746210666, 0.181687364700303, 0.17274326543588192, 0.1944094947198649, 0.17232137907579326, 0.1806184879907693, 0.0861691343953731, 0.07668788831221895, 0.062460610667060434, 0.0744086975109911, 0.08465692697109806, 0.06800387353080117, 0.0876155666080376, 0.058458747324120486, 0.08124693658257698]}, "mutation_prompt": null}
{"id": "b0db1d7f-b99e-4af8-8b7f-0758b3eea221", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Adaptive population size\n            self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n            self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced AOWO with Adaptive Population and Convergence Pressure leverages adaptive population size and pressure towards convergence to improve exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c4abb8-4a61-4319-9e7e-c9f087548704", "metadata": {"aucs": [0.5554906676510472, 0.5756167768546291, 0.5459861016082688, 0.5111135115997182, 0.5401217466846092, 0.5041781376779716, 0.5563941938122392, 0.5724110845714034, 0.5329361418570966, 0.08801945977054948, 0.10074888713017283, 0.15027179498270105, 0.13174047936058797, 0.06851096942757251, 0.13677899154789852, 0.13517858006310668, 0.14776169137027406, 0.10269228066517821, 0.19389178044179534, 0.22150372565241327, 0.2987887549017152, 0.19486766105447628, 0.2259776093917557, 0.26807222955995436, 0.24135164054699731, 0.26281479760430515, 0.2886140501667207, 0.1616398181033546, 0.20839790279931225, 0.19038910696279876, 0.20678796663796306, 0.21076822941887108, 0.21309704420240205, 0.22437003719037996, 0.21770287076688233, 0.18129068656440273, 0.93092119702604, 0.9399066648859183, 0.9559081123379362, 0.9264596874704524, 0.9372291017960763, 0.9321951787600271, 0.9561411394477144, 0.9576764763865988, 0.9263175128127782, 0.2232222043267481, 0.2603194974679006, 0.23670786232143037, 0.23591071142221332, 0.22307977513017085, 0.325281621890651, 0.23600953479536146, 0.25709966224747594, 0.23006151662287178, 0.21102746287337815, 0.1663494749086194, 0.17082327099194083, 0.30012199086764024, 0.32957827247466287, 0.20754911361486106, 0.15075572158789818, 0.1612881618981522, 0.14442102535620138, 0.17944040116413185, 0.16400599251986892, 0.1200620488935199, 0.22705743861577832, 0.2379449533037863, 0.1584331040456869, 0.13376489866880514, 0.1611860417229094, 0.1788624633402216, 0.13892528137016635, 0.10391196419040538, 0.12588724738352375, 0.12514991994713887, 0.12264272085516281, 0.15982463006803171, 0.08808962873082815, 0.12348705916623692, 0.18461938613832984, 0.002163982973713785, 0.022918347494278013, 0.015126829038751954, 0.012986969200214804, 9.999999999998899e-05, 0.00019756142502569407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06752404799216205, 0.05741101865248888, 0.08365590393737199, 0.07781561135719528, 0.02785309153756621, 0.019828747165281158, 0.08003869484071657, 0.047276765654157504, 0.03970559037453991, 0.006443187734698985, 0.013107375027363033, 0.020171760767163094, 0.01412338021633408, 0.007563257967839854, 0.0192389833979576, 0.007193209427284852, 0.01287511168695854, 0.02514974549245741, 0.12775278225233744, 0.09115389056051448, 0.12230829520583009, 0.11636261952569715, 0.004949006296563807, 0.10668207438054522, 0.12216498308857171, 0.11864315371327416, 0.07876976217003284, 0.3912662950512201, 0.4135914662651826, 0.392302570776243, 0.38802303197485344, 0.3614998522569304, 0.39160854095376085, 0.38158391948433, 0.3861770576850089, 0.4038495720280345, 0.09740530414552762, 0.04354315160211952, 0.050420659599923257, 0.09850547740109594, 0.05567409736593831, 0.12455736426715136, 0.0843980930662287, 0.07292074383720482, 0.07293910536073567, 0.1736576816833384, 0.14251790436561718, 0.15052323130198753, 0.16796252495535768, 0.17382197402500277, 0.15160534597444641, 0.22891280699161087, 0.18259972073677777, 0.17772878143014714, 0.2293361286625527, 0.22814238257517716, 0.255873586348058, 0.18558808166605634, 0.21869418163888787, 0.1918158745344023, 0.2300814613907114, 0.2917444266908349, 0.2358035265548587, 0.14415767754967712, 0.18175752781245402, 0.1817047414476597, 0.15060068906854762, 0.16330996028825884, 0.201908324021163, 0.2251006862543512, 0.1571476469263785, 0.1643403260541283, 0.21459416335225756, 0.15824695954891543, 0.19468010634088773, 0.18435729093892894, 0.25636537817862115, 0.21161621957600185, 0.2084240385396292, 0.21515250392874907, 0.22196583462191777, 0.21416505014293896, 0.19006903936463848, 0.2018884919857199, 0.2218928763169311, 0.2017340977196237, 0.1986010386301733, 0.1924329542653953, 0.20847031013621597, 0.38643245215736444, 0.5229391710623136, 0.13938662148300152, 0.14996449064469908, 0.5477543782726997, 0.19755777799029994, 0.16831815456232324, 0.4256178315782905, 0.16671722851706638, 0.641932906795684, 0.3915926012269503, 0.2198655524147397, 0.16550827622502673, 0.31809420967187785, 0.31035273900994476, 0.1997043305965811, 0.1293699051707894, 0.11327270188988259, 0.30605849093282145, 0.18309734579031478, 0.1822111396853494, 0.17343312276325218, 0.18035035365557273, 0.2099248103261352, 0.18218349954244262, 0.21493814308998282, 0.18829608063342063, 0.19005169118439003, 0.0705765770258786, 0.07184041029596533, 0.08234348043523765, 0.08439015469466526, 0.07152470214823481, 0.07090286978510862, 0.07711155134331205, 0.07081651717876736, 0.07379109896879932]}, "mutation_prompt": null}
{"id": "aff78036-bdb8-407d-9b4a-607a091cba83", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Adaptive population size\n            self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n            self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced AOWO with Adaptive Population and Convergence Pressure leverages adaptive population size and pressure towards convergence to improve exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c4abb8-4a61-4319-9e7e-c9f087548704", "metadata": {"aucs": [0.5554906676510472, 0.5756167768546291, 0.5459861016082688, 0.5111135115997182, 0.5401217466846092, 0.5041781376779716, 0.5563941938122392, 0.5724110845714034, 0.5329361418570966, 0.08801945977054948, 0.10074888713017283, 0.15027179498270105, 0.13174047936058797, 0.06851096942757251, 0.13677899154789852, 0.13517858006310668, 0.14776169137027406, 0.10269228066517821, 0.19389178044179534, 0.22150372565241327, 0.2987887549017152, 0.19486766105447628, 0.2259776093917557, 0.26807222955995436, 0.24135164054699731, 0.26281479760430515, 0.2886140501667207, 0.1616398181033546, 0.20839790279931225, 0.19038910696279876, 0.20678796663796306, 0.21076822941887108, 0.21309704420240205, 0.22437003719037996, 0.21770287076688233, 0.18129068656440273, 0.93092119702604, 0.9399066648859183, 0.9559081123379362, 0.9264596874704524, 0.9372291017960763, 0.9321951787600271, 0.9561411394477144, 0.9576764763865988, 0.9263175128127782, 0.2232222043267481, 0.2603194974679006, 0.23670786232143037, 0.23591071142221332, 0.22307977513017085, 0.325281621890651, 0.23600953479536146, 0.25709966224747594, 0.23006151662287178, 0.21102746287337815, 0.1663494749086194, 0.17082327099194083, 0.30012199086764024, 0.32957827247466287, 0.20754911361486106, 0.15075572158789818, 0.1612881618981522, 0.14442102535620138, 0.17944040116413185, 0.16400599251986892, 0.1200620488935199, 0.22705743861577832, 0.2379449533037863, 0.1584331040456869, 0.13376489866880514, 0.1611860417229094, 0.1788624633402216, 0.13892528137016635, 0.10391196419040538, 0.12588724738352375, 0.12514991994713887, 0.12264272085516281, 0.15982463006803171, 0.08808962873082815, 0.12348705916623692, 0.18461938613832984, 0.002163982973713785, 0.022918347494278013, 0.015126829038751954, 0.012986969200214804, 9.999999999998899e-05, 0.00019756142502569407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06752404799216205, 0.05741101865248888, 0.08365590393737199, 0.07781561135719528, 0.02785309153756621, 0.019828747165281158, 0.08003869484071657, 0.047276765654157504, 0.03970559037453991, 0.006443187734698985, 0.013107375027363033, 0.020171760767163094, 0.01412338021633408, 0.007563257967839854, 0.0192389833979576, 0.007193209427284852, 0.01287511168695854, 0.02514974549245741, 0.12775278225233744, 0.09115389056051448, 0.12230829520583009, 0.11636261952569715, 0.004949006296563807, 0.10668207438054522, 0.12216498308857171, 0.11864315371327416, 0.07876976217003284, 0.3912662950512201, 0.4135914662651826, 0.392302570776243, 0.38802303197485344, 0.3614998522569304, 0.39160854095376085, 0.38158391948433, 0.3861770576850089, 0.4038495720280345, 0.09740530414552762, 0.04354315160211952, 0.050420659599923257, 0.09850547740109594, 0.05567409736593831, 0.12455736426715136, 0.0843980930662287, 0.07292074383720482, 0.07293910536073567, 0.1736576816833384, 0.14251790436561718, 0.15052323130198753, 0.16796252495535768, 0.17382197402500277, 0.15160534597444641, 0.22891280699161087, 0.18259972073677777, 0.17772878143014714, 0.2293361286625527, 0.22814238257517716, 0.255873586348058, 0.18558808166605634, 0.21869418163888787, 0.1918158745344023, 0.2300814613907114, 0.2917444266908349, 0.2358035265548587, 0.14415767754967712, 0.18175752781245402, 0.1817047414476597, 0.15060068906854762, 0.16330996028825884, 0.201908324021163, 0.2251006862543512, 0.1571476469263785, 0.1643403260541283, 0.21459416335225756, 0.15824695954891543, 0.19468010634088773, 0.18435729093892894, 0.25636537817862115, 0.21161621957600185, 0.2084240385396292, 0.21515250392874907, 0.22196583462191777, 0.21416505014293896, 0.19006903936463848, 0.2018884919857199, 0.2218928763169311, 0.2017340977196237, 0.1986010386301733, 0.1924329542653953, 0.20847031013621597, 0.38643245215736444, 0.5229391710623136, 0.13938662148300152, 0.14996449064469908, 0.5477543782726997, 0.19755777799029994, 0.16831815456232324, 0.4256178315782905, 0.16671722851706638, 0.641932906795684, 0.3915926012269503, 0.2198655524147397, 0.16550827622502673, 0.31809420967187785, 0.31035273900994476, 0.1997043305965811, 0.1293699051707894, 0.11327270188988259, 0.30605849093282145, 0.18309734579031478, 0.1822111396853494, 0.17343312276325218, 0.18035035365557273, 0.2099248103261352, 0.18218349954244262, 0.21493814308998282, 0.18829608063342063, 0.19005169118439003, 0.0705765770258786, 0.07184041029596533, 0.08234348043523765, 0.08439015469466526, 0.07152470214823481, 0.07090286978510862, 0.07711155134331205, 0.07081651717876736, 0.07379109896879932]}, "mutation_prompt": null}
{"id": "e81b6d82-7ddf-4e54-af76-68d4dd00ce20", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Adaptive population size\n            self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n            self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced AOWO with Adaptive Population and Convergence Pressure leverages adaptive population size and pressure towards convergence to improve exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c4abb8-4a61-4319-9e7e-c9f087548704", "metadata": {"aucs": [0.5554906676510472, 0.5756167768546291, 0.5459861016082688, 0.5111135115997182, 0.5401217466846092, 0.5041781376779716, 0.5563941938122392, 0.5724110845714034, 0.5329361418570966, 0.08801945977054948, 0.10074888713017283, 0.15027179498270105, 0.13174047936058797, 0.06851096942757251, 0.13677899154789852, 0.13517858006310668, 0.14776169137027406, 0.10269228066517821, 0.19389178044179534, 0.22150372565241327, 0.2987887549017152, 0.19486766105447628, 0.2259776093917557, 0.26807222955995436, 0.24135164054699731, 0.26281479760430515, 0.2886140501667207, 0.1616398181033546, 0.20839790279931225, 0.19038910696279876, 0.20678796663796306, 0.21076822941887108, 0.21309704420240205, 0.22437003719037996, 0.21770287076688233, 0.18129068656440273, 0.93092119702604, 0.9399066648859183, 0.9559081123379362, 0.9264596874704524, 0.9372291017960763, 0.9321951787600271, 0.9561411394477144, 0.9576764763865988, 0.9263175128127782, 0.2232222043267481, 0.2603194974679006, 0.23670786232143037, 0.23591071142221332, 0.22307977513017085, 0.325281621890651, 0.23600953479536146, 0.25709966224747594, 0.23006151662287178, 0.21102746287337815, 0.1663494749086194, 0.17082327099194083, 0.30012199086764024, 0.32957827247466287, 0.20754911361486106, 0.15075572158789818, 0.1612881618981522, 0.14442102535620138, 0.17944040116413185, 0.16400599251986892, 0.1200620488935199, 0.22705743861577832, 0.2379449533037863, 0.1584331040456869, 0.13376489866880514, 0.1611860417229094, 0.1788624633402216, 0.13892528137016635, 0.10391196419040538, 0.12588724738352375, 0.12514991994713887, 0.12264272085516281, 0.15982463006803171, 0.08808962873082815, 0.12348705916623692, 0.18461938613832984, 0.002163982973713785, 0.022918347494278013, 0.015126829038751954, 0.012986969200214804, 9.999999999998899e-05, 0.00019756142502569407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06752404799216205, 0.05741101865248888, 0.08365590393737199, 0.07781561135719528, 0.02785309153756621, 0.019828747165281158, 0.08003869484071657, 0.047276765654157504, 0.03970559037453991, 0.006443187734698985, 0.013107375027363033, 0.020171760767163094, 0.01412338021633408, 0.007563257967839854, 0.0192389833979576, 0.007193209427284852, 0.01287511168695854, 0.02514974549245741, 0.12775278225233744, 0.09115389056051448, 0.12230829520583009, 0.11636261952569715, 0.004949006296563807, 0.10668207438054522, 0.12216498308857171, 0.11864315371327416, 0.07876976217003284, 0.3912662950512201, 0.4135914662651826, 0.392302570776243, 0.38802303197485344, 0.3614998522569304, 0.39160854095376085, 0.38158391948433, 0.3861770576850089, 0.4038495720280345, 0.09740530414552762, 0.04354315160211952, 0.050420659599923257, 0.09850547740109594, 0.05567409736593831, 0.12455736426715136, 0.0843980930662287, 0.07292074383720482, 0.07293910536073567, 0.1736576816833384, 0.14251790436561718, 0.15052323130198753, 0.16796252495535768, 0.17382197402500277, 0.15160534597444641, 0.22891280699161087, 0.18259972073677777, 0.17772878143014714, 0.2293361286625527, 0.22814238257517716, 0.255873586348058, 0.18558808166605634, 0.21869418163888787, 0.1918158745344023, 0.2300814613907114, 0.2917444266908349, 0.2358035265548587, 0.14415767754967712, 0.18175752781245402, 0.1817047414476597, 0.15060068906854762, 0.16330996028825884, 0.201908324021163, 0.2251006862543512, 0.1571476469263785, 0.1643403260541283, 0.21459416335225756, 0.15824695954891543, 0.19468010634088773, 0.18435729093892894, 0.25636537817862115, 0.21161621957600185, 0.2084240385396292, 0.21515250392874907, 0.22196583462191777, 0.21416505014293896, 0.19006903936463848, 0.2018884919857199, 0.2218928763169311, 0.2017340977196237, 0.1986010386301733, 0.1924329542653953, 0.20847031013621597, 0.38643245215736444, 0.5229391710623136, 0.13938662148300152, 0.14996449064469908, 0.5477543782726997, 0.19755777799029994, 0.16831815456232324, 0.4256178315782905, 0.16671722851706638, 0.641932906795684, 0.3915926012269503, 0.2198655524147397, 0.16550827622502673, 0.31809420967187785, 0.31035273900994476, 0.1997043305965811, 0.1293699051707894, 0.11327270188988259, 0.30605849093282145, 0.18309734579031478, 0.1822111396853494, 0.17343312276325218, 0.18035035365557273, 0.2099248103261352, 0.18218349954244262, 0.21493814308998282, 0.18829608063342063, 0.19005169118439003, 0.0705765770258786, 0.07184041029596533, 0.08234348043523765, 0.08439015469466526, 0.07152470214823481, 0.07090286978510862, 0.07711155134331205, 0.07081651717876736, 0.07379109896879932]}, "mutation_prompt": null}
{"id": "10bc4ad5-f9a9-4cef-87aa-485abd723ae3", "solution": "import numpy as np\n\nclass Enhanced_AOWO_DR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = min(30, self.budget // 5)\n        self.population_size = self.initial_population_size\n        self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.dynamic_scale = 0.5\n\n    def oppositional_solution(self, solution):\n        return self.lower_bound + self.upper_bound - solution\n\n    def reduce_dimensionality(self, solution, factor):\n        mask = np.random.rand(self.dim) < factor\n        reduced_solution = solution.copy()\n        reduced_solution[mask] = self.best_solution[mask] if self.best_solution is not None else 0\n        return reduced_solution\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            fitness = np.array([func(whale) for whale in self.whales])\n            evaluations += self.population_size\n\n            min_fitness_idx = np.argmin(fitness)\n            if fitness[min_fitness_idx] < self.best_fitness:\n                self.best_fitness = fitness[min_fitness_idx]\n                self.best_solution = self.whales[min_fitness_idx].copy()\n\n            reduction_factor = 1 - (evaluations / self.budget)\n\n            # Adaptive population size\n            self.population_size = max(5, int(self.initial_population_size * (1 - evaluations / self.budget)))\n            self.whales = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                self.dynamic_scale = 0.5 * (1 + np.cos(np.pi * evaluations / self.budget))\n\n                if np.random.rand() < 0.5:\n                    D = np.abs(np.random.rand(self.dim) * self.best_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = self.best_solution - A * D * self.dynamic_scale\n                else:\n                    opp_solution = self.oppositional_solution(self.whales[i])\n                    D = np.abs(np.random.rand(self.dim) * opp_solution - self.whales[i])\n                    A = 2 * np.random.rand(self.dim) - 1\n                    self.whales[i] = opp_solution - A * D * self.dynamic_scale\n\n                self.whales[i] = self.reduce_dimensionality(self.whales[i], reduction_factor)\n                self.whales[i] = np.clip(self.whales[i], self.lower_bound, self.upper_bound)\n\n        return self.best_solution, self.best_fitness", "name": "Enhanced_AOWO_DR", "description": "Enhanced AOWO with Adaptive Population and Convergence Pressure leverages adaptive population size and pressure towards convergence to improve exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c4abb8-4a61-4319-9e7e-c9f087548704", "metadata": {"aucs": [0.5554906676510472, 0.5756167768546291, 0.5459861016082688, 0.5111135115997182, 0.5401217466846092, 0.5041781376779716, 0.5563941938122392, 0.5724110845714034, 0.5329361418570966, 0.08801945977054948, 0.10074888713017283, 0.15027179498270105, 0.13174047936058797, 0.06851096942757251, 0.13677899154789852, 0.13517858006310668, 0.14776169137027406, 0.10269228066517821, 0.19389178044179534, 0.22150372565241327, 0.2987887549017152, 0.19486766105447628, 0.2259776093917557, 0.26807222955995436, 0.24135164054699731, 0.26281479760430515, 0.2886140501667207, 0.1616398181033546, 0.20839790279931225, 0.19038910696279876, 0.20678796663796306, 0.21076822941887108, 0.21309704420240205, 0.22437003719037996, 0.21770287076688233, 0.18129068656440273, 0.93092119702604, 0.9399066648859183, 0.9559081123379362, 0.9264596874704524, 0.9372291017960763, 0.9321951787600271, 0.9561411394477144, 0.9576764763865988, 0.9263175128127782, 0.2232222043267481, 0.2603194974679006, 0.23670786232143037, 0.23591071142221332, 0.22307977513017085, 0.325281621890651, 0.23600953479536146, 0.25709966224747594, 0.23006151662287178, 0.21102746287337815, 0.1663494749086194, 0.17082327099194083, 0.30012199086764024, 0.32957827247466287, 0.20754911361486106, 0.15075572158789818, 0.1612881618981522, 0.14442102535620138, 0.17944040116413185, 0.16400599251986892, 0.1200620488935199, 0.22705743861577832, 0.2379449533037863, 0.1584331040456869, 0.13376489866880514, 0.1611860417229094, 0.1788624633402216, 0.13892528137016635, 0.10391196419040538, 0.12588724738352375, 0.12514991994713887, 0.12264272085516281, 0.15982463006803171, 0.08808962873082815, 0.12348705916623692, 0.18461938613832984, 0.002163982973713785, 0.022918347494278013, 0.015126829038751954, 0.012986969200214804, 9.999999999998899e-05, 0.00019756142502569407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06752404799216205, 0.05741101865248888, 0.08365590393737199, 0.07781561135719528, 0.02785309153756621, 0.019828747165281158, 0.08003869484071657, 0.047276765654157504, 0.03970559037453991, 0.006443187734698985, 0.013107375027363033, 0.020171760767163094, 0.01412338021633408, 0.007563257967839854, 0.0192389833979576, 0.007193209427284852, 0.01287511168695854, 0.02514974549245741, 0.12775278225233744, 0.09115389056051448, 0.12230829520583009, 0.11636261952569715, 0.004949006296563807, 0.10668207438054522, 0.12216498308857171, 0.11864315371327416, 0.07876976217003284, 0.3912662950512201, 0.4135914662651826, 0.392302570776243, 0.38802303197485344, 0.3614998522569304, 0.39160854095376085, 0.38158391948433, 0.3861770576850089, 0.4038495720280345, 0.09740530414552762, 0.04354315160211952, 0.050420659599923257, 0.09850547740109594, 0.05567409736593831, 0.12455736426715136, 0.0843980930662287, 0.07292074383720482, 0.07293910536073567, 0.1736576816833384, 0.14251790436561718, 0.15052323130198753, 0.16796252495535768, 0.17382197402500277, 0.15160534597444641, 0.22891280699161087, 0.18259972073677777, 0.17772878143014714, 0.2293361286625527, 0.22814238257517716, 0.255873586348058, 0.18558808166605634, 0.21869418163888787, 0.1918158745344023, 0.2300814613907114, 0.2917444266908349, 0.2358035265548587, 0.14415767754967712, 0.18175752781245402, 0.1817047414476597, 0.15060068906854762, 0.16330996028825884, 0.201908324021163, 0.2251006862543512, 0.1571476469263785, 0.1643403260541283, 0.21459416335225756, 0.15824695954891543, 0.19468010634088773, 0.18435729093892894, 0.25636537817862115, 0.21161621957600185, 0.2084240385396292, 0.21515250392874907, 0.22196583462191777, 0.21416505014293896, 0.19006903936463848, 0.2018884919857199, 0.2218928763169311, 0.2017340977196237, 0.1986010386301733, 0.1924329542653953, 0.20847031013621597, 0.38643245215736444, 0.5229391710623136, 0.13938662148300152, 0.14996449064469908, 0.5477543782726997, 0.19755777799029994, 0.16831815456232324, 0.4256178315782905, 0.16671722851706638, 0.641932906795684, 0.3915926012269503, 0.2198655524147397, 0.16550827622502673, 0.31809420967187785, 0.31035273900994476, 0.1997043305965811, 0.1293699051707894, 0.11327270188988259, 0.30605849093282145, 0.18309734579031478, 0.1822111396853494, 0.17343312276325218, 0.18035035365557273, 0.2099248103261352, 0.18218349954244262, 0.21493814308998282, 0.18829608063342063, 0.19005169118439003, 0.0705765770258786, 0.07184041029596533, 0.08234348043523765, 0.08439015469466526, 0.07152470214823481, 0.07090286978510862, 0.07711155134331205, 0.07081651717876736, 0.07379109896879932]}, "mutation_prompt": null}
