{"id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 0, "fitness": 0.3998050519878629, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.28.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "23e5d5b1-3219-4dea-b72b-28b814d052ab", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "1eb89266-44e2-4cb2-83cb-9b1e53e0648e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "daaa5c2f-4441-4bae-861a-747590651b6f", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia = 0.9  # Start with a higher inertia\n        self.c1 = 1.4\n        self.c2 = 1.4\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n        initial_budget = self.budget\n\n        while evaluations < self.budget:\n            # Adaptive inertia factor reduction\n            self.inertia = 0.9 - 0.5 * (evaluations / initial_budget)\n            \n            # PSO Update\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # Dynamic DE mutation factor\n            mutation_factor_dyn = 0.5 + 0.3 * (1 - evaluations / initial_budget)\n            \n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + mutation_factor_dyn * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "AdaptiveHybridPSODE", "description": "A refined HybridPSODE using adaptive inertia and dynamic mutation factor to enhance convergence speed and solution quality.", "configspace": "", "generation": 3, "fitness": 0.3709831311436432, "feedback": "The algorithm AdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.27.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8010758008668861, 0.12662447436124147, 0.7611900305031014, 0.8024371765104192, 0.805511619744766, 0.8235322438034036, 0.7937120777320312, 0.792070614602363, 0.786657890884939, 0.04087320817582296, 0.6572312845203393, 0.6314473515299714, 0.6375883985774017, 0.6453511654223734, 0.6362863673444896, 0.6304558342427707, 0.6547870536222387, 0.6382477619747342, 0.14040256161409215, 0.11142833455793211, 0.12071354884344987, 0.12815419301337283, 0.4983920352078286, 0.12624888363804843, 0.13571217069578145, 0.5445349880866577, 0.1595942741804549, 0.13528161128005722, 0.13507989578298807, 0.13588286261030313, 0.11553984455445132, 0.1130011225718639, 0.12764371048668077, 0.10009540947574769, 0.1142270848972694, 0.45950095700033067, 0.9915372911392569, 0.9882736156031582, 0.9935790791954686, 0.9901614451111924, 0.9898796763151894, 0.9897402576211828, 0.0749214847847588, 0.9909319027487509, 0.9818471718223523, 0.656548259940954, 0.05990579482710923, 0.647066053830747, 0.6558604843474629, 0.6251219271489461, 0.6547854925611356, 0.642815672748372, 0.08877247353563744, 0.08665908142681855, 0.7632174645085411, 0.7288242785736798, 0.8455688101423355, 0.7899527946135554, 0.20246622888106336, 0.7888156419344715, 0.7650085615558663, 0.11618072626053022, 0.7612420832806897, 0.4368007053552001, 0.4716718272664959, 0.303210594807647, 0.5295749644647296, 0.5441619202917456, 0.49734275450593446, 0.42269937117924883, 0.5205695509927891, 0.5086838027026568, 0.32090222909064037, 0.02229536203080207, 0.48531556190376646, 0.4988314286478065, 0.397245214428526, 0.49726296256781666, 0.49550230123313355, 0.09084490571874304, 0.3524221603030243, 0.18859038567986786, 0.28869795227044903, 0.16941431060466716, 0.026897017742212648, 0.26374737336572995, 0.11464461584979513, 0.33510259887151683, 0.4548267981696448, 0.2694688851699638, 0.11980090146564415, 0.28558359596020066, 0.295018935096656, 0.24956825495973967, 0.2901155144511317, 0.6157952920798775, 0.45266496892826014, 0.40317207249257103, 0.2027790143837146, 0.04592316780433481, 0.14394002207869017, 0.12236524592038656, 0.09652328225651507, 0.08768197029885616, 0.11790568218680386, 0.07223420792527646, 0.14709408802405344, 0.12229453224681552, 0.29830070343241233, 0.2321175415556901, 0.2867942948429011, 0.037700081576645283, 0.3891329865722717, 9.999999999998899e-05, 0.22466129291008863, 0.05012320093458367, 0.22441565880121772, 0.6145493541938207, 0.5651219750588906, 0.7024451844397495, 0.5962440618243863, 0.6768313277019986, 0.6463128850292391, 0.6454093011169252, 0.13991830193267796, 0.5885630783091003, 0.1209582465196043, 0.13199301000748653, 0.06461880034935075, 0.4869756356533307, 0.11254147554074156, 0.11107898328439603, 0.5135062546033855, 0.15600214189830464, 0.13118736231105355, 0.37917450335905334, 0.20532971772704378, 0.23891636089097357, 0.5770734633804567, 0.6450893988388311, 0.17373532281393744, 0.1531464111648404, 0.2596725121736675, 0.18902484424438348, 0.45825815701480666, 0.46383365543295463, 0.4696450798880637, 0.4298464602881984, 0.5339032587575646, 0.5437982563536785, 0.5264484414119293, 0.4429210543231167, 0.5847438700925431, 0.4008262347474303, 0.2907388354211391, 0.34581692257232943, 0.3593209412298968, 0.3171324295206942, 0.39250089047829095, 0.282052948972197, 0.37802540232643966, 0.4016907952763803, 0.2236515281882051, 0.24087834502446126, 0.20706630372268298, 0.20328551722686317, 0.20516377338637226, 0.19537407467054047, 0.2154196827265319, 0.19956974635567182, 0.19468425752809804, 0.2121246613213984, 0.2136001857252643, 0.22970563739717176, 0.23281202739312445, 0.1855647952578302, 0.18213809231451483, 0.5619865392895809, 0.20327406713067453, 0.1954497000111618, 0.8664186775376548, 0.8858504236713249, 0.11484830556788672, 0.8373048687652124, 0.1998981458646234, 0.1998748083367079, 0.8423654906444276, 0.14578453253725043, 0.19460225197180248, 0.8472384124302307, 0.2122199978661844, 0.8397265270820676, 0.21116069965622497, 0.1687089226979137, 0.8018887148741696, 0.2025104955816529, 0.16754841063110892, 0.2120820909858454, 0.1957935308932519, 0.18350301485741483, 0.18878359733616268, 0.19526891805179447, 0.1941585153072588, 0.19119632399877473, 0.20322036602736893, 0.19587210818665113, 0.21292831763229736, 0.09098337594306338, 0.08970333916965867, 0.07235702811126032, 0.12839663016919745, 0.08700627913341852, 0.08855270212566524, 0.08511817762838159, 0.09562367190249244, 0.078454508929373]}, "mutation_prompt": null}
{"id": "7aa891b4-4ce1-4311-b0e7-e5f8d0bea2b8", "solution": "import numpy as np\n\nclass RefinedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_max = 0.9  # maximum inertia weight\n        self.inertia_min = 0.4  # minimum inertia weight\n        self.c1 = 1.4\n        self.c2 = 1.4\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # Dynamic inertia weight adjustment\n            inertia = self.inertia_max - (self.inertia_max - self.inertia_min) * (evaluations / self.budget)\n            \n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # Introduce elitism in DE Mutation and Crossover\n            idx_elite = np.argmin(p_best_val)\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                if idx_elite not in idxs:\n                    idxs[-1] = idx_elite\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "RefinedHybridPSODE", "description": "Refined HybridPSODE with dynamic inertia weight adjustment and elitism for improved convergence.", "configspace": "", "generation": 4, "fitness": 0.3119629184470177, "feedback": "The algorithm RefinedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.26.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.787811586179233, 0.8312812323264621, 0.7971845134866581, 0.7769273160968817, 0.15728701964365077, 0.8125937074491556, 0.7557183275976029, 0.8308812554060345, 0.7818258182696406, 0.561911365782781, 0.6336830679590788, 0.6377775150261458, 0.6143726893594168, 0.6414772601510979, 0.6444959271832649, 0.6171329889171565, 0.6299058892611707, 0.6534105151263148, 0.14820472844417676, 0.1321482375993177, 0.5611892516323356, 0.16163948939972927, 0.14710192558119706, 0.12742193912798816, 0.13518523176668262, 0.14044915419285664, 0.4266585403554133, 0.11677825516078233, 0.13107729763999, 0.13701955292967105, 0.14633410336318098, 0.12618423726246586, 0.12359531366668342, 0.11099504692916584, 0.14359760886891504, 0.02764796428982641, 0.9932619462788104, 0.9902308389840223, 0.9960223682095296, 0.990624529758809, 0.9831244575135798, 0.9757716988884991, 0.9936513292261343, 0.9884468925259401, 0.9808697012308977, 0.05946179445938016, 0.05926431024173051, 0.5784669443222832, 0.15001116608387055, 0.14928803535957558, 0.561029134221007, 0.12496520596177452, 0.08889495739312592, 9.999999999998899e-05, 0.3473384522044264, 0.7403465848540807, 0.795033788683851, 0.15593462773261313, 0.19042221983150132, 0.8137442253373148, 0.3168140528407625, 0.22793612285762432, 0.7516120104683048, 0.308807648618333, 0.1252066340998279, 0.12253599705472584, 0.19108692541928807, 0.28504268105151465, 0.32299264568638686, 0.37879390276983516, 0.26569289083964764, 0.33080786531663153, 0.21649291732025244, 0.009940297142323473, 0.12310813563810186, 0.13005263927294997, 0.23543739497922023, 0.2445591904524793, 0.2782547016720488, 0.13302433379603062, 0.23047526978148902, 9.999999999998899e-05, 0.08718799345963557, 0.10500814599845276, 0.11929554562919964, 0.010725707656552896, 0.07406036133923011, 0.09880369673196887, 0.10773227633631033, 0.108003961846594, 0.16047669385659524, 0.07215270827563725, 0.2562995740723236, 0.22216677498634607, 0.1457903838701119, 0.16949321958002306, 0.2900019475321156, 0.22273608124637156, 0.30814621837596523, 0.03900104611390576, 0.03983897465022823, 0.19718904174521545, 0.06335365817345717, 0.08907528379170382, 0.07218724390348275, 0.06775250561708868, 0.12915624449830698, 0.06438878820998839, 0.2223476924989386, 0.2994645103432101, 0.14959479582318158, 0.006101169734913703, 0.26992796168624855, 0.2551044587702439, 9.999999999998899e-05, 0.19585867579765037, 0.078589695457286, 0.1530518189266088, 0.593321032529792, 0.6163844573980453, 0.5911373382129604, 0.6538003333098361, 0.6422871264102784, 0.5512098693130447, 0.5674464912849388, 0.6457093994451935, 0.12278170949443157, 0.11559211696965865, 0.03580428804400748, 0.11272693212898577, 0.10874425043145153, 0.12268548992925155, 0.1287656951123256, 0.1125735010507648, 0.16119037829266758, 0.4680854983078804, 0.46505752743937523, 0.18397956274494076, 0.22145459861224914, 0.6364824981056729, 0.3023626159341012, 0.18417978764999154, 0.18789464031470748, 0.2172192912267379, 0.4348090247589306, 0.4337104942079161, 0.44046999917010643, 0.3976376062840744, 0.40963644521437304, 0.517207873208948, 0.5187010450282084, 0.5070629584464836, 0.21422582503808574, 0.31937288769718375, 0.3191557522841334, 0.282773039111759, 0.28350116236657563, 0.19055744249226358, 0.2982689885865898, 0.2780405719830643, 0.3422648323450318, 0.36385036728755393, 0.20239426073639055, 0.21284945682771494, 0.24708981051667323, 0.20012404688261853, 0.23235166938594654, 0.20479046714342675, 0.21661609765927037, 0.19017707614654444, 0.25425936417759665, 0.2233952790687691, 0.5529487148274536, 0.20588736969177468, 0.6282058905655239, 0.18321671861325473, 0.19360147094403424, 0.21510450027946293, 0.21769268466847558, 0.19976641613299828, 0.8629840640052219, 0.18867593356170964, 0.15333990171574718, 0.1648081747354656, 0.20125186542125406, 0.2005224544261649, 0.21289182940485007, 0.12609299831390963, 0.15299229592895824, 0.08285793318016588, 0.2072448036450728, 0.8873062110179366, 0.28668564819498465, 0.12736040820545802, 0.7767438747622105, 0.20012917821410148, 0.16877546270694987, 0.7972778735757973, 0.19050473968943038, 0.17227345305006925, 0.19293129661327102, 0.20520581773962177, 0.21442823334261985, 0.2019227482072039, 0.24104325655925662, 0.1856311320989209, 0.2050894821423921, 0.0886160074423713, 0.09307233362181866, 0.09171977604371984, 0.06763845025553805, 0.08796009219647805, 0.10412661382198152, 0.08660959897092757, 0.08734890051339939, 0.09518330541058695]}, "mutation_prompt": null}
{"id": "aa77f5c9-89f1-49aa-abfe-465ea0aa422b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "48cda002-4c85-4198-ad5c-a661d555c4ad", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "c0204228-db1e-41c9-ac36-4580be1b2127", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "de5f3e42-7ed6-4482-915c-b3bdedd76c80", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "e78976d1-0117-46ae-ac1a-6cb085e9f5c9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "8db04488-3ab7-483b-9f82-9b523ec7f303", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "ffba1d6d-0f5e-4a1a-be6d-77208dba1920", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "d85188c9-0d31-4df7-88b8-5c2a3c279d59", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "2aa0d14d-6ca4-49d4-89f0-ac8e53cb59b5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "4f7a7496-6297-4245-abad-2cf71216bba2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.local_search_rate = 0.1  # probability of performing local search\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover with local search\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Local search: small step exploring around the trial\n                if np.random.rand() < self.local_search_rate and evaluations < self.budget:\n                    local_trial = trial + np.random.uniform(-0.1, 0.1, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_val = func(local_trial)\n                    evaluations += 1\n                    if local_val < trial_val:\n                        trial, trial_val = local_trial, local_val\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "The algorithm enhances exploitation by incorporating a local search mechanism using greedy search after each DE mutation step.", "configspace": "", "generation": 14, "fitness": 0.3912026928892854, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.28.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8672127533582182, 0.8590908292348348, 0.8784533472696272, 0.8720481022938666, 0.8598899018031425, 0.8657942790274535, 0.8697009689950638, 0.8656708067516922, 0.8675027887306179, 0.0725514844105668, 0.6899318517938486, 0.6716532937039115, 0.7164676895865627, 0.5680489331058319, 0.6844146392665761, 0.7586033317951872, 0.69794546048293, 0.7087678760921265, 0.1428430552495069, 0.15005971077198232, 0.13115859057980195, 0.15657425048436546, 0.12156034440908736, 0.14198613842892804, 0.1533188926381558, 0.15549461386002617, 0.1276290164279641, 0.1378535771783137, 0.1194326586826826, 0.14623755186791476, 0.09520255470163141, 0.1088944520645797, 0.15498924498940814, 0.1539804081739038, 0.11295490584964063, 0.15426811281564046, 0.9932932140430439, 0.9907704607296174, 0.9932736065161709, 0.9920936774182357, 0.9926700683896539, 0.9876304221450215, 0.992744044345463, 0.9872356664373835, 0.9879471747220109, 0.7050639846581677, 0.7364591214277616, 0.7321012529415918, 0.7250635903246598, 0.7146871470487564, 0.7724846169181446, 0.7441852630829245, 0.7170148784524831, 0.6861743044768638, 0.8262415336970517, 0.36943312167836473, 0.7441738794226878, 0.21020692355160941, 0.19208552688175407, 0.8542475297113773, 0.8436619421501559, 0.11639937832607683, 0.8231418007824876, 0.12636997599333666, 0.37346698783191934, 0.49303702632539304, 0.13382010671202793, 0.5863533140519676, 0.47134471277139434, 0.5690594833588836, 0.5165375419440299, 0.5091131608618943, 0.4380872238947616, 0.12072203753857425, 0.5397185127491662, 0.5662302795673264, 0.5843711962658562, 0.5629568811573035, 0.5610280829356853, 0.10192952749602957, 0.43642346418707034, 0.3046568284938572, 0.06240180030077136, 0.06537199994182319, 0.48757861557971327, 0.36687693208585237, 0.2446136478799198, 0.14855905347077913, 0.17337972916730027, 0.3087387346803293, 0.4474228113608376, 0.4695458576075199, 0.5262784138103069, 0.3520676905114587, 0.1282208471641343, 0.4873434978465202, 0.5384805005433537, 0.4542445161705837, 0.44615291740842, 0.07429048161019458, 0.21392354254866108, 0.15128528405870256, 0.10314523889704064, 0.11690196740961933, 0.2026936208864758, 0.07131534969316433, 0.23241093148828218, 0.07614172426832211, 0.26962441647802704, 0.042120866691662595, 0.3316350642574125, 0.33502748969212137, 0.3259508792675416, 0.34136883210664126, 0.30687032663842617, 0.23675907994203316, 0.18688115448146958, 0.7516635001062919, 0.7538137985118911, 0.7151851169292889, 0.71538601340588, 0.6751662709057193, 0.6461754646549678, 0.7401474970166069, 0.7119777528528572, 0.6860119381770431, 0.08114995368450095, 0.12285502667479742, 0.15473946739883593, 0.12611747497883585, 0.12470867911558348, 0.13400325802594693, 0.13727331120073483, 0.09127407789081021, 0.15965928717859057, 0.2016287460325611, 0.290716359382583, 0.19980262641365998, 0.7224918270340648, 0.6897595019489895, 0.705950176586252, 0.2455955151568422, 0.24743143046320015, 0.1675103845477115, 0.45567732143448825, 0.2545553266715167, 0.25276031019952927, 0.22053290881386456, 0.5561066072302467, 0.5813199836115619, 0.6413888877431366, 0.5797084685184074, 0.17668609783253975, 0.3432627777166245, 0.2521949202031174, 0.30142665772667476, 0.4113651262729885, 0.21246090471490953, 0.40974057255630436, 0.4393357268732039, 0.4375710482752192, 0.08229175159563551, 0.2055520667264188, 0.3020490891879365, 0.1994844490218437, 0.2113863902359191, 0.2456271956493783, 0.2028578985276065, 0.2246404228946467, 0.20683200308348892, 0.24504006424039082, 0.7424585559256203, 0.20482041746549118, 0.21787376343584008, 0.24017890651877782, 0.18962248745476196, 0.19975696847087987, 0.22440789868194144, 0.24390095888230667, 0.6776668515595148, 0.907512137603967, 0.18842379406427545, 0.1526317661551222, 0.17949989188659687, 0.20096396867772337, 0.2011402821023247, 0.15852246953265325, 0.12690133267376236, 0.1545116956182625, 0.08305922770016982, 0.21080633702120377, 0.867093338796989, 0.21189963165530967, 0.7933629238883367, 0.8912777614010196, 0.10540540426989375, 0.16954180991272083, 0.10511078473831625, 0.1892465600824107, 0.17864261776683543, 0.20826621212047802, 0.18112783614372008, 0.17862464210117157, 0.1659428978514399, 0.19983969093759857, 0.20127380242368542, 0.22250943246126187, 0.08860483013314713, 0.09069012598851445, 0.0966716353881526, 0.1302327474369045, 0.09093833736040613, 0.09143596138710253, 0.10041157092802078, 0.08958963368165951, 0.1078116227296868]}, "mutation_prompt": null}
{"id": "b85706f7-71d7-4d70-a351-531b6dfa6183", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "1d1a9fc6-f751-411b-ae1d-5e0a8be9bcbb", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "e2442f44-db27-4b58-b73d-ef3fc5e7c689", "solution": "import numpy as np\n\nclass HybridPSODEPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia = 0.9  # slightly increased inertia for better exploration\n        self.c1 = 1.5  # adjusted cognitive component\n        self.c2 = 1.5  # adjusted social component\n        self.mutation_factor = 0.6 + np.random.rand() * 0.4  # adaptive mutation factor\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                while idxs[0] == i:  # ensure that a is not the same as target\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODEPlus", "description": "HybridPSODE+ with adaptive parameters and stochastic neighborhood selection for improved diversity and convergence.", "configspace": "", "generation": 17, "fitness": 0.27639530497893655, "feedback": "The algorithm HybridPSODEPlus got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.5993950624092769, 0.5884799367336038, 0.6715743371481084, 0.6700295476321807, 0.19068851330781977, 0.7508889980440013, 0.716298842835257, 0.6379068033394106, 0.7044223354898543, 9.999999999998899e-05, 0.37335530055762733, 0.3266424584953559, 0.3867725721847173, 0.5336206857310655, 0.5449838948092656, 0.47424328559136486, 0.48826228244381564, 0.4296094814831206, 0.07911076856288235, 0.1299539478406032, 0.09457915785168391, 0.11852668392517318, 0.07400730163051705, 0.15318002792053353, 0.11903528070840219, 0.15586082133480927, 0.08765475844674253, 0.1945991886443007, 0.11775518781286087, 0.14389215886625462, 0.08433141063511562, 0.11890279734155662, 0.22560758140656356, 0.09702994599002646, 0.10901568749694523, 0.14094415233845925, 0.9861009805496742, 0.9906332128673124, 0.990839458656589, 0.09949262602905296, 0.9912126096186615, 0.9799050266653255, 0.9911004890723022, 0.995939745071411, 0.9810105736561213, 0.4040260132371317, 0.3590377364833476, 0.05532248255336758, 0.012819479441094517, 0.012889280071497144, 0.362955077255648, 0.05106466647099572, 0.08353104025295366, 0.40404629690078186, 0.7534200905158218, 0.36229648013420324, 0.6901122575332787, 0.7765101994047241, 0.15879655588282227, 0.7245168781158458, 0.7491896275715437, 0.22734468960188792, 0.831192151343442, 0.23123822793893467, 0.20748630860436557, 0.33669311842537053, 0.12108492526215797, 0.12156876308432762, 0.206948848262558, 0.22920001365215514, 0.3947708972055862, 0.3791287258767646, 0.21469298161793882, 0.016485021272886646, 0.21240592623811083, 0.16542877320323135, 0.14702246084655435, 0.21030850392350453, 0.19231642577428765, 0.174125486855503, 0.09663965964438592, 9.999999999998899e-05, 0.3828825709330119, 0.07563782966575305, 9.999999999998899e-05, 0.18422355601326879, 0.009550880080454793, 0.008298927281772062, 0.11371241764913353, 0.15631187917022693, 0.04064098626430401, 0.07618084770279676, 0.5394804481928692, 0.23992427277292194, 0.4796784617444396, 0.20642528403423277, 0.26389618724463126, 0.2763292267698987, 0.5365654493431893, 9.999999999998899e-05, 0.04427417246359977, 0.13719800510385483, 9.999999999998899e-05, 0.1280081354321212, 0.1956396374026207, 0.06941373425319364, 0.16553615054500914, 0.20867024231347509, 0.15305298939699719, 0.24847284472020603, 0.17236143060942377, 0.1632156588953554, 9.999999999998899e-05, 0.23257234325900622, 0.07719493230324859, 0.19945660054161318, 0.046239486104440064, 0.5958211890942112, 0.4934546438673759, 0.6997454528907561, 0.5815918959309909, 0.4217900194462464, 0.43967665132278644, 0.5997825911652137, 0.5753113731552499, 0.4393802559594574, 0.13861707424894354, 0.06509708442245699, 0.11005027561697134, 0.10711397970005887, 0.1104291412597006, 0.11330467192844917, 0.100809457389887, 0.11159065536127688, 0.0842040025197468, 0.15721593921451882, 0.17931864969417333, 0.19105091438054378, 0.2839340271117431, 0.18250967136195706, 0.25535652461966474, 0.13536511391807293, 0.2478217892088872, 0.26724880716089494, 0.337151883144288, 0.35370607958535105, 0.35242082658735563, 0.35308671613503106, 0.3656364645672362, 0.35883227149781893, 0.3346039471489738, 0.3858269019711428, 0.37951603404314016, 0.25193619338960127, 0.22442656064502275, 0.34385953955400705, 0.30731546937110577, 0.21957560221540384, 0.2969873606254094, 0.2712056774450957, 0.14672771110519445, 0.327824925913223, 0.19887945152342745, 0.18167542130596626, 0.18404324896526036, 0.18740378125132373, 0.18736980685720428, 0.20661867107465348, 0.1756800566900074, 0.19009347027923562, 0.19569706442787282, 0.2133080008406414, 0.20707257055500006, 0.21476859495067357, 0.3488187862334362, 0.1773063296128845, 0.20208181726056018, 0.21788083792620472, 0.20630564332956414, 0.319021595207291, 0.1955335096276295, 0.18051297858981474, 0.11039750589690034, 0.2090561564347604, 0.8451683273145627, 0.1195574790079107, 0.160970606741353, 0.17543420916129893, 0.20638483607086722, 0.20981180363685792, 0.20894780322966822, 0.16841855647090742, 0.1686780190891135, 0.7203585145126256, 0.16841832335552387, 0.10890145460655332, 0.21008100072605018, 0.19839795304258978, 0.17978296329387344, 0.18299781728250875, 0.17666410207436822, 0.20006912825219114, 0.19495076882294138, 0.1817344356454167, 0.18350396968623262, 0.21144723871927207, 0.20342896981342284, 0.06848619131933664, 0.06604883790610361, 0.07738869885157984, 0.06887226282619008, 0.06886214095426713, 0.07908574960470505, 0.06588384408509007, 0.08346049714284365, 0.08577447862731591]}, "mutation_prompt": null}
{"id": "413ae323-3963-4348-9deb-8a0d8f1593cd", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "2ad857dd-8107-4d92-836a-dd2d41055cee", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "f862f490-6615-4171-b9d4-bbc66d433833", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # Initial population size\n        self.initial_pop_size = self.pop_size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # initial mutation factor\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # Self-adaptive DE Mutation and Crossover\n            self.mutation_factor = 0.5 + 0.3 * np.random.random()  # self-adaptive mutation factor\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n            # Dynamically adjust population size\n            if evaluations % (self.budget // 5) == 0:\n                self.pop_size = max(5, int(self.pop_size * 0.9))\n                pos = pos[:self.pop_size]\n                vel = vel[:self.pop_size]\n                p_best_pos = p_best_pos[:self.pop_size]\n                p_best_val = p_best_val[:self.pop_size]\n\n        return g_best_pos, g_best_val", "name": "EnhancedHybridPSODE", "description": "This algorithm enhances HybridPSODE by introducing a self-adaptive mutation factor and dynamic population size adjustment to balance exploration and exploitation more effectively.", "configspace": "", "generation": 20, "fitness": 0.38459834173080437, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.30.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8481718882075404, 0.8610380503678524, 0.8714022261946456, 0.8845070250238598, 0.7704623385737024, 0.8744985528383196, 0.851859417319146, 0.8823963997261577, 0.8654147225198778, 0.743238821186728, 0.6968061714166014, 0.7514837793079173, 0.7610525822403643, 0.6997944661458128, 0.7374062811466812, 0.7734894980492855, 0.766570299775837, 0.7555045821926234, 0.1542307015063712, 0.11579132302829132, 0.13765744627147047, 0.1666923312336951, 0.6506190394827539, 0.17812664575324466, 0.13904277530603126, 0.1294585244579154, 0.6221047186264921, 0.15176176505388217, 0.109224138621832, 0.10407780840597902, 0.15352646590032015, 0.10455856824126641, 0.10722766496842817, 0.12756125997883794, 0.11723470777258949, 0.10493203127802775, 0.9949777673699428, 0.9903472479108123, 0.9935942374256697, 0.9909205276162214, 0.9905231060912388, 0.972627023808449, 0.9937646609879371, 0.9901274775840495, 0.07482636120588904, 0.06027016447983968, 0.05552669639175434, 0.7372161377888972, 0.15282946841584433, 0.7427949890257162, 0.7668521634318264, 0.7559519595439703, 0.7139997305261953, 0.7048839272047496, 0.8869708753551708, 0.8809649223678201, 0.17145937393568134, 0.2118220796723992, 0.8888253414195169, 0.8517350067195171, 0.8708721554770188, 0.8471272825317823, 0.8750139204835876, 0.6518398980816613, 0.5557282463778251, 0.5201154440007218, 0.13433704553482873, 0.1346671391161064, 0.12336853973290285, 0.5748374683288758, 0.40768980366064167, 0.1329885988015994, 0.3474015302270437, 0.010114458355985345, 0.7023960085579023, 0.3264267664666004, 0.5344299522933635, 0.49767758998269984, 0.549473108019279, 0.034358868641641505, 0.5095719259994853, 9.999999999998899e-05, 0.45788792604603745, 0.19329527200047047, 0.16777925540168148, 0.08651215335673335, 0.05284412371607217, 0.2868961881250003, 0.10702089025584005, 0.07023463782435124, 0.10551495940162625, 0.11118601146484708, 0.2534006429034541, 0.31466993601039295, 0.18472581086231155, 0.11630393824431717, 0.5926076223956716, 0.4421011309896643, 0.5337511607882808, 0.10483873508980801, 9.999999999998899e-05, 0.12324154745397986, 0.07505806648455637, 0.10879181345017896, 0.1305637308818306, 9.999999999998899e-05, 0.16725375681660792, 0.07179494461217839, 0.31809513486082996, 0.2882738797435386, 0.2677722773871387, 0.22361722404778084, 0.36123332171167677, 0.03917078839635579, 0.05779922425159567, 0.049552856541637436, 0.08219353095045367, 0.8124225192373754, 0.6714799553714376, 0.7541691795032256, 0.6167609371245345, 0.8122087040689171, 0.6362294986956114, 0.6958429238479347, 0.6475379060285948, 0.6314121650279174, 0.0951873657753819, 0.11667559699513552, 0.09534458656538758, 0.13245235699021485, 0.13084831797331276, 0.15337604728007137, 0.08473530909743676, 0.15343718699826003, 0.10074873837833276, 0.2702054898947134, 0.34139895045685864, 0.2212850937206028, 0.2436938402652713, 0.43725767846372987, 0.1697027915623216, 0.27050349217374003, 0.6351288909647081, 0.19263634454907963, 0.4229588838653191, 0.5159112384180031, 0.6222350194292421, 0.6423336204070307, 0.5042693473516551, 0.6330276801377799, 0.2877942106346696, 0.6883804417511111, 0.21826910076214145, 0.24788910119901497, 0.5055949595341771, 0.20674703931327498, 0.346061878796765, 0.19317278792019854, 0.41173516597658244, 0.38304575062380575, 0.497613898467292, 0.4520082421049909, 0.20829105823814198, 0.18190490331683018, 0.20067256808501632, 0.19811669955507127, 0.26033131202748383, 0.22392148284445224, 0.21389307970739935, 0.2047017631507968, 0.24585124874416142, 0.2068532625724807, 0.24402214590184368, 0.7848097782300582, 0.7774543060756767, 0.1993558598441577, 0.2057721198193484, 0.22190952258456598, 0.20672133420694294, 0.19687779963855623, 0.9261117840890283, 0.1887347679123773, 0.11490473275652746, 0.9305551005548554, 0.20116175419827365, 0.2013198508355989, 0.9154485853791763, 0.12046900719868625, 0.16239384811013313, 0.08328223143207159, 0.21088729001432838, 0.9037806249780354, 0.20987616844602175, 0.1683561945659121, 0.8716230140150621, 0.20405301952360122, 0.7651234911123187, 0.10416977070090538, 0.23383857326838764, 0.24849932686745002, 0.21251121634486103, 0.21427420034896205, 0.1805031398015281, 0.17763807783423324, 0.2009008052073784, 0.20660546416536096, 0.21729041089354872, 0.06462471156113225, 0.07883205258638959, 0.09089551712283483, 0.09018874495304896, 0.09459213190646532, 0.08847462931486993, 0.1005984264139026, 0.08797424025284983, 0.09010392340353102]}, "mutation_prompt": null}
{"id": "7f1fc774-a6f2-4e9d-845d-76bdf6c432f5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "5bd9ed8f-94d7-44b5-abae-f5e9ef947371", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "419c43d7-8fed-48a0-ae8a-d589c3e81a5b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "ac769a76-fe08-4c0d-81a4-52437f9b733b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "f00d32a5-f052-45fa-8e85-212dd6c37f63", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "124a7e63-a007-40c7-9293-8d8a6cc8e4d2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "cada4eab-706b-40b7-89ba-0067bdeccc1a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "93d65df1-a55b-4040-994b-100a462f63c1", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia = 0.7\n        self.c1 = 1.4\n        self.c2 = 1.4\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, beta):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta *\n                  2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c) + self.levy_flight(1.5)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "EnhancedHybridPSODE", "description": "Enhance exploration by incorporating a Levy flight mechanism into the mutation strategy, improving the balance between exploration and exploitation.", "configspace": "", "generation": 28, "fitness": 0.2711481518701993, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8920871564765651, 0.8928059961815105, 0.8634259691885412, 0.8949001342418342, 0.8775036558076452, 0.895707676145186, 0.874679219856713, 0.8942392972202755, 0.8885200290873296, 0.508940724765171, 0.5267341580272571, 0.1980949797112881, 0.1435154734689873, 0.06363052384164491, 0.14773074173035783, 0.6560580070873023, 0.17739035868745412, 0.25106761982438663, 0.17724569398665135, 0.15224184789918982, 0.13614930516952684, 0.14140265200243107, 0.16652538578921772, 0.1613752926394505, 0.14204466870009858, 0.1267928346824052, 0.12593295501545143, 0.11839899110175811, 0.13635832159072647, 0.09654885533920055, 0.11888638533672258, 0.10617634151719524, 0.11464516340352948, 0.14111361451644067, 0.1375553991012477, 0.13734229020616007, 0.9911870083444466, 0.9882150372709094, 0.9909680081362654, 0.9935809182926069, 0.983877516499962, 0.9853428988580543, 0.9938027920428708, 0.9888609304110134, 0.9853924949871831, 0.36953536953103827, 0.3460742738274799, 0.6935315740313395, 0.2740696963996798, 0.4123494811539177, 0.5991582945049996, 0.5536479322429839, 0.5395053455103861, 0.5340343430402268, 0.2285549858089616, 0.22687890148252565, 0.3342627656819007, 0.2046419327940605, 0.21139178280576199, 0.2723599642507335, 0.1540903909604735, 0.2427762222158213, 0.23004918870932867, 0.18081126239331513, 0.17502158591423178, 0.17094016065037865, 0.3060981915566058, 0.11480662445801537, 0.10731795732837923, 0.18508888827984793, 0.1478495433844491, 0.15985023773752272, 0.1695605489250014, 0.1300658994701871, 0.13412408892109795, 0.16345722159737686, 0.15387530622422618, 0.13976147188053945, 0.2174838097607702, 0.1393546645007615, 0.1294029495324105, 9.999999999998899e-05, 0.031979527020836396, 9.999999999998899e-05, 9.999999999998899e-05, 0.043350326897776514, 0.029306649371356852, 0.05839480652064355, 9.999999999998899e-05, 0.0030766724172420767, 0.06585951937847201, 0.030944776895250325, 0.08266125444885553, 0.10597411975046811, 0.015383903379769803, 0.04846091735111857, 0.06735631086925986, 0.02726558280837621, 0.11402508644603038, 0.04960307498930017, 0.13215791309054858, 0.3258345519608724, 0.081950756387703, 0.08043756419499892, 0.12034967729679613, 0.0980402530128407, 0.10091686427939917, 0.07342187212957685, 0.1338238344797109, 0.18543507903022904, 0.2925199034677073, 0.05878405852184787, 0.12043821230793383, 0.05596440924545909, 0.0695674746377013, 0.05108808321771208, 0.08412278428794218, 0.43498725743710787, 0.4720219443639251, 0.4924313307402358, 0.5458152096061539, 0.5190968112564371, 0.540159944386629, 0.5025902031537067, 0.5193816640776358, 0.5053313155447032, 0.09323426078860608, 0.10245317782335206, 0.12190613940435413, 0.1288812612057343, 0.14312270830623597, 0.10688361800246626, 0.10483833503135298, 0.12431707718703966, 0.09045573578656663, 0.21529433694320022, 0.1807745489690844, 0.18528029999544837, 0.22327135396708087, 0.21792604404837534, 0.14027725554549375, 0.19754808129434365, 0.30045032868377064, 0.17475396270323018, 0.28552646890669, 0.2808271022123283, 0.36585960742377477, 0.26869140030638705, 0.3258085796971525, 0.305196395336534, 0.3204264377069561, 0.277803295012237, 0.305102608631172, 0.297363188147413, 0.2140824118754161, 0.17816440187331262, 0.2408404850146466, 0.311144698098168, 0.3105685505378133, 0.2211129747161069, 0.19907838680060164, 0.3113992818832063, 0.20958108024450817, 0.20982783590060772, 0.21132231220655462, 0.23047411683516617, 0.2075325671569963, 0.19877449293208127, 0.20357468242294674, 0.18933108452828828, 0.19505276446719455, 0.8046492065660881, 0.1859687808944852, 0.21261996346032797, 0.6943416871565067, 0.22803823649776978, 0.19854746628386477, 0.20298167613915796, 0.27001329795554063, 0.20277430895470616, 0.8549520027938458, 0.20921879388943554, 0.1538190981510401, 0.32756451189101166, 0.2009882838099779, 0.2011247645671811, 0.16676417935553367, 0.12591554828927787, 0.19309780982126867, 0.10057393279049753, 0.20994908380930566, 0.45513066628786514, 0.3350008180080446, 0.16840197247607502, 0.2112181813962135, 0.10517501978908839, 0.16681573291127494, 0.3233483911321565, 0.2043887419930478, 0.196509587874794, 0.2193519192758019, 0.2088390931905385, 0.17771187204832217, 0.19581755589363092, 0.20241093690502987, 0.19208636587985173, 0.20384579786767276, 0.0942212978888427, 0.08925113912229332, 0.09343585208566196, 0.10341025640410739, 0.09436653698754494, 0.08863348974215901, 0.0761922866443403, 0.099294439081404, 0.08561480112329556]}, "mutation_prompt": null}
{"id": "b541c7e2-ae29-497d-b271-5b87c8effc29", "solution": "import numpy as np\n\nclass AdaptiveMomentumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.9  # initial inertia weight\n        self.c1 = 1.2  # cognitive component\n        self.c2 = 1.5  # social component\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # Dynamically adjust inertia weight\n            self.inertia = 0.9 - (0.5 * (evaluations / self.budget))\n            \n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # Random Walk Mutation Strategy\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                walk_step = np.random.uniform(-0.1, 0.1, self.dim)\n                trial = p_best_pos[i] + walk_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "AdaptiveMomentumPSO", "description": "This algorithm integrates Adaptive Momentum Particle Swarm Optimization (AMPSO) with dynamic inertia and a random walk mutation strategy for enhanced optimization performance.", "configspace": "", "generation": 29, "fitness": 0.2734830052158219, "feedback": "The algorithm AdaptiveMomentumPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.7758514754605957, 0.7950691161249778, 0.7581876360397529, 0.8123768912315712, 0.7968923895218267, 0.8044286951278976, 0.7822344503560705, 0.7947728741847765, 0.7890378601228824, 0.5063504101161819, 0.5889495529869248, 0.6090512868695782, 0.24597632739426412, 0.050328139010346606, 0.048516349694459726, 0.5749225851596206, 0.6057679125659479, 0.4725419537043396, 0.1487782235083439, 0.12187523050953819, 0.13739204737609412, 0.26906790888562737, 0.16031373256666903, 0.14489341897617414, 0.21396398145883033, 0.14632917567865045, 0.14895633938503183, 0.1196493712534955, 0.11012259154682524, 0.11392776606948118, 0.20272896784261707, 0.12407137817969582, 0.10963781314703447, 0.16956462561188068, 0.13812976038564162, 0.039424230940101945, 0.9929050029347705, 0.9884611370918897, 0.9874524405025901, 0.9914299173591961, 0.9884012325360569, 0.9268130009048243, 0.9936542192131579, 0.9885284631748666, 0.9190430161370311, 0.39431525460245787, 0.530796531729457, 0.40737318139452006, 0.4533271052015877, 0.45688715168909455, 0.41335635240420066, 0.41574373682280164, 0.4920308926040732, 0.3880092293330545, 0.17158571042063941, 0.21239773257489836, 0.212717244382975, 0.07373116209100572, 0.06957129039826127, 0.6411105061110771, 0.11667692716193634, 0.1140453467241801, 0.21415003185052084, 0.1364038337140171, 0.18969577740404753, 0.17112300189194207, 0.16606144332266992, 0.17417535505087944, 0.16547156464883106, 0.17170813298455756, 0.1542446403090313, 0.1988869641559412, 0.23682469353490565, 0.12022506805152788, 0.17536754115622444, 0.220340875347812, 0.22176684505866795, 0.1741745552352586, 0.2071532189752897, 0.10456632152382439, 0.23598377120566005, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022853915160698346, 0.06650954430099498, 9.999999999998899e-05, 0.015854120058347188, 9.999999999998899e-05, 9.999999999998899e-05, 0.06859762445519169, 0.041794952409198616, 0.11040353317425744, 0.10037280838930929, 0.029373175429608822, 0.061734672365691634, 0.1616522702243165, 0.06915161736457942, 0.10629693943659713, 0.07060933610717379, 0.0289970320713957, 0.17163782039312137, 0.06573486060947831, 0.06389526923223932, 0.06124992091948822, 0.06432221274881722, 0.07553770816734773, 0.05775675076403164, 0.052973886454747654, 0.05888362054818519, 0.12107789956566994, 0.09188787640713358, 0.04408706212209468, 0.1128304656417286, 0.07210867513041175, 0.07021586555902848, 0.11353153227957102, 0.4880801022987201, 0.4723462684366325, 0.48388537477761395, 0.4966743576636836, 0.4734636697756115, 0.4908937125813273, 0.5005007529911888, 0.4861797012239998, 0.5206667817596358, 0.127171667008664, 0.10032127257731793, 0.07255081160909249, 0.13394259487050708, 0.13154145055406752, 0.12823619844440604, 0.08611728389186701, 0.14435188866245585, 0.11423356855458366, 0.19843434959860573, 0.18101052971109488, 0.2804074833064597, 0.3694142923572603, 0.31755548944767864, 0.22830505539520407, 0.23516327814087612, 0.33510409913326356, 0.2027386740374394, 0.2902891149732826, 0.26610682160497257, 0.2801386329225385, 0.28218333735659584, 0.31626076756991084, 0.2830344016825277, 0.2782769803574492, 0.21527069684268485, 0.16637146602911612, 0.22728735683382706, 0.3528276637730965, 0.1890735854487371, 0.2556453463319275, 0.22495770385332103, 0.2533474511589374, 0.20134878449555116, 0.24353153677654849, 0.09088912472816524, 0.23726017217645756, 0.23826530946776547, 0.2161591398958581, 0.20480384991865863, 0.16077479076573187, 0.19829148835858046, 0.21349791795476736, 0.20113454104934625, 0.24798303631854346, 0.23682496881072124, 0.24519224776372905, 0.23940407323482626, 0.3793155051171503, 0.2381207864772028, 0.20043252954498492, 0.19978133889965244, 0.24150071677575358, 0.2100387591619306, 0.8705979947803396, 0.18654173781134886, 0.15419742928575597, 0.6044572972043246, 0.20006782128581002, 0.7365789806654646, 0.2014925154471051, 0.8303165424316978, 0.15997139588015685, 0.15389369209514658, 0.21038302290410404, 0.49007610115016365, 0.5486249924701845, 0.16764448621652206, 0.6196563194213259, 0.21260458657277326, 0.16869043093363656, 0.24211832435421843, 0.18808148642612266, 0.1989814935784915, 0.20765515033827597, 0.18522339338821503, 0.18899921627762972, 0.19879994789481503, 0.18555078399021963, 0.21498473802159068, 0.18915639779912286, 0.08440059722861293, 0.0954576882076521, 0.10143726158408439, 0.10369290605111947, 0.08194458843708308, 0.07242345775225112, 0.07565500883045118, 0.07055104263306566, 0.08520478662213593]}, "mutation_prompt": null}
{"id": "b632a90c-ce3b-4612-88a0-030e69270c04", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "6cfc8c87-b2b3-48b7-892c-36834a299968", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia_initial = 0.9  # starting inertia weight for PSO\n        self.inertia_final = 0.4  # ending inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.8  # crossover rate for DE\n        self.local_search_prob = 0.1  # probability of performing local search\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # Update inertia weight\n            inertia = self.inertia_final + (self.inertia_initial - self.inertia_final) * (self.budget - evaluations) / self.budget\n            \n            # PSO Update\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = (inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n                # Local Search\n                if np.random.rand() < self.local_search_prob:\n                    neighbor = np.clip(pos[i] + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                    neighbor_val = func(neighbor)\n                    evaluations += 1\n                    if neighbor_val < p_best_val[i]:\n                        p_best_pos[i] = neighbor\n                        p_best_val[i] = neighbor_val\n                        if neighbor_val < g_best_val:\n                            g_best_pos = neighbor\n                            g_best_val = neighbor_val\n\n        return g_best_pos, g_best_val", "name": "EnhancedHybridPSODE", "description": "This improved algorithm introduces an adaptive inertia weight for PSO and integrates a local search mechanism to enhance convergence speed and precision.", "configspace": "", "generation": 31, "fitness": 0.3293989946474697, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.25.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.7583371555389992, 0.7632354710822404, 0.7427464707315024, 0.7370355302040446, 0.7444993476992909, 0.7307353626633901, 0.7679160392159617, 0.7286017779205758, 0.7278316371270745, 0.5608151068211821, 0.5740086458168719, 0.5775410380642484, 0.5664982265293581, 0.54009488535428, 0.5312517020375886, 0.588173879580266, 0.5929046857398365, 0.5933313674022627, 0.1297682984439994, 0.1189593435146491, 0.12076994606088587, 0.4501094884610678, 0.13196048365075475, 0.14684808987111242, 0.1297976700409732, 0.06390431149328668, 0.1381751825678843, 0.12997351419264191, 0.15135186722634464, 0.14992426095591327, 0.12019315385709628, 0.12434099175026059, 0.12976915427217006, 0.13820955482202502, 0.13798543500904703, 0.13056274783695132, 0.9933102992052161, 0.9906563173161896, 0.9957741347140587, 0.9875459317514612, 0.9904226208644611, 0.9889486682444909, 0.9876012104417037, 0.9903646239346584, 0.9923096319123352, 0.5787513951849181, 0.5337184258992662, 0.512983254830488, 0.5854616538718017, 0.5207931918676412, 0.5628537339971194, 0.5641190259782126, 0.5567903935279188, 0.5537270423034566, 0.21810700177115172, 0.6781189690685416, 0.705079009895161, 0.751688002602648, 0.7226894966375913, 0.1909965332532052, 0.6608607392374801, 0.6224641966816777, 0.726543767509252, 0.31036795232348147, 0.33478755028665397, 0.27314484002773665, 0.3330908726901973, 0.4076962445003005, 0.29849299661454876, 0.2929540790814815, 0.23919490607278737, 0.32256879878702127, 0.126407964982305, 0.12000278568841682, 0.273569523925974, 0.3362117351800845, 0.35845037183488215, 0.3726697381967966, 0.3369202585266152, 0.22230595771574113, 0.41126974768628066, 0.008831239473475527, 0.04169249857981794, 0.06457807530145598, 0.1272890956362679, 0.023840102374802385, 0.12618859833495155, 0.12783931886121713, 0.03627144942196536, 0.006940255598479217, 0.2415218742966535, 0.37987737596926374, 0.2614766750892613, 0.3452136825484544, 0.3042933989198334, 0.261466514891452, 0.30058497675736817, 0.2672744385800315, 0.22048391920561972, 0.041685046038565265, 0.03936433750495649, 0.07941911211621733, 0.09186792700253277, 0.12139736580401406, 0.0654608451048827, 0.0734616449447727, 0.09298541841098629, 0.06358845195223406, 0.04093373507837095, 0.18272946210427155, 0.21867394844108956, 0.19310987774145083, 0.202544571089173, 0.032323624372634696, 0.20655990533209712, 0.21434123330753418, 0.078944751740476, 0.594832085424194, 0.5679808217786566, 0.5718809110866818, 0.5873298728963708, 0.6189059578660172, 0.572861946763274, 0.6005250695156505, 0.5631881596086604, 0.5749777014467417, 0.07332839650285972, 0.06262688947677453, 0.08017218966409911, 0.12218484177755184, 0.13532549684169748, 0.09849709198734158, 0.11480318275368084, 0.11880926941563752, 0.1406005226925976, 0.36286597274082566, 0.43421862681084444, 0.20647591968457868, 0.4204150044592373, 0.53441592844687, 0.23591670424308075, 0.18944792739488658, 0.1991527049266707, 0.4916986640875666, 0.3371521360623617, 0.36097293550843956, 0.337752517590598, 0.40645833598736103, 0.3880102505726778, 0.377493556430027, 0.47605539121568985, 0.5403615486569111, 0.5075204034767384, 0.2630818932111798, 0.2910256837387778, 0.2700018016112542, 0.30731050665231285, 0.24747379975201833, 0.3700833291938719, 0.3349953153017342, 0.15383287783906618, 0.4028825166547473, 0.2464548629128115, 0.18700007493705273, 0.19711169180901444, 0.2082192758949286, 0.19992774242147748, 0.23068020285597102, 0.21383013210344148, 0.22284184844510235, 0.21325636478797483, 0.20827399714677142, 0.1847816565110344, 0.19774893273457006, 0.20594611620752135, 0.23024418028613525, 0.2198062370349877, 0.5496313756599324, 0.19239599128587892, 0.5083690657583474, 0.16244630754637512, 0.1648260853834267, 0.15023298183521405, 0.8477105867438316, 0.19862523703091384, 0.19976024509494406, 0.14853401219509832, 0.1457313029371191, 0.160338629911705, 0.08240582551220099, 0.1693638757597935, 0.7742272477514396, 0.20937354298409716, 0.19688028927158718, 0.209164081090488, 0.21179303185222909, 0.1640710360035288, 0.10499368033123646, 0.2064086534631896, 0.2155996645465269, 0.20348943675442055, 0.1842248404286646, 0.21506054421694276, 0.19308998398488997, 0.19702054751485765, 0.1789395973880783, 0.20176400498559055, 0.08325123344719065, 0.08793932725844966, 0.0942917508517983, 0.08295369612296999, 0.09616640448313574, 0.08804381638845649, 0.09891043686837497, 0.08900883973972273, 0.08511748952711184]}, "mutation_prompt": null}
{"id": "fb2f3841-fd3a-4c20-996f-3a36a0284d04", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "61c53905-0fb8-4a76-9dfd-e35f05d37471", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "4ed04400-515c-4cb4-85f4-bb97ede5195f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "35cef202-ec0d-42c3-bdf4-42916beaf4b8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "e60be201-9015-41d0-a972-ec6037db640f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "57ccc5f5-3c0e-423d-8b9a-49d3633dbc27", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "e90ef130-d607-4b18-b326-54d020555545", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "5ffdd176-55bb-4e10-9eb6-b03223ee6bdb", "solution": "import numpy as np\n\nclass HybridPSODE_Adaptive:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.9  # adaptive inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # adaptive mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update with adaptive inertia\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            self.inertia = 0.4 + (0.5 * (self.budget - evaluations) / self.budget)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover with adaptive mutation factor\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                adaptive_mutation_factor = self.mutation_factor * (1 - evaluations / self.budget)\n                mutant = a + adaptive_mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE_Adaptive", "description": "This algorithm improves exploration by adaptive inertia and adds adaptive mutation control to enhance convergence speed and reliability.", "configspace": "", "generation": 39, "fitness": 0.33585172699239707, "feedback": "The algorithm HybridPSODE_Adaptive got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8042219894690167, 0.8219048777251488, 0.8139385698834233, 0.8254966287505239, 0.1902822819898612, 0.8240016106659571, 0.822950652316891, 0.8137288491957273, 0.8112333446597797, 0.6618177088442916, 0.7028712019869465, 0.6501291621668255, 0.6360300739464537, 0.6521803870829417, 0.6761163513766857, 0.7195911274562274, 0.6796211280562318, 0.6621961661235298, 0.1347860106576414, 0.14031262247760967, 0.5828476038986108, 0.1445467365602755, 0.12918981853323186, 0.578795605526437, 0.14531752499800155, 0.14299851980034672, 0.16673595776613326, 0.10666784288385589, 0.1040867023672416, 0.11712839215209392, 0.11500057512099848, 0.13003819176892795, 0.12709914320646554, 0.13866064847437498, 0.13024424301042326, 0.15674868706255274, 0.9956527315435663, 0.9909240168175455, 0.9960235920796142, 0.9912528008077275, 0.9783489725374628, 0.9782481374010463, 0.993565722043029, 0.9869284341480058, 0.9755925384306722, 0.05989450806698604, 0.6565838918496976, 0.6582565882092113, 0.15219897264199878, 0.15136675680761458, 0.14873228890485135, 0.08870615109788282, 0.08757381727845914, 0.07998170634304025, 0.8192373676172515, 0.8124265254145026, 0.8239480360949217, 0.27327031522562917, 0.7871501366095549, 0.8286292099696647, 0.7540026080436567, 0.13835876018455018, 0.38490928566086613, 0.13817183331690375, 0.24532896561351936, 0.21509849052812402, 0.2712056923771421, 0.27918988202688255, 0.2046579440695082, 0.32066505690478153, 0.299025610364022, 0.25034834862600985, 0.23595752041198126, 0.010085481651919137, 0.23031106642903165, 0.2681121598190429, 0.20771318632547775, 0.2341100443971844, 0.24447527755960896, 0.035152140228825735, 0.24898752551833447, 9.999999999998899e-05, 0.12630414585798566, 9.999999999998899e-05, 0.08236808091674153, 0.0817584921997061, 0.09831704882684933, 0.06611883270588059, 0.057451921822490704, 0.3724125584966319, 0.07716415311185953, 0.12375020522424474, 0.40273964237733606, 0.16124175017017606, 0.2092820519279498, 0.0696281228793103, 0.29159561589093597, 0.03074329195247305, 0.4174629449646692, 0.06482421095068658, 0.06933997736409059, 0.174060602347323, 0.08755002758357566, 0.12354778477448558, 0.10469184706454748, 0.07620774667626462, 0.2337636044207797, 0.2181826772363279, 0.4857374181266192, 0.2482762955510135, 0.22966586848547166, 0.21501346434460522, 0.40052920416855575, 0.21361766419546802, 0.05752549126694362, 0.29513636627627016, 0.07981904932299655, 0.15323977560195712, 0.6140448498352126, 0.7840748652140471, 0.668560519659992, 0.6310818837303772, 0.5912530825306281, 0.5463880761102711, 0.5626185559248801, 0.5733837920149221, 0.08490672625822193, 0.12106686024292435, 0.0655819826669598, 0.12267965906510181, 0.13669398815742717, 0.11082432285926447, 0.13041284431740574, 0.12736208440482244, 0.1317898936477293, 0.17860743158079773, 0.5390098377587402, 0.17448757435227658, 0.2869507012784499, 0.23830779495240606, 0.26333604475542205, 0.18453293845233953, 0.5696919590199054, 0.22333186052991305, 0.5004602046911014, 0.4229361182283897, 0.5012161237114899, 0.5132804081746825, 0.4705600441288007, 0.5087254632471616, 0.5880445006629227, 0.4760195175129086, 0.5017696791002575, 0.19544576379468903, 0.40210812835789644, 0.22975051705178062, 0.2508904819051522, 0.32938528207094253, 0.39609108464526166, 0.41884510041617673, 0.3372123055456856, 0.36733978237856346, 0.2181100459745271, 0.22031592431905633, 0.23802213870756483, 0.22513571450376046, 0.2296039421863968, 0.21203321673924147, 0.23579356806872698, 0.18570732271609325, 0.19873018011750954, 0.23859852415695193, 0.20745985922099153, 0.6704369717490608, 0.19291824815278102, 0.23179807275174813, 0.19147350104074834, 0.5896460112953643, 0.23074798435165067, 0.2027453769548614, 0.8927289970130279, 0.1886510112670804, 0.15455652214046023, 0.8332364870213266, 0.19824085418839343, 0.20054634247329428, 0.1471041960890489, 0.1479151753543556, 0.159150724109705, 0.11638378880265354, 0.21095291049651754, 0.7958946385690027, 0.20687154149687237, 0.7188114490806828, 0.8214463037330691, 0.1894786623330461, 0.16869853420808467, 0.19851399280138238, 0.2184567230848833, 0.202006283781897, 0.21595142827486935, 0.19474079671589428, 0.2111914564065015, 0.19135929092041903, 0.2168398775719368, 0.18738544883134067, 0.17992861373741853, 0.09399059207889315, 0.0867774526563253, 0.08204167553357511, 0.09238859259096477, 0.08890279219360853, 0.08846275052034613, 0.09222751150970376, 0.07711606515198055, 0.09554133862564629]}, "mutation_prompt": null}
{"id": "e5e40e0e-a40f-4a99-a590-9a381552a234", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "4e08720c-e045-4db3-93e6-d25c3ddc34a2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "436465b9-6bae-404a-908e-6882e0f5777b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "d2450251-3488-4a03-873d-3582e1f21383", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "911b240d-1a8f-414c-81d9-d5042abb286e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "e990b744-59f3-4921-95c1-36a2b62dd5d1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "2fbec1fe-ccd0-4177-8676-c2887a86fdf1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "5789060f-7fa3-43f2-811f-65616081b3f9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "8fd75045-c692-4b6f-a9d7-6c829759b2aa", "solution": "import numpy as np\n\nclass RefinedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia_max = 0.9  # max inertia weight for PSO\n        self.inertia_min = 0.4  # min inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # Adaptive Inertia Update\n            w = self.inertia_max - (self.inertia_max - self.inertia_min) * (evaluations / self.budget)\n\n            # PSO Update\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = (w * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos += vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover with dynamic leader selection\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                leader = p_best_pos[np.random.randint(self.pop_size)]\n                mutant = leader + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "RefinedHybridPSODE", "description": "This refined algorithm incorporates adaptive inertia in PSO and a leader selection mechanism from DE to dynamically enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": 0.36237904012690597, "feedback": "The algorithm RefinedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.27.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.7916759892468191, 0.7982954112017739, 0.8072805894643438, 0.833173802943497, 0.18909530748903813, 0.8454938951365121, 0.8207835050113604, 0.8183105755241369, 0.18253012179567019, 0.6438780198014598, 0.07598527907843422, 0.6582492155729124, 0.6499564525895729, 0.6371477465647346, 0.7059242326110626, 0.6265404260629639, 0.6902425304083091, 0.6514602720916257, 0.13936205562504023, 0.5340352315355126, 0.12193297198841124, 0.1369702420654828, 0.5141980188011275, 0.12958597541125816, 0.13714936589384075, 0.14292718934780313, 0.5250486071951739, 0.11629135858350059, 0.15525772339970267, 0.16788174810219547, 0.1378245809957278, 0.13797100042527577, 0.12726358726840103, 0.15484591161686623, 0.10697078015240424, 0.06727860999135915, 0.9909003250091959, 0.9883601593273936, 0.9933230765714032, 0.9926461936366275, 0.9912022286630443, 0.9886448301219121, 0.991024299194215, 0.9889844989245687, 0.9903181573934512, 0.6406511850702487, 0.6297268140601295, 0.1102627108153611, 0.1503060084064255, 0.6501491656097345, 0.6537802304838303, 0.12535521112704495, 0.08919148983282088, 0.08918482020580776, 0.8694115844517154, 0.7432455439225334, 0.16920504626879518, 0.27584134231014235, 0.8110323834045714, 0.8335901614684975, 0.8040776311552602, 0.785228724145412, 0.8164983618262082, 0.4528005510779066, 0.4031176249735329, 0.48902977351391497, 0.5729234036430761, 0.3730339207229034, 0.13397415908214938, 0.48211440228093283, 0.47319237212125054, 0.4517933563241173, 0.34854669194906174, 0.010104129915080695, 0.12985442292155802, 0.4185524358544481, 0.4118986918148373, 0.41976273265571085, 0.40925413513399167, 0.41108519923433573, 0.5076413205565802, 0.057877690584625774, 0.059328446320995876, 9.999999999998899e-05, 0.11026126982891615, 0.20665457569186374, 0.05770228010416012, 0.2144479143370942, 0.22125498644054264, 0.17114877761352199, 0.32694851334663577, 0.157772266605812, 0.13609600631418384, 0.3679389322680785, 0.1057962172941117, 0.11742068871285483, 0.3731342877044763, 0.20921718022068458, 0.14206472764827793, 0.04313996657036734, 0.07604592066527871, 0.16417591891132466, 0.13933651642509481, 0.1486795092632659, 0.10837674496882754, 0.07144850890502608, 0.08052471191041244, 0.08519955480760077, 0.23428708218708794, 0.2673867459762428, 0.1692658183884398, 0.036944369995396076, 0.3458305263060757, 0.3022006593413685, 0.19779043615656933, 0.056868004514514126, 9.999999999998899e-05, 0.5769394049014762, 0.5873003563468193, 0.6247759325858364, 0.6269198173606204, 0.2086061065558732, 0.6155630638056773, 0.785504083868098, 0.6275613233876082, 0.6817123074060196, 0.5785321523042595, 0.13731022830706174, 0.13986761546377435, 0.12822002072237992, 0.10197986282442273, 0.10407630978593885, 0.10686047897507356, 0.5040936031611383, 0.5508701536958014, 0.6167140083836433, 0.24141968224158905, 0.16160139600316303, 0.194613871701802, 0.24185342267137844, 0.2798910635929124, 0.30452660215872096, 0.19586890834029014, 0.23517712367950971, 0.5603054912050847, 0.5304658380925324, 0.5032056432996712, 0.4810568662882224, 0.5152500826554988, 0.4521706742854096, 0.5223020714545699, 0.49898818660034994, 0.18542400847358464, 0.26483020049274764, 0.2579565569632326, 0.3909618858379742, 0.34037165686386395, 0.39033475605657775, 0.1709658787918248, 0.3779687975418854, 0.39675459625950604, 0.1359632085119814, 0.26545765878679006, 0.22117143703202768, 0.19304599003680578, 0.18716997821164316, 0.20448201878756334, 0.1999709429775276, 0.1903488741446906, 0.2137661799113385, 0.21807255709755524, 0.20522476109354437, 0.19773119068881317, 0.23318099471481346, 0.20857887549030452, 0.2171624969039504, 0.22973443279827177, 0.215620790173931, 0.2343504187749551, 0.20286771122529978, 0.8885907983635986, 0.876540508076749, 0.1534875190330084, 0.8852171394823103, 0.8203420939724023, 0.20048804012445032, 0.7914503624149741, 0.18941824670673213, 0.15691878742399146, 0.7952890901316432, 0.16876811540666437, 0.8097314372194163, 0.21061920441757997, 0.7732321717857786, 0.2112370741477021, 0.18871333764189924, 0.16776793010883428, 0.788476201392319, 0.19884771143544777, 0.23066833725878855, 0.1835630295756181, 0.20446630579334646, 0.19638982588458342, 0.18914055967050525, 0.19218197646024837, 0.1951916618768842, 0.22823908059587328, 0.08648200240662884, 0.07866834882702045, 0.07998416842487821, 0.12907865037893718, 0.08490685109810636, 0.06817063478668173, 0.10375591039962606, 0.09202484943572886, 0.08184650199273003]}, "mutation_prompt": null}
{"id": "eab72fd2-53a0-464a-95ee-d3d83fee89ad", "solution": "import numpy as np\n\nclass HybridPSODE_Adaptive:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia = 0.7\n        self.c1 = 1.4\n        self.c2 = 1.4\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.eps = 1e-8  # small number to avoid division by zero\n\n    def chaotic_perturbation(self, position):\n        return self.lower_bound + (self.upper_bound - self.lower_bound) * (\n            1.0 + np.sin(position * np.pi * 4)) / 2.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n        iter_count = 0\n\n        while evaluations < self.budget:\n            iter_count += 1\n            # Adaptive inertia weight\n            self.inertia = 0.9 - 0.5 * (evaluations / self.budget)\n            \n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                \n                if iter_count % 5 == 0:  # Apply chaotic perturbation every 5 iterations\n                    trial = self.chaotic_perturbation(trial)\n\n                trial_val = func(trial)\n                evaluations += 1\n\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE_Adaptive", "description": "Implemented adaptive parameter control and chaotic perturbation to enhance exploration in the Hybrid PSODE algorithm.", "configspace": "", "generation": 49, "fitness": 0.34538241918224344, "feedback": "The algorithm HybridPSODE_Adaptive got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.26.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.7723826650585839, 0.7715046135818043, 0.7879843408830602, 0.7708574417200438, 0.19009345855384863, 0.7994615049961453, 0.7741368565761703, 0.7917576675164109, 0.776483076350137, 0.07020693881131468, 0.6215109808959867, 0.6013794055272124, 0.5769386504795444, 0.6329418904848065, 0.6003817827856024, 0.6243395592283831, 0.6497993772461892, 0.619109049947858, 0.14238030192247675, 0.15213624510132973, 0.15490083488278727, 0.13237022331512582, 0.12723209451114925, 0.15393357809967123, 0.13819296028613137, 0.11597309912931619, 0.1411599578307292, 0.11699511388758232, 0.12727682731910095, 0.15793332782765135, 0.12221938860173254, 0.10855212885461207, 0.13084380205518154, 0.13053011753422872, 0.11647840466118764, 0.07406081917557183, 0.9956554574264769, 0.9909183736662787, 0.9960236181969485, 0.991251336499135, 0.9781193903933748, 0.9781532552564917, 0.9935724475748781, 0.985873976565812, 0.9755324617281576, 0.05986497860752549, 0.061200434902613954, 0.6119397359317099, 0.6316605754165753, 0.15214527506635278, 0.6235318907630558, 0.08809767229805188, 0.08733574157994894, 9.999999999998899e-05, 0.6816816074747885, 0.6813836352447348, 0.732192466437994, 0.7572582904794053, 0.15747314764742293, 0.7573036164944621, 0.6724237615483792, 0.12938954061409136, 0.7501285964173982, 0.33655528238469734, 0.4787224236524912, 0.34466814883428143, 0.31108086866354556, 0.3787850872336239, 0.3946270091034344, 0.3281736997961321, 0.39292081081845753, 0.3782914599407452, 0.29746225939008486, 0.3418780589732435, 0.3946721938803751, 0.3214250652896664, 0.4379071719252171, 0.4178608033364666, 0.44007435490853064, 0.42485869213086247, 0.3755035757022779, 9.999999999998899e-05, 0.30423799557562303, 0.2957368033190869, 0.02308566097940734, 0.24669182420891655, 0.23816765246192206, 0.3303434214634947, 0.24158905243899786, 0.07713483479386885, 0.07628279178381214, 0.10528927752704509, 0.41974395943649556, 0.28430731442635393, 0.3637216419145275, 0.28375315700379633, 0.5067454083115934, 0.49307739969992315, 0.3847768249772795, 0.09265580436111576, 0.07895383032924852, 0.06535340563453973, 0.13036067597729528, 0.1772213400178293, 0.16162235478592413, 0.06030435520138033, 0.12991256518426797, 0.2162690198240913, 0.2745598308726378, 0.25146382598042605, 0.24306525231942255, 0.036202722622038386, 0.2692221167004196, 0.28169085921190706, 0.048562638337121045, 0.2651918242740149, 0.07969410349389905, 0.15312135737630272, 0.6729236469849182, 0.6374456803156543, 0.6011962504177194, 0.6646632999775692, 0.6292444374573327, 0.6680182731580486, 0.6138712145250731, 0.6502777987843719, 0.0822995652841575, 0.10170028727739022, 0.05729253489412367, 0.08948929173048159, 0.15119009198489453, 0.15927771833212445, 0.12380168129744584, 0.10473542417799964, 0.10330049079921066, 0.19339331117498637, 0.5468131184529884, 0.2717090801585412, 0.6211124853402372, 0.5698892597801046, 0.21062785379248194, 0.20648487748309663, 0.1469105527687996, 0.26428519174032017, 0.3565370653450598, 0.47581709534085803, 0.4514167559302751, 0.4040591644401217, 0.5043133082497566, 0.4306134587897894, 0.376266027691053, 0.49900533069768394, 0.5417877641509757, 0.23822499570040268, 0.34657619055615896, 0.18473074676426626, 0.33367042669551983, 0.3266141976374781, 0.3605941500804002, 0.36319698569577763, 0.34989457607483077, 0.42354171480988156, 0.23408273762909926, 0.17915302843613556, 0.2037462630140462, 0.24161158616272738, 0.1932763588832198, 0.20316973947164374, 0.19773330109434062, 0.201481966266171, 0.21649638344500755, 0.23815401794388236, 0.2116576221783587, 0.23065917144991044, 0.20328884833139504, 0.20993780377384286, 0.23957532857372044, 0.5060381134486936, 0.18049399589033166, 0.2039705713872101, 0.8724708968941162, 0.851354628001676, 0.15439366778318253, 0.834347745152898, 0.19861928502228277, 0.2001548872165516, 0.18019744461009923, 0.11508127520863287, 0.16138037587911624, 0.11637998013404116, 0.21090568958917622, 0.8432031808935537, 0.7888114165523191, 0.7521014154906496, 0.20214326488378775, 0.18591501011652178, 0.16866938885053773, 0.20346671867450572, 0.19922308120890586, 0.2161116580479736, 0.21112593756236953, 0.20111475613716612, 0.20088291074937947, 0.1844099812707617, 0.19361859440282947, 0.1909649611636428, 0.18841867967202974, 0.09347760501470892, 0.08688626092211638, 0.09656340562138266, 0.0862731723404726, 0.0792402616927197, 0.09271702524030334, 0.09493784194198274, 0.07392406515957739, 0.08944622548163583]}, "mutation_prompt": null}
{"id": "223dc92e-390a-48c8-bf9a-5bd8b146135e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "c685db8b-e5f6-484f-a2c0-1464b7ec478a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "3309f66f-bbba-4478-be25-c8516438c1e6", "solution": "import numpy as np\n\nclass RefinedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia = 0.7\n        self.c1 = 1.4\n        self.c2 = 1.4\n        self.mutation_factor = 0.5  # Start with a lower mutation factor\n        self.crossover_rate = 0.7  # Start with a lower crossover rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.adaptive_factor = 0.02\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand()  # Adaptive mutation factor\n            self.crossover_rate = 0.5 + 0.5 / (1 + np.exp(-self.adaptive_factor * evaluations))  # Adaptive crossover rate\n\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "RefinedHybridPSODE", "description": "This refined algorithm combines PSO with adaptive DE, introducing a dynamic mutation factor and adaptive crossover, enhancing balance between exploration and exploitation.", "configspace": "", "generation": 52, "fitness": 0.3468796432395681, "feedback": "The algorithm RefinedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8809930901279862, 0.8911149546755947, 0.8892661677226263, 0.8680747443450555, 0.19063741594593164, 0.8788279337034407, 0.8804400115712984, 0.8824646772376458, 0.8719336226544023, 0.7563011456687052, 0.6973279691534435, 0.739804955943293, 0.7759595575150033, 0.047117028299872965, 0.7365075457128218, 0.7622416914885881, 0.734261811627488, 0.7689706127300544, 0.1543033366577311, 0.1506759425832317, 0.1286938628132095, 0.1512870063132803, 0.15359131421528305, 0.11374997203321469, 0.15259290569799322, 0.139236160085498, 0.1309155371842351, 0.17597731662476124, 0.13278919830558078, 0.1087246293709806, 0.14110669418955635, 0.12579923130070014, 0.11762462097234716, 0.13494117912911407, 0.15259602512734005, 0.11482845415221887, 0.9930078145787957, 0.9903378178911149, 0.9930946932268765, 0.990918659143966, 0.9905167335408067, 0.9679975360541446, 0.9936932531336184, 0.9901037038631595, 0.07483189554191527, 0.06002893817383714, 0.11420637617971385, 0.7202331508269086, 0.16006636044582023, 0.7726841626465802, 0.762957709372919, 0.7522783407964133, 0.7626854289244189, 9.999999999998899e-05, 0.3770829250503944, 0.2283898171576514, 0.9102055892532497, 0.21312229299621643, 0.8431262186056628, 0.8901819975392657, 0.11929481177941814, 0.38985320523593936, 0.8694046170394878, 0.3584809501527302, 0.43310536979230296, 0.1309288952093398, 0.13362517704545174, 0.48893287219467696, 0.42791268476935873, 0.6490627820901809, 0.5163335116779018, 0.4019469871584346, 0.41244915141314364, 0.35762271006541346, 0.31026425943988967, 0.3910246343524253, 0.42824865215162755, 0.5142807029854126, 0.3865836997670592, 0.21667221794003588, 0.371756421350534, 9.999999999998899e-05, 0.06939197047958845, 0.18669015310838155, 9.999999999998899e-05, 0.21342590803548434, 9.999999999998899e-05, 0.090726704997237, 0.07056858722227066, 0.10045468473183738, 0.33473984307787097, 0.10089315506496199, 0.22671207983839747, 0.15350629471857025, 0.14214602869801218, 0.20723348574965406, 0.30833278527168795, 0.13345568342210867, 0.11260069380487292, 0.06816899623335937, 9.999999999998899e-05, 0.2736398896738731, 0.08413324763500807, 0.07781982756544381, 0.09245120163061071, 0.17593329312126738, 0.16356774630009352, 0.11267002048039154, 0.15870357383643563, 0.04323435244504803, 0.23577811811716054, 0.21009935631286114, 0.15903383795499793, 0.18347546050187014, 0.050198560790315594, 0.05009326041974638, 0.0842897787375545, 0.5614310229876756, 0.6056389172316154, 0.5891573170044062, 0.6169855241675546, 0.6241478826486231, 0.6406015340913441, 0.668151860268698, 0.6994066729923127, 0.6049893286716483, 0.0899097464122004, 0.12080157920845669, 0.12708035921265715, 0.11050316078544342, 0.1556986613166702, 0.152954571140404, 0.12840960867035156, 0.1143598967097943, 0.11018391787153592, 0.1833318784303698, 0.327072409588805, 0.20902872200835032, 0.3730584389879247, 0.34884122065571943, 0.12830932330623723, 0.34267036729364886, 0.1524019348208736, 0.2833790142862508, 0.6809856440996127, 0.4467821586534422, 0.5392223740492936, 0.6482611869297505, 0.20782976416071108, 0.6304287167903173, 0.42855824529312647, 0.21452351852428242, 0.15301720267074836, 0.39592787291536224, 0.26591919593906876, 0.2104851825917422, 0.35671051836905243, 0.21807304463577448, 0.3051033017145264, 0.3766556395199746, 0.4953844870540979, 0.08937280918464152, 0.23088662576048413, 0.19629681145766043, 0.2075813408960231, 0.20280967572489073, 0.24164316673086084, 0.2064467906574946, 0.2042135012496431, 0.21234775556234053, 0.24413728515955446, 0.7166451086564694, 0.21608366683250857, 0.7759458442155, 0.2069957348332473, 0.21545271349085493, 0.2215431000122552, 0.20348833094276808, 0.223691726833113, 0.20355993565947106, 0.9375510061159354, 0.18872563151497235, 0.15437226962362516, 0.17270849984490144, 0.2008761849175854, 0.20190035036182963, 0.20854654074929857, 0.12044609828730468, 0.15334312608540568, 0.8196587213476283, 0.2109297614444623, 0.8688715887407107, 0.8982757078222497, 0.8264463920557026, 0.8969584415619228, 0.18956311981620622, 0.16466078285285823, 0.09432428466670406, 0.2319349735554832, 0.1970549215717884, 0.1793197648914414, 0.1828914562555487, 0.21082150209441453, 0.20639750281835267, 0.2112005006589075, 0.20286156365183805, 0.22761860122254107, 0.09200473806802023, 0.09211876637295613, 0.09322339757561027, 0.11934312639100586, 0.07951760553097809, 0.09743082001509717, 0.09682615518033055, 0.09443097078077811, 0.07545058535136051]}, "mutation_prompt": null}
{"id": "64791748-e88c-4910-86a4-75f11b236c67", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "a7db103b-31a7-4a83-86ab-2ef4f90c6363", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "ebce1d1c-e0fc-48bd-8787-5680015624b6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "e6b5a7a2-61ef-43d5-ae3c-6371a87fd083", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "a72307db-272a-479a-9956-0be895d4d380", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "568ac7de-32e4-48dd-9423-65085b2dc3d5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "87def27b-4d10-43a6-803c-8ed8f71bdd21", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "167a5fcf-8b77-4955-8045-6b5efb4cb0a8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "78fa55fb-c7f2-4dd7-ad2a-cafd79dd9908", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "a54c02eb-ec51-41f0-8eef-daa1f5c42ee0", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "f69a17a6-8cd4-4ca3-8348-dfd9229708dc", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.9  # initial inertia weight for PSO\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.8  # initial mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n        max_evaluations = self.budget\n\n        while evaluations < self.budget:\n            # Dynamic Inertia Update\n            self.inertia = 0.4 + 0.5 * (max_evaluations - evaluations) / max_evaluations\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel + self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # Adaptive DE Mutation\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                adaptive_mutation_factor = self.mutation_factor * (1 - evaluations / max_evaluations)\n                mutant = a + adaptive_mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "EnhancedHybridPSODE", "description": "The algorithm enhances the HybridPSODE by incorporating a dynamic inertia weight adjustment and adaptive mutation factor to improve exploration and convergence speed.", "configspace": "", "generation": 63, "fitness": 0.3294003496655974, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8097559576101969, 0.8201677744891197, 0.8036074736707649, 0.8134973904668982, 0.8081509122509103, 0.1892166683653841, 0.8202714877951035, 0.8232360712737247, 0.8071132066237406, 0.6891351153095526, 0.6527325608865344, 0.638566558874493, 0.6711182557501414, 0.6654269407615301, 0.6594054549813129, 0.6565043566400232, 0.6811312539263555, 0.6804231104337144, 0.5051132988012804, 0.10574515617372804, 0.06731236193592227, 0.13227141704756562, 0.13842788870929912, 0.1532531205794767, 0.1665813722514662, 0.47064522497949224, 0.15104646559919732, 0.13092436958997244, 0.09989600359082906, 0.1399730445919286, 0.10544970378258078, 0.1015485456239672, 0.1312249434984527, 0.13490041826680332, 0.14250326288785142, 0.13416856420766066, 0.9955846435244124, 0.9908703572472503, 0.996056930500626, 0.9928252224913638, 0.980656944314464, 0.9807815982950947, 0.9938751681687817, 0.9873298786852972, 0.9701707250760592, 0.05983993944659016, 0.6061346584843028, 0.05901044960314106, 0.635595600509929, 0.631680239785847, 0.6970498598564729, 0.609455526054305, 0.6187961734934314, 9.999999999998899e-05, 0.22373060366589448, 0.21497270840218385, 0.8032672035074687, 0.8393922697856663, 0.7581580339249954, 0.7520975724683013, 0.0700332853510165, 0.14942352672829673, 0.3691143290303498, 0.2426355143785126, 0.23808519914979165, 0.23542827121950627, 0.21989396817606766, 0.21122528916636685, 0.24467644015037782, 0.2190833272238223, 0.19760834131152238, 0.24748457652958855, 0.2622011434140904, 0.05382072038396124, 0.2201860679759755, 0.24970517782318558, 0.2381119843184194, 0.23092991155905096, 0.2584833576354286, 0.25969047023552383, 0.23220449558191414, 0.21472301178345665, 9.999999999998899e-05, 0.18251332094745787, 0.14638336767531546, 0.3391664522178178, 0.0879755362766742, 0.12755551872106463, 0.054459245584887905, 0.07048947654814108, 0.07722294519846096, 0.12102621209472597, 0.3233451188983979, 0.15254254357556585, 0.1184878053451135, 0.5361144414798295, 0.4090801643755596, 0.5925082152598515, 0.40889334488341644, 0.19586352197201395, 0.07776265882688005, 0.15714791288242813, 0.0868964291007589, 0.10875029408347348, 0.07224496652993984, 0.06552582899702009, 0.09375719428716822, 0.15584299116803135, 0.21370025038544826, 0.21701505155737755, 0.19945981329408902, 0.20054705849900212, 0.20486188174484687, 0.16485952677280824, 9.999999999998899e-05, 0.3139346312154978, 0.0800689796770846, 0.5776172201780498, 0.7030141119568902, 0.5351796757703018, 0.49010553839004, 0.560958599711725, 0.5585146895497859, 0.5267933694280749, 0.6396585937810111, 0.5300393080096613, 0.10324857304081925, 0.10981226353548534, 0.05962723185768615, 0.11063250582797923, 0.14228062689496057, 0.1205576839449477, 0.10096962362015782, 0.10583711998841794, 0.11785046743300887, 0.16616047238301834, 0.16428405586031292, 0.1494041751519578, 0.15666163077519502, 0.24701581828395835, 0.13797745982822385, 0.18132945106498988, 0.20436704847798515, 0.1604932105085256, 0.4419605009531655, 0.4146725604128335, 0.5550714177887979, 0.44129121239008173, 0.5220243606721469, 0.4466990078670433, 0.4974338307181856, 0.5163578997117889, 0.17320275847874766, 0.2986449735200536, 0.37690806871536064, 0.25452863726001207, 0.35543216369820974, 0.3760428811564077, 0.21544922943229283, 0.36146283160949055, 0.2701735019084227, 0.10343909370380477, 0.2009520757650639, 0.18625253463230118, 0.19270856474813913, 0.17939932883783005, 0.18988887118440656, 0.19805629467535724, 0.23129525458218714, 0.20045458682025297, 0.2433518695554493, 0.21026751687799738, 0.23433099444319672, 0.6269619153979601, 0.19602030301228535, 0.5896570724007459, 0.20047596594340544, 0.21336251318417176, 0.23175777413841625, 0.2016220634765613, 0.1657394342980717, 0.17579081875562153, 0.15434149887094406, 0.8582791545256335, 0.1996077700234833, 0.8620532537960645, 0.21080422487008665, 0.11502873681799286, 0.15317733278015933, 0.08310020293351628, 0.2071261795301017, 0.8626151319565988, 0.20028611412417607, 0.8557215577759182, 0.2083585172842587, 0.19991302363953478, 0.16784250702515668, 0.82438250692848, 0.23026990823913662, 0.18927576033208726, 0.19149128181218367, 0.19779506645220968, 0.19122065322381432, 0.1754766727498951, 0.19815676821312023, 0.21192707254563004, 0.1974378300746794, 0.04633468583101641, 0.08308798533515749, 0.07840494433534329, 0.08465425201351084, 0.08594725271616788, 0.09825341939092014, 0.09258247306585876, 0.08073445834141135, 0.08642699351410843]}, "mutation_prompt": null}
{"id": "f5cf2119-b245-4c02-9f88-bf901fe2bca5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia = 0.7\n        self.c1 = 1.4\n        self.c2 = 1.4\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n        adaptive_factor = 0.1\n\n        while evaluations < self.budget:\n            self.inertia = 0.5 + np.random.rand() * 0.5  # Adaptive inertia\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n            # Local Search Phase\n            if evaluations + 1 <= self.budget and np.random.rand() < adaptive_factor:\n                local_search = g_best_pos + np.random.uniform(-0.1, 0.1, self.dim)\n                local_search = np.clip(local_search, self.lower_bound, self.upper_bound)\n                local_search_val = func(local_search)\n                evaluations += 1\n                if local_search_val < g_best_val:\n                    g_best_pos = local_search\n                    g_best_val = local_search_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm introduces adaptive parameters and a local search phase to enhance convergence and exploration-exploitation trade-off.", "configspace": "", "generation": 64, "fitness": 0.3698721570072025, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.27.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.840271867445489, 0.8559155664299292, 0.8490767765411674, 0.7343732564176106, 0.871281065277294, 0.8569341728208001, 0.7973430874238907, 0.8517021029757107, 0.8696764240834505, 0.6816568865783043, 0.6522415892180367, 0.6739671681187187, 9.999999999998899e-05, 0.6832047450732248, 0.7154310176697491, 0.6299276827091168, 0.6806220186375516, 0.7023537950898143, 0.16608179510074894, 0.1774843231812271, 0.15689514554220463, 0.17584927194204358, 0.1546228947445446, 0.14626663300099374, 0.37796882744948457, 0.171601636393938, 0.16756340708247008, 0.1501339124468425, 0.13062178654831824, 0.1706572775190962, 0.13199073507429804, 0.15334841479533312, 0.4986982461383235, 0.14230224891897492, 0.13977086573727815, 0.14022273064934632, 0.9932769996522983, 0.9880852791319036, 0.993061352382677, 0.9907398430270283, 0.9882683223381911, 0.9927160926011707, 0.9836557082054466, 0.9903929361558552, 0.9907926843754904, 0.6474440534986583, 0.4546217299233768, 0.6568161992119486, 0.6013833619315112, 0.3326656778447027, 0.7210021896025549, 0.12738980369288166, 0.6731692314044384, 0.6202365638290428, 0.2255164879994035, 0.2193605720833386, 0.8584834159170582, 0.7896244861917485, 0.3697501613275581, 0.11759208744814842, 0.07010153879463266, 0.8446331102994353, 0.852930328038243, 0.3326433964868173, 0.413957325682488, 0.6492622200244765, 0.43148475331996683, 0.46721825333138345, 0.5109558350713465, 0.5398593612288949, 0.5092569678465136, 0.5571378332556549, 0.5580177623329647, 0.11793001997293717, 0.4583945124353871, 0.44825286712217915, 0.1328194997825498, 0.5153913012228336, 0.5321995438831242, 0.6112503596614887, 0.44657909938019513, 0.2069783349040598, 0.21394689093438302, 0.26002852312861546, 0.020216134844275757, 0.016793724774955998, 0.043810891466810276, 0.43331470965169805, 0.008892099162511324, 0.20716977518321045, 0.3374574049903015, 0.16920666400095308, 0.3292933848606595, 0.2543189995295658, 0.3809510164528138, 0.4809803580652172, 0.5856849115865848, 0.5639966871457908, 0.4642208854500183, 0.048679845170593206, 0.03519065637467922, 0.2178798816473687, 0.10571330874610907, 0.09390140526676094, 0.1011567737123894, 0.1285616606599702, 0.1189912531777012, 0.10959472205188026, 0.28176711804344035, 0.27313746904764946, 0.29900446154021276, 0.34201443539453236, 0.006529892172131957, 0.32381863229232577, 0.33728759496845073, 0.045309484034541825, 0.2884939004316509, 0.7372075618482469, 0.7662483030724249, 0.7487279200636645, 0.7178436136409746, 0.6716561495267759, 0.7306621714166288, 0.7609452469701625, 0.6755975894283006, 0.7279553328948667, 0.10650322882520846, 0.12585725149436333, 0.08854901559837203, 0.12952688411869362, 0.14844180994255562, 0.11314779007102682, 0.14030175237982112, 0.15238315346486475, 0.12283624868407861, 0.3066119151961809, 0.38356654607701735, 0.24555541427476324, 0.612773902840043, 0.6363528748303533, 0.2144888489478034, 0.24436557224317135, 0.19198670218446856, 0.26684089942725864, 0.42188366261949795, 0.5183447960317377, 0.4326458324640665, 0.5019251237372051, 0.5391064621205881, 0.5663287605280642, 0.5047382920664172, 0.5972377507849567, 0.5502312540031511, 0.3510388556050126, 0.2556792188516013, 0.3323880561392747, 0.38277750361122065, 0.33833642677412956, 0.20495039440520002, 0.3789624522310794, 0.28647614335003924, 0.2636570038898709, 0.20531537222579022, 0.18951246814153377, 0.19628837677951672, 0.1987336684831179, 0.27558936447362625, 0.2684534199894075, 0.22403241966785503, 0.2166773848899609, 0.1872188312677865, 0.2339471674281547, 0.23198051982513201, 0.7305769418587166, 0.22298781851045746, 0.2282350546935128, 0.6793922212500398, 0.23483575978676496, 0.5766408742389936, 0.19660848490296223, 0.17297571746096108, 0.18825464207266196, 0.16285977119970596, 0.16808992176757587, 0.2000476544102503, 0.20147149224144, 0.20975451464954054, 0.14722991239532746, 0.15450341917548827, 0.08295298923512218, 0.11287664140084586, 0.1273568394898228, 0.20048586579698624, 0.12703666390704949, 0.21190629120933224, 0.2118229870191678, 0.16922494616645523, 0.11218254898594293, 0.21121747541771907, 0.1945565193312354, 0.23673516307057474, 0.19444685312629828, 0.21351368876380472, 0.188601114996942, 0.19166589321071614, 0.22855164293417407, 0.23968673090044257, 0.04761479162229976, 0.08398463059773897, 0.09471496615386732, 0.08693072357234854, 0.08724614405803155, 0.1060102132621421, 0.09308980245588394, 0.09215406388538017, 0.09119044593385717]}, "mutation_prompt": null}
{"id": "a6850229-f84f-42ed-83f5-6a38ddbcec40", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "ccc2ff3d-0453-444d-a35c-de8912c26690", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.base_pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.pop_size = self.base_pop_size\n        self.inertia = 0.9  # start with higher inertia\n        self.c1 = 1.5  # slightly increased cognitive component\n        self.c2 = 1.5  # slightly increased social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # Adjust inertia dynamically\n            self.inertia = 0.4 + 0.5 * ((self.budget - evaluations) / self.budget)\n\n            # PSO Update\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover with adaptive population size\n            if evaluations % (self.budget // 5) == 0 and self.pop_size < 2 * self.base_pop_size:\n                self.pop_size += 1\n                pos = np.vstack([pos, np.random.uniform(self.lower_bound, self.upper_bound, (1, self.dim))])\n                vel = np.vstack([vel, np.random.uniform(-1, 1, (1, self.dim))])\n                p_best_pos = np.vstack([p_best_pos, pos[-1]])\n                p_best_val = np.append(p_best_val, func(pos[-1]))\n\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE with adaptive inertia and dynamic population size for improved convergence dynamics and efficiency.", "configspace": "", "generation": 66, "fitness": 0.36834667909348084, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.26.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.7610003787257882, 0.7540701180861317, 0.7539373602699708, 0.7819656336523467, 0.7791961708220336, 0.7654445566654137, 0.7888972481081609, 0.7919392156142095, 0.7835040631498269, 0.5861489792236763, 0.6015839490270446, 0.6400224497396656, 9.999999999998899e-05, 0.6207973818815433, 0.606509166668382, 0.5976556323920217, 0.6396891077182774, 0.6215649997435453, 0.15502710095637262, 0.15407574079782493, 0.15986418263577962, 0.1562804625750014, 0.47747719132794186, 0.47600178202127075, 0.13539452239985184, 0.15435537250874187, 0.42718424423773493, 0.11462775087654409, 0.11417972118107933, 0.36003070782017677, 0.1301928965941952, 0.13248797777387322, 0.12192049306517816, 0.4710913065022285, 0.10775421218995074, 0.14469395493186188, 0.9915495577458395, 0.9907602436254692, 0.9947973976565477, 0.9882641868806415, 0.9907300823270402, 0.989852372322002, 0.07495542947140021, 0.9910794699319005, 0.9827882247678422, 0.6249681758424748, 0.05960475611938365, 0.6293880194559773, 0.6085744759080233, 0.6017802347638863, 0.14903534297384635, 0.08871312825606437, 0.0865312065934859, 0.08782611401500195, 0.7716398114547636, 0.757268486557984, 0.7690884338036093, 0.775095712017622, 0.8085933803010308, 0.8035413630106027, 0.7435695379530517, 0.12657906499674176, 0.7632759734954013, 0.3990204029159108, 0.4940822199438848, 0.4536071296716955, 0.3641222372654449, 0.4364223521933468, 0.43392965654663407, 0.4503804804114496, 0.4183974571880522, 0.4200712337917972, 0.1292755475506734, 0.022525844770295955, 0.3686034481211763, 0.42706267497876127, 0.4090271303343693, 0.13054417619530012, 0.3604675731148155, 0.4688810489042722, 0.34770608675375725, 0.28802742416730776, 0.029100045997990986, 0.38233096385539955, 0.050484858393077925, 0.30086480339484023, 0.10657931325441028, 0.3474898014783744, 0.3251256529097467, 0.15524971159225864, 0.3392466133797155, 0.5027504556412274, 0.38704105996778704, 0.21284352520982974, 0.4573758744288633, 0.4873359202366815, 0.48614930132807266, 0.5488258880381776, 0.49145465493642637, 0.126429283712864, 9.999999999998899e-05, 0.16895506454067577, 0.10529199415386925, 0.06794761726440335, 0.14889010132045655, 0.08796371381301737, 0.12927805204933251, 0.06947976953365265, 0.2893682004194016, 0.2967488307538312, 0.273917474457951, 0.28062440408942135, 0.3250664300039312, 0.3319420256757165, 0.2503321885396792, 0.30393859640557364, 0.24490100394165526, 0.6811721969283777, 0.6792552433753971, 0.6878087371848525, 0.654731892994537, 0.6644900177062748, 0.6328572861843011, 0.6268162563508977, 0.13997033856378815, 0.7183161704535589, 0.11284335475617158, 0.10606579592069687, 0.08001913100717573, 0.10858654720619909, 0.12223350279727963, 0.10470244098460024, 0.11931329505231514, 0.09658160727043763, 0.12845182950001166, 0.5586167468103849, 0.32666970925912, 0.34535223917878866, 0.2091129219368859, 0.5030566267174483, 0.6169658464077372, 0.2137996365247512, 0.1867260855900459, 0.19243145053560895, 0.4482702862364447, 0.38511164909024886, 0.4922881142257949, 0.4096543908671332, 0.3928778871431161, 0.46228248496619895, 0.49046741261048976, 0.45456440475455606, 0.4112503120315474, 0.32270593604924724, 0.2983772049240976, 0.28505110696651337, 0.297902774375416, 0.23710240716404973, 0.33439547479930154, 0.40407598858643967, 0.15271026849175273, 0.35101883707606507, 0.1931894626228262, 0.2095223332884627, 0.21681020710810417, 0.1981896514854682, 0.19081899086061171, 0.22101404266033498, 0.22108496353903218, 0.19456525507213085, 0.1902299759037951, 0.19309194588116663, 0.19684622908503702, 0.19144887821088663, 0.19991452987087, 0.5611602400330091, 0.18701934138043408, 0.562648323207702, 0.642305151642032, 0.20744940515154764, 0.8590058697459566, 0.851946690485835, 0.11299536156961298, 0.8121116472024068, 0.19991992241243384, 0.19808241699287388, 0.15807646513254636, 0.14681715593445022, 0.15936178348586127, 0.7958641641015121, 0.20968537841810164, 0.7827849571312695, 0.7772989057144142, 0.16705829958977503, 0.2050312713601894, 0.2101588307536314, 0.16204212816862096, 0.1128439493211778, 0.20253138035835705, 0.21065866885370332, 0.18708773656523658, 0.16992481622614175, 0.19551093138370101, 0.18671515571068298, 0.2058060025523697, 0.19413025940351158, 0.2077052405205726, 0.0905710897494244, 0.08470417543373465, 0.0944107199498283, 0.08085310472960905, 0.08540757529271503, 0.09684247821574676, 0.08828595917092441, 0.09670963121235254, 0.08948625311453162]}, "mutation_prompt": null}
{"id": "fc8af244-2cd5-438c-9d42-3a5500005c8f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "8d62bad5-1558-4239-a7ff-8995cf853937", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "89e3c1bd-8053-4c51-8f0a-a4a4de4b5f7b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.9  # initial inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # initial mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.inertia_decay = 0.99  # decay rate for inertia weight\n        self.mutation_growth = 1.01  # growth rate for mutation factor\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # Adjust inertia and mutation factor dynamically\n            self.inertia *= self.inertia_decay\n            self.mutation_factor *= self.mutation_growth\n            self.mutation_factor = min(self.mutation_factor, 1.0)\n\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm integrates a self-adaptive mechanism to dynamically adjust the inertia weight and mutation factor, enhancing convergence speed and robustness.", "configspace": "", "generation": 69, "fitness": 0.3371856876863926, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.28.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8925213157389934, 0.8995480393963317, 0.8798475863153105, 0.8886332633704515, 0.19013716239337186, 0.8819910935544244, 0.8845680303799992, 0.8891510172999441, 0.8825041199160993, 0.786517083718049, 0.7931044406643564, 0.7743771401059873, 0.8014758778483279, 0.8049846030540266, 0.7840546198486904, 0.12424633518673711, 0.8128506012086234, 0.7878204603598259, 0.156600541921331, 0.08840015844188254, 0.16836289123035209, 0.11038691655186705, 0.11619228570729734, 0.13869090039297804, 0.1563694370797104, 0.18263719522249067, 0.13602294092825218, 0.13686674153053424, 0.13584561352542568, 0.1287859072331201, 0.15121174962405315, 0.14943147340017782, 0.12759567466073984, 0.13832187350437886, 0.15548211359801822, 0.10657990798452432, 0.9956540851413473, 0.9908945348390997, 0.9960234185195772, 0.9912404492558824, 0.9781976512194903, 0.9782073951526571, 0.9935214559387908, 0.9868956516525633, 0.9756582487845221, 0.059975016211433974, 0.8099103378944742, 0.8192896363372759, 0.15258522682303777, 0.5641249729439708, 0.14948462661848771, 0.7416076840489371, 0.08813885389105003, 9.999999999998899e-05, 0.3874512027786685, 0.37303167565715345, 0.17214689260726668, 0.2155143099106075, 0.1602759838059603, 0.8361131234040414, 0.8418824310529043, 0.23175520665961358, 0.23298090834950713, 0.180321369902804, 0.13136692726274435, 0.1954222184965192, 0.10571655884729936, 0.18995025131326226, 0.3867427885994449, 0.286427727326069, 0.12832029822690416, 0.42662900916388113, 0.1956488389126917, 0.022351969531547722, 0.12541033774208354, 0.16645757066006894, 0.3884730960634236, 0.5056354418135977, 0.5481685172908508, 0.03459912490931638, 0.2660479179101072, 0.0637795213971527, 0.06033910726294611, 0.11421096161169186, 0.20399720990884984, 0.2616415996504323, 0.18328036086301958, 0.19394953579242358, 0.28879141396856345, 0.24144882409808044, 0.33527150767166236, 0.2717570205401093, 0.42074258870705294, 0.28056365309762665, 0.23953598981794488, 0.2279682133410249, 0.32488972439296826, 0.3814007648242842, 0.3130445344920426, 0.35652049854839785, 0.19824126860505376, 0.0326157288969634, 0.21398845782377474, 0.12702517422014803, 0.07688401612048856, 0.07099638441214506, 0.08724123630414049, 0.12361269652207829, 0.2798441570783713, 0.2545192805722305, 0.16179906352510065, 0.2741012049127872, 0.3043755935071283, 0.2327781541383711, 0.05732749601876219, 0.23659684809711, 9.999999999998899e-05, 0.15317788752014294, 0.7622367196262716, 0.684085116659424, 0.7478214895089818, 0.6954328778388651, 0.6632194579832502, 0.7153159880812514, 0.6602427031067145, 0.7319390168023503, 0.10781239380877539, 0.10923482644392501, 0.07834762374764737, 0.09150878542896335, 0.09719724453535183, 0.15783351265060197, 0.1284065484054181, 0.10943977759987722, 0.12995899537793287, 0.2953156756019858, 0.17516420340756944, 0.19311650184084017, 0.3550345846842019, 0.2716564719241452, 0.16829453535420158, 0.22885535017368996, 0.15819302573785954, 0.1840745518436484, 0.5665402194702907, 0.2567506232830249, 0.5338543660524437, 0.589196630775924, 0.2036909736025665, 0.3721359461474558, 0.5595243143324251, 0.5428846681848121, 0.1762968097168749, 0.2592592643959636, 0.2386493933303122, 0.29798438238894986, 0.31615252148369677, 0.2819837374900871, 0.2573874892445991, 0.23635689975836827, 0.35714036776971303, 0.27161195296469676, 0.22678739372547563, 0.21992537017118174, 0.20571965559725303, 0.24140613714595316, 0.18270000318132884, 0.21304237249139713, 0.2756013294695364, 0.19258603496294902, 0.24756034443721797, 0.2251218457220474, 0.20431839476558822, 0.24152447182001213, 0.24759455035412659, 0.20726555001502733, 0.21998152896363554, 0.8123035660822631, 0.1936863100646279, 0.211641493303381, 0.9182137542874429, 0.18897914787261738, 0.1541973100586259, 0.9042346637825266, 0.19912080734081716, 0.20078269565193518, 0.2097775693826477, 0.12626601712370644, 0.1617910971148705, 0.08317107417402037, 0.21178452154620708, 0.8443331964077112, 0.20694465200070367, 0.1273054698993208, 0.9141689288296185, 0.1862376313995765, 0.16799992546482767, 0.7960720443628362, 0.1921707833023807, 0.1989094113241523, 0.19426740388939256, 0.21555177011930016, 0.2145397584981732, 0.20856968905666384, 0.20810263039306276, 0.2008469057039477, 0.2552454616878147, 0.10682167066115977, 0.0872283952889189, 0.09251958340252875, 0.09366137361270899, 0.09680113948104441, 0.09200133144075029, 0.10509544342541488, 0.09393451824742349, 0.09173013855831325]}, "mutation_prompt": null}
{"id": "e6381c9c-ef12-4de4-b451-97b96086ac7e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "e23389ab-500c-4ade-bada-3f3172c1ef66", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.9  # start with higher inertia weight\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n        success_factor = 0.1  # initial success factor\n\n        while evaluations < self.budget:\n            # Adaptive inertia weight\n            self.inertia = max(0.4, self.inertia * (1 - success_factor))\n\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n            success_factor = np.mean(better_mask)  # success measure\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # Self-adaptive DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutation_factor = np.random.rand() * 0.6 + 0.5  # self-adaptive mutation factor\n                mutant = a + mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "EnhancedHybridPSODE", "description": "This refined algorithm enhances HybridPSODE by integrating a success-based adaptive inertia weight and self-adaptive mutation strategy for improved convergence.", "configspace": "", "generation": 71, "fitness": 0.34491068193889085, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.9290126346826834, 0.940667286325695, 0.9421696185179802, 0.9347927063177259, 0.9264640879723584, 0.9298166612739137, 0.9324296896806523, 0.9405417332936816, 0.9294583466202474, 9.999999999998899e-05, 0.8858299790131396, 9.999999999998899e-05, 0.8808440836962037, 9.999999999998899e-05, 0.8818189469056098, 0.8859063009123747, 0.018283668723312663, 0.8872039584683827, 0.14632562647796588, 0.04147895629374676, 0.11792464508330902, 0.164248673026824, 0.18941554671265126, 0.13564740756216165, 0.1348386882951529, 0.15989492580387799, 0.07089567460822477, 0.11787340478959796, 0.16067020630118112, 0.11718135115719308, 0.1905044033586718, 0.13436973717725798, 0.11795907756923929, 0.13549371379040054, 0.16217429725856802, 0.14648333657255885, 0.9907794772219298, 0.9910820036335026, 0.9933900091193077, 0.9914710901175033, 0.9906413674824801, 0.9734694371587905, 0.9908428678964094, 0.9895716085127915, 0.9794176530560131, 0.05975254319019663, 0.059902809834964876, 0.8364599151723071, 0.1544016544211756, 0.15352188924314591, 0.15378367083907618, 0.8377118345690419, 0.8211804705258146, 9.999999999998899e-05, 0.23083108440195177, 0.9070686458275863, 0.22915283890357674, 0.27708522991321793, 0.21070377019043574, 0.9395291033936222, 0.3587026480080161, 0.9221057012454078, 0.2470429056767408, 0.09917163110003091, 0.17920951754893122, 0.7460618343858755, 0.11920626392815192, 0.17023651586463873, 0.23113235899814832, 0.19609460745065388, 0.7001718888205516, 0.20610810476797436, 0.19582107937345716, 0.009931525184377454, 0.13986237878510288, 0.16245235993932583, 0.23715196085549717, 0.16340149163648998, 0.2497952576869844, 0.2242611001546957, 0.25824142979959885, 0.06396278570318281, 0.0672353032414027, 0.11133974778580946, 0.027824084156627626, 0.2710466677819683, 0.3004143870977126, 0.22386419614117736, 0.3520135205149416, 0.0033222075117695926, 0.6063727585423915, 0.3354651684101635, 0.288540585339244, 0.4851606297110317, 0.4091373033261875, 0.43731906403182896, 0.566293082804556, 0.6257927710909288, 0.22584650573705933, 0.16135724517327232, 0.08996532239598998, 0.05422066204020415, 0.25373018926158075, 0.2339717051808735, 0.3420201334185411, 0.10787558572780032, 0.09538076676910956, 0.12776135483463624, 0.19837626786177265, 0.3707268389136571, 0.23906217774587857, 0.039587072861374195, 0.35468017255825857, 0.35235850513107947, 0.05027326877085525, 0.18413611311898925, 0.08618428779807241, 0.15339914049346115, 0.7345136082117156, 0.7666474899500757, 0.7281920862623052, 0.8925227301139148, 0.7804756616523194, 0.7853773587339219, 0.8284488102180001, 0.860882959135882, 0.14510740946581413, 0.1594319114884778, 0.11790814167432473, 0.16222422019657134, 0.09687399369947469, 0.09016326079210846, 0.08166964921251585, 0.07372812479286017, 0.12454431954672018, 0.2583515337103507, 0.44360397788528705, 0.2433360278801613, 0.25834455919984056, 0.223818285324084, 0.12902290156211582, 0.5924489669874395, 0.21973644778394008, 0.5346549553184028, 0.5218070575858624, 0.24488270185828498, 0.29314223143448515, 0.46416090163412205, 0.3618836792841612, 0.2502172638373866, 0.33316898336261824, 0.6038005926854517, 0.17102647085890654, 0.22332905454497187, 0.19935146094839706, 0.15556288281881303, 0.44901368543710274, 0.21500849603078842, 0.36162761025303347, 0.18494070538048923, 0.3101547719538881, 0.10440910356125865, 0.2674584033584755, 0.2692464141230162, 0.20838217712390605, 0.23457831080777636, 0.17846455906193914, 0.2158312623204307, 0.2544383032455003, 0.21361188842180834, 0.231663251186924, 0.2488893872674498, 0.20051456433238513, 0.20327083423945247, 0.19374160621078074, 0.19090258225513335, 0.1826690737061516, 0.25596393332622047, 0.1953955565164449, 0.1986819234755557, 0.9489083248790128, 0.18792084655999763, 0.15435822069438765, 0.17275338304126964, 0.20136979567748936, 0.20203840471837275, 0.21365912569862378, 0.12673372731237964, 0.15461957508263058, 0.0832650912234627, 0.2124606672238858, 0.9308414456232121, 0.9018347023484238, 0.16798257012559714, 0.7659636747603656, 0.1053010267470127, 0.8866094744359753, 0.8853119744966937, 0.1950473846679437, 0.1826708371000092, 0.2360588687781784, 0.19669539944274395, 0.19919895548870026, 0.19120900260354934, 0.20264098941901465, 0.1953368816785388, 0.2084882440931899, 0.10193478184167948, 0.08939491500638819, 0.10462188920352855, 0.14249976456690416, 0.10470410289898768, 0.08788613811816304, 0.08325482317128174, 0.09323751209829512, 0.0977232136651186]}, "mutation_prompt": null}
{"id": "70efbf75-cef9-4c15-aa9d-648c6b3afc82", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "f6b36e73-c8a1-45e0-83ac-9a96d52bd188", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "1eabc957-7c6f-4502-9d47-bddfbe7e5971", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "508e02ef-be8e-46c0-83f3-8cbda4eb84cc", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "6112b0cd-fc90-4010-bc8f-26219a6ebb91", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia = 0.7\n        self.c1 = 1.4\n        self.c2 = 1.4\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n        iteration = 0\n\n        while evaluations < self.budget:\n            iteration += 1\n            adaptive_inertia = self.inertia * (1 - iteration / (self.budget / self.pop_size))\n            adaptive_c1 = self.c1 * (iteration / (self.budget / self.pop_size))\n            adaptive_c2 = self.c2 * (iteration / (self.budget / self.pop_size))\n            \n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (adaptive_inertia * vel +\n                   adaptive_c1 * r1 * (p_best_pos - pos) +\n                   adaptive_c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n                # Local Search Strategy\n                local_step = np.random.uniform(-0.1, 0.1, self.dim)\n                local_trial = np.clip(trial + local_step, self.lower_bound, self.upper_bound)\n                local_trial_val = func(local_trial)\n                evaluations += 1\n\n                if local_trial_val < trial_val:\n                    p_best_pos[i] = local_trial\n                    p_best_val[i] = local_trial_val\n                    if local_trial_val < g_best_val:\n                        g_best_pos = local_trial\n                        g_best_val = local_trial_val\n\n        return g_best_pos, g_best_val", "name": "AdaptiveHybridPSODE", "description": "This algorithm enhances the HybridPSODE by introducing adaptive parameter adjustment based on iteration progress and integrating a local search strategy for improved convergence.", "configspace": "", "generation": 76, "fitness": 0.26955543052988445, "feedback": "The algorithm AdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8135144217427938, 0.668751288368965, 0.8324286771933812, 0.7798561929939423, 0.5809421085054745, 0.8168186336752635, 0.8040190716139821, 0.8244408577243845, 0.7854781524191661, 0.2798043148170548, 0.05762517233439379, 0.17674797544133203, 0.6847149812826474, 0.32746981985509516, 0.18344420344874746, 0.07991027329132883, 0.20013452921124786, 0.20135896579956203, 0.1274292609046188, 0.1437972330609204, 0.1324829286876944, 0.14231518232287854, 0.12866358939921718, 0.10508634625335112, 0.11799888289510163, 0.09622286559345317, 0.14085632506512702, 0.1053940794740742, 0.08706435129689527, 0.10074040043467103, 0.06177629224999459, 0.07791634349814336, 0.11912663396053924, 0.1016388456848979, 0.06601454630790904, 0.05057952460975701, 0.9372675976895886, 0.834794682031624, 0.796160901778759, 0.8337800481578451, 0.8239460215267316, 0.7804232646931121, 0.9767552115684798, 0.8932907114647743, 0.9693520624033226, 0.3444428458246155, 0.5120982814505132, 0.38096938864127683, 0.37145516591293537, 0.343042016833632, 0.32574628763455593, 0.34833201488504983, 0.3784899061067254, 0.3155322155444984, 0.21583938289601068, 0.2230137078965897, 0.13287798280227858, 0.1871690573940431, 0.2611545201483292, 0.589173837809788, 0.2194215454452686, 0.22342160076679585, 0.2192205755751847, 0.35397682386202234, 0.18132218198059313, 0.2242569607560282, 0.27594064851292643, 0.10278178248837588, 0.16576693455064995, 0.1728739099450971, 0.11610262967805252, 0.1742199228256872, 0.16489667720308077, 0.16206326526523895, 0.15846855690962436, 0.16761500211595193, 0.15691501964195942, 0.137551781404193, 0.19877232347071982, 0.2771700492930299, 0.16272667767498883, 0.017573470413858705, 0.076851600965953, 0.06511231681070839, 0.0032821774412350457, 0.041998086875349006, 0.06375563595306921, 0.05929792821095958, 0.24763002290874514, 0.05741251978396211, 0.1308673830657301, 0.10745972345193389, 0.17743577303958868, 0.10050387240481795, 0.1725784220331118, 0.060242246531581056, 0.0897534164582523, 0.10907400210059437, 0.17900328053368153, 0.06132711801468982, 0.16143041360304522, 0.2845019959391163, 0.11165929655236873, 0.24138625475396536, 0.07593191779734354, 0.38581057619282766, 0.192715768700494, 0.2590249449579196, 0.06371544976822918, 0.2021513793507137, 0.2164103087102126, 0.21066128224795977, 0.27432444866756023, 0.2380786470779861, 0.14891506685135514, 0.2399753172856537, 0.11854700841879517, 0.715005437486646, 0.7047307999545059, 0.5902103339190089, 0.43003829956030193, 0.5266021366896403, 0.4535166922144528, 0.7340763940975744, 0.6057135986427684, 0.4541545492747001, 0.08734774142680402, 0.10272943456369177, 0.12226005959014341, 0.13071205238855965, 0.09279459097757248, 0.12231095122054048, 0.10169411972284415, 0.127214981814171, 0.14646217030822917, 0.192404167430402, 0.19477305008664736, 0.1874855845791933, 0.2862919736301648, 0.1986482387804549, 0.1463524164002925, 0.2375659565274334, 0.14184325420934396, 0.2461655187479832, 0.27475613925865117, 0.3496125245783739, 0.28112486656050173, 0.3128789208148933, 0.46295747080413874, 0.3728677075277004, 0.3806622286274982, 0.2622410039722509, 0.4410776110330402, 0.2923143876205465, 0.24166916844351471, 0.266902352747151, 0.26148883990728633, 0.1887618328444166, 0.23795494302843834, 0.23567817795795742, 0.2614861629478332, 0.23655334130543548, 0.18795644176187076, 0.2037252436954885, 0.19376332690770437, 0.21083610291612287, 0.21718864086640566, 0.1979394112193007, 0.20596574323872263, 0.22566008430472362, 0.2414403191912231, 0.16653900211900796, 0.20669988925166716, 0.17415069422838148, 0.17796237579482566, 0.22684873262417005, 0.18924218337494025, 0.1826320744597172, 0.18359728399531483, 0.17985684931315105, 0.8004317331912527, 0.1823175011085133, 0.14355985055362253, 0.18834569938682355, 0.799020225372788, 0.19596415958844027, 0.15529772340232462, 0.7316931861396434, 0.17249801942225162, 0.19360547399523598, 0.1928452594361023, 0.5109088178123808, 0.14587947322997175, 0.19818286077488023, 0.1506786564709408, 0.18073961567130314, 0.1484548448688331, 0.5737246547348485, 0.20842975889054016, 0.17394987522551197, 0.1828384232672886, 0.1835144844654798, 0.19907568074892845, 0.18268582838392766, 0.20888554005280235, 0.1886649962764565, 0.1921164935291434, 0.08143897983458082, 0.07636957953055135, 0.0981041823824853, 0.08297464258850729, 0.09024372961619698, 0.08281914626547549, 0.08066583042475772, 0.10108363037692636, 0.0943135261969581]}, "mutation_prompt": null}
{"id": "1194fcfb-26b9-44ea-a84a-726dbf89d789", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "cfcbf6c0-3d80-4b1c-a430-e0d71e6498e6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "b8c83599-0bdc-4608-b468-bfb06aaa1fc8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "4069ea52-0cb8-4533-8bd2-2e282fba5a42", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.9  # adaptive inertia weight\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # adaptive mutation factor\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # Adaptive inertia and mutation factor\n            self.inertia = 0.9 - 0.7 * (evaluations / self.budget)\n            self.mutation_factor = 0.8 + 0.2 * (evaluations / self.budget)\n\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm enhances the exploration by introducing adaptive inertia and mutation rates, improving the balance between exploration and exploitation.", "configspace": "", "generation": 80, "fitness": 0.3728149183941834, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.27.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.795714137481513, 0.8122861282212003, 0.8070366564254177, 0.8054265500745212, 0.19021649811078178, 0.8352195713037415, 0.8117397549284993, 0.8146845655006222, 0.8105195014094002, 0.6736071338811427, 0.6720939476394139, 0.6631035258604216, 0.6666687411390195, 0.672936916585285, 0.6813135464822726, 0.6616665220083202, 0.7053239409205414, 0.6787188653158325, 0.1448925898145217, 0.15864436501415458, 0.13370357863354854, 0.14084700147092577, 0.554257007606112, 0.5591788955635882, 0.16400095832548645, 0.11768572816999401, 0.14578477289731928, 0.10916055667370728, 0.12490103850145351, 0.1326583151317403, 0.13066939337328198, 0.5699034056084478, 0.16505292830146978, 0.1394505873229167, 0.12457225380287673, 0.12463832019380605, 0.9956554247235185, 0.990917192893381, 0.9960236115680523, 0.9912506500147067, 0.9782969383243856, 0.978255571572804, 0.9935728480596291, 0.9869240525846487, 0.9756217267828412, 0.06005080302214627, 0.6734220661647985, 0.6713459419025687, 0.668667284211613, 0.1512710779388835, 0.6778361256968279, 0.08838711927074416, 0.08788631036424432, 0.07720197130919348, 0.22666346786965563, 0.7934370626294174, 0.22763743027454897, 0.7649503089167636, 0.15953776285467425, 0.7937476495480372, 0.6384620811434176, 0.13005447832267603, 0.8251270809937674, 0.38249741320297137, 0.470175099105277, 0.4729426235227384, 0.4613071570414572, 0.4706191976223405, 0.5046415701464146, 0.44820112284905067, 0.5068814761469622, 0.4956231651558817, 0.32891918338689297, 0.022329718125122744, 0.4144792161983909, 0.4154595603671519, 0.4047070007623603, 0.5629118146714933, 0.42116811385388353, 0.034360018642475953, 0.5035253787548892, 9.999999999998899e-05, 0.27155375657161784, 0.338626688795987, 0.3094353831259419, 0.1600527164620824, 0.35670314665673086, 0.28097997406234343, 0.16565887888662023, 0.2784829638619972, 0.07698701460281099, 0.4171249112444928, 0.48540037784682744, 0.49993416878003805, 0.21211775928187193, 0.37930778431155965, 0.43109646126601864, 0.43885379561164517, 0.5874121267696459, 0.18336147367879208, 0.1685555320469846, 0.07747558657933329, 0.17928026806777853, 0.18498603116718637, 0.275058511876377, 0.0913721500604322, 0.16071759593236257, 0.1409068977671415, 0.3086597971466749, 0.2738515145689079, 0.2583044719876708, 0.03652523691943155, 0.2970574005484101, 0.3050128700509298, 0.04972077377604567, 0.04877463071130006, 0.0794906721294174, 0.15326066317732034, 0.7076560765501441, 0.7044380506745338, 0.6471565696457584, 0.6318521375872491, 0.6374197528286822, 0.6722244888361002, 0.661056559033193, 0.6611458431247028, 0.08022610885125703, 0.1387830303008475, 0.05860289091863269, 0.16938586154518276, 0.09961035835643595, 0.1432981590170077, 0.10437377644818191, 0.13026089430275611, 0.13275215292312026, 0.18224870060654275, 0.6286044463267104, 0.2555915382161861, 0.35129743120226975, 0.6426379278900816, 0.30708631255161767, 0.23533312552297647, 0.20830707194856246, 0.201783600532617, 0.42258957861868285, 0.58033571758022, 0.43215817250913025, 0.4679177949826383, 0.2033656742658867, 0.3776880717366422, 0.4520413325791345, 0.509022106840181, 0.27857788570470765, 0.22745182849872903, 0.2975446478915039, 0.42949395218014175, 0.3561831424623214, 0.18804994296589383, 0.45230545281885626, 0.4681677213482568, 0.4052767219675616, 0.3417678226697751, 0.22934483132948058, 0.20486427334390456, 0.19752449526334137, 0.22303159625961433, 0.20354991090108132, 0.20898439627232268, 0.23745127091748242, 0.19355140382339164, 0.23233910047398343, 0.6377200374059196, 0.21286376457220324, 0.20379891879150613, 0.23879289583083496, 0.2020218892697394, 0.2343026480778212, 0.19525392858204005, 0.6508561464556526, 0.6424179496223277, 0.8714086476227556, 0.18834660961674277, 0.1544259903370303, 0.832256530753058, 0.1998596627285525, 0.20000635066345673, 0.14761038028661133, 0.12846524298331352, 0.16154015640486064, 0.11633145869425643, 0.21069915789590798, 0.8642213090395762, 0.831961498565833, 0.223694935200056, 0.8421188908349665, 0.18949807040554856, 0.16870563660595272, 0.7935470962070984, 0.20659474901318609, 0.23435212006991524, 0.21164852554507252, 0.20177560284513196, 0.18955746234079118, 0.17737944709145836, 0.19731905328659227, 0.20095320621912838, 0.18696204127210392, 0.07806530398779354, 0.08907700578515887, 0.0955130451796673, 0.08431660308564093, 0.08458799711504439, 0.08315598311853467, 0.08454235757525874, 0.08096158464204695, 0.10139171503351996]}, "mutation_prompt": null}
{"id": "e01881a9-9701-4f0e-9fc6-6761d2f8d241", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "9a17477d-1930-4708-8447-019c9994a1bf", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.9  # initialize with higher inertia weight\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # Adjust inertia and mutation factor adaptively\n            self.inertia = 0.4 + (0.5 - 0.4) * (1 - evaluations / self.budget)\n            self.mutation_factor = 0.5 + (0.8 - 0.5) * (evaluations / self.budget)\n            \n            # PSO Update\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This enhanced algorithm incorporates adaptive control of inertia and mutation factors to better balance exploration and exploitation, improving convergence reliability.", "configspace": "", "generation": 82, "fitness": 0.3717052081377866, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.31.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.9320515937012849, 0.9311829581612419, 0.9339268811567376, 0.9349144994901097, 0.9259473163505055, 0.9366982525497537, 0.9415080457946244, 0.9351252842368983, 0.928179033978353, 0.871916340641871, 0.864539828611822, 0.8457766647051972, 0.8760457401706718, 0.811083914084582, 0.8834735488039246, 0.867957764703484, 0.8719504050612537, 0.8776098068754489, 0.11795734337851393, 0.15934688371677164, 0.16381300068829274, 0.09802902758953369, 0.18668761178257498, 0.10854265242005678, 0.1252067164124695, 0.0923000644439268, 0.12610005226717802, 0.1349203466257588, 0.11672818362973558, 0.1341554184051582, 0.11789524344948044, 0.08678572550775898, 0.14521392815700251, 0.134216587826001, 0.11820312739687311, 0.12491354890716921, 0.9911621377817461, 0.9853288913616398, 0.9904769452873016, 0.9824820382543272, 0.9905395328263307, 0.9834407507955022, 0.0749244735450666, 0.9911634423323352, 0.9429433554589842, 0.8716015833592368, 0.06004644713004614, 0.8800013369578198, 0.8734559810894066, 0.8758567818176755, 0.8670325105085392, 0.8112105541479645, 0.08941375516031058, 0.08873809100784003, 0.1732566415152229, 0.3918512810747088, 0.22865983473972995, 0.38646970317382434, 0.21379406355032726, 0.9123261905278532, 0.15209647390609204, 0.2216138899319442, 0.931749915459379, 0.45077124249494294, 0.13237428988833855, 0.551376272586423, 0.27387837638872536, 0.36195624212032906, 0.1363191403995052, 0.5517329051051099, 0.5066612175521187, 0.5435363836584215, 0.29312206639152416, 0.11417306385844528, 0.3132429987576054, 0.5779697113954236, 0.46666588999975944, 0.5555954907151718, 0.4672086402787291, 9.999999999998899e-05, 0.5319824699673799, 0.12091323619904037, 0.11900792095557189, 0.10507752347500687, 0.03576645013651247, 0.10399749404783576, 0.0715170916309722, 0.15026274804441786, 0.3617065390253502, 0.1729020639877763, 0.23302065395290972, 0.13491784591315337, 0.08371726342105246, 0.10391580106120324, 0.008321379414980012, 0.0593487706726612, 0.21860612441262006, 0.15287407145496235, 0.19297491801998579, 0.13540642804093628, 0.03874086449204028, 0.24452209725390772, 0.13538889182804037, 0.08924762174593326, 0.08907278626741821, 0.1334071122635644, 0.2169869548378066, 0.07941763754804265, 0.16845233216699051, 0.33598968571062793, 0.12892515444093444, 0.03986907238034032, 0.22066100076485407, 0.03959335395623398, 0.3084613028178207, 0.2268812956278009, 0.10399014687122721, 0.707468931999349, 0.6624641355716566, 0.6373616566620723, 0.6094922374816232, 0.658471820731132, 0.7528069088396155, 0.6449200186343893, 0.6933965539965505, 0.7619005885444496, 0.08766605810795791, 0.06826330044124751, 0.1451417593721167, 0.13170979436510621, 0.10585237667112524, 0.12681574860354505, 0.11721745377886161, 0.11932461308676556, 0.1236566154605081, 0.8880666592564258, 0.23179104952089524, 0.7964278543320743, 0.24265902034559395, 0.23804770380657192, 0.21734063349306976, 0.2982874546834179, 0.2362124041760134, 0.2043462066905034, 0.6753713901413632, 0.583978267245157, 0.42311305444107716, 0.3333296043009695, 0.5070295575477219, 0.5672523534243747, 0.253958562111233, 0.6890155978683943, 0.5275428785912194, 0.20256412798372625, 0.2245305945922077, 0.31389998699343813, 0.2537815792882605, 0.3167623590173534, 0.5315738294495381, 0.22111018670988103, 0.5422027693193274, 0.24920733046619226, 0.22268726410111384, 0.24180198966918198, 0.1901189651532469, 0.28086265438325897, 0.2468785398229102, 0.2131574104474664, 0.2391024490304582, 0.22005909737047757, 0.2522038347914807, 0.8486711665240811, 0.2526829984877631, 0.211200138282005, 0.2070113771088946, 0.21016487951061313, 0.19189074522067084, 0.2109774624343036, 0.19911488716871117, 0.18386215896948221, 0.9559115220415242, 0.9510330776062637, 0.15462016943178913, 0.9469453355860307, 0.20193735219662978, 0.20173217731310067, 0.1594510890116171, 0.1150776130917931, 0.1627763216403515, 0.9137371271409357, 0.21425625828667372, 0.9161561258541847, 0.11333141859183993, 0.1698491990192802, 0.21190585491171043, 0.10419687322747484, 0.1674932110067321, 0.9325061967812447, 0.19490073933218677, 0.20188007021206034, 0.2210928321867236, 0.19024209282940652, 0.19772219486642229, 0.19717151481359363, 0.20267445902011427, 0.1887644602593851, 0.24043954089751451, 0.10575332389610081, 0.07834168566703115, 0.0908490862586212, 0.1517476374226049, 0.0839173225289771, 0.09287378601098795, 0.10605681766688668, 0.08641880690485593, 0.10371207684741834]}, "mutation_prompt": null}
{"id": "60a79f3e-0d78-4a70-b290-fd345ce496fa", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "6c629014-ae6c-4e4f-90d8-a4cfd2b2f58d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        # Adaptive parameters\n        self.mutation_factor = 0.8  # initial mutation factor\n        self.crossover_rate = 0.9  # initial crossover rate\n        self.chi = 0.5  # chaotic component\n\n    def chaotic_map(self, x):\n        return 4 * x * (1 - x)\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update with chaotic dynamics\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos) +\n                   self.chi * np.random.uniform(-1, 1, self.dim))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # Adaptive DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                m_factor = self.mutation_factor * (1 - evaluations / self.budget)\n                c_rate = self.crossover_rate * (1 - evaluations / self.budget)\n                mutant = a + m_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < c_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This refined algorithm enhances the PSO-DE hybrid by introducing chaotic dynamics in velocity update and adaptive control on mutation factor and crossover rate to improve convergence speed and solution quality.", "configspace": "", "generation": 84, "fitness": 0.23923565548828774, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.4491315689862104, 0.4677839807933716, 0.49992503873573346, 0.4612159213880642, 0.49862551434125946, 0.5013136797444494, 0.45312805490997354, 0.45125566551169805, 0.46550322848559456, 0.2363761697121759, 0.18634780328679812, 0.21131513887399167, 0.3117148703069128, 0.19529691812709626, 0.2383205567916673, 0.21877740579411054, 0.1696905965869111, 0.19695315009470182, 0.11206714304096799, 0.0968822584008211, 0.10785084098990683, 0.1163683264533405, 0.10019032627765989, 0.09684506607317889, 0.09328508100177912, 0.10043140947934193, 0.11121986028958564, 0.08639531661807665, 0.0536442040565247, 0.09312667850865253, 0.08838020236617883, 0.08720924799396235, 0.09374046266760105, 0.09399656609875762, 0.09786416314812563, 0.09440256482943876, 0.9926730200146778, 0.9879477580279339, 0.9939889420951169, 0.9924383471054541, 0.9884454947141438, 0.9792549701148382, 0.9944664124005691, 0.9885111619940811, 0.9714061128736013, 0.26042790759090817, 0.23617955229176746, 0.2689183197184878, 0.29259489761155943, 0.27116313737766606, 0.25574055629487, 0.2605591940091774, 0.2548277749547714, 0.24709251608193195, 0.3664229866273149, 0.3023347670906059, 0.35660376888974765, 0.20159943646488232, 0.19594749337747486, 0.3412143501788252, 0.26566569738867574, 0.2764491579419034, 0.6171782950990636, 0.21276562842594182, 0.13227799383082584, 0.15045071286563894, 0.12529880984687303, 0.18578812415097434, 0.1571635595227655, 0.1598438120965504, 0.13069627191425937, 0.15526397675668158, 0.149218760903451, 0.1311734430441246, 0.17257902730887886, 0.16322840410388195, 0.16532491544420624, 0.13192213183487, 0.1936982306529933, 0.1586576741794541, 0.1598136510894832, 0.06028533630504773, 0.06294597078367281, 0.013274206003626388, 0.023820064181002687, 0.03608440598787055, 9.999999999998899e-05, 0.12147078216669072, 0.09259345823211096, 0.04355918104910961, 0.15737217198658504, 0.04842684548785692, 0.2822289407615719, 0.15603907087771696, 0.22791622552882507, 0.10423209931322708, 0.26507939586347007, 0.13255107835525126, 0.16865645274424734, 0.0007673408558374062, 0.022972719193088742, 9.999999999998899e-05, 0.02356537539713699, 0.05329413004235661, 0.015670941061780463, 0.06734361944035172, 0.0538659802895336, 0.021365806184225566, 0.14384792914365174, 0.11471045729241691, 0.1446893443177245, 0.12531882384412407, 0.10836470543931243, 0.12199617601350143, 0.16006007544345446, 0.10860485850317259, 0.11173708828757556, 0.4405144152252951, 0.4495841050806172, 0.4434414129662305, 0.4200721551463269, 0.4328580342203331, 0.4416168690393625, 0.4943152060076659, 0.43190375648820534, 0.4172738812098786, 0.1090088860145052, 0.1323307383311998, 0.10188407733907479, 0.09531389970033433, 0.09315115323074985, 0.1130246477501532, 0.09237811271075824, 0.11195796961384907, 0.13577581215085743, 0.17891766608749582, 0.15181984734020493, 0.2581670087286524, 0.2532525794245336, 0.24888908768526818, 0.15727729124720824, 0.23302736818811842, 0.2049311775491538, 0.15134835512229272, 0.28118663327923055, 0.2813543532992815, 0.27604556116006407, 0.2854338014471285, 0.26072184826650213, 0.30748675170810524, 0.2910443958463168, 0.2752012677066624, 0.2555342665330381, 0.2185170482555634, 0.22469127138474798, 0.20433734071153042, 0.23639466848357493, 0.20656438506993258, 0.20479774226165526, 0.22561518829929372, 0.2307830458991158, 0.22342598906855182, 0.21778607512692894, 0.22902616052459024, 0.20189347155808757, 0.2254640791791619, 0.2009856036345159, 0.2065399569485169, 0.2291328418796601, 0.18826383648959344, 0.20872099821760093, 0.19594659173119555, 0.1778222226679076, 0.1865225879221145, 0.24242974198391298, 0.17610411331321907, 0.19607302590164122, 0.18583173630491556, 0.2592052276132337, 0.18447791414397963, 0.7458365629075594, 0.18854661319821497, 0.152978468463973, 0.7038140574616981, 0.2005591697408925, 0.20078044379247295, 0.2113711478662016, 0.12203720767991943, 0.15389888149211473, 0.43898744734933093, 0.21075047402691482, 0.652157747205615, 0.21089583331085682, 0.16802022417504592, 0.6564336853783652, 0.10516983716754968, 0.1681039301559596, 0.5996452628823632, 0.18524196763185208, 0.190314512437866, 0.17746720999935628, 0.19389414497873525, 0.20225305689553996, 0.17966486214403543, 0.18574216737542726, 0.20717053855959378, 0.1778336284662575, 0.07939822562134091, 0.07366014015674138, 0.09228494062051962, 0.09877775080150353, 0.0929887087369794, 0.07981916125383193, 0.08273628506248643, 0.07515887995209103, 0.08840795965789516]}, "mutation_prompt": null}
{"id": "84f28d6e-96d4-4a8a-9445-f8cc34af0c57", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "15009884-f5a5-42ab-8a73-64205088d378", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "c102662b-96b2-42b9-8b21-0ffda0ad49e2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia = 0.9  # Increased initial inertia\n        self.c1 = 1.5  # Slightly increased cognitive component\n        self.c2 = 1.5  # Slightly increased social component\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n\n        evaluations = self.pop_size\n        adapt_rate = 0.99  # Adaptive inertia rate\n\n        while evaluations < self.budget:\n            # Adaptive PSO Update\n            self.inertia *= adapt_rate  # Reduce inertia over time\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover with Local Search\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n                # Local search step\n                local_search_trial = pos[i] + np.random.normal(0, 0.1, self.dim)\n                local_search_trial = np.clip(local_search_trial, self.lower_bound, self.upper_bound)\n                local_search_val = func(local_search_trial)\n                evaluations += 1\n\n                if local_search_val < p_best_val[i]:\n                    p_best_pos[i] = local_search_trial\n                    p_best_val[i] = local_search_val\n                    if local_search_val < g_best_val:\n                        g_best_pos = local_search_trial\n                        g_best_val = local_search_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm enhances HybridPSODE by incorporating adaptive parameter control and a local search strategy to improve convergence speed and accuracy.", "configspace": "", "generation": 87, "fitness": 0.37976436714755574, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.27.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8234900236971076, 0.825134876477681, 0.8271801353722538, 0.8241527614745189, 0.8347016677319312, 0.8249609029549675, 0.8419781265196786, 0.8246820608212665, 0.8276976234350639, 0.6980880423554237, 0.6841544545291456, 0.6901193169236965, 0.6888170261819394, 0.7118226127140356, 0.6807319424091118, 0.703553311037791, 0.689913908844749, 0.6957706869958131, 0.12084509012554334, 0.6275490406312403, 0.6124008643846617, 0.6231840897549228, 0.11627236178165545, 0.10126424466673711, 0.1689374727799171, 0.15929746142306467, 0.16031903189619767, 0.13752287494072357, 0.10243615331076106, 0.13735179234037864, 0.12519804129434575, 0.13592285449957398, 0.13451113501733003, 0.12903456058478346, 0.12361789611142526, 0.12025186443553393, 0.9909717357938153, 0.9873155320345245, 0.9911129103393109, 0.986118251519251, 0.9899215620640573, 0.9897871157510413, 0.989007418122252, 0.9921981877392091, 0.9900066468761242, 0.684042092877973, 0.6949341192847033, 0.6942395623862703, 0.7211510339295417, 0.7004852233192161, 0.7009889926674304, 0.7008926803135969, 0.7154576059774755, 0.6913331524697992, 0.8371888666521792, 0.7630948495525621, 0.22051590580614655, 0.7834580129209741, 0.7668675518310522, 0.8000010549794803, 0.2247010570581185, 0.7917384872498108, 0.7907731658933193, 0.41171219430971284, 0.3902111115673613, 0.31573867952224177, 0.31765711099380334, 0.11946373862392667, 0.5029718362019897, 0.46787645077608864, 0.21653991265080996, 0.23789882798402362, 0.32632192607016564, 0.1212585007195679, 0.5256817316433242, 0.4523991913866857, 0.57566944928566, 0.3416298751765138, 0.12751447348645129, 0.11012140511626689, 0.40694970633366156, 0.21874453636041613, 0.2517435896295642, 0.18235397052417646, 0.2316398175126757, 0.26084737910815303, 0.18315068611295526, 0.3376429875940904, 0.19086583021634773, 0.277324091386668, 0.27678175997909393, 0.3442179843022525, 0.4231350225042315, 0.24530125376016654, 0.08147408199413386, 0.45351083106883006, 0.18188029433588404, 0.3855322691708769, 0.4168231899000272, 0.05592840305438895, 0.0667578075093892, 0.16440534496136383, 0.11111110701431481, 0.09662506955902628, 0.12730737633982192, 0.1008056189500165, 0.07053910090876092, 0.07079777774039953, 0.2948384536773099, 0.2840990752665199, 0.23177985937573153, 0.24620772822199533, 0.2690815751118407, 0.2887045740579278, 0.2687641841382268, 0.21202061128179472, 0.2629559822130735, 0.6252578610284822, 0.6309627428987956, 0.7099099468414573, 0.6669556185196475, 0.634876360294321, 0.5755826526379753, 0.5855806915802003, 0.6792577467720663, 0.6448726857511443, 0.13211525389872913, 0.11873904946194525, 0.12658187250564645, 0.08981506416553253, 0.12207845599161204, 0.1444501359406526, 0.1203929166185197, 0.1196105961320989, 0.10152364379459211, 0.19844275689899493, 0.6064335438776414, 0.21521575355023093, 0.23299837520907596, 0.28403244417492446, 0.3045875528483124, 0.27147072269118766, 0.25052842123928676, 0.4474977041256062, 0.42535772457462717, 0.24086414560665448, 0.37179550044690035, 0.4539915562633482, 0.3661684210426963, 0.4612830597681865, 0.28116921642109627, 0.653411315695752, 0.5336601870907267, 0.26330955717367754, 0.3554141922926105, 0.3273029036405709, 0.2067989253199265, 0.2990975620916224, 0.361717987816505, 0.40823283625137174, 0.30824294852251244, 0.29624758537623397, 0.2110888153619912, 0.2117928472618008, 0.19675914572591457, 0.26427694613013675, 0.2116366394851923, 0.22554563638042413, 0.206439814331161, 0.21827167539131764, 0.20378695769629285, 0.22230671372444577, 0.19790778772565754, 0.23288976693199193, 0.238816236859408, 0.20264244447713786, 0.21174714347970613, 0.21610398271383835, 0.20369590816356975, 0.20086072415293943, 0.8711388882773521, 0.16490630836315323, 0.15311382120833317, 0.8564750431065361, 0.1985928946198764, 0.20043684945391615, 0.1657670645817183, 0.12493438929015588, 0.19334300892954082, 0.7835653430495136, 0.20836413695225897, 0.8249187997712109, 0.7863573486040012, 0.16481651013726206, 0.21012725147682432, 0.21051419810679928, 0.15330059829007892, 0.10425681673043707, 0.19748651349409796, 0.18473244476042106, 0.18914768950356864, 0.22772914015984236, 0.20889341965564745, 0.1994128824744772, 0.20343859474100223, 0.19820543792819767, 0.19810535938303075, 0.09948504857887475, 0.09069948368092395, 0.07989169077770164, 0.1270480125290323, 0.09752811833209529, 0.09192161442594138, 0.08878847788684141, 0.09232389033111343, 0.09444640088872203]}, "mutation_prompt": null}
{"id": "9eb80a6a-7796-4e70-a216-5f90b1d26559", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia_max = 0.9  # max inertia weight for PSO\n        self.inertia_min = 0.4  # min inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate_max = 0.9  # max crossover rate for DE\n        self.crossover_rate_min = 0.6  # min crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n        iteration = 0\n        max_iterations = self.budget // self.pop_size\n\n        while evaluations < self.budget:\n            # Adaptive inertia weight\n            inertia = self.inertia_max - (self.inertia_max - self.inertia_min) * (iteration / max_iterations)\n\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Self-adaptive crossover rate\n                crossover_rate = self.crossover_rate_max - (self.crossover_rate_max - self.crossover_rate_min) * (iteration / max_iterations)\n                crossover_mask = np.random.rand(self.dim) < crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n            iteration += 1\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This enhancement introduces adaptive inertia in PSO and self-adaptive crossover for DE to improve convergence dynamics.", "configspace": "", "generation": 88, "fitness": 0.3233062331191099, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.7089787350773786, 0.7449870406561183, 0.7781016524650303, 0.7185332025288323, 0.19036156401021476, 0.7526915607775687, 0.7569074207119755, 0.746981420820527, 0.723250965764962, 0.5220514554271282, 0.5406447756844137, 0.50639738610209, 0.461790663876687, 0.5044875417486577, 0.5110397716506259, 0.018156317503021602, 0.5485030226921754, 0.5354218414789916, 0.13859737767544178, 0.08885632105157804, 0.13055592346827727, 0.12084623820907292, 0.1308977456464352, 0.13549415751099092, 0.12467483917346345, 0.13156602500032077, 0.32270739822557004, 0.26592028427338976, 0.12523596883387123, 0.11557538525492617, 0.12180970163149052, 0.09944616144324736, 0.13372925131789792, 0.3304862800203098, 0.1389183123586436, 0.10604499672383794, 0.9956563922621995, 0.9909195444690672, 0.9960236426082109, 0.9912520563990499, 0.9783034544171323, 0.9782702671504183, 0.9935735377966128, 0.9869279563669225, 0.975635764348849, 0.05996128540488044, 0.545701687780203, 0.49553935198965515, 0.43947498723328104, 0.15236106588092246, 0.4738285780699294, 0.08835100611481594, 0.08753396944428371, 9.999999999998899e-05, 0.7949549479490176, 0.6762614647239646, 0.35990293564773235, 0.6978398429000072, 0.15963254956632988, 0.6845500246239826, 0.5272068534928436, 0.13746349100138433, 0.6581660500087001, 0.24244397445840982, 0.33390262318333486, 0.2224401700956925, 0.3011138707935396, 0.3666906863674354, 0.31156548054776756, 0.24834540699796115, 0.30601620073374813, 0.3344384305513718, 0.3677581738619995, 0.02235935518384191, 0.26437843509476966, 0.2769967835440442, 0.33212588660362985, 0.30693163429880355, 0.2734779206445579, 0.12647807010631462, 0.27240933258535405, 0.260656145675207, 0.23221220369034923, 0.21547470068532015, 0.31496794485013957, 0.22188455361052306, 0.305413152436564, 0.2570998706118969, 0.05101413436996882, 0.26784346334837905, 0.2786575893211287, 0.3798168127984364, 0.47116217378636416, 0.21993853908855632, 0.14260885163264447, 0.06915836488495497, 0.2772943808395668, 0.10049744695503415, 0.4598055337940694, 0.06830405366944492, 0.030357467787993087, 0.10839878150135063, 0.1189474505090804, 0.14176888638716623, 0.0833319609148866, 0.10154260960277128, 0.1502854484287336, 0.12331372660811102, 0.23572963289981874, 0.23093864376937756, 0.21337545412088665, 0.2837754683695616, 0.2318863603606084, 0.25210467793491254, 0.04960919865225111, 0.23319006968917522, 0.07826868622854344, 0.5142184121902456, 0.6031531434453818, 0.585679310174817, 0.5686702161896195, 0.5571380688600107, 0.6528926364797223, 0.5391815609235726, 0.5952140357429929, 0.574298552070945, 0.10353387056661667, 0.13222159983577475, 0.06479644952879093, 0.13089994954277429, 0.12055051094307578, 0.11060126458735542, 0.09675723246772083, 0.13787426279977733, 0.13975538784977148, 0.18021773208460168, 0.2078657217655393, 0.3814520941955657, 0.528807085465517, 0.252192710145986, 0.16682967794023584, 0.19616201840711223, 0.1850579745711025, 0.1620298463422739, 0.3482107919667766, 0.4051741859390977, 0.35633593609310055, 0.3472522141774166, 0.3969791611386341, 0.3981004260533656, 0.399101727474078, 0.49430175094186557, 0.4195741400311864, 0.26371943243192175, 0.26104997154155307, 0.2612807524346388, 0.2765913007152555, 0.2795006218306211, 0.2578100729241676, 0.2797292040053512, 0.29950757922307225, 0.34046018520810584, 0.20595960683640013, 0.2001450725511712, 0.21310842866186785, 0.1825453443125865, 0.19564786089237607, 0.18699399186262045, 0.21032915524795304, 0.22044879749474589, 0.1963695048467543, 0.21208275300166002, 0.4843089687089758, 0.18875068699954478, 0.22812561437712786, 0.21581832772458653, 0.22787412780242455, 0.2277429224146068, 0.2143240566713398, 0.18373678220537848, 0.8708914284545063, 0.188597661744341, 0.15455320198055356, 0.8088051742603157, 0.2002926123804608, 0.19914442753849515, 0.14700219454382035, 0.12849314573059123, 0.16069239954864767, 0.15430887913214242, 0.21012600779329682, 0.8299487005967945, 0.7792657823159947, 0.8167381957439042, 0.8482370467722651, 0.1894989936666982, 0.16834464077223787, 0.8017350685810112, 0.20215977502645033, 0.1941074839410727, 0.1837130360247159, 0.21281727538701567, 0.18996828227085094, 0.19346825573815019, 0.2037532689246122, 0.18923810432958577, 0.1854327313902645, 0.07247737251205622, 0.08835732588222511, 0.08333568347513298, 0.07499954280290999, 0.08024605127742712, 0.08434573363568942, 0.07542947706842729, 0.07642003239670014, 0.09361028831722873]}, "mutation_prompt": null}
{"id": "f3951fba-8091-4c8d-874f-4992859ba8e8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "cb4498e0-fba9-4781-9e1b-e51587943bea", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "1791b99b-5232-4489-8ce0-9ce23d9e2da4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "28015744-63a8-4bea-828c-bba321831192", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "b3ad68c3-a81a-4b28-839c-69d4cf8f97e8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "2c24ebf4-65b3-4f79-a9d2-71c39e09aa30", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "40806807-4cc5-4e18-a102-c8c0b81aae18", "solution": "import numpy as np\n\nclass RefinedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia = 0.9  # Initial inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.5  # Initial mutation factor for DE\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # Adaptive inertia weight\n            self.inertia = 0.4 + 0.5 * (1 - evaluations / self.budget)\n\n            # PSO Update\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover with adaptive mutation factor\n            self.mutation_factor = 0.3 + 0.7 * (evaluations / self.budget)\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "RefinedHybridPSODE", "description": "This refined Hybrid PSODE includes adaptive inertia weight and mutation factor strategies for improved balance between exploration and exploitation.", "configspace": "", "generation": 95, "fitness": 0.2954888377386399, "feedback": "The algorithm RefinedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.25.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8108218546873457, 0.8273390019074588, 0.8385602631552893, 0.8412772170025926, 0.7694046334787706, 0.827816545781723, 0.8267396136465972, 0.8464569613123123, 0.8333006633711582, 0.6831389788528728, 9.999999999998899e-05, 0.6263273667452347, 0.6605002434185288, 0.6446592362570929, 0.6429392435916698, 0.05225116666991014, 0.6582581245138579, 0.6602109908092242, 0.16715149428175513, 0.119388681343638, 0.15590916005017807, 0.1691130221073941, 0.14129867721355127, 0.11663359556383779, 0.16527490451861082, 0.12397460775009239, 0.13284732885968786, 0.14609818113569129, 0.1293216830924161, 0.15205285665042811, 0.14582047724720792, 0.13904141630714872, 0.14912695784986807, 0.12439287778281582, 0.12844705026539527, 0.15238252176104272, 0.9935317433388061, 0.9881945943139456, 0.9934616428545174, 0.9884891215624964, 0.9885498153626678, 0.07486047467173829, 0.07495071854625435, 0.9929701599056171, 0.9852815443960383, 0.645442214344922, 0.06011616744824899, 0.6383785777571567, 0.15103761001181415, 0.6740656048141522, 0.6419809037783419, 0.08805912330500598, 0.08850921797264033, 0.6779324107513853, 0.1966845711332218, 0.35054628794084, 0.22920767084108284, 0.35731620937919584, 0.19255688420720773, 0.1896117869484607, 0.23405624472955155, 0.11654546495568918, 0.23502654295944847, 0.31610846435192597, 0.36341694160884375, 0.4094404348184699, 0.13404018498913317, 0.3416791861399314, 0.13152340777601657, 0.3928720644783412, 0.3466145373096655, 0.3446239820004242, 0.3237677987408506, 0.016706186925029787, 0.13279570639512273, 0.3431516258863796, 0.38172512772642453, 0.4064401352903988, 0.3659710419434915, 0.3069607481484965, 0.3951594715819362, 0.028016135653929797, 0.013377836663246323, 0.006209761585859841, 0.03711199437871804, 0.09731012799793692, 0.0719640777708912, 0.05540982144524609, 0.0949521266544785, 0.0446092146588013, 0.2140551109360116, 0.190614227470993, 0.16934250085748603, 0.1679311988935226, 0.017232850866888638, 0.11984622296642722, 0.18822275766906515, 0.17897229550755334, 0.1432627304128835, 0.0425957204989188, 0.060627659288135516, 0.13655471937611585, 0.07813499315845018, 0.07279459024354851, 0.08165248330468045, 0.14841683357389224, 0.1509466434169846, 0.0672968043411254, 9.999999999998899e-05, 9.999999999998899e-05, 0.11904418789159388, 0.099186259523116, 0.14821479545350047, 9.999999999998899e-05, 0.14143086303946062, 0.10410651527388004, 0.08791513597697553, 0.5793005764726715, 0.5512052868874505, 0.5735685495710303, 0.5609097491384332, 0.6190379277274953, 0.5680031685961615, 0.5823784190166756, 0.6037563331521532, 0.6256718371213594, 0.09859154532587222, 0.12030665564548582, 0.12867312248528928, 0.11630174003354654, 0.12107259253690117, 0.11709015827672897, 0.10742919774455062, 0.1485148767126644, 0.1388705275200136, 0.20591371844994255, 0.39674815021254706, 0.19037400935525872, 0.22513134240448485, 0.27396176805561967, 0.2055690526024475, 0.2369703661139798, 0.1864202343710245, 0.2288737634093101, 0.39945831738172066, 0.3900432422508857, 0.3599539536289541, 0.3680380257873177, 0.32238880326916086, 0.4708907629871867, 0.4511729918617119, 0.21184029362759438, 0.16600120262543117, 0.2287588026942292, 0.1665644980526242, 0.19103705260821757, 0.2220502190193061, 0.25203402093649696, 0.43826921945148245, 0.3554476102657964, 0.25104782163730677, 0.2834625430971802, 0.20060154834893007, 0.23263292248827305, 0.2177640448266417, 0.20993465474501904, 0.21890647783186368, 0.19586985643304822, 0.21952282720448424, 0.27870198495534193, 0.21413447064919888, 0.24569441661939673, 0.18172076424242212, 0.24072413010959692, 0.19776397028457215, 0.21849744967693663, 0.21712964023263426, 0.2305630031097622, 0.20006699571797582, 0.24235348113860844, 0.8028275607211145, 0.18643628083706731, 0.11490658327501424, 0.8597385679505466, 0.2017380367724102, 0.20194859811054966, 0.8603828391681311, 0.14784802342843228, 0.17606583954735355, 0.7992808448385513, 0.20997195958546022, 0.7063777265662046, 0.211851124099094, 0.16770005002124944, 0.21122310702442493, 0.10525499909621772, 0.16740196772266425, 0.7035337327083075, 0.1927899679441738, 0.20453919496656603, 0.19653561955876342, 0.21147747324127275, 0.20676972861888054, 0.1892795702346899, 0.26040441236877765, 0.21148593522331627, 0.1956798685537554, 0.0957067904006833, 0.08901191654962481, 0.08538343947599936, 0.10333376216223533, 0.10240140768640471, 0.0780064203910733, 0.09376574808161253, 0.0985285849226204, 0.08791743088251225]}, "mutation_prompt": null}
{"id": "211c081e-427b-44fa-852c-348d25ceb433", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
{"id": "eea7ac71-9caa-4335-a6fe-bc56dcc25a66", "solution": "import numpy as np\n\nclass RefinedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # initial inertia weight for PSO\n        self.inertia_min = 0.4  # minimum inertia weight\n        self.inertia_max = 0.9  # maximum inertia weight\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # initial mutation factor for DE\n        self.mutation_factor_min = 0.5  # minimum mutation factor\n        self.mutation_factor_max = 0.9  # maximum mutation factor\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n        iteration = 0\n\n        while evaluations < self.budget:\n            # Adaptive inertia calculation\n            self.inertia = self.inertia_max - (self.inertia_max - self.inertia_min) * (evaluations / self.budget)\n\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # Adaptive mutation factor calculation\n            current_iteration = evaluations // self.pop_size\n            self.mutation_factor = self.mutation_factor_max - (self.mutation_factor_max - self.mutation_factor_min) * (current_iteration / (self.budget // self.pop_size))\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "RefinedHybridPSODE", "description": "This algorithm refines HybridPSODE by introducing adaptive parameters for inertia and mutation factors, enhancing convergence performance while maintaining exploration capabilities.", "configspace": "", "generation": 97, "fitness": 0.3474913083451766, "feedback": "The algorithm RefinedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.27.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.7648964535582887, 0.7821101169546524, 0.8033623544958692, 0.7956758568535047, 0.771392636978071, 0.185250376363169, 0.7674784122502254, 0.8215984649480258, 0.7913726527817085, 0.6357483214593502, 0.6466228481356763, 0.6554935143090967, 0.6102116125818557, 0.640779461937046, 0.6295014396435297, 0.05224966088470606, 0.649642891439593, 0.615834220733977, 0.15519745408299457, 0.1426836930700911, 0.15668818200992063, 0.122742667256031, 0.13855828474283005, 0.12768162509017367, 0.16390507893505235, 0.5067575740645558, 0.15212656675250003, 0.10097735284909903, 0.11480857191064353, 0.12117311497940841, 0.15234853787125735, 0.11972807222141923, 0.12949031492090868, 0.11721977678303008, 0.11745910944416793, 0.1217149726029898, 0.9970905695199165, 0.9909313501155526, 0.9960247392360594, 0.9912266816217975, 0.9704394457426306, 0.9784414687682863, 0.9943600998280816, 0.9857756436741175, 0.9757136194780616, 0.059989182541055786, 0.028264203158463674, 0.616703870694673, 0.6246246263263309, 0.15111612575232847, 0.14927604377913306, 0.051188678240184915, 0.05184219678862212, 9.999999999998899e-05, 0.3548950125219579, 0.7482638087228366, 0.17025489531985916, 0.8551527130550958, 0.7980363166324829, 0.7705565184649995, 0.12416678337911635, 0.7571039677614317, 0.7961572564589554, 0.3519440867162369, 0.43367167771207027, 0.45172083080853975, 0.49865274136126647, 0.5293482853930107, 0.48781203545641516, 0.3896619285481723, 0.45622985691138485, 0.34042553328878733, 0.25896080860977133, 0.022498019736650332, 0.28580976144217907, 0.4611110789991515, 0.4080118100586474, 0.4476513803965897, 0.27231569148653156, 0.11613462192872559, 0.28264163306029655, 0.09138838987599096, 0.17040461825962006, 0.23767076530262143, 0.02090468718285865, 0.3244049776962622, 0.1710915475667285, 0.29470236637807945, 0.2393013391808264, 0.0943959777098331, 0.07362885448827894, 0.5562923318612006, 0.3177940256837847, 0.19397126409047527, 0.48680419349330173, 0.3989267127500682, 0.6042418417593122, 0.5593450055298352, 0.4972571693735437, 0.06630002425909842, 9.999999999998899e-05, 0.12960120808546416, 0.17648818711095393, 0.1917625170846411, 0.08801267784625688, 0.06164128380579992, 0.11523292198254165, 0.10035024509635204, 0.26592775161387394, 0.29090316823906803, 0.31509214586827705, 0.34043083420542486, 0.28954103041136725, 0.26946499132907686, 0.04637555822285666, 0.22835213156760104, 0.0797083823037974, 0.15314559592677834, 0.6937554610785953, 0.6222313036190557, 0.20882613536388672, 0.5986117791426724, 0.7252734305628012, 0.6434395427128401, 0.5969431873804966, 0.6913570917482564, 0.14492393188140507, 0.0982136903448847, 0.05761410048002691, 0.1426896359698745, 0.13040052742615915, 0.14104732040288404, 0.11351397834964705, 0.14054708093764456, 0.09522909358382381, 0.1755828878115535, 0.22063954140191389, 0.4185372596564433, 0.2874276321139717, 0.2660194541941542, 0.2678635574280356, 0.19629347502112748, 0.18918228399270998, 0.5601127181240755, 0.41896418745847397, 0.4707758370016376, 0.47143461448598556, 0.5267094468815787, 0.5641982686756637, 0.46230015464263174, 0.42479120777966894, 0.6151851005778585, 0.11667489044505586, 0.322088970489096, 0.35111907960582966, 0.3660994428342834, 0.20719831271404, 0.18550774231531408, 0.32088859239687584, 0.33223416056548183, 0.37532153762442366, 0.12088363662953183, 0.20589466529778133, 0.20987937240606325, 0.2071949667496782, 0.1916885569976553, 0.2088607608944122, 0.19055776529729318, 0.21113824123940028, 0.19771814940949128, 0.23150293548865764, 0.18888190508944647, 0.1896170397988033, 0.21078911946789203, 0.2139189933229143, 0.5809897137806282, 0.20000870594389064, 0.5855044621390271, 0.23787233354103476, 0.201654142964649, 0.8439314721291529, 0.18802365604885263, 0.16626572491388836, 0.8372077260742088, 0.17817379713174308, 0.8308562951724731, 0.2101641076533488, 0.12004579058233633, 0.16147786664047403, 0.08300186107583973, 0.16683410446904778, 0.8201181266995391, 0.7503730855816335, 0.8029841140384968, 0.22413710085800753, 0.20371308886107997, 0.16853359409949553, 0.8108928507503401, 0.19662241696442484, 0.19348715920478998, 0.1894870117767694, 0.18316393871530057, 0.1964362413362647, 0.18626809437501501, 0.21234553206336426, 0.20824857230148708, 0.1893491949667624, 0.08286867973762868, 0.08993958712335692, 0.09713549203561755, 0.08135037103256981, 0.08424501682712615, 0.07696766031013591, 0.0934930047091449, 0.0997384769936902, 0.08418210708991514]}, "mutation_prompt": null}
{"id": "bdc6bc56-08f9-429d-9685-c74eee4a5a5f", "solution": "import numpy as np\n\nclass RefinedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.9  # starting inertia weight for PSO\n        self.end_inertia = 0.4  # ending inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n        iter_count = 0\n\n        while evaluations < self.budget:\n            iter_count += 1\n            # Dynamically update inertia weight\n            inertia = self.inertia - (self.inertia - self.end_inertia) * (evaluations / self.budget)\n            \n            # PSO Update\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = (inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n            # Local search adjustment\n            if evaluations < self.budget and iter_count % 10 == 0:\n                for i in range(self.pop_size):\n                    if evaluations >= self.budget:\n                        break\n                    local_pos = g_best_pos + 0.05 * np.random.randn(self.dim)\n                    local_pos = np.clip(local_pos, self.lower_bound, self.upper_bound)\n                    local_val = func(local_pos)\n                    evaluations += 1\n                    if local_val < g_best_val:\n                        g_best_pos = local_pos\n                        g_best_val = local_val\n\n        return g_best_pos, g_best_val", "name": "RefinedHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adapting the inertia weight and incorporating a local search strategy to improve convergence speed and precision.", "configspace": "", "generation": 98, "fitness": 0.3883640345384628, "feedback": "The algorithm RefinedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.7738132200411796, 0.7596157650450932, 0.7738190161928502, 0.7868019422072869, 0.7668650544191037, 0.795325320555976, 0.7883769060576189, 0.7768477851114873, 0.7994371108751978, 0.5978662797175189, 0.6303382386078313, 0.5873771048403218, 0.5979143876992736, 0.6068965202151692, 0.06410316944847294, 0.6163746147227974, 0.6425152490345505, 0.5990536583386366, 0.1464308880836256, 0.13341568229766287, 0.14534831868798137, 0.17317712588081846, 0.1349874913188741, 0.16145669821591835, 0.12169877352822567, 0.480535526392722, 0.41330943561467537, 0.13201044979887044, 0.1468223625755507, 0.5686192693857411, 0.13374353400740835, 0.12976118084773058, 0.13034732330565058, 0.12204450197227179, 0.09089404559368797, 0.11529977666730662, 0.9915367073106395, 0.9882736354780398, 0.9935797225687499, 0.9901618523716269, 0.989879779862839, 0.9897401072895115, 0.9391812740057113, 0.9909330946800698, 0.9818491797723178, 0.6178168149922278, 0.6294070485570951, 0.6209051487083137, 0.6273664673906867, 0.6286202139731426, 0.6088096365214083, 0.6457705376830701, 0.6026904617162849, 0.6099471138458614, 0.7324543788761506, 0.7263580407030605, 0.7863233288212452, 0.7794204873243108, 0.2115367635813501, 0.7664774568341238, 0.7193826782941841, 0.11642111749390804, 0.8065291899668745, 0.39407853483792665, 0.4043707998851107, 0.41909784059946187, 0.38504967770719034, 0.441847827141706, 0.36341526648185285, 0.3422518647614473, 0.39493129615244904, 0.4390509963899376, 0.4001162666826301, 0.12239415276253018, 0.45549301214372273, 0.42886174919216113, 0.48262020068547085, 0.5049635283982075, 0.3677145944948771, 0.11767715358861919, 0.46898838325409253, 0.2280741019710194, 0.11622002079722549, 0.32966595640580354, 0.202275515927947, 0.11102593064604316, 0.07430636311740402, 0.3906319006710288, 0.18367454452246634, 0.28420171772337277, 0.40723716213011074, 0.34550846349212727, 0.47262660810485635, 0.34471514936592307, 0.16047828504823503, 0.40574610172210146, 0.564213490973724, 0.6092614489117405, 0.562454616777734, 0.05223473629385733, 0.06567260263738195, 0.11342870819200912, 0.10548645427796566, 0.2664948310924997, 0.17187351018709174, 0.16938353069475232, 0.18957477978078574, 0.09117891673965406, 0.2606867469319183, 0.31543335341146916, 0.3177799834479803, 0.2944741233396394, 0.33389835422474834, 0.25847213643010225, 0.29793740126681556, 0.058242405891812954, 0.2826523148985791, 0.6472187258854034, 0.6038437871472261, 0.6570490226734715, 0.6729913328665196, 0.7313885160958258, 0.6489280363588557, 0.6839537052322999, 0.6598906058353962, 0.6184364825638515, 0.13757053714120282, 0.10191737704624959, 0.08190396548349321, 0.5456573102640956, 0.09489244007507913, 0.11584777930707402, 0.08721985672447263, 0.11268465457680032, 0.09298015244755553, 0.505546400321162, 0.2371463378722095, 0.21315484882436941, 0.5849836119539426, 0.21474573693178534, 0.6457533064828327, 0.2449047796795859, 0.33927808988386143, 0.2867821193893143, 0.4757075807320197, 0.46116546486630927, 0.39921677946988454, 0.41463932856296437, 0.5657546327122998, 0.3629176119812214, 0.5076299843180896, 0.4892287104903523, 0.4352773114421552, 0.3330140274943515, 0.17955288509864453, 0.3424565417363805, 0.2947523208269145, 0.3281919709760637, 0.39846655462506997, 0.32941603234705497, 0.32680670775353027, 0.31352056281238516, 0.21890184175708327, 0.2081160787551115, 0.19730095577607432, 0.19969191387319396, 0.24835791184319744, 0.19806888510410603, 0.20285414925899947, 0.2128814483506578, 0.2528928075869792, 0.21518135900400415, 0.2357151719926488, 0.21231809607972685, 0.4763448189365884, 0.21057363553607134, 0.19554166783589022, 0.21927032070294594, 0.6144440193190233, 0.2002152092735009, 0.8438062031421476, 0.862567156224567, 0.15308507528621862, 0.8449239468939411, 0.20005573700885815, 0.2013866161812864, 0.8525677855508181, 0.14671413067182915, 0.19441307283734377, 0.8104052828077349, 0.2122020432206183, 0.8146676988537787, 0.21096769469532983, 0.1689368242952416, 0.16586638462452252, 0.21327113682681498, 0.16764635756791046, 0.21088249086165434, 0.21817308400757196, 0.21647802718990883, 0.201281815670164, 0.18287267789254724, 0.19820263400120686, 0.25487244681326915, 0.2074196337830947, 0.216794569639439, 0.19638455245848907, 0.08599765363039769, 0.08217156430180417, 0.09218155033886055, 0.0740283038499594, 0.08237831056123579, 0.08580630791198252, 0.08916576629137729, 0.07896083143620614, 0.10127989554920802]}, "mutation_prompt": null}
{"id": "e1320fe9-6d40-4616-b49f-86b5b39bd81e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))  # population size\n        self.inertia = 0.7  # inertia weight for PSO\n        self.c1 = 1.4  # cognitive component\n        self.c2 = 1.4  # social component\n        self.mutation_factor = 0.8  # mutation factor for DE\n        self.crossover_rate = 0.9  # crossover rate for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best_pos = pos.copy()\n        p_best_val = np.array([func(ind) for ind in pos])\n        g_best_pos = p_best_pos[np.argmin(p_best_val)]\n        g_best_val = np.min(p_best_val)\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            vel = (self.inertia * vel +\n                   self.c1 * r1 * (p_best_pos - pos) +\n                   self.c2 * r2 * (g_best_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_vals = np.array([func(ind) for ind in pos])\n            evaluations += self.pop_size\n\n            # Update personal bests\n            better_mask = new_vals < p_best_val\n            p_best_pos[better_mask] = pos[better_mask]\n            p_best_val[better_mask] = new_vals[better_mask]\n\n            # Update global best\n            if np.min(p_best_val) < g_best_val:\n                g_best_pos = p_best_pos[np.argmin(p_best_val)]\n                g_best_val = np.min(p_best_val)\n\n            # DE Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = p_best_pos[idxs]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pos[i])\n                trial_val = func(trial)\n                evaluations += 1\n\n                # Replace if trial is better\n                if trial_val < p_best_val[i]:\n                    p_best_pos[i] = trial\n                    p_best_val[i] = trial_val\n                    if trial_val < g_best_val:\n                        g_best_pos = trial\n                        g_best_val = trial_val\n\n        return g_best_pos, g_best_val", "name": "HybridPSODE", "description": "This algorithm combines Particle Swarm Optimization (PSO) with a Differential Evolution (DE) inspired mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "346c8f3d-2abb-4b34-80e9-41d72778b26e", "metadata": {"aucs": [0.8588439166720705, 0.8570327262337779, 0.8791742012420551, 0.8861593205276852, 0.8882504869956278, 0.8539961114221323, 0.8748757904059754, 0.8754135035029823, 0.8824283531329913, 0.7328574815744804, 0.7418160805330921, 0.7148788582256487, 0.7183736886601997, 0.7514510887271242, 0.7166101014981002, 0.6981722378054089, 0.7562939846133064, 0.7347480202342154, 0.15114203778476154, 0.142866974613315, 0.1810277597096066, 0.13172700801389658, 0.1749799036501799, 0.16614437347621402, 0.15002705675368344, 0.18681897170204376, 0.14932178533094287, 0.13000293974546617, 0.12320557966929968, 0.10333076351252657, 0.11675442959937132, 0.10310559311580803, 0.140210736085445, 0.15303467372044488, 0.13516197526747342, 0.08024596232022452, 0.9955292617878931, 0.9902276232323234, 0.9960127301345898, 0.9908983084293133, 0.9863232293884268, 0.975834429420217, 0.993788729875529, 0.9873107557564195, 0.9680998310185513, 0.059950052186835245, 0.7577611401783418, 0.6958635108971458, 0.15350158519234958, 0.7340437499693033, 0.7547221429199169, 0.7578385886095855, 0.7702442076487966, 9.999999999998899e-05, 0.22793081697715212, 0.24019513180648433, 0.8700928452951517, 0.376924185075154, 0.21164318977981378, 0.8585544908910494, 0.8142656073538643, 0.1399847290832027, 0.38899186565423216, 0.49486134890142364, 0.5716262285168606, 0.5991297806090468, 0.4779533659271218, 0.13222867776008684, 0.5305261764442293, 0.5654160024649328, 0.6161639070436952, 0.5269359943275898, 0.5863422145380974, 0.05429960111279275, 0.5377548329640217, 0.5234091146780918, 0.5015145886808582, 0.5456065508741226, 0.464059072415004, 0.5162938913064645, 0.5168381494946483, 0.32205067351511274, 9.999999999998899e-05, 0.08367702502799945, 0.2968193848297864, 0.0006182613546735771, 0.38535514303825713, 0.22318674485630108, 0.40218969116413517, 0.26213521690761254, 0.46592328676584094, 0.47302948390562694, 0.5841605561236367, 0.5550706879261732, 0.3981150926475864, 0.49011773569252337, 0.505516395226123, 0.4654430113744381, 0.5575979485016802, 0.2820436592761226, 0.08146981885223481, 0.06770579944909261, 0.10407144963917914, 0.3001274592772232, 0.24056740497518325, 0.07170474300098317, 0.13534761321367383, 0.12437253694409123, 0.2807920753602784, 0.3079105528589594, 0.3754121233133041, 0.3911171431569356, 0.38592088570458294, 0.3796635179893384, 0.27863608589769395, 0.2361192789801203, 0.08305071480400661, 0.15339979420163796, 0.7211990884770749, 0.7231894160630482, 0.8015671139962846, 0.7561864128550186, 0.7495806056056767, 0.7727179653751597, 0.702166444966887, 0.6946393957543073, 0.16081254030256553, 0.12246896485026904, 0.11103271071940313, 0.134202597957227, 0.10582828478156514, 0.12388141305588707, 0.10899262815727129, 0.09119671783612537, 0.0821712734541532, 0.27637850064446734, 0.6222248403991262, 0.5944047020531888, 0.24804879454365414, 0.7363706062638702, 0.19260947099467185, 0.17929965087733357, 0.2072951942408887, 0.3311510293599109, 0.5550187352144997, 0.5213070406432738, 0.47732562306916193, 0.5277194171962971, 0.20361512007190963, 0.4569115499173433, 0.5864880893499445, 0.5678547861841836, 0.17161012427542244, 0.41191916896767333, 0.4034971902505574, 0.31479821457891743, 0.2546444622340551, 0.38063378248643454, 0.3903217777241542, 0.38283914594573054, 0.439499212394438, 0.24001055678301098, 0.2673839901657462, 0.26624199495538636, 0.18679519673319078, 0.20917282030635953, 0.22191408591811956, 0.22965301645077973, 0.21122724015766903, 0.2129644556480701, 0.21822005799481325, 0.20724953163586435, 0.20490051940832177, 0.23664549552732883, 0.22303200208684582, 0.7738788452394542, 0.23998923821959461, 0.19000952430088536, 0.21022102536557918, 0.20904394065720566, 0.9346890743460643, 0.18948603016391874, 0.114942182841268, 0.9163878103072954, 0.20114597559039338, 0.20097175198955586, 0.2131391130632403, 0.12853034055091106, 0.1544409073714592, 0.08323203869073681, 0.21202372937452207, 0.9050665965964562, 0.8691935298325738, 0.8371359775527414, 0.21265755639974004, 0.19946935572745528, 0.22489052689905042, 0.7903189926311607, 0.18885879541120154, 0.18373039750203068, 0.18623370857765975, 0.19157849834981155, 0.1953681676134914, 0.22847033297249908, 0.2040209866111723, 0.19033389139828982, 0.1974501012039349, 0.05489176391370443, 0.11241086027526093, 0.09884219717634679, 0.14963230765569047, 0.0894987590961307, 0.0921773364299866, 0.09513973265600106, 0.07702438973913706, 0.13171846277379262]}, "mutation_prompt": null}
