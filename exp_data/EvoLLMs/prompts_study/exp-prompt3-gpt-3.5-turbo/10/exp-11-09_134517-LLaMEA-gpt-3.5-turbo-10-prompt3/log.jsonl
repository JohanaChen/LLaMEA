{"id": "c0d48a45-d7d5-4d2c-9297-f934414e2ac3", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "HarmonySearch", "description": "Harmony Search Optimization algorithm that creates new solutions harmonically by combining existing solutions and exploring the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.09313599238151767, "feedback": "The algorithm HarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": null, "metadata": {"aucs": [0.17774048841382006, 0.17586997362897505, 0.1702548640821997, 0.17148081363306333, 0.18814684351632072, 0.17431340260097095, 0.17854372277981134, 0.16272970076405258, 0.1900289559445708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206671787898375, 0.046529939915608165, 0.03683495922995916, 0.04101926048678728, 0.037312911435916085, 0.03948023545883572, 0.052832173927772064, 0.06700968355571746, 0.058697959752307516, 0.025972761907869235, 0.032498640406570356, 0.048134712890314235, 0.02779403482884968, 0.049256295938478245, 0.057014098004606106, 0.03767739033282891, 0.03991373300032519, 0.02989132737689104, 0.08745012934506757, 0.07415960730908755, 0.0908547325628537, 0.08820910445223784, 0.08031353097800598, 0.08637598965526194, 0.08220878216016592, 0.08619287430452571, 0.07931789622562535, 0.07971774788656472, 0.08041758554917722, 0.10169819758183984, 0.06781535700304142, 0.062263893457108366, 0.06127909879417914, 0.0947049366126006, 0.06101000468850182, 0.09990373396969643, 0.12560142775588756, 0.1934016532898758, 0.1488026681093032, 0.10469233370454678, 0.09682896132841556, 0.13120658420659315, 0.12591859333529243, 0.13681759466789645, 0.11597311261395693, 0.004348029005056042, 0.004558269530374082, 0.006202075247701777, 0.004184249290024811, 9.999999999998899e-05, 0.00043290697986964055, 9.999999999998899e-05, 9.999999999998899e-05, 0.0198680208659765, 0.05663112608933074, 0.07637738033350105, 0.05669140256955785, 0.057777430942387076, 0.05871086292919858, 0.049062371246340275, 0.05806085032097763, 0.05098196106669006, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052923383700472004, 0.0685743806302127, 0.04526471128876741, 0.06940319587850263, 0.03257561955378663, 0.055757365452125285, 0.05294211901201196, 0.05007345650130268, 0.0642009244907471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752573358540959, 9.999999999998899e-05, 0.22078135116420305, 0.19294521745463922, 0.1949350816380866, 0.20555171766187752, 0.18920470479565232, 0.2072164535963299, 0.199884584178893, 0.17873624917465536, 0.20411807276521732, 0.04999957771121044, 0.042495165125572165, 0.04400821583565884, 0.043170459610778145, 0.040436389620021496, 0.0459998166282749, 0.07324504181335756, 0.04398332101198699, 0.05228608645154764, 0.13750118787811427, 0.1273566832623383, 0.13719391907097667, 0.1412514305799124, 0.14112476561939513, 0.13011497389561355, 0.15031367902576132, 0.1485908445277757, 0.1338142560444605, 0.17180350845156533, 0.1605394747320419, 0.17602311440517437, 0.16779792547172234, 0.18220111222397406, 0.17714620519077506, 0.16590089183218737, 0.17376527459361768, 0.15372838149830337, 0.11532096994186791, 0.10380133968961214, 0.11846924339022025, 0.11239252487020934, 0.13614373043560613, 0.11687395938743339, 0.10627477520085615, 0.12371953220569554, 0.12289435867591836, 0.1410592855630044, 0.16239567000933308, 0.15833258431371033, 0.1601473498306557, 0.145409993352697, 0.16237446446089066, 0.1554643474856463, 0.17367533030874516, 0.182754831820943, 0.14191959121740005, 0.14584938604755793, 0.14257438881905604, 0.14098597531777268, 0.1440858041752554, 0.1527902130303268, 0.1409326423185019, 0.14172381942597645, 0.16204609784140833, 0.1840047256497913, 0.1667725616779202, 0.16654595991016508, 0.15961852130058507, 0.15117936776733254, 0.14118329659670759, 0.16136776110786266, 0.16337959382355893, 0.1764624549446384, 0.157652343052759, 0.15830821396973227, 0.1648639163487191, 0.15029988540608918, 0.1888115034505652, 0.16042204044308706, 0.16852798524722545, 0.17335074511638704, 0.20283265180171306, 0.1757112675814244, 0.19093338290749884, 0.17582630301263213, 0.18681927214859984, 0.2135449851982959, 0.18381107290161203, 0.17592055619812685, 0.189303326339597, 0.2056616553165278, 0.05837719375748185, 0.05530860770105517, 0.06584620711722178, 0.05185235337200522, 0.05933690626337462, 0.05664354836470975, 0.07531411636909857, 0.05490519083582679, 0.060768306838238084]}, "mutation_prompt": null}
{"id": "e130302e-84d6-4076-a56f-ebf1a56d254e", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch(HarmonySearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def adjust_value(value, bandwidth):\n            return np.clip(value, value - bandwidth, value + bandwidth)\n\n        def enhanced_harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony, self.bandwidth)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n                self.bandwidth *= 0.98  # Dynamic adaptation of bandwidth for better exploration\n\n            return best_solution\n\n        return enhanced_harmony_search()", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search algorithm with dynamic parameter adaptation to improve exploration and exploitation trade-off.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_harmony' is not defined\").", "error": "NameError(\"name 'initialize_harmony' is not defined\")", "parent_id": "c0d48a45-d7d5-4d2c-9297-f934414e2ac3", "metadata": {}, "mutation_prompt": null}
{"id": "51e9ed54-2696-46af-a5a4-845932945850", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "HarmonySearch", "description": "Harmony Search Optimization algorithm that creates new solutions harmonically by combining existing solutions and exploring the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "c0d48a45-d7d5-4d2c-9297-f934414e2ac3", "metadata": {"aucs": [0.17774048841382006, 0.17586997362897505, 0.1702548640821997, 0.17148081363306333, 0.18814684351632072, 0.17431340260097095, 0.17854372277981134, 0.16272970076405258, 0.1900289559445708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206671787898375, 0.046529939915608165, 0.03683495922995916, 0.04101926048678728, 0.037312911435916085, 0.03948023545883572, 0.052832173927772064, 0.06700968355571746, 0.058697959752307516, 0.025972761907869235, 0.032498640406570356, 0.048134712890314235, 0.02779403482884968, 0.049256295938478245, 0.057014098004606106, 0.03767739033282891, 0.03991373300032519, 0.02989132737689104, 0.08745012934506757, 0.07415960730908755, 0.0908547325628537, 0.08820910445223784, 0.08031353097800598, 0.08637598965526194, 0.08220878216016592, 0.08619287430452571, 0.07931789622562535, 0.07971774788656472, 0.08041758554917722, 0.10169819758183984, 0.06781535700304142, 0.062263893457108366, 0.06127909879417914, 0.0947049366126006, 0.06101000468850182, 0.09990373396969643, 0.12560142775588756, 0.1934016532898758, 0.1488026681093032, 0.10469233370454678, 0.09682896132841556, 0.13120658420659315, 0.12591859333529243, 0.13681759466789645, 0.11597311261395693, 0.004348029005056042, 0.004558269530374082, 0.006202075247701777, 0.004184249290024811, 9.999999999998899e-05, 0.00043290697986964055, 9.999999999998899e-05, 9.999999999998899e-05, 0.0198680208659765, 0.05663112608933074, 0.07637738033350105, 0.05669140256955785, 0.057777430942387076, 0.05871086292919858, 0.049062371246340275, 0.05806085032097763, 0.05098196106669006, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052923383700472004, 0.0685743806302127, 0.04526471128876741, 0.06940319587850263, 0.03257561955378663, 0.055757365452125285, 0.05294211901201196, 0.05007345650130268, 0.0642009244907471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752573358540959, 9.999999999998899e-05, 0.22078135116420305, 0.19294521745463922, 0.1949350816380866, 0.20555171766187752, 0.18920470479565232, 0.2072164535963299, 0.199884584178893, 0.17873624917465536, 0.20411807276521732, 0.04999957771121044, 0.042495165125572165, 0.04400821583565884, 0.043170459610778145, 0.040436389620021496, 0.0459998166282749, 0.07324504181335756, 0.04398332101198699, 0.05228608645154764, 0.13750118787811427, 0.1273566832623383, 0.13719391907097667, 0.1412514305799124, 0.14112476561939513, 0.13011497389561355, 0.15031367902576132, 0.1485908445277757, 0.1338142560444605, 0.17180350845156533, 0.1605394747320419, 0.17602311440517437, 0.16779792547172234, 0.18220111222397406, 0.17714620519077506, 0.16590089183218737, 0.17376527459361768, 0.15372838149830337, 0.11532096994186791, 0.10380133968961214, 0.11846924339022025, 0.11239252487020934, 0.13614373043560613, 0.11687395938743339, 0.10627477520085615, 0.12371953220569554, 0.12289435867591836, 0.1410592855630044, 0.16239567000933308, 0.15833258431371033, 0.1601473498306557, 0.145409993352697, 0.16237446446089066, 0.1554643474856463, 0.17367533030874516, 0.182754831820943, 0.14191959121740005, 0.14584938604755793, 0.14257438881905604, 0.14098597531777268, 0.1440858041752554, 0.1527902130303268, 0.1409326423185019, 0.14172381942597645, 0.16204609784140833, 0.1840047256497913, 0.1667725616779202, 0.16654595991016508, 0.15961852130058507, 0.15117936776733254, 0.14118329659670759, 0.16136776110786266, 0.16337959382355893, 0.1764624549446384, 0.157652343052759, 0.15830821396973227, 0.1648639163487191, 0.15029988540608918, 0.1888115034505652, 0.16042204044308706, 0.16852798524722545, 0.17335074511638704, 0.20283265180171306, 0.1757112675814244, 0.19093338290749884, 0.17582630301263213, 0.18681927214859984, 0.2135449851982959, 0.18381107290161203, 0.17592055619812685, 0.189303326339597, 0.2056616553165278, 0.05837719375748185, 0.05530860770105517, 0.06584620711722178, 0.05185235337200522, 0.05933690626337462, 0.05664354836470975, 0.07531411636909857, 0.05490519083582679, 0.060768306838238084]}, "mutation_prompt": null}
{"id": "2a5e7bb2-e072-44b3-98f8-e8bf6dd9d8f1", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "HarmonySearch", "description": "Harmony Search Optimization algorithm that creates new solutions harmonically by combining existing solutions and exploring the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0d48a45-d7d5-4d2c-9297-f934414e2ac3", "metadata": {"aucs": [0.17774048841382006, 0.17586997362897505, 0.1702548640821997, 0.17148081363306333, 0.18814684351632072, 0.17431340260097095, 0.17854372277981134, 0.16272970076405258, 0.1900289559445708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206671787898375, 0.046529939915608165, 0.03683495922995916, 0.04101926048678728, 0.037312911435916085, 0.03948023545883572, 0.052832173927772064, 0.06700968355571746, 0.058697959752307516, 0.025972761907869235, 0.032498640406570356, 0.048134712890314235, 0.02779403482884968, 0.049256295938478245, 0.057014098004606106, 0.03767739033282891, 0.03991373300032519, 0.02989132737689104, 0.08745012934506757, 0.07415960730908755, 0.0908547325628537, 0.08820910445223784, 0.08031353097800598, 0.08637598965526194, 0.08220878216016592, 0.08619287430452571, 0.07931789622562535, 0.07971774788656472, 0.08041758554917722, 0.10169819758183984, 0.06781535700304142, 0.062263893457108366, 0.06127909879417914, 0.0947049366126006, 0.06101000468850182, 0.09990373396969643, 0.12560142775588756, 0.1934016532898758, 0.1488026681093032, 0.10469233370454678, 0.09682896132841556, 0.13120658420659315, 0.12591859333529243, 0.13681759466789645, 0.11597311261395693, 0.004348029005056042, 0.004558269530374082, 0.006202075247701777, 0.004184249290024811, 9.999999999998899e-05, 0.00043290697986964055, 9.999999999998899e-05, 9.999999999998899e-05, 0.0198680208659765, 0.05663112608933074, 0.07637738033350105, 0.05669140256955785, 0.057777430942387076, 0.05871086292919858, 0.049062371246340275, 0.05806085032097763, 0.05098196106669006, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052923383700472004, 0.0685743806302127, 0.04526471128876741, 0.06940319587850263, 0.03257561955378663, 0.055757365452125285, 0.05294211901201196, 0.05007345650130268, 0.0642009244907471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752573358540959, 9.999999999998899e-05, 0.22078135116420305, 0.19294521745463922, 0.1949350816380866, 0.20555171766187752, 0.18920470479565232, 0.2072164535963299, 0.199884584178893, 0.17873624917465536, 0.20411807276521732, 0.04999957771121044, 0.042495165125572165, 0.04400821583565884, 0.043170459610778145, 0.040436389620021496, 0.0459998166282749, 0.07324504181335756, 0.04398332101198699, 0.05228608645154764, 0.13750118787811427, 0.1273566832623383, 0.13719391907097667, 0.1412514305799124, 0.14112476561939513, 0.13011497389561355, 0.15031367902576132, 0.1485908445277757, 0.1338142560444605, 0.17180350845156533, 0.1605394747320419, 0.17602311440517437, 0.16779792547172234, 0.18220111222397406, 0.17714620519077506, 0.16590089183218737, 0.17376527459361768, 0.15372838149830337, 0.11532096994186791, 0.10380133968961214, 0.11846924339022025, 0.11239252487020934, 0.13614373043560613, 0.11687395938743339, 0.10627477520085615, 0.12371953220569554, 0.12289435867591836, 0.1410592855630044, 0.16239567000933308, 0.15833258431371033, 0.1601473498306557, 0.145409993352697, 0.16237446446089066, 0.1554643474856463, 0.17367533030874516, 0.182754831820943, 0.14191959121740005, 0.14584938604755793, 0.14257438881905604, 0.14098597531777268, 0.1440858041752554, 0.1527902130303268, 0.1409326423185019, 0.14172381942597645, 0.16204609784140833, 0.1840047256497913, 0.1667725616779202, 0.16654595991016508, 0.15961852130058507, 0.15117936776733254, 0.14118329659670759, 0.16136776110786266, 0.16337959382355893, 0.1764624549446384, 0.157652343052759, 0.15830821396973227, 0.1648639163487191, 0.15029988540608918, 0.1888115034505652, 0.16042204044308706, 0.16852798524722545, 0.17335074511638704, 0.20283265180171306, 0.1757112675814244, 0.19093338290749884, 0.17582630301263213, 0.18681927214859984, 0.2135449851982959, 0.18381107290161203, 0.17592055619812685, 0.189303326339597, 0.2056616553165278, 0.05837719375748185, 0.05530860770105517, 0.06584620711722178, 0.05185235337200522, 0.05933690626337462, 0.05664354836470975, 0.07531411636909857, 0.05490519083582679, 0.060768306838238084]}, "mutation_prompt": null}
{"id": "c840feff-5ce6-4af2-b6ca-cf9b3df726aa", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            bandwidth = 1.0\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                perturbation = np.random.uniform(-bandwidth, bandwidth)\n                new_harmony[index] = adjust_value(new_harmony[index] + perturbation)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n                bandwidth *= 0.99  # Decaying bandwidth for exploration\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedHarmonySearch", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic bandwidth approach for perturbation in Harmony Search algorithm.", "configspace": "", "generation": 4, "fitness": 0.09313599238151767, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c0d48a45-d7d5-4d2c-9297-f934414e2ac3", "metadata": {"aucs": [0.17774048841382006, 0.17586997362897505, 0.1702548640821997, 0.17148081363306333, 0.18814684351632072, 0.17431340260097095, 0.17854372277981134, 0.16272970076405258, 0.1900289559445708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206671787898375, 0.046529939915608165, 0.03683495922995916, 0.04101926048678728, 0.037312911435916085, 0.03948023545883572, 0.052832173927772064, 0.06700968355571746, 0.058697959752307516, 0.025972761907869235, 0.032498640406570356, 0.048134712890314235, 0.02779403482884968, 0.049256295938478245, 0.057014098004606106, 0.03767739033282891, 0.03991373300032519, 0.02989132737689104, 0.08745012934506757, 0.07415960730908755, 0.0908547325628537, 0.08820910445223784, 0.08031353097800598, 0.08637598965526194, 0.08220878216016592, 0.08619287430452571, 0.07931789622562535, 0.07971774788656472, 0.08041758554917722, 0.10169819758183984, 0.06781535700304142, 0.062263893457108366, 0.06127909879417914, 0.0947049366126006, 0.06101000468850182, 0.09990373396969643, 0.12560142775588756, 0.1934016532898758, 0.1488026681093032, 0.10469233370454678, 0.09682896132841556, 0.13120658420659315, 0.12591859333529243, 0.13681759466789645, 0.11597311261395693, 0.004348029005056042, 0.004558269530374082, 0.006202075247701777, 0.004184249290024811, 9.999999999998899e-05, 0.00043290697986964055, 9.999999999998899e-05, 9.999999999998899e-05, 0.0198680208659765, 0.05663112608933074, 0.07637738033350105, 0.05669140256955785, 0.057777430942387076, 0.05871086292919858, 0.049062371246340275, 0.05806085032097763, 0.05098196106669006, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052923383700472004, 0.0685743806302127, 0.04526471128876741, 0.06940319587850263, 0.03257561955378663, 0.055757365452125285, 0.05294211901201196, 0.05007345650130268, 0.0642009244907471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752573358540959, 9.999999999998899e-05, 0.22078135116420305, 0.19294521745463922, 0.1949350816380866, 0.20555171766187752, 0.18920470479565232, 0.2072164535963299, 0.199884584178893, 0.17873624917465536, 0.20411807276521732, 0.04999957771121044, 0.042495165125572165, 0.04400821583565884, 0.043170459610778145, 0.040436389620021496, 0.0459998166282749, 0.07324504181335756, 0.04398332101198699, 0.05228608645154764, 0.13750118787811427, 0.1273566832623383, 0.13719391907097667, 0.1412514305799124, 0.14112476561939513, 0.13011497389561355, 0.15031367902576132, 0.1485908445277757, 0.1338142560444605, 0.17180350845156533, 0.1605394747320419, 0.17602311440517437, 0.16779792547172234, 0.18220111222397406, 0.17714620519077506, 0.16590089183218737, 0.17376527459361768, 0.15372838149830337, 0.11532096994186791, 0.10380133968961214, 0.11846924339022025, 0.11239252487020934, 0.13614373043560613, 0.11687395938743339, 0.10627477520085615, 0.12371953220569554, 0.12289435867591836, 0.1410592855630044, 0.16239567000933308, 0.15833258431371033, 0.1601473498306557, 0.145409993352697, 0.16237446446089066, 0.1554643474856463, 0.17367533030874516, 0.182754831820943, 0.14191959121740005, 0.14584938604755793, 0.14257438881905604, 0.14098597531777268, 0.1440858041752554, 0.1527902130303268, 0.1409326423185019, 0.14172381942597645, 0.16204609784140833, 0.1840047256497913, 0.1667725616779202, 0.16654595991016508, 0.15961852130058507, 0.15117936776733254, 0.14118329659670759, 0.16136776110786266, 0.16337959382355893, 0.1764624549446384, 0.157652343052759, 0.15830821396973227, 0.1648639163487191, 0.15029988540608918, 0.1888115034505652, 0.16042204044308706, 0.16852798524722545, 0.17335074511638704, 0.20283265180171306, 0.1757112675814244, 0.19093338290749884, 0.17582630301263213, 0.18681927214859984, 0.2135449851982959, 0.18381107290161203, 0.17592055619812685, 0.189303326339597, 0.2056616553165278, 0.05837719375748185, 0.05530860770105517, 0.06584620711722178, 0.05185235337200522, 0.05933690626337462, 0.05664354836470975, 0.07531411636909857, 0.05490519083582679, 0.060768306838238084]}, "mutation_prompt": null}
{"id": "8549c07e-47ff-4111-b24a-aacc19b59f61", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "HarmonySearch", "description": "Harmony Search Optimization algorithm that creates new solutions harmonically by combining existing solutions and exploring the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0d48a45-d7d5-4d2c-9297-f934414e2ac3", "metadata": {"aucs": [0.17774048841382006, 0.17586997362897505, 0.1702548640821997, 0.17148081363306333, 0.18814684351632072, 0.17431340260097095, 0.17854372277981134, 0.16272970076405258, 0.1900289559445708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206671787898375, 0.046529939915608165, 0.03683495922995916, 0.04101926048678728, 0.037312911435916085, 0.03948023545883572, 0.052832173927772064, 0.06700968355571746, 0.058697959752307516, 0.025972761907869235, 0.032498640406570356, 0.048134712890314235, 0.02779403482884968, 0.049256295938478245, 0.057014098004606106, 0.03767739033282891, 0.03991373300032519, 0.02989132737689104, 0.08745012934506757, 0.07415960730908755, 0.0908547325628537, 0.08820910445223784, 0.08031353097800598, 0.08637598965526194, 0.08220878216016592, 0.08619287430452571, 0.07931789622562535, 0.07971774788656472, 0.08041758554917722, 0.10169819758183984, 0.06781535700304142, 0.062263893457108366, 0.06127909879417914, 0.0947049366126006, 0.06101000468850182, 0.09990373396969643, 0.12560142775588756, 0.1934016532898758, 0.1488026681093032, 0.10469233370454678, 0.09682896132841556, 0.13120658420659315, 0.12591859333529243, 0.13681759466789645, 0.11597311261395693, 0.004348029005056042, 0.004558269530374082, 0.006202075247701777, 0.004184249290024811, 9.999999999998899e-05, 0.00043290697986964055, 9.999999999998899e-05, 9.999999999998899e-05, 0.0198680208659765, 0.05663112608933074, 0.07637738033350105, 0.05669140256955785, 0.057777430942387076, 0.05871086292919858, 0.049062371246340275, 0.05806085032097763, 0.05098196106669006, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052923383700472004, 0.0685743806302127, 0.04526471128876741, 0.06940319587850263, 0.03257561955378663, 0.055757365452125285, 0.05294211901201196, 0.05007345650130268, 0.0642009244907471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752573358540959, 9.999999999998899e-05, 0.22078135116420305, 0.19294521745463922, 0.1949350816380866, 0.20555171766187752, 0.18920470479565232, 0.2072164535963299, 0.199884584178893, 0.17873624917465536, 0.20411807276521732, 0.04999957771121044, 0.042495165125572165, 0.04400821583565884, 0.043170459610778145, 0.040436389620021496, 0.0459998166282749, 0.07324504181335756, 0.04398332101198699, 0.05228608645154764, 0.13750118787811427, 0.1273566832623383, 0.13719391907097667, 0.1412514305799124, 0.14112476561939513, 0.13011497389561355, 0.15031367902576132, 0.1485908445277757, 0.1338142560444605, 0.17180350845156533, 0.1605394747320419, 0.17602311440517437, 0.16779792547172234, 0.18220111222397406, 0.17714620519077506, 0.16590089183218737, 0.17376527459361768, 0.15372838149830337, 0.11532096994186791, 0.10380133968961214, 0.11846924339022025, 0.11239252487020934, 0.13614373043560613, 0.11687395938743339, 0.10627477520085615, 0.12371953220569554, 0.12289435867591836, 0.1410592855630044, 0.16239567000933308, 0.15833258431371033, 0.1601473498306557, 0.145409993352697, 0.16237446446089066, 0.1554643474856463, 0.17367533030874516, 0.182754831820943, 0.14191959121740005, 0.14584938604755793, 0.14257438881905604, 0.14098597531777268, 0.1440858041752554, 0.1527902130303268, 0.1409326423185019, 0.14172381942597645, 0.16204609784140833, 0.1840047256497913, 0.1667725616779202, 0.16654595991016508, 0.15961852130058507, 0.15117936776733254, 0.14118329659670759, 0.16136776110786266, 0.16337959382355893, 0.1764624549446384, 0.157652343052759, 0.15830821396973227, 0.1648639163487191, 0.15029988540608918, 0.1888115034505652, 0.16042204044308706, 0.16852798524722545, 0.17335074511638704, 0.20283265180171306, 0.1757112675814244, 0.19093338290749884, 0.17582630301263213, 0.18681927214859984, 0.2135449851982959, 0.18381107290161203, 0.17592055619812685, 0.189303326339597, 0.2056616553165278, 0.05837719375748185, 0.05530860770105517, 0.06584620711722178, 0.05185235337200522, 0.05933690626337462, 0.05664354836470975, 0.07531411636909857, 0.05490519083582679, 0.060768306838238084]}, "mutation_prompt": null}
{"id": "a3b5ad28-4c4a-476c-b98b-e7eec25e6606", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                if np.random.rand() < 0.1:  # Introduce mutation with 10% probability\n                    index = np.random.randint(self.dim)\n                    new_harmony[index] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedHarmonySearch", "description": "Enhancing Harmony Search algorithm by incorporating mutation to explore the search space more effectively.", "configspace": "", "generation": 6, "fitness": 0.09313599238151767, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c0d48a45-d7d5-4d2c-9297-f934414e2ac3", "metadata": {"aucs": [0.17774048841382006, 0.17586997362897505, 0.1702548640821997, 0.17148081363306333, 0.18814684351632072, 0.17431340260097095, 0.17854372277981134, 0.16272970076405258, 0.1900289559445708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206671787898375, 0.046529939915608165, 0.03683495922995916, 0.04101926048678728, 0.037312911435916085, 0.03948023545883572, 0.052832173927772064, 0.06700968355571746, 0.058697959752307516, 0.025972761907869235, 0.032498640406570356, 0.048134712890314235, 0.02779403482884968, 0.049256295938478245, 0.057014098004606106, 0.03767739033282891, 0.03991373300032519, 0.02989132737689104, 0.08745012934506757, 0.07415960730908755, 0.0908547325628537, 0.08820910445223784, 0.08031353097800598, 0.08637598965526194, 0.08220878216016592, 0.08619287430452571, 0.07931789622562535, 0.07971774788656472, 0.08041758554917722, 0.10169819758183984, 0.06781535700304142, 0.062263893457108366, 0.06127909879417914, 0.0947049366126006, 0.06101000468850182, 0.09990373396969643, 0.12560142775588756, 0.1934016532898758, 0.1488026681093032, 0.10469233370454678, 0.09682896132841556, 0.13120658420659315, 0.12591859333529243, 0.13681759466789645, 0.11597311261395693, 0.004348029005056042, 0.004558269530374082, 0.006202075247701777, 0.004184249290024811, 9.999999999998899e-05, 0.00043290697986964055, 9.999999999998899e-05, 9.999999999998899e-05, 0.0198680208659765, 0.05663112608933074, 0.07637738033350105, 0.05669140256955785, 0.057777430942387076, 0.05871086292919858, 0.049062371246340275, 0.05806085032097763, 0.05098196106669006, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052923383700472004, 0.0685743806302127, 0.04526471128876741, 0.06940319587850263, 0.03257561955378663, 0.055757365452125285, 0.05294211901201196, 0.05007345650130268, 0.0642009244907471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752573358540959, 9.999999999998899e-05, 0.22078135116420305, 0.19294521745463922, 0.1949350816380866, 0.20555171766187752, 0.18920470479565232, 0.2072164535963299, 0.199884584178893, 0.17873624917465536, 0.20411807276521732, 0.04999957771121044, 0.042495165125572165, 0.04400821583565884, 0.043170459610778145, 0.040436389620021496, 0.0459998166282749, 0.07324504181335756, 0.04398332101198699, 0.05228608645154764, 0.13750118787811427, 0.1273566832623383, 0.13719391907097667, 0.1412514305799124, 0.14112476561939513, 0.13011497389561355, 0.15031367902576132, 0.1485908445277757, 0.1338142560444605, 0.17180350845156533, 0.1605394747320419, 0.17602311440517437, 0.16779792547172234, 0.18220111222397406, 0.17714620519077506, 0.16590089183218737, 0.17376527459361768, 0.15372838149830337, 0.11532096994186791, 0.10380133968961214, 0.11846924339022025, 0.11239252487020934, 0.13614373043560613, 0.11687395938743339, 0.10627477520085615, 0.12371953220569554, 0.12289435867591836, 0.1410592855630044, 0.16239567000933308, 0.15833258431371033, 0.1601473498306557, 0.145409993352697, 0.16237446446089066, 0.1554643474856463, 0.17367533030874516, 0.182754831820943, 0.14191959121740005, 0.14584938604755793, 0.14257438881905604, 0.14098597531777268, 0.1440858041752554, 0.1527902130303268, 0.1409326423185019, 0.14172381942597645, 0.16204609784140833, 0.1840047256497913, 0.1667725616779202, 0.16654595991016508, 0.15961852130058507, 0.15117936776733254, 0.14118329659670759, 0.16136776110786266, 0.16337959382355893, 0.1764624549446384, 0.157652343052759, 0.15830821396973227, 0.1648639163487191, 0.15029988540608918, 0.1888115034505652, 0.16042204044308706, 0.16852798524722545, 0.17335074511638704, 0.20283265180171306, 0.1757112675814244, 0.19093338290749884, 0.17582630301263213, 0.18681927214859984, 0.2135449851982959, 0.18381107290161203, 0.17592055619812685, 0.189303326339597, 0.2056616553165278, 0.05837719375748185, 0.05530860770105517, 0.06584620711722178, 0.05185235337200522, 0.05933690626337462, 0.05664354836470975, 0.07531411636909857, 0.05490519083582679, 0.060768306838238084]}, "mutation_prompt": null}
{"id": "0dd39f78-d04c-4185-a838-10a834d2a5df", "solution": "import numpy as np\n\nclass ImprovedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hm_accept_rate = 0.95\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def pitch_adjustment(iteration):\n            return np.random.uniform(0, 1) * ((self.upper_bound - self.lower_bound) * (1 - iteration / self.budget))\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n\n            for iteration in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n\n                for i in range(self.dim):\n                    if np.random.rand() < self.hm_accept_rate:\n                        new_harmony[i] += pitch_adjustment(iteration)\n\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "ImprovedHarmonySearch", "description": "Improved Harmony Search Optimization algorithm that incorporates a dynamic pitch adjustment factor to fine-tune the exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": 0.09143624405522954, "feedback": "The algorithm ImprovedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c0d48a45-d7d5-4d2c-9297-f934414e2ac3", "metadata": {"aucs": [0.17768911793475273, 0.17575924446718527, 0.17023431885957285, 0.17146744528714475, 0.18814228688290657, 0.17431215318755022, 0.1785366761347732, 0.16272970076405258, 0.19002661106093488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206671787898375, 0.046529939915608165, 0.03683495922995916, 0.04101926048678728, 0.037312911435916085, 0.03948023545883572, 0.052832173927772064, 0.06700968355571746, 0.058697959752307516, 0.025972761907869235, 0.032498640406570356, 0.048134712890314235, 0.02779403482884968, 0.049256295938478245, 0.057014098004606106, 0.03767739033282891, 0.03991373300032519, 0.02989132737689104, 0.08745012934506757, 0.07415960730908755, 0.0908547325628537, 0.08820910445223784, 0.08031353097800598, 0.08637598965526194, 0.08220878216016592, 0.08619287430452571, 0.07931789622562535, 0.07971774788656472, 0.08041758554917722, 0.10169819758183984, 0.06781535700304142, 0.062263893457108366, 0.06127909879417914, 0.0947049366126006, 0.06101000468850182, 0.09990373396969643, 0.1255158748189662, 0.19304702140278873, 0.14815435079016037, 0.10469233370454678, 0.09682896132841556, 0.13120658420659315, 0.12591859333529243, 0.13681759466789645, 0.11597311261395693, 0.004348029005056042, 0.004558269530374082, 0.006202075247701777, 0.004184249290024811, 9.999999999998899e-05, 0.00043290697986964055, 9.999999999998899e-05, 9.999999999998899e-05, 0.0198680208659765, 0.008145207404021693, 0.06955668591673547, 9.999999999998899e-05, 0.011984156506037236, 0.03535474427844443, 0.011857267414164374, 0.017989636894567007, 0.006566459565182425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052923383700472004, 0.0685743806302127, 0.04526471128876741, 0.06940319587850263, 0.03257561955378663, 0.055757365452125285, 0.05294211901201196, 0.05007345650130268, 0.0642009244907471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752573358540959, 9.999999999998899e-05, 0.2207764564178777, 0.1929412843507039, 0.1949350816380866, 0.20555171766187752, 0.1891949409558652, 0.2072302833926708, 0.19985763026961045, 0.17857194266184884, 0.20405182357911322, 0.04999957771121044, 0.042495165125572165, 0.04400821583565884, 0.043170459610778145, 0.040436389620021496, 0.0459998166282749, 0.07324504181335756, 0.04398332101198699, 0.05228608645154764, 0.13750118787811427, 0.1273566832623383, 0.13719391907097667, 0.1412650853808134, 0.14112476561939513, 0.13011497389561355, 0.15031367902576132, 0.1485908445277757, 0.1338145406296991, 0.17180350845156533, 0.1605394747320419, 0.1760342163582571, 0.16777960360149358, 0.18211863963853225, 0.17698005589566168, 0.16590089183218737, 0.173756183240797, 0.15373896287362931, 0.11532096994186791, 0.10379944308543132, 0.11847559048171807, 0.11235666061825156, 0.1360766500921209, 0.11674950472403633, 0.10627477520085615, 0.12371890308729583, 0.12294584926320096, 0.14105137464927409, 0.1623034281150496, 0.1583398558507968, 0.1601431186405412, 0.14533124336917536, 0.1623789980339312, 0.15531967323096973, 0.17351741037164625, 0.18275453173719447, 0.14191959121740005, 0.14584938604755793, 0.14257438881905604, 0.14098597531777268, 0.1440858041752554, 0.1527902130303268, 0.1409326423185019, 0.14172381942597645, 0.16204609784140833, 0.18398791353470745, 0.1667632005864491, 0.16654092026583944, 0.15961852130058507, 0.15117282259034948, 0.14121207597729113, 0.16136776110786266, 0.16337959382355893, 0.1764624549446384, 0.157652343052759, 0.15830821396973227, 0.16564637834813023, 0.1502990138236031, 0.18881019161109502, 0.1604222905575129, 0.16852685717034166, 0.17334843310130055, 0.20283210111552108, 0.17571036217458968, 0.19093338290749884, 0.17582630301263213, 0.18681927214859984, 0.2135449851982959, 0.18381107290161203, 0.17591988555954508, 0.189303326339597, 0.20566376057685076, 0.05833110590115975, 0.05530455769663456, 0.06584000447788418, 0.05185235337200522, 0.059336308689276085, 0.05592430458370545, 0.07531033438198997, 0.05490519083582679, 0.06071530987699569]}, "mutation_prompt": null}
{"id": "0d67736a-d777-4883-b722-210b5d4e03cb", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "HarmonySearch", "description": "Harmony Search Optimization algorithm that creates new solutions harmonically by combining existing solutions and exploring the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0d48a45-d7d5-4d2c-9297-f934414e2ac3", "metadata": {"aucs": [0.17774048841382006, 0.17586997362897505, 0.1702548640821997, 0.17148081363306333, 0.18814684351632072, 0.17431340260097095, 0.17854372277981134, 0.16272970076405258, 0.1900289559445708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206671787898375, 0.046529939915608165, 0.03683495922995916, 0.04101926048678728, 0.037312911435916085, 0.03948023545883572, 0.052832173927772064, 0.06700968355571746, 0.058697959752307516, 0.025972761907869235, 0.032498640406570356, 0.048134712890314235, 0.02779403482884968, 0.049256295938478245, 0.057014098004606106, 0.03767739033282891, 0.03991373300032519, 0.02989132737689104, 0.08745012934506757, 0.07415960730908755, 0.0908547325628537, 0.08820910445223784, 0.08031353097800598, 0.08637598965526194, 0.08220878216016592, 0.08619287430452571, 0.07931789622562535, 0.07971774788656472, 0.08041758554917722, 0.10169819758183984, 0.06781535700304142, 0.062263893457108366, 0.06127909879417914, 0.0947049366126006, 0.06101000468850182, 0.09990373396969643, 0.12560142775588756, 0.1934016532898758, 0.1488026681093032, 0.10469233370454678, 0.09682896132841556, 0.13120658420659315, 0.12591859333529243, 0.13681759466789645, 0.11597311261395693, 0.004348029005056042, 0.004558269530374082, 0.006202075247701777, 0.004184249290024811, 9.999999999998899e-05, 0.00043290697986964055, 9.999999999998899e-05, 9.999999999998899e-05, 0.0198680208659765, 0.05663112608933074, 0.07637738033350105, 0.05669140256955785, 0.057777430942387076, 0.05871086292919858, 0.049062371246340275, 0.05806085032097763, 0.05098196106669006, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052923383700472004, 0.0685743806302127, 0.04526471128876741, 0.06940319587850263, 0.03257561955378663, 0.055757365452125285, 0.05294211901201196, 0.05007345650130268, 0.0642009244907471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752573358540959, 9.999999999998899e-05, 0.22078135116420305, 0.19294521745463922, 0.1949350816380866, 0.20555171766187752, 0.18920470479565232, 0.2072164535963299, 0.199884584178893, 0.17873624917465536, 0.20411807276521732, 0.04999957771121044, 0.042495165125572165, 0.04400821583565884, 0.043170459610778145, 0.040436389620021496, 0.0459998166282749, 0.07324504181335756, 0.04398332101198699, 0.05228608645154764, 0.13750118787811427, 0.1273566832623383, 0.13719391907097667, 0.1412514305799124, 0.14112476561939513, 0.13011497389561355, 0.15031367902576132, 0.1485908445277757, 0.1338142560444605, 0.17180350845156533, 0.1605394747320419, 0.17602311440517437, 0.16779792547172234, 0.18220111222397406, 0.17714620519077506, 0.16590089183218737, 0.17376527459361768, 0.15372838149830337, 0.11532096994186791, 0.10380133968961214, 0.11846924339022025, 0.11239252487020934, 0.13614373043560613, 0.11687395938743339, 0.10627477520085615, 0.12371953220569554, 0.12289435867591836, 0.1410592855630044, 0.16239567000933308, 0.15833258431371033, 0.1601473498306557, 0.145409993352697, 0.16237446446089066, 0.1554643474856463, 0.17367533030874516, 0.182754831820943, 0.14191959121740005, 0.14584938604755793, 0.14257438881905604, 0.14098597531777268, 0.1440858041752554, 0.1527902130303268, 0.1409326423185019, 0.14172381942597645, 0.16204609784140833, 0.1840047256497913, 0.1667725616779202, 0.16654595991016508, 0.15961852130058507, 0.15117936776733254, 0.14118329659670759, 0.16136776110786266, 0.16337959382355893, 0.1764624549446384, 0.157652343052759, 0.15830821396973227, 0.1648639163487191, 0.15029988540608918, 0.1888115034505652, 0.16042204044308706, 0.16852798524722545, 0.17335074511638704, 0.20283265180171306, 0.1757112675814244, 0.19093338290749884, 0.17582630301263213, 0.18681927214859984, 0.2135449851982959, 0.18381107290161203, 0.17592055619812685, 0.189303326339597, 0.2056616553165278, 0.05837719375748185, 0.05530860770105517, 0.06584620711722178, 0.05185235337200522, 0.05933690626337462, 0.05664354836470975, 0.07531411636909857, 0.05490519083582679, 0.060768306838238084]}, "mutation_prompt": null}
{"id": "9d68f295-5d64-4c4d-9eba-be2ebd126468", "solution": "import numpy as np\n\nclass ImprovedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "ImprovedHarmonySearch", "description": "Improving Harmony Search algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 9, "fitness": 0.09322227385252323, "feedback": "The algorithm ImprovedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c0d48a45-d7d5-4d2c-9297-f934414e2ac3", "metadata": {"aucs": [0.1777300150683041, 0.1758610851076874, 0.1702461320249753, 0.17146445547710487, 0.18813226154932694, 0.1742982419110516, 0.17853098713018334, 0.1627298907164232, 0.19001168156888726, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206162456976803, 0.04652488648762387, 0.0368305184189861, 0.04101453894103069, 0.037309034550568665, 0.039475462071603795, 0.05282638848491783, 0.06700236190978393, 0.05869139526097911, 0.025969175796351607, 0.032493469186012036, 0.04812888002158344, 0.027789542341995377, 0.0492505728613607, 0.0570077743769305, 0.03767334120232446, 0.03990905807415146, 0.029887845341459607, 0.08744047087201123, 0.07415088476645737, 0.09084493959529549, 0.08819934032119725, 0.08030685500353152, 0.08636692260402556, 0.08220037379266854, 0.08618476270585873, 0.0793100462686469, 0.07970705398276512, 0.08040786279099976, 0.10168788291468223, 0.0678042567047018, 0.062257631934342306, 0.06126789432932478, 0.09469511708877743, 0.06100093788403449, 0.09989195416384677, 0.12559823362162914, 0.19339062674383178, 0.14879633176882545, 0.10468090123004059, 0.09681671153005122, 0.13119140210230074, 0.1259001201085519, 0.13680200705978374, 0.1159600415573675, 0.0043466551276287735, 0.0045573520021727765, 0.006200401435613512, 0.004181598901128014, 9.999999999998899e-05, 0.0004321769207031867, 9.999999999998899e-05, 9.999999999998899e-05, 0.019865735423349018, 0.05663112608933074, 0.07637445287657707, 0.05669140256955785, 0.057777430942387076, 0.05871086292919858, 0.06846597138222388, 0.05806085032097763, 0.05098196106669006, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05291610134458591, 0.0685672734034275, 0.04525962477331502, 0.0693952635897589, 0.03256963340998842, 0.05575082131684872, 0.052934686044794343, 0.050066551117941005, 0.06419266992750783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006751486159103481, 9.999999999998899e-05, 0.22076430056817842, 0.19293636123219138, 0.1949246778982069, 0.2055375872787616, 0.18918845247813587, 0.20719787647715016, 0.1998794861184432, 0.17872865963668627, 0.20410709867849375, 0.0499924140821949, 0.04248951764672215, 0.044002887861461004, 0.04316542280052382, 0.040431711405111814, 0.045994894632358396, 0.07323576829548695, 0.043978301031989964, 0.05228016543695735, 0.13748786635348842, 0.12734524761845445, 0.1371824736802677, 0.14123728676128777, 0.14111193095199592, 0.1301036820979813, 0.1502991736570901, 0.14857817146350805, 0.13379870500734337, 0.17179452789269778, 0.16052913990741002, 0.17601870234060935, 0.16783578656293263, 0.18219270731477366, 0.1771397761087088, 0.16589477000652952, 0.17376221334603037, 0.15374264006468275, 0.11530984695382196, 0.10379086258901515, 0.11846435985059123, 0.11246143326938218, 0.13613461110043923, 0.11686832982564688, 0.1062687497213104, 0.12370774746806912, 0.12288384560794252, 0.1410629905783768, 0.16250118125037694, 0.15833036745224804, 0.16015643966070625, 0.14540284729332476, 0.16241796418976462, 0.15545823976956052, 0.17369592461027095, 0.18275672486407024, 0.1419043302967753, 0.14583427757663214, 0.14255836302452285, 0.14097097487446375, 0.14407055993265572, 0.15277430461690622, 0.1409167904584343, 0.14170877485785238, 0.16202973964970713, 0.18402040489099936, 0.16676218144448518, 0.1665359479549703, 0.1596064298130523, 0.15116693310642093, 0.14117159630874065, 0.16135421757585733, 0.16336796622415917, 0.1764432645092373, 0.15763662348314433, 0.15829501024355908, 0.1648434023288795, 0.15028523299758467, 0.18878744349491494, 0.16040618823041475, 0.16851234114078084, 0.1733340498462227, 0.2028082191379238, 0.17570637126054878, 0.19092549448045337, 0.17581469979705666, 0.18681106617361698, 0.21371907300915727, 0.18380441197536757, 0.17591300598929305, 0.1892928046018364, 0.20564824570552087, 0.05839370193955784, 0.05540414954712636, 0.0658413189493352, 0.051870202407295785, 0.05934506736903278, 0.05664145874149418, 0.07533619517051815, 0.054925977012731164, 0.06076238490577657]}, "mutation_prompt": null}
{"id": "d6e6e46f-a305-479d-aa00-c9d1a409c339", "solution": "import numpy as np\n\nclass ImprovedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "ImprovedHarmonySearch", "description": "Improving Harmony Search algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d68f295-5d64-4c4d-9eba-be2ebd126468", "metadata": {"aucs": [0.1777300150683041, 0.1758610851076874, 0.1702461320249753, 0.17146445547710487, 0.18813226154932694, 0.1742982419110516, 0.17853098713018334, 0.1627298907164232, 0.19001168156888726, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206162456976803, 0.04652488648762387, 0.0368305184189861, 0.04101453894103069, 0.037309034550568665, 0.039475462071603795, 0.05282638848491783, 0.06700236190978393, 0.05869139526097911, 0.025969175796351607, 0.032493469186012036, 0.04812888002158344, 0.027789542341995377, 0.0492505728613607, 0.0570077743769305, 0.03767334120232446, 0.03990905807415146, 0.029887845341459607, 0.08744047087201123, 0.07415088476645737, 0.09084493959529549, 0.08819934032119725, 0.08030685500353152, 0.08636692260402556, 0.08220037379266854, 0.08618476270585873, 0.0793100462686469, 0.07970705398276512, 0.08040786279099976, 0.10168788291468223, 0.0678042567047018, 0.062257631934342306, 0.06126789432932478, 0.09469511708877743, 0.06100093788403449, 0.09989195416384677, 0.12559823362162914, 0.19339062674383178, 0.14879633176882545, 0.10468090123004059, 0.09681671153005122, 0.13119140210230074, 0.1259001201085519, 0.13680200705978374, 0.1159600415573675, 0.0043466551276287735, 0.0045573520021727765, 0.006200401435613512, 0.004181598901128014, 9.999999999998899e-05, 0.0004321769207031867, 9.999999999998899e-05, 9.999999999998899e-05, 0.019865735423349018, 0.05663112608933074, 0.07637445287657707, 0.05669140256955785, 0.057777430942387076, 0.05871086292919858, 0.06846597138222388, 0.05806085032097763, 0.05098196106669006, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05291610134458591, 0.0685672734034275, 0.04525962477331502, 0.0693952635897589, 0.03256963340998842, 0.05575082131684872, 0.052934686044794343, 0.050066551117941005, 0.06419266992750783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006751486159103481, 9.999999999998899e-05, 0.22076430056817842, 0.19293636123219138, 0.1949246778982069, 0.2055375872787616, 0.18918845247813587, 0.20719787647715016, 0.1998794861184432, 0.17872865963668627, 0.20410709867849375, 0.0499924140821949, 0.04248951764672215, 0.044002887861461004, 0.04316542280052382, 0.040431711405111814, 0.045994894632358396, 0.07323576829548695, 0.043978301031989964, 0.05228016543695735, 0.13748786635348842, 0.12734524761845445, 0.1371824736802677, 0.14123728676128777, 0.14111193095199592, 0.1301036820979813, 0.1502991736570901, 0.14857817146350805, 0.13379870500734337, 0.17179452789269778, 0.16052913990741002, 0.17601870234060935, 0.16783578656293263, 0.18219270731477366, 0.1771397761087088, 0.16589477000652952, 0.17376221334603037, 0.15374264006468275, 0.11530984695382196, 0.10379086258901515, 0.11846435985059123, 0.11246143326938218, 0.13613461110043923, 0.11686832982564688, 0.1062687497213104, 0.12370774746806912, 0.12288384560794252, 0.1410629905783768, 0.16250118125037694, 0.15833036745224804, 0.16015643966070625, 0.14540284729332476, 0.16241796418976462, 0.15545823976956052, 0.17369592461027095, 0.18275672486407024, 0.1419043302967753, 0.14583427757663214, 0.14255836302452285, 0.14097097487446375, 0.14407055993265572, 0.15277430461690622, 0.1409167904584343, 0.14170877485785238, 0.16202973964970713, 0.18402040489099936, 0.16676218144448518, 0.1665359479549703, 0.1596064298130523, 0.15116693310642093, 0.14117159630874065, 0.16135421757585733, 0.16336796622415917, 0.1764432645092373, 0.15763662348314433, 0.15829501024355908, 0.1648434023288795, 0.15028523299758467, 0.18878744349491494, 0.16040618823041475, 0.16851234114078084, 0.1733340498462227, 0.2028082191379238, 0.17570637126054878, 0.19092549448045337, 0.17581469979705666, 0.18681106617361698, 0.21371907300915727, 0.18380441197536757, 0.17591300598929305, 0.1892928046018364, 0.20564824570552087, 0.05839370193955784, 0.05540414954712636, 0.0658413189493352, 0.051870202407295785, 0.05934506736903278, 0.05664145874149418, 0.07533619517051815, 0.054925977012731164, 0.06076238490577657]}, "mutation_prompt": null}
{"id": "491e9479-a8e2-4683-8460-66a49d70fef2", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adaptive_pitch_adjustment(value, pitch_adjustment_rate):\n            return value + np.random.uniform(-pitch_adjustment_rate, pitch_adjustment_rate, self.dim)\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch_adjustment_rate = 0.1\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                pitch_adjustment_rate *= 0.95  # Adaptive pitch adjustment\n                new_harmony[index] = adaptive_pitch_adjustment(new_harmony, pitch_adjustment_rate)\n                new_harmony = adjust_value(new_harmony)\n\n                new_harmony_opposite = adjust_value(self.lower_bound + self.upper_bound - new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedHarmonySearch", "description": "Enhancing Harmony Search algorithm with adaptive pitch adjustment to improve local search capabilities.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('setting an array element with a sequence.').", "error": "ValueError('setting an array element with a sequence.')", "parent_id": "9d68f295-5d64-4c4d-9eba-be2ebd126468", "metadata": {}, "mutation_prompt": null}
{"id": "1073a9ac-6a2d-4c46-b0f0-c3db0c3af84e", "solution": "import numpy as np\n\nclass ElitePreservationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                # Introducing elite preservation\n                elite_idx = np.argsort([func(h) for h in harmony_memory])[:int(0.1 * self.budget)]\n                harmony_memory[elite_idx] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "ElitePreservationHarmonySearch", "description": "Enhancing diversity in the population by introducing a new selection mechanism to preserve elite solutions.", "configspace": "", "generation": 12, "fitness": 0.09322227385252323, "feedback": "The algorithm ElitePreservationHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "9d68f295-5d64-4c4d-9eba-be2ebd126468", "metadata": {"aucs": [0.1777300150683041, 0.1758610851076874, 0.1702461320249753, 0.17146445547710487, 0.18813226154932694, 0.1742982419110516, 0.17853098713018334, 0.1627298907164232, 0.19001168156888726, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206162456976803, 0.04652488648762387, 0.0368305184189861, 0.04101453894103069, 0.037309034550568665, 0.039475462071603795, 0.05282638848491783, 0.06700236190978393, 0.05869139526097911, 0.025969175796351607, 0.032493469186012036, 0.04812888002158344, 0.027789542341995377, 0.0492505728613607, 0.0570077743769305, 0.03767334120232446, 0.03990905807415146, 0.029887845341459607, 0.08744047087201123, 0.07415088476645737, 0.09084493959529549, 0.08819934032119725, 0.08030685500353152, 0.08636692260402556, 0.08220037379266854, 0.08618476270585873, 0.0793100462686469, 0.07970705398276512, 0.08040786279099976, 0.10168788291468223, 0.0678042567047018, 0.062257631934342306, 0.06126789432932478, 0.09469511708877743, 0.06100093788403449, 0.09989195416384677, 0.12559823362162914, 0.19339062674383178, 0.14879633176882545, 0.10468090123004059, 0.09681671153005122, 0.13119140210230074, 0.1259001201085519, 0.13680200705978374, 0.1159600415573675, 0.0043466551276287735, 0.0045573520021727765, 0.006200401435613512, 0.004181598901128014, 9.999999999998899e-05, 0.0004321769207031867, 9.999999999998899e-05, 9.999999999998899e-05, 0.019865735423349018, 0.05663112608933074, 0.07637445287657707, 0.05669140256955785, 0.057777430942387076, 0.05871086292919858, 0.06846597138222388, 0.05806085032097763, 0.05098196106669006, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05291610134458591, 0.0685672734034275, 0.04525962477331502, 0.0693952635897589, 0.03256963340998842, 0.05575082131684872, 0.052934686044794343, 0.050066551117941005, 0.06419266992750783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006751486159103481, 9.999999999998899e-05, 0.22076430056817842, 0.19293636123219138, 0.1949246778982069, 0.2055375872787616, 0.18918845247813587, 0.20719787647715016, 0.1998794861184432, 0.17872865963668627, 0.20410709867849375, 0.0499924140821949, 0.04248951764672215, 0.044002887861461004, 0.04316542280052382, 0.040431711405111814, 0.045994894632358396, 0.07323576829548695, 0.043978301031989964, 0.05228016543695735, 0.13748786635348842, 0.12734524761845445, 0.1371824736802677, 0.14123728676128777, 0.14111193095199592, 0.1301036820979813, 0.1502991736570901, 0.14857817146350805, 0.13379870500734337, 0.17179452789269778, 0.16052913990741002, 0.17601870234060935, 0.16783578656293263, 0.18219270731477366, 0.1771397761087088, 0.16589477000652952, 0.17376221334603037, 0.15374264006468275, 0.11530984695382196, 0.10379086258901515, 0.11846435985059123, 0.11246143326938218, 0.13613461110043923, 0.11686832982564688, 0.1062687497213104, 0.12370774746806912, 0.12288384560794252, 0.1410629905783768, 0.16250118125037694, 0.15833036745224804, 0.16015643966070625, 0.14540284729332476, 0.16241796418976462, 0.15545823976956052, 0.17369592461027095, 0.18275672486407024, 0.1419043302967753, 0.14583427757663214, 0.14255836302452285, 0.14097097487446375, 0.14407055993265572, 0.15277430461690622, 0.1409167904584343, 0.14170877485785238, 0.16202973964970713, 0.18402040489099936, 0.16676218144448518, 0.1665359479549703, 0.1596064298130523, 0.15116693310642093, 0.14117159630874065, 0.16135421757585733, 0.16336796622415917, 0.1764432645092373, 0.15763662348314433, 0.15829501024355908, 0.1648434023288795, 0.15028523299758467, 0.18878744349491494, 0.16040618823041475, 0.16851234114078084, 0.1733340498462227, 0.2028082191379238, 0.17570637126054878, 0.19092549448045337, 0.17581469979705666, 0.18681106617361698, 0.21371907300915727, 0.18380441197536757, 0.17591300598929305, 0.1892928046018364, 0.20564824570552087, 0.05839370193955784, 0.05540414954712636, 0.0658413189493352, 0.051870202407295785, 0.05934506736903278, 0.05664145874149418, 0.07533619517051815, 0.054925977012731164, 0.06076238490577657]}, "mutation_prompt": null}
{"id": "15bf2d9a-444a-428a-87f9-2cd3205483e2", "solution": "import numpy as np\n\nclass DynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "DynamicPitchHarmonySearch", "description": "Introducing dynamic pitch adjustment in harmony search to enhance the exploration capability.", "configspace": "", "generation": 13, "fitness": 0.09335440062308137, "feedback": "The algorithm DynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "9d68f295-5d64-4c4d-9eba-be2ebd126468", "metadata": {"aucs": [0.1777300150683041, 0.17586825352018298, 0.1702461320249753, 0.17146445547710487, 0.18812956999856378, 0.17429876629723895, 0.1785280678067116, 0.1627160184474955, 0.1900115555033699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206162456976803, 0.04652488648762387, 0.0368305184189861, 0.04101453894103069, 0.037309034550568665, 0.039475462071603795, 0.05282638848491783, 0.06700236190978393, 0.05869139526097911, 0.025969175796351607, 0.032493469186012036, 0.04812888002158344, 0.027789542341995377, 0.0492505728613607, 0.0570077743769305, 0.03767334120232446, 0.03990905807415146, 0.029887845341459607, 0.08744047087201123, 0.07415088476645737, 0.09084493959529549, 0.08819934032119725, 0.08030685500353152, 0.08636692260402556, 0.08220037379266854, 0.08618476270585873, 0.0793100462686469, 0.07970705398276512, 0.08040786279099976, 0.10168788291468223, 0.0678042567047018, 0.062257631934342306, 0.06126789432932478, 0.09469511708877743, 0.06100093788403449, 0.09989195416384677, 0.12559823362162914, 0.1934590252782814, 0.14879633176882545, 0.10468090123004059, 0.09681671153005122, 0.13119140210230074, 0.1259001201085519, 0.13680200705978374, 0.1159600415573675, 0.0043466551276287735, 0.0045573520021727765, 0.006200401435613512, 0.004181598901128014, 9.999999999998899e-05, 0.0004321769207031867, 9.999999999998899e-05, 9.999999999998899e-05, 0.019865735423349018, 0.05928894622009773, 0.07836470731518896, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05291610134458591, 0.0685672734034275, 0.04525962477331502, 0.0693952635897589, 0.03256963340998842, 0.05575082131684872, 0.052934686044794343, 0.050066551117941005, 0.06419266992750783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006751486159103481, 9.999999999998899e-05, 0.22076064086295288, 0.19292779423142947, 0.1949246778982069, 0.2055375872787616, 0.1891887693213281, 0.20719799485764223, 0.19987794665669245, 0.17872865963668627, 0.20410709867849375, 0.0499924140821949, 0.04248951764672215, 0.044002887861461004, 0.04316542280052382, 0.040431711405111814, 0.045994894632358396, 0.07323576829548695, 0.043978301031989964, 0.05228016543695735, 0.13748786635348842, 0.12734524761845445, 0.1371824736802677, 0.14123728676128777, 0.14111117719599187, 0.1301036820979813, 0.1502991736570901, 0.14857817146350805, 0.13379870500734337, 0.17179452789269778, 0.16053101358018806, 0.17601792045489073, 0.16779216604067237, 0.18219270731477366, 0.1771397761087088, 0.16589477000652952, 0.1737564532395145, 0.15373949700106349, 0.11530984695382196, 0.10379133602030055, 0.11846041247647576, 0.11238526487232026, 0.13613461110043923, 0.11686832982564688, 0.1062687497213104, 0.12370914427083413, 0.12288504700390845, 0.1410537460641642, 0.1624004463729063, 0.15832265318996164, 0.16015606671061455, 0.14540284729332476, 0.16239851576324182, 0.16208897138337164, 0.17366582176681422, 0.1827436251122997, 0.1419043302967753, 0.14583427757663214, 0.14255836302452285, 0.14097097487446375, 0.14407055993265572, 0.15277430461690622, 0.1409167904584343, 0.14170877485785238, 0.16202973964970713, 0.1839876985916229, 0.16676122282529482, 0.16653523133629256, 0.1596064298130523, 0.15116693310642093, 0.14117159630874065, 0.16135421757585733, 0.16336796622415917, 0.1764432645092373, 0.15763662348314433, 0.15829501024355908, 0.16484338310960156, 0.15028461511242364, 0.18878336469618318, 0.16040618823041475, 0.16851208646218852, 0.1733340498462227, 0.2028082191379238, 0.17569705062667074, 0.19092549448045337, 0.1758142838995218, 0.18681106617361698, 0.2135300087787373, 0.18380441197536757, 0.17590836880712135, 0.1892907271098785, 0.2056491900504991, 0.05837355487196638, 0.055302715793391743, 0.0658413189493352, 0.05214875716375955, 0.059331056702424556, 0.05664145874149418, 0.0753069506580899, 0.054979332660546554, 0.06076238490577657]}, "mutation_prompt": null}
{"id": "ca1cad39-c5fd-41e3-9e0e-9f093f7228a6", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                for _ in range(self.dim):  # Change to explore all dimensions\n                    index = np.random.randint(self.dim)\n                    new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                           min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Incorporating opposition-based learning into dynamic pitch harmony search for enhanced exploration and exploitation in optimization.", "configspace": "", "generation": 14, "fitness": 0.09334299670100542, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "15bf2d9a-444a-428a-87f9-2cd3205483e2", "metadata": {"aucs": [0.1777300150683041, 0.17586597124076764, 0.1702461320249753, 0.17146522744608628, 0.18812964827462797, 0.17429927710618953, 0.1785280678067116, 0.1627160184474955, 0.1900114875130785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206162456976803, 0.04652488648762387, 0.0368305184189861, 0.04101453894103069, 0.037309034550568665, 0.039475462071603795, 0.05282638848491783, 0.06700236190978393, 0.05869139526097911, 0.025969175796351607, 0.032493469186012036, 0.04812888002158344, 0.027789542341995377, 0.0492505728613607, 0.0570077743769305, 0.03767334120232446, 0.03990905807415146, 0.029887845341459607, 0.08744047087201123, 0.07415088476645737, 0.09084493959529549, 0.08819934032119725, 0.08030685500353152, 0.08636692260402556, 0.08220037379266854, 0.08618476270585873, 0.0793100462686469, 0.07970705398276512, 0.08040786279099976, 0.10168788291468223, 0.0678042567047018, 0.062257631934342306, 0.06126789432932478, 0.09469511708877743, 0.06100093788403449, 0.09989195416384677, 0.1272507772633631, 0.19384115109925426, 0.14966194054699322, 0.10468090123004059, 0.09681671153005122, 0.13119140210230074, 0.1259001201085519, 0.13680200705978374, 0.1159600415573675, 0.0043466551276287735, 0.0045573520021727765, 0.006200401435613512, 0.004181598901128014, 9.999999999998899e-05, 0.0004321769207031867, 9.999999999998899e-05, 9.999999999998899e-05, 0.019865735423349018, 0.05663112608933074, 0.07794356948669467, 0.05860859837227139, 0.06236931003546686, 0.07166401225714325, 0.06258550081797365, 0.05806085032097763, 0.059205726523256064, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05291610134458591, 0.0685672734034275, 0.04525962477331502, 0.0693952635897589, 0.03256963340998842, 0.05575082131684872, 0.052934686044794343, 0.050066551117941005, 0.06419266992750783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006751486159103481, 9.999999999998899e-05, 0.22076064086295288, 0.19292795421665365, 0.1949246778982069, 0.2055375872787616, 0.1891889943711762, 0.2071984337871393, 0.19988373921853175, 0.17872865963668627, 0.20410709867849375, 0.0499924140821949, 0.04248951764672215, 0.044002887861461004, 0.04316542280052382, 0.040431711405111814, 0.045994894632358396, 0.07323576829548695, 0.043978301031989964, 0.05228016543695735, 0.13748786635348842, 0.12734524761845445, 0.1371824736802677, 0.14123728676128777, 0.14111117719599187, 0.1301036820979813, 0.1502991736570901, 0.14857817146350805, 0.13379870500734337, 0.17179452789269778, 0.16053237029472145, 0.1760164752237271, 0.16779620022361064, 0.18219270731477366, 0.1771397761087088, 0.16589477000652952, 0.1737564532395145, 0.15372884608619553, 0.11530984695382196, 0.10379150091731082, 0.11845794022611356, 0.11259058315125148, 0.13613959178115853, 0.11689877706597729, 0.1062687497213104, 0.12371002496255845, 0.1228835715165294, 0.1410770847583439, 0.16241336511753213, 0.15832694867026564, 0.16014020021243391, 0.1456411763333173, 0.16236661424936483, 0.15545823976956052, 0.17366582176681422, 0.1827436251122997, 0.1419043302967753, 0.14583427757663214, 0.14255836302452285, 0.14097097487446375, 0.14407055993265572, 0.15277430461690622, 0.1409167904584343, 0.14170877485785238, 0.16202973964970713, 0.18398735093801166, 0.16676196129485965, 0.16653430265197944, 0.1596064298130523, 0.15116693310642093, 0.14117159630874065, 0.16135421757585733, 0.16336796622415917, 0.1764432645092373, 0.15763662348314433, 0.15829501024355908, 0.16484338310960156, 0.15028461511242364, 0.18878336469618318, 0.16040618823041475, 0.16851208646218852, 0.1733340498462227, 0.2028082191379238, 0.17570715563682493, 0.19092549448045337, 0.17582934217138368, 0.18681106617361698, 0.2135300087787373, 0.18380441197536757, 0.17590827327080027, 0.18931683009062072, 0.20564807963187903, 0.05837199259749526, 0.055302715793391743, 0.0658413189493352, 0.05184879323415226, 0.059331056702424556, 0.05664145874149418, 0.07531578582803666, 0.05489948755415719, 0.06076238490577657]}, "mutation_prompt": null}
{"id": "3588c52b-fa50-4c3a-9a86-c6442385e868", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim)\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony += levy_flight()\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Improving exploration and exploitation balance by incorporating levy flights for enhanced local search capabilities.", "configspace": "", "generation": 15, "fitness": 0.09312932064252034, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "15bf2d9a-444a-428a-87f9-2cd3205483e2", "metadata": {"aucs": [0.1777300150683041, 0.1758610851076874, 0.1702461320249753, 0.17146445547710487, 0.18812956999856378, 0.1742978395767244, 0.1785280678067116, 0.1627160184474955, 0.1900114211297642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206162456976803, 0.04652488648762387, 0.0368305184189861, 0.04101453894103069, 0.037309034550568665, 0.039475462071603795, 0.05282638848491783, 0.06700236190978393, 0.05869139526097911, 0.025969175796351607, 0.032493469186012036, 0.04812888002158344, 0.027789542341995377, 0.0492505728613607, 0.0570077743769305, 0.03767334120232446, 0.03990905807415146, 0.029887845341459607, 0.08744047087201123, 0.07415088476645737, 0.09084493959529549, 0.08819934032119725, 0.08030685500353152, 0.08636692260402556, 0.08220037379266854, 0.08618476270585873, 0.0793100462686469, 0.07970705398276512, 0.08040786279099976, 0.10168788291468223, 0.0678042567047018, 0.062257631934342306, 0.06126789432932478, 0.09469511708877743, 0.06100093788403449, 0.09989195416384677, 0.12559823362162914, 0.19339062674383178, 0.14879633176882545, 0.10468090123004059, 0.09681671153005122, 0.13119140210230074, 0.1259001201085519, 0.13680200705978374, 0.1159600415573675, 0.0043466551276287735, 0.0045573520021727765, 0.006200401435613512, 0.004181598901128014, 9.999999999998899e-05, 0.0004321769207031867, 9.999999999998899e-05, 9.999999999998899e-05, 0.019865735423349018, 0.05663112608933074, 0.07637445287657707, 0.05669140256955785, 0.057777430942387076, 0.05871086292919858, 0.049062371246340275, 0.05806085032097763, 0.05098196106669006, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05291610134458591, 0.0685672734034275, 0.04525962477331502, 0.0693952635897589, 0.03256963340998842, 0.05575082131684872, 0.052934686044794343, 0.050066551117941005, 0.06419266992750783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006751486159103481, 9.999999999998899e-05, 0.22076064086295288, 0.19293418717838617, 0.1949246778982069, 0.2055375872787616, 0.18918845247813587, 0.20719795582927136, 0.19987589764130897, 0.17872865963668627, 0.20410709867849375, 0.0499924140821949, 0.04248951764672215, 0.044002887861461004, 0.04316542280052382, 0.040431711405111814, 0.045994894632358396, 0.07323576829548695, 0.043978301031989964, 0.05228016543695735, 0.13748786635348842, 0.12734524761845445, 0.1371824736802677, 0.1412410201963683, 0.1411398591893378, 0.1301036820979813, 0.15030860736759644, 0.14857817146350805, 0.13379870500734337, 0.17186987457648917, 0.16053766991848317, 0.17601209168641763, 0.16779216604067237, 0.18219270731477366, 0.1771397761087088, 0.16589477000652952, 0.1737564532395145, 0.15373422377310308, 0.11530984695382196, 0.10379086258901515, 0.11845827554045174, 0.11238526487232026, 0.13613461110043923, 0.11686832982564688, 0.1062687497213104, 0.12370774746806912, 0.12289354052057533, 0.1410537460641642, 0.16238751736971935, 0.1583280885786731, 0.16014020021243391, 0.14540284729332476, 0.1623681682139828, 0.15545823976956052, 0.17366582176681422, 0.18275652028607714, 0.1419043302967753, 0.14583427757663214, 0.14255836302452285, 0.14097097487446375, 0.14407055993265572, 0.15277430461690622, 0.1409167904584343, 0.14170877485785238, 0.16202973964970713, 0.18398629786590415, 0.16676014734964595, 0.16654312809803373, 0.1596064298130523, 0.15116693310642093, 0.14117893454994213, 0.16135421757585733, 0.16336796622415917, 0.1764432645092373, 0.15763662348314433, 0.15829501024355908, 0.16484338310960156, 0.15028461511242364, 0.18878336469618318, 0.16040639098981013, 0.16851208646218852, 0.1733340498462227, 0.20281256944071502, 0.17569722520253694, 0.19092549448045337, 0.17581688532178197, 0.18681106617361698, 0.2135300087787373, 0.18380441197536757, 0.17590827327080027, 0.18932057544658287, 0.20564807963187903, 0.05837199259749526, 0.055302715793391743, 0.0658413189493352, 0.05184700208823256, 0.059331056702424556, 0.05664145874149418, 0.0753069506580899, 0.05489948755415719, 0.06076238490577657]}, "mutation_prompt": null}
{"id": "7398d300-1db4-4b08-984f-66a8bef94415", "solution": "import numpy as np\n\nclass DynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "DynamicPitchHarmonySearch", "description": "Introducing dynamic pitch adjustment in harmony search to enhance the exploration capability.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "15bf2d9a-444a-428a-87f9-2cd3205483e2", "metadata": {"aucs": [0.1777300150683041, 0.17586825352018298, 0.1702461320249753, 0.17146445547710487, 0.18812956999856378, 0.17429876629723895, 0.1785280678067116, 0.1627160184474955, 0.1900115555033699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206162456976803, 0.04652488648762387, 0.0368305184189861, 0.04101453894103069, 0.037309034550568665, 0.039475462071603795, 0.05282638848491783, 0.06700236190978393, 0.05869139526097911, 0.025969175796351607, 0.032493469186012036, 0.04812888002158344, 0.027789542341995377, 0.0492505728613607, 0.0570077743769305, 0.03767334120232446, 0.03990905807415146, 0.029887845341459607, 0.08744047087201123, 0.07415088476645737, 0.09084493959529549, 0.08819934032119725, 0.08030685500353152, 0.08636692260402556, 0.08220037379266854, 0.08618476270585873, 0.0793100462686469, 0.07970705398276512, 0.08040786279099976, 0.10168788291468223, 0.0678042567047018, 0.062257631934342306, 0.06126789432932478, 0.09469511708877743, 0.06100093788403449, 0.09989195416384677, 0.12559823362162914, 0.1934590252782814, 0.14879633176882545, 0.10468090123004059, 0.09681671153005122, 0.13119140210230074, 0.1259001201085519, 0.13680200705978374, 0.1159600415573675, 0.0043466551276287735, 0.0045573520021727765, 0.006200401435613512, 0.004181598901128014, 9.999999999998899e-05, 0.0004321769207031867, 9.999999999998899e-05, 9.999999999998899e-05, 0.019865735423349018, 0.05928894622009773, 0.07836470731518896, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05291610134458591, 0.0685672734034275, 0.04525962477331502, 0.0693952635897589, 0.03256963340998842, 0.05575082131684872, 0.052934686044794343, 0.050066551117941005, 0.06419266992750783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006751486159103481, 9.999999999998899e-05, 0.22076064086295288, 0.19292779423142947, 0.1949246778982069, 0.2055375872787616, 0.1891887693213281, 0.20719799485764223, 0.19987794665669245, 0.17872865963668627, 0.20410709867849375, 0.0499924140821949, 0.04248951764672215, 0.044002887861461004, 0.04316542280052382, 0.040431711405111814, 0.045994894632358396, 0.07323576829548695, 0.043978301031989964, 0.05228016543695735, 0.13748786635348842, 0.12734524761845445, 0.1371824736802677, 0.14123728676128777, 0.14111117719599187, 0.1301036820979813, 0.1502991736570901, 0.14857817146350805, 0.13379870500734337, 0.17179452789269778, 0.16053101358018806, 0.17601792045489073, 0.16779216604067237, 0.18219270731477366, 0.1771397761087088, 0.16589477000652952, 0.1737564532395145, 0.15373949700106349, 0.11530984695382196, 0.10379133602030055, 0.11846041247647576, 0.11238526487232026, 0.13613461110043923, 0.11686832982564688, 0.1062687497213104, 0.12370914427083413, 0.12288504700390845, 0.1410537460641642, 0.1624004463729063, 0.15832265318996164, 0.16015606671061455, 0.14540284729332476, 0.16239851576324182, 0.16208897138337164, 0.17366582176681422, 0.1827436251122997, 0.1419043302967753, 0.14583427757663214, 0.14255836302452285, 0.14097097487446375, 0.14407055993265572, 0.15277430461690622, 0.1409167904584343, 0.14170877485785238, 0.16202973964970713, 0.1839876985916229, 0.16676122282529482, 0.16653523133629256, 0.1596064298130523, 0.15116693310642093, 0.14117159630874065, 0.16135421757585733, 0.16336796622415917, 0.1764432645092373, 0.15763662348314433, 0.15829501024355908, 0.16484338310960156, 0.15028461511242364, 0.18878336469618318, 0.16040618823041475, 0.16851208646218852, 0.1733340498462227, 0.2028082191379238, 0.17569705062667074, 0.19092549448045337, 0.1758142838995218, 0.18681106617361698, 0.2135300087787373, 0.18380441197536757, 0.17590836880712135, 0.1892907271098785, 0.2056491900504991, 0.05837355487196638, 0.055302715793391743, 0.0658413189493352, 0.05214875716375955, 0.059331056702424556, 0.05664145874149418, 0.0753069506580899, 0.054979332660546554, 0.06076238490577657]}, "mutation_prompt": null}
{"id": "65546f56-4ff1-4e2d-b3d8-6960946dce12", "solution": "import numpy as np\n\nclass DynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "DynamicPitchHarmonySearch", "description": "Introducing dynamic pitch adjustment in harmony search to enhance the exploration capability.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bf2d9a-444a-428a-87f9-2cd3205483e2", "metadata": {"aucs": [0.1777300150683041, 0.17586825352018298, 0.1702461320249753, 0.17146445547710487, 0.18812956999856378, 0.17429876629723895, 0.1785280678067116, 0.1627160184474955, 0.1900115555033699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206162456976803, 0.04652488648762387, 0.0368305184189861, 0.04101453894103069, 0.037309034550568665, 0.039475462071603795, 0.05282638848491783, 0.06700236190978393, 0.05869139526097911, 0.025969175796351607, 0.032493469186012036, 0.04812888002158344, 0.027789542341995377, 0.0492505728613607, 0.0570077743769305, 0.03767334120232446, 0.03990905807415146, 0.029887845341459607, 0.08744047087201123, 0.07415088476645737, 0.09084493959529549, 0.08819934032119725, 0.08030685500353152, 0.08636692260402556, 0.08220037379266854, 0.08618476270585873, 0.0793100462686469, 0.07970705398276512, 0.08040786279099976, 0.10168788291468223, 0.0678042567047018, 0.062257631934342306, 0.06126789432932478, 0.09469511708877743, 0.06100093788403449, 0.09989195416384677, 0.12559823362162914, 0.1934590252782814, 0.14879633176882545, 0.10468090123004059, 0.09681671153005122, 0.13119140210230074, 0.1259001201085519, 0.13680200705978374, 0.1159600415573675, 0.0043466551276287735, 0.0045573520021727765, 0.006200401435613512, 0.004181598901128014, 9.999999999998899e-05, 0.0004321769207031867, 9.999999999998899e-05, 9.999999999998899e-05, 0.019865735423349018, 0.05928894622009773, 0.07836470731518896, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05291610134458591, 0.0685672734034275, 0.04525962477331502, 0.0693952635897589, 0.03256963340998842, 0.05575082131684872, 0.052934686044794343, 0.050066551117941005, 0.06419266992750783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006751486159103481, 9.999999999998899e-05, 0.22076064086295288, 0.19292779423142947, 0.1949246778982069, 0.2055375872787616, 0.1891887693213281, 0.20719799485764223, 0.19987794665669245, 0.17872865963668627, 0.20410709867849375, 0.0499924140821949, 0.04248951764672215, 0.044002887861461004, 0.04316542280052382, 0.040431711405111814, 0.045994894632358396, 0.07323576829548695, 0.043978301031989964, 0.05228016543695735, 0.13748786635348842, 0.12734524761845445, 0.1371824736802677, 0.14123728676128777, 0.14111117719599187, 0.1301036820979813, 0.1502991736570901, 0.14857817146350805, 0.13379870500734337, 0.17179452789269778, 0.16053101358018806, 0.17601792045489073, 0.16779216604067237, 0.18219270731477366, 0.1771397761087088, 0.16589477000652952, 0.1737564532395145, 0.15373949700106349, 0.11530984695382196, 0.10379133602030055, 0.11846041247647576, 0.11238526487232026, 0.13613461110043923, 0.11686832982564688, 0.1062687497213104, 0.12370914427083413, 0.12288504700390845, 0.1410537460641642, 0.1624004463729063, 0.15832265318996164, 0.16015606671061455, 0.14540284729332476, 0.16239851576324182, 0.16208897138337164, 0.17366582176681422, 0.1827436251122997, 0.1419043302967753, 0.14583427757663214, 0.14255836302452285, 0.14097097487446375, 0.14407055993265572, 0.15277430461690622, 0.1409167904584343, 0.14170877485785238, 0.16202973964970713, 0.1839876985916229, 0.16676122282529482, 0.16653523133629256, 0.1596064298130523, 0.15116693310642093, 0.14117159630874065, 0.16135421757585733, 0.16336796622415917, 0.1764432645092373, 0.15763662348314433, 0.15829501024355908, 0.16484338310960156, 0.15028461511242364, 0.18878336469618318, 0.16040618823041475, 0.16851208646218852, 0.1733340498462227, 0.2028082191379238, 0.17569705062667074, 0.19092549448045337, 0.1758142838995218, 0.18681106617361698, 0.2135300087787373, 0.18380441197536757, 0.17590836880712135, 0.1892907271098785, 0.2056491900504991, 0.05837355487196638, 0.055302715793391743, 0.0658413189493352, 0.05214875716375955, 0.059331056702424556, 0.05664145874149418, 0.0753069506580899, 0.054979332660546554, 0.06076238490577657]}, "mutation_prompt": null}
{"id": "6346c9fa-a3aa-4d20-b015-eef8b40d97a3", "solution": "import numpy as np\n\nclass AdaptiveMemoryDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.memory_size = int(0.1 * budget)  # Adaptive memory size\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.memory_size)]  # Adaptive memory initialization\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                memory_index = np.random.randint(self.memory_size)\n                harmony_memory[memory_index] = new_harmony  # Adaptive memory update\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "AdaptiveMemoryDynamicPitchHarmonySearch", "description": "Enhancing exploration by introducing an adaptive memory size to balance intensification and diversification.", "configspace": "", "generation": 18, "fitness": 0.05740755032564043, "feedback": "The algorithm AdaptiveMemoryDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.07.", "error": "", "parent_id": "15bf2d9a-444a-428a-87f9-2cd3205483e2", "metadata": {"aucs": [0.12313153102263041, 0.12124237943779592, 0.12178387498539611, 0.040327031288785786, 0.04118372111392932, 0.0402471367733197, 0.06402612211404246, 0.06385031552585474, 0.06200599486270242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015290276203115849, 0.0174832898260584, 0.015568393075674813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003008687107725172, 9.999999999998899e-05, 0.024387821479092908, 0.022298167536017766, 0.023144896727415265, 9.999999999998899e-05, 0.001552136069690624, 0.00666823384789228, 0.006187801370156953, 0.0010024641478301177, 0.001366766935611885, 0.023135531222200134, 0.022447570321962873, 0.023150306812190102, 0.02252824351227012, 0.022074609737217532, 0.02278040613770027, 0.02230936277883666, 0.02215942183357056, 0.02269404565060318, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03223066980054323, 0.026738286898475017, 0.028109752040185176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1261708211821484, 0.125040706238146, 0.12545319709145164, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012445691947343684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011436049159394002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0903147223133719, 0.06882123369316573, 0.07881776364514081, 0.11346734601299613, 0.08885521441979094, 0.12730667562421527, 0.11155739266521036, 0.07190896880602426, 0.08902005069810692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07619547735359788, 0.024412460230006428, 0.029783867517714335, 0.057734988347290295, 0.019280634907196892, 0.03952383092914857, 0.025669494232433143, 0.005271410012736899, 0.023470259508971636, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10620149436393533, 0.1133990017263965, 0.12391795494314395, 0.12465509275366349, 0.115873796987773, 0.12073461901542282, 0.16326440709305168, 0.16661495641072654, 0.16513388765086034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007626405797148794, 0.004933214701737909, 0.008105473424881882, 0.03406048996399935, 0.030392062525911978, 0.029120150332520134, 0.09257308833958777, 0.10924997569686512, 0.09758092021138232, 0.07380289269709772, 0.10800694611167039, 0.08376843368422848, 0.08888552423556828, 0.11034760904955088, 0.10160975637194258, 0.13866289775973806, 0.13136273245792873, 0.1310255179412121, 0.16461081349070605, 0.16460814784247557, 0.16320322818890476, 0.12119500694472352, 0.12062526945852259, 0.11911213420959244, 0.06399186642377153, 0.06231760558183974, 0.06113498354232727, 0.1060704054514583, 0.10601056589225122, 0.09948099926993381, 0.0767179709251472, 0.0700999979559036, 0.07440436037928522, 0.25324327421108817, 0.2299601499110655, 0.22848753354004436, 0.22217543876655876, 0.21835624094103723, 0.23151695888707646, 0.20913638698713155, 0.23474073385129124, 0.2381179012057485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07985313762448154, 0.08117910765714065, 0.08071602182936222, 0.06869398857782383, 0.07515273648195775, 0.07138677339273014, 0.07662506586423656, 0.0790107179249604, 0.0719930798487618, 0.11726030631620088, 0.1252398081846361, 0.10685479507319218, 0.08092194354451876, 0.07500120734745508, 0.07693005796185937, 0.06382430391914273, 0.06261612737744149, 0.06204770992487596, 0.19150222201911637, 0.17809356405941612, 0.16933284695901363, 0.1732595547251904, 0.19029469134547916, 0.173304136631784, 0.19739794517914944, 0.1836775596568534, 0.1977184253879546, 0.053176848932250165, 0.04366415930771761, 0.04482310979877602, 0.04542540647045512, 0.046498709595028, 0.04631574277897821, 0.04773306944090039, 0.04990406678964732, 0.04820226432453112]}, "mutation_prompt": null}
{"id": "b4a62895-6920-479c-a4f6-d043c61d6348", "solution": "import numpy as np\n\nclass DynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "DynamicPitchHarmonySearch", "description": "Introducing dynamic pitch adjustment in harmony search to enhance the exploration capability.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bf2d9a-444a-428a-87f9-2cd3205483e2", "metadata": {"aucs": [0.1777300150683041, 0.17586825352018298, 0.1702461320249753, 0.17146445547710487, 0.18812956999856378, 0.17429876629723895, 0.1785280678067116, 0.1627160184474955, 0.1900115555033699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206162456976803, 0.04652488648762387, 0.0368305184189861, 0.04101453894103069, 0.037309034550568665, 0.039475462071603795, 0.05282638848491783, 0.06700236190978393, 0.05869139526097911, 0.025969175796351607, 0.032493469186012036, 0.04812888002158344, 0.027789542341995377, 0.0492505728613607, 0.0570077743769305, 0.03767334120232446, 0.03990905807415146, 0.029887845341459607, 0.08744047087201123, 0.07415088476645737, 0.09084493959529549, 0.08819934032119725, 0.08030685500353152, 0.08636692260402556, 0.08220037379266854, 0.08618476270585873, 0.0793100462686469, 0.07970705398276512, 0.08040786279099976, 0.10168788291468223, 0.0678042567047018, 0.062257631934342306, 0.06126789432932478, 0.09469511708877743, 0.06100093788403449, 0.09989195416384677, 0.12559823362162914, 0.1934590252782814, 0.14879633176882545, 0.10468090123004059, 0.09681671153005122, 0.13119140210230074, 0.1259001201085519, 0.13680200705978374, 0.1159600415573675, 0.0043466551276287735, 0.0045573520021727765, 0.006200401435613512, 0.004181598901128014, 9.999999999998899e-05, 0.0004321769207031867, 9.999999999998899e-05, 9.999999999998899e-05, 0.019865735423349018, 0.05928894622009773, 0.07836470731518896, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05291610134458591, 0.0685672734034275, 0.04525962477331502, 0.0693952635897589, 0.03256963340998842, 0.05575082131684872, 0.052934686044794343, 0.050066551117941005, 0.06419266992750783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006751486159103481, 9.999999999998899e-05, 0.22076064086295288, 0.19292779423142947, 0.1949246778982069, 0.2055375872787616, 0.1891887693213281, 0.20719799485764223, 0.19987794665669245, 0.17872865963668627, 0.20410709867849375, 0.0499924140821949, 0.04248951764672215, 0.044002887861461004, 0.04316542280052382, 0.040431711405111814, 0.045994894632358396, 0.07323576829548695, 0.043978301031989964, 0.05228016543695735, 0.13748786635348842, 0.12734524761845445, 0.1371824736802677, 0.14123728676128777, 0.14111117719599187, 0.1301036820979813, 0.1502991736570901, 0.14857817146350805, 0.13379870500734337, 0.17179452789269778, 0.16053101358018806, 0.17601792045489073, 0.16779216604067237, 0.18219270731477366, 0.1771397761087088, 0.16589477000652952, 0.1737564532395145, 0.15373949700106349, 0.11530984695382196, 0.10379133602030055, 0.11846041247647576, 0.11238526487232026, 0.13613461110043923, 0.11686832982564688, 0.1062687497213104, 0.12370914427083413, 0.12288504700390845, 0.1410537460641642, 0.1624004463729063, 0.15832265318996164, 0.16015606671061455, 0.14540284729332476, 0.16239851576324182, 0.16208897138337164, 0.17366582176681422, 0.1827436251122997, 0.1419043302967753, 0.14583427757663214, 0.14255836302452285, 0.14097097487446375, 0.14407055993265572, 0.15277430461690622, 0.1409167904584343, 0.14170877485785238, 0.16202973964970713, 0.1839876985916229, 0.16676122282529482, 0.16653523133629256, 0.1596064298130523, 0.15116693310642093, 0.14117159630874065, 0.16135421757585733, 0.16336796622415917, 0.1764432645092373, 0.15763662348314433, 0.15829501024355908, 0.16484338310960156, 0.15028461511242364, 0.18878336469618318, 0.16040618823041475, 0.16851208646218852, 0.1733340498462227, 0.2028082191379238, 0.17569705062667074, 0.19092549448045337, 0.1758142838995218, 0.18681106617361698, 0.2135300087787373, 0.18380441197536757, 0.17590836880712135, 0.1892907271098785, 0.2056491900504991, 0.05837355487196638, 0.055302715793391743, 0.0658413189493352, 0.05214875716375955, 0.059331056702424556, 0.05664145874149418, 0.0753069506580899, 0.054979332660546554, 0.06076238490577657]}, "mutation_prompt": null}
{"id": "b6622d1d-f2f7-460d-9a03-ecef25544578", "solution": "import numpy as np\n\nclass AdaptiveMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.memory_size = int(0.1 * budget)  # Adapt memory size\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.memory_size)]  # Adjust memory size\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "AdaptiveMemoryHarmonySearch", "description": "Introducing dynamic pitch adjustment and opposition-based learning with adaptive memory size in harmony search for enhanced convergence.", "configspace": "", "generation": 20, "fitness": 0.07965677353752725, "feedback": "The algorithm AdaptiveMemoryHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.06.", "error": "", "parent_id": "15bf2d9a-444a-428a-87f9-2cd3205483e2", "metadata": {"aucs": [0.16836246234046426, 0.1758657177672016, 0.13254708813547733, 0.15610837821896384, 0.1447572417403279, 0.15302626676278175, 0.17388654883641885, 0.12128904105869331, 0.1409436500155703, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03209704384941292, 0.044949249433043015, 0.02493482287990556, 0.023426053640961952, 0.037309034550568665, 0.036612307272301026, 0.039311107158308545, 0.03587533295735079, 0.032279949346711856, 0.022925132210193988, 0.01514503652121224, 0.028759480231073775, 0.01959386697623977, 0.010894065741025027, 0.014331910434597694, 0.03695259613841373, 0.011585060167495276, 0.029754393034445048, 0.06057963099881147, 0.06739248219844651, 0.061606547953268476, 0.0637260200602453, 0.08030685500353152, 0.06376647630553234, 0.06956927410364055, 0.07144009400055329, 0.07908452553861134, 0.06272907808741324, 0.07508571268490083, 0.10168788291468223, 0.03844647567759074, 0.062257631934342306, 0.035092805088524304, 0.09469511708877743, 0.03363876944477873, 0.08916825830521047, 0.11902600383152218, 0.1944338898503255, 0.14969017600113566, 0.07873064168107247, 0.08273115488188465, 0.08130469375062044, 0.07077600190359878, 0.1053554946639339, 0.10014753965812506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0708347745856639, 0.06298320769295263, 0.07523414281873886, 0.0578643477402655, 0.07245561200323136, 0.052437527434338715, 0.07429358467735747, 0.061700311275735165, 0.07474352089852077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06533041054341449, 0.04489295618469347, 0.04465558892770238, 0.021483172599128686, 0.01130582425796689, 9.999999999998899e-05, 0.03389535261118359, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20033218298860578, 0.1845793435717923, 0.17781505036713585, 0.2055375872787616, 0.17141387484424309, 0.19222800287779107, 0.19727500108444007, 0.1507957075550561, 0.18919468141299045, 0.025963110920169674, 0.03614531588323355, 0.021977533081534606, 0.03265905728361762, 0.025517706323910705, 0.03051697857162583, 0.03437458492465595, 0.0219414725434266, 0.046150796849549036, 0.13705498049224574, 0.11031128993244765, 0.11840256614199973, 0.13762245338255907, 0.13508036072469787, 0.10849197393328447, 0.14958857737022968, 0.12714675016677246, 0.1157699920372457, 0.1602499188051414, 0.15057364166676057, 0.16811820733627159, 0.13805107616354995, 0.14764550388420972, 0.1620474694065802, 0.1440693818142723, 0.17375343452684788, 0.12871982461268594, 0.09383175632459728, 0.0800853449586848, 0.11106699910407691, 0.09401187837103064, 0.12095980164730613, 0.09803045238525121, 0.09172194359327057, 0.12371880339942432, 0.09324670049222827, 0.12933397366216814, 0.13328793364185754, 0.14135061629927625, 0.14042787504044152, 0.16705856277086262, 0.14946369208401244, 0.1421641232535814, 0.1438503405314595, 0.1538312693695043, 0.1318771523048612, 0.14200737862088497, 0.14002188568135843, 0.13370143985825167, 0.13214832777961094, 0.1392446758544107, 0.13321345516868022, 0.13038314755744018, 0.16202973964970713, 0.10929567010759822, 0.16676090818818434, 0.1592753242011431, 0.15173244123702567, 0.12076920873948804, 0.10771518795180657, 0.11883134968310405, 0.12637704750959766, 0.15687861029086747, 0.11453292647519919, 0.1083676084534394, 0.12203542505543918, 0.11863192438145709, 0.08653484636587672, 0.10910306672197634, 0.16087075212457835, 0.16444464600417885, 0.11107268749758137, 0.16585049020401332, 0.1840757931582987, 0.16109192722746524, 0.18681106617361698, 0.21353442428815728, 0.1679026165105062, 0.1665109805756141, 0.1774208955407276, 0.20565397485594716, 0.03405065461130796, 0.04765587661802351, 0.06584335173999534, 0.04984618923267914, 0.058832026462480314, 0.04631736307126666, 0.07530754356503533, 0.051887819575056726, 0.03995339426144018]}, "mutation_prompt": null}
{"id": "1609905d-6cbe-48a7-9910-dbc230d01d91", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def mutation(harmony):\n            mutated_index = np.random.randint(self.dim)\n            mutation_amount = np.random.uniform(-self.pitch_range, self.pitch_range)\n            harmony[mutated_index] += mutation_amount\n            harmony[mutated_index] = adjust_value(harmony[mutated_index])\n            return harmony\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony = mutation(new_harmony)\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhancing DynamicPitchHarmonySearch by incorporating a mutation operator to introduce diversity and escape local optima.", "configspace": "", "generation": 21, "fitness": 0.09335440062308137, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "15bf2d9a-444a-428a-87f9-2cd3205483e2", "metadata": {"aucs": [0.1777300150683041, 0.17586825352018298, 0.1702461320249753, 0.17146445547710487, 0.18812956999856378, 0.17429876629723895, 0.1785280678067116, 0.1627160184474955, 0.1900115555033699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206162456976803, 0.04652488648762387, 0.0368305184189861, 0.04101453894103069, 0.037309034550568665, 0.039475462071603795, 0.05282638848491783, 0.06700236190978393, 0.05869139526097911, 0.025969175796351607, 0.032493469186012036, 0.04812888002158344, 0.027789542341995377, 0.0492505728613607, 0.0570077743769305, 0.03767334120232446, 0.03990905807415146, 0.029887845341459607, 0.08744047087201123, 0.07415088476645737, 0.09084493959529549, 0.08819934032119725, 0.08030685500353152, 0.08636692260402556, 0.08220037379266854, 0.08618476270585873, 0.0793100462686469, 0.07970705398276512, 0.08040786279099976, 0.10168788291468223, 0.0678042567047018, 0.062257631934342306, 0.06126789432932478, 0.09469511708877743, 0.06100093788403449, 0.09989195416384677, 0.12559823362162914, 0.1934590252782814, 0.14879633176882545, 0.10468090123004059, 0.09681671153005122, 0.13119140210230074, 0.1259001201085519, 0.13680200705978374, 0.1159600415573675, 0.0043466551276287735, 0.0045573520021727765, 0.006200401435613512, 0.004181598901128014, 9.999999999998899e-05, 0.0004321769207031867, 9.999999999998899e-05, 9.999999999998899e-05, 0.019865735423349018, 0.05928894622009773, 0.07836470731518896, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05291610134458591, 0.0685672734034275, 0.04525962477331502, 0.0693952635897589, 0.03256963340998842, 0.05575082131684872, 0.052934686044794343, 0.050066551117941005, 0.06419266992750783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006751486159103481, 9.999999999998899e-05, 0.22076064086295288, 0.19292779423142947, 0.1949246778982069, 0.2055375872787616, 0.1891887693213281, 0.20719799485764223, 0.19987794665669245, 0.17872865963668627, 0.20410709867849375, 0.0499924140821949, 0.04248951764672215, 0.044002887861461004, 0.04316542280052382, 0.040431711405111814, 0.045994894632358396, 0.07323576829548695, 0.043978301031989964, 0.05228016543695735, 0.13748786635348842, 0.12734524761845445, 0.1371824736802677, 0.14123728676128777, 0.14111117719599187, 0.1301036820979813, 0.1502991736570901, 0.14857817146350805, 0.13379870500734337, 0.17179452789269778, 0.16053101358018806, 0.17601792045489073, 0.16779216604067237, 0.18219270731477366, 0.1771397761087088, 0.16589477000652952, 0.1737564532395145, 0.15373949700106349, 0.11530984695382196, 0.10379133602030055, 0.11846041247647576, 0.11238526487232026, 0.13613461110043923, 0.11686832982564688, 0.1062687497213104, 0.12370914427083413, 0.12288504700390845, 0.1410537460641642, 0.1624004463729063, 0.15832265318996164, 0.16015606671061455, 0.14540284729332476, 0.16239851576324182, 0.16208897138337164, 0.17366582176681422, 0.1827436251122997, 0.1419043302967753, 0.14583427757663214, 0.14255836302452285, 0.14097097487446375, 0.14407055993265572, 0.15277430461690622, 0.1409167904584343, 0.14170877485785238, 0.16202973964970713, 0.1839876985916229, 0.16676122282529482, 0.16653523133629256, 0.1596064298130523, 0.15116693310642093, 0.14117159630874065, 0.16135421757585733, 0.16336796622415917, 0.1764432645092373, 0.15763662348314433, 0.15829501024355908, 0.16484338310960156, 0.15028461511242364, 0.18878336469618318, 0.16040618823041475, 0.16851208646218852, 0.1733340498462227, 0.2028082191379238, 0.17569705062667074, 0.19092549448045337, 0.1758142838995218, 0.18681106617361698, 0.2135300087787373, 0.18380441197536757, 0.17590836880712135, 0.1892907271098785, 0.2056491900504991, 0.05837355487196638, 0.055302715793391743, 0.0658413189493352, 0.05214875716375955, 0.059331056702424556, 0.05664145874149418, 0.0753069506580899, 0.054979332660546554, 0.06076238490577657]}, "mutation_prompt": null}
{"id": "5d51adbc-a870-4056-bb6d-c44102d0facf", "solution": "import numpy as np\n\nclass DynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "DynamicPitchHarmonySearch", "description": "Introducing dynamic pitch adjustment in harmony search to enhance the exploration capability.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bf2d9a-444a-428a-87f9-2cd3205483e2", "metadata": {"aucs": [0.1777300150683041, 0.17586825352018298, 0.1702461320249753, 0.17146445547710487, 0.18812956999856378, 0.17429876629723895, 0.1785280678067116, 0.1627160184474955, 0.1900115555033699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206162456976803, 0.04652488648762387, 0.0368305184189861, 0.04101453894103069, 0.037309034550568665, 0.039475462071603795, 0.05282638848491783, 0.06700236190978393, 0.05869139526097911, 0.025969175796351607, 0.032493469186012036, 0.04812888002158344, 0.027789542341995377, 0.0492505728613607, 0.0570077743769305, 0.03767334120232446, 0.03990905807415146, 0.029887845341459607, 0.08744047087201123, 0.07415088476645737, 0.09084493959529549, 0.08819934032119725, 0.08030685500353152, 0.08636692260402556, 0.08220037379266854, 0.08618476270585873, 0.0793100462686469, 0.07970705398276512, 0.08040786279099976, 0.10168788291468223, 0.0678042567047018, 0.062257631934342306, 0.06126789432932478, 0.09469511708877743, 0.06100093788403449, 0.09989195416384677, 0.12559823362162914, 0.1934590252782814, 0.14879633176882545, 0.10468090123004059, 0.09681671153005122, 0.13119140210230074, 0.1259001201085519, 0.13680200705978374, 0.1159600415573675, 0.0043466551276287735, 0.0045573520021727765, 0.006200401435613512, 0.004181598901128014, 9.999999999998899e-05, 0.0004321769207031867, 9.999999999998899e-05, 9.999999999998899e-05, 0.019865735423349018, 0.05928894622009773, 0.07836470731518896, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05291610134458591, 0.0685672734034275, 0.04525962477331502, 0.0693952635897589, 0.03256963340998842, 0.05575082131684872, 0.052934686044794343, 0.050066551117941005, 0.06419266992750783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006751486159103481, 9.999999999998899e-05, 0.22076064086295288, 0.19292779423142947, 0.1949246778982069, 0.2055375872787616, 0.1891887693213281, 0.20719799485764223, 0.19987794665669245, 0.17872865963668627, 0.20410709867849375, 0.0499924140821949, 0.04248951764672215, 0.044002887861461004, 0.04316542280052382, 0.040431711405111814, 0.045994894632358396, 0.07323576829548695, 0.043978301031989964, 0.05228016543695735, 0.13748786635348842, 0.12734524761845445, 0.1371824736802677, 0.14123728676128777, 0.14111117719599187, 0.1301036820979813, 0.1502991736570901, 0.14857817146350805, 0.13379870500734337, 0.17179452789269778, 0.16053101358018806, 0.17601792045489073, 0.16779216604067237, 0.18219270731477366, 0.1771397761087088, 0.16589477000652952, 0.1737564532395145, 0.15373949700106349, 0.11530984695382196, 0.10379133602030055, 0.11846041247647576, 0.11238526487232026, 0.13613461110043923, 0.11686832982564688, 0.1062687497213104, 0.12370914427083413, 0.12288504700390845, 0.1410537460641642, 0.1624004463729063, 0.15832265318996164, 0.16015606671061455, 0.14540284729332476, 0.16239851576324182, 0.16208897138337164, 0.17366582176681422, 0.1827436251122997, 0.1419043302967753, 0.14583427757663214, 0.14255836302452285, 0.14097097487446375, 0.14407055993265572, 0.15277430461690622, 0.1409167904584343, 0.14170877485785238, 0.16202973964970713, 0.1839876985916229, 0.16676122282529482, 0.16653523133629256, 0.1596064298130523, 0.15116693310642093, 0.14117159630874065, 0.16135421757585733, 0.16336796622415917, 0.1764432645092373, 0.15763662348314433, 0.15829501024355908, 0.16484338310960156, 0.15028461511242364, 0.18878336469618318, 0.16040618823041475, 0.16851208646218852, 0.1733340498462227, 0.2028082191379238, 0.17569705062667074, 0.19092549448045337, 0.1758142838995218, 0.18681106617361698, 0.2135300087787373, 0.18380441197536757, 0.17590836880712135, 0.1892907271098785, 0.2056491900504991, 0.05837355487196638, 0.055302715793391743, 0.0658413189493352, 0.05214875716375955, 0.059331056702424556, 0.05664145874149418, 0.0753069506580899, 0.054979332660546554, 0.06076238490577657]}, "mutation_prompt": null}
{"id": "428cdad8-eab8-44aa-906b-f35e043bf418", "solution": "import numpy as np\n\nclass DynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "DynamicPitchHarmonySearch", "description": "Introducing dynamic pitch adjustment in harmony search to enhance the exploration capability.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bf2d9a-444a-428a-87f9-2cd3205483e2", "metadata": {"aucs": [0.1777300150683041, 0.17586825352018298, 0.1702461320249753, 0.17146445547710487, 0.18812956999856378, 0.17429876629723895, 0.1785280678067116, 0.1627160184474955, 0.1900115555033699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206162456976803, 0.04652488648762387, 0.0368305184189861, 0.04101453894103069, 0.037309034550568665, 0.039475462071603795, 0.05282638848491783, 0.06700236190978393, 0.05869139526097911, 0.025969175796351607, 0.032493469186012036, 0.04812888002158344, 0.027789542341995377, 0.0492505728613607, 0.0570077743769305, 0.03767334120232446, 0.03990905807415146, 0.029887845341459607, 0.08744047087201123, 0.07415088476645737, 0.09084493959529549, 0.08819934032119725, 0.08030685500353152, 0.08636692260402556, 0.08220037379266854, 0.08618476270585873, 0.0793100462686469, 0.07970705398276512, 0.08040786279099976, 0.10168788291468223, 0.0678042567047018, 0.062257631934342306, 0.06126789432932478, 0.09469511708877743, 0.06100093788403449, 0.09989195416384677, 0.12559823362162914, 0.1934590252782814, 0.14879633176882545, 0.10468090123004059, 0.09681671153005122, 0.13119140210230074, 0.1259001201085519, 0.13680200705978374, 0.1159600415573675, 0.0043466551276287735, 0.0045573520021727765, 0.006200401435613512, 0.004181598901128014, 9.999999999998899e-05, 0.0004321769207031867, 9.999999999998899e-05, 9.999999999998899e-05, 0.019865735423349018, 0.05928894622009773, 0.07836470731518896, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05291610134458591, 0.0685672734034275, 0.04525962477331502, 0.0693952635897589, 0.03256963340998842, 0.05575082131684872, 0.052934686044794343, 0.050066551117941005, 0.06419266992750783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006751486159103481, 9.999999999998899e-05, 0.22076064086295288, 0.19292779423142947, 0.1949246778982069, 0.2055375872787616, 0.1891887693213281, 0.20719799485764223, 0.19987794665669245, 0.17872865963668627, 0.20410709867849375, 0.0499924140821949, 0.04248951764672215, 0.044002887861461004, 0.04316542280052382, 0.040431711405111814, 0.045994894632358396, 0.07323576829548695, 0.043978301031989964, 0.05228016543695735, 0.13748786635348842, 0.12734524761845445, 0.1371824736802677, 0.14123728676128777, 0.14111117719599187, 0.1301036820979813, 0.1502991736570901, 0.14857817146350805, 0.13379870500734337, 0.17179452789269778, 0.16053101358018806, 0.17601792045489073, 0.16779216604067237, 0.18219270731477366, 0.1771397761087088, 0.16589477000652952, 0.1737564532395145, 0.15373949700106349, 0.11530984695382196, 0.10379133602030055, 0.11846041247647576, 0.11238526487232026, 0.13613461110043923, 0.11686832982564688, 0.1062687497213104, 0.12370914427083413, 0.12288504700390845, 0.1410537460641642, 0.1624004463729063, 0.15832265318996164, 0.16015606671061455, 0.14540284729332476, 0.16239851576324182, 0.16208897138337164, 0.17366582176681422, 0.1827436251122997, 0.1419043302967753, 0.14583427757663214, 0.14255836302452285, 0.14097097487446375, 0.14407055993265572, 0.15277430461690622, 0.1409167904584343, 0.14170877485785238, 0.16202973964970713, 0.1839876985916229, 0.16676122282529482, 0.16653523133629256, 0.1596064298130523, 0.15116693310642093, 0.14117159630874065, 0.16135421757585733, 0.16336796622415917, 0.1764432645092373, 0.15763662348314433, 0.15829501024355908, 0.16484338310960156, 0.15028461511242364, 0.18878336469618318, 0.16040618823041475, 0.16851208646218852, 0.1733340498462227, 0.2028082191379238, 0.17569705062667074, 0.19092549448045337, 0.1758142838995218, 0.18681106617361698, 0.2135300087787373, 0.18380441197536757, 0.17590836880712135, 0.1892907271098785, 0.2056491900504991, 0.05837355487196638, 0.055302715793391743, 0.0658413189493352, 0.05214875716375955, 0.059331056702424556, 0.05664145874149418, 0.0753069506580899, 0.054979332660546554, 0.06076238490577657]}, "mutation_prompt": null}
{"id": "d2738257-5482-490e-bb28-ba0bdcb13696", "solution": "import numpy as np\n\nclass DynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "DynamicPitchHarmonySearch", "description": "Introducing dynamic pitch adjustment in harmony search to enhance the exploration capability.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bf2d9a-444a-428a-87f9-2cd3205483e2", "metadata": {"aucs": [0.1777300150683041, 0.17586825352018298, 0.1702461320249753, 0.17146445547710487, 0.18812956999856378, 0.17429876629723895, 0.1785280678067116, 0.1627160184474955, 0.1900115555033699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206162456976803, 0.04652488648762387, 0.0368305184189861, 0.04101453894103069, 0.037309034550568665, 0.039475462071603795, 0.05282638848491783, 0.06700236190978393, 0.05869139526097911, 0.025969175796351607, 0.032493469186012036, 0.04812888002158344, 0.027789542341995377, 0.0492505728613607, 0.0570077743769305, 0.03767334120232446, 0.03990905807415146, 0.029887845341459607, 0.08744047087201123, 0.07415088476645737, 0.09084493959529549, 0.08819934032119725, 0.08030685500353152, 0.08636692260402556, 0.08220037379266854, 0.08618476270585873, 0.0793100462686469, 0.07970705398276512, 0.08040786279099976, 0.10168788291468223, 0.0678042567047018, 0.062257631934342306, 0.06126789432932478, 0.09469511708877743, 0.06100093788403449, 0.09989195416384677, 0.12559823362162914, 0.1934590252782814, 0.14879633176882545, 0.10468090123004059, 0.09681671153005122, 0.13119140210230074, 0.1259001201085519, 0.13680200705978374, 0.1159600415573675, 0.0043466551276287735, 0.0045573520021727765, 0.006200401435613512, 0.004181598901128014, 9.999999999998899e-05, 0.0004321769207031867, 9.999999999998899e-05, 9.999999999998899e-05, 0.019865735423349018, 0.05928894622009773, 0.07836470731518896, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05291610134458591, 0.0685672734034275, 0.04525962477331502, 0.0693952635897589, 0.03256963340998842, 0.05575082131684872, 0.052934686044794343, 0.050066551117941005, 0.06419266992750783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006751486159103481, 9.999999999998899e-05, 0.22076064086295288, 0.19292779423142947, 0.1949246778982069, 0.2055375872787616, 0.1891887693213281, 0.20719799485764223, 0.19987794665669245, 0.17872865963668627, 0.20410709867849375, 0.0499924140821949, 0.04248951764672215, 0.044002887861461004, 0.04316542280052382, 0.040431711405111814, 0.045994894632358396, 0.07323576829548695, 0.043978301031989964, 0.05228016543695735, 0.13748786635348842, 0.12734524761845445, 0.1371824736802677, 0.14123728676128777, 0.14111117719599187, 0.1301036820979813, 0.1502991736570901, 0.14857817146350805, 0.13379870500734337, 0.17179452789269778, 0.16053101358018806, 0.17601792045489073, 0.16779216604067237, 0.18219270731477366, 0.1771397761087088, 0.16589477000652952, 0.1737564532395145, 0.15373949700106349, 0.11530984695382196, 0.10379133602030055, 0.11846041247647576, 0.11238526487232026, 0.13613461110043923, 0.11686832982564688, 0.1062687497213104, 0.12370914427083413, 0.12288504700390845, 0.1410537460641642, 0.1624004463729063, 0.15832265318996164, 0.16015606671061455, 0.14540284729332476, 0.16239851576324182, 0.16208897138337164, 0.17366582176681422, 0.1827436251122997, 0.1419043302967753, 0.14583427757663214, 0.14255836302452285, 0.14097097487446375, 0.14407055993265572, 0.15277430461690622, 0.1409167904584343, 0.14170877485785238, 0.16202973964970713, 0.1839876985916229, 0.16676122282529482, 0.16653523133629256, 0.1596064298130523, 0.15116693310642093, 0.14117159630874065, 0.16135421757585733, 0.16336796622415917, 0.1764432645092373, 0.15763662348314433, 0.15829501024355908, 0.16484338310960156, 0.15028461511242364, 0.18878336469618318, 0.16040618823041475, 0.16851208646218852, 0.1733340498462227, 0.2028082191379238, 0.17569705062667074, 0.19092549448045337, 0.1758142838995218, 0.18681106617361698, 0.2135300087787373, 0.18380441197536757, 0.17590836880712135, 0.1892907271098785, 0.2056491900504991, 0.05837355487196638, 0.055302715793391743, 0.0658413189493352, 0.05214875716375955, 0.059331056702424556, 0.05664145874149418, 0.0753069506580899, 0.054979332660546554, 0.06076238490577657]}, "mutation_prompt": null}
{"id": "8b9fb307-f57b-4dbe-bcc7-317ba1adb6c7", "solution": "import numpy as np\n\nclass RefinedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "RefinedDynamicPitchHarmonySearch", "description": "Introducing dynamic pitch adjustment and opposition-based learning in harmony search to enhance exploration and exploitation balance.", "configspace": "", "generation": 25, "fitness": 0.09335440062308137, "feedback": "The algorithm RefinedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "15bf2d9a-444a-428a-87f9-2cd3205483e2", "metadata": {"aucs": [0.1777300150683041, 0.17586825352018298, 0.1702461320249753, 0.17146445547710487, 0.18812956999856378, 0.17429876629723895, 0.1785280678067116, 0.1627160184474955, 0.1900115555033699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206162456976803, 0.04652488648762387, 0.0368305184189861, 0.04101453894103069, 0.037309034550568665, 0.039475462071603795, 0.05282638848491783, 0.06700236190978393, 0.05869139526097911, 0.025969175796351607, 0.032493469186012036, 0.04812888002158344, 0.027789542341995377, 0.0492505728613607, 0.0570077743769305, 0.03767334120232446, 0.03990905807415146, 0.029887845341459607, 0.08744047087201123, 0.07415088476645737, 0.09084493959529549, 0.08819934032119725, 0.08030685500353152, 0.08636692260402556, 0.08220037379266854, 0.08618476270585873, 0.0793100462686469, 0.07970705398276512, 0.08040786279099976, 0.10168788291468223, 0.0678042567047018, 0.062257631934342306, 0.06126789432932478, 0.09469511708877743, 0.06100093788403449, 0.09989195416384677, 0.12559823362162914, 0.1934590252782814, 0.14879633176882545, 0.10468090123004059, 0.09681671153005122, 0.13119140210230074, 0.1259001201085519, 0.13680200705978374, 0.1159600415573675, 0.0043466551276287735, 0.0045573520021727765, 0.006200401435613512, 0.004181598901128014, 9.999999999998899e-05, 0.0004321769207031867, 9.999999999998899e-05, 9.999999999998899e-05, 0.019865735423349018, 0.05928894622009773, 0.07836470731518896, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05291610134458591, 0.0685672734034275, 0.04525962477331502, 0.0693952635897589, 0.03256963340998842, 0.05575082131684872, 0.052934686044794343, 0.050066551117941005, 0.06419266992750783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006751486159103481, 9.999999999998899e-05, 0.22076064086295288, 0.19292779423142947, 0.1949246778982069, 0.2055375872787616, 0.1891887693213281, 0.20719799485764223, 0.19987794665669245, 0.17872865963668627, 0.20410709867849375, 0.0499924140821949, 0.04248951764672215, 0.044002887861461004, 0.04316542280052382, 0.040431711405111814, 0.045994894632358396, 0.07323576829548695, 0.043978301031989964, 0.05228016543695735, 0.13748786635348842, 0.12734524761845445, 0.1371824736802677, 0.14123728676128777, 0.14111117719599187, 0.1301036820979813, 0.1502991736570901, 0.14857817146350805, 0.13379870500734337, 0.17179452789269778, 0.16053101358018806, 0.17601792045489073, 0.16779216604067237, 0.18219270731477366, 0.1771397761087088, 0.16589477000652952, 0.1737564532395145, 0.15373949700106349, 0.11530984695382196, 0.10379133602030055, 0.11846041247647576, 0.11238526487232026, 0.13613461110043923, 0.11686832982564688, 0.1062687497213104, 0.12370914427083413, 0.12288504700390845, 0.1410537460641642, 0.1624004463729063, 0.15832265318996164, 0.16015606671061455, 0.14540284729332476, 0.16239851576324182, 0.16208897138337164, 0.17366582176681422, 0.1827436251122997, 0.1419043302967753, 0.14583427757663214, 0.14255836302452285, 0.14097097487446375, 0.14407055993265572, 0.15277430461690622, 0.1409167904584343, 0.14170877485785238, 0.16202973964970713, 0.1839876985916229, 0.16676122282529482, 0.16653523133629256, 0.1596064298130523, 0.15116693310642093, 0.14117159630874065, 0.16135421757585733, 0.16336796622415917, 0.1764432645092373, 0.15763662348314433, 0.15829501024355908, 0.16484338310960156, 0.15028461511242364, 0.18878336469618318, 0.16040618823041475, 0.16851208646218852, 0.1733340498462227, 0.2028082191379238, 0.17569705062667074, 0.19092549448045337, 0.1758142838995218, 0.18681106617361698, 0.2135300087787373, 0.18380441197536757, 0.17590836880712135, 0.1892907271098785, 0.2056491900504991, 0.05837355487196638, 0.055302715793391743, 0.0658413189493352, 0.05214875716375955, 0.059331056702424556, 0.05664145874149418, 0.0753069506580899, 0.054979332660546554, 0.06076238490577657]}, "mutation_prompt": null}
{"id": "3907652f-0e59-4df8-80bf-30a8852fd479", "solution": "import numpy as np\n\nclass DynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "DynamicPitchHarmonySearch", "description": "Introducing dynamic pitch adjustment in harmony search to enhance the exploration capability.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "15bf2d9a-444a-428a-87f9-2cd3205483e2", "metadata": {"aucs": [0.1777300150683041, 0.17586825352018298, 0.1702461320249753, 0.17146445547710487, 0.18812956999856378, 0.17429876629723895, 0.1785280678067116, 0.1627160184474955, 0.1900115555033699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206162456976803, 0.04652488648762387, 0.0368305184189861, 0.04101453894103069, 0.037309034550568665, 0.039475462071603795, 0.05282638848491783, 0.06700236190978393, 0.05869139526097911, 0.025969175796351607, 0.032493469186012036, 0.04812888002158344, 0.027789542341995377, 0.0492505728613607, 0.0570077743769305, 0.03767334120232446, 0.03990905807415146, 0.029887845341459607, 0.08744047087201123, 0.07415088476645737, 0.09084493959529549, 0.08819934032119725, 0.08030685500353152, 0.08636692260402556, 0.08220037379266854, 0.08618476270585873, 0.0793100462686469, 0.07970705398276512, 0.08040786279099976, 0.10168788291468223, 0.0678042567047018, 0.062257631934342306, 0.06126789432932478, 0.09469511708877743, 0.06100093788403449, 0.09989195416384677, 0.12559823362162914, 0.1934590252782814, 0.14879633176882545, 0.10468090123004059, 0.09681671153005122, 0.13119140210230074, 0.1259001201085519, 0.13680200705978374, 0.1159600415573675, 0.0043466551276287735, 0.0045573520021727765, 0.006200401435613512, 0.004181598901128014, 9.999999999998899e-05, 0.0004321769207031867, 9.999999999998899e-05, 9.999999999998899e-05, 0.019865735423349018, 0.05928894622009773, 0.07836470731518896, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05291610134458591, 0.0685672734034275, 0.04525962477331502, 0.0693952635897589, 0.03256963340998842, 0.05575082131684872, 0.052934686044794343, 0.050066551117941005, 0.06419266992750783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006751486159103481, 9.999999999998899e-05, 0.22076064086295288, 0.19292779423142947, 0.1949246778982069, 0.2055375872787616, 0.1891887693213281, 0.20719799485764223, 0.19987794665669245, 0.17872865963668627, 0.20410709867849375, 0.0499924140821949, 0.04248951764672215, 0.044002887861461004, 0.04316542280052382, 0.040431711405111814, 0.045994894632358396, 0.07323576829548695, 0.043978301031989964, 0.05228016543695735, 0.13748786635348842, 0.12734524761845445, 0.1371824736802677, 0.14123728676128777, 0.14111117719599187, 0.1301036820979813, 0.1502991736570901, 0.14857817146350805, 0.13379870500734337, 0.17179452789269778, 0.16053101358018806, 0.17601792045489073, 0.16779216604067237, 0.18219270731477366, 0.1771397761087088, 0.16589477000652952, 0.1737564532395145, 0.15373949700106349, 0.11530984695382196, 0.10379133602030055, 0.11846041247647576, 0.11238526487232026, 0.13613461110043923, 0.11686832982564688, 0.1062687497213104, 0.12370914427083413, 0.12288504700390845, 0.1410537460641642, 0.1624004463729063, 0.15832265318996164, 0.16015606671061455, 0.14540284729332476, 0.16239851576324182, 0.16208897138337164, 0.17366582176681422, 0.1827436251122997, 0.1419043302967753, 0.14583427757663214, 0.14255836302452285, 0.14097097487446375, 0.14407055993265572, 0.15277430461690622, 0.1409167904584343, 0.14170877485785238, 0.16202973964970713, 0.1839876985916229, 0.16676122282529482, 0.16653523133629256, 0.1596064298130523, 0.15116693310642093, 0.14117159630874065, 0.16135421757585733, 0.16336796622415917, 0.1764432645092373, 0.15763662348314433, 0.15829501024355908, 0.16484338310960156, 0.15028461511242364, 0.18878336469618318, 0.16040618823041475, 0.16851208646218852, 0.1733340498462227, 0.2028082191379238, 0.17569705062667074, 0.19092549448045337, 0.1758142838995218, 0.18681106617361698, 0.2135300087787373, 0.18380441197536757, 0.17590836880712135, 0.1892907271098785, 0.2056491900504991, 0.05837355487196638, 0.055302715793391743, 0.0658413189493352, 0.05214875716375955, 0.059331056702424556, 0.05664145874149418, 0.0753069506580899, 0.054979332660546554, 0.06076238490577657]}, "mutation_prompt": null}
{"id": "85b3272c-cd5c-4b52-abea-9dc6118e21e2", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhancing exploration by incorporating opposition-based learning in harmony search with adaptive pitch adjustment.", "configspace": "", "generation": 27, "fitness": 0.09335440062308137, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "15bf2d9a-444a-428a-87f9-2cd3205483e2", "metadata": {"aucs": [0.1777300150683041, 0.17586825352018298, 0.1702461320249753, 0.17146445547710487, 0.18812956999856378, 0.17429876629723895, 0.1785280678067116, 0.1627160184474955, 0.1900115555033699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206162456976803, 0.04652488648762387, 0.0368305184189861, 0.04101453894103069, 0.037309034550568665, 0.039475462071603795, 0.05282638848491783, 0.06700236190978393, 0.05869139526097911, 0.025969175796351607, 0.032493469186012036, 0.04812888002158344, 0.027789542341995377, 0.0492505728613607, 0.0570077743769305, 0.03767334120232446, 0.03990905807415146, 0.029887845341459607, 0.08744047087201123, 0.07415088476645737, 0.09084493959529549, 0.08819934032119725, 0.08030685500353152, 0.08636692260402556, 0.08220037379266854, 0.08618476270585873, 0.0793100462686469, 0.07970705398276512, 0.08040786279099976, 0.10168788291468223, 0.0678042567047018, 0.062257631934342306, 0.06126789432932478, 0.09469511708877743, 0.06100093788403449, 0.09989195416384677, 0.12559823362162914, 0.1934590252782814, 0.14879633176882545, 0.10468090123004059, 0.09681671153005122, 0.13119140210230074, 0.1259001201085519, 0.13680200705978374, 0.1159600415573675, 0.0043466551276287735, 0.0045573520021727765, 0.006200401435613512, 0.004181598901128014, 9.999999999998899e-05, 0.0004321769207031867, 9.999999999998899e-05, 9.999999999998899e-05, 0.019865735423349018, 0.05928894622009773, 0.07836470731518896, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05291610134458591, 0.0685672734034275, 0.04525962477331502, 0.0693952635897589, 0.03256963340998842, 0.05575082131684872, 0.052934686044794343, 0.050066551117941005, 0.06419266992750783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006751486159103481, 9.999999999998899e-05, 0.22076064086295288, 0.19292779423142947, 0.1949246778982069, 0.2055375872787616, 0.1891887693213281, 0.20719799485764223, 0.19987794665669245, 0.17872865963668627, 0.20410709867849375, 0.0499924140821949, 0.04248951764672215, 0.044002887861461004, 0.04316542280052382, 0.040431711405111814, 0.045994894632358396, 0.07323576829548695, 0.043978301031989964, 0.05228016543695735, 0.13748786635348842, 0.12734524761845445, 0.1371824736802677, 0.14123728676128777, 0.14111117719599187, 0.1301036820979813, 0.1502991736570901, 0.14857817146350805, 0.13379870500734337, 0.17179452789269778, 0.16053101358018806, 0.17601792045489073, 0.16779216604067237, 0.18219270731477366, 0.1771397761087088, 0.16589477000652952, 0.1737564532395145, 0.15373949700106349, 0.11530984695382196, 0.10379133602030055, 0.11846041247647576, 0.11238526487232026, 0.13613461110043923, 0.11686832982564688, 0.1062687497213104, 0.12370914427083413, 0.12288504700390845, 0.1410537460641642, 0.1624004463729063, 0.15832265318996164, 0.16015606671061455, 0.14540284729332476, 0.16239851576324182, 0.16208897138337164, 0.17366582176681422, 0.1827436251122997, 0.1419043302967753, 0.14583427757663214, 0.14255836302452285, 0.14097097487446375, 0.14407055993265572, 0.15277430461690622, 0.1409167904584343, 0.14170877485785238, 0.16202973964970713, 0.1839876985916229, 0.16676122282529482, 0.16653523133629256, 0.1596064298130523, 0.15116693310642093, 0.14117159630874065, 0.16135421757585733, 0.16336796622415917, 0.1764432645092373, 0.15763662348314433, 0.15829501024355908, 0.16484338310960156, 0.15028461511242364, 0.18878336469618318, 0.16040618823041475, 0.16851208646218852, 0.1733340498462227, 0.2028082191379238, 0.17569705062667074, 0.19092549448045337, 0.1758142838995218, 0.18681106617361698, 0.2135300087787373, 0.18380441197536757, 0.17590836880712135, 0.1892907271098785, 0.2056491900504991, 0.05837355487196638, 0.055302715793391743, 0.0658413189493352, 0.05214875716375955, 0.059331056702424556, 0.05664145874149418, 0.0753069506580899, 0.054979332660546554, 0.06076238490577657]}, "mutation_prompt": null}
{"id": "57348f51-3881-4a3b-8fc2-f8e6a62dc7b3", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch(DynamicPitchHarmonySearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.5\n        self.crossover_rate = 0.9\n\n    def mutation(self, harmony):\n        mutant_harmony = np.clip(harmony + self.mutation_rate * (np.random.uniform(self.lower_bound, self.upper_bound, self.dim) - harmony), self.lower_bound, self.upper_bound)\n        return mutant_harmony\n\n    def crossover(self, harmony, other_harmony):\n        mask = np.random.choice([True, False], self.dim, p=[self.crossover_rate, 1 - self.crossover_rate])\n        new_harmony = np.where(mask, harmony, other_harmony)\n        return new_harmony\n\n    def harmony_search(self):\n        harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n        best_solution = np.copy(harmony_memory[0])\n        best_fitness = func(best_solution)\n        pitch = self.pitch_range\n\n        for _ in range(self.budget):\n            new_harmony = np.mean(harmony_memory, axis=0)\n            new_harmony = adjust_value(new_harmony)\n            new_fitness = func(new_harmony)\n\n            if new_fitness < best_fitness:\n                best_solution = np.copy(new_harmony)\n                best_fitness = new_fitness\n\n            index = np.random.randint(self.dim)\n            new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                   min(self.upper_bound, new_harmony[index] + pitch))\n\n            new_harmony_opposite = opposition_based_learning(new_harmony)\n            new_fitness_opposite = func(new_harmony_opposite)\n\n            if new_fitness_opposite < best_fitness:\n                best_solution = np.copy(new_harmony_opposite)\n                best_fitness = new_fitness_opposite\n\n            mutant_harmony = self.mutation(new_harmony)\n            crossover_harmony = self.crossover(new_harmony, harmony_memory[np.random.randint(self.budget)])\n\n            harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n            harmony_memory[np.argmax([func(m) for m in [mutant_harmony, crossover_harmony]])] = mutant_harmony if func(\n                mutant_harmony) < func(crossover_harmony) else crossover_harmony\n\n            pitch = adjust_pitch(pitch)\n\n        return best_solution", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhancing the diversity of solutions by incorporating differential evolution to introduce mutation and crossover operations.", "configspace": "", "generation": 28, "fitness": 0.09335440062308137, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "15bf2d9a-444a-428a-87f9-2cd3205483e2", "metadata": {"aucs": [0.1777300150683041, 0.17586825352018298, 0.1702461320249753, 0.17146445547710487, 0.18812956999856378, 0.17429876629723895, 0.1785280678067116, 0.1627160184474955, 0.1900115555033699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206162456976803, 0.04652488648762387, 0.0368305184189861, 0.04101453894103069, 0.037309034550568665, 0.039475462071603795, 0.05282638848491783, 0.06700236190978393, 0.05869139526097911, 0.025969175796351607, 0.032493469186012036, 0.04812888002158344, 0.027789542341995377, 0.0492505728613607, 0.0570077743769305, 0.03767334120232446, 0.03990905807415146, 0.029887845341459607, 0.08744047087201123, 0.07415088476645737, 0.09084493959529549, 0.08819934032119725, 0.08030685500353152, 0.08636692260402556, 0.08220037379266854, 0.08618476270585873, 0.0793100462686469, 0.07970705398276512, 0.08040786279099976, 0.10168788291468223, 0.0678042567047018, 0.062257631934342306, 0.06126789432932478, 0.09469511708877743, 0.06100093788403449, 0.09989195416384677, 0.12559823362162914, 0.1934590252782814, 0.14879633176882545, 0.10468090123004059, 0.09681671153005122, 0.13119140210230074, 0.1259001201085519, 0.13680200705978374, 0.1159600415573675, 0.0043466551276287735, 0.0045573520021727765, 0.006200401435613512, 0.004181598901128014, 9.999999999998899e-05, 0.0004321769207031867, 9.999999999998899e-05, 9.999999999998899e-05, 0.019865735423349018, 0.05928894622009773, 0.07836470731518896, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05291610134458591, 0.0685672734034275, 0.04525962477331502, 0.0693952635897589, 0.03256963340998842, 0.05575082131684872, 0.052934686044794343, 0.050066551117941005, 0.06419266992750783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006751486159103481, 9.999999999998899e-05, 0.22076064086295288, 0.19292779423142947, 0.1949246778982069, 0.2055375872787616, 0.1891887693213281, 0.20719799485764223, 0.19987794665669245, 0.17872865963668627, 0.20410709867849375, 0.0499924140821949, 0.04248951764672215, 0.044002887861461004, 0.04316542280052382, 0.040431711405111814, 0.045994894632358396, 0.07323576829548695, 0.043978301031989964, 0.05228016543695735, 0.13748786635348842, 0.12734524761845445, 0.1371824736802677, 0.14123728676128777, 0.14111117719599187, 0.1301036820979813, 0.1502991736570901, 0.14857817146350805, 0.13379870500734337, 0.17179452789269778, 0.16053101358018806, 0.17601792045489073, 0.16779216604067237, 0.18219270731477366, 0.1771397761087088, 0.16589477000652952, 0.1737564532395145, 0.15373949700106349, 0.11530984695382196, 0.10379133602030055, 0.11846041247647576, 0.11238526487232026, 0.13613461110043923, 0.11686832982564688, 0.1062687497213104, 0.12370914427083413, 0.12288504700390845, 0.1410537460641642, 0.1624004463729063, 0.15832265318996164, 0.16015606671061455, 0.14540284729332476, 0.16239851576324182, 0.16208897138337164, 0.17366582176681422, 0.1827436251122997, 0.1419043302967753, 0.14583427757663214, 0.14255836302452285, 0.14097097487446375, 0.14407055993265572, 0.15277430461690622, 0.1409167904584343, 0.14170877485785238, 0.16202973964970713, 0.1839876985916229, 0.16676122282529482, 0.16653523133629256, 0.1596064298130523, 0.15116693310642093, 0.14117159630874065, 0.16135421757585733, 0.16336796622415917, 0.1764432645092373, 0.15763662348314433, 0.15829501024355908, 0.16484338310960156, 0.15028461511242364, 0.18878336469618318, 0.16040618823041475, 0.16851208646218852, 0.1733340498462227, 0.2028082191379238, 0.17569705062667074, 0.19092549448045337, 0.1758142838995218, 0.18681106617361698, 0.2135300087787373, 0.18380441197536757, 0.17590836880712135, 0.1892907271098785, 0.2056491900504991, 0.05837355487196638, 0.055302715793391743, 0.0658413189493352, 0.05214875716375955, 0.059331056702424556, 0.05664145874149418, 0.0753069506580899, 0.054979332660546554, 0.06076238490577657]}, "mutation_prompt": null}
{"id": "8df559b8-ca18-48b9-92a1-1c1aae944f1c", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Implement opposition-based learning for all solutions in the harmony memory to exploit the search space more effectively.", "configspace": "", "generation": 29, "fitness": 0.09406253990370127, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "15bf2d9a-444a-428a-87f9-2cd3205483e2", "metadata": {"aucs": [0.16391323853320805, 0.17397436481687722, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115764431755, 0.1782649645589678, 0.18969446924738254, 0.16558685945724594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12657542426330493, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.05928894622009773, 0.0658878091124292, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251522990839523, 0.20461495583415212, 0.1916963937089292, 0.18757296395589795, 0.19490172105502612, 0.1937561591847129, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.16407837215291787, 0.15995427995171607, 0.16689006410620622, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.1787738963586495, 0.09920885503356691, 0.11143281712518294, 0.1049453653754372, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391021969285685, 0.11580717687280051, 0.1587483059598962, 0.1501634669277746, 0.14692580659434828, 0.1595097874712479, 0.19431484419960365, 0.16929527287472723, 0.16119903619765097, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012058067181, 0.16081261879660358, 0.1998690319433546, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.18054357320265213, 0.18205638689149295, 0.17073644026235923, 0.05156741835427914, 0.05745133201902752, 0.05168488103078306, 0.04821191101582867, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049489313354025954, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "dec92547-b90b-4a36-ae20-d938d8be014d", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Implement opposition-based learning for all solutions in the harmony memory to exploit the search space more effectively.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "8df559b8-ca18-48b9-92a1-1c1aae944f1c", "metadata": {"aucs": [0.16391323853320805, 0.17397436481687722, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115764431755, 0.1782649645589678, 0.18969446924738254, 0.16558685945724594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12657542426330493, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.05928894622009773, 0.0658878091124292, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251522990839523, 0.20461495583415212, 0.1916963937089292, 0.18757296395589795, 0.19490172105502612, 0.1937561591847129, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.16407837215291787, 0.15995427995171607, 0.16689006410620622, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.1787738963586495, 0.09920885503356691, 0.11143281712518294, 0.1049453653754372, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391021969285685, 0.11580717687280051, 0.1587483059598962, 0.1501634669277746, 0.14692580659434828, 0.1595097874712479, 0.19431484419960365, 0.16929527287472723, 0.16119903619765097, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012058067181, 0.16081261879660358, 0.1998690319433546, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.18054357320265213, 0.18205638689149295, 0.17073644026235923, 0.05156741835427914, 0.05745133201902752, 0.05168488103078306, 0.04821191101582867, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049489313354025954, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "431013b9-1f88-4f73-8724-9d74edc1bf40", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adaptation_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1) * self.pitch_adaptation_rate))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance the harmony memory update strategy by incorporating a self-adaptive mechanism to adjust pitch dynamically during optimization.", "configspace": "", "generation": 31, "fitness": 0.09406253990370127, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "8df559b8-ca18-48b9-92a1-1c1aae944f1c", "metadata": {"aucs": [0.16391323853320805, 0.17397436481687722, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115764431755, 0.1782649645589678, 0.18969446924738254, 0.16558685945724594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12657542426330493, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.05928894622009773, 0.0658878091124292, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251522990839523, 0.20461495583415212, 0.1916963937089292, 0.18757296395589795, 0.19490172105502612, 0.1937561591847129, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.16407837215291787, 0.15995427995171607, 0.16689006410620622, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.1787738963586495, 0.09920885503356691, 0.11143281712518294, 0.1049453653754372, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391021969285685, 0.11580717687280051, 0.1587483059598962, 0.1501634669277746, 0.14692580659434828, 0.1595097874712479, 0.19431484419960365, 0.16929527287472723, 0.16119903619765097, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012058067181, 0.16081261879660358, 0.1998690319433546, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.18054357320265213, 0.18205638689149295, 0.17073644026235923, 0.05156741835427914, 0.05745133201902752, 0.05168488103078306, 0.04821191101582867, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049489313354025954, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "a009e5cd-0a2f-4e66-97e6-b9b98bab5b73", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            if improvement:\n                return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n            else:\n                return max(0.001, pitch / np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch, new_fitness_opposite < best_fitness)\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Introduce dynamic pitch adjustment based on solution improvement to enhance exploration and exploitation balance.", "configspace": "", "generation": 32, "fitness": 0.09406253990370127, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "8df559b8-ca18-48b9-92a1-1c1aae944f1c", "metadata": {"aucs": [0.16391323853320805, 0.17397436481687722, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115764431755, 0.1782649645589678, 0.18969446924738254, 0.16558685945724594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12657542426330493, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.05928894622009773, 0.0658878091124292, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251522990839523, 0.20461495583415212, 0.1916963937089292, 0.18757296395589795, 0.19490172105502612, 0.1937561591847129, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.16407837215291787, 0.15995427995171607, 0.16689006410620622, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.1787738963586495, 0.09920885503356691, 0.11143281712518294, 0.1049453653754372, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391021969285685, 0.11580717687280051, 0.1587483059598962, 0.1501634669277746, 0.14692580659434828, 0.1595097874712479, 0.19431484419960365, 0.16929527287472723, 0.16119903619765097, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012058067181, 0.16081261879660358, 0.1998690319433546, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.18054357320265213, 0.18205638689149295, 0.17073644026235923, 0.05156741835427914, 0.05745133201902752, 0.05168488103078306, 0.04821191101582867, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049489313354025954, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "1089feae-f6e6-47f7-9569-f9fb1c1486e4", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Implement opposition-based learning for all solutions in the harmony memory to exploit the search space more effectively.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "8df559b8-ca18-48b9-92a1-1c1aae944f1c", "metadata": {"aucs": [0.16391323853320805, 0.17397436481687722, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115764431755, 0.1782649645589678, 0.18969446924738254, 0.16558685945724594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12657542426330493, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.05928894622009773, 0.0658878091124292, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251522990839523, 0.20461495583415212, 0.1916963937089292, 0.18757296395589795, 0.19490172105502612, 0.1937561591847129, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.16407837215291787, 0.15995427995171607, 0.16689006410620622, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.1787738963586495, 0.09920885503356691, 0.11143281712518294, 0.1049453653754372, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391021969285685, 0.11580717687280051, 0.1587483059598962, 0.1501634669277746, 0.14692580659434828, 0.1595097874712479, 0.19431484419960365, 0.16929527287472723, 0.16119903619765097, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012058067181, 0.16081261879660358, 0.1998690319433546, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.18054357320265213, 0.18205638689149295, 0.17073644026235923, 0.05156741835427914, 0.05745133201902752, 0.05168488103078306, 0.04821191101582867, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049489313354025954, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "7d728988-3d6b-4398-93f1-5e2d7db4e9d3", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, fitness_change):\n            return max(0.001, pitch * np.exp(-fitness_change))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                fitness_change = abs(new_fitness_opposite - new_fitness)\n                pitch = adjust_pitch(pitch, fitness_change)\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Improve the pitch adjustment strategy by dynamically adapting the pitch range based on the fitness landscape.", "configspace": "", "generation": 34, "fitness": 0.09406253990370127, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "8df559b8-ca18-48b9-92a1-1c1aae944f1c", "metadata": {"aucs": [0.16391323853320805, 0.17397436481687722, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115764431755, 0.1782649645589678, 0.18969446924738254, 0.16558685945724594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12657542426330493, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.05928894622009773, 0.0658878091124292, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251522990839523, 0.20461495583415212, 0.1916963937089292, 0.18757296395589795, 0.19490172105502612, 0.1937561591847129, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.16407837215291787, 0.15995427995171607, 0.16689006410620622, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.1787738963586495, 0.09920885503356691, 0.11143281712518294, 0.1049453653754372, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391021969285685, 0.11580717687280051, 0.1587483059598962, 0.1501634669277746, 0.14692580659434828, 0.1595097874712479, 0.19431484419960365, 0.16929527287472723, 0.16119903619765097, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012058067181, 0.16081261879660358, 0.1998690319433546, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.18054357320265213, 0.18205638689149295, 0.17073644026235923, 0.05156741835427914, 0.05745133201902752, 0.05168488103078306, 0.04821191101582867, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049489313354025954, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "a895ba9d-085b-43d5-9c60-1768edd7432f", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Implement opposition-based learning for all solutions in the harmony memory to exploit the search space more effectively.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "8df559b8-ca18-48b9-92a1-1c1aae944f1c", "metadata": {"aucs": [0.16391323853320805, 0.17397436481687722, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115764431755, 0.1782649645589678, 0.18969446924738254, 0.16558685945724594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12657542426330493, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.05928894622009773, 0.0658878091124292, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251522990839523, 0.20461495583415212, 0.1916963937089292, 0.18757296395589795, 0.19490172105502612, 0.1937561591847129, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.16407837215291787, 0.15995427995171607, 0.16689006410620622, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.1787738963586495, 0.09920885503356691, 0.11143281712518294, 0.1049453653754372, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391021969285685, 0.11580717687280051, 0.1587483059598962, 0.1501634669277746, 0.14692580659434828, 0.1595097874712479, 0.19431484419960365, 0.16929527287472723, 0.16119903619765097, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012058067181, 0.16081261879660358, 0.1998690319433546, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.18054357320265213, 0.18205638689149295, 0.17073644026235923, 0.05156741835427914, 0.05745133201902752, 0.05168488103078306, 0.04821191101582867, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049489313354025954, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "00cb329c-af20-48b6-bb5d-76e1d0273013", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Implement opposition-based learning for all solutions in the harmony memory to exploit the search space more effectively.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8df559b8-ca18-48b9-92a1-1c1aae944f1c", "metadata": {"aucs": [0.16391323853320805, 0.17397436481687722, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115764431755, 0.1782649645589678, 0.18969446924738254, 0.16558685945724594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12657542426330493, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.05928894622009773, 0.0658878091124292, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251522990839523, 0.20461495583415212, 0.1916963937089292, 0.18757296395589795, 0.19490172105502612, 0.1937561591847129, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.16407837215291787, 0.15995427995171607, 0.16689006410620622, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.1787738963586495, 0.09920885503356691, 0.11143281712518294, 0.1049453653754372, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391021969285685, 0.11580717687280051, 0.1587483059598962, 0.1501634669277746, 0.14692580659434828, 0.1595097874712479, 0.19431484419960365, 0.16929527287472723, 0.16119903619765097, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012058067181, 0.16081261879660358, 0.1998690319433546, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.18054357320265213, 0.18205638689149295, 0.17073644026235923, 0.05156741835427914, 0.05745133201902752, 0.05168488103078306, 0.04821191101582867, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049489313354025954, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "25f5cf31-26cc-4d42-aaa3-c5b197617506", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, best_fitness, new_fitness):\n            if new_fitness < best_fitness:\n                return max(0.001, pitch * 1.2)\n            return max(0.001, pitch * 0.9)\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = 0.1\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch, best_fitness, new_fitness)\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Improve exploration by introducing a dynamic adaptation of pitch adjustment based on the fitness landscape.", "configspace": "", "generation": 37, "fitness": 0.09406253990370127, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "8df559b8-ca18-48b9-92a1-1c1aae944f1c", "metadata": {"aucs": [0.16391323853320805, 0.17397436481687722, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115764431755, 0.1782649645589678, 0.18969446924738254, 0.16558685945724594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12657542426330493, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.05928894622009773, 0.0658878091124292, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251522990839523, 0.20461495583415212, 0.1916963937089292, 0.18757296395589795, 0.19490172105502612, 0.1937561591847129, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.16407837215291787, 0.15995427995171607, 0.16689006410620622, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.1787738963586495, 0.09920885503356691, 0.11143281712518294, 0.1049453653754372, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391021969285685, 0.11580717687280051, 0.1587483059598962, 0.1501634669277746, 0.14692580659434828, 0.1595097874712479, 0.19431484419960365, 0.16929527287472723, 0.16119903619765097, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012058067181, 0.16081261879660358, 0.1998690319433546, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.18054357320265213, 0.18205638689149295, 0.17073644026235923, 0.05156741835427914, 0.05745133201902752, 0.05168488103078306, 0.04821191101582867, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049489313354025954, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "34cb3f02-9f6b-41f4-980b-aac1154fd575", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Implement opposition-based learning for all solutions in the harmony memory to exploit the search space more effectively.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8df559b8-ca18-48b9-92a1-1c1aae944f1c", "metadata": {"aucs": [0.16391323853320805, 0.17397436481687722, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115764431755, 0.1782649645589678, 0.18969446924738254, 0.16558685945724594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12657542426330493, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.05928894622009773, 0.0658878091124292, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251522990839523, 0.20461495583415212, 0.1916963937089292, 0.18757296395589795, 0.19490172105502612, 0.1937561591847129, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.16407837215291787, 0.15995427995171607, 0.16689006410620622, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.1787738963586495, 0.09920885503356691, 0.11143281712518294, 0.1049453653754372, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391021969285685, 0.11580717687280051, 0.1587483059598962, 0.1501634669277746, 0.14692580659434828, 0.1595097874712479, 0.19431484419960365, 0.16929527287472723, 0.16119903619765097, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012058067181, 0.16081261879660358, 0.1998690319433546, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.18054357320265213, 0.18205638689149295, 0.17073644026235923, 0.05156741835427914, 0.05745133201902752, 0.05168488103078306, 0.04821191101582867, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049489313354025954, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "52142ed3-2037-4e67-a373-feb7559e17a5", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Implement opposition-based learning for all solutions in the harmony memory to exploit the search space more effectively.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "8df559b8-ca18-48b9-92a1-1c1aae944f1c", "metadata": {"aucs": [0.16391323853320805, 0.17397436481687722, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115764431755, 0.1782649645589678, 0.18969446924738254, 0.16558685945724594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12657542426330493, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.05928894622009773, 0.0658878091124292, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251522990839523, 0.20461495583415212, 0.1916963937089292, 0.18757296395589795, 0.19490172105502612, 0.1937561591847129, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.16407837215291787, 0.15995427995171607, 0.16689006410620622, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.1787738963586495, 0.09920885503356691, 0.11143281712518294, 0.1049453653754372, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391021969285685, 0.11580717687280051, 0.1587483059598962, 0.1501634669277746, 0.14692580659434828, 0.1595097874712479, 0.19431484419960365, 0.16929527287472723, 0.16119903619765097, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012058067181, 0.16081261879660358, 0.1998690319433546, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.18054357320265213, 0.18205638689149295, 0.17073644026235923, 0.05156741835427914, 0.05745133201902752, 0.05168488103078306, 0.04821191101582867, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049489313354025954, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "497fe79b-0e29-4f1a-9ce7-945c92bca78d", "solution": "import numpy as np\n\nclass DynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, current_fitness, best_fitness):\n            alpha = 0.1\n            if current_fitness < best_fitness:\n                return max(0.001, pitch * np.exp(-alpha))\n            else:\n                return min(5.0, pitch * np.exp(alpha))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.initial_pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch, new_fitness, best_fitness)\n\n            return best_solution\n\n        return harmony_search()", "name": "DynamicPitchHarmonySearch", "description": "Introduce a dynamic adaptation of pitch adjustment based on the objective function landscape to enhance exploration and exploitation balance.", "configspace": "", "generation": 40, "fitness": 0.09406253990370127, "feedback": "The algorithm DynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "8df559b8-ca18-48b9-92a1-1c1aae944f1c", "metadata": {"aucs": [0.16391323853320805, 0.17397436481687722, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115764431755, 0.1782649645589678, 0.18969446924738254, 0.16558685945724594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12657542426330493, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.05928894622009773, 0.0658878091124292, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251522990839523, 0.20461495583415212, 0.1916963937089292, 0.18757296395589795, 0.19490172105502612, 0.1937561591847129, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.16407837215291787, 0.15995427995171607, 0.16689006410620622, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.1787738963586495, 0.09920885503356691, 0.11143281712518294, 0.1049453653754372, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391021969285685, 0.11580717687280051, 0.1587483059598962, 0.1501634669277746, 0.14692580659434828, 0.1595097874712479, 0.19431484419960365, 0.16929527287472723, 0.16119903619765097, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012058067181, 0.16081261879660358, 0.1998690319433546, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.18054357320265213, 0.18205638689149295, 0.17073644026235923, 0.05156741835427914, 0.05745133201902752, 0.05168488103078306, 0.04821191101582867, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049489313354025954, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "a1817f1c-e9cc-4189-a2b8-55c1e775acb5", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.mutation_step = np.abs(self.upper_bound - self.lower_bound) / 10.0\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                mutation_range = min(self.mutation_step, np.abs(self.upper_bound - new_harmony[index]))\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - mutation_range),\n                                                       min(self.upper_bound, new_harmony[index] + mutation_range))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearchImproved", "description": "Improve the diversity of solutions by introducing mutation with adaptive step sizes based on individual fitness.", "configspace": "", "generation": 41, "fitness": 0.09403009267742346, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "8df559b8-ca18-48b9-92a1-1c1aae944f1c", "metadata": {"aucs": [0.16391323853320805, 0.17396869945861448, 0.16966485790420338, 0.18106969223834835, 0.16525149353412327, 0.16844108530927426, 0.17826501032997744, 0.18969668664119277, 0.16558711194363895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12699106968009344, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.05663112608933074, 0.0510285308282058, 0.05669140256955785, 0.062368979903791644, 0.08723993550413034, 0.06817888975250974, 0.05806085032097763, 0.05098196106669006, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251593375844658, 0.20461495583415212, 0.1916963937089292, 0.1875728583415005, 0.1949016914599031, 0.19375677241178224, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.14550219858600644, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074781307725516, 0.1640784678857815, 0.1599855744276909, 0.16689084729682457, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.1787739229792833, 0.09920885503356691, 0.11143346753084638, 0.10494581163459238, 0.13532787623183917, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391089655288466, 0.11580710734939803, 0.1589759354525635, 0.1522626130681154, 0.1469291289983441, 0.1595109027496494, 0.19436638109363935, 0.1692954858896918, 0.15348617321394453, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.17890396525175234, 0.16082661331540316, 0.19986948203157529, 0.15518559233353302, 0.20236672527595256, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619749313731957, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.1740635094803109, 0.19864617817503216, 0.18672413002387944, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.18055851532449685, 0.18205634995910047, 0.17073971569797908, 0.05156487965826384, 0.05785452384421297, 0.05168488103078306, 0.047926049358981815, 0.053562408438012965, 0.0679572384816598, 0.055684081915372, 0.049449797536186835, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "23722ecb-cb81-414c-a184-49a30838c04c", "solution": "import numpy as np\n\nclass DynamicPitchEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            if improvement:\n                return max(0.001, pitch * np.exp(1.1))\n            else:\n                return max(0.001, pitch * np.exp(0.9))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                improvement = new_fitness < best_fitness\n                pitch = adjust_pitch(pitch, improvement)\n\n            return best_solution\n\n        return harmony_search()", "name": "DynamicPitchEnhancedHarmonySearch", "description": "Introduce dynamic pitch adjustment based on individual performance to enhance exploration and exploitation balance.", "configspace": "", "generation": 42, "fitness": 0.09406253990370127, "feedback": "The algorithm DynamicPitchEnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "8df559b8-ca18-48b9-92a1-1c1aae944f1c", "metadata": {"aucs": [0.16391323853320805, 0.17397436481687722, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115764431755, 0.1782649645589678, 0.18969446924738254, 0.16558685945724594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12657542426330493, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.05928894622009773, 0.0658878091124292, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251522990839523, 0.20461495583415212, 0.1916963937089292, 0.18757296395589795, 0.19490172105502612, 0.1937561591847129, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.16407837215291787, 0.15995427995171607, 0.16689006410620622, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.1787738963586495, 0.09920885503356691, 0.11143281712518294, 0.1049453653754372, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391021969285685, 0.11580717687280051, 0.1587483059598962, 0.1501634669277746, 0.14692580659434828, 0.1595097874712479, 0.19431484419960365, 0.16929527287472723, 0.16119903619765097, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012058067181, 0.16081261879660358, 0.1998690319433546, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.18054357320265213, 0.18205638689149295, 0.17073644026235923, 0.05156741835427914, 0.05745133201902752, 0.05168488103078306, 0.04821191101582867, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049489313354025954, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "3a8dbae4-d44c-4f58-8c43-7fc57afb5701", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, prev_fitness, current_fitness):\n            if prev_fitness is None or current_fitness < prev_fitness:\n                return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n            else:\n                return pitch * 0.9\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch, best_fitness, new_fitness)\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance the pitch adjustment mechanism by incorporating a dynamic adaptation based on fitness improvement trends during the search.", "configspace": "", "generation": 43, "fitness": 0.09406253990370127, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "8df559b8-ca18-48b9-92a1-1c1aae944f1c", "metadata": {"aucs": [0.16391323853320805, 0.17397436481687722, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115764431755, 0.1782649645589678, 0.18969446924738254, 0.16558685945724594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12657542426330493, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.05928894622009773, 0.0658878091124292, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251522990839523, 0.20461495583415212, 0.1916963937089292, 0.18757296395589795, 0.19490172105502612, 0.1937561591847129, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.16407837215291787, 0.15995427995171607, 0.16689006410620622, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.1787738963586495, 0.09920885503356691, 0.11143281712518294, 0.1049453653754372, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391021969285685, 0.11580717687280051, 0.1587483059598962, 0.1501634669277746, 0.14692580659434828, 0.1595097874712479, 0.19431484419960365, 0.16929527287472723, 0.16119903619765097, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012058067181, 0.16081261879660358, 0.1998690319433546, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.18054357320265213, 0.18205638689149295, 0.17073644026235923, 0.05156741835427914, 0.05745133201902752, 0.05168488103078306, 0.04821191101582867, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049489313354025954, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "d9935ebe-6023-4389-a8f3-9e539877db31", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch):\n            return max(0.001, pitch * np.exp(np.random.uniform(-1, 1)))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch)\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Implement opposition-based learning for all solutions in the harmony memory to exploit the search space more effectively.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "8df559b8-ca18-48b9-92a1-1c1aae944f1c", "metadata": {"aucs": [0.16391323853320805, 0.17397436481687722, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115764431755, 0.1782649645589678, 0.18969446924738254, 0.16558685945724594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12657542426330493, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.05928894622009773, 0.0658878091124292, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251522990839523, 0.20461495583415212, 0.1916963937089292, 0.18757296395589795, 0.19490172105502612, 0.1937561591847129, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.16407837215291787, 0.15995427995171607, 0.16689006410620622, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.1787738963586495, 0.09920885503356691, 0.11143281712518294, 0.1049453653754372, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391021969285685, 0.11580717687280051, 0.1587483059598962, 0.1501634669277746, 0.14692580659434828, 0.1595097874712479, 0.19431484419960365, 0.16929527287472723, 0.16119903619765097, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012058067181, 0.16081261879660358, 0.1998690319433546, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.18054357320265213, 0.18205638689149295, 0.17073644026235923, 0.05156741835427914, 0.05745133201902752, 0.05168488103078306, 0.04821191101582867, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049489313354025954, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "084306fd-d0cb-4408-b7c6-a2ad53313e9d", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement_rate):\n            if improvement_rate > 0:\n                return max(0.001, pitch * np.exp(-improvement_rate))\n            else:\n                return max(0.001, pitch * np.exp(improvement_rate))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                pitch = adjust_pitch(pitch, (best_fitness - new_fitness_opposite) / best_fitness)\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearchImproved", "description": "Improve the convergence of the algorithm by dynamically adjusting the pitch range based on the fitness improvement rate.", "configspace": "", "generation": 45, "fitness": 0.09406253990370127, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "8df559b8-ca18-48b9-92a1-1c1aae944f1c", "metadata": {"aucs": [0.16391323853320805, 0.17397436481687722, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115764431755, 0.1782649645589678, 0.18969446924738254, 0.16558685945724594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12657542426330493, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.05928894622009773, 0.0658878091124292, 0.05669140256955785, 0.05863286318446259, 0.0621898366602891, 0.06768967092292355, 0.05806085032097763, 0.06502807686417877, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251522990839523, 0.20461495583415212, 0.1916963937089292, 0.18757296395589795, 0.19490172105502612, 0.1937561591847129, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.16407837215291787, 0.15995427995171607, 0.16689006410620622, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.1787738963586495, 0.09920885503356691, 0.11143281712518294, 0.1049453653754372, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391021969285685, 0.11580717687280051, 0.1587483059598962, 0.1501634669277746, 0.14692580659434828, 0.1595097874712479, 0.19431484419960365, 0.16929527287472723, 0.16119903619765097, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012058067181, 0.16081261879660358, 0.1998690319433546, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.18054357320265213, 0.18205638689149295, 0.17073644026235923, 0.05156741835427914, 0.05745133201902752, 0.05168488103078306, 0.04821191101582867, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049489313354025954, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "f7047ba7-01ba-4cb6-9edd-f90243899b2a", "solution": "import numpy as np\n\nclass DynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "DynamicPitchHarmonySearch", "description": "Improve exploration by introducing dynamic pitch adjustment based on fitness improvement.", "configspace": "", "generation": 46, "fitness": 0.09407448078695173, "feedback": "The algorithm DynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "8df559b8-ca18-48b9-92a1-1c1aae944f1c", "metadata": {"aucs": [0.16391323853320805, 0.1739742857059482, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115679968397, 0.1782649645589678, 0.18969446924738254, 0.16558686240931386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12808661272929278, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.059250448675731926, 0.06569550853219919, 0.05669140256955785, 0.058715301638206596, 0.06288459159747395, 0.06769621514237156, 0.05806085032097763, 0.06465619934291411, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251523792347494, 0.20461495583415212, 0.1916963937089292, 0.18757296212184094, 0.1949017206124286, 0.19375616727134048, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.1640783732572738, 0.15995427995171607, 0.16689006777877513, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.17877389666620092, 0.09920885503356691, 0.11143311980325321, 0.10494537057767994, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391020675793738, 0.115807175940144, 0.1587483059598962, 0.15020462303467685, 0.14692580659434828, 0.15950933405961054, 0.19431484419960365, 0.16929526930224315, 0.16201851870451756, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012388110789, 0.16081281441280348, 0.19986903722061888, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.1805435059627214, 0.18205638689149295, 0.17073644026235923, 0.05156618278536007, 0.05745133201902752, 0.05168488103078306, 0.04823845663226489, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049490399451790124, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "5e3bd8ad-e936-4e7d-a966-2efc9b6384f8", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by incorporating a novel opposition-based learning technique to guide search towards promising regions.", "configspace": "", "generation": 47, "fitness": 0.09407448078695173, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "f7047ba7-01ba-4cb6-9edd-f90243899b2a", "metadata": {"aucs": [0.16391323853320805, 0.1739742857059482, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115679968397, 0.1782649645589678, 0.18969446924738254, 0.16558686240931386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12808661272929278, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.059250448675731926, 0.06569550853219919, 0.05669140256955785, 0.058715301638206596, 0.06288459159747395, 0.06769621514237156, 0.05806085032097763, 0.06465619934291411, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251523792347494, 0.20461495583415212, 0.1916963937089292, 0.18757296212184094, 0.1949017206124286, 0.19375616727134048, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.1640783732572738, 0.15995427995171607, 0.16689006777877513, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.17877389666620092, 0.09920885503356691, 0.11143311980325321, 0.10494537057767994, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391020675793738, 0.115807175940144, 0.1587483059598962, 0.15020462303467685, 0.14692580659434828, 0.15950933405961054, 0.19431484419960365, 0.16929526930224315, 0.16201851870451756, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012388110789, 0.16081281441280348, 0.19986903722061888, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.1805435059627214, 0.18205638689149295, 0.17073644026235923, 0.05156618278536007, 0.05745133201902752, 0.05168488103078306, 0.04823845663226489, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049490399451790124, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "b3e0814e-f8a2-4520-9c36-29434a94f187", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def diversity_based_bandwidth_update(harmony_memory):\n            diversity = np.std(harmony_memory, axis=0)\n            bandwidth = np.mean(diversity)\n            return bandwidth\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                bandwidth = diversity_based_bandwidth_update(harmony_memory)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - bandwidth),\n                                                       min(self.upper_bound, new_harmony[index] + bandwidth))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance the harmony memory updating strategy by incorporating a dynamic band-width adjustment mechanism based on harmony memory diversity.", "configspace": "", "generation": 48, "fitness": 0.09386950799755764, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "f7047ba7-01ba-4cb6-9edd-f90243899b2a", "metadata": {"aucs": [0.16391323853320805, 0.17396869945861448, 0.16966485790420338, 0.18106969223834835, 0.16525400786468714, 0.16844093281714267, 0.17826537612962745, 0.1897096897167384, 0.1655876420337712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.1263831629982014, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.05663112608933074, 0.0510285308282058, 0.05669140256955785, 0.057777430942387076, 0.05871086292919858, 0.06870453257996945, 0.05806085032097763, 0.05098196106669006, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228592508295994, 0.2225189690910957, 0.20461495583415212, 0.1916963937089292, 0.1875728583415005, 0.1949016914599031, 0.19375757197236843, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905306293070296, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074781307725516, 0.16407867570876422, 0.16062909680963477, 0.16689006410620622, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.1787739792383054, 0.09920885503356691, 0.11143250150432593, 0.10494672426829654, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391301724761448, 0.11580703227195754, 0.15900911753280766, 0.15023545769830926, 0.14694202273910373, 0.15957565943610663, 0.19431484419960365, 0.16929947836332193, 0.15348617321394453, 0.15005634509361476, 0.18120581125556123, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.17891544360041056, 0.1608394508163552, 0.199870418262037, 0.15518559233353302, 0.2023670279061346, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.20783029447971835, 0.1561981702417159, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17411355715888444, 0.19864617817503216, 0.1867241912845108, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.1721053723118139, 0.1942115042976652, 0.18054350371115202, 0.18205649295200022, 0.1707374426995475, 0.05156487965826384, 0.05746531466056204, 0.05168488103078306, 0.0479227538464837, 0.05356715216634511, 0.0679572384816598, 0.05571719788017637, 0.04944117857841668, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "534d0f43-46c8-4431-a4b7-6bd8870d5584", "solution": "import numpy as np\n\nclass DynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "DynamicPitchHarmonySearch", "description": "Improve exploration by introducing dynamic pitch adjustment based on fitness improvement.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f7047ba7-01ba-4cb6-9edd-f90243899b2a", "metadata": {"aucs": [0.16391323853320805, 0.1739742857059482, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115679968397, 0.1782649645589678, 0.18969446924738254, 0.16558686240931386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12808661272929278, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.059250448675731926, 0.06569550853219919, 0.05669140256955785, 0.058715301638206596, 0.06288459159747395, 0.06769621514237156, 0.05806085032097763, 0.06465619934291411, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251523792347494, 0.20461495583415212, 0.1916963937089292, 0.18757296212184094, 0.1949017206124286, 0.19375616727134048, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.1640783732572738, 0.15995427995171607, 0.16689006777877513, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.17877389666620092, 0.09920885503356691, 0.11143311980325321, 0.10494537057767994, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391020675793738, 0.115807175940144, 0.1587483059598962, 0.15020462303467685, 0.14692580659434828, 0.15950933405961054, 0.19431484419960365, 0.16929526930224315, 0.16201851870451756, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012388110789, 0.16081281441280348, 0.19986903722061888, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.1805435059627214, 0.18205638689149295, 0.17073644026235923, 0.05156618278536007, 0.05745133201902752, 0.05168488103078306, 0.04823845663226489, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049490399451790124, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "1d82d706-359c-4fe1-8d5c-f3b95bd08d96", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n        self.bandwidth = 0.1  # New parameter for bandwidth adjustment\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def adjust_bandwidth(bandwidth, improvement):\n            return max(0.001, bandwidth * np.exp(self.pitch_adapt_rate * improvement))  # Dynamic bandwidth adjustment\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n            bandwidth = self.bandwidth  # Initialize bandwidth\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n                    bandwidth = adjust_bandwidth(bandwidth, 1)  # Adjust bandwidth based on fitness improvement\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n                    bandwidth = adjust_bandwidth(bandwidth, 1)  # Adjust bandwidth based on fitness improvement\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by incorporating a dynamic bandwidth adjustment mechanism based on fitness comparison.", "configspace": "", "generation": 50, "fitness": 0.09407448078695173, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "f7047ba7-01ba-4cb6-9edd-f90243899b2a", "metadata": {"aucs": [0.16391323853320805, 0.1739742857059482, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115679968397, 0.1782649645589678, 0.18969446924738254, 0.16558686240931386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12808661272929278, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.059250448675731926, 0.06569550853219919, 0.05669140256955785, 0.058715301638206596, 0.06288459159747395, 0.06769621514237156, 0.05806085032097763, 0.06465619934291411, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251523792347494, 0.20461495583415212, 0.1916963937089292, 0.18757296212184094, 0.1949017206124286, 0.19375616727134048, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.1640783732572738, 0.15995427995171607, 0.16689006777877513, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.17877389666620092, 0.09920885503356691, 0.11143311980325321, 0.10494537057767994, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391020675793738, 0.115807175940144, 0.1587483059598962, 0.15020462303467685, 0.14692580659434828, 0.15950933405961054, 0.19431484419960365, 0.16929526930224315, 0.16201851870451756, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012388110789, 0.16081281441280348, 0.19986903722061888, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.1805435059627214, 0.18205638689149295, 0.17073644026235923, 0.05156618278536007, 0.05745133201902752, 0.05168488103078306, 0.04823845663226489, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049490399451790124, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "bbd03e80-fe2b-4f68-ae16-db70b756031c", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch(DynamicPitchHarmonySearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.bandwidth = 0.5\n        self.bandwidth_adapt_rate = 0.05\n\n    def __call__(self, func):\n        def adjust_bandwidth(bandwidth, improvement):\n            return max(0.001, bandwidth * np.exp(self.bandwidth_adapt_rate * improvement))\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n            bandwidth = self.bandwidth\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n                    bandwidth = adjust_bandwidth(bandwidth, 1)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n                    bandwidth = adjust_bandwidth(bandwidth, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance the exploration-exploitation balance by integrating a dynamic bandwidth adjustment mechanism based on individual harmony improvement.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_harmony' is not defined\").", "error": "NameError(\"name 'initialize_harmony' is not defined\")", "parent_id": "f7047ba7-01ba-4cb6-9edd-f90243899b2a", "metadata": {}, "mutation_prompt": null}
{"id": "04ef9c8f-2a1b-4bbf-9854-a1ae418409ea", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch(DynamicPitchHarmonySearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.diversity_rate = 0.5\n\n    def __call__(self, func):\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n                diversity = np.mean([np.linalg.norm(h - new_harmony) for h in harmony_memory])\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                pitch = adjust_pitch(pitch, diversity * self.diversity_rate)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by incorporating dynamic pitch adjustment based on individual harmony memory diversity.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_harmony' is not defined\").", "error": "NameError(\"name 'initialize_harmony' is not defined\")", "parent_id": "f7047ba7-01ba-4cb6-9edd-f90243899b2a", "metadata": {}, "mutation_prompt": null}
{"id": "286bf588-d3b1-487f-8e99-75323dc04136", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n        self.bandwidth = 0.6\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def adjust_bandwidth(bandwidth, improvement):\n            return min(0.9, bandwidth * np.exp(self.pitch_adapt_rate * improvement))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def enhanced_harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return enhanced_harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by incorporating an adaptive bandwidth mechanism to dynamically adjust the exploration range for local search.", "configspace": "", "generation": 53, "fitness": 0.09407448078695173, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "f7047ba7-01ba-4cb6-9edd-f90243899b2a", "metadata": {"aucs": [0.16391323853320805, 0.1739742857059482, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115679968397, 0.1782649645589678, 0.18969446924738254, 0.16558686240931386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12808661272929278, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.059250448675731926, 0.06569550853219919, 0.05669140256955785, 0.058715301638206596, 0.06288459159747395, 0.06769621514237156, 0.05806085032097763, 0.06465619934291411, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251523792347494, 0.20461495583415212, 0.1916963937089292, 0.18757296212184094, 0.1949017206124286, 0.19375616727134048, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.1640783732572738, 0.15995427995171607, 0.16689006777877513, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.17877389666620092, 0.09920885503356691, 0.11143311980325321, 0.10494537057767994, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391020675793738, 0.115807175940144, 0.1587483059598962, 0.15020462303467685, 0.14692580659434828, 0.15950933405961054, 0.19431484419960365, 0.16929526930224315, 0.16201851870451756, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012388110789, 0.16081281441280348, 0.19986903722061888, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.1805435059627214, 0.18205638689149295, 0.17073644026235923, 0.05156618278536007, 0.05745133201902752, 0.05168488103078306, 0.04823845663226489, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049490399451790124, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "04785cb7-5328-4fc8-84b9-13537c934290", "solution": "import numpy as np\n\nclass DynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                index = np.random.randint(self.dim)\n                new_harmony[index] = np.random.uniform(max(self.lower_bound, new_harmony[index] - pitch),\n                                                       min(self.upper_bound, new_harmony[index] + pitch))\n\n                new_harmony_opposite = opposition_based_learning(new_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "DynamicPitchHarmonySearch", "description": "Improve exploration by introducing dynamic pitch adjustment based on fitness improvement.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f7047ba7-01ba-4cb6-9edd-f90243899b2a", "metadata": {"aucs": [0.16391323853320805, 0.1739742857059482, 0.16966485790420338, 0.18106969223834835, 0.165250075766881, 0.16844115679968397, 0.1782649645589678, 0.18969446924738254, 0.16558686240931386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046984471217622725, 0.04393099041710957, 0.04089411028353607, 0.05746082678282605, 0.04235178228082259, 0.05119128602172662, 0.0535467191785034, 0.03571106736328622, 0.04416732994237105, 0.032685866156722865, 0.033891365721330335, 0.029341641209165603, 0.05812181700967389, 0.03057685069662963, 0.03537948468306806, 0.027077928210970326, 0.02637488358714213, 0.04194220657292258, 0.0842027745116729, 0.09457424441928508, 0.07660415791152575, 0.07244368225760678, 0.08517762930452133, 0.08198874636922115, 0.08562098427036469, 0.0816775768963276, 0.09111378608843601, 0.0825562785557108, 0.08659135346288405, 0.11195008058368816, 0.06688987179388184, 0.051930962126971125, 0.05891231586773993, 0.08177772750170076, 0.0853045422076959, 0.07578064468512402, 0.1530003275835694, 0.12808661272929278, 0.11759141434421838, 0.10591914675782721, 0.13848872878123675, 0.10535089335439074, 0.12716435161638506, 0.11410914696653485, 0.15740137270133725, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.00021365957486263465, 9.999999999998899e-05, 0.004089722712099286, 0.059250448675731926, 0.06569550853219919, 0.05669140256955785, 0.058715301638206596, 0.06288459159747395, 0.06769621514237156, 0.05806085032097763, 0.06465619934291411, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10187297513648552, 0.07805285038475107, 0.12929958840536293, 0.03484949701072271, 0.03818190971238111, 0.09806617660810024, 0.051913853040590374, 0.06432701227410598, 0.0727599706860439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012204214217471754, 0.0016504627841661401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19228563509069252, 0.22251523792347494, 0.20461495583415212, 0.1916963937089292, 0.18757296212184094, 0.1949017206124286, 0.19375616727134048, 0.20227568626521253, 0.19153593861097307, 0.07413588950208327, 0.04262030119862048, 0.04529177495846326, 0.04479636031281642, 0.03819609430886994, 0.047874874554001745, 0.040508844513828635, 0.042675181190988565, 0.05305122754670866, 0.1552868166578375, 0.12905218589668344, 0.1496500548078128, 0.17054335899633188, 0.1454848079046942, 0.12792562911935035, 0.16618707315768244, 0.13228221482611957, 0.14973785017450936, 0.14805727021944037, 0.16074828149544973, 0.1640783732572738, 0.15995427995171607, 0.16689006777877513, 0.1657697415092403, 0.18824926784017315, 0.15520279400431514, 0.17877389666620092, 0.09920885503356691, 0.11143311980325321, 0.10494537057767994, 0.13530355706984187, 0.13029637752293854, 0.12121580560457423, 0.12074025743036632, 0.10391020675793738, 0.115807175940144, 0.1587483059598962, 0.15020462303467685, 0.14692580659434828, 0.15950933405961054, 0.19431484419960365, 0.16929526930224315, 0.16201851870451756, 0.15001822167348633, 0.18108472849904222, 0.15172157576930256, 0.1387101001360046, 0.15453238004887115, 0.15614413891786316, 0.13414618764619768, 0.1504395603991998, 0.13746202588728207, 0.1462077538179597, 0.14684359581854056, 0.1789012388110789, 0.16081281441280348, 0.19986903722061888, 0.15518559233353302, 0.2023648449785891, 0.20690758689853528, 0.1619641528460033, 0.16918533822380488, 0.16220053994888572, 0.13981742620960236, 0.1686930370161086, 0.2078302914618585, 0.15619747174423415, 0.19713500349430857, 0.15177064175816302, 0.1673137902902554, 0.17405922869268675, 0.19864617817503216, 0.18672310154167315, 0.18745534260590313, 0.18846859470169763, 0.1827728008477646, 0.17210460323579269, 0.1942115042976652, 0.1805435059627214, 0.18205638689149295, 0.17073644026235923, 0.05156618278536007, 0.05745133201902752, 0.05168488103078306, 0.04823845663226489, 0.053562408438012965, 0.0679572384816598, 0.05568304296043147, 0.049490399451790124, 0.06385483083311883]}, "mutation_prompt": null}
{"id": "8cec77fc-8faf-40da-ab21-e277e9f1c2e5", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by incorporating adaptive pitch adjustment based on local search information.", "configspace": "", "generation": 56, "fitness": 0.09423831748573966, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "f7047ba7-01ba-4cb6-9edd-f90243899b2a", "metadata": {"aucs": [0.16386897653869437, 0.17392902847870373, 0.16962540107226032, 0.18097402386461625, 0.16518294360200525, 0.1683613988694408, 0.1781901195025144, 0.1896243577670953, 0.16557729832598211, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0469559556977478, 0.04390047383403961, 0.04085047415012888, 0.05743057682031971, 0.042330278030375146, 0.05116345228477692, 0.053552841861146394, 0.03568729055512776, 0.044141624256384016, 0.03266440331876019, 0.033870031859476124, 0.02918338067665427, 0.05808776821060668, 0.030555962308498774, 0.03535613199986587, 0.02706337541817505, 0.026230298885077663, 0.04191962914609082, 0.08424009209468275, 0.09453055877006789, 0.07668144159892909, 0.07245169492801906, 0.08523833040075002, 0.08196855911272383, 0.08561247928499438, 0.08179550651875744, 0.0910767712453533, 0.08250847642461445, 0.08654488594372833, 0.11189390278078903, 0.06683959424991515, 0.051872778589604596, 0.05888259257892292, 0.08173273952117233, 0.08524431832670176, 0.075723878222131, 0.15466947311065793, 0.13296037725832188, 0.1308289854559851, 0.10586441057247498, 0.1384081362804016, 0.1052799324241721, 0.12722371105523456, 0.11395910386459851, 0.15733760426380394, 9.999999999998899e-05, 0.013600279101109614, 9.999999999998899e-05, 9.999999999998899e-05, 0.008658134001203521, 9.999999999998899e-05, 0.00021109967452792588, 9.999999999998899e-05, 0.00408426182692001, 0.0652649875121113, 0.06562770457733025, 0.065597665733368, 0.0620661667193152, 0.06012408078547016, 0.05821281393958322, 0.062227492553832975, 0.06576305446429798, 0.07375948729487847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1018200565762023, 0.0780061272864423, 0.12922949210410328, 0.03482207091727341, 0.03815948218612253, 0.09799365338340593, 0.05188471449773513, 0.06428595585182051, 0.07272207741219205, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007436597149924618, 0.012197497117462208, 0.0016496173846107798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017429698262261262, 9.999999999998899e-05, 0.19218188117200752, 0.2224361463436888, 0.20477568656220357, 0.19162417841722523, 0.18744029805149964, 0.19452339781034766, 0.1937178176816523, 0.20223104434429184, 0.19150351076595706, 0.07409701919902822, 0.04259695202473701, 0.04511291394839623, 0.04477117358048288, 0.038174045169861115, 0.0478487834262471, 0.04048608755532279, 0.04265201786509332, 0.05367541433375611, 0.15524619065835998, 0.12900859394548114, 0.14960108133992323, 0.17095500399915287, 0.145547836753666, 0.1278848947042046, 0.16600909637587624, 0.13222353094619288, 0.14967925059248433, 0.14802658554685966, 0.16070112077034082, 0.1640384285687695, 0.1599196138918706, 0.1668850167857061, 0.16574888144025846, 0.1882086205786151, 0.15481481378424555, 0.17865034742442365, 0.09917318403541908, 0.11133040205476918, 0.10479283737726819, 0.13527356475517827, 0.1304656653583257, 0.1211804203987129, 0.1207035893592503, 0.10379820270983986, 0.11566835139544351, 0.1608354171134928, 0.15024239581940124, 0.1509760841299882, 0.16012603879650456, 0.1943148424509591, 0.1690608108946322, 0.15339370203151337, 0.1503139384954345, 0.18135745826639094, 0.1516433676999993, 0.13863566627288748, 0.15445020925602326, 0.1560552027545733, 0.13406612045586896, 0.15036278660679103, 0.1373833837333901, 0.1461280920168221, 0.14676386453044254, 0.1788311858062821, 0.16075379027949055, 0.19977242703731812, 0.1551461273921637, 0.2029979938743569, 0.20681236347981813, 0.1618859488954285, 0.16912624329142678, 0.16206729652647867, 0.139718651609391, 0.1686242313948273, 0.2077238589876016, 0.15612308417492626, 0.1970501135440501, 0.15102719329301018, 0.16708900717393405, 0.17397781983934169, 0.19855393170688307, 0.18662066962832913, 0.18741181446579858, 0.1890498938695344, 0.1827047352957094, 0.17202342176237395, 0.19417333466573206, 0.18051536919867472, 0.18198123742291328, 0.17068478990813474, 0.05190945113778911, 0.05744232063485055, 0.05198699080206248, 0.04797694229076932, 0.05353645192845524, 0.06794416919370982, 0.05565708061052288, 0.049448913156076246, 0.06383241285944041]}, "mutation_prompt": null}
{"id": "6b933b99-8aa2-4714-84c3-ac9695d8b5ff", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by incorporating adaptive pitch adjustment based on local search information.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "8cec77fc-8faf-40da-ab21-e277e9f1c2e5", "metadata": {"aucs": [0.16386897653869437, 0.17392902847870373, 0.16962540107226032, 0.18097402386461625, 0.16518294360200525, 0.1683613988694408, 0.1781901195025144, 0.1896243577670953, 0.16557729832598211, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0469559556977478, 0.04390047383403961, 0.04085047415012888, 0.05743057682031971, 0.042330278030375146, 0.05116345228477692, 0.053552841861146394, 0.03568729055512776, 0.044141624256384016, 0.03266440331876019, 0.033870031859476124, 0.02918338067665427, 0.05808776821060668, 0.030555962308498774, 0.03535613199986587, 0.02706337541817505, 0.026230298885077663, 0.04191962914609082, 0.08424009209468275, 0.09453055877006789, 0.07668144159892909, 0.07245169492801906, 0.08523833040075002, 0.08196855911272383, 0.08561247928499438, 0.08179550651875744, 0.0910767712453533, 0.08250847642461445, 0.08654488594372833, 0.11189390278078903, 0.06683959424991515, 0.051872778589604596, 0.05888259257892292, 0.08173273952117233, 0.08524431832670176, 0.075723878222131, 0.15466947311065793, 0.13296037725832188, 0.1308289854559851, 0.10586441057247498, 0.1384081362804016, 0.1052799324241721, 0.12722371105523456, 0.11395910386459851, 0.15733760426380394, 9.999999999998899e-05, 0.013600279101109614, 9.999999999998899e-05, 9.999999999998899e-05, 0.008658134001203521, 9.999999999998899e-05, 0.00021109967452792588, 9.999999999998899e-05, 0.00408426182692001, 0.0652649875121113, 0.06562770457733025, 0.065597665733368, 0.0620661667193152, 0.06012408078547016, 0.05821281393958322, 0.062227492553832975, 0.06576305446429798, 0.07375948729487847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1018200565762023, 0.0780061272864423, 0.12922949210410328, 0.03482207091727341, 0.03815948218612253, 0.09799365338340593, 0.05188471449773513, 0.06428595585182051, 0.07272207741219205, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007436597149924618, 0.012197497117462208, 0.0016496173846107798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017429698262261262, 9.999999999998899e-05, 0.19218188117200752, 0.2224361463436888, 0.20477568656220357, 0.19162417841722523, 0.18744029805149964, 0.19452339781034766, 0.1937178176816523, 0.20223104434429184, 0.19150351076595706, 0.07409701919902822, 0.04259695202473701, 0.04511291394839623, 0.04477117358048288, 0.038174045169861115, 0.0478487834262471, 0.04048608755532279, 0.04265201786509332, 0.05367541433375611, 0.15524619065835998, 0.12900859394548114, 0.14960108133992323, 0.17095500399915287, 0.145547836753666, 0.1278848947042046, 0.16600909637587624, 0.13222353094619288, 0.14967925059248433, 0.14802658554685966, 0.16070112077034082, 0.1640384285687695, 0.1599196138918706, 0.1668850167857061, 0.16574888144025846, 0.1882086205786151, 0.15481481378424555, 0.17865034742442365, 0.09917318403541908, 0.11133040205476918, 0.10479283737726819, 0.13527356475517827, 0.1304656653583257, 0.1211804203987129, 0.1207035893592503, 0.10379820270983986, 0.11566835139544351, 0.1608354171134928, 0.15024239581940124, 0.1509760841299882, 0.16012603879650456, 0.1943148424509591, 0.1690608108946322, 0.15339370203151337, 0.1503139384954345, 0.18135745826639094, 0.1516433676999993, 0.13863566627288748, 0.15445020925602326, 0.1560552027545733, 0.13406612045586896, 0.15036278660679103, 0.1373833837333901, 0.1461280920168221, 0.14676386453044254, 0.1788311858062821, 0.16075379027949055, 0.19977242703731812, 0.1551461273921637, 0.2029979938743569, 0.20681236347981813, 0.1618859488954285, 0.16912624329142678, 0.16206729652647867, 0.139718651609391, 0.1686242313948273, 0.2077238589876016, 0.15612308417492626, 0.1970501135440501, 0.15102719329301018, 0.16708900717393405, 0.17397781983934169, 0.19855393170688307, 0.18662066962832913, 0.18741181446579858, 0.1890498938695344, 0.1827047352957094, 0.17202342176237395, 0.19417333466573206, 0.18051536919867472, 0.18198123742291328, 0.17068478990813474, 0.05190945113778911, 0.05744232063485055, 0.05198699080206248, 0.04797694229076932, 0.05353645192845524, 0.06794416919370982, 0.05565708061052288, 0.049448913156076246, 0.06383241285944041]}, "mutation_prompt": null}
{"id": "608b088c-c678-4673-a2f0-0531a811765a", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n        self.local_search_prob = 0.1  # New parameter for local search probability\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                if np.random.rand() < self.local_search_prob:  # Introduce local search based on probability\n                    original_value = new_harmony[i]\n                    new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                       min(self.upper_bound, original_value + self.pitch_range))\n                    if func(new_harmony) < func_value:\n                        harmony[i] = new_harmony[i]  # Update if better\n                    else:\n                        new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Improve the exploration-exploitation balance by incorporating a dynamic adaptation of pitch adjustment based on local search information.", "configspace": "", "generation": 58, "fitness": 0.09407876241296682, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "8cec77fc-8faf-40da-ab21-e277e9f1c2e5", "metadata": {"aucs": [0.1639040199024301, 0.1739750303288975, 0.1696566283258102, 0.1810395027529622, 0.16526218884460286, 0.16842521137583577, 0.1782484023717601, 0.18969970928329294, 0.1656340591351414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04697876811364787, 0.04393099041710957, 0.04086943050345748, 0.057454776790324846, 0.042352594616341444, 0.051185719274336794, 0.05357553735361653, 0.03571106736328622, 0.04416218880517353, 0.032681573589130264, 0.033891365721330335, 0.02919908709260921, 0.05811500724986052, 0.03057685069662963, 0.03537481414642751, 0.02707501765241127, 0.026245717103533517, 0.041937691087556184, 0.08427452225657495, 0.0945813668431148, 0.07671619549213304, 0.07248655989254016, 0.08527971293903125, 0.08200124957571642, 0.08564718606655386, 0.08183017909924362, 0.091117726675505, 0.08254671812949144, 0.08659135346288405, 0.11193884502310847, 0.06687981628508843, 0.051930962126971125, 0.05890637120997655, 0.08176872990559514, 0.0853045422076959, 0.07576929139252553, 0.15299432707211968, 0.12657542426330493, 0.11993401481675847, 0.10591391230240588, 0.13848184153523202, 0.10533670116834692, 0.12727777068153323, 0.11402111201793708, 0.15740667381323947, 9.999999999998899e-05, 0.01361680829454004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00867277752616702, 9.999999999998899e-05, 0.0002131475947957373, 9.999999999998899e-05, 0.0040886305350633645, 0.06270748480254695, 0.06635745267740534, 0.05669140256955785, 0.060268410472183453, 0.05871086292919858, 0.06279224327584654, 0.06344060553220277, 0.0670632164229884, 0.06199283136850642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10186239142442888, 0.07805285038475107, 0.12928556914511102, 0.03484401179203289, 0.03818190971238111, 0.09805167196316145, 0.051908025332019325, 0.06432701227410598, 0.0727523920312737, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007470051397066024, 0.012202870797469956, 0.001650293704255068, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017442596439576352, 9.999999999998899e-05, 0.19225912245273913, 0.22254306307263472, 0.20481450271786839, 0.19168195065058835, 0.18752968963397842, 0.19460000263821498, 0.19374942464220468, 0.20227568626521253, 0.19152986246015669, 0.07412811544147224, 0.04262030119862048, 0.04513776113221479, 0.0447913229663498, 0.03819609430886994, 0.04786965632845075, 0.040504293122127444, 0.042675181190988565, 0.05369983133677436, 0.15531937534144002, 0.12906114027408044, 0.1496402601142348, 0.17102231655566336, 0.14563694769233348, 0.12791968059770153, 0.16608431446003413, 0.13228221482611957, 0.14974991906989055, 0.14805113328492425, 0.16075062005705965, 0.16407678075887233, 0.15996520578719842, 0.16689006410620622, 0.1657675383440964, 0.1882411383878615, 0.1548507459133781, 0.17869171541042983, 0.09920351283811646, 0.111388420802214, 0.10480726576163901, 0.13529762239323606, 0.13029637752293854, 0.12120872856340192, 0.1207329238161432, 0.10384982054860226, 0.11570769467343545, 0.15878795488789088, 0.15013856662534075, 0.15148174271054526, 0.15950070302962827, 0.19432382672179183, 0.1690918655745589, 0.15341826272420644, 0.1500588488400939, 0.18112288473608407, 0.15170593415544187, 0.1387101001360046, 0.1545159458903016, 0.15612635168520517, 0.13414618764619768, 0.150424205640718, 0.1374462974565036, 0.1462077538179597, 0.1468276495609211, 0.17888820746341805, 0.1608164541814695, 0.19985072831613315, 0.155211182647772, 0.2030930947614935, 0.20688620118448853, 0.16194851205588834, 0.16918533822380488, 0.16213787652749434, 0.1398043131076383, 0.1686930370161086, 0.20781082417655117, 0.15618459299176846, 0.19714447676333757, 0.15110097857605598, 0.16715550440042626, 0.17405940448975055, 0.19863503110950453, 0.1866745693348728, 0.18745534260590313, 0.1890786702396099, 0.18274250940962566, 0.17206371711487878, 0.19420387037127862, 0.18054104890149014, 0.1820497328748778, 0.17071183349785135, 0.05158754924032016, 0.05747663087228594, 0.051681133037001725, 0.04791952610316241, 0.0535525097195888, 0.06795462462406976, 0.0556768330226971, 0.04944986020192188, 0.06385034723838323]}, "mutation_prompt": null}
{"id": "a4501faa-e8a5-47b2-a590-75d64c62d706", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    if np.random.rand() < 0.1:  # 10% change: Integrate opposition-based learning\n                        harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n\n                for i in range(self.budget):\n                    if np.random.rand() < 0.1:  # 10% change: Integrate opposition-based learning\n                        harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration and exploitation by integrating opposition-based learning to diversify search directions and improve convergence rate.", "configspace": "", "generation": 59, "fitness": 0.09359001409707736, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "8cec77fc-8faf-40da-ab21-e277e9f1c2e5", "metadata": {"aucs": [0.17190345519192884, 0.17582316090918315, 0.17090551731254677, 0.17289336196481253, 0.18803167384973396, 0.17265587146990002, 0.1707008141371451, 0.1631817727138647, 0.18651569835532145, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043327142033481536, 0.046727535707803525, 0.03654371902939879, 0.03994623119611207, 0.042697990463297364, 0.04483124207517941, 0.052489643796008734, 0.06682141630003591, 0.05865857280433684, 0.02366243504065546, 0.03267193106982702, 0.04809971567792981, 0.027767079907723757, 0.0492862164407869, 0.05697615623855268, 0.03765309554980245, 0.039885683443283027, 0.029870435164302434, 0.08732373155217321, 0.07477500222900235, 0.0907764808826429, 0.08807003515860434, 0.08012109787779886, 0.086115553303167, 0.08213666222286664, 0.08599113365224964, 0.07978053241331984, 0.07965358446376591, 0.08674157164023855, 0.11159046763353875, 0.06461533578774492, 0.0653774479788064, 0.05382221156626288, 0.09464601946966156, 0.060797373286198275, 0.09983305513459895, 0.12558226295033692, 0.19446380452536915, 0.14971756542021974, 0.10354925575278684, 0.12563634786026812, 0.13111549158083835, 0.13071192465436632, 0.1317095169614333, 0.11587597969778529, 9.999999999998899e-05, 0.0045527643611660285, 0.006192032375172518, 0.004168346956643809, 9.999999999998899e-05, 0.0004285266248712505, 9.999999999998899e-05, 9.999999999998899e-05, 0.019578827514574404, 0.06315056963412136, 0.07756165020586958, 0.056757755439092894, 0.06440690488361123, 0.06724086060205914, 0.06151061574610428, 0.06769230405951954, 0.0637594121962598, 0.06220521464050255, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05287968956515465, 0.06853173726950101, 0.04509674264431107, 0.06935560214603975, 0.02726483768743615, 0.05585244303074466, 0.052138315214683484, 0.03503319823369855, 0.06415139711131213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007436597149924618, 0.012197497117462208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006746050161915651, 9.999999999998899e-05, 0.21843665193680695, 0.19859937533827154, 0.19487265919880792, 0.20654253813654044, 0.18869059375855834, 0.19358523385979143, 0.19983461272878644, 0.1800188849255423, 0.2041107711363841, 0.049956595937117654, 0.042461280252472866, 0.044018589175073064, 0.040595711461280715, 0.040408320330563074, 0.045970284652776194, 0.07318181995806139, 0.04396183062453962, 0.05225166975286466, 0.1373846311904181, 0.1277048188024843, 0.13828316901527304, 0.1515621563480236, 0.14102996182864536, 0.1317661525563928, 0.15022876517899042, 0.1485066899227815, 0.13641276001218028, 0.17182444921026818, 0.1607125119678805, 0.17596997835922867, 0.16777756288430734, 0.16248102775748063, 0.17715126968784312, 0.16518583083913485, 0.16615491692350715, 0.15507293157134228, 0.1152542320135912, 0.10293979796489416, 0.11840371968116592, 0.11189248892345571, 0.1231238575220408, 0.1168421407922533, 0.10623862232358239, 0.12330112482909938, 0.12275914561228185, 0.16728633076164556, 0.16248507676917612, 0.1588496906114233, 0.1602177597998945, 0.14720749016199064, 0.16971652462402875, 0.155511401406215, 0.1731264097348829, 0.18272295583645282, 0.14182802569365138, 0.1457587352220031, 0.14363380730680475, 0.14089597265791853, 0.1439890025340872, 0.15269476254980385, 0.14013553309264737, 0.14131231308937608, 0.16194794869120144, 0.1789118516648439, 0.15612529317424906, 0.16647002683401202, 0.1551226151264825, 0.1511049012386979, 0.19109491373209941, 0.16128649991583077, 0.1631821989916652, 0.17630997703811424, 0.1575523721999651, 0.1602990491359484, 0.1598274662163074, 0.15177535044705093, 0.1893613365326393, 0.15996371529659914, 0.16845041382943604, 0.17397763476412897, 0.20126998708855692, 0.1752706594611263, 0.19096539654265154, 0.17693814249706552, 0.18840279617969324, 0.2142478289298888, 0.18352609292458666, 0.1758618940252631, 0.18943548764807572, 0.20563559517847108, 0.05830844082005282, 0.0552813826194537, 0.06593086408213333, 0.051859803396907544, 0.05863438081753247, 0.05628919243792352, 0.07518790865358493, 0.05207744504999423, 0.06276828441586879]}, "mutation_prompt": null}
{"id": "a62dc5c5-f37f-4912-b952-ab3b5d99a91c", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by incorporating adaptive pitch adjustment based on local search information.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cec77fc-8faf-40da-ab21-e277e9f1c2e5", "metadata": {"aucs": [0.16386897653869437, 0.17392902847870373, 0.16962540107226032, 0.18097402386461625, 0.16518294360200525, 0.1683613988694408, 0.1781901195025144, 0.1896243577670953, 0.16557729832598211, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0469559556977478, 0.04390047383403961, 0.04085047415012888, 0.05743057682031971, 0.042330278030375146, 0.05116345228477692, 0.053552841861146394, 0.03568729055512776, 0.044141624256384016, 0.03266440331876019, 0.033870031859476124, 0.02918338067665427, 0.05808776821060668, 0.030555962308498774, 0.03535613199986587, 0.02706337541817505, 0.026230298885077663, 0.04191962914609082, 0.08424009209468275, 0.09453055877006789, 0.07668144159892909, 0.07245169492801906, 0.08523833040075002, 0.08196855911272383, 0.08561247928499438, 0.08179550651875744, 0.0910767712453533, 0.08250847642461445, 0.08654488594372833, 0.11189390278078903, 0.06683959424991515, 0.051872778589604596, 0.05888259257892292, 0.08173273952117233, 0.08524431832670176, 0.075723878222131, 0.15466947311065793, 0.13296037725832188, 0.1308289854559851, 0.10586441057247498, 0.1384081362804016, 0.1052799324241721, 0.12722371105523456, 0.11395910386459851, 0.15733760426380394, 9.999999999998899e-05, 0.013600279101109614, 9.999999999998899e-05, 9.999999999998899e-05, 0.008658134001203521, 9.999999999998899e-05, 0.00021109967452792588, 9.999999999998899e-05, 0.00408426182692001, 0.0652649875121113, 0.06562770457733025, 0.065597665733368, 0.0620661667193152, 0.06012408078547016, 0.05821281393958322, 0.062227492553832975, 0.06576305446429798, 0.07375948729487847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1018200565762023, 0.0780061272864423, 0.12922949210410328, 0.03482207091727341, 0.03815948218612253, 0.09799365338340593, 0.05188471449773513, 0.06428595585182051, 0.07272207741219205, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007436597149924618, 0.012197497117462208, 0.0016496173846107798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017429698262261262, 9.999999999998899e-05, 0.19218188117200752, 0.2224361463436888, 0.20477568656220357, 0.19162417841722523, 0.18744029805149964, 0.19452339781034766, 0.1937178176816523, 0.20223104434429184, 0.19150351076595706, 0.07409701919902822, 0.04259695202473701, 0.04511291394839623, 0.04477117358048288, 0.038174045169861115, 0.0478487834262471, 0.04048608755532279, 0.04265201786509332, 0.05367541433375611, 0.15524619065835998, 0.12900859394548114, 0.14960108133992323, 0.17095500399915287, 0.145547836753666, 0.1278848947042046, 0.16600909637587624, 0.13222353094619288, 0.14967925059248433, 0.14802658554685966, 0.16070112077034082, 0.1640384285687695, 0.1599196138918706, 0.1668850167857061, 0.16574888144025846, 0.1882086205786151, 0.15481481378424555, 0.17865034742442365, 0.09917318403541908, 0.11133040205476918, 0.10479283737726819, 0.13527356475517827, 0.1304656653583257, 0.1211804203987129, 0.1207035893592503, 0.10379820270983986, 0.11566835139544351, 0.1608354171134928, 0.15024239581940124, 0.1509760841299882, 0.16012603879650456, 0.1943148424509591, 0.1690608108946322, 0.15339370203151337, 0.1503139384954345, 0.18135745826639094, 0.1516433676999993, 0.13863566627288748, 0.15445020925602326, 0.1560552027545733, 0.13406612045586896, 0.15036278660679103, 0.1373833837333901, 0.1461280920168221, 0.14676386453044254, 0.1788311858062821, 0.16075379027949055, 0.19977242703731812, 0.1551461273921637, 0.2029979938743569, 0.20681236347981813, 0.1618859488954285, 0.16912624329142678, 0.16206729652647867, 0.139718651609391, 0.1686242313948273, 0.2077238589876016, 0.15612308417492626, 0.1970501135440501, 0.15102719329301018, 0.16708900717393405, 0.17397781983934169, 0.19855393170688307, 0.18662066962832913, 0.18741181446579858, 0.1890498938695344, 0.1827047352957094, 0.17202342176237395, 0.19417333466573206, 0.18051536919867472, 0.18198123742291328, 0.17068478990813474, 0.05190945113778911, 0.05744232063485055, 0.05198699080206248, 0.04797694229076932, 0.05353645192845524, 0.06794416919370982, 0.05565708061052288, 0.049448913156076246, 0.06383241285944041]}, "mutation_prompt": null}
{"id": "1d89e467-a1a7-4e11-ae25-594aacdf6a83", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by incorporating adaptive pitch adjustment based on local search information.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "8cec77fc-8faf-40da-ab21-e277e9f1c2e5", "metadata": {"aucs": [0.16386897653869437, 0.17392902847870373, 0.16962540107226032, 0.18097402386461625, 0.16518294360200525, 0.1683613988694408, 0.1781901195025144, 0.1896243577670953, 0.16557729832598211, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0469559556977478, 0.04390047383403961, 0.04085047415012888, 0.05743057682031971, 0.042330278030375146, 0.05116345228477692, 0.053552841861146394, 0.03568729055512776, 0.044141624256384016, 0.03266440331876019, 0.033870031859476124, 0.02918338067665427, 0.05808776821060668, 0.030555962308498774, 0.03535613199986587, 0.02706337541817505, 0.026230298885077663, 0.04191962914609082, 0.08424009209468275, 0.09453055877006789, 0.07668144159892909, 0.07245169492801906, 0.08523833040075002, 0.08196855911272383, 0.08561247928499438, 0.08179550651875744, 0.0910767712453533, 0.08250847642461445, 0.08654488594372833, 0.11189390278078903, 0.06683959424991515, 0.051872778589604596, 0.05888259257892292, 0.08173273952117233, 0.08524431832670176, 0.075723878222131, 0.15466947311065793, 0.13296037725832188, 0.1308289854559851, 0.10586441057247498, 0.1384081362804016, 0.1052799324241721, 0.12722371105523456, 0.11395910386459851, 0.15733760426380394, 9.999999999998899e-05, 0.013600279101109614, 9.999999999998899e-05, 9.999999999998899e-05, 0.008658134001203521, 9.999999999998899e-05, 0.00021109967452792588, 9.999999999998899e-05, 0.00408426182692001, 0.0652649875121113, 0.06562770457733025, 0.065597665733368, 0.0620661667193152, 0.06012408078547016, 0.05821281393958322, 0.062227492553832975, 0.06576305446429798, 0.07375948729487847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1018200565762023, 0.0780061272864423, 0.12922949210410328, 0.03482207091727341, 0.03815948218612253, 0.09799365338340593, 0.05188471449773513, 0.06428595585182051, 0.07272207741219205, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007436597149924618, 0.012197497117462208, 0.0016496173846107798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017429698262261262, 9.999999999998899e-05, 0.19218188117200752, 0.2224361463436888, 0.20477568656220357, 0.19162417841722523, 0.18744029805149964, 0.19452339781034766, 0.1937178176816523, 0.20223104434429184, 0.19150351076595706, 0.07409701919902822, 0.04259695202473701, 0.04511291394839623, 0.04477117358048288, 0.038174045169861115, 0.0478487834262471, 0.04048608755532279, 0.04265201786509332, 0.05367541433375611, 0.15524619065835998, 0.12900859394548114, 0.14960108133992323, 0.17095500399915287, 0.145547836753666, 0.1278848947042046, 0.16600909637587624, 0.13222353094619288, 0.14967925059248433, 0.14802658554685966, 0.16070112077034082, 0.1640384285687695, 0.1599196138918706, 0.1668850167857061, 0.16574888144025846, 0.1882086205786151, 0.15481481378424555, 0.17865034742442365, 0.09917318403541908, 0.11133040205476918, 0.10479283737726819, 0.13527356475517827, 0.1304656653583257, 0.1211804203987129, 0.1207035893592503, 0.10379820270983986, 0.11566835139544351, 0.1608354171134928, 0.15024239581940124, 0.1509760841299882, 0.16012603879650456, 0.1943148424509591, 0.1690608108946322, 0.15339370203151337, 0.1503139384954345, 0.18135745826639094, 0.1516433676999993, 0.13863566627288748, 0.15445020925602326, 0.1560552027545733, 0.13406612045586896, 0.15036278660679103, 0.1373833837333901, 0.1461280920168221, 0.14676386453044254, 0.1788311858062821, 0.16075379027949055, 0.19977242703731812, 0.1551461273921637, 0.2029979938743569, 0.20681236347981813, 0.1618859488954285, 0.16912624329142678, 0.16206729652647867, 0.139718651609391, 0.1686242313948273, 0.2077238589876016, 0.15612308417492626, 0.1970501135440501, 0.15102719329301018, 0.16708900717393405, 0.17397781983934169, 0.19855393170688307, 0.18662066962832913, 0.18741181446579858, 0.1890498938695344, 0.1827047352957094, 0.17202342176237395, 0.19417333466573206, 0.18051536919867472, 0.18198123742291328, 0.17068478990813474, 0.05190945113778911, 0.05744232063485055, 0.05198699080206248, 0.04797694229076932, 0.05353645192845524, 0.06794416919370982, 0.05565708061052288, 0.049448913156076246, 0.06383241285944041]}, "mutation_prompt": null}
{"id": "cfc374a3-395c-4e08-8a28-4c45f04b9a93", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearchRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n        self.memory_weight = 0.2\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def adjust_memory(current_memory, harmony, best_solution):\n            return current_memory + self.memory_weight * (best_solution - harmony)\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n            memory = np.zeros(self.dim)\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n                memory = adjust_memory(memory, new_harmony, best_solution)\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearchRefined", "description": "Improve the exploration process by incorporating a dynamic adjustment of pitch and a memory adaptation mechanism to guide search towards better solutions.", "configspace": "", "generation": 62, "fitness": 0.09423831748573966, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearchRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "8cec77fc-8faf-40da-ab21-e277e9f1c2e5", "metadata": {"aucs": [0.16386897653869437, 0.17392902847870373, 0.16962540107226032, 0.18097402386461625, 0.16518294360200525, 0.1683613988694408, 0.1781901195025144, 0.1896243577670953, 0.16557729832598211, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0469559556977478, 0.04390047383403961, 0.04085047415012888, 0.05743057682031971, 0.042330278030375146, 0.05116345228477692, 0.053552841861146394, 0.03568729055512776, 0.044141624256384016, 0.03266440331876019, 0.033870031859476124, 0.02918338067665427, 0.05808776821060668, 0.030555962308498774, 0.03535613199986587, 0.02706337541817505, 0.026230298885077663, 0.04191962914609082, 0.08424009209468275, 0.09453055877006789, 0.07668144159892909, 0.07245169492801906, 0.08523833040075002, 0.08196855911272383, 0.08561247928499438, 0.08179550651875744, 0.0910767712453533, 0.08250847642461445, 0.08654488594372833, 0.11189390278078903, 0.06683959424991515, 0.051872778589604596, 0.05888259257892292, 0.08173273952117233, 0.08524431832670176, 0.075723878222131, 0.15466947311065793, 0.13296037725832188, 0.1308289854559851, 0.10586441057247498, 0.1384081362804016, 0.1052799324241721, 0.12722371105523456, 0.11395910386459851, 0.15733760426380394, 9.999999999998899e-05, 0.013600279101109614, 9.999999999998899e-05, 9.999999999998899e-05, 0.008658134001203521, 9.999999999998899e-05, 0.00021109967452792588, 9.999999999998899e-05, 0.00408426182692001, 0.0652649875121113, 0.06562770457733025, 0.065597665733368, 0.0620661667193152, 0.06012408078547016, 0.05821281393958322, 0.062227492553832975, 0.06576305446429798, 0.07375948729487847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1018200565762023, 0.0780061272864423, 0.12922949210410328, 0.03482207091727341, 0.03815948218612253, 0.09799365338340593, 0.05188471449773513, 0.06428595585182051, 0.07272207741219205, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007436597149924618, 0.012197497117462208, 0.0016496173846107798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017429698262261262, 9.999999999998899e-05, 0.19218188117200752, 0.2224361463436888, 0.20477568656220357, 0.19162417841722523, 0.18744029805149964, 0.19452339781034766, 0.1937178176816523, 0.20223104434429184, 0.19150351076595706, 0.07409701919902822, 0.04259695202473701, 0.04511291394839623, 0.04477117358048288, 0.038174045169861115, 0.0478487834262471, 0.04048608755532279, 0.04265201786509332, 0.05367541433375611, 0.15524619065835998, 0.12900859394548114, 0.14960108133992323, 0.17095500399915287, 0.145547836753666, 0.1278848947042046, 0.16600909637587624, 0.13222353094619288, 0.14967925059248433, 0.14802658554685966, 0.16070112077034082, 0.1640384285687695, 0.1599196138918706, 0.1668850167857061, 0.16574888144025846, 0.1882086205786151, 0.15481481378424555, 0.17865034742442365, 0.09917318403541908, 0.11133040205476918, 0.10479283737726819, 0.13527356475517827, 0.1304656653583257, 0.1211804203987129, 0.1207035893592503, 0.10379820270983986, 0.11566835139544351, 0.1608354171134928, 0.15024239581940124, 0.1509760841299882, 0.16012603879650456, 0.1943148424509591, 0.1690608108946322, 0.15339370203151337, 0.1503139384954345, 0.18135745826639094, 0.1516433676999993, 0.13863566627288748, 0.15445020925602326, 0.1560552027545733, 0.13406612045586896, 0.15036278660679103, 0.1373833837333901, 0.1461280920168221, 0.14676386453044254, 0.1788311858062821, 0.16075379027949055, 0.19977242703731812, 0.1551461273921637, 0.2029979938743569, 0.20681236347981813, 0.1618859488954285, 0.16912624329142678, 0.16206729652647867, 0.139718651609391, 0.1686242313948273, 0.2077238589876016, 0.15612308417492626, 0.1970501135440501, 0.15102719329301018, 0.16708900717393405, 0.17397781983934169, 0.19855393170688307, 0.18662066962832913, 0.18741181446579858, 0.1890498938695344, 0.1827047352957094, 0.17202342176237395, 0.19417333466573206, 0.18051536919867472, 0.18198123742291328, 0.17068478990813474, 0.05190945113778911, 0.05744232063485055, 0.05198699080206248, 0.04797694229076932, 0.05353645192845524, 0.06794416919370982, 0.05565708061052288, 0.049448913156076246, 0.06383241285944041]}, "mutation_prompt": null}
{"id": "3084d105-4329-4490-b275-140c6a7d691b", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by incorporating adaptive pitch adjustment based on local search information.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cec77fc-8faf-40da-ab21-e277e9f1c2e5", "metadata": {"aucs": [0.16386897653869437, 0.17392902847870373, 0.16962540107226032, 0.18097402386461625, 0.16518294360200525, 0.1683613988694408, 0.1781901195025144, 0.1896243577670953, 0.16557729832598211, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0469559556977478, 0.04390047383403961, 0.04085047415012888, 0.05743057682031971, 0.042330278030375146, 0.05116345228477692, 0.053552841861146394, 0.03568729055512776, 0.044141624256384016, 0.03266440331876019, 0.033870031859476124, 0.02918338067665427, 0.05808776821060668, 0.030555962308498774, 0.03535613199986587, 0.02706337541817505, 0.026230298885077663, 0.04191962914609082, 0.08424009209468275, 0.09453055877006789, 0.07668144159892909, 0.07245169492801906, 0.08523833040075002, 0.08196855911272383, 0.08561247928499438, 0.08179550651875744, 0.0910767712453533, 0.08250847642461445, 0.08654488594372833, 0.11189390278078903, 0.06683959424991515, 0.051872778589604596, 0.05888259257892292, 0.08173273952117233, 0.08524431832670176, 0.075723878222131, 0.15466947311065793, 0.13296037725832188, 0.1308289854559851, 0.10586441057247498, 0.1384081362804016, 0.1052799324241721, 0.12722371105523456, 0.11395910386459851, 0.15733760426380394, 9.999999999998899e-05, 0.013600279101109614, 9.999999999998899e-05, 9.999999999998899e-05, 0.008658134001203521, 9.999999999998899e-05, 0.00021109967452792588, 9.999999999998899e-05, 0.00408426182692001, 0.0652649875121113, 0.06562770457733025, 0.065597665733368, 0.0620661667193152, 0.06012408078547016, 0.05821281393958322, 0.062227492553832975, 0.06576305446429798, 0.07375948729487847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1018200565762023, 0.0780061272864423, 0.12922949210410328, 0.03482207091727341, 0.03815948218612253, 0.09799365338340593, 0.05188471449773513, 0.06428595585182051, 0.07272207741219205, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007436597149924618, 0.012197497117462208, 0.0016496173846107798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017429698262261262, 9.999999999998899e-05, 0.19218188117200752, 0.2224361463436888, 0.20477568656220357, 0.19162417841722523, 0.18744029805149964, 0.19452339781034766, 0.1937178176816523, 0.20223104434429184, 0.19150351076595706, 0.07409701919902822, 0.04259695202473701, 0.04511291394839623, 0.04477117358048288, 0.038174045169861115, 0.0478487834262471, 0.04048608755532279, 0.04265201786509332, 0.05367541433375611, 0.15524619065835998, 0.12900859394548114, 0.14960108133992323, 0.17095500399915287, 0.145547836753666, 0.1278848947042046, 0.16600909637587624, 0.13222353094619288, 0.14967925059248433, 0.14802658554685966, 0.16070112077034082, 0.1640384285687695, 0.1599196138918706, 0.1668850167857061, 0.16574888144025846, 0.1882086205786151, 0.15481481378424555, 0.17865034742442365, 0.09917318403541908, 0.11133040205476918, 0.10479283737726819, 0.13527356475517827, 0.1304656653583257, 0.1211804203987129, 0.1207035893592503, 0.10379820270983986, 0.11566835139544351, 0.1608354171134928, 0.15024239581940124, 0.1509760841299882, 0.16012603879650456, 0.1943148424509591, 0.1690608108946322, 0.15339370203151337, 0.1503139384954345, 0.18135745826639094, 0.1516433676999993, 0.13863566627288748, 0.15445020925602326, 0.1560552027545733, 0.13406612045586896, 0.15036278660679103, 0.1373833837333901, 0.1461280920168221, 0.14676386453044254, 0.1788311858062821, 0.16075379027949055, 0.19977242703731812, 0.1551461273921637, 0.2029979938743569, 0.20681236347981813, 0.1618859488954285, 0.16912624329142678, 0.16206729652647867, 0.139718651609391, 0.1686242313948273, 0.2077238589876016, 0.15612308417492626, 0.1970501135440501, 0.15102719329301018, 0.16708900717393405, 0.17397781983934169, 0.19855393170688307, 0.18662066962832913, 0.18741181446579858, 0.1890498938695344, 0.1827047352957094, 0.17202342176237395, 0.19417333466573206, 0.18051536919867472, 0.18198123742291328, 0.17068478990813474, 0.05190945113778911, 0.05744232063485055, 0.05198699080206248, 0.04797694229076932, 0.05353645192845524, 0.06794416919370982, 0.05565708061052288, 0.049448913156076246, 0.06383241285944041]}, "mutation_prompt": null}
{"id": "5e5c63c7-8190-48e7-9fe8-e7fd44bac541", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by incorporating adaptive pitch adjustment based on local search information.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cec77fc-8faf-40da-ab21-e277e9f1c2e5", "metadata": {"aucs": [0.16386897653869437, 0.17392902847870373, 0.16962540107226032, 0.18097402386461625, 0.16518294360200525, 0.1683613988694408, 0.1781901195025144, 0.1896243577670953, 0.16557729832598211, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0469559556977478, 0.04390047383403961, 0.04085047415012888, 0.05743057682031971, 0.042330278030375146, 0.05116345228477692, 0.053552841861146394, 0.03568729055512776, 0.044141624256384016, 0.03266440331876019, 0.033870031859476124, 0.02918338067665427, 0.05808776821060668, 0.030555962308498774, 0.03535613199986587, 0.02706337541817505, 0.026230298885077663, 0.04191962914609082, 0.08424009209468275, 0.09453055877006789, 0.07668144159892909, 0.07245169492801906, 0.08523833040075002, 0.08196855911272383, 0.08561247928499438, 0.08179550651875744, 0.0910767712453533, 0.08250847642461445, 0.08654488594372833, 0.11189390278078903, 0.06683959424991515, 0.051872778589604596, 0.05888259257892292, 0.08173273952117233, 0.08524431832670176, 0.075723878222131, 0.15466947311065793, 0.13296037725832188, 0.1308289854559851, 0.10586441057247498, 0.1384081362804016, 0.1052799324241721, 0.12722371105523456, 0.11395910386459851, 0.15733760426380394, 9.999999999998899e-05, 0.013600279101109614, 9.999999999998899e-05, 9.999999999998899e-05, 0.008658134001203521, 9.999999999998899e-05, 0.00021109967452792588, 9.999999999998899e-05, 0.00408426182692001, 0.0652649875121113, 0.06562770457733025, 0.065597665733368, 0.0620661667193152, 0.06012408078547016, 0.05821281393958322, 0.062227492553832975, 0.06576305446429798, 0.07375948729487847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1018200565762023, 0.0780061272864423, 0.12922949210410328, 0.03482207091727341, 0.03815948218612253, 0.09799365338340593, 0.05188471449773513, 0.06428595585182051, 0.07272207741219205, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007436597149924618, 0.012197497117462208, 0.0016496173846107798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017429698262261262, 9.999999999998899e-05, 0.19218188117200752, 0.2224361463436888, 0.20477568656220357, 0.19162417841722523, 0.18744029805149964, 0.19452339781034766, 0.1937178176816523, 0.20223104434429184, 0.19150351076595706, 0.07409701919902822, 0.04259695202473701, 0.04511291394839623, 0.04477117358048288, 0.038174045169861115, 0.0478487834262471, 0.04048608755532279, 0.04265201786509332, 0.05367541433375611, 0.15524619065835998, 0.12900859394548114, 0.14960108133992323, 0.17095500399915287, 0.145547836753666, 0.1278848947042046, 0.16600909637587624, 0.13222353094619288, 0.14967925059248433, 0.14802658554685966, 0.16070112077034082, 0.1640384285687695, 0.1599196138918706, 0.1668850167857061, 0.16574888144025846, 0.1882086205786151, 0.15481481378424555, 0.17865034742442365, 0.09917318403541908, 0.11133040205476918, 0.10479283737726819, 0.13527356475517827, 0.1304656653583257, 0.1211804203987129, 0.1207035893592503, 0.10379820270983986, 0.11566835139544351, 0.1608354171134928, 0.15024239581940124, 0.1509760841299882, 0.16012603879650456, 0.1943148424509591, 0.1690608108946322, 0.15339370203151337, 0.1503139384954345, 0.18135745826639094, 0.1516433676999993, 0.13863566627288748, 0.15445020925602326, 0.1560552027545733, 0.13406612045586896, 0.15036278660679103, 0.1373833837333901, 0.1461280920168221, 0.14676386453044254, 0.1788311858062821, 0.16075379027949055, 0.19977242703731812, 0.1551461273921637, 0.2029979938743569, 0.20681236347981813, 0.1618859488954285, 0.16912624329142678, 0.16206729652647867, 0.139718651609391, 0.1686242313948273, 0.2077238589876016, 0.15612308417492626, 0.1970501135440501, 0.15102719329301018, 0.16708900717393405, 0.17397781983934169, 0.19855393170688307, 0.18662066962832913, 0.18741181446579858, 0.1890498938695344, 0.1827047352957094, 0.17202342176237395, 0.19417333466573206, 0.18051536919867472, 0.18198123742291328, 0.17068478990813474, 0.05190945113778911, 0.05744232063485055, 0.05198699080206248, 0.04797694229076932, 0.05353645192845524, 0.06794416919370982, 0.05565708061052288, 0.049448913156076246, 0.06383241285944041]}, "mutation_prompt": null}
{"id": "0f89fa63-5405-4119-b937-959cc103a071", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by incorporating adaptive pitch adjustment based on local search information.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cec77fc-8faf-40da-ab21-e277e9f1c2e5", "metadata": {"aucs": [0.16386897653869437, 0.17392902847870373, 0.16962540107226032, 0.18097402386461625, 0.16518294360200525, 0.1683613988694408, 0.1781901195025144, 0.1896243577670953, 0.16557729832598211, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0469559556977478, 0.04390047383403961, 0.04085047415012888, 0.05743057682031971, 0.042330278030375146, 0.05116345228477692, 0.053552841861146394, 0.03568729055512776, 0.044141624256384016, 0.03266440331876019, 0.033870031859476124, 0.02918338067665427, 0.05808776821060668, 0.030555962308498774, 0.03535613199986587, 0.02706337541817505, 0.026230298885077663, 0.04191962914609082, 0.08424009209468275, 0.09453055877006789, 0.07668144159892909, 0.07245169492801906, 0.08523833040075002, 0.08196855911272383, 0.08561247928499438, 0.08179550651875744, 0.0910767712453533, 0.08250847642461445, 0.08654488594372833, 0.11189390278078903, 0.06683959424991515, 0.051872778589604596, 0.05888259257892292, 0.08173273952117233, 0.08524431832670176, 0.075723878222131, 0.15466947311065793, 0.13296037725832188, 0.1308289854559851, 0.10586441057247498, 0.1384081362804016, 0.1052799324241721, 0.12722371105523456, 0.11395910386459851, 0.15733760426380394, 9.999999999998899e-05, 0.013600279101109614, 9.999999999998899e-05, 9.999999999998899e-05, 0.008658134001203521, 9.999999999998899e-05, 0.00021109967452792588, 9.999999999998899e-05, 0.00408426182692001, 0.0652649875121113, 0.06562770457733025, 0.065597665733368, 0.0620661667193152, 0.06012408078547016, 0.05821281393958322, 0.062227492553832975, 0.06576305446429798, 0.07375948729487847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1018200565762023, 0.0780061272864423, 0.12922949210410328, 0.03482207091727341, 0.03815948218612253, 0.09799365338340593, 0.05188471449773513, 0.06428595585182051, 0.07272207741219205, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007436597149924618, 0.012197497117462208, 0.0016496173846107798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017429698262261262, 9.999999999998899e-05, 0.19218188117200752, 0.2224361463436888, 0.20477568656220357, 0.19162417841722523, 0.18744029805149964, 0.19452339781034766, 0.1937178176816523, 0.20223104434429184, 0.19150351076595706, 0.07409701919902822, 0.04259695202473701, 0.04511291394839623, 0.04477117358048288, 0.038174045169861115, 0.0478487834262471, 0.04048608755532279, 0.04265201786509332, 0.05367541433375611, 0.15524619065835998, 0.12900859394548114, 0.14960108133992323, 0.17095500399915287, 0.145547836753666, 0.1278848947042046, 0.16600909637587624, 0.13222353094619288, 0.14967925059248433, 0.14802658554685966, 0.16070112077034082, 0.1640384285687695, 0.1599196138918706, 0.1668850167857061, 0.16574888144025846, 0.1882086205786151, 0.15481481378424555, 0.17865034742442365, 0.09917318403541908, 0.11133040205476918, 0.10479283737726819, 0.13527356475517827, 0.1304656653583257, 0.1211804203987129, 0.1207035893592503, 0.10379820270983986, 0.11566835139544351, 0.1608354171134928, 0.15024239581940124, 0.1509760841299882, 0.16012603879650456, 0.1943148424509591, 0.1690608108946322, 0.15339370203151337, 0.1503139384954345, 0.18135745826639094, 0.1516433676999993, 0.13863566627288748, 0.15445020925602326, 0.1560552027545733, 0.13406612045586896, 0.15036278660679103, 0.1373833837333901, 0.1461280920168221, 0.14676386453044254, 0.1788311858062821, 0.16075379027949055, 0.19977242703731812, 0.1551461273921637, 0.2029979938743569, 0.20681236347981813, 0.1618859488954285, 0.16912624329142678, 0.16206729652647867, 0.139718651609391, 0.1686242313948273, 0.2077238589876016, 0.15612308417492626, 0.1970501135440501, 0.15102719329301018, 0.16708900717393405, 0.17397781983934169, 0.19855393170688307, 0.18662066962832913, 0.18741181446579858, 0.1890498938695344, 0.1827047352957094, 0.17202342176237395, 0.19417333466573206, 0.18051536919867472, 0.18198123742291328, 0.17068478990813474, 0.05190945113778911, 0.05744232063485055, 0.05198699080206248, 0.04797694229076932, 0.05353645192845524, 0.06794416919370982, 0.05565708061052288, 0.049448913156076246, 0.06383241285944041]}, "mutation_prompt": null}
{"id": "487452ea-22f4-4901-b65d-27a728c194ad", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 66, "fitness": 0.09462387887728958, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "8cec77fc-8faf-40da-ab21-e277e9f1c2e5", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "cb6015a5-9dee-4246-8096-baf880b727cf", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "e9538b5c-bdac-4880-bc5d-dfba19acc1aa", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "1b1be15e-423f-41c8-bee5-3eda1d587f97", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, diversity):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * diversity))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, len(set(map(tuple, harmony_memory))))\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, len(set(map(tuple, harmony_memory))))\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()\n", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by incorporating a dynamic pitch adjustment based on the harmony memory diversity.", "configspace": "", "generation": 69, "fitness": 0.09462387887728958, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "7d069ef9-880c-475e-b4ce-f8c947d8ffb1", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "c771b49d-296d-4e15-9830-c02c5a6ca4fb", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def chaotic_map_perturbation(harmony):\n            chaotic_map = np.sin(harmony) * np.cos(harmony)\n            perturbation = np.random.uniform(-1, 1, self.dim) * chaotic_map\n            perturbed_harmony = harmony + perturbation\n            return adjust_value(perturbed_harmony)\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearchImproved", "description": "Improve exploration by introducing a chaotic map-based perturbation to enhance diversity and escape local optima.", "configspace": "", "generation": 71, "fitness": 0.09462387887728958, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "5f6bd8f9-8297-4412-867e-977b85647f52", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "689fc455-3303-4085-b82a-c1e01b3286be", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n        self.learning_rate = 0.1\n\n    def __call__(self, func):\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement) * self.learning_rate)\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Utilize a dynamic learning rate adjustment mechanism based on global search performance to enhance exploration and exploitation balance in the harmony search algorithm.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_harmony' is not defined\").", "error": "NameError(\"name 'initialize_harmony' is not defined\")", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {}, "mutation_prompt": null}
{"id": "a830e2f3-053f-4192-83ab-2b79a69796b2", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration and exploitation balance by incorporating opposition-based learning in local and global search operations.", "configspace": "", "generation": 74, "fitness": 0.09462387887728958, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "029621fc-43ba-474a-b33e-40cd5b61dbbf", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "a9f8ef13-ee25-433b-8589-451c3219134e", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "f340bb99-72f1-48b2-bd89-076c6b7b884f", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "43155365-d2e2-4242-9af3-1fe68135f595", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "a807933e-4a4e-44a3-9d58-976a82c917e3", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "d7799497-128d-4244-98af-877d01d7fa3d", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "f91968ed-7455-4bea-a556-0c3192766a93", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearchRefined(EnhancedDynamicPitchHarmonySearch):\n    def global_search(harmony, func):\n        new_harmony = np.copy(harmony)\n        best_harmony = np.copy(harmony)\n        best_fitness = func(best_harmony)\n\n        for i in range(self.dim):\n            original_value = new_harmony[i]\n            new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                               min(self.upper_bound, original_value + self.pitch_range))\n            new_fitness = func(new_harmony)\n\n            if new_fitness < best_fitness:\n                best_harmony = np.copy(new_harmony)\n                best_fitness = new_fitness\n\n            new_harmony[i] = original_value\n\n        shuffled_harmonies = [np.random.permutation(harmony) for _ in range(self.budget)]\n        for shuffled_harmony in shuffled_harmonies:\n            new_shuffled_harmony = global_search(shuffled_harmony, func)\n            new_shuffled_fitness = func(new_shuffled_harmony)\n            \n            if new_shuffled_fitness < best_fitness:\n                best_harmony = np.copy(new_shuffled_harmony)\n                best_fitness = new_shuffled_fitness\n                \n        return best_harmony", "name": "EnhancedDynamicPitchHarmonySearchRefined", "description": "Enhance exploration and exploitation by incorporating shuffled harmonic vectors in the global search.", "configspace": "", "generation": 81, "fitness": 0.09462387887728958, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearchRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "4fe2c5b6-e8d9-40ae-89ca-1399359c0c41", "solution": "def adjust_bandwidth(bandwidth, diversity):\n     return max(0.001, bandwidth * np.exp(self.bandwidth_adapt_rate * diversity))\n\nclass EnhancedDynamicPitchHarmonySearchImproved(EnhancedDynamicPitchHarmonySearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.bandwidth_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def adjust_bandwidth(bandwidth, diversity):\n            return max(0.001, bandwidth * np.exp(self.bandwidth_adapt_rate * diversity))\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def harmony_search():\n            # Existing harmony_search code\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearchImproved", "description": "Improve exploration by introducing a dynamic bandwidth adjustment mechanism to enhance diversity in the search space.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "An exception occurred: IndentationError('expected an indented block', ('<string>', 19, 9, '        return harmony_search()\\n')).", "error": "IndentationError('expected an indented block', ('<string>', 19, 9, '        return harmony_search()\\n'))", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {}, "mutation_prompt": null}
{"id": "a9e233d8-a17a-4255-a7f4-dc1083bab81b", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "919a4a0b-fa33-4795-a313-31172bb2c0b6", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def ensemble_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return ensemble_search()", "name": "EnhancedDynamicPitchHarmonySearchImproved", "description": "Improve exploration by incorporating a dynamic ensemble approach with opposition-based learning to enhance solution quality and diversity.", "configspace": "", "generation": 84, "fitness": 0.09462387887728958, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "284246a9-28c8-479d-978e-ae24e42d79e8", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "4b79e9e4-8075-4d35-b12b-47fa62325382", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "60f5827a-73e7-41f1-9cc2-b9d8618ae857", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "eed68219-5cbf-4ec3-a039-7c62bbf504b1", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "8a8f17e0-e186-44fc-9097-4b40326962a6", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "834efe8b-3d6d-4772-a70e-f37d3365155b", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearchImprovement:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                # Incorporating Differential Evolution\n                candidate = new_harmony[i] + 0.5 * (new_harmony[np.random.randint(0, self.dim)] - new_harmony[np.random.randint(0, self.dim)])\n                candidate = adjust_value(candidate)\n                if func(candidate) < func_value:\n                    harmony[i] = candidate  # Update if better\n            return harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                harmony_memory = local_search(harmony_memory, new_fitness)  # Updated local search\n\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(harmony_memory[np.argmin([func(h) for h in harmony_memory])])\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearchImprovement", "description": "Improve local search by incorporating differential evolution to enhance exploration and exploitation.", "configspace": "", "generation": 90, "fitness": 0.09414904476921976, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearchImprovement got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16382393042918553, 0.1738858215433975, 0.16958371851124976, 0.18089093002245504, 0.16512143119802658, 0.16828157208466477, 0.17811769683817125, 0.18962477707832504, 0.1655058673942511, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692744017787298, 0.04386995725096965, 0.04089835096768546, 0.05740935937398095, 0.04230796144440885, 0.05113561854782733, 0.053524472495558806, 0.03566389817503257, 0.04411591857039732, 0.03264294048079719, 0.033848697997622024, 0.029209751732238165, 0.05805371941153936, 0.030535073920367917, 0.03533277931666379, 0.027048822625379554, 0.026357578877084786, 0.04189705171925884, 0.0842100313113675, 0.09452413847527019, 0.0766379992324242, 0.07243223736122384, 0.08521184477086241, 0.08192769603398287, 0.08558826824254195, 0.08177053471147522, 0.09102557695766356, 0.08246067429351844, 0.0864984184245724, 0.11183772497788991, 0.06678931670594845, 0.051814595052237955, 0.058852869290106136, 0.08168775154064367, 0.08518409444570774, 0.07566711175913765, 0.1549800490657104, 0.13293029277076307, 0.1321362959420499, 0.10580253341006152, 0.1383344310255712, 0.10520897149395336, 0.12715613652236102, 0.11485218264310793, 0.15725126732700934, 9.999999999998899e-05, 0.013583749907679188, 9.999999999998899e-05, 9.999999999998899e-05, 0.008643490476240023, 9.999999999998899e-05, 0.00020853977419321712, 9.999999999998899e-05, 0.0040788009417408455, 0.056634939518468985, 0.05646744935486603, 0.05949902681952479, 0.060757347305024134, 0.05871086292919858, 0.05488402677236459, 0.05806085032097763, 0.05204547872511589, 0.0637898195050497, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10176713801591919, 0.07795940418813374, 0.12915939580284352, 0.03479464482382433, 0.038137054659864056, 0.09792113015871162, 0.051855575954880107, 0.06424489942953515, 0.07268418413834021, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007403142902783211, 0.012190780017452774, 0.0016487719850556415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017416800084946171, 9.999999999998899e-05, 0.1920870618228162, 0.22240052802141752, 0.20472716636762256, 0.19155196312552147, 0.18747231128784003, 0.19457099356401308, 0.19369043904109162, 0.20217990999741398, 0.19147934019970891, 0.07405814889597295, 0.042573602850853653, 0.04508185496862338, 0.04474598684814923, 0.0381519960308524, 0.04782269229849245, 0.04047128285081458, 0.04262885453919829, 0.053644893079983214, 0.15513797714576538, 0.12895432281542796, 0.14963617366989312, 0.17041786073829734, 0.1454648730016046, 0.12785720338080742, 0.16591553081774313, 0.13223960145841795, 0.14961464948477332, 0.14799590087427916, 0.1606606989468422, 0.16401295298676855, 0.1598717781998632, 0.16682959003610198, 0.16608625284116207, 0.18816797331705715, 0.1551678377959239, 0.18048588167531965, 0.09914099447058544, 0.11128303749813562, 0.10476587457574493, 0.13520275383732916, 0.1303280085312063, 0.12147675312889805, 0.12066692128813405, 0.10385765026273164, 0.11596097418486717, 0.1939656567248721, 0.15043170331668754, 0.1580698782789286, 0.1594564116173982, 0.19443830678082274, 0.16938416472897422, 0.15302547094240926, 0.15008704618492852, 0.18140104956121628, 0.15156515963069617, 0.13856123240977036, 0.1543680384631756, 0.1559662665912832, 0.13398605326554047, 0.15028601281438259, 0.13730474157949812, 0.14604843021568437, 0.14668413324234442, 0.17877162850522677, 0.16069108389771425, 0.19967372412894935, 0.15506480832265335, 0.2029154226560993, 0.20672275661120654, 0.16180804001822124, 0.1690884317986967, 0.16202829815067255, 0.13961213895912328, 0.16855542577354587, 0.2076189013395653, 0.15604520556619483, 0.19696067889104274, 0.15094067725812288, 0.1670053655318181, 0.17389747099756392, 0.1984515668491733, 0.18656259974916967, 0.18736828632569402, 0.18837057277996982, 0.18267994422442013, 0.17207906587406618, 0.1941351650337989, 0.18048571244265643, 0.18193767640717728, 0.17063618411037573, 0.051585376200417477, 0.05784435048897141, 0.05199883994813459, 0.04787350420622383, 0.05352201119403066, 0.06855049085483444, 0.05562527790747662, 0.049410645364669326, 0.06380999488576167]}, "mutation_prompt": null}
{"id": "8429b627-c4fa-4e75-a485-8c577a675fea", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "7028332e-cb4f-437d-972c-0d90bb36471c", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "7fc78739-10c9-4a3d-99c2-d49b3a7e1f4c", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n        self.pitch_adapt_rate_decay = 0.9  # Introduce pitch adaptation rate decay\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n                self.pitch_adapt_rate *= self.pitch_adapt_rate_decay  # Update pitch adaptation rate\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by introducing dynamic adaptation of pitch adjustment rates for improved local and global search capabilities.", "configspace": "", "generation": 93, "fitness": 0.09462387887728958, "feedback": "The algorithm EnhancedDynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "d474f394-927b-4bd6-b9ee-cb8c9a966c3b", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "2866cafb-729a-418d-b08b-3f546ed1ed27", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearchRefined(EnhancedDynamicPitchHarmonySearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.opposition_rate = 0.1\n\n    def __call__(self, func):\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def refine_local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_value = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                              min(self.upper_bound, original_value + self.pitch_range))\n                new_value = adjust_value(new_value)\n                new_fitness = func(new_value)\n                if new_fitness < func_value:\n                    harmony[i] = new_value\n            return new_harmony\n\n        def enhance_global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_value = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                              min(self.upper_bound, original_value + self.pitch_range))\n                new_value = adjust_value(new_value)\n                new_fitness = func(new_value)\n                if new_fitness < func(best_harmony):\n                    best_harmony[i] = new_value\n            return best_harmony\n\n        def harmony_search_refined():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    self.pitch_range *= np.exp(self.pitch_adapt_rate)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = refine_local_search(new_harmony, new_fitness)\n                global_best_harmony = enhance_global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    self.pitch_range *= np.exp(self.pitch_adapt_rate)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search_refined()", "name": "EnhancedDynamicPitchHarmonySearchRefined", "description": "Enhance exploration and exploitation by incorporating dynamic pitch adjustment and opposition-based learning with improved local and global search mechanisms.", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_harmony' is not defined\").", "error": "NameError(\"name 'initialize_harmony' is not defined\")", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {}, "mutation_prompt": null}
{"id": "2c1c4272-161c-4996-ac5c-786f45e7d17f", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "a860e90d-3bd2-4840-b01e-3954c12f8956", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
{"id": "91d60bf2-5255-41b8-9e1a-c57d007755f8", "solution": "import numpy as np\n\nclass EnhancedDynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n        self.pitch_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def adjust_value(value):\n            return np.clip(value, self.lower_bound, self.upper_bound)\n\n        def adjust_pitch(pitch, improvement):\n            return max(0.001, pitch * np.exp(self.pitch_adapt_rate * improvement))\n\n        def local_search(harmony, func_value):\n            new_harmony = np.copy(harmony)\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                if func(new_harmony) < func_value:\n                    harmony[i] = new_harmony[i]  # Update if better\n                else:\n                    new_harmony[i] = original_value  # Revert if not better\n            return new_harmony\n\n        def global_search(harmony, func):\n            new_harmony = np.copy(harmony)\n            best_harmony = np.copy(harmony)\n            best_fitness = func(best_harmony)\n\n            for i in range(self.dim):\n                original_value = new_harmony[i]\n                new_harmony[i] = np.random.uniform(max(self.lower_bound, original_value - self.pitch_range),\n                                                   min(self.upper_bound, original_value + self.pitch_range))\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_harmony = np.copy(new_harmony)\n                    best_fitness = new_fitness\n\n                new_harmony[i] = original_value\n\n            return best_harmony\n\n        def opposition_based_learning(value):\n            return self.lower_bound + self.upper_bound - value\n\n        def harmony_search():\n            harmony_memory = [initialize_harmony() for _ in range(self.budget)]\n            best_solution = np.copy(harmony_memory[0])\n            best_fitness = func(best_solution)\n            pitch = self.pitch_range\n\n            for _ in range(self.budget):\n                new_harmony = np.mean(harmony_memory, axis=0)\n                new_harmony = adjust_value(new_harmony)\n                new_fitness = func(new_harmony)\n\n                if new_fitness < best_fitness:\n                    best_solution = np.copy(new_harmony)\n                    best_fitness = new_fitness\n                    pitch = adjust_pitch(pitch, 1)\n\n                for i in range(self.dim):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                local_best_harmony = local_search(new_harmony, new_fitness)\n                global_best_harmony = global_search(new_harmony, func)\n\n                for i in range(self.budget):\n                    harmony_memory[i] = opposition_based_learning(harmony_memory[i])\n\n                new_harmony_opposite = opposition_based_learning(local_best_harmony)\n                new_fitness_opposite = func(new_harmony_opposite)\n\n                if new_fitness_opposite < best_fitness:\n                    best_solution = np.copy(new_harmony_opposite)\n                    best_fitness = new_fitness_opposite\n                    pitch = adjust_pitch(pitch, 1)\n\n                harmony_memory[np.argmax([func(h) for h in harmony_memory])] = new_harmony\n\n            return best_solution\n\n        return harmony_search()", "name": "EnhancedDynamicPitchHarmonySearch", "description": "Enhance exploration by adapting pitch adjustment based on both local and global search information.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "487452ea-22f4-4901-b65d-27a728c194ad", "metadata": {"aucs": [0.16381724195996916, 0.1738769139121914, 0.1695779344336097, 0.18087494841005702, 0.1650881471603699, 0.1682659149587591, 0.17810264201054782, 0.18953393594765822, 0.1654928459830397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692173707389791, 0.04386385393435577, 0.04082203962013631, 0.05739427686531218, 0.042303498127215566, 0.051130051800437504, 0.053518798622441355, 0.03565875838533772, 0.04411077743320002, 0.0326386479132047, 0.03384443122525116, 0.029159821052721746, 0.058046909651725986, 0.030530896242741856, 0.03532810878002324, 0.0270459120668205, 0.02621179702293064, 0.04189253623389255, 0.08418844685184468, 0.09446958908241199, 0.07662931075912316, 0.07239939748123725, 0.08518867135481267, 0.08191952341823472, 0.0855604191126551, 0.08175389942217393, 0.09101533810012574, 0.08245111386729931, 0.08648912492074123, 0.11182648941731, 0.06677926119715516, 0.05180295834476456, 0.058846924632342756, 0.08167875394453805, 0.08517204966950909, 0.07565575846653905, 0.15482196549013294, 0.13329260169930202, 0.13214608912042336, 0.10579015797757874, 0.1383196899746052, 0.10519477930790966, 0.12714262161578627, 0.11388469408059232, 0.15723399993965026, 9.999999999998899e-05, 0.01358044406899317, 9.999999999998899e-05, 9.999999999998899e-05, 0.00864056177124728, 9.999999999998899e-05, 0.00020802779412620875, 9.999999999998899e-05, 0.004077708764704924, 0.0658693211907736, 0.06562106909948706, 0.065597665733368, 0.06718547209275816, 0.06818422781745226, 0.058208895898990476, 0.06979088391198474, 0.0657552223043022, 0.07394291757113258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10175655430386266, 0.07795005956847201, 0.12914537654259162, 0.0347891596051344, 0.038132569154612383, 0.0979066255137726, 0.051849748246308947, 0.06423668814507821, 0.07267660548357002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007396452053355373, 0.012189436597450753, 0.0016486029051445694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017414220449484263, 9.999999999998899e-05, 0.19206356158861282, 0.22230866207394362, 0.20471746232870625, 0.19153752006718072, 0.18733315711367127, 0.19440871500933832, 0.19367305616714514, 0.2021743623332315, 0.19147844550733584, 0.07405037483536203, 0.04256893301607689, 0.04507564317266877, 0.0447409495016825, 0.03814758620305059, 0.04781747407294157, 0.04045877920511576, 0.04262422187401915, 0.05363878882922868, 0.15513641363373976, 0.12894553835116218, 0.149542313178456, 0.17085403516438724, 0.1454409036272647, 0.12783271586395928, 0.16589626924963974, 0.13215311029028076, 0.14957324787637483, 0.14798976393976304, 0.16065636935948224, 0.16398902924436987, 0.15990899031246786, 0.16687601290209264, 0.16572048490471336, 0.1881598438647455, 0.15477549271533375, 0.17858332237656327, 0.09912785409693203, 0.11128206482354286, 0.1047529770040797, 0.1352502921378833, 0.13058223881318032, 0.12114194099527509, 0.12065958767391094, 0.10374316117449345, 0.11560193335160962, 0.16080008710487037, 0.1503580623717793, 0.15096702084458524, 0.19225456107086725, 0.19437326402137356, 0.16938287784544814, 0.15335686099247414, 0.15258420781724236, 0.21442189447856486, 0.15154951801683547, 0.13854634563714685, 0.15435160430460604, 0.1559484793586252, 0.13397003982747469, 0.15027065805590079, 0.13728901314871966, 0.1460324978554569, 0.14666818698472484, 0.17874746290672916, 0.16068071251107852, 0.1996569408265928, 0.15504854450875116, 0.20288456870016114, 0.20669949401198495, 0.16179210415473877, 0.16905532937257284, 0.16196142652495504, 0.13959015936202035, 0.16854166464928966, 0.2075936290290069, 0.15603053280503265, 0.19693696581921283, 0.15091670985073846, 0.16698915825458627, 0.17388003249842932, 0.19843269775366112, 0.18658052338615538, 0.1873595806976731, 0.18902060226284279, 0.18264626152705132, 0.1719893494649567, 0.1941307385933344, 0.1804777771051207, 0.18194182591504016, 0.17062374427730953, 0.05188573616543013, 0.057414764970285415, 0.052367279897307495, 0.048167979950020756, 0.05352945261718256, 0.06810172846779683, 0.055626267991843115, 0.049696808305984996, 0.06380858538570844]}, "mutation_prompt": null}
