{"id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 0, "fitness": 0.39747727540870514, "feedback": "The algorithm HybridDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.27.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "bdbe5f76-a830-4558-9a19-11659608cb19", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "15e6e2b3-bc3d-46ff-9f5c-110ea0babb05", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "6bd2f3d5-095d-4ec2-bee3-6cccfd5a0da4", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "e20738b1-e49a-405a-b4f8-78634737c4de", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "bc011759-b867-4477-9ebe-6932b106f236", "solution": "import numpy as np\n\nclass EnhancedHybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, min(100, 20 + dim * 5))  # Adjust initial pop size\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control and strategy adjustment\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n                self.population_size = max(20, int(self.population_size * (0.9 + np.random.rand() * 0.2)))\n                population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n                fitness = np.array([func(ind) for ind in population[:self.population_size]])\n                eval_count = self.population_size\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedHybridDifferentialEvolution", "description": "Enhanced Hybrid Differential Evolution with Dynamic Strategy Adaptation to improve convergence via selective population resizing.", "configspace": "", "generation": 5, "fitness": 0.10738673523608332, "feedback": "The algorithm EnhancedHybridDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.10.", "error": "", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.18775033977846944, 0.18775033977846944, 0.18775033977846944, 0.20089307064323259, 0.20089307064323259, 0.20089307064323259, 0.20616405105292757, 0.20616405105292757, 0.20616405105292757, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07094848442839341, 0.07094848442839341, 0.07094848442839341, 0.06750048738231251, 0.06750048738231251, 0.06750048738231251, 0.054711752291753735, 0.054711752291753735, 0.054711752291753735, 0.03400853191006459, 0.03400853191006459, 0.03400853191006459, 0.03875560862188465, 0.03875560862188465, 0.03875560862188465, 0.045730098212173886, 0.045730098212173886, 0.045730098212173886, 0.6963740471984414, 0.6963740471984414, 0.6963740471984414, 0.1638928168233993, 0.1638928168233993, 0.1638928168233993, 0.2090297093166269, 0.2090297093166269, 0.2090297093166269, 0.13019420594098574, 0.13019420594098574, 0.13019420594098574, 0.07183038869900316, 0.07183038869900316, 0.07183038869900316, 0.08647394414961529, 0.08647394414961529, 0.08647394414961529, 0.14404222416401335, 0.14404222416401335, 0.14404222416401335, 0.14847931383309043, 0.14847931383309043, 0.14847931383309043, 0.14712274661610647, 0.14712274661610647, 0.14712274661610647, 0.007609064952200928, 0.007609064952200928, 0.007609064952200928, 0.008864401329943261, 0.008864401329943261, 0.008864401329943261, 0.028925089339401744, 0.028925089339401744, 0.028925089339401744, 0.0014794070343919774, 0.0014794070343919774, 0.0014794070343919774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005194489441396888, 0.0005194489441396888, 0.0005194489441396888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08875029014109093, 0.08875029014109093, 0.08875029014109093, 0.0721598546445481, 0.0721598546445481, 0.0721598546445481, 0.051795018258928405, 0.051795018258928405, 0.051795018258928405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004336493064379665, 0.0004336493064379665, 0.0004336493064379665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21876305608761926, 0.21876305608761926, 0.21876305608761926, 0.20049208106933003, 0.20049208106933003, 0.20049208106933003, 0.19962495352691867, 0.19962495352691867, 0.19962495352691867, 0.05721915024671975, 0.05721915024671975, 0.05721915024671975, 0.05805325242910331, 0.05805325242910331, 0.05805325242910331, 0.04861447149601461, 0.04861447149601461, 0.04861447149601461, 0.13918891866030425, 0.13918891866030425, 0.13918891866030425, 0.13721420809088158, 0.13721420809088158, 0.13721420809088158, 0.14147273664946936, 0.14147273664946936, 0.14147273664946936, 0.16859730953884988, 0.16859730953884988, 0.16859730953884988, 0.15924195539731267, 0.15924195539731267, 0.15924195539731267, 0.17292707152531928, 0.17292707152531928, 0.17292707152531928, 0.12792851053324916, 0.12792851053324916, 0.12792851053324916, 0.14097195792434103, 0.14097195792434103, 0.14097195792434103, 0.11949316427954926, 0.11949316427954926, 0.11949316427954926, 0.1538344452276933, 0.1538344452276933, 0.1538344452276933, 0.16315785351216727, 0.16315785351216727, 0.16315785351216727, 0.1480766008805665, 0.1480766008805665, 0.1480766008805665, 0.14980672713490695, 0.14980672713490695, 0.14980672713490695, 0.15273847078150415, 0.15273847078150415, 0.15273847078150415, 0.15320612337330985, 0.15320612337330985, 0.15320612337330985, 0.1907969207888618, 0.1907969207888618, 0.1907969207888618, 0.1996220618549578, 0.1996220618549578, 0.1996220618549578, 0.14385595494122572, 0.14385595494122572, 0.14385595494122572, 0.1677009435417265, 0.1677009435417265, 0.1677009435417265, 0.14539889214554336, 0.14539889214554336, 0.14539889214554336, 0.154682015693263, 0.154682015693263, 0.154682015693263, 0.19093040785961635, 0.19093040785961635, 0.19093040785961635, 0.18617781644916664, 0.18617781644916664, 0.18617781644916664, 0.17852664318273914, 0.17852664318273914, 0.17852664318273914, 0.06933457050706526, 0.06933457050706526, 0.06933457050706526, 0.08002156838589158, 0.08002156838589158, 0.08002156838589158, 0.048536078269234895, 0.048536078269234895, 0.048536078269234895]}, "mutation_prompt": null}
{"id": "b02daab6-e154-4acb-94c8-ccec3ea891a1", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "2f8c5212-8515-42af-b098-50d43128bb9c", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "49d1deac-17ae-48c4-9f53-86c827915717", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "c837d630-11a7-449c-8403-e61d47ee6bcc", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "5cbd2112-aff7-4a1f-bd09-c4e885076b00", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "dee38162-91eb-41a8-88f5-e92c9ccb7d8d", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "2d852719-c00e-4dfa-98f9-ca388b27e134", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "dab3cadd-167d-49b1-ba3e-f8641376c7d1", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "07057127-d9e4-469f-ba17-aa9abe2c6554", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "6df16fe5-3ad5-42b3-8836-c9b34337dddd", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "abda459c-915e-4815-ad58-644bcbd1f3b2", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "32549b8a-1b2f-47a7-ac0a-987bc5946b69", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "3f8ef2bc-ee72-450f-a4ee-98d3ca7d27b8", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "775525c8-5122-4967-8499-80aa7b5c3a77", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "15e9334b-7f64-4cd1-8882-c8c031133612", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "b12cca0b-d833-4fb2-800a-044b3a897971", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "f5620956-bdad-4be8-b520-053da2632bd2", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "596929f7-deb0-4faa-bf8b-b997bd23cb6d", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "2544378c-4b25-4a4f-a0c4-1f09b2aa54dd", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "5bec9c53-b01d-4728-88b4-40f950dc872d", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "c1776fec-2cb5-4ffd-9f32-1bda4f3fa237", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "a070d469-2f2a-498e-8574-eecabc328b6d", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "d462dfa1-8f88-4ef8-aeef-b587f59e4db5", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "623fa3e4-35ec-4951-af74-7f25a67fcbae", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "1df67637-02f0-41c5-bdd5-c0fd7a971d9a", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "342827ea-26d6-425a-93e5-4c4165335565", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "1f551d6d-f4ad-4936-876b-8a66a18ab3e2", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "0d088a2a-60d1-4165-b432-5a35a16ae6aa", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "6a66e9e9-3eb7-4b74-9d37-f6cec3bf792e", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "0007a351-0a19-4f82-895d-66b86446d9b5", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "e5b2cb83-024b-4fd7-9029-1caa05edcb67", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "024a5e73-7697-4247-82eb-5e6854d8aed2", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "76a2a0cf-84cd-46ba-902c-788b54a3dc8d", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "8e1da0fa-c75a-4b6e-9f3b-450825bdfe75", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "f06b3533-0836-4953-ac3b-02961e1e1dc4", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "0e4f02ff-8220-41bc-949d-20ea5ba65b5d", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "af41a6b0-3812-4172-9d2e-5dd5b0e858f3", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "4c16a37a-efd3-46aa-b76d-b18bc6987bee", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "c7b4fe52-abdf-4f4b-add9-bb3688c0a536", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "be21d2cf-8df2-4f79-9d37-e066e4c58d89", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "08417915-0d9b-4b94-a096-548519c3a137", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "8ef0ec4d-fcca-45c0-bf50-d73fd389aad1", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "b1490c75-395a-4169-8d16-53921332b257", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "6d9516b7-8e57-478a-b077-9ba79e358097", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "80f15db9-c719-4ab5-a4c9-997052bd1689", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "2002f2a8-ce45-4411-93a4-3fbdf4edd3cc", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "734d7329-92a2-43c2-96c5-e0d451ee2ee6", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "9004c2c2-d3df-49f8-8f0b-d03f12e4103a", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "8fec77ae-eea8-4394-b3af-40aa942f12b4", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "02e13267-1f4b-4007-8a19-683bf59e0206", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "952f2e8e-91bb-461b-8e77-dd542b314b07", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "e38833eb-d09b-496b-8c0b-f94bc90fe620", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "da7ddd41-ce1f-45d4-9506-a94e65c90864", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "053608a5-199c-47fe-801b-8ce6bfb2c11c", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 20 + dim * 5\n        self.population_size = self.initial_population_size\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Stochastic Tournament Selection for diversity\n            selected_idx = np.random.choice(self.population_size, self.population_size // 2, replace=False)\n            survivor_idx = selected_idx[np.argsort(fitness[selected_idx])[:self.population_size // 4]]\n            population = population[survivor_idx]\n            fitness = fitness[survivor_idx]\n            self.population_size = len(population) * 2  # Adaptive sizing\n\n            # Reinitialize the rest of the population for exploration\n            additional_population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size - len(population), self.dim))\n            population = np.vstack((population, additional_population))\n            fitness = np.concatenate((fitness, np.array([func(ind) for ind in additional_population])))\n            eval_count += len(additional_population)\n\n            # Adaptive parameter control\n            if eval_count % (self.initial_population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Enhanced Hybrid Differential Evolution with Stochastic Tournament Selection and Adaptive Population Sizing for improved convergence speed.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"Cannot take a larger sample than population when 'replace=False'\").", "error": "ValueError(\"Cannot take a larger sample than population when 'replace=False'\")", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {}, "mutation_prompt": null}
{"id": "ae024cd4-0f41-4305-a577-7cce74e1835e", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "a70d3992-10b9-4b72-9a4c-b739292e3574", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "c71324e7-e58a-42d9-a989-fd91320b037f", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "cbc2053c-fd53-4a58-8767-987a8ffbc410", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "587a02d1-2e56-469d-8ab6-931f51873f50", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "39898af1-36f8-4f55-a453-dcbd6f825d8b", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "9565eb94-9d35-4f8d-aa53-13fa3e3825b0", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "0ff53b4a-1dba-4e21-af2c-2061878c1d12", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "0f49a510-3bf1-4e93-8010-ad9205c548fd", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "47a3cd91-809b-47f7-8980-253e5c1b3633", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "3cef0d03-976b-4a5d-952d-f62a98cf268e", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "dd9c4006-b02b-4b6f-8cfd-c8509b6b2269", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "6ba98e0b-94d9-4fb8-81a6-9043b2ec8306", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "2439412f-9618-4184-ba83-5bfbd15532ed", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "72bd0f32-2311-4a3d-8d39-ab3f3c636ef0", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "5652d182-3c14-4b65-bf72-fd63162f071c", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "0407067c-b371-49f8-a18e-b9b5052fac51", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "972233de-fda6-49cf-b2f3-8505c1a8cdf9", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "3b61cfb6-8afb-45d7-a3a4-240a3a05fb2a", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "0657323b-b054-44d2-ba2d-2ccfa0e68953", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "d5e3cb8a-54dd-45ab-9a13-9605d2e330ca", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "519d96a0-c9d2-4141-b40f-6191ae84e38a", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "07121a0d-b35f-425f-8fde-0b21c771f38b", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "54463527-c8f3-4c8c-970d-138264eca9d5", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "d250576c-865a-46b8-ab3a-d60f19db0fda", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "5a1e1007-aac4-4b69-a475-dfbbf88a8d6f", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "fdf88397-9aa7-439f-8765-d3fb3bda37ee", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "7dc9afa7-bf22-49a8-b592-d68e1bc1c3cc", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "0d78795c-4db8-43fd-9a93-1ec45fa16c20", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "f3fc5c3e-e7cb-4b9c-b733-8cc60f46e2c9", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "34790e1f-1d55-473a-b30c-5b746760b150", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "7fd945fc-a313-4ae7-8ad2-dd124f560598", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "0497bc99-7b6a-4d47-a0de-d82501a4b1c8", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "52b951d4-8749-468c-8566-5c199ed93c15", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "259b9e1b-3c1b-4929-ba36-96d560736c85", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "44c9e5ee-ae2f-414e-9bc6-badfd2afbdb4", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "ace9b1a9-43df-474d-a03f-48292e0c7e21", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "3a57bfe6-5c7a-48c0-a980-53ba8b791031", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "abdd52dd-47b0-4674-a52f-e5dbe3ac935a", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
{"id": "7bb3bdf6-3112-457f-b580-bf6e95de2f16", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + dim * 5\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Adaptive parameter control\n            if eval_count % (self.population_size * 5) == 0:\n                self.mutation_factor = 0.4 + np.random.rand() * 0.2\n                self.crossover_probability = 0.8 + np.random.rand() * 0.2\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Parameter Control designed to dynamically adjust mutation factors and crossover probabilities for robust performance across diverse functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b14e115-0da6-42d3-9191-33ca0c394fe5", "metadata": {"aucs": [0.8198002744543621, 0.8198002744543621, 0.8198002744543621, 0.841123778664898, 0.841123778664898, 0.841123778664898, 0.8428056757279632, 0.8428056757279632, 0.8428056757279632, 0.731389290840665, 0.731389290840665, 0.731389290840665, 0.704507240989, 0.704507240989, 0.704507240989, 0.711217121769119, 0.711217121769119, 0.711217121769119, 0.12190194993326953, 0.12190194993326953, 0.12190194993326953, 0.11673754856062257, 0.11673754856062257, 0.11673754856062257, 0.12418213218959806, 0.12418213218959806, 0.12418213218959806, 0.10838675783157103, 0.10838675783157103, 0.10838675783157103, 0.10976725894312989, 0.10976725894312989, 0.10976725894312989, 0.11205291062786815, 0.11205291062786815, 0.11205291062786815, 0.8830536517734598, 0.8830536517734598, 0.8830536517734598, 0.9234310066088885, 0.9234310066088885, 0.9234310066088885, 0.8493277625258868, 0.8493277625258868, 0.8493277625258868, 0.5426926061227224, 0.5426926061227224, 0.5426926061227224, 0.6101469755873635, 0.6101469755873635, 0.6101469755873635, 0.5486766791410778, 0.5486766791410778, 0.5486766791410778, 0.7781739402934691, 0.7781739402934691, 0.7781739402934691, 0.8210717034288103, 0.8210717034288103, 0.8210717034288103, 0.8414099010071716, 0.8414099010071716, 0.8414099010071716, 0.30750368293626007, 0.30750368293626007, 0.30750368293626007, 0.2350310682328558, 0.2350310682328558, 0.2350310682328558, 0.17036573273041244, 0.17036573273041244, 0.17036573273041244, 0.24810401775367608, 0.24810401775367608, 0.24810401775367608, 0.2482666833952376, 0.2482666833952376, 0.2482666833952376, 0.18143783423489335, 0.18143783423489335, 0.18143783423489335, 0.4788845624681317, 0.4788845624681317, 0.4788845624681317, 0.5100311947411384, 0.5100311947411384, 0.5100311947411384, 0.4992658002957401, 0.4992658002957401, 0.4992658002957401, 0.6480668809368397, 0.6480668809368397, 0.6480668809368397, 0.6193229517574457, 0.6193229517574457, 0.6193229517574457, 0.6245010916121444, 0.6245010916121444, 0.6245010916121444, 0.12024327127182499, 0.12024327127182499, 0.12024327127182499, 0.3847952862971078, 0.3847952862971078, 0.3847952862971078, 0.16569876881354106, 0.16569876881354106, 0.16569876881354106, 0.37976098410967074, 0.37976098410967074, 0.37976098410967074, 0.4121248359350571, 0.4121248359350571, 0.4121248359350571, 0.40948928455666767, 0.40948928455666767, 0.40948928455666767, 0.7593105114859103, 0.7593105114859103, 0.7593105114859103, 0.757258714244138, 0.757258714244138, 0.757258714244138, 0.753259182461422, 0.753259182461422, 0.753259182461422, 0.12552682066373322, 0.12552682066373322, 0.12552682066373322, 0.09261605679022344, 0.09261605679022344, 0.09261605679022344, 0.11356607140185393, 0.11356607140185393, 0.11356607140185393, 0.13818157679292786, 0.13818157679292786, 0.13818157679292786, 0.1484773404401245, 0.1484773404401245, 0.1484773404401245, 0.14598050567232335, 0.14598050567232335, 0.14598050567232335, 0.43951096661441424, 0.43951096661441424, 0.43951096661441424, 0.477073257886251, 0.477073257886251, 0.477073257886251, 0.4695882447237478, 0.4695882447237478, 0.4695882447237478, 0.3955311125776618, 0.3955311125776618, 0.3955311125776618, 0.37115314119104503, 0.37115314119104503, 0.37115314119104503, 0.37982408347564656, 0.37982408347564656, 0.37982408347564656, 0.1890119977430189, 0.1890119977430189, 0.1890119977430189, 0.19872981924990607, 0.19872981924990607, 0.19872981924990607, 0.1885446763610834, 0.1885446763610834, 0.1885446763610834, 0.20036744328088452, 0.20036744328088452, 0.20036744328088452, 0.2940363452074761, 0.2940363452074761, 0.2940363452074761, 0.24846868735084404, 0.24846868735084404, 0.24846868735084404, 0.7455113854838623, 0.7455113854838623, 0.7455113854838623, 0.15824072713612036, 0.15824072713612036, 0.15824072713612036, 0.17826566561188772, 0.17826566561188772, 0.17826566561188772, 0.2059036919879036, 0.2059036919879036, 0.2059036919879036, 0.15674750901528955, 0.15674750901528955, 0.15674750901528955, 0.6946561500269411, 0.6946561500269411, 0.6946561500269411, 0.16894509658090373, 0.16894509658090373, 0.16894509658090373, 0.18824592056814027, 0.18824592056814027, 0.18824592056814027, 0.20739249210955102, 0.20739249210955102, 0.20739249210955102, 0.08679219631738688, 0.08679219631738688, 0.08679219631738688, 0.08169202562310751, 0.08169202562310751, 0.08169202562310751, 0.07520431425147633, 0.07520431425147633, 0.07520431425147633]}, "mutation_prompt": null}
